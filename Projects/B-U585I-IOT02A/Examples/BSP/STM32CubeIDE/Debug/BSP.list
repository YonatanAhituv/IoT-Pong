
BSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021720  08000238  08000238  00010238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00016f68  08021958  08021958  00031958  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080388c0  080388c0  000507d0  2**0
                  CONTENTS
  4 .ARM          00000000  080388c0  080388c0  000507d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080388c0  080388c0  000507d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080388c0  080388c0  000488c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080388c8  080388c8  000488c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000007d0  20000000  080388d0  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00034f70  200007d0  080390a0  000507d0  2**2
                  ALLOC
 10 ._user_heap_stack 00001200  20035740  080390a0  00055740  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000507d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00050806  2**0
                  CONTENTS, READONLY
 13 .debug_info   000467d2  00000000  00000000  00050849  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007e0f  00000000  00000000  0009701b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000038e0  00000000  00000000  0009ee30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002b7d  00000000  00000000  000a2710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000511cb  00000000  00000000  000a528d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00054f41  00000000  00000000  000f6458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001cba4a  00000000  00000000  0014b399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00010ba0  00000000  00000000  00316de4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000096  00000000  00000000  00327984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200007d0 	.word	0x200007d0
 8000254:	00000000 	.word	0x00000000
 8000258:	0802193c 	.word	0x0802193c

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200007d4 	.word	0x200007d4
 8000274:	0802193c 	.word	0x0802193c

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	; 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2uiz>:
 8000bb0:	004a      	lsls	r2, r1, #1
 8000bb2:	d211      	bcs.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bb4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb8:	d211      	bcs.n	8000bde <__aeabi_d2uiz+0x2e>
 8000bba:	d50d      	bpl.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bbc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc4:	d40e      	bmi.n	8000be4 <__aeabi_d2uiz+0x34>
 8000bc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d102      	bne.n	8000bea <__aeabi_d2uiz+0x3a>
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be8:	4770      	bx	lr
 8000bea:	f04f 0000 	mov.w	r0, #0
 8000bee:	4770      	bx	lr

08000bf0 <__aeabi_d2f>:
 8000bf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf8:	bf24      	itt	cs
 8000bfa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bfe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c02:	d90d      	bls.n	8000c20 <__aeabi_d2f+0x30>
 8000c04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c18:	bf08      	it	eq
 8000c1a:	f020 0001 	biceq.w	r0, r0, #1
 8000c1e:	4770      	bx	lr
 8000c20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c24:	d121      	bne.n	8000c6a <__aeabi_d2f+0x7a>
 8000c26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c2a:	bfbc      	itt	lt
 8000c2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c30:	4770      	bxlt	lr
 8000c32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3a:	f1c2 0218 	rsb	r2, r2, #24
 8000c3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c46:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4a:	bf18      	it	ne
 8000c4c:	f040 0001 	orrne.w	r0, r0, #1
 8000c50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c5c:	ea40 000c 	orr.w	r0, r0, ip
 8000c60:	fa23 f302 	lsr.w	r3, r3, r2
 8000c64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c68:	e7cc      	b.n	8000c04 <__aeabi_d2f+0x14>
 8000c6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6e:	d107      	bne.n	8000c80 <__aeabi_d2f+0x90>
 8000c70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c74:	bf1e      	ittt	ne
 8000c76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c7e:	4770      	bxne	lr
 8000c80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <__aeabi_d2lz>:
 8000c90:	b538      	push	{r3, r4, r5, lr}
 8000c92:	2200      	movs	r2, #0
 8000c94:	2300      	movs	r3, #0
 8000c96:	4604      	mov	r4, r0
 8000c98:	460d      	mov	r5, r1
 8000c9a:	f7ff ff23 	bl	8000ae4 <__aeabi_dcmplt>
 8000c9e:	b928      	cbnz	r0, 8000cac <__aeabi_d2lz+0x1c>
 8000ca0:	4620      	mov	r0, r4
 8000ca2:	4629      	mov	r1, r5
 8000ca4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca8:	f000 b80a 	b.w	8000cc0 <__aeabi_d2ulz>
 8000cac:	4620      	mov	r0, r4
 8000cae:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cb2:	f000 f805 	bl	8000cc0 <__aeabi_d2ulz>
 8000cb6:	4240      	negs	r0, r0
 8000cb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cbc:	bd38      	pop	{r3, r4, r5, pc}
 8000cbe:	bf00      	nop

08000cc0 <__aeabi_d2ulz>:
 8000cc0:	b5d0      	push	{r4, r6, r7, lr}
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <__aeabi_d2ulz+0x34>)
 8000cc6:	4606      	mov	r6, r0
 8000cc8:	460f      	mov	r7, r1
 8000cca:	f7ff fc99 	bl	8000600 <__aeabi_dmul>
 8000cce:	f7ff ff6f 	bl	8000bb0 <__aeabi_d2uiz>
 8000cd2:	4604      	mov	r4, r0
 8000cd4:	f7ff fc1a 	bl	800050c <__aeabi_ui2d>
 8000cd8:	2200      	movs	r2, #0
 8000cda:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <__aeabi_d2ulz+0x38>)
 8000cdc:	f7ff fc90 	bl	8000600 <__aeabi_dmul>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	460b      	mov	r3, r1
 8000ce4:	4630      	mov	r0, r6
 8000ce6:	4639      	mov	r1, r7
 8000ce8:	f7ff fad2 	bl	8000290 <__aeabi_dsub>
 8000cec:	f7ff ff60 	bl	8000bb0 <__aeabi_d2uiz>
 8000cf0:	4621      	mov	r1, r4
 8000cf2:	bdd0      	pop	{r4, r6, r7, pc}
 8000cf4:	3df00000 	.word	0x3df00000
 8000cf8:	41f00000 	.word	0x41f00000

08000cfc <BSP_LED_Init>:
  *            @arg  LED6
  *            @arg  LED7
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08a      	sub	sp, #40	; 0x28
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000d06:	2300      	movs	r3, #0
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  LED6_GPIO_CLK_ENABLE();
 8000d0a:	4b22      	ldr	r3, [pc, #136]	; (8000d94 <BSP_LED_Init+0x98>)
 8000d0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d10:	4a20      	ldr	r2, [pc, #128]	; (8000d94 <BSP_LED_Init+0x98>)
 8000d12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d16:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d1a:	4b1e      	ldr	r3, [pc, #120]	; (8000d94 <BSP_LED_Init+0x98>)
 8000d1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	68fb      	ldr	r3, [r7, #12]
  LED7_GPIO_CLK_ENABLE();
 8000d28:	4b1a      	ldr	r3, [pc, #104]	; (8000d94 <BSP_LED_Init+0x98>)
 8000d2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d2e:	4a19      	ldr	r2, [pc, #100]	; (8000d94 <BSP_LED_Init+0x98>)
 8000d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d34:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d38:	4b16      	ldr	r3, [pc, #88]	; (8000d94 <BSP_LED_Init+0x98>)
 8000d3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000d46:	2301      	movs	r3, #1
 8000d48:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Pin = LED_PIN [Led];
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	4a10      	ldr	r2, [pc, #64]	; (8000d98 <BSP_LED_Init+0x9c>)
 8000d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d5a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	4a0f      	ldr	r2, [pc, #60]	; (8000d9c <BSP_LED_Init+0xa0>)
 8000d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d64:	f107 0210 	add.w	r2, r7, #16
 8000d68:	4611      	mov	r1, r2
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f012 fea6 	bl	8013abc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN[Led], GPIO_PIN_SET);
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	4a0a      	ldr	r2, [pc, #40]	; (8000d9c <BSP_LED_Init+0xa0>)
 8000d74:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	4a07      	ldr	r2, [pc, #28]	; (8000d98 <BSP_LED_Init+0x9c>)
 8000d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	2201      	movs	r2, #1
 8000d84:	4619      	mov	r1, r3
 8000d86:	f013 f967 	bl	8014058 <HAL_GPIO_WritePin>

  return ret;
 8000d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3728      	adds	r7, #40	; 0x28
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	46020c00 	.word	0x46020c00
 8000d98:	080226ec 	.word	0x080226ec
 8000d9c:	20000000 	.word	0x20000000

08000da0 <BSP_LED_DeInit>:
  *            @arg  LED6
  *            @arg  LED7
  * @retval BSP status
  */
int32_t BSP_LED_DeInit(Led_TypeDef Led)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61fb      	str	r3, [r7, #28]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN [Led];
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	4a0f      	ldr	r2, [pc, #60]	; (8000df0 <BSP_LED_DeInit+0x50>)
 8000db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db6:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_WritePin(LED_PORT[Led], (uint16_t)LED_PIN[Led], GPIO_PIN_RESET);
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	4a0e      	ldr	r2, [pc, #56]	; (8000df4 <BSP_LED_DeInit+0x54>)
 8000dbc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	4a0b      	ldr	r2, [pc, #44]	; (8000df0 <BSP_LED_DeInit+0x50>)
 8000dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	2200      	movs	r2, #0
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f013 f943 	bl	8014058 <HAL_GPIO_WritePin>
  HAL_GPIO_DeInit(LED_PORT[Led], gpio_init_structure.Pin);
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	4a07      	ldr	r2, [pc, #28]	; (8000df4 <BSP_LED_DeInit+0x54>)
 8000dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	4611      	mov	r1, r2
 8000dde:	4618      	mov	r0, r3
 8000de0:	f013 f844 	bl	8013e6c <HAL_GPIO_DeInit>

  return ret;
 8000de4:	69fb      	ldr	r3, [r7, #28]
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3720      	adds	r7, #32
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	080226ec 	.word	0x080226ec
 8000df4:	20000000 	.word	0x20000000

08000df8 <BSP_LED_On>:
  *            @arg  LED6
  *            @arg  LED7
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	4a09      	ldr	r2, [pc, #36]	; (8000e2c <BSP_LED_On+0x34>)
 8000e06:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	4a08      	ldr	r2, [pc, #32]	; (8000e30 <BSP_LED_On+0x38>)
 8000e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	2200      	movs	r2, #0
 8000e16:	4619      	mov	r1, r3
 8000e18:	f013 f91e 	bl	8014058 <HAL_GPIO_WritePin>
  ret = BSP_ERROR_NONE;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60fb      	str	r3, [r7, #12]

  return ret;
 8000e20:	68fb      	ldr	r3, [r7, #12]
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000000 	.word	0x20000000
 8000e30:	080226ec 	.word	0x080226ec

08000e34 <BSP_LED_Off>:
  *            @arg  LED6
  *            @arg  LED7
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	4a09      	ldr	r2, [pc, #36]	; (8000e68 <BSP_LED_Off+0x34>)
 8000e42:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	4a08      	ldr	r2, [pc, #32]	; (8000e6c <BSP_LED_Off+0x38>)
 8000e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	2201      	movs	r2, #1
 8000e52:	4619      	mov	r1, r3
 8000e54:	f013 f900 	bl	8014058 <HAL_GPIO_WritePin>
  ret = BSP_ERROR_NONE;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60fb      	str	r3, [r7, #12]

  return ret;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000000 	.word	0x20000000
 8000e6c:	080226ec 	.word	0x080226ec

08000e70 <BSP_LED_Toggle>:
  *            @arg  LED5
  *            @arg  LED7
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  HAL_GPIO_TogglePin(LED_PORT[Led], (uint16_t)LED_PIN[Led]);
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	4a09      	ldr	r2, [pc, #36]	; (8000ea4 <BSP_LED_Toggle+0x34>)
 8000e7e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	4908      	ldr	r1, [pc, #32]	; (8000ea8 <BSP_LED_Toggle+0x38>)
 8000e86:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4610      	mov	r0, r2
 8000e90:	f013 f8fa 	bl	8014088 <HAL_GPIO_TogglePin>
  ret = BSP_ERROR_NONE;
 8000e94:	2300      	movs	r3, #0
 8000e96:	60fb      	str	r3, [r7, #12]

  return ret;
 8000e98:	68fb      	ldr	r3, [r7, #12]
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000000 	.word	0x20000000
 8000ea8:	080226ec 	.word	0x080226ec

08000eac <BSP_LED_GetState>:
  *            @arg  LED5
  *            @arg  LED7
  * @retval LED status
  */
int32_t BSP_LED_GetState(Led_TypeDef Led)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
  if ((Led != LED6) && (Led != LED7))
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d005      	beq.n	8000ec8 <BSP_LED_GetState+0x1c>
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d002      	beq.n	8000ec8 <BSP_LED_GetState+0x1c>
  {
    return BSP_ERROR_WRONG_PARAM;
 8000ec2:	f06f 0301 	mvn.w	r3, #1
 8000ec6:	e012      	b.n	8000eee <BSP_LED_GetState+0x42>
  }
  else if (HAL_GPIO_ReadPin(LED_PORT[Led], (uint16_t)LED_PIN[Led]) == GPIO_PIN_RESET)
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	4a0b      	ldr	r2, [pc, #44]	; (8000ef8 <BSP_LED_GetState+0x4c>)
 8000ecc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	490a      	ldr	r1, [pc, #40]	; (8000efc <BSP_LED_GetState+0x50>)
 8000ed4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ed8:	b29b      	uxth	r3, r3
 8000eda:	4619      	mov	r1, r3
 8000edc:	4610      	mov	r0, r2
 8000ede:	f013 f8a3 	bl	8014028 <HAL_GPIO_ReadPin>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d101      	bne.n	8000eec <BSP_LED_GetState+0x40>
  {
    /* Led is On */
    return 1;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e000      	b.n	8000eee <BSP_LED_GetState+0x42>
  }
  else
  {
    /* Led is Off */
    return 0;
 8000eec:	2300      	movs	r3, #0
  }
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000000 	.word	0x20000000
 8000efc:	080226ec 	.word	0x080226ec

08000f00 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08a      	sub	sp, #40	; 0x28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	460a      	mov	r2, r1
 8000f0a:	71fb      	strb	r3, [r7, #7]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000f10:	2300      	movs	r3, #0
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitTypeDef gpio_init_structure;
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback,};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY,};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE,};

  if (Button != BUTTON_USER)
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d003      	beq.n	8000f22 <BSP_PB_Init+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000f1a:	f06f 0301 	mvn.w	r3, #1
 8000f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8000f20:	e05c      	b.n	8000fdc <BSP_PB_Init+0xdc>
  }
  else
  {
    /* Enable the BUTTON clock*/
    BUTTON_USER_GPIO_CLK_ENABLE();
 8000f22:	4b31      	ldr	r3, [pc, #196]	; (8000fe8 <BSP_PB_Init+0xe8>)
 8000f24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f28:	4a2f      	ldr	r2, [pc, #188]	; (8000fe8 <BSP_PB_Init+0xe8>)
 8000f2a:	f043 0304 	orr.w	r3, r3, #4
 8000f2e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000f32:	4b2d      	ldr	r3, [pc, #180]	; (8000fe8 <BSP_PB_Init+0xe8>)
 8000f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f38:	f003 0304 	and.w	r3, r3, #4
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	68fb      	ldr	r3, [r7, #12]

    gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000f40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f44:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000f46:	2302      	movs	r3, #2
 8000f48:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	61fb      	str	r3, [r7, #28]

    if (ButtonMode == BUTTON_MODE_GPIO)
 8000f4e:	79bb      	ldrb	r3, [r7, #6]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d10c      	bne.n	8000f6e <BSP_PB_Init+0x6e>
    {
      /* Configure Button pin as input */
      gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]
      HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	4a24      	ldr	r2, [pc, #144]	; (8000fec <BSP_PB_Init+0xec>)
 8000f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f60:	f107 0210 	add.w	r2, r7, #16
 8000f64:	4611      	mov	r1, r2
 8000f66:	4618      	mov	r0, r3
 8000f68:	f012 fda8 	bl	8013abc <HAL_GPIO_Init>
 8000f6c:	e036      	b.n	8000fdc <BSP_PB_Init+0xdc>
    }
    else /* (ButtonMode == BUTTON_MODE_EXTI) */
    {
      /* Configure Button pin as input with External interrupt */
      gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000f6e:	4b20      	ldr	r3, [pc, #128]	; (8000ff0 <BSP_PB_Init+0xf0>)
 8000f70:	617b      	str	r3, [r7, #20]

      HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	4a1d      	ldr	r2, [pc, #116]	; (8000fec <BSP_PB_Init+0xec>)
 8000f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f7a:	f107 0210 	add.w	r2, r7, #16
 8000f7e:	4611      	mov	r1, r2
 8000f80:	4618      	mov	r0, r3
 8000f82:	f012 fd9b 	bl	8013abc <HAL_GPIO_Init>

      (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000f86:	79fa      	ldrb	r2, [r7, #7]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	4413      	add	r3, r2
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	4a18      	ldr	r2, [pc, #96]	; (8000ff4 <BSP_PB_Init+0xf4>)
 8000f92:	441a      	add	r2, r3
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	4918      	ldr	r1, [pc, #96]	; (8000ff8 <BSP_PB_Init+0xf8>)
 8000f98:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4610      	mov	r0, r2
 8000fa0:	f012 fd30 	bl	8013a04 <HAL_EXTI_GetHandle>
      (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000fa4:	79fa      	ldrb	r2, [r7, #7]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	4413      	add	r3, r2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	4a11      	ldr	r2, [pc, #68]	; (8000ff4 <BSP_PB_Init+0xf4>)
 8000fb0:	1898      	adds	r0, r3, r2
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	4a11      	ldr	r2, [pc, #68]	; (8000ffc <BSP_PB_Init+0xfc>)
 8000fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	f012 fcf5 	bl	80139ac <HAL_EXTI_RegisterCallback>

      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000fc2:	2018      	movs	r0, #24
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	4a0e      	ldr	r2, [pc, #56]	; (8001000 <BSP_PB_Init+0x100>)
 8000fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	4619      	mov	r1, r3
 8000fd0:	f010 fcb7 	bl	8011942 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000fd4:	2318      	movs	r3, #24
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f010 fccd 	bl	8011976 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3728      	adds	r7, #40	; 0x28
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	46020c00 	.word	0x46020c00
 8000fec:	20000008 	.word	0x20000008
 8000ff0:	10110000 	.word	0x10110000
 8000ff4:	200007ec 	.word	0x200007ec
 8000ff8:	080226f4 	.word	0x080226f4
 8000ffc:	2000000c 	.word	0x2000000c
 8001000:	20000010 	.word	0x20000010

08001004 <BSP_PB_DeInit>:
  *            @arg  BUTTON_USER: User Push Button
  * @note PB DeInit does not disable the GPIO clock
  * @retval BSP status
  */
int32_t BSP_PB_DeInit(Button_TypeDef Button)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b088      	sub	sp, #32
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800100e:	2300      	movs	r3, #0
 8001010:	61fb      	str	r3, [r7, #28]
  GPIO_InitTypeDef gpio_init_structure;

  if (Button != BUTTON_USER)
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d003      	beq.n	8001020 <BSP_PB_DeInit+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001018:	f06f 0301 	mvn.w	r3, #1
 800101c:	61fb      	str	r3, [r7, #28]
 800101e:	e00f      	b.n	8001040 <BSP_PB_DeInit+0x3c>
  }
  else
  {
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8001020:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001024:	60bb      	str	r3, [r7, #8]
    HAL_NVIC_DisableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8001026:	2318      	movs	r3, #24
 8001028:	4618      	mov	r0, r3
 800102a:	f010 fcb2 	bl	8011992 <HAL_NVIC_DisableIRQ>
    HAL_GPIO_DeInit(BUTTON_PORT[Button], gpio_init_structure.Pin);
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	4a06      	ldr	r2, [pc, #24]	; (800104c <BSP_PB_DeInit+0x48>)
 8001032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001036:	68ba      	ldr	r2, [r7, #8]
 8001038:	4611      	mov	r1, r2
 800103a:	4618      	mov	r0, r3
 800103c:	f012 ff16 	bl	8013e6c <HAL_GPIO_DeInit>
  }

  return ret;
 8001040:	69fb      	ldr	r3, [r7, #28]
}
 8001042:	4618      	mov	r0, r3
 8001044:	3720      	adds	r7, #32
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000008 	.word	0x20000008

08001050 <BSP_PB_GetState>:
  *          This parameter can be one of the following values:
  *            @arg  BUTTON_USER: User Push Button
  * @retval The Button GPIO pin value
  */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	71fb      	strb	r3, [r7, #7]
  return (int32_t)HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	4a06      	ldr	r2, [pc, #24]	; (8001078 <BSP_PB_GetState+0x28>)
 800105e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001062:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001066:	4611      	mov	r1, r2
 8001068:	4618      	mov	r0, r3
 800106a:	f012 ffdd 	bl	8014028 <HAL_GPIO_ReadPin>
 800106e:	4603      	mov	r3, r0
}
 8001070:	4618      	mov	r0, r3
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000008 	.word	0x20000008

0800107c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  KEY EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001080:	2000      	movs	r0, #0
 8001082:	f019 f99b 	bl	801a3bc <BSP_PB_Callback>
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <BSP_AUDIO_IN_Init>:
  * @param  Instance Audio in instance.
  * @param  AudioInit Audio in init structure.
  * @retval BSP status.
  */
int32_t BSP_AUDIO_IN_Init(uint32_t Instance, BSP_AUDIO_Init_t *AudioInit)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08e      	sub	sp, #56	; 0x38
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8001096:	2300      	movs	r3, #0
 8001098:	637b      	str	r3, [r7, #52]	; 0x34

  /* Check parameters and state */
  if (Instance >= AUDIO_IN_INSTANCES_NBR)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d003      	beq.n	80010a8 <BSP_AUDIO_IN_Init+0x1c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 80010a0:	f06f 0301 	mvn.w	r3, #1
 80010a4:	637b      	str	r3, [r7, #52]	; 0x34
 80010a6:	e0d3      	b.n	8001250 <BSP_AUDIO_IN_Init+0x1c4>
  }
  else if (Audio_In_Ctx[Instance].State != AUDIO_IN_STATE_RESET)
 80010a8:	4a6c      	ldr	r2, [pc, #432]	; (800125c <BSP_AUDIO_IN_Init+0x1d0>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	015b      	lsls	r3, r3, #5
 80010ae:	4413      	add	r3, r2
 80010b0:	331c      	adds	r3, #28
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d003      	beq.n	80010c0 <BSP_AUDIO_IN_Init+0x34>
  {
    status = BSP_ERROR_BUSY;
 80010b8:	f06f 0302 	mvn.w	r3, #2
 80010bc:	637b      	str	r3, [r7, #52]	; 0x34
 80010be:	e0c7      	b.n	8001250 <BSP_AUDIO_IN_Init+0x1c4>
  }
  else if (AudioInit->BitsPerSample != AUDIO_RESOLUTION_16B)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	2b10      	cmp	r3, #16
 80010c6:	d003      	beq.n	80010d0 <BSP_AUDIO_IN_Init+0x44>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80010c8:	f06f 030a 	mvn.w	r3, #10
 80010cc:	637b      	str	r3, [r7, #52]	; 0x34
 80010ce:	e0bf      	b.n	8001250 <BSP_AUDIO_IN_Init+0x1c4>
  }
  else if ((AudioInit->ChannelsNbr == 1U) && (AudioInit->ChannelsNbr ==  AUDIO_IN_DEVICE_DIGITAL_MIC))
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d107      	bne.n	80010e8 <BSP_AUDIO_IN_Init+0x5c>
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	2b03      	cmp	r3, #3
 80010de:	d103      	bne.n	80010e8 <BSP_AUDIO_IN_Init+0x5c>
  {
    /* Stereo mode is working only with 2 michrophones */
    status = BSP_ERROR_WRONG_PARAM;
 80010e0:	f06f 0301 	mvn.w	r3, #1
 80010e4:	637b      	str	r3, [r7, #52]	; 0x34
 80010e6:	e0b3      	b.n	8001250 <BSP_AUDIO_IN_Init+0x1c4>
  }
  else
  {
    /* Fill audio in context structure */
    Audio_In_Ctx[Instance].Device         = AudioInit->Device;
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	495b      	ldr	r1, [pc, #364]	; (800125c <BSP_AUDIO_IN_Init+0x1d0>)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	015b      	lsls	r3, r3, #5
 80010f2:	440b      	add	r3, r1
 80010f4:	601a      	str	r2, [r3, #0]
    Audio_In_Ctx[Instance].SampleRate     = AudioInit->SampleRate;
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685a      	ldr	r2, [r3, #4]
 80010fa:	4958      	ldr	r1, [pc, #352]	; (800125c <BSP_AUDIO_IN_Init+0x1d0>)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	015b      	lsls	r3, r3, #5
 8001100:	440b      	add	r3, r1
 8001102:	3304      	adds	r3, #4
 8001104:	601a      	str	r2, [r3, #0]
    Audio_In_Ctx[Instance].BitsPerSample  = AudioInit->BitsPerSample;
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	689a      	ldr	r2, [r3, #8]
 800110a:	4954      	ldr	r1, [pc, #336]	; (800125c <BSP_AUDIO_IN_Init+0x1d0>)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	015b      	lsls	r3, r3, #5
 8001110:	440b      	add	r3, r1
 8001112:	3308      	adds	r3, #8
 8001114:	601a      	str	r2, [r3, #0]
    Audio_In_Ctx[Instance].ChannelsNbr    = AudioInit->ChannelsNbr;
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	68da      	ldr	r2, [r3, #12]
 800111a:	4950      	ldr	r1, [pc, #320]	; (800125c <BSP_AUDIO_IN_Init+0x1d0>)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	015b      	lsls	r3, r3, #5
 8001120:	440b      	add	r3, r1
 8001122:	330c      	adds	r3, #12
 8001124:	601a      	str	r2, [r3, #0]
    Audio_In_Ctx[Instance].Volume         = AudioInit->Volume;
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	691a      	ldr	r2, [r3, #16]
 800112a:	494c      	ldr	r1, [pc, #304]	; (800125c <BSP_AUDIO_IN_Init+0x1d0>)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	015b      	lsls	r3, r3, #5
 8001130:	440b      	add	r3, r1
 8001132:	3318      	adds	r3, #24
 8001134:	601a      	str	r2, [r3, #0]

    /* Set MDF instance according to the selected MIC */
    if ((Audio_In_Ctx[Instance].Device & AUDIO_IN_DEVICE_DIGITAL_MIC) == AUDIO_IN_DEVICE_DIGITAL_MIC)
 8001136:	4a49      	ldr	r2, [pc, #292]	; (800125c <BSP_AUDIO_IN_Init+0x1d0>)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	015b      	lsls	r3, r3, #5
 800113c:	4413      	add	r3, r2
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0303 	and.w	r3, r3, #3
 8001144:	2b03      	cmp	r3, #3
 8001146:	d106      	bne.n	8001156 <BSP_AUDIO_IN_Init+0xca>
    {
      haudio_in_mdf_filter[0].Instance = ADF1_Filter0;
 8001148:	4b45      	ldr	r3, [pc, #276]	; (8001260 <BSP_AUDIO_IN_Init+0x1d4>)
 800114a:	4a46      	ldr	r2, [pc, #280]	; (8001264 <BSP_AUDIO_IN_Init+0x1d8>)
 800114c:	601a      	str	r2, [r3, #0]
      haudio_in_mdf_filter[1].Instance = MDF1_Filter0;
 800114e:	4b44      	ldr	r3, [pc, #272]	; (8001260 <BSP_AUDIO_IN_Init+0x1d4>)
 8001150:	4a45      	ldr	r2, [pc, #276]	; (8001268 <BSP_AUDIO_IN_Init+0x1dc>)
 8001152:	645a      	str	r2, [r3, #68]	; 0x44
 8001154:	e016      	b.n	8001184 <BSP_AUDIO_IN_Init+0xf8>
    }
    else
    {
      haudio_in_mdf_filter[Audio_In_Ctx[Instance].Device - 1U].Instance =
        ((Audio_In_Ctx[Instance].Device == AUDIO_IN_DEVICE_DIGITAL_MIC1) ? ADF1_Filter0 : MDF1_Filter0);
 8001156:	4a41      	ldr	r2, [pc, #260]	; (800125c <BSP_AUDIO_IN_Init+0x1d0>)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	015b      	lsls	r3, r3, #5
 800115c:	4413      	add	r3, r2
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d101      	bne.n	8001168 <BSP_AUDIO_IN_Init+0xdc>
 8001164:	493f      	ldr	r1, [pc, #252]	; (8001264 <BSP_AUDIO_IN_Init+0x1d8>)
 8001166:	e000      	b.n	800116a <BSP_AUDIO_IN_Init+0xde>
 8001168:	493f      	ldr	r1, [pc, #252]	; (8001268 <BSP_AUDIO_IN_Init+0x1dc>)
      haudio_in_mdf_filter[Audio_In_Ctx[Instance].Device - 1U].Instance =
 800116a:	4a3c      	ldr	r2, [pc, #240]	; (800125c <BSP_AUDIO_IN_Init+0x1d0>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	015b      	lsls	r3, r3, #5
 8001170:	4413      	add	r3, r2
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	1e5a      	subs	r2, r3, #1
 8001176:	483a      	ldr	r0, [pc, #232]	; (8001260 <BSP_AUDIO_IN_Init+0x1d4>)
 8001178:	4613      	mov	r3, r2
 800117a:	011b      	lsls	r3, r3, #4
 800117c:	4413      	add	r3, r2
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	4403      	add	r3, r0
 8001182:	6019      	str	r1, [r3, #0]
    }
    /* Configure MDF clock */
    if (MX_MDF1_ClockConfig(&haudio_in_mdf_filter[0], AudioInit->SampleRate) != HAL_OK)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	4619      	mov	r1, r3
 800118a:	4835      	ldr	r0, [pc, #212]	; (8001260 <BSP_AUDIO_IN_Init+0x1d4>)
 800118c:	f000 fe38 	bl	8001e00 <MX_MDF1_ClockConfig>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <BSP_AUDIO_IN_Init+0x112>
    {
      status = BSP_ERROR_CLOCK_FAILURE;
 8001196:	f06f 0308 	mvn.w	r3, #8
 800119a:	637b      	str	r3, [r7, #52]	; 0x34
 800119c:	e058      	b.n	8001250 <BSP_AUDIO_IN_Init+0x1c4>
    }
    else if (MX_MDF1_ClockConfig(&haudio_in_mdf_filter[1], AudioInit->SampleRate) != HAL_OK)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	4619      	mov	r1, r3
 80011a4:	4831      	ldr	r0, [pc, #196]	; (800126c <BSP_AUDIO_IN_Init+0x1e0>)
 80011a6:	f000 fe2b 	bl	8001e00 <MX_MDF1_ClockConfig>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d003      	beq.n	80011b8 <BSP_AUDIO_IN_Init+0x12c>
    {
      status = BSP_ERROR_CLOCK_FAILURE;
 80011b0:	f06f 0308 	mvn.w	r3, #8
 80011b4:	637b      	str	r3, [r7, #52]	; 0x34
 80011b6:	e04b      	b.n	8001250 <BSP_AUDIO_IN_Init+0x1c4>
    }
    else
    {
#if (USE_HAL_MDF_REGISTER_CALLBACKS == 0)
      if ((Audio_In_Ctx[Instance].Device & AUDIO_IN_DEVICE_DIGITAL_MIC1) == AUDIO_IN_DEVICE_DIGITAL_MIC1)
 80011b8:	4a28      	ldr	r2, [pc, #160]	; (800125c <BSP_AUDIO_IN_Init+0x1d0>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	015b      	lsls	r3, r3, #5
 80011be:	4413      	add	r3, r2
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d002      	beq.n	80011d0 <BSP_AUDIO_IN_Init+0x144>
      {
        MDF_BlockMspInit(&haudio_in_mdf_filter[0]);
 80011ca:	4825      	ldr	r0, [pc, #148]	; (8001260 <BSP_AUDIO_IN_Init+0x1d4>)
 80011cc:	f000 faf8 	bl	80017c0 <MDF_BlockMspInit>
      }
      if ((Audio_In_Ctx[Instance].Device & AUDIO_IN_DEVICE_DIGITAL_MIC2) == AUDIO_IN_DEVICE_DIGITAL_MIC2)
 80011d0:	4a22      	ldr	r2, [pc, #136]	; (800125c <BSP_AUDIO_IN_Init+0x1d0>)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	015b      	lsls	r3, r3, #5
 80011d6:	4413      	add	r3, r2
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d002      	beq.n	80011e8 <BSP_AUDIO_IN_Init+0x15c>
      {
        MDF_BlockMspInit(&haudio_in_mdf_filter[1]);
 80011e2:	4822      	ldr	r0, [pc, #136]	; (800126c <BSP_AUDIO_IN_Init+0x1e0>)
 80011e4:	f000 faec 	bl	80017c0 <MDF_BlockMspInit>
      if (status == BSP_ERROR_NONE)
      {
#endif /* (USE_HAL_MDF_REGISTER_CALLBACKS == 0) */
        /* Prepare MDF peripheral initialization */
        MX_MDF_InitTypeDef mxMdfInit;
        if ((Audio_In_Ctx[Instance].Device & AUDIO_IN_DEVICE_DIGITAL_MIC1) == AUDIO_IN_DEVICE_DIGITAL_MIC1)
 80011e8:	4a1c      	ldr	r2, [pc, #112]	; (800125c <BSP_AUDIO_IN_Init+0x1d0>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	015b      	lsls	r3, r3, #5
 80011ee:	4413      	add	r3, r2
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d00b      	beq.n	8001212 <BSP_AUDIO_IN_Init+0x186>
        {
          if (MX_MDF1_Init(&haudio_in_mdf_filter[0], &mxMdfInit) != HAL_OK)
 80011fa:	f107 030c 	add.w	r3, r7, #12
 80011fe:	4619      	mov	r1, r3
 8001200:	4817      	ldr	r0, [pc, #92]	; (8001260 <BSP_AUDIO_IN_Init+0x1d4>)
 8001202:	f000 fe49 	bl	8001e98 <MX_MDF1_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d002      	beq.n	8001212 <BSP_AUDIO_IN_Init+0x186>
          {
            status = BSP_ERROR_PERIPH_FAILURE;
 800120c:	f06f 0303 	mvn.w	r3, #3
 8001210:	637b      	str	r3, [r7, #52]	; 0x34
            }
          }
#endif /* (USE_HAL_MDF_REGISTER_CALLBACKS == 1) */
        }

        if ((Audio_In_Ctx[Instance].Device & AUDIO_IN_DEVICE_DIGITAL_MIC2) == AUDIO_IN_DEVICE_DIGITAL_MIC2)
 8001212:	4a12      	ldr	r2, [pc, #72]	; (800125c <BSP_AUDIO_IN_Init+0x1d0>)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	015b      	lsls	r3, r3, #5
 8001218:	4413      	add	r3, r2
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0302 	and.w	r3, r3, #2
 8001220:	2b00      	cmp	r3, #0
 8001222:	d00b      	beq.n	800123c <BSP_AUDIO_IN_Init+0x1b0>
        {
          if (MX_MDF1_Init(&haudio_in_mdf_filter[1], &mxMdfInit) != HAL_OK)
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	4619      	mov	r1, r3
 800122a:	4810      	ldr	r0, [pc, #64]	; (800126c <BSP_AUDIO_IN_Init+0x1e0>)
 800122c:	f000 fe34 	bl	8001e98 <MX_MDF1_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d002      	beq.n	800123c <BSP_AUDIO_IN_Init+0x1b0>
          {
            status = BSP_ERROR_PERIPH_FAILURE;
 8001236:	f06f 0303 	mvn.w	r3, #3
 800123a:	637b      	str	r3, [r7, #52]	; 0x34
            }
          }
#endif /* (USE_HAL_MDF_REGISTER_CALLBACKS == 1) */
        }

        if (status == BSP_ERROR_NONE)
 800123c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800123e:	2b00      	cmp	r3, #0
 8001240:	d106      	bne.n	8001250 <BSP_AUDIO_IN_Init+0x1c4>
        {
          /* Update audio in context state */
          Audio_In_Ctx[Instance].State = AUDIO_IN_STATE_STOP;
 8001242:	4a06      	ldr	r2, [pc, #24]	; (800125c <BSP_AUDIO_IN_Init+0x1d0>)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	015b      	lsls	r3, r3, #5
 8001248:	4413      	add	r3, r2
 800124a:	331c      	adds	r3, #28
 800124c:	2202      	movs	r2, #2
 800124e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_MDF_REGISTER_CALLBACKS == 1)
      }
#endif /* (USE_HAL_MDF_REGISTER_CALLBACKS == 1) */
    }
  }
  return status;
 8001250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001252:	4618      	mov	r0, r3
 8001254:	3738      	adds	r7, #56	; 0x38
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000014 	.word	0x20000014
 8001260:	200007f8 	.word	0x200007f8
 8001264:	46024080 	.word	0x46024080
 8001268:	40025080 	.word	0x40025080
 800126c:	2000083c 	.word	0x2000083c

08001270 <BSP_AUDIO_IN_DeInit>:
  * @brief  De-initialize the audio in peripherals.
  * @param  Instance Audio in instance.
  * @retval BSP status.
  */
int32_t BSP_AUDIO_IN_DeInit(uint32_t Instance)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8001278:	2300      	movs	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]

  /* Check parameter and state */
  if (Instance >= AUDIO_IN_INSTANCES_NBR)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <BSP_AUDIO_IN_DeInit+0x1a>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8001282:	f06f 0301 	mvn.w	r3, #1
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	e043      	b.n	8001312 <BSP_AUDIO_IN_DeInit+0xa2>
  }
  else if (Audio_In_Ctx[Instance].State != AUDIO_IN_STATE_RESET)
 800128a:	4a24      	ldr	r2, [pc, #144]	; (800131c <BSP_AUDIO_IN_DeInit+0xac>)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	015b      	lsls	r3, r3, #5
 8001290:	4413      	add	r3, r2
 8001292:	331c      	adds	r3, #28
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d03b      	beq.n	8001312 <BSP_AUDIO_IN_DeInit+0xa2>
  {
    if (((Audio_In_Ctx[Instance].Device & AUDIO_IN_DEVICE_DIGITAL_MIC1) == AUDIO_IN_DEVICE_DIGITAL_MIC1)
 800129a:	4a20      	ldr	r2, [pc, #128]	; (800131c <BSP_AUDIO_IN_DeInit+0xac>)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	015b      	lsls	r3, r3, #5
 80012a0:	4413      	add	r3, r2
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d00f      	beq.n	80012cc <BSP_AUDIO_IN_DeInit+0x5c>
        && (status == BSP_ERROR_NONE))
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d10c      	bne.n	80012cc <BSP_AUDIO_IN_DeInit+0x5c>
    {
      /* MDF peripheral de-initialization */
      if (HAL_MDF_DeInit(&haudio_in_mdf_filter[0]) != HAL_OK)
 80012b2:	481b      	ldr	r0, [pc, #108]	; (8001320 <BSP_AUDIO_IN_DeInit+0xb0>)
 80012b4:	f014 f80a 	bl	80152cc <HAL_MDF_DeInit>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <BSP_AUDIO_IN_DeInit+0x56>
      {
        status = BSP_ERROR_PERIPH_FAILURE;
 80012be:	f06f 0303 	mvn.w	r3, #3
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	e002      	b.n	80012cc <BSP_AUDIO_IN_DeInit+0x5c>
      }
      else
      {
#if (USE_HAL_MDF_REGISTER_CALLBACKS == 0)
        MDF_BlockMspDeInit(&haudio_in_mdf_filter[0]);
 80012c6:	4816      	ldr	r0, [pc, #88]	; (8001320 <BSP_AUDIO_IN_DeInit+0xb0>)
 80012c8:	f000 fcee 	bl	8001ca8 <MDF_BlockMspDeInit>
#endif /* (USE_HAL_MDF_REGISTER_CALLBACKS == 0) */
      }
    }
    if (((Audio_In_Ctx[Instance].Device & AUDIO_IN_DEVICE_DIGITAL_MIC2) == AUDIO_IN_DEVICE_DIGITAL_MIC2)
 80012cc:	4a13      	ldr	r2, [pc, #76]	; (800131c <BSP_AUDIO_IN_DeInit+0xac>)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	015b      	lsls	r3, r3, #5
 80012d2:	4413      	add	r3, r2
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d00f      	beq.n	80012fe <BSP_AUDIO_IN_DeInit+0x8e>
        && (status == BSP_ERROR_NONE))
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d10c      	bne.n	80012fe <BSP_AUDIO_IN_DeInit+0x8e>
    {
      /* MDF peripheral de-initialization */
      if (HAL_MDF_DeInit(&haudio_in_mdf_filter[1]) != HAL_OK)
 80012e4:	480f      	ldr	r0, [pc, #60]	; (8001324 <BSP_AUDIO_IN_DeInit+0xb4>)
 80012e6:	f013 fff1 	bl	80152cc <HAL_MDF_DeInit>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d003      	beq.n	80012f8 <BSP_AUDIO_IN_DeInit+0x88>
      {
        status = BSP_ERROR_PERIPH_FAILURE;
 80012f0:	f06f 0303 	mvn.w	r3, #3
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	e002      	b.n	80012fe <BSP_AUDIO_IN_DeInit+0x8e>
      }
      else
      {
#if (USE_HAL_MDF_REGISTER_CALLBACKS == 0)
        MDF_BlockMspDeInit(&haudio_in_mdf_filter[1]);
 80012f8:	480a      	ldr	r0, [pc, #40]	; (8001324 <BSP_AUDIO_IN_DeInit+0xb4>)
 80012fa:	f000 fcd5 	bl	8001ca8 <MDF_BlockMspDeInit>
#endif /* (USE_HAL_MDF_REGISTER_CALLBACKS == 0) */
      }
    }
    if (status == BSP_ERROR_NONE)
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d106      	bne.n	8001312 <BSP_AUDIO_IN_DeInit+0xa2>
    {
      /* Update audio in context */
      Audio_In_Ctx[Instance].State = AUDIO_IN_STATE_RESET;
 8001304:	4a05      	ldr	r2, [pc, #20]	; (800131c <BSP_AUDIO_IN_DeInit+0xac>)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	015b      	lsls	r3, r3, #5
 800130a:	4413      	add	r3, r2
 800130c:	331c      	adds	r3, #28
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
  }
  else
  {
    /* Nothing to do */
  }
  return status;
 8001312:	68fb      	ldr	r3, [r7, #12]
}
 8001314:	4618      	mov	r0, r3
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000014 	.word	0x20000014
 8001320:	200007f8 	.word	0x200007f8
 8001324:	2000083c 	.word	0x2000083c

08001328 <BSP_AUDIO_IN_Record>:
  * @param  pData Pointer on data buffer.
  * @param  NbrOfBytes Size of buffer in bytes. Maximum size is 65535 bytes.
  * @retval BSP status.
  */
int32_t BSP_AUDIO_IN_Record(uint32_t Instance, uint8_t *pData, uint32_t NbrOfBytes)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
  int32_t  status = BSP_ERROR_NONE;
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]

  /* Check parameters and state */
  if ((Instance >= AUDIO_IN_INSTANCES_NBR) || (pData == NULL))
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d102      	bne.n	8001344 <BSP_AUDIO_IN_Record+0x1c>
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d103      	bne.n	800134c <BSP_AUDIO_IN_Record+0x24>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8001344:	f06f 0301 	mvn.w	r3, #1
 8001348:	617b      	str	r3, [r7, #20]
 800134a:	e1a7      	b.n	800169c <BSP_AUDIO_IN_Record+0x374>
  }
  /* Check audio in state */
  else if (Audio_In_Ctx[Instance].State != AUDIO_IN_STATE_STOP)
 800134c:	4a3e      	ldr	r2, [pc, #248]	; (8001448 <BSP_AUDIO_IN_Record+0x120>)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	015b      	lsls	r3, r3, #5
 8001352:	4413      	add	r3, r2
 8001354:	331c      	adds	r3, #28
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2b02      	cmp	r3, #2
 800135a:	d003      	beq.n	8001364 <BSP_AUDIO_IN_Record+0x3c>
  {
    status = BSP_ERROR_BUSY;
 800135c:	f06f 0302 	mvn.w	r3, #2
 8001360:	617b      	str	r3, [r7, #20]
 8001362:	e19b      	b.n	800169c <BSP_AUDIO_IN_Record+0x374>
  }
  else
  {
    Audio_In_Ctx[Instance].pBuff = pData;
 8001364:	4a38      	ldr	r2, [pc, #224]	; (8001448 <BSP_AUDIO_IN_Record+0x120>)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	015b      	lsls	r3, r3, #5
 800136a:	4413      	add	r3, r2
 800136c:	3310      	adds	r3, #16
 800136e:	68ba      	ldr	r2, [r7, #8]
 8001370:	601a      	str	r2, [r3, #0]
    Audio_In_Ctx[Instance].Size  = NbrOfBytes / Audio_In_Ctx[Instance].ChannelsNbr;
 8001372:	4a35      	ldr	r2, [pc, #212]	; (8001448 <BSP_AUDIO_IN_Record+0x120>)
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	015b      	lsls	r3, r3, #5
 8001378:	4413      	add	r3, r2
 800137a:	330c      	adds	r3, #12
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	fbb2 f2f3 	udiv	r2, r2, r3
 8001384:	4930      	ldr	r1, [pc, #192]	; (8001448 <BSP_AUDIO_IN_Record+0x120>)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	015b      	lsls	r3, r3, #5
 800138a:	440b      	add	r3, r1
 800138c:	3314      	adds	r3, #20
 800138e:	601a      	str	r2, [r3, #0]

    /* Initialize the filter configuration parameters */
    filterConfig.DataSource      = MDF_DATA_SOURCE_BSMX;
 8001390:	4b2e      	ldr	r3, [pc, #184]	; (800144c <BSP_AUDIO_IN_Record+0x124>)
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
    filterConfig.Delay           = 0U;
 8001396:	4b2d      	ldr	r3, [pc, #180]	; (800144c <BSP_AUDIO_IN_Record+0x124>)
 8001398:	2200      	movs	r2, #0
 800139a:	605a      	str	r2, [r3, #4]
    filterConfig.CicMode         = MDF_ONE_FILTER_SINC4;
 800139c:	4b2b      	ldr	r3, [pc, #172]	; (800144c <BSP_AUDIO_IN_Record+0x124>)
 800139e:	2240      	movs	r2, #64	; 0x40
 80013a0:	609a      	str	r2, [r3, #8]
    filterConfig.DecimationRatio = MDF_DECIMATION_RATIO(Audio_In_Ctx[Instance].SampleRate);
 80013a2:	4a29      	ldr	r2, [pc, #164]	; (8001448 <BSP_AUDIO_IN_Record+0x120>)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	015b      	lsls	r3, r3, #5
 80013a8:	4413      	add	r3, r2
 80013aa:	3304      	adds	r3, #4
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80013b2:	d04d      	beq.n	8001450 <BSP_AUDIO_IN_Record+0x128>
 80013b4:	4a24      	ldr	r2, [pc, #144]	; (8001448 <BSP_AUDIO_IN_Record+0x120>)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	015b      	lsls	r3, r3, #5
 80013ba:	4413      	add	r3, r2
 80013bc:	3304      	adds	r3, #4
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f642 3211 	movw	r2, #11025	; 0x2b11
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d03b      	beq.n	8001440 <BSP_AUDIO_IN_Record+0x118>
 80013c8:	4a1f      	ldr	r2, [pc, #124]	; (8001448 <BSP_AUDIO_IN_Record+0x120>)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	015b      	lsls	r3, r3, #5
 80013ce:	4413      	add	r3, r2
 80013d0:	3304      	adds	r3, #4
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80013d8:	d030      	beq.n	800143c <BSP_AUDIO_IN_Record+0x114>
 80013da:	4a1b      	ldr	r2, [pc, #108]	; (8001448 <BSP_AUDIO_IN_Record+0x120>)
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	015b      	lsls	r3, r3, #5
 80013e0:	4413      	add	r3, r2
 80013e2:	3304      	adds	r3, #4
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f245 6222 	movw	r2, #22050	; 0x5622
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d024      	beq.n	8001438 <BSP_AUDIO_IN_Record+0x110>
 80013ee:	4a16      	ldr	r2, [pc, #88]	; (8001448 <BSP_AUDIO_IN_Record+0x120>)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	015b      	lsls	r3, r3, #5
 80013f4:	4413      	add	r3, r2
 80013f6:	3304      	adds	r3, #4
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80013fe:	d019      	beq.n	8001434 <BSP_AUDIO_IN_Record+0x10c>
 8001400:	4a11      	ldr	r2, [pc, #68]	; (8001448 <BSP_AUDIO_IN_Record+0x120>)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	015b      	lsls	r3, r3, #5
 8001406:	4413      	add	r3, r2
 8001408:	3304      	adds	r3, #4
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001410:	4293      	cmp	r3, r2
 8001412:	d00d      	beq.n	8001430 <BSP_AUDIO_IN_Record+0x108>
 8001414:	4a0c      	ldr	r2, [pc, #48]	; (8001448 <BSP_AUDIO_IN_Record+0x120>)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	015b      	lsls	r3, r3, #5
 800141a:	4413      	add	r3, r2
 800141c:	3304      	adds	r3, #4
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001424:	4293      	cmp	r3, r2
 8001426:	d101      	bne.n	800142c <BSP_AUDIO_IN_Record+0x104>
 8001428:	232c      	movs	r3, #44	; 0x2c
 800142a:	e013      	b.n	8001454 <BSP_AUDIO_IN_Record+0x12c>
 800142c:	2380      	movs	r3, #128	; 0x80
 800142e:	e011      	b.n	8001454 <BSP_AUDIO_IN_Record+0x12c>
 8001430:	2340      	movs	r3, #64	; 0x40
 8001432:	e00f      	b.n	8001454 <BSP_AUDIO_IN_Record+0x12c>
 8001434:	2358      	movs	r3, #88	; 0x58
 8001436:	e00d      	b.n	8001454 <BSP_AUDIO_IN_Record+0x12c>
 8001438:	2380      	movs	r3, #128	; 0x80
 800143a:	e00b      	b.n	8001454 <BSP_AUDIO_IN_Record+0x12c>
 800143c:	23b0      	movs	r3, #176	; 0xb0
 800143e:	e009      	b.n	8001454 <BSP_AUDIO_IN_Record+0x12c>
 8001440:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001444:	e006      	b.n	8001454 <BSP_AUDIO_IN_Record+0x12c>
 8001446:	bf00      	nop
 8001448:	20000014 	.word	0x20000014
 800144c:	20000970 	.word	0x20000970
 8001450:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001454:	4a94      	ldr	r2, [pc, #592]	; (80016a8 <BSP_AUDIO_IN_Record+0x380>)
 8001456:	60d3      	str	r3, [r2, #12]
    filterConfig.Offset          = 0;
 8001458:	4b93      	ldr	r3, [pc, #588]	; (80016a8 <BSP_AUDIO_IN_Record+0x380>)
 800145a:	2200      	movs	r2, #0
 800145c:	611a      	str	r2, [r3, #16]
    filterConfig.Gain            = 0;
 800145e:	4b92      	ldr	r3, [pc, #584]	; (80016a8 <BSP_AUDIO_IN_Record+0x380>)
 8001460:	2200      	movs	r2, #0
 8001462:	615a      	str	r2, [r3, #20]
    filterConfig.ReshapeFilter.Activation      = DISABLE;
 8001464:	4b90      	ldr	r3, [pc, #576]	; (80016a8 <BSP_AUDIO_IN_Record+0x380>)
 8001466:	2200      	movs	r2, #0
 8001468:	761a      	strb	r2, [r3, #24]
    filterConfig.ReshapeFilter.DecimationRatio = MDF_RSF_DECIMATION_RATIO_4;
 800146a:	4b8f      	ldr	r3, [pc, #572]	; (80016a8 <BSP_AUDIO_IN_Record+0x380>)
 800146c:	2200      	movs	r2, #0
 800146e:	61da      	str	r2, [r3, #28]
    filterConfig.HighPassFilter.Activation      = DISABLE;
 8001470:	4b8d      	ldr	r3, [pc, #564]	; (80016a8 <BSP_AUDIO_IN_Record+0x380>)
 8001472:	2200      	movs	r2, #0
 8001474:	f883 2020 	strb.w	r2, [r3, #32]
    filterConfig.HighPassFilter.CutOffFrequency = MDF_HPF_CUTOFF_0_000625FPCM;
 8001478:	4b8b      	ldr	r3, [pc, #556]	; (80016a8 <BSP_AUDIO_IN_Record+0x380>)
 800147a:	2200      	movs	r2, #0
 800147c:	625a      	str	r2, [r3, #36]	; 0x24
    filterConfig.Integrator.Activation     = DISABLE;
 800147e:	4b8a      	ldr	r3, [pc, #552]	; (80016a8 <BSP_AUDIO_IN_Record+0x380>)
 8001480:	2200      	movs	r2, #0
 8001482:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    filterConfig.Integrator.Value          = 4U;
 8001486:	4b88      	ldr	r3, [pc, #544]	; (80016a8 <BSP_AUDIO_IN_Record+0x380>)
 8001488:	2204      	movs	r2, #4
 800148a:	62da      	str	r2, [r3, #44]	; 0x2c
    filterConfig.Integrator.OutputDivision = MDF_INTEGRATOR_OUTPUT_NO_DIV;
 800148c:	4b86      	ldr	r3, [pc, #536]	; (80016a8 <BSP_AUDIO_IN_Record+0x380>)
 800148e:	2203      	movs	r2, #3
 8001490:	631a      	str	r2, [r3, #48]	; 0x30
    filterConfig.SoundActivity.Activation           = DISABLE;
 8001492:	4b85      	ldr	r3, [pc, #532]	; (80016a8 <BSP_AUDIO_IN_Record+0x380>)
 8001494:	2200      	movs	r2, #0
 8001496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    filterConfig.SoundActivity.Mode                 = MDF_SAD_VOICE_ACTIVITY_DETECTOR;
 800149a:	4b83      	ldr	r3, [pc, #524]	; (80016a8 <BSP_AUDIO_IN_Record+0x380>)
 800149c:	2200      	movs	r2, #0
 800149e:	639a      	str	r2, [r3, #56]	; 0x38
    filterConfig.SoundActivity.FrameSize            = MDF_SAD_8_PCM_SAMPLES;
 80014a0:	4b81      	ldr	r3, [pc, #516]	; (80016a8 <BSP_AUDIO_IN_Record+0x380>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	63da      	str	r2, [r3, #60]	; 0x3c
    filterConfig.SoundActivity.Hysteresis           = DISABLE;
 80014a6:	4b80      	ldr	r3, [pc, #512]	; (80016a8 <BSP_AUDIO_IN_Record+0x380>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    filterConfig.SoundActivity.SoundTriggerEvent    = MDF_SAD_ENTER_DETECT;
 80014ae:	4b7e      	ldr	r3, [pc, #504]	; (80016a8 <BSP_AUDIO_IN_Record+0x380>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	645a      	str	r2, [r3, #68]	; 0x44
    filterConfig.SoundActivity.DataMemoryTransfer   = MDF_SAD_NO_MEMORY_TRANSFER;
 80014b4:	4b7c      	ldr	r3, [pc, #496]	; (80016a8 <BSP_AUDIO_IN_Record+0x380>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	649a      	str	r2, [r3, #72]	; 0x48
    filterConfig.SoundActivity.MinNoiseLevel        = 0U;
 80014ba:	4b7b      	ldr	r3, [pc, #492]	; (80016a8 <BSP_AUDIO_IN_Record+0x380>)
 80014bc:	2200      	movs	r2, #0
 80014be:	64da      	str	r2, [r3, #76]	; 0x4c
    filterConfig.SoundActivity.HangoverWindow       = MDF_SAD_HANGOVER_4_FRAMES;
 80014c0:	4b79      	ldr	r3, [pc, #484]	; (80016a8 <BSP_AUDIO_IN_Record+0x380>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	651a      	str	r2, [r3, #80]	; 0x50
    filterConfig.SoundActivity.LearningFrames       = MDF_SAD_LEARNING_2_FRAMES;
 80014c6:	4b78      	ldr	r3, [pc, #480]	; (80016a8 <BSP_AUDIO_IN_Record+0x380>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	655a      	str	r2, [r3, #84]	; 0x54
    filterConfig.SoundActivity.AmbientNoiseSlope    = 0U;
 80014cc:	4b76      	ldr	r3, [pc, #472]	; (80016a8 <BSP_AUDIO_IN_Record+0x380>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	659a      	str	r2, [r3, #88]	; 0x58
    filterConfig.SoundActivity.SignalNoiseThreshold = MDF_SAD_SIGNAL_NOISE_18DB;
 80014d2:	4b75      	ldr	r3, [pc, #468]	; (80016a8 <BSP_AUDIO_IN_Record+0x380>)
 80014d4:	2205      	movs	r2, #5
 80014d6:	65da      	str	r2, [r3, #92]	; 0x5c
    filterConfig.AcquisitionMode = MDF_MODE_ASYNC_CONT;
 80014d8:	4b73      	ldr	r3, [pc, #460]	; (80016a8 <BSP_AUDIO_IN_Record+0x380>)
 80014da:	2200      	movs	r2, #0
 80014dc:	665a      	str	r2, [r3, #100]	; 0x64
    filterConfig.FifoThreshold   = MDF_FIFO_THRESHOLD_NOT_EMPTY;
 80014de:	4b72      	ldr	r3, [pc, #456]	; (80016a8 <BSP_AUDIO_IN_Record+0x380>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	669a      	str	r2, [r3, #104]	; 0x68
    filterConfig.DiscardSamples  = 1U;
 80014e4:	4b70      	ldr	r3, [pc, #448]	; (80016a8 <BSP_AUDIO_IN_Record+0x380>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	66da      	str	r2, [r3, #108]	; 0x6c
    filterConfig.Trigger.Source  = MDF_FILTER_TRIG_TRGO;
 80014ea:	4b6f      	ldr	r3, [pc, #444]	; (80016a8 <BSP_AUDIO_IN_Record+0x380>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	671a      	str	r2, [r3, #112]	; 0x70
    filterConfig.Trigger.Edge    = MDF_FILTER_TRIG_RISING_EDGE;
 80014f0:	4b6d      	ldr	r3, [pc, #436]	; (80016a8 <BSP_AUDIO_IN_Record+0x380>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	675a      	str	r2, [r3, #116]	; 0x74
    filterConfig.SnapshotFormat  = MDF_SNAPSHOT_23BITS;
 80014f6:	4b6c      	ldr	r3, [pc, #432]	; (80016a8 <BSP_AUDIO_IN_Record+0x380>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	679a      	str	r2, [r3, #120]	; 0x78

    if ((Audio_In_Ctx[Instance].Device == AUDIO_IN_DEVICE_DIGITAL_MIC1) && (status == BSP_ERROR_NONE))
 80014fc:	4a6b      	ldr	r2, [pc, #428]	; (80016ac <BSP_AUDIO_IN_Record+0x384>)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	015b      	lsls	r3, r3, #5
 8001502:	4413      	add	r3, r2
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d12a      	bne.n	8001560 <BSP_AUDIO_IN_Record+0x238>
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d127      	bne.n	8001560 <BSP_AUDIO_IN_Record+0x238>
    {
      /* Initialize DMA configuration parameters */
      dmaConfig.Address    = (uint32_t) Audio_In_Ctx[Instance].pBuff;
 8001510:	4a66      	ldr	r2, [pc, #408]	; (80016ac <BSP_AUDIO_IN_Record+0x384>)
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	015b      	lsls	r3, r3, #5
 8001516:	4413      	add	r3, r2
 8001518:	3310      	adds	r3, #16
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	461a      	mov	r2, r3
 800151e:	4b64      	ldr	r3, [pc, #400]	; (80016b0 <BSP_AUDIO_IN_Record+0x388>)
 8001520:	601a      	str	r2, [r3, #0]
      dmaConfig.DataLength = Audio_In_Ctx[Instance].Size;
 8001522:	4a62      	ldr	r2, [pc, #392]	; (80016ac <BSP_AUDIO_IN_Record+0x384>)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	015b      	lsls	r3, r3, #5
 8001528:	4413      	add	r3, r2
 800152a:	3314      	adds	r3, #20
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a60      	ldr	r2, [pc, #384]	; (80016b0 <BSP_AUDIO_IN_Record+0x388>)
 8001530:	6053      	str	r3, [r2, #4]
      dmaConfig.MsbOnly    = ENABLE;
 8001532:	4b5f      	ldr	r3, [pc, #380]	; (80016b0 <BSP_AUDIO_IN_Record+0x388>)
 8001534:	2201      	movs	r2, #1
 8001536:	721a      	strb	r2, [r3, #8]

      /* Call the Media layer start function for MIC1 channel */
      if (HAL_MDF_AcqStart_DMA(&haudio_in_mdf_filter[0], &filterConfig, &dmaConfig) != HAL_OK)
 8001538:	4a5d      	ldr	r2, [pc, #372]	; (80016b0 <BSP_AUDIO_IN_Record+0x388>)
 800153a:	495b      	ldr	r1, [pc, #364]	; (80016a8 <BSP_AUDIO_IN_Record+0x380>)
 800153c:	485d      	ldr	r0, [pc, #372]	; (80016b4 <BSP_AUDIO_IN_Record+0x38c>)
 800153e:	f013 ffd9 	bl	80154f4 <HAL_MDF_AcqStart_DMA>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d002      	beq.n	800154e <BSP_AUDIO_IN_Record+0x226>
      {
        status = BSP_ERROR_PERIPH_FAILURE;
 8001548:	f06f 0303 	mvn.w	r3, #3
 800154c:	617b      	str	r3, [r7, #20]
      }
      if (HAL_MDF_GenerateTrgo(&haudio_in_mdf_filter[0]) != HAL_OK)
 800154e:	4859      	ldr	r0, [pc, #356]	; (80016b4 <BSP_AUDIO_IN_Record+0x38c>)
 8001550:	f014 f97c 	bl	801584c <HAL_MDF_GenerateTrgo>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d002      	beq.n	8001560 <BSP_AUDIO_IN_Record+0x238>
      {
        status = BSP_ERROR_PERIPH_FAILURE;
 800155a:	f06f 0303 	mvn.w	r3, #3
 800155e:	617b      	str	r3, [r7, #20]
      }
    }
    if ((Audio_In_Ctx[Instance].Device == AUDIO_IN_DEVICE_DIGITAL_MIC2) && (status == BSP_ERROR_NONE))
 8001560:	4a52      	ldr	r2, [pc, #328]	; (80016ac <BSP_AUDIO_IN_Record+0x384>)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	015b      	lsls	r3, r3, #5
 8001566:	4413      	add	r3, r2
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2b02      	cmp	r3, #2
 800156c:	d12a      	bne.n	80015c4 <BSP_AUDIO_IN_Record+0x29c>
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d127      	bne.n	80015c4 <BSP_AUDIO_IN_Record+0x29c>
    {
      /* Initialize DMA configuration parameters */
      dmaConfig.Address    = (uint32_t) Audio_In_Ctx[Instance].pBuff;
 8001574:	4a4d      	ldr	r2, [pc, #308]	; (80016ac <BSP_AUDIO_IN_Record+0x384>)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	015b      	lsls	r3, r3, #5
 800157a:	4413      	add	r3, r2
 800157c:	3310      	adds	r3, #16
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	4b4b      	ldr	r3, [pc, #300]	; (80016b0 <BSP_AUDIO_IN_Record+0x388>)
 8001584:	601a      	str	r2, [r3, #0]
      dmaConfig.DataLength = Audio_In_Ctx[Instance].Size;
 8001586:	4a49      	ldr	r2, [pc, #292]	; (80016ac <BSP_AUDIO_IN_Record+0x384>)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	015b      	lsls	r3, r3, #5
 800158c:	4413      	add	r3, r2
 800158e:	3314      	adds	r3, #20
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a47      	ldr	r2, [pc, #284]	; (80016b0 <BSP_AUDIO_IN_Record+0x388>)
 8001594:	6053      	str	r3, [r2, #4]
      dmaConfig.MsbOnly    = ENABLE;
 8001596:	4b46      	ldr	r3, [pc, #280]	; (80016b0 <BSP_AUDIO_IN_Record+0x388>)
 8001598:	2201      	movs	r2, #1
 800159a:	721a      	strb	r2, [r3, #8]

      /* Call the Media layer start function for MIC2 channel */
      if (HAL_MDF_AcqStart_DMA(&haudio_in_mdf_filter[1], &filterConfig, &dmaConfig) != HAL_OK)
 800159c:	4a44      	ldr	r2, [pc, #272]	; (80016b0 <BSP_AUDIO_IN_Record+0x388>)
 800159e:	4942      	ldr	r1, [pc, #264]	; (80016a8 <BSP_AUDIO_IN_Record+0x380>)
 80015a0:	4845      	ldr	r0, [pc, #276]	; (80016b8 <BSP_AUDIO_IN_Record+0x390>)
 80015a2:	f013 ffa7 	bl	80154f4 <HAL_MDF_AcqStart_DMA>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d002      	beq.n	80015b2 <BSP_AUDIO_IN_Record+0x28a>
      {
        status = BSP_ERROR_PERIPH_FAILURE;
 80015ac:	f06f 0303 	mvn.w	r3, #3
 80015b0:	617b      	str	r3, [r7, #20]
      }
      if (HAL_MDF_GenerateTrgo(&haudio_in_mdf_filter[1]) != HAL_OK)
 80015b2:	4841      	ldr	r0, [pc, #260]	; (80016b8 <BSP_AUDIO_IN_Record+0x390>)
 80015b4:	f014 f94a 	bl	801584c <HAL_MDF_GenerateTrgo>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d002      	beq.n	80015c4 <BSP_AUDIO_IN_Record+0x29c>
      {
        status = BSP_ERROR_PERIPH_FAILURE;
 80015be:	f06f 0303 	mvn.w	r3, #3
 80015c2:	617b      	str	r3, [r7, #20]
      }
    }
    if ((Audio_In_Ctx[Instance].Device == AUDIO_IN_DEVICE_DIGITAL_MIC) && (status == BSP_ERROR_NONE))
 80015c4:	4a39      	ldr	r2, [pc, #228]	; (80016ac <BSP_AUDIO_IN_Record+0x384>)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	015b      	lsls	r3, r3, #5
 80015ca:	4413      	add	r3, r2
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2b03      	cmp	r3, #3
 80015d0:	d15a      	bne.n	8001688 <BSP_AUDIO_IN_Record+0x360>
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d157      	bne.n	8001688 <BSP_AUDIO_IN_Record+0x360>
    {
      /* Initialize DMA configuration parameters */
      dmaConfig.Address    = (uint32_t) Audio_In_Ctx[Instance].pBuff;
 80015d8:	4a34      	ldr	r2, [pc, #208]	; (80016ac <BSP_AUDIO_IN_Record+0x384>)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	015b      	lsls	r3, r3, #5
 80015de:	4413      	add	r3, r2
 80015e0:	3310      	adds	r3, #16
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	461a      	mov	r2, r3
 80015e6:	4b32      	ldr	r3, [pc, #200]	; (80016b0 <BSP_AUDIO_IN_Record+0x388>)
 80015e8:	601a      	str	r2, [r3, #0]
      dmaConfig.DataLength = Audio_In_Ctx[Instance].Size;
 80015ea:	4a30      	ldr	r2, [pc, #192]	; (80016ac <BSP_AUDIO_IN_Record+0x384>)
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	015b      	lsls	r3, r3, #5
 80015f0:	4413      	add	r3, r2
 80015f2:	3314      	adds	r3, #20
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a2e      	ldr	r2, [pc, #184]	; (80016b0 <BSP_AUDIO_IN_Record+0x388>)
 80015f8:	6053      	str	r3, [r2, #4]
      dmaConfig.MsbOnly    = ENABLE;
 80015fa:	4b2d      	ldr	r3, [pc, #180]	; (80016b0 <BSP_AUDIO_IN_Record+0x388>)
 80015fc:	2201      	movs	r2, #1
 80015fe:	721a      	strb	r2, [r3, #8]

      /* Call the Media layer start function for MIC1 channel */
      if (HAL_MDF_AcqStart_DMA(&haudio_in_mdf_filter[0], &filterConfig, &dmaConfig) != HAL_OK)
 8001600:	4a2b      	ldr	r2, [pc, #172]	; (80016b0 <BSP_AUDIO_IN_Record+0x388>)
 8001602:	4929      	ldr	r1, [pc, #164]	; (80016a8 <BSP_AUDIO_IN_Record+0x380>)
 8001604:	482b      	ldr	r0, [pc, #172]	; (80016b4 <BSP_AUDIO_IN_Record+0x38c>)
 8001606:	f013 ff75 	bl	80154f4 <HAL_MDF_AcqStart_DMA>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d002      	beq.n	8001616 <BSP_AUDIO_IN_Record+0x2ee>
      {
        status = BSP_ERROR_PERIPH_FAILURE;
 8001610:	f06f 0303 	mvn.w	r3, #3
 8001614:	617b      	str	r3, [r7, #20]
      }
      if (HAL_MDF_GenerateTrgo(&haudio_in_mdf_filter[0]) != HAL_OK)
 8001616:	4827      	ldr	r0, [pc, #156]	; (80016b4 <BSP_AUDIO_IN_Record+0x38c>)
 8001618:	f014 f918 	bl	801584c <HAL_MDF_GenerateTrgo>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d002      	beq.n	8001628 <BSP_AUDIO_IN_Record+0x300>
      {
        status = BSP_ERROR_PERIPH_FAILURE;
 8001622:	f06f 0303 	mvn.w	r3, #3
 8001626:	617b      	str	r3, [r7, #20]
      }
      /* Initialize DMA configuration parameters */
      dmaConfig.Address    = (uint32_t) &Audio_In_Ctx[Instance].pBuff[Audio_In_Ctx[Instance].Size / 2U];
 8001628:	4a20      	ldr	r2, [pc, #128]	; (80016ac <BSP_AUDIO_IN_Record+0x384>)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	015b      	lsls	r3, r3, #5
 800162e:	4413      	add	r3, r2
 8001630:	3310      	adds	r3, #16
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	491d      	ldr	r1, [pc, #116]	; (80016ac <BSP_AUDIO_IN_Record+0x384>)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	015b      	lsls	r3, r3, #5
 800163a:	440b      	add	r3, r1
 800163c:	3314      	adds	r3, #20
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	085b      	lsrs	r3, r3, #1
 8001642:	4413      	add	r3, r2
 8001644:	461a      	mov	r2, r3
 8001646:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <BSP_AUDIO_IN_Record+0x388>)
 8001648:	601a      	str	r2, [r3, #0]
      dmaConfig.DataLength = Audio_In_Ctx[Instance].Size;
 800164a:	4a18      	ldr	r2, [pc, #96]	; (80016ac <BSP_AUDIO_IN_Record+0x384>)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	015b      	lsls	r3, r3, #5
 8001650:	4413      	add	r3, r2
 8001652:	3314      	adds	r3, #20
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a16      	ldr	r2, [pc, #88]	; (80016b0 <BSP_AUDIO_IN_Record+0x388>)
 8001658:	6053      	str	r3, [r2, #4]
      dmaConfig.MsbOnly    = ENABLE;
 800165a:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <BSP_AUDIO_IN_Record+0x388>)
 800165c:	2201      	movs	r2, #1
 800165e:	721a      	strb	r2, [r3, #8]

      /* Call the Media layer start function for MIC2 channel */
      if (HAL_MDF_AcqStart_DMA(&haudio_in_mdf_filter[1], &filterConfig, &dmaConfig) != HAL_OK)
 8001660:	4a13      	ldr	r2, [pc, #76]	; (80016b0 <BSP_AUDIO_IN_Record+0x388>)
 8001662:	4911      	ldr	r1, [pc, #68]	; (80016a8 <BSP_AUDIO_IN_Record+0x380>)
 8001664:	4814      	ldr	r0, [pc, #80]	; (80016b8 <BSP_AUDIO_IN_Record+0x390>)
 8001666:	f013 ff45 	bl	80154f4 <HAL_MDF_AcqStart_DMA>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d002      	beq.n	8001676 <BSP_AUDIO_IN_Record+0x34e>
      {
        status = BSP_ERROR_PERIPH_FAILURE;
 8001670:	f06f 0303 	mvn.w	r3, #3
 8001674:	617b      	str	r3, [r7, #20]
      }
      if (HAL_MDF_GenerateTrgo(&haudio_in_mdf_filter[1]) != HAL_OK)
 8001676:	4810      	ldr	r0, [pc, #64]	; (80016b8 <BSP_AUDIO_IN_Record+0x390>)
 8001678:	f014 f8e8 	bl	801584c <HAL_MDF_GenerateTrgo>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d002      	beq.n	8001688 <BSP_AUDIO_IN_Record+0x360>
      {
        status = BSP_ERROR_PERIPH_FAILURE;
 8001682:	f06f 0303 	mvn.w	r3, #3
 8001686:	617b      	str	r3, [r7, #20]
      }
    }

    if (status == BSP_ERROR_NONE)
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d106      	bne.n	800169c <BSP_AUDIO_IN_Record+0x374>
    {
      /* Update audio in state */
      Audio_In_Ctx[Instance].State = AUDIO_IN_STATE_RECORDING;
 800168e:	4a07      	ldr	r2, [pc, #28]	; (80016ac <BSP_AUDIO_IN_Record+0x384>)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	015b      	lsls	r3, r3, #5
 8001694:	4413      	add	r3, r2
 8001696:	331c      	adds	r3, #28
 8001698:	2201      	movs	r2, #1
 800169a:	601a      	str	r2, [r3, #0]
    }
  }
  return status;
 800169c:	697b      	ldr	r3, [r7, #20]
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000970 	.word	0x20000970
 80016ac:	20000014 	.word	0x20000014
 80016b0:	200009ec 	.word	0x200009ec
 80016b4:	200007f8 	.word	0x200007f8
 80016b8:	2000083c 	.word	0x2000083c

080016bc <BSP_AUDIO_IN_Stop>:
  * @brief  Stop record of audio stream.
  * @param  Instance Audio in instance.
  * @retval BSP status.
  */
int32_t BSP_AUDIO_IN_Stop(uint32_t Instance)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60fb      	str	r3, [r7, #12]

  /* Check parameter and state */
  if (Instance >= AUDIO_IN_INSTANCES_NBR)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <BSP_AUDIO_IN_Stop+0x1a>
  {
    status = BSP_ERROR_WRONG_PARAM;
 80016ce:	f06f 0301 	mvn.w	r3, #1
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	e04f      	b.n	8001776 <BSP_AUDIO_IN_Stop+0xba>
  }
  /* Check audio in state */
  else if (Audio_In_Ctx[Instance].State == AUDIO_IN_STATE_STOP)
 80016d6:	4a2a      	ldr	r2, [pc, #168]	; (8001780 <BSP_AUDIO_IN_Stop+0xc4>)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	015b      	lsls	r3, r3, #5
 80016dc:	4413      	add	r3, r2
 80016de:	331c      	adds	r3, #28
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d047      	beq.n	8001776 <BSP_AUDIO_IN_Stop+0xba>
  {
    /* Nothing to do */
  }
  else if ((Audio_In_Ctx[Instance].State != AUDIO_IN_STATE_RECORDING) &&
 80016e6:	4a26      	ldr	r2, [pc, #152]	; (8001780 <BSP_AUDIO_IN_Stop+0xc4>)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	015b      	lsls	r3, r3, #5
 80016ec:	4413      	add	r3, r2
 80016ee:	331c      	adds	r3, #28
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d00b      	beq.n	800170e <BSP_AUDIO_IN_Stop+0x52>
           (Audio_In_Ctx[Instance].State != AUDIO_IN_STATE_PAUSE))
 80016f6:	4a22      	ldr	r2, [pc, #136]	; (8001780 <BSP_AUDIO_IN_Stop+0xc4>)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	015b      	lsls	r3, r3, #5
 80016fc:	4413      	add	r3, r2
 80016fe:	331c      	adds	r3, #28
 8001700:	681b      	ldr	r3, [r3, #0]
  else if ((Audio_In_Ctx[Instance].State != AUDIO_IN_STATE_RECORDING) &&
 8001702:	2b03      	cmp	r3, #3
 8001704:	d003      	beq.n	800170e <BSP_AUDIO_IN_Stop+0x52>
  {
    status = BSP_ERROR_BUSY;
 8001706:	f06f 0302 	mvn.w	r3, #2
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	e033      	b.n	8001776 <BSP_AUDIO_IN_Stop+0xba>
  }
  else
  {
    /* Call the Media layer stop function */
    if (((Audio_In_Ctx[Instance].Device & AUDIO_IN_DEVICE_DIGITAL_MIC1) == AUDIO_IN_DEVICE_DIGITAL_MIC1)
 800170e:	4a1c      	ldr	r2, [pc, #112]	; (8001780 <BSP_AUDIO_IN_Stop+0xc4>)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	015b      	lsls	r3, r3, #5
 8001714:	4413      	add	r3, r2
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	2b00      	cmp	r3, #0
 800171e:	d00b      	beq.n	8001738 <BSP_AUDIO_IN_Stop+0x7c>
        && (status == BSP_ERROR_NONE))
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d108      	bne.n	8001738 <BSP_AUDIO_IN_Stop+0x7c>
    {
      if (HAL_MDF_AcqStop_DMA(&haudio_in_mdf_filter[0]) != HAL_OK)
 8001726:	4817      	ldr	r0, [pc, #92]	; (8001784 <BSP_AUDIO_IN_Stop+0xc8>)
 8001728:	f014 f80c 	bl	8015744 <HAL_MDF_AcqStop_DMA>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d002      	beq.n	8001738 <BSP_AUDIO_IN_Stop+0x7c>
      {
        status = BSP_ERROR_PERIPH_FAILURE;
 8001732:	f06f 0303 	mvn.w	r3, #3
 8001736:	60fb      	str	r3, [r7, #12]
      }
    }
    if (((Audio_In_Ctx[Instance].Device & AUDIO_IN_DEVICE_DIGITAL_MIC2) == AUDIO_IN_DEVICE_DIGITAL_MIC2)
 8001738:	4a11      	ldr	r2, [pc, #68]	; (8001780 <BSP_AUDIO_IN_Stop+0xc4>)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	015b      	lsls	r3, r3, #5
 800173e:	4413      	add	r3, r2
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d00b      	beq.n	8001762 <BSP_AUDIO_IN_Stop+0xa6>
        && (status == BSP_ERROR_NONE))
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d108      	bne.n	8001762 <BSP_AUDIO_IN_Stop+0xa6>
    {
      if (HAL_MDF_AcqStop_DMA(&haudio_in_mdf_filter[1]) != HAL_OK)
 8001750:	480d      	ldr	r0, [pc, #52]	; (8001788 <BSP_AUDIO_IN_Stop+0xcc>)
 8001752:	f013 fff7 	bl	8015744 <HAL_MDF_AcqStop_DMA>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d002      	beq.n	8001762 <BSP_AUDIO_IN_Stop+0xa6>
      {
        status = BSP_ERROR_PERIPH_FAILURE;
 800175c:	f06f 0303 	mvn.w	r3, #3
 8001760:	60fb      	str	r3, [r7, #12]
      }
    }

    if (status == BSP_ERROR_NONE)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d106      	bne.n	8001776 <BSP_AUDIO_IN_Stop+0xba>
    {
      /* Update audio in state */
      Audio_In_Ctx[Instance].State = AUDIO_IN_STATE_STOP;
 8001768:	4a05      	ldr	r2, [pc, #20]	; (8001780 <BSP_AUDIO_IN_Stop+0xc4>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	015b      	lsls	r3, r3, #5
 800176e:	4413      	add	r3, r2
 8001770:	331c      	adds	r3, #28
 8001772:	2202      	movs	r2, #2
 8001774:	601a      	str	r2, [r3, #0]
    }
  }
  return status;
 8001776:	68fb      	ldr	r3, [r7, #12]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20000014 	.word	0x20000014
 8001784:	200007f8 	.word	0x200007f8
 8001788:	2000083c 	.word	0x2000083c

0800178c <BSP_AUDIO_IN_IRQHandler>:
  * @param  Instance Audio in instance.
  * @param  Device Device of the audio in stream.
  * @retval None.
  */
void BSP_AUDIO_IN_IRQHandler(uint32_t Instance, uint32_t Device)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
  if (Instance == 0U)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d109      	bne.n	80017b0 <BSP_AUDIO_IN_IRQHandler+0x24>
  {
    if (Device == AUDIO_IN_DEVICE_DIGITAL_MIC1)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d103      	bne.n	80017aa <BSP_AUDIO_IN_IRQHandler+0x1e>
    {
      HAL_DMA_IRQHandler(&haudio_mdf[0]);
 80017a2:	4805      	ldr	r0, [pc, #20]	; (80017b8 <BSP_AUDIO_IN_IRQHandler+0x2c>)
 80017a4:	f010 fdf2 	bl	801238c <HAL_DMA_IRQHandler>
    else /* Device == AUDIO_IN_DEVICE_DIGITAL_MIC2 */
    {
      HAL_DMA_IRQHandler(&haudio_mdf[1]);
    }
  }
}
 80017a8:	e002      	b.n	80017b0 <BSP_AUDIO_IN_IRQHandler+0x24>
      HAL_DMA_IRQHandler(&haudio_mdf[1]);
 80017aa:	4804      	ldr	r0, [pc, #16]	; (80017bc <BSP_AUDIO_IN_IRQHandler+0x30>)
 80017ac:	f010 fdee 	bl	801238c <HAL_DMA_IRQHandler>
}
 80017b0:	bf00      	nop
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20000880 	.word	0x20000880
 80017bc:	200008f8 	.word	0x200008f8

080017c0 <MDF_BlockMspInit>:
  * @brief  Initialize MDF filter MSP.
  * @param  hmdf MDF filter handle.
  * @retval None.
  */
static void MDF_BlockMspInit(MDF_HandleTypeDef *hmdf)
{
 80017c0:	b5b0      	push	{r4, r5, r7, lr}
 80017c2:	b0ac      	sub	sp, #176	; 0xb0
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  static DMA_NodeTypeDef     DmaNode[2] = {{{0}}, {{0}}};
  DMA_NodeConfTypeDef dmaNodeConfig;
  GPIO_InitTypeDef  GPIO_InitStruct;

  if (hmdf->Instance == ADF1_Filter0)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a8f      	ldr	r2, [pc, #572]	; (8001a0c <MDF_BlockMspInit+0x24c>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	f040 812c 	bne.w	8001a2c <MDF_BlockMspInit+0x26c>
  {
    /* Reset ADF1 and enable clock */
    AUDIO_ADF1_CLK_ENABLE();
 80017d4:	4b8e      	ldr	r3, [pc, #568]	; (8001a10 <MDF_BlockMspInit+0x250>)
 80017d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017da:	4a8d      	ldr	r2, [pc, #564]	; (8001a10 <MDF_BlockMspInit+0x250>)
 80017dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80017e4:	4b8a      	ldr	r3, [pc, #552]	; (8001a10 <MDF_BlockMspInit+0x250>)
 80017e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_ADF1_RELEASE_RESET();
 80017f2:	4b87      	ldr	r3, [pc, #540]	; (8001a10 <MDF_BlockMspInit+0x250>)
 80017f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017f6:	4a86      	ldr	r2, [pc, #536]	; (8001a10 <MDF_BlockMspInit+0x250>)
 80017f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80017fc:	66d3      	str	r3, [r2, #108]	; 0x6c
    __HAL_RCC_ADF1_CLK_ENABLE();
 80017fe:	4b84      	ldr	r3, [pc, #528]	; (8001a10 <MDF_BlockMspInit+0x250>)
 8001800:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001804:	4a82      	ldr	r2, [pc, #520]	; (8001a10 <MDF_BlockMspInit+0x250>)
 8001806:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800180a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800180e:	4b80      	ldr	r3, [pc, #512]	; (8001a10 <MDF_BlockMspInit+0x250>)
 8001810:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001818:	62bb      	str	r3, [r7, #40]	; 0x28
 800181a:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* ADF pins configuration: ADF1_CCK0, ADF1_DATINx pins */
    AUDIO_ADF1_CCK0_GPIO_CLK_ENABLE();
 800181c:	4b7c      	ldr	r3, [pc, #496]	; (8001a10 <MDF_BlockMspInit+0x250>)
 800181e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001822:	4a7b      	ldr	r2, [pc, #492]	; (8001a10 <MDF_BlockMspInit+0x250>)
 8001824:	f043 0310 	orr.w	r3, r3, #16
 8001828:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800182c:	4b78      	ldr	r3, [pc, #480]	; (8001a10 <MDF_BlockMspInit+0x250>)
 800182e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001832:	f003 0310 	and.w	r3, r3, #16
 8001836:	627b      	str	r3, [r7, #36]	; 0x24
 8001838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800183a:	2302      	movs	r3, #2
 800183c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001842:	2303      	movs	r3, #3
 8001844:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Alternate = AUDIO_ADF1_CCK0_GPIO_AF;
 8001846:	2303      	movs	r3, #3
 8001848:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pin       = AUDIO_ADF1_CCK0_GPIO_PIN;
 800184a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800184e:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(AUDIO_ADF1_CCK0_GPIO_PORT, &GPIO_InitStruct);
 8001850:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001854:	4619      	mov	r1, r3
 8001856:	486f      	ldr	r0, [pc, #444]	; (8001a14 <MDF_BlockMspInit+0x254>)
 8001858:	f012 f930 	bl	8013abc <HAL_GPIO_Init>

    AUDIO_ADF1_SDINx_GPIO_CLK_ENABLE();
 800185c:	4b6c      	ldr	r3, [pc, #432]	; (8001a10 <MDF_BlockMspInit+0x250>)
 800185e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001862:	4a6b      	ldr	r2, [pc, #428]	; (8001a10 <MDF_BlockMspInit+0x250>)
 8001864:	f043 0310 	orr.w	r3, r3, #16
 8001868:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800186c:	4b68      	ldr	r3, [pc, #416]	; (8001a10 <MDF_BlockMspInit+0x250>)
 800186e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001872:	f003 0310 	and.w	r3, r3, #16
 8001876:	623b      	str	r3, [r7, #32]
 8001878:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Alternate = AUDIO_ADF1_SDINx_GPIO_AF;
 800187a:	2303      	movs	r3, #3
 800187c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pin       = AUDIO_ADF1_SDINx_GPIO_PIN;
 800187e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001882:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(AUDIO_ADF1_SDINx_GPIO_PORT, &GPIO_InitStruct);
 8001884:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001888:	4619      	mov	r1, r3
 800188a:	4862      	ldr	r0, [pc, #392]	; (8001a14 <MDF_BlockMspInit+0x254>)
 800188c:	f012 f916 	bl	8013abc <HAL_GPIO_Init>

    /* Enable the DMA clock */
    __HAL_RCC_GPDMA1_CLK_ENABLE();
 8001890:	4b5f      	ldr	r3, [pc, #380]	; (8001a10 <MDF_BlockMspInit+0x250>)
 8001892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001896:	4a5e      	ldr	r2, [pc, #376]	; (8001a10 <MDF_BlockMspInit+0x250>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80018a0:	4b5b      	ldr	r3, [pc, #364]	; (8001a10 <MDF_BlockMspInit+0x250>)
 80018a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	61fb      	str	r3, [r7, #28]
 80018ac:	69fb      	ldr	r3, [r7, #28]

    if (MdfQueue1.Head == NULL)
 80018ae:	4b5a      	ldr	r3, [pc, #360]	; (8001a18 <MDF_BlockMspInit+0x258>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d173      	bne.n	800199e <MDF_BlockMspInit+0x1de>
    {
      /* ADF DMA configuration */
      dmaNodeConfig.NodeType                    = DMA_GPDMA_LINEAR_NODE;
 80018b6:	2321      	movs	r3, #33	; 0x21
 80018b8:	647b      	str	r3, [r7, #68]	; 0x44
      dmaNodeConfig.Init                        = haudio_mdf[0].Init;
 80018ba:	4b58      	ldr	r3, [pc, #352]	; (8001a1c <MDF_BlockMspInit+0x25c>)
 80018bc:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80018c0:	1d1d      	adds	r5, r3, #4
 80018c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018ce:	682b      	ldr	r3, [r5, #0]
 80018d0:	6023      	str	r3, [r4, #0]
      dmaNodeConfig.Init.Request                = GPDMA1_REQUEST_ADF1_FLT0;
 80018d2:	2362      	movs	r3, #98	; 0x62
 80018d4:	64bb      	str	r3, [r7, #72]	; 0x48
      dmaNodeConfig.Init.BlkHWRequest           = DMA_BREQ_SINGLE_BURST;
 80018d6:	2300      	movs	r3, #0
 80018d8:	64fb      	str	r3, [r7, #76]	; 0x4c
      dmaNodeConfig.Init.Direction              = DMA_PERIPH_TO_MEMORY;
 80018da:	2300      	movs	r3, #0
 80018dc:	653b      	str	r3, [r7, #80]	; 0x50
      dmaNodeConfig.Init.SrcInc                 = DMA_SINC_FIXED;
 80018de:	2300      	movs	r3, #0
 80018e0:	657b      	str	r3, [r7, #84]	; 0x54
      dmaNodeConfig.Init.DestInc                = DMA_DINC_INCREMENTED;
 80018e2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80018e6:	65bb      	str	r3, [r7, #88]	; 0x58
      if (Audio_In_Ctx[0].BitsPerSample == AUDIO_RESOLUTION_16B)
 80018e8:	4b4d      	ldr	r3, [pc, #308]	; (8001a20 <MDF_BlockMspInit+0x260>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	2b10      	cmp	r3, #16
 80018ee:	d105      	bne.n	80018fc <MDF_BlockMspInit+0x13c>
      {
        dmaNodeConfig.Init.SrcDataWidth         = DMA_SRC_DATAWIDTH_HALFWORD;
 80018f0:	2301      	movs	r3, #1
 80018f2:	65fb      	str	r3, [r7, #92]	; 0x5c
        dmaNodeConfig.Init.DestDataWidth        = DMA_DEST_DATAWIDTH_HALFWORD;
 80018f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018f8:	663b      	str	r3, [r7, #96]	; 0x60
 80018fa:	e004      	b.n	8001906 <MDF_BlockMspInit+0x146>
      }
      else /* AUDIO_RESOLUTION_24b */
      {
        dmaNodeConfig.Init.SrcDataWidth         = DMA_SRC_DATAWIDTH_WORD;
 80018fc:	2302      	movs	r3, #2
 80018fe:	65fb      	str	r3, [r7, #92]	; 0x5c
        dmaNodeConfig.Init.DestDataWidth        = DMA_DEST_DATAWIDTH_WORD;
 8001900:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001904:	663b      	str	r3, [r7, #96]	; 0x60
      }
      dmaNodeConfig.Init.Priority               = DMA_HIGH_PRIORITY;
 8001906:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 800190a:	667b      	str	r3, [r7, #100]	; 0x64
      dmaNodeConfig.Init.SrcBurstLength         = 1;
 800190c:	2301      	movs	r3, #1
 800190e:	66bb      	str	r3, [r7, #104]	; 0x68
      dmaNodeConfig.Init.DestBurstLength        = 1;
 8001910:	2301      	movs	r3, #1
 8001912:	66fb      	str	r3, [r7, #108]	; 0x6c
      dmaNodeConfig.Init.TransferAllocatedPort  = DMA_SRC_ALLOCATED_PORT0 | DMA_DEST_ALLOCATED_PORT1;
 8001914:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001918:	673b      	str	r3, [r7, #112]	; 0x70
      dmaNodeConfig.Init.TransferEventMode      = DMA_TCEM_BLOCK_TRANSFER;
 800191a:	2300      	movs	r3, #0
 800191c:	677b      	str	r3, [r7, #116]	; 0x74
      dmaNodeConfig.Init.Mode                   = DMA_NORMAL;
 800191e:	2300      	movs	r3, #0
 8001920:	67bb      	str	r3, [r7, #120]	; 0x78

      dmaNodeConfig.DataHandlingConfig.DataExchange       = DMA_EXCHANGE_NONE;
 8001922:	2300      	movs	r3, #0
 8001924:	67fb      	str	r3, [r7, #124]	; 0x7c
      dmaNodeConfig.DataHandlingConfig.DataAlignment      = DMA_DATA_UNPACK;
 8001926:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800192a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      dmaNodeConfig.TriggerConfig.TriggerMode             = DMA_TRIGM_BLOCK_TRANSFER;
 800192e:	2300      	movs	r3, #0
 8001930:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      dmaNodeConfig.TriggerConfig.TriggerPolarity         = DMA_TRIG_POLARITY_MASKED;
 8001934:	2300      	movs	r3, #0
 8001936:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      dmaNodeConfig.TriggerConfig.TriggerSelection        = GPDMA1_TRIGGER_EXTI_LINE0;
 800193a:	2300      	movs	r3, #0
 800193c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      dmaNodeConfig.RepeatBlockConfig.RepeatCount         = 1U;
 8001940:	2301      	movs	r3, #1
 8001942:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      dmaNodeConfig.RepeatBlockConfig.SrcAddrOffset       = 0;
 8001946:	2300      	movs	r3, #0
 8001948:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      dmaNodeConfig.RepeatBlockConfig.DestAddrOffset      = 0;
 800194c:	2300      	movs	r3, #0
 800194e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      dmaNodeConfig.RepeatBlockConfig.BlkSrcAddrOffset    = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      dmaNodeConfig.RepeatBlockConfig.BlkDestAddrOffset   = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

      /* Build node */
      if (HAL_DMAEx_List_BuildNode(&dmaNodeConfig, &DmaNode[0]) != HAL_OK)
 800195e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001962:	4930      	ldr	r1, [pc, #192]	; (8001a24 <MDF_BlockMspInit+0x264>)
 8001964:	4618      	mov	r0, r3
 8001966:	f011 f959 	bl	8012c1c <HAL_DMAEx_List_BuildNode>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d002      	beq.n	8001976 <MDF_BlockMspInit+0x1b6>
      {
        BSP_AUDIO_IN_Error_CallBack(0);
 8001970:	2000      	movs	r0, #0
 8001972:	f017 fc1d 	bl	80191b0 <BSP_AUDIO_IN_Error_CallBack>
      }

      /* Insert node to queue */
      if (HAL_DMAEx_List_InsertNode(&MdfQueue1, NULL, &DmaNode[0]) != HAL_OK)
 8001976:	4a2b      	ldr	r2, [pc, #172]	; (8001a24 <MDF_BlockMspInit+0x264>)
 8001978:	2100      	movs	r1, #0
 800197a:	4827      	ldr	r0, [pc, #156]	; (8001a18 <MDF_BlockMspInit+0x258>)
 800197c:	f011 f964 	bl	8012c48 <HAL_DMAEx_List_InsertNode>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d002      	beq.n	800198c <MDF_BlockMspInit+0x1cc>
      {
        BSP_AUDIO_IN_Error_CallBack(0);
 8001986:	2000      	movs	r0, #0
 8001988:	f017 fc12 	bl	80191b0 <BSP_AUDIO_IN_Error_CallBack>
      }

      /* Set queue in circular mode */
      if (HAL_DMAEx_List_SetCircularMode(&MdfQueue1) != HAL_OK)
 800198c:	4822      	ldr	r0, [pc, #136]	; (8001a18 <MDF_BlockMspInit+0x258>)
 800198e:	f011 fae6 	bl	8012f5e <HAL_DMAEx_List_SetCircularMode>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d002      	beq.n	800199e <MDF_BlockMspInit+0x1de>
      {
        BSP_AUDIO_IN_Error_CallBack(0);
 8001998:	2000      	movs	r0, #0
 800199a:	f017 fc09 	bl	80191b0 <BSP_AUDIO_IN_Error_CallBack>
      }
    }
    haudio_mdf[0].Instance               = GPDMA1_Channel6;
 800199e:	4b1f      	ldr	r3, [pc, #124]	; (8001a1c <MDF_BlockMspInit+0x25c>)
 80019a0:	4a21      	ldr	r2, [pc, #132]	; (8001a28 <MDF_BlockMspInit+0x268>)
 80019a2:	601a      	str	r2, [r3, #0]

    /* Fill linked list structure */
    haudio_mdf[0].InitLinkedList.Priority          = DMA_HIGH_PRIORITY;
 80019a4:	4b1d      	ldr	r3, [pc, #116]	; (8001a1c <MDF_BlockMspInit+0x25c>)
 80019a6:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80019aa:	639a      	str	r2, [r3, #56]	; 0x38
    haudio_mdf[0].InitLinkedList.LinkStepMode      = DMA_LSM_FULL_EXECUTION;
 80019ac:	4b1b      	ldr	r3, [pc, #108]	; (8001a1c <MDF_BlockMspInit+0x25c>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	63da      	str	r2, [r3, #60]	; 0x3c
    haudio_mdf[0].InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80019b2:	4b1a      	ldr	r3, [pc, #104]	; (8001a1c <MDF_BlockMspInit+0x25c>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	641a      	str	r2, [r3, #64]	; 0x40
    haudio_mdf[0].InitLinkedList.TransferEventMode = DMA_TCEM_EACH_LL_ITEM_TRANSFER;
 80019b8:	4b18      	ldr	r3, [pc, #96]	; (8001a1c <MDF_BlockMspInit+0x25c>)
 80019ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80019be:	645a      	str	r2, [r3, #68]	; 0x44
    haudio_mdf[0].InitLinkedList.LinkedListMode    = DMA_LINKEDLIST_CIRCULAR;
 80019c0:	4b16      	ldr	r3, [pc, #88]	; (8001a1c <MDF_BlockMspInit+0x25c>)
 80019c2:	2281      	movs	r2, #129	; 0x81
 80019c4:	649a      	str	r2, [r3, #72]	; 0x48

    /* DMA linked list init */
    if (HAL_DMAEx_List_Init(&haudio_mdf[0]) != HAL_OK)
 80019c6:	4815      	ldr	r0, [pc, #84]	; (8001a1c <MDF_BlockMspInit+0x25c>)
 80019c8:	f010 fe82 	bl	80126d0 <HAL_DMAEx_List_Init>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d002      	beq.n	80019d8 <MDF_BlockMspInit+0x218>
    {
      BSP_AUDIO_IN_Error_CallBack(0);
 80019d2:	2000      	movs	r0, #0
 80019d4:	f017 fbec 	bl	80191b0 <BSP_AUDIO_IN_Error_CallBack>
    }

    /* Link queue to DMA channel */
    if (HAL_DMAEx_List_LinkQ(&haudio_mdf[0], &MdfQueue1) != HAL_OK)
 80019d8:	490f      	ldr	r1, [pc, #60]	; (8001a18 <MDF_BlockMspInit+0x258>)
 80019da:	4810      	ldr	r0, [pc, #64]	; (8001a1c <MDF_BlockMspInit+0x25c>)
 80019dc:	f011 fb20 	bl	8013020 <HAL_DMAEx_List_LinkQ>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d002      	beq.n	80019ec <MDF_BlockMspInit+0x22c>
    {
      BSP_AUDIO_IN_Error_CallBack(0);
 80019e6:	2000      	movs	r0, #0
 80019e8:	f017 fbe2 	bl	80191b0 <BSP_AUDIO_IN_Error_CallBack>
    }

    __HAL_LINKDMA(hmdf, hdma, haudio_mdf[0]);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a0b      	ldr	r2, [pc, #44]	; (8001a1c <MDF_BlockMspInit+0x25c>)
 80019f0:	639a      	str	r2, [r3, #56]	; 0x38
 80019f2:	4a0a      	ldr	r2, [pc, #40]	; (8001a1c <MDF_BlockMspInit+0x25c>)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	65d3      	str	r3, [r2, #92]	; 0x5c

    HAL_NVIC_SetPriority(GPDMA1_Channel6_IRQn, BSP_AUDIO_IN_IT_PRIORITY, 0);
 80019f8:	2200      	movs	r2, #0
 80019fa:	210f      	movs	r1, #15
 80019fc:	2023      	movs	r0, #35	; 0x23
 80019fe:	f00f ffa0 	bl	8011942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel6_IRQn);
 8001a02:	2023      	movs	r0, #35	; 0x23
 8001a04:	f00f ffb7 	bl	8011976 <HAL_NVIC_EnableIRQ>
  else
  {
    /* Do nothing */
  }

}
 8001a08:	e136      	b.n	8001c78 <MDF_BlockMspInit+0x4b8>
 8001a0a:	bf00      	nop
 8001a0c:	46024080 	.word	0x46024080
 8001a10:	46020c00 	.word	0x46020c00
 8001a14:	42021000 	.word	0x42021000
 8001a18:	200009f8 	.word	0x200009f8
 8001a1c:	20000880 	.word	0x20000880
 8001a20:	20000014 	.word	0x20000014
 8001a24:	20000a28 	.word	0x20000a28
 8001a28:	40020350 	.word	0x40020350
  else if (hmdf->Instance == MDF1_Filter0)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a93      	ldr	r2, [pc, #588]	; (8001c80 <MDF_BlockMspInit+0x4c0>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	f040 8120 	bne.w	8001c78 <MDF_BlockMspInit+0x4b8>
    AUDIO_MDF1_CLK_ENABLE();
 8001a38:	4b92      	ldr	r3, [pc, #584]	; (8001c84 <MDF_BlockMspInit+0x4c4>)
 8001a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a3e:	4a91      	ldr	r2, [pc, #580]	; (8001c84 <MDF_BlockMspInit+0x4c4>)
 8001a40:	f043 0308 	orr.w	r3, r3, #8
 8001a44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001a48:	4b8e      	ldr	r3, [pc, #568]	; (8001c84 <MDF_BlockMspInit+0x4c4>)
 8001a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a4e:	f003 0308 	and.w	r3, r3, #8
 8001a52:	61bb      	str	r3, [r7, #24]
 8001a54:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_MDF1_FORCE_RESET();
 8001a56:	4b8b      	ldr	r3, [pc, #556]	; (8001c84 <MDF_BlockMspInit+0x4c4>)
 8001a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a5a:	4a8a      	ldr	r2, [pc, #552]	; (8001c84 <MDF_BlockMspInit+0x4c4>)
 8001a5c:	f043 0308 	orr.w	r3, r3, #8
 8001a60:	6613      	str	r3, [r2, #96]	; 0x60
    __HAL_RCC_MDF1_RELEASE_RESET();
 8001a62:	4b88      	ldr	r3, [pc, #544]	; (8001c84 <MDF_BlockMspInit+0x4c4>)
 8001a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a66:	4a87      	ldr	r2, [pc, #540]	; (8001c84 <MDF_BlockMspInit+0x4c4>)
 8001a68:	f023 0308 	bic.w	r3, r3, #8
 8001a6c:	6613      	str	r3, [r2, #96]	; 0x60
    HAL_GPIO_DeInit(AUDIO_MDF1_CCK1_GPIO_PORT, AUDIO_MDF1_CCK1_GPIO_PIN);
 8001a6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a72:	4885      	ldr	r0, [pc, #532]	; (8001c88 <MDF_BlockMspInit+0x4c8>)
 8001a74:	f012 f9fa 	bl	8013e6c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(AUDIO_MDF1_SDIN0_GPIO_PORT, AUDIO_MDF1_SDIN0_GPIO_PIN);
 8001a78:	2102      	movs	r1, #2
 8001a7a:	4884      	ldr	r0, [pc, #528]	; (8001c8c <MDF_BlockMspInit+0x4cc>)
 8001a7c:	f012 f9f6 	bl	8013e6c <HAL_GPIO_DeInit>
    AUDIO_MDF1_CCK1_GPIO_CLK_ENABLE();
 8001a80:	4b80      	ldr	r3, [pc, #512]	; (8001c84 <MDF_BlockMspInit+0x4c4>)
 8001a82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a86:	4a7f      	ldr	r2, [pc, #508]	; (8001c84 <MDF_BlockMspInit+0x4c4>)
 8001a88:	f043 0320 	orr.w	r3, r3, #32
 8001a8c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001a90:	4b7c      	ldr	r3, [pc, #496]	; (8001c84 <MDF_BlockMspInit+0x4c4>)
 8001a92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a96:	f003 0320 	and.w	r3, r3, #32
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Alternate = AUDIO_MDF1_CCK1_GPIO_AF;
 8001aaa:	2306      	movs	r3, #6
 8001aac:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pin       = AUDIO_MDF1_CCK1_GPIO_PIN;
 8001aae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ab2:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(AUDIO_MDF1_CCK1_GPIO_PORT, &GPIO_InitStruct);
 8001ab4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4873      	ldr	r0, [pc, #460]	; (8001c88 <MDF_BlockMspInit+0x4c8>)
 8001abc:	f011 fffe 	bl	8013abc <HAL_GPIO_Init>
    AUDIO_MDF1_SDIN0_GPIO_CLK_ENABLE();
 8001ac0:	4b70      	ldr	r3, [pc, #448]	; (8001c84 <MDF_BlockMspInit+0x4c4>)
 8001ac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ac6:	4a6f      	ldr	r2, [pc, #444]	; (8001c84 <MDF_BlockMspInit+0x4c4>)
 8001ac8:	f043 0302 	orr.w	r3, r3, #2
 8001acc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001ad0:	4b6c      	ldr	r3, [pc, #432]	; (8001c84 <MDF_BlockMspInit+0x4c4>)
 8001ad2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	613b      	str	r3, [r7, #16]
 8001adc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Alternate = AUDIO_MDF1_SDIN0_GPIO_AF;
 8001ade:	2306      	movs	r3, #6
 8001ae0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pin       = AUDIO_MDF1_SDIN0_GPIO_PIN;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(AUDIO_MDF1_SDIN0_GPIO_PORT, &GPIO_InitStruct);
 8001ae6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001aea:	4619      	mov	r1, r3
 8001aec:	4867      	ldr	r0, [pc, #412]	; (8001c8c <MDF_BlockMspInit+0x4cc>)
 8001aee:	f011 ffe5 	bl	8013abc <HAL_GPIO_Init>
    __HAL_RCC_GPDMA1_CLK_ENABLE();
 8001af2:	4b64      	ldr	r3, [pc, #400]	; (8001c84 <MDF_BlockMspInit+0x4c4>)
 8001af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001af8:	4a62      	ldr	r2, [pc, #392]	; (8001c84 <MDF_BlockMspInit+0x4c4>)
 8001afa:	f043 0301 	orr.w	r3, r3, #1
 8001afe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001b02:	4b60      	ldr	r3, [pc, #384]	; (8001c84 <MDF_BlockMspInit+0x4c4>)
 8001b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
    if (MdfQueue2.Head == NULL)
 8001b10:	4b5f      	ldr	r3, [pc, #380]	; (8001c90 <MDF_BlockMspInit+0x4d0>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d174      	bne.n	8001c02 <MDF_BlockMspInit+0x442>
      dmaNodeConfig.NodeType                    = DMA_GPDMA_LINEAR_NODE;
 8001b18:	2321      	movs	r3, #33	; 0x21
 8001b1a:	647b      	str	r3, [r7, #68]	; 0x44
      dmaNodeConfig.Init                        = haudio_mdf[1].Init;
 8001b1c:	4b5d      	ldr	r3, [pc, #372]	; (8001c94 <MDF_BlockMspInit+0x4d4>)
 8001b1e:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8001b22:	f103 057c 	add.w	r5, r3, #124	; 0x7c
 8001b26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b32:	682b      	ldr	r3, [r5, #0]
 8001b34:	6023      	str	r3, [r4, #0]
      dmaNodeConfig.Init.Request                = GPDMA1_REQUEST_MDF1_FLT0;
 8001b36:	235c      	movs	r3, #92	; 0x5c
 8001b38:	64bb      	str	r3, [r7, #72]	; 0x48
      dmaNodeConfig.Init.BlkHWRequest           = DMA_BREQ_SINGLE_BURST;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	64fb      	str	r3, [r7, #76]	; 0x4c
      dmaNodeConfig.Init.Direction              = DMA_PERIPH_TO_MEMORY;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	653b      	str	r3, [r7, #80]	; 0x50
      dmaNodeConfig.Init.SrcInc                 = DMA_SINC_FIXED;
 8001b42:	2300      	movs	r3, #0
 8001b44:	657b      	str	r3, [r7, #84]	; 0x54
      dmaNodeConfig.Init.DestInc                = DMA_DINC_INCREMENTED;
 8001b46:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001b4a:	65bb      	str	r3, [r7, #88]	; 0x58
      if (Audio_In_Ctx[0].BitsPerSample == AUDIO_RESOLUTION_16B)
 8001b4c:	4b52      	ldr	r3, [pc, #328]	; (8001c98 <MDF_BlockMspInit+0x4d8>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	2b10      	cmp	r3, #16
 8001b52:	d105      	bne.n	8001b60 <MDF_BlockMspInit+0x3a0>
        dmaNodeConfig.Init.SrcDataWidth         = DMA_SRC_DATAWIDTH_HALFWORD;
 8001b54:	2301      	movs	r3, #1
 8001b56:	65fb      	str	r3, [r7, #92]	; 0x5c
        dmaNodeConfig.Init.DestDataWidth        = DMA_DEST_DATAWIDTH_HALFWORD;
 8001b58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b5c:	663b      	str	r3, [r7, #96]	; 0x60
 8001b5e:	e004      	b.n	8001b6a <MDF_BlockMspInit+0x3aa>
        dmaNodeConfig.Init.SrcDataWidth         = DMA_SRC_DATAWIDTH_WORD;
 8001b60:	2302      	movs	r3, #2
 8001b62:	65fb      	str	r3, [r7, #92]	; 0x5c
        dmaNodeConfig.Init.DestDataWidth        = DMA_DEST_DATAWIDTH_WORD;
 8001b64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b68:	663b      	str	r3, [r7, #96]	; 0x60
      dmaNodeConfig.Init.Priority               = DMA_HIGH_PRIORITY;
 8001b6a:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 8001b6e:	667b      	str	r3, [r7, #100]	; 0x64
      dmaNodeConfig.Init.SrcBurstLength         = 1;
 8001b70:	2301      	movs	r3, #1
 8001b72:	66bb      	str	r3, [r7, #104]	; 0x68
      dmaNodeConfig.Init.DestBurstLength        = 1;
 8001b74:	2301      	movs	r3, #1
 8001b76:	66fb      	str	r3, [r7, #108]	; 0x6c
      dmaNodeConfig.Init.TransferAllocatedPort  = DMA_SRC_ALLOCATED_PORT0 | DMA_DEST_ALLOCATED_PORT1;
 8001b78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b7c:	673b      	str	r3, [r7, #112]	; 0x70
      dmaNodeConfig.Init.TransferEventMode      = DMA_TCEM_BLOCK_TRANSFER;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	677b      	str	r3, [r7, #116]	; 0x74
      dmaNodeConfig.Init.Mode                   = DMA_NORMAL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	67bb      	str	r3, [r7, #120]	; 0x78
      dmaNodeConfig.DataHandlingConfig.DataExchange       = DMA_EXCHANGE_NONE;
 8001b86:	2300      	movs	r3, #0
 8001b88:	67fb      	str	r3, [r7, #124]	; 0x7c
      dmaNodeConfig.DataHandlingConfig.DataAlignment      = DMA_DATA_UNPACK;
 8001b8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      dmaNodeConfig.TriggerConfig.TriggerMode             = DMA_TRIGM_BLOCK_TRANSFER;
 8001b92:	2300      	movs	r3, #0
 8001b94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      dmaNodeConfig.TriggerConfig.TriggerPolarity         = DMA_TRIG_POLARITY_MASKED;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      dmaNodeConfig.TriggerConfig.TriggerSelection        = GPDMA1_TRIGGER_EXTI_LINE0;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      dmaNodeConfig.RepeatBlockConfig.RepeatCount         = 1U;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      dmaNodeConfig.RepeatBlockConfig.SrcAddrOffset       = 0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      dmaNodeConfig.RepeatBlockConfig.DestAddrOffset      = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      dmaNodeConfig.RepeatBlockConfig.BlkSrcAddrOffset    = 0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      dmaNodeConfig.RepeatBlockConfig.BlkDestAddrOffset   = 0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      if (HAL_DMAEx_List_BuildNode(&dmaNodeConfig, &DmaNode[1]) != HAL_OK)
 8001bc2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001bc6:	4935      	ldr	r1, [pc, #212]	; (8001c9c <MDF_BlockMspInit+0x4dc>)
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f011 f827 	bl	8012c1c <HAL_DMAEx_List_BuildNode>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d002      	beq.n	8001bda <MDF_BlockMspInit+0x41a>
        BSP_AUDIO_IN_Error_CallBack(0);
 8001bd4:	2000      	movs	r0, #0
 8001bd6:	f017 faeb 	bl	80191b0 <BSP_AUDIO_IN_Error_CallBack>
      if (HAL_DMAEx_List_InsertNode(&MdfQueue2, NULL, &DmaNode[1]) != HAL_OK)
 8001bda:	4a30      	ldr	r2, [pc, #192]	; (8001c9c <MDF_BlockMspInit+0x4dc>)
 8001bdc:	2100      	movs	r1, #0
 8001bde:	482c      	ldr	r0, [pc, #176]	; (8001c90 <MDF_BlockMspInit+0x4d0>)
 8001be0:	f011 f832 	bl	8012c48 <HAL_DMAEx_List_InsertNode>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d002      	beq.n	8001bf0 <MDF_BlockMspInit+0x430>
        BSP_AUDIO_IN_Error_CallBack(0);
 8001bea:	2000      	movs	r0, #0
 8001bec:	f017 fae0 	bl	80191b0 <BSP_AUDIO_IN_Error_CallBack>
      if (HAL_DMAEx_List_SetCircularMode(&MdfQueue2) != HAL_OK)
 8001bf0:	4827      	ldr	r0, [pc, #156]	; (8001c90 <MDF_BlockMspInit+0x4d0>)
 8001bf2:	f011 f9b4 	bl	8012f5e <HAL_DMAEx_List_SetCircularMode>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d002      	beq.n	8001c02 <MDF_BlockMspInit+0x442>
        BSP_AUDIO_IN_Error_CallBack(0);
 8001bfc:	2000      	movs	r0, #0
 8001bfe:	f017 fad7 	bl	80191b0 <BSP_AUDIO_IN_Error_CallBack>
    haudio_mdf[1].Instance               = GPDMA1_Channel0;
 8001c02:	4b24      	ldr	r3, [pc, #144]	; (8001c94 <MDF_BlockMspInit+0x4d4>)
 8001c04:	4a26      	ldr	r2, [pc, #152]	; (8001ca0 <MDF_BlockMspInit+0x4e0>)
 8001c06:	679a      	str	r2, [r3, #120]	; 0x78
    haudio_mdf[1].InitLinkedList.Priority          = DMA_HIGH_PRIORITY;
 8001c08:	4b22      	ldr	r3, [pc, #136]	; (8001c94 <MDF_BlockMspInit+0x4d4>)
 8001c0a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001c0e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    haudio_mdf[1].InitLinkedList.LinkStepMode      = DMA_LSM_FULL_EXECUTION;
 8001c12:	4b20      	ldr	r3, [pc, #128]	; (8001c94 <MDF_BlockMspInit+0x4d4>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    haudio_mdf[1].InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8001c1a:	4b1e      	ldr	r3, [pc, #120]	; (8001c94 <MDF_BlockMspInit+0x4d4>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    haudio_mdf[1].InitLinkedList.TransferEventMode = DMA_TCEM_EACH_LL_ITEM_TRANSFER;
 8001c22:	4b1c      	ldr	r3, [pc, #112]	; (8001c94 <MDF_BlockMspInit+0x4d4>)
 8001c24:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001c28:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    haudio_mdf[1].InitLinkedList.LinkedListMode    = DMA_LINKEDLIST_CIRCULAR;
 8001c2c:	4b19      	ldr	r3, [pc, #100]	; (8001c94 <MDF_BlockMspInit+0x4d4>)
 8001c2e:	2281      	movs	r2, #129	; 0x81
 8001c30:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    if (HAL_DMAEx_List_Init(&haudio_mdf[1]) != HAL_OK)
 8001c34:	481b      	ldr	r0, [pc, #108]	; (8001ca4 <MDF_BlockMspInit+0x4e4>)
 8001c36:	f010 fd4b 	bl	80126d0 <HAL_DMAEx_List_Init>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d002      	beq.n	8001c46 <MDF_BlockMspInit+0x486>
      BSP_AUDIO_IN_Error_CallBack(0);
 8001c40:	2000      	movs	r0, #0
 8001c42:	f017 fab5 	bl	80191b0 <BSP_AUDIO_IN_Error_CallBack>
    if (HAL_DMAEx_List_LinkQ(&haudio_mdf[1], &MdfQueue2) != HAL_OK)
 8001c46:	4912      	ldr	r1, [pc, #72]	; (8001c90 <MDF_BlockMspInit+0x4d0>)
 8001c48:	4816      	ldr	r0, [pc, #88]	; (8001ca4 <MDF_BlockMspInit+0x4e4>)
 8001c4a:	f011 f9e9 	bl	8013020 <HAL_DMAEx_List_LinkQ>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d002      	beq.n	8001c5a <MDF_BlockMspInit+0x49a>
      BSP_AUDIO_IN_Error_CallBack(0);
 8001c54:	2000      	movs	r0, #0
 8001c56:	f017 faab 	bl	80191b0 <BSP_AUDIO_IN_Error_CallBack>
    __HAL_LINKDMA(hmdf, hdma, haudio_mdf[1]);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a11      	ldr	r2, [pc, #68]	; (8001ca4 <MDF_BlockMspInit+0x4e4>)
 8001c5e:	639a      	str	r2, [r3, #56]	; 0x38
 8001c60:	4a0c      	ldr	r2, [pc, #48]	; (8001c94 <MDF_BlockMspInit+0x4d4>)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, BSP_AUDIO_IN_IT_PRIORITY, 0);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	210f      	movs	r1, #15
 8001c6c:	201d      	movs	r0, #29
 8001c6e:	f00f fe68 	bl	8011942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8001c72:	201d      	movs	r0, #29
 8001c74:	f00f fe7f 	bl	8011976 <HAL_NVIC_EnableIRQ>
}
 8001c78:	bf00      	nop
 8001c7a:	37b0      	adds	r7, #176	; 0xb0
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bdb0      	pop	{r4, r5, r7, pc}
 8001c80:	40025080 	.word	0x40025080
 8001c84:	46020c00 	.word	0x46020c00
 8001c88:	42021400 	.word	0x42021400
 8001c8c:	42020400 	.word	0x42020400
 8001c90:	20000a10 	.word	0x20000a10
 8001c94:	20000880 	.word	0x20000880
 8001c98:	20000014 	.word	0x20000014
 8001c9c:	20000a4c 	.word	0x20000a4c
 8001ca0:	40020050 	.word	0x40020050
 8001ca4:	200008f8 	.word	0x200008f8

08001ca8 <MDF_BlockMspDeInit>:
  * @brief  DeInitialize MDF filter MSP.
  * @param  hmdf MDF filter handle.
  * @retval None.
  */
static void MDF_BlockMspDeInit(MDF_HandleTypeDef *hmdf)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  if (hmdf->Instance == ADF1_Filter0)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a2c      	ldr	r2, [pc, #176]	; (8001d68 <MDF_BlockMspDeInit+0xc0>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d127      	bne.n	8001d0a <MDF_BlockMspDeInit+0x62>
  {
    /* De-initialize ADF1_CKOUT, ADF1_DATIN1 pins */
    HAL_GPIO_DeInit(AUDIO_ADF1_CCK0_GPIO_PORT, AUDIO_ADF1_CCK0_GPIO_PIN);
 8001cba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cbe:	482b      	ldr	r0, [pc, #172]	; (8001d6c <MDF_BlockMspDeInit+0xc4>)
 8001cc0:	f012 f8d4 	bl	8013e6c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(AUDIO_ADF1_SDINx_GPIO_PORT, AUDIO_ADF1_SDINx_GPIO_PIN);
 8001cc4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cc8:	4828      	ldr	r0, [pc, #160]	; (8001d6c <MDF_BlockMspDeInit+0xc4>)
 8001cca:	f012 f8cf 	bl	8013e6c <HAL_GPIO_DeInit>

    /* Disable ADF1 clock */
    AUDIO_ADF1_CLK_DISABLE();
 8001cce:	4b28      	ldr	r3, [pc, #160]	; (8001d70 <MDF_BlockMspDeInit+0xc8>)
 8001cd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cd4:	4a26      	ldr	r2, [pc, #152]	; (8001d70 <MDF_BlockMspDeInit+0xc8>)
 8001cd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001cda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    /* Disable DMA  Channel IRQ */
    HAL_NVIC_DisableIRQ(GPDMA1_Channel6_IRQn);
 8001cde:	2023      	movs	r0, #35	; 0x23
 8001ce0:	f00f fe57 	bl	8011992 <HAL_NVIC_DisableIRQ>

    /* Reset the DMA Channel configuration*/
    if (HAL_DMAEx_List_DeInit(&haudio_mdf[0]) != HAL_OK)
 8001ce4:	4823      	ldr	r0, [pc, #140]	; (8001d74 <MDF_BlockMspDeInit+0xcc>)
 8001ce6:	f010 fe1f 	bl	8012928 <HAL_DMAEx_List_DeInit>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d002      	beq.n	8001cf6 <MDF_BlockMspDeInit+0x4e>
    {
      BSP_AUDIO_IN_Error_CallBack(0);
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	f017 fa5d 	bl	80191b0 <BSP_AUDIO_IN_Error_CallBack>
    }

    /* Reset MdfQueue */
    if (HAL_DMAEx_List_ResetQ(&MdfQueue1) != HAL_OK)
 8001cf6:	4820      	ldr	r0, [pc, #128]	; (8001d78 <MDF_BlockMspDeInit+0xd0>)
 8001cf8:	f011 f8e7 	bl	8012eca <HAL_DMAEx_List_ResetQ>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d02e      	beq.n	8001d60 <MDF_BlockMspDeInit+0xb8>
    {
      BSP_AUDIO_IN_Error_CallBack(0);
 8001d02:	2000      	movs	r0, #0
 8001d04:	f017 fa54 	bl	80191b0 <BSP_AUDIO_IN_Error_CallBack>
  }
  else
  {
    /* Do nothing */
  }
}
 8001d08:	e02a      	b.n	8001d60 <MDF_BlockMspDeInit+0xb8>
  else if (hmdf->Instance == MDF1_Filter0)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a1b      	ldr	r2, [pc, #108]	; (8001d7c <MDF_BlockMspDeInit+0xd4>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d125      	bne.n	8001d60 <MDF_BlockMspDeInit+0xb8>
    HAL_GPIO_DeInit(AUDIO_MDF1_CCK1_GPIO_PORT, AUDIO_MDF1_CCK1_GPIO_PIN);
 8001d14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d18:	4819      	ldr	r0, [pc, #100]	; (8001d80 <MDF_BlockMspDeInit+0xd8>)
 8001d1a:	f012 f8a7 	bl	8013e6c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(AUDIO_MDF1_SDIN0_GPIO_PORT, AUDIO_MDF1_SDIN0_GPIO_PIN);
 8001d1e:	2102      	movs	r1, #2
 8001d20:	4818      	ldr	r0, [pc, #96]	; (8001d84 <MDF_BlockMspDeInit+0xdc>)
 8001d22:	f012 f8a3 	bl	8013e6c <HAL_GPIO_DeInit>
    AUDIO_MDF1_CLK_DISABLE();
 8001d26:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <MDF_BlockMspDeInit+0xc8>)
 8001d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d2c:	4a10      	ldr	r2, [pc, #64]	; (8001d70 <MDF_BlockMspDeInit+0xc8>)
 8001d2e:	f023 0308 	bic.w	r3, r3, #8
 8001d32:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_NVIC_DisableIRQ(GPDMA1_Channel0_IRQn);
 8001d36:	201d      	movs	r0, #29
 8001d38:	f00f fe2b 	bl	8011992 <HAL_NVIC_DisableIRQ>
    if (HAL_DMAEx_List_DeInit(&haudio_mdf[1]) != HAL_OK)
 8001d3c:	4812      	ldr	r0, [pc, #72]	; (8001d88 <MDF_BlockMspDeInit+0xe0>)
 8001d3e:	f010 fdf3 	bl	8012928 <HAL_DMAEx_List_DeInit>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d002      	beq.n	8001d4e <MDF_BlockMspDeInit+0xa6>
      BSP_AUDIO_IN_Error_CallBack(0);
 8001d48:	2000      	movs	r0, #0
 8001d4a:	f017 fa31 	bl	80191b0 <BSP_AUDIO_IN_Error_CallBack>
    if (HAL_DMAEx_List_ResetQ(&MdfQueue2) != HAL_OK)
 8001d4e:	480f      	ldr	r0, [pc, #60]	; (8001d8c <MDF_BlockMspDeInit+0xe4>)
 8001d50:	f011 f8bb 	bl	8012eca <HAL_DMAEx_List_ResetQ>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d002      	beq.n	8001d60 <MDF_BlockMspDeInit+0xb8>
      BSP_AUDIO_IN_Error_CallBack(0);
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	f017 fa28 	bl	80191b0 <BSP_AUDIO_IN_Error_CallBack>
}
 8001d60:	bf00      	nop
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	46024080 	.word	0x46024080
 8001d6c:	42021000 	.word	0x42021000
 8001d70:	46020c00 	.word	0x46020c00
 8001d74:	20000880 	.word	0x20000880
 8001d78:	200009f8 	.word	0x200009f8
 8001d7c:	40025080 	.word	0x40025080
 8001d80:	42021400 	.word	0x42021400
 8001d84:	42020400 	.word	0x42020400
 8001d88:	200008f8 	.word	0x200008f8
 8001d8c:	20000a10 	.word	0x20000a10

08001d90 <HAL_MDF_AcqCpltCallback>:
  * @brief  MDF filter regular conversion complete callback.
  * @param  hmdf MDF filter handle.
  * @retval None.
  */
void HAL_MDF_AcqCpltCallback(MDF_HandleTypeDef *hmdf)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Invoke 'TransferCompete' callback function */
  if (hmdf == &haudio_in_mdf_filter[0])
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4a07      	ldr	r2, [pc, #28]	; (8001db8 <HAL_MDF_AcqCpltCallback+0x28>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d103      	bne.n	8001da8 <HAL_MDF_AcqCpltCallback+0x18>
  {
    BSP_AUDIO_IN_TransferComplete_CallBack(0);
 8001da0:	2000      	movs	r0, #0
 8001da2:	f017 f9f3 	bl	801918c <BSP_AUDIO_IN_TransferComplete_CallBack>
  }
  else
  {
    BSP_AUDIO_IN_TransferComplete_CallBack(1);
  }
}
 8001da6:	e002      	b.n	8001dae <HAL_MDF_AcqCpltCallback+0x1e>
    BSP_AUDIO_IN_TransferComplete_CallBack(1);
 8001da8:	2001      	movs	r0, #1
 8001daa:	f017 f9ef 	bl	801918c <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	200007f8 	.word	0x200007f8

08001dbc <HAL_MDF_AcqHalfCpltCallback>:
  * @brief  MDF filter regular conversion half complete callback.
  * @param  hmdf MDF filter handle.
  * @retval None.
  */
void HAL_MDF_AcqHalfCpltCallback(MDF_HandleTypeDef *hmdf)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Invoke 'TransferCompete' callback function */
  if (hmdf == &haudio_in_mdf_filter[0])
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a07      	ldr	r2, [pc, #28]	; (8001de4 <HAL_MDF_AcqHalfCpltCallback+0x28>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d103      	bne.n	8001dd4 <HAL_MDF_AcqHalfCpltCallback+0x18>
  {
    BSP_AUDIO_IN_HalfTransfer_CallBack(0);
 8001dcc:	2000      	movs	r0, #0
 8001dce:	f017 f9cb 	bl	8019168 <BSP_AUDIO_IN_HalfTransfer_CallBack>
  }
  else
  {
    BSP_AUDIO_IN_HalfTransfer_CallBack(1);
  }
}
 8001dd2:	e002      	b.n	8001dda <HAL_MDF_AcqHalfCpltCallback+0x1e>
    BSP_AUDIO_IN_HalfTransfer_CallBack(1);
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	f017 f9c7 	bl	8019168 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8001dda:	bf00      	nop
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	200007f8 	.word	0x200007f8

08001de8 <HAL_MDF_ErrorCallback>:
  * @brief  MDF filter error callback.
  * @param  hmdf MDF filter handle.
  * @retval None.
  */
void HAL_MDF_ErrorCallback(MDF_HandleTypeDef *hmdf)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  UNUSED(hmdf);

  BSP_AUDIO_IN_Error_CallBack(0);
 8001df0:	2000      	movs	r0, #0
 8001df2:	f017 f9dd 	bl	80191b0 <BSP_AUDIO_IN_Error_CallBack>
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
	...

08001e00 <MX_MDF1_ClockConfig>:
  * @param  hMdfBlock MDF block handle.
  * @param  SampleRate Audio sample rate used to record the audio stream.
  * @retval HAL status.
  */
__weak HAL_StatusTypeDef MX_MDF1_ClockConfig(const MDF_HandleTypeDef *hMdfBlock, uint32_t SampleRate)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b0b6      	sub	sp, #216	; 0xd8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  RCC_PeriphCLKInitTypeDef RCC_ExCLKInitStruct;

  /* Prevent unused argument compilation warning */
  UNUSED(SampleRate);

  if (hMdfBlock->Instance != NULL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d036      	beq.n	8001e86 <MX_MDF1_ClockConfig+0x86>
  {
    /* MDF Clock configuration:
    PLL3_VCO Input = MSI_4Mhz/PLL3M = 4 Mhz
    PLL3_VCO Output = PLL3_VCO Input * PLL3N = 320 Mhz
    MDF_CLK_x = PLL3_VCO Output/PLL3Q = 320/28 = 11,428 Mhz */
    RCC_ExCLKInitStruct.PLL3.PLL3Source = RCC_PLLSOURCE_MSI;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_ExCLKInitStruct.PLL3.PLL3M = 1;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_ExCLKInitStruct.PLL3.PLL3N = 80;
 8001e20:	2350      	movs	r3, #80	; 0x50
 8001e22:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_ExCLKInitStruct.PLL3.PLL3P = 28;
 8001e24:	231c      	movs	r3, #28
 8001e26:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_ExCLKInitStruct.PLL3.PLL3Q = 28;
 8001e28:	231c      	movs	r3, #28
 8001e2a:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_ExCLKInitStruct.PLL3.PLL3R = 2;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ExCLKInitStruct.PLL3.PLL3RGE = 0;
 8001e30:	2300      	movs	r3, #0
 8001e32:	64fb      	str	r3, [r7, #76]	; 0x4c
    RCC_ExCLKInitStruct.PLL3.PLL3FRACN = 0;
 8001e34:	2300      	movs	r3, #0
 8001e36:	653b      	str	r3, [r7, #80]	; 0x50
    RCC_ExCLKInitStruct.PLL3.PLL3ClockOut = RCC_PLL3_DIVQ;
 8001e38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e3c:	657b      	str	r3, [r7, #84]	; 0x54
    if (hMdfBlock->Instance == ADF1_Filter0)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a14      	ldr	r2, [pc, #80]	; (8001e94 <MX_MDF1_ClockConfig+0x94>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d10a      	bne.n	8001e5e <MX_MDF1_ClockConfig+0x5e>
    {
      RCC_ExCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADF1;
 8001e48:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e4c:	f04f 0300 	mov.w	r3, #0
 8001e50:	e9c7 2302 	strd	r2, r3, [r7, #8]
      RCC_ExCLKInitStruct.Adf1ClockSelection   = RCC_ADF1CLKSOURCE_PLL3;
 8001e54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001e5c:	e008      	b.n	8001e70 <MX_MDF1_ClockConfig+0x70>
    }
    else
    {
      RCC_ExCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_MDF1;
 8001e5e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e62:	f04f 0300 	mov.w	r3, #0
 8001e66:	e9c7 2302 	strd	r2, r3, [r7, #8]
      RCC_ExCLKInitStruct.Mdf1ClockSelection   = RCC_MDF1CLKSOURCE_PLL3;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    }

    if (HAL_RCCEx_PeriphCLKConfig(&RCC_ExCLKInitStruct) != HAL_OK)
 8001e70:	f107 0308 	add.w	r3, r7, #8
 8001e74:	4618      	mov	r0, r3
 8001e76:	f016 f93b 	bl	80180f0 <HAL_RCCEx_PeriphCLKConfig>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d002      	beq.n	8001e86 <MX_MDF1_ClockConfig+0x86>
    {
      status = HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    }
  }

  return status;
 8001e86:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	37d8      	adds	r7, #216	; 0xd8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	46024080 	.word	0x46024080

08001e98 <MX_MDF1_Init>:
  * @param  hMdfBlock MDF channel handle.
  * @param  MXInit MDF configuration structure.
  * @retval HAL_status.
  */
__weak HAL_StatusTypeDef MX_MDF1_Init(MDF_HandleTypeDef *hMdfBlock, MX_MDF_InitTypeDef *MXInit)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	73fb      	strb	r3, [r7, #15]

  UNUSED(MXInit);

  /* Fill the different hMdfBlock parameters */
  hMdfBlock->Init.CommonParam.InterleavedFilters             = 0U;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	605a      	str	r2, [r3, #4]
  hMdfBlock->Init.CommonParam.ProcClockDivider               = 1U;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	609a      	str	r2, [r3, #8]
  hMdfBlock->Init.CommonParam.OutputClock.Activation         = ENABLE;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	731a      	strb	r2, [r3, #12]
  hMdfBlock->Init.CommonParam.OutputClock.Pins               = (hMdfBlock->Instance == ADF1_Filter0)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
                                                               ? MDF_OUTPUT_CLOCK_0
                                                               : MDF_OUTPUT_CLOCK_1;
 8001ebc:	4a1f      	ldr	r2, [pc, #124]	; (8001f3c <MX_MDF1_Init+0xa4>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d101      	bne.n	8001ec6 <MX_MDF1_Init+0x2e>
 8001ec2:	2220      	movs	r2, #32
 8001ec4:	e000      	b.n	8001ec8 <MX_MDF1_Init+0x30>
 8001ec6:	2240      	movs	r2, #64	; 0x40
  hMdfBlock->Init.CommonParam.OutputClock.Pins               = (hMdfBlock->Instance == ADF1_Filter0)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	611a      	str	r2, [r3, #16]
  hMdfBlock->Init.CommonParam.OutputClock.Divider            = 4U; /* MDF_CCK = 11.428MHz / 4 = 2,857 MHz */
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2204      	movs	r2, #4
 8001ed0:	615a      	str	r2, [r3, #20]
  hMdfBlock->Init.CommonParam.OutputClock.Trigger.Activation = DISABLE;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	761a      	strb	r2, [r3, #24]
  hMdfBlock->Init.CommonParam.OutputClock.Trigger.Source     = MDF_CLOCK_TRIG_TRGO;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	61da      	str	r2, [r3, #28]
  hMdfBlock->Init.CommonParam.OutputClock.Trigger.Edge       = MDF_CLOCK_TRIG_RISING_EDGE;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	621a      	str	r2, [r3, #32]

  hMdfBlock->Init.SerialInterface.Activation         = ENABLE;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hMdfBlock->Init.SerialInterface.Mode               = MDF_SITF_NORMAL_SPI_MODE;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2210      	movs	r2, #16
 8001ef0:	629a      	str	r2, [r3, #40]	; 0x28
  hMdfBlock->Init.SerialInterface.ClockSource        = (hMdfBlock->Instance == ADF1_Filter0) ? MDF_SITF_CCK0_SOURCE
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
                                                       : MDF_SITF_CCK1_SOURCE;
 8001ef6:	4a11      	ldr	r2, [pc, #68]	; (8001f3c <MX_MDF1_Init+0xa4>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d101      	bne.n	8001f00 <MX_MDF1_Init+0x68>
 8001efc:	2200      	movs	r2, #0
 8001efe:	e000      	b.n	8001f02 <MX_MDF1_Init+0x6a>
 8001f00:	2202      	movs	r2, #2
  hMdfBlock->Init.SerialInterface.ClockSource        = (hMdfBlock->Instance == ADF1_Filter0) ? MDF_SITF_CCK0_SOURCE
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	62da      	str	r2, [r3, #44]	; 0x2c
  hMdfBlock->Init.SerialInterface.Threshold          = 31U;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	221f      	movs	r2, #31
 8001f0a:	631a      	str	r2, [r3, #48]	; 0x30

  hMdfBlock->Init.FilterBistream                     = (hMdfBlock->Instance == ADF1_Filter0) ? MDF_BITSTREAM5_RISING
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
                                                       : MDF_BITSTREAM0_RISING;
 8001f10:	4a0a      	ldr	r2, [pc, #40]	; (8001f3c <MX_MDF1_Init+0xa4>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d101      	bne.n	8001f1a <MX_MDF1_Init+0x82>
 8001f16:	220a      	movs	r2, #10
 8001f18:	e000      	b.n	8001f1c <MX_MDF1_Init+0x84>
 8001f1a:	2200      	movs	r2, #0
  hMdfBlock->Init.FilterBistream                     = (hMdfBlock->Instance == ADF1_Filter0) ? MDF_BITSTREAM5_RISING
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize  MDF */
  if (HAL_MDF_Init(hMdfBlock) != HAL_OK)
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f013 f87b 	bl	801501c <HAL_MDF_Init>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_MDF1_Init+0x98>
  {
    status = HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8001f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	46024080 	.word	0x46024080

08001f40 <BSP_I2C1_Init>:
/**
  * @brief  Initializes I2C1 HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001f46:	2300      	movs	r3, #0
 8001f48:	607b      	str	r3, [r7, #4]

  hbus_i2c1.Instance = BUS_I2C1;
 8001f4a:	4b16      	ldr	r3, [pc, #88]	; (8001fa4 <BSP_I2C1_Init+0x64>)
 8001f4c:	4a16      	ldr	r2, [pc, #88]	; (8001fa8 <BSP_I2C1_Init+0x68>)
 8001f4e:	601a      	str	r2, [r3, #0]

  if (I2c1InitCounter == 0U)
 8001f50:	4b16      	ldr	r3, [pc, #88]	; (8001fac <BSP_I2C1_Init+0x6c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d11f      	bne.n	8001f98 <BSP_I2C1_Init+0x58>
  {
    I2c1InitCounter++;
 8001f58:	4b14      	ldr	r3, [pc, #80]	; (8001fac <BSP_I2C1_Init+0x6c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	4a13      	ldr	r2, [pc, #76]	; (8001fac <BSP_I2C1_Init+0x6c>)
 8001f60:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c1) == HAL_I2C_STATE_RESET)
 8001f62:	4810      	ldr	r0, [pc, #64]	; (8001fa4 <BSP_I2C1_Init+0x64>)
 8001f64:	f012 fcbf 	bl	80148e6 <HAL_I2C_GetState>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d114      	bne.n	8001f98 <BSP_I2C1_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif /* BSP_USE_CMSIS_OS */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C1 Msp */
      I2C1_MspInit(&hbus_i2c1);
 8001f6e:	480d      	ldr	r0, [pc, #52]	; (8001fa4 <BSP_I2C1_Init+0x64>)
 8001f70:	f000 fcd4 	bl	800291c <I2C1_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      if (MX_I2C1_Init(&hbus_i2c1, I2C_GetTiming(HAL_RCC_GetPCLK1Freq(), BUS_I2C1_FREQUENCY)) != HAL_OK)
 8001f74:	f016 f822 	bl	8017fbc <HAL_RCC_GetPCLK1Freq>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	490d      	ldr	r1, [pc, #52]	; (8001fb0 <BSP_I2C1_Init+0x70>)
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f000 fa57 	bl	8002430 <I2C_GetTiming>
 8001f82:	4603      	mov	r3, r0
 8001f84:	4619      	mov	r1, r3
 8001f86:	4807      	ldr	r0, [pc, #28]	; (8001fa4 <BSP_I2C1_Init+0x64>)
 8001f88:	f000 f838 	bl	8001ffc <MX_I2C1_Init>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d002      	beq.n	8001f98 <BSP_I2C1_Init+0x58>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8001f92:	f06f 0307 	mvn.w	r3, #7
 8001f96:	607b      	str	r3, [r7, #4]
#if (USE_HAL_I2C_REGISTER_CALLBACKS > 0)
    }
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
return ret;
 8001f98:	687b      	ldr	r3, [r7, #4]
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	2000147c 	.word	0x2000147c
 8001fa8:	40005400 	.word	0x40005400
 8001fac:	20000a70 	.word	0x20000a70
 8001fb0:	000186a0 	.word	0x000186a0

08001fb4 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	607b      	str	r3, [r7, #4]

  I2c1InitCounter--;
 8001fbe:	4b0d      	ldr	r3, [pc, #52]	; (8001ff4 <BSP_I2C1_DeInit+0x40>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	4a0b      	ldr	r2, [pc, #44]	; (8001ff4 <BSP_I2C1_DeInit+0x40>)
 8001fc6:	6013      	str	r3, [r2, #0]

  if (I2c1InitCounter == 0U)
 8001fc8:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <BSP_I2C1_DeInit+0x40>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d10b      	bne.n	8001fe8 <BSP_I2C1_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C1_MspDeInit(&hbus_i2c1);
 8001fd0:	4809      	ldr	r0, [pc, #36]	; (8001ff8 <BSP_I2C1_DeInit+0x44>)
 8001fd2:	f000 fd0b 	bl	80029ec <I2C1_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c1) != HAL_OK)
 8001fd6:	4808      	ldr	r0, [pc, #32]	; (8001ff8 <BSP_I2C1_DeInit+0x44>)
 8001fd8:	f012 f90b 	bl	80141f2 <HAL_I2C_DeInit>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d002      	beq.n	8001fe8 <BSP_I2C1_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8001fe2:	f06f 0307 	mvn.w	r3, #7
 8001fe6:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 8001fe8:	687b      	ldr	r3, [r7, #4]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20000a70 	.word	0x20000a70
 8001ff8:	2000147c 	.word	0x2000147c

08001ffc <MX_I2C1_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002006:	2300      	movs	r3, #0
 8002008:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f012 f83e 	bl	80140bc <HAL_I2C_Init>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d002      	beq.n	800204c <MX_I2C1_Init+0x50>
  {
    status = HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	73fb      	strb	r3, [r7, #15]
 800204a:	e014      	b.n	8002076 <MX_I2C1_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 800204c:	2300      	movs	r3, #0
 800204e:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8002050:	68b9      	ldr	r1, [r7, #8]
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f012 ff1a 	bl	8014e8c <HAL_I2CEx_ConfigAnalogFilter>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d002      	beq.n	8002064 <MX_I2C1_Init+0x68>
    {
      status = HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	73fb      	strb	r3, [r7, #15]
 8002062:	e008      	b.n	8002076 <MX_I2C1_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8002064:	2100      	movs	r1, #0
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f012 ff5b 	bl	8014f22 <HAL_I2CEx_ConfigDigitalFilter>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <MX_I2C1_Init+0x7a>
      {
        status = HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 8002076:	7bfb      	ldrb	r3, [r7, #15]
}
 8002078:	4618      	mov	r0, r3
 800207a:	3710      	adds	r7, #16
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <BSP_I2C1_WriteReg16>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C1_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b088      	sub	sp, #32
 8002084:	af02      	add	r7, sp, #8
 8002086:	60ba      	str	r2, [r7, #8]
 8002088:	461a      	mov	r2, r3
 800208a:	4603      	mov	r3, r0
 800208c:	81fb      	strh	r3, [r7, #14]
 800208e:	460b      	mov	r3, r1
 8002090:	81bb      	strh	r3, [r7, #12]
 8002092:	4613      	mov	r3, r2
 8002094:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C1_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 8002096:	89b9      	ldrh	r1, [r7, #12]
 8002098:	89f8      	ldrh	r0, [r7, #14]
 800209a:	88fb      	ldrh	r3, [r7, #6]
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	2202      	movs	r2, #2
 80020a2:	f000 fcc7 	bl	8002a34 <I2C1_WriteReg>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d102      	bne.n	80020b2 <BSP_I2C1_WriteReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]
 80020b0:	e00c      	b.n	80020cc <BSP_I2C1_WriteReg16+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c1) == HAL_I2C_ERROR_AF)
 80020b2:	4809      	ldr	r0, [pc, #36]	; (80020d8 <BSP_I2C1_WriteReg16+0x58>)
 80020b4:	f012 fc25 	bl	8014902 <HAL_I2C_GetError>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b04      	cmp	r3, #4
 80020bc:	d103      	bne.n	80020c6 <BSP_I2C1_WriteReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80020be:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80020c2:	617b      	str	r3, [r7, #20]
 80020c4:	e002      	b.n	80020cc <BSP_I2C1_WriteReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80020c6:	f06f 0303 	mvn.w	r3, #3
 80020ca:	617b      	str	r3, [r7, #20]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 80020cc:	697b      	ldr	r3, [r7, #20]
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3718      	adds	r7, #24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	2000147c 	.word	0x2000147c

080020dc <BSP_I2C1_ReadReg16>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C1_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b088      	sub	sp, #32
 80020e0:	af02      	add	r7, sp, #8
 80020e2:	60ba      	str	r2, [r7, #8]
 80020e4:	461a      	mov	r2, r3
 80020e6:	4603      	mov	r3, r0
 80020e8:	81fb      	strh	r3, [r7, #14]
 80020ea:	460b      	mov	r3, r1
 80020ec:	81bb      	strh	r3, [r7, #12]
 80020ee:	4613      	mov	r3, r2
 80020f0:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C1_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 80020f2:	89b9      	ldrh	r1, [r7, #12]
 80020f4:	89f8      	ldrh	r0, [r7, #14]
 80020f6:	88fb      	ldrh	r3, [r7, #6]
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	2202      	movs	r2, #2
 80020fe:	f000 fcbf 	bl	8002a80 <I2C1_ReadReg>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d102      	bne.n	800210e <BSP_I2C1_ReadReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]
 800210c:	e00c      	b.n	8002128 <BSP_I2C1_ReadReg16+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c1) == HAL_I2C_ERROR_AF)
 800210e:	4809      	ldr	r0, [pc, #36]	; (8002134 <BSP_I2C1_ReadReg16+0x58>)
 8002110:	f012 fbf7 	bl	8014902 <HAL_I2C_GetError>
 8002114:	4603      	mov	r3, r0
 8002116:	2b04      	cmp	r3, #4
 8002118:	d103      	bne.n	8002122 <BSP_I2C1_ReadReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800211a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	e002      	b.n	8002128 <BSP_I2C1_ReadReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002122:	f06f 0303 	mvn.w	r3, #3
 8002126:	617b      	str	r3, [r7, #20]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 8002128:	697b      	ldr	r3, [r7, #20]
}
 800212a:	4618      	mov	r0, r3
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	2000147c 	.word	0x2000147c

08002138 <BSP_I2C2_Init>:
/**
  * @brief  Initializes I2C2 HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800213e:	2300      	movs	r3, #0
 8002140:	607b      	str	r3, [r7, #4]

  hbus_i2c2.Instance = BUS_I2C2;
 8002142:	4b16      	ldr	r3, [pc, #88]	; (800219c <BSP_I2C2_Init+0x64>)
 8002144:	4a16      	ldr	r2, [pc, #88]	; (80021a0 <BSP_I2C2_Init+0x68>)
 8002146:	601a      	str	r2, [r3, #0]

  if (I2c2InitCounter == 0U)
 8002148:	4b16      	ldr	r3, [pc, #88]	; (80021a4 <BSP_I2C2_Init+0x6c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d11f      	bne.n	8002190 <BSP_I2C2_Init+0x58>
  {
    I2c2InitCounter++;
 8002150:	4b14      	ldr	r3, [pc, #80]	; (80021a4 <BSP_I2C2_Init+0x6c>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	3301      	adds	r3, #1
 8002156:	4a13      	ldr	r2, [pc, #76]	; (80021a4 <BSP_I2C2_Init+0x6c>)
 8002158:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c2) == HAL_I2C_STATE_RESET)
 800215a:	4810      	ldr	r0, [pc, #64]	; (800219c <BSP_I2C2_Init+0x64>)
 800215c:	f012 fbc3 	bl	80148e6 <HAL_I2C_GetState>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d114      	bne.n	8002190 <BSP_I2C2_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif /* BSP_USE_CMSIS_OS */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C2 Msp */
      I2C2_MspInit(&hbus_i2c2);
 8002166:	480d      	ldr	r0, [pc, #52]	; (800219c <BSP_I2C2_Init+0x64>)
 8002168:	f000 fcb0 	bl	8002acc <I2C2_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      if (MX_I2C2_Init(&hbus_i2c2, I2C_GetTiming(HAL_RCC_GetPCLK1Freq(), BUS_I2C2_FREQUENCY)) != HAL_OK)
 800216c:	f015 ff26 	bl	8017fbc <HAL_RCC_GetPCLK1Freq>
 8002170:	4603      	mov	r3, r0
 8002172:	490d      	ldr	r1, [pc, #52]	; (80021a8 <BSP_I2C2_Init+0x70>)
 8002174:	4618      	mov	r0, r3
 8002176:	f000 f95b 	bl	8002430 <I2C_GetTiming>
 800217a:	4603      	mov	r3, r0
 800217c:	4619      	mov	r1, r3
 800217e:	4807      	ldr	r0, [pc, #28]	; (800219c <BSP_I2C2_Init+0x64>)
 8002180:	f000 f838 	bl	80021f4 <MX_I2C2_Init>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d002      	beq.n	8002190 <BSP_I2C2_Init+0x58>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800218a:	f06f 0307 	mvn.w	r3, #7
 800218e:	607b      	str	r3, [r7, #4]
#if (USE_HAL_I2C_REGISTER_CALLBACKS > 0)
    }
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
return ret;
 8002190:	687b      	ldr	r3, [r7, #4]
}
 8002192:	4618      	mov	r0, r3
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	200014d0 	.word	0x200014d0
 80021a0:	40005800 	.word	0x40005800
 80021a4:	20000a74 	.word	0x20000a74
 80021a8:	000186a0 	.word	0x000186a0

080021ac <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 80021b2:	2300      	movs	r3, #0
 80021b4:	607b      	str	r3, [r7, #4]

  I2c2InitCounter--;
 80021b6:	4b0d      	ldr	r3, [pc, #52]	; (80021ec <BSP_I2C2_DeInit+0x40>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	3b01      	subs	r3, #1
 80021bc:	4a0b      	ldr	r2, [pc, #44]	; (80021ec <BSP_I2C2_DeInit+0x40>)
 80021be:	6013      	str	r3, [r2, #0]

  if (I2c2InitCounter == 0U)
 80021c0:	4b0a      	ldr	r3, [pc, #40]	; (80021ec <BSP_I2C2_DeInit+0x40>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d10b      	bne.n	80021e0 <BSP_I2C2_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C2_MspDeInit(&hbus_i2c2);
 80021c8:	4809      	ldr	r0, [pc, #36]	; (80021f0 <BSP_I2C2_DeInit+0x44>)
 80021ca:	f000 fce5 	bl	8002b98 <I2C2_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c2) != HAL_OK)
 80021ce:	4808      	ldr	r0, [pc, #32]	; (80021f0 <BSP_I2C2_DeInit+0x44>)
 80021d0:	f012 f80f 	bl	80141f2 <HAL_I2C_DeInit>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d002      	beq.n	80021e0 <BSP_I2C2_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 80021da:	f06f 0307 	mvn.w	r3, #7
 80021de:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 80021e0:	687b      	ldr	r3, [r7, #4]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	20000a74 	.word	0x20000a74
 80021f0:	200014d0 	.word	0x200014d0

080021f4 <MX_I2C2_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021fe:	2300      	movs	r3, #0
 8002200:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f011 ff42 	bl	80140bc <HAL_I2C_Init>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d002      	beq.n	8002244 <MX_I2C2_Init+0x50>
  {
    status = HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	73fb      	strb	r3, [r7, #15]
 8002242:	e014      	b.n	800226e <MX_I2C2_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 8002244:	2300      	movs	r3, #0
 8002246:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8002248:	68b9      	ldr	r1, [r7, #8]
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f012 fe1e 	bl	8014e8c <HAL_I2CEx_ConfigAnalogFilter>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d002      	beq.n	800225c <MX_I2C2_Init+0x68>
    {
      status = HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	73fb      	strb	r3, [r7, #15]
 800225a:	e008      	b.n	800226e <MX_I2C2_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 800225c:	2100      	movs	r1, #0
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f012 fe5f 	bl	8014f22 <HAL_I2CEx_ConfigDigitalFilter>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <MX_I2C2_Init+0x7a>
      {
        status = HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 800226e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <BSP_I2C2_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b088      	sub	sp, #32
 800227c:	af02      	add	r7, sp, #8
 800227e:	60ba      	str	r2, [r7, #8]
 8002280:	461a      	mov	r2, r3
 8002282:	4603      	mov	r3, r0
 8002284:	81fb      	strh	r3, [r7, #14]
 8002286:	460b      	mov	r3, r1
 8002288:	81bb      	strh	r3, [r7, #12]
 800228a:	4613      	mov	r3, r2
 800228c:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C2_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800228e:	89b9      	ldrh	r1, [r7, #12]
 8002290:	89f8      	ldrh	r0, [r7, #14]
 8002292:	88fb      	ldrh	r3, [r7, #6]
 8002294:	9300      	str	r3, [sp, #0]
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	2201      	movs	r2, #1
 800229a:	f000 fc9f 	bl	8002bdc <I2C2_WriteReg>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d102      	bne.n	80022aa <BSP_I2C2_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 80022a4:	2300      	movs	r3, #0
 80022a6:	617b      	str	r3, [r7, #20]
 80022a8:	e00c      	b.n	80022c4 <BSP_I2C2_WriteReg+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c2) == HAL_I2C_ERROR_AF)
 80022aa:	4809      	ldr	r0, [pc, #36]	; (80022d0 <BSP_I2C2_WriteReg+0x58>)
 80022ac:	f012 fb29 	bl	8014902 <HAL_I2C_GetError>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	d103      	bne.n	80022be <BSP_I2C2_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80022b6:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80022ba:	617b      	str	r3, [r7, #20]
 80022bc:	e002      	b.n	80022c4 <BSP_I2C2_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80022be:	f06f 0303 	mvn.w	r3, #3
 80022c2:	617b      	str	r3, [r7, #20]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 80022c4:	697b      	ldr	r3, [r7, #20]
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3718      	adds	r7, #24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	200014d0 	.word	0x200014d0

080022d4 <BSP_I2C2_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b088      	sub	sp, #32
 80022d8:	af02      	add	r7, sp, #8
 80022da:	60ba      	str	r2, [r7, #8]
 80022dc:	461a      	mov	r2, r3
 80022de:	4603      	mov	r3, r0
 80022e0:	81fb      	strh	r3, [r7, #14]
 80022e2:	460b      	mov	r3, r1
 80022e4:	81bb      	strh	r3, [r7, #12]
 80022e6:	4613      	mov	r3, r2
 80022e8:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C2_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 80022ea:	89b9      	ldrh	r1, [r7, #12]
 80022ec:	89f8      	ldrh	r0, [r7, #14]
 80022ee:	88fb      	ldrh	r3, [r7, #6]
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f000 fc97 	bl	8002c28 <I2C2_ReadReg>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d102      	bne.n	8002306 <BSP_I2C2_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8002300:	2300      	movs	r3, #0
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	e00c      	b.n	8002320 <BSP_I2C2_ReadReg+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c2) == HAL_I2C_ERROR_AF)
 8002306:	4809      	ldr	r0, [pc, #36]	; (800232c <BSP_I2C2_ReadReg+0x58>)
 8002308:	f012 fafb 	bl	8014902 <HAL_I2C_GetError>
 800230c:	4603      	mov	r3, r0
 800230e:	2b04      	cmp	r3, #4
 8002310:	d103      	bne.n	800231a <BSP_I2C2_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002312:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002316:	617b      	str	r3, [r7, #20]
 8002318:	e002      	b.n	8002320 <BSP_I2C2_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800231a:	f06f 0303 	mvn.w	r3, #3
 800231e:	617b      	str	r3, [r7, #20]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 8002320:	697b      	ldr	r3, [r7, #20]
}
 8002322:	4618      	mov	r0, r3
 8002324:	3718      	adds	r7, #24
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	200014d0 	.word	0x200014d0

08002330 <BSP_I2C2_WriteReg16>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C2_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b088      	sub	sp, #32
 8002334:	af02      	add	r7, sp, #8
 8002336:	60ba      	str	r2, [r7, #8]
 8002338:	461a      	mov	r2, r3
 800233a:	4603      	mov	r3, r0
 800233c:	81fb      	strh	r3, [r7, #14]
 800233e:	460b      	mov	r3, r1
 8002340:	81bb      	strh	r3, [r7, #12]
 8002342:	4613      	mov	r3, r2
 8002344:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C2_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 8002346:	89b9      	ldrh	r1, [r7, #12]
 8002348:	89f8      	ldrh	r0, [r7, #14]
 800234a:	88fb      	ldrh	r3, [r7, #6]
 800234c:	9300      	str	r3, [sp, #0]
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	2202      	movs	r2, #2
 8002352:	f000 fc43 	bl	8002bdc <I2C2_WriteReg>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d102      	bne.n	8002362 <BSP_I2C2_WriteReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 800235c:	2300      	movs	r3, #0
 800235e:	617b      	str	r3, [r7, #20]
 8002360:	e00c      	b.n	800237c <BSP_I2C2_WriteReg16+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c2) == HAL_I2C_ERROR_AF)
 8002362:	4809      	ldr	r0, [pc, #36]	; (8002388 <BSP_I2C2_WriteReg16+0x58>)
 8002364:	f012 facd 	bl	8014902 <HAL_I2C_GetError>
 8002368:	4603      	mov	r3, r0
 800236a:	2b04      	cmp	r3, #4
 800236c:	d103      	bne.n	8002376 <BSP_I2C2_WriteReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800236e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002372:	617b      	str	r3, [r7, #20]
 8002374:	e002      	b.n	800237c <BSP_I2C2_WriteReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002376:	f06f 0303 	mvn.w	r3, #3
 800237a:	617b      	str	r3, [r7, #20]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 800237c:	697b      	ldr	r3, [r7, #20]
}
 800237e:	4618      	mov	r0, r3
 8002380:	3718      	adds	r7, #24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	200014d0 	.word	0x200014d0

0800238c <BSP_I2C2_ReadReg16>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C2_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b088      	sub	sp, #32
 8002390:	af02      	add	r7, sp, #8
 8002392:	60ba      	str	r2, [r7, #8]
 8002394:	461a      	mov	r2, r3
 8002396:	4603      	mov	r3, r0
 8002398:	81fb      	strh	r3, [r7, #14]
 800239a:	460b      	mov	r3, r1
 800239c:	81bb      	strh	r3, [r7, #12]
 800239e:	4613      	mov	r3, r2
 80023a0:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C2_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 80023a2:	89b9      	ldrh	r1, [r7, #12]
 80023a4:	89f8      	ldrh	r0, [r7, #14]
 80023a6:	88fb      	ldrh	r3, [r7, #6]
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	2202      	movs	r2, #2
 80023ae:	f000 fc3b 	bl	8002c28 <I2C2_ReadReg>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d102      	bne.n	80023be <BSP_I2C2_ReadReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]
 80023bc:	e00c      	b.n	80023d8 <BSP_I2C2_ReadReg16+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c2) == HAL_I2C_ERROR_AF)
 80023be:	4809      	ldr	r0, [pc, #36]	; (80023e4 <BSP_I2C2_ReadReg16+0x58>)
 80023c0:	f012 fa9f 	bl	8014902 <HAL_I2C_GetError>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	d103      	bne.n	80023d2 <BSP_I2C2_ReadReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80023ca:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80023ce:	617b      	str	r3, [r7, #20]
 80023d0:	e002      	b.n	80023d8 <BSP_I2C2_ReadReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80023d2:	f06f 0303 	mvn.w	r3, #3
 80023d6:	617b      	str	r3, [r7, #20]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 80023d8:	697b      	ldr	r3, [r7, #20]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3718      	adds	r7, #24
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	200014d0 	.word	0x200014d0

080023e8 <BSP_I2C2_IsReady>:
  * @param  DevAddr  Target device address
  * @param  Trials      Number of trials
  * @retval BSP status
  */
int32_t BSP_I2C2_IsReady(uint16_t DevAddr, uint32_t Trials)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	6039      	str	r1, [r7, #0]
 80023f2:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80023f4:	2300      	movs	r3, #0
 80023f6:	60fb      	str	r3, [r7, #12]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (HAL_I2C_IsDeviceReady(&hbus_i2c2, DevAddr, Trials, 1000) != HAL_OK)
 80023f8:	88f9      	ldrh	r1, [r7, #6]
 80023fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	4806      	ldr	r0, [pc, #24]	; (800241c <BSP_I2C2_IsReady+0x34>)
 8002402:	f012 f967 	bl	80146d4 <HAL_I2C_IsDeviceReady>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d002      	beq.n	8002412 <BSP_I2C2_IsReady+0x2a>
  {
    ret = BSP_ERROR_BUSY;
 800240c:	f06f 0302 	mvn.w	r3, #2
 8002410:	60fb      	str	r3, [r7, #12]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 8002412:	68fb      	ldr	r3, [r7, #12]
}
 8002414:	4618      	mov	r0, r3
 8002416:	3710      	adds	r7, #16
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	200014d0 	.word	0x200014d0

08002420 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8002424:	f00f f95e 	bl	80116e4 <HAL_GetTick>
 8002428:	4603      	mov	r3, r0
}
 800242a:	4618      	mov	r0, r3
 800242c:	bd80      	pop	{r7, pc}
	...

08002430 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 800243a:	2300      	movs	r3, #0
 800243c:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if ((clock_src_freq != 0U) && (i2c_freq != 0U))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d06b      	beq.n	800251c <I2C_GetTiming+0xec>
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d068      	beq.n	800251c <I2C_GetTiming+0xec>
  {
    for (speed = 0 ; speed <= (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800244a:	2300      	movs	r3, #0
 800244c:	613b      	str	r3, [r7, #16]
 800244e:	e060      	b.n	8002512 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8002450:	4a35      	ldr	r2, [pc, #212]	; (8002528 <I2C_GetTiming+0xf8>)
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	212c      	movs	r1, #44	; 0x2c
 8002456:	fb01 f303 	mul.w	r3, r1, r3
 800245a:	4413      	add	r3, r2
 800245c:	3304      	adds	r3, #4
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	429a      	cmp	r2, r3
 8002464:	d352      	bcc.n	800250c <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8002466:	4a30      	ldr	r2, [pc, #192]	; (8002528 <I2C_GetTiming+0xf8>)
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	212c      	movs	r1, #44	; 0x2c
 800246c:	fb01 f303 	mul.w	r3, r1, r3
 8002470:	4413      	add	r3, r2
 8002472:	3308      	adds	r3, #8
 8002474:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	429a      	cmp	r2, r3
 800247a:	d847      	bhi.n	800250c <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 800247c:	6939      	ldr	r1, [r7, #16]
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f856 	bl	8002530 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8002484:	6939      	ldr	r1, [r7, #16]
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f940 	bl	800270c <I2C_Compute_SCLL_SCLH>
 800248c:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2b7f      	cmp	r3, #127	; 0x7f
 8002492:	d842      	bhi.n	800251a <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 8002494:	4925      	ldr	r1, [pc, #148]	; (800252c <I2C_GetTiming+0xfc>)
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	4613      	mov	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4413      	add	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	440b      	add	r3, r1
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) | \
 80024a6:	4821      	ldr	r0, [pc, #132]	; (800252c <I2C_GetTiming+0xfc>)
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	4613      	mov	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4403      	add	r3, r0
 80024b4:	3304      	adds	r3, #4
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	051b      	lsls	r3, r3, #20
 80024ba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 80024be:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) | \
 80024c0:	481a      	ldr	r0, [pc, #104]	; (800252c <I2C_GetTiming+0xfc>)
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	4613      	mov	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	4413      	add	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4403      	add	r3, r0
 80024ce:	3308      	adds	r3, #8
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	041b      	lsls	r3, r3, #16
 80024d4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) | \
 80024d8:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) | \
 80024da:	4814      	ldr	r0, [pc, #80]	; (800252c <I2C_GetTiming+0xfc>)
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	4613      	mov	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	4403      	add	r3, r0
 80024e8:	330c      	adds	r3, #12
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	021b      	lsls	r3, r3, #8
 80024ee:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) | \
 80024f0:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 80024f2:	480e      	ldr	r0, [pc, #56]	; (800252c <I2C_GetTiming+0xfc>)
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	4613      	mov	r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	4413      	add	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4403      	add	r3, r0
 8002500:	3310      	adds	r3, #16
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 8002506:	430b      	orrs	r3, r1
 8002508:	617b      	str	r3, [r7, #20]
        }
        break;
 800250a:	e006      	b.n	800251a <I2C_GetTiming+0xea>
    for (speed = 0 ; speed <= (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	3301      	adds	r3, #1
 8002510:	613b      	str	r3, [r7, #16]
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	2b02      	cmp	r3, #2
 8002516:	d99b      	bls.n	8002450 <I2C_GetTiming+0x20>
 8002518:	e000      	b.n	800251c <I2C_GetTiming+0xec>
        break;
 800251a:	bf00      	nop
      }
    }
  }

  return ret;
 800251c:	697b      	ldr	r3, [r7, #20]
}
 800251e:	4618      	mov	r0, r3
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	080226f8 	.word	0x080226f8
 800252c:	20000a78 	.word	0x20000a78

08002530 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8002530:	b480      	push	{r7}
 8002532:	b08f      	sub	sp, #60	; 0x3c
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 800253a:	2310      	movs	r3, #16
 800253c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t scldel;
  uint32_t sdadel;
  uint32_t tafdel_min;
  uint32_t tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U)) / clock_src_freq;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	085a      	lsrs	r2, r3, #1
 8002542:	4b6e      	ldr	r3, [pc, #440]	; (80026fc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8002544:	4413      	add	r3, r2
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	fbb3 f3f2 	udiv	r3, r3, r2
 800254c:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800254e:	2332      	movs	r3, #50	; 0x32
 8002550:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 8002552:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002556:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / tPRESC
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / tPRESC */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8002558:	4a69      	ldr	r2, [pc, #420]	; (8002700 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	212c      	movs	r1, #44	; 0x2c
 800255e:	fb01 f303 	mul.w	r3, r1, r3
 8002562:	4413      	add	r3, r2
 8002564:	3324      	adds	r3, #36	; 0x24
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4618      	mov	r0, r3
 800256a:	4a65      	ldr	r2, [pc, #404]	; (8002700 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	212c      	movs	r1, #44	; 0x2c
 8002570:	fb01 f303 	mul.w	r3, r1, r3
 8002574:	4413      	add	r3, r2
 8002576:	330c      	adds	r3, #12
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	18c2      	adds	r2, r0, r3
                (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800257c:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800257e:	1ad2      	subs	r2, r2, r3
                (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8002580:	495f      	ldr	r1, [pc, #380]	; (8002700 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	202c      	movs	r0, #44	; 0x2c
 8002586:	fb00 f303 	mul.w	r3, r0, r3
 800258a:	440b      	add	r3, r1
 800258c:	3328      	adds	r3, #40	; 0x28
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	3303      	adds	r3, #3
 8002592:	69f9      	ldr	r1, [r7, #28]
 8002594:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800259c:	4a58      	ldr	r2, [pc, #352]	; (8002700 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	212c      	movs	r1, #44	; 0x2c
 80025a2:	fb01 f303 	mul.w	r3, r1, r3
 80025a6:	4413      	add	r3, r2
 80025a8:	3310      	adds	r3, #16
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	4a54      	ldr	r2, [pc, #336]	; (8002700 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	212c      	movs	r1, #44	; 0x2c
 80025b4:	fb01 f303 	mul.w	r3, r1, r3
 80025b8:	4413      	add	r3, r2
 80025ba:	3320      	adds	r3, #32
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	1ac2      	subs	r2, r0, r3
                (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80025c0:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80025c2:	1ad2      	subs	r2, r2, r3
                (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80025c4:	494e      	ldr	r1, [pc, #312]	; (8002700 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	202c      	movs	r0, #44	; 0x2c
 80025ca:	fb00 f303 	mul.w	r3, r0, r3
 80025ce:	440b      	add	r3, r1
 80025d0:	3328      	adds	r3, #40	; 0x28
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	3304      	adds	r3, #4
 80025d6:	69f9      	ldr	r1, [r7, #28]
 80025d8:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 80025e0:	4a47      	ldr	r2, [pc, #284]	; (8002700 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	212c      	movs	r1, #44	; 0x2c
 80025e6:	fb01 f303 	mul.w	r3, r1, r3
 80025ea:	4413      	add	r3, r2
 80025ec:	3320      	adds	r3, #32
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	4a43      	ldr	r2, [pc, #268]	; (8002700 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	212c      	movs	r1, #44	; 0x2c
 80025f8:	fb01 f303 	mul.w	r3, r1, r3
 80025fc:	4413      	add	r3, r2
 80025fe:	3314      	adds	r3, #20
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4403      	add	r3, r0
 8002604:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 8002606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002608:	2b00      	cmp	r3, #0
 800260a:	dc01      	bgt.n	8002610 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 800260c:	2300      	movs	r3, #0
 800260e:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 8002610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002612:	2b00      	cmp	r3, #0
 8002614:	dc01      	bgt.n	800261a <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 8002616:	2300      	movs	r3, #0
 8002618:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800261a:	2300      	movs	r3, #0
 800261c:	62bb      	str	r3, [r7, #40]	; 0x28
 800261e:	e062      	b.n	80026e6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8002620:	2300      	movs	r3, #0
 8002622:	627b      	str	r3, [r7, #36]	; 0x24
 8002624:	e059      	b.n	80026da <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	3301      	adds	r3, #1
 800262a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800262c:	3201      	adds	r2, #1
 800262e:	fb03 f202 	mul.w	r2, r3, r2
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	fb02 f303 	mul.w	r3, r2, r3
 8002638:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	429a      	cmp	r2, r3
 8002640:	d348      	bcc.n	80026d4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8002642:	2300      	movs	r3, #0
 8002644:	623b      	str	r3, [r7, #32]
 8002646:	e042      	b.n	80026ce <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8002648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800264a:	3301      	adds	r3, #1
 800264c:	6a3a      	ldr	r2, [r7, #32]
 800264e:	fb03 f202 	mul.w	r2, r3, r2
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	fb02 f303 	mul.w	r3, r2, r3
 8002658:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800265a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800265c:	68ba      	ldr	r2, [r7, #8]
 800265e:	429a      	cmp	r2, r3
 8002660:	d332      	bcc.n	80026c8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8002662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002664:	68ba      	ldr	r2, [r7, #8]
 8002666:	429a      	cmp	r2, r3
 8002668:	d82e      	bhi.n	80026c8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if (presc != prev_presc)
 800266a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800266c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800266e:	429a      	cmp	r2, r3
 8002670:	d02a      	beq.n	80026c8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8002672:	4b24      	ldr	r3, [pc, #144]	; (8002704 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	4924      	ldr	r1, [pc, #144]	; (8002708 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8002678:	4613      	mov	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4413      	add	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002684:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8002686:	4b1f      	ldr	r3, [pc, #124]	; (8002704 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	491f      	ldr	r1, [pc, #124]	; (8002708 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800268c:	4613      	mov	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4413      	add	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	3304      	adds	r3, #4
 8002698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800269a:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800269c:	4b19      	ldr	r3, [pc, #100]	; (8002704 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	4919      	ldr	r1, [pc, #100]	; (8002708 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80026a2:	4613      	mov	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4413      	add	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	440b      	add	r3, r1
 80026ac:	3308      	adds	r3, #8
 80026ae:	6a3a      	ldr	r2, [r7, #32]
 80026b0:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 80026b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b4:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 80026b6:	4b13      	ldr	r3, [pc, #76]	; (8002704 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	3301      	adds	r3, #1
 80026bc:	4a11      	ldr	r2, [pc, #68]	; (8002704 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80026be:	6013      	str	r3, [r2, #0]

              if (I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80026c0:	4b10      	ldr	r3, [pc, #64]	; (8002704 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2b7f      	cmp	r3, #127	; 0x7f
 80026c6:	d812      	bhi.n	80026ee <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80026c8:	6a3b      	ldr	r3, [r7, #32]
 80026ca:	3301      	adds	r3, #1
 80026cc:	623b      	str	r3, [r7, #32]
 80026ce:	6a3b      	ldr	r3, [r7, #32]
 80026d0:	2b0f      	cmp	r3, #15
 80026d2:	d9b9      	bls.n	8002648 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80026d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d6:	3301      	adds	r3, #1
 80026d8:	627b      	str	r3, [r7, #36]	; 0x24
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	2b0f      	cmp	r3, #15
 80026de:	d9a2      	bls.n	8002626 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80026e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e2:	3301      	adds	r3, #1
 80026e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80026e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e8:	2b0f      	cmp	r3, #15
 80026ea:	d999      	bls.n	8002620 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 80026ec:	e000      	b.n	80026f0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 80026ee:	bf00      	nop
          }
        }
      }
    }
  }
}
 80026f0:	373c      	adds	r7, #60	; 0x3c
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	3b9aca00 	.word	0x3b9aca00
 8002700:	080226f8 	.word	0x080226f8
 8002704:	20001478 	.word	0x20001478
 8002708:	20000a78 	.word	0x20000a78

0800270c <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800270c:	b480      	push	{r7}
 800270e:	b093      	sub	sp, #76	; 0x4c
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0xFFFFFFFFU;
 8002716:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800271a:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t clk_max;
  uint32_t scll;
  uint32_t sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U)) / clock_src_freq;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	085a      	lsrs	r2, r3, #1
 8002720:	4b7a      	ldr	r3, [pc, #488]	; (800290c <I2C_Compute_SCLL_SCLH+0x200>)
 8002722:	4413      	add	r3, r2
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	fbb3 f3f2 	udiv	r3, r3, r2
 800272a:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U)) / I2C_Charac[I2C_speed].freq;
 800272c:	4a78      	ldr	r2, [pc, #480]	; (8002910 <I2C_Compute_SCLL_SCLH+0x204>)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	212c      	movs	r1, #44	; 0x2c
 8002732:	fb01 f303 	mul.w	r3, r1, r3
 8002736:	4413      	add	r3, r2
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	085a      	lsrs	r2, r3, #1
 800273c:	4b73      	ldr	r3, [pc, #460]	; (800290c <I2C_Compute_SCLL_SCLH+0x200>)
 800273e:	4413      	add	r3, r2
 8002740:	4973      	ldr	r1, [pc, #460]	; (8002910 <I2C_Compute_SCLL_SCLH+0x204>)
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	202c      	movs	r0, #44	; 0x2c
 8002746:	fb00 f202 	mul.w	r2, r0, r2
 800274a:	440a      	add	r2, r1
 800274c:	6812      	ldr	r2, [r2, #0]
 800274e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002752:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8002754:	2332      	movs	r3, #50	; 0x32
 8002756:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8002758:	4a6d      	ldr	r2, [pc, #436]	; (8002910 <I2C_Compute_SCLL_SCLH+0x204>)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	212c      	movs	r1, #44	; 0x2c
 800275e:	fb01 f303 	mul.w	r3, r1, r3
 8002762:	4413      	add	r3, r2
 8002764:	3328      	adds	r3, #40	; 0x28
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800276a:	fb02 f303 	mul.w	r3, r2, r3
 800276e:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8002770:	4a67      	ldr	r2, [pc, #412]	; (8002910 <I2C_Compute_SCLL_SCLH+0x204>)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	212c      	movs	r1, #44	; 0x2c
 8002776:	fb01 f303 	mul.w	r3, r1, r3
 800277a:	4413      	add	r3, r2
 800277c:	3304      	adds	r3, #4
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a62      	ldr	r2, [pc, #392]	; (800290c <I2C_Compute_SCLL_SCLH+0x200>)
 8002782:	fbb2 f3f3 	udiv	r3, r2, r3
 8002786:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8002788:	4a61      	ldr	r2, [pc, #388]	; (8002910 <I2C_Compute_SCLL_SCLH+0x204>)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	212c      	movs	r1, #44	; 0x2c
 800278e:	fb01 f303 	mul.w	r3, r1, r3
 8002792:	4413      	add	r3, r2
 8002794:	3308      	adds	r3, #8
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a5c      	ldr	r2, [pc, #368]	; (800290c <I2C_Compute_SCLL_SCLH+0x200>)
 800279a:	fbb2 f3f3 	udiv	r3, r2, r3
 800279e:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 80027a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a2:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80027a4:	2300      	movs	r3, #0
 80027a6:	637b      	str	r3, [r7, #52]	; 0x34
 80027a8:	e0a3      	b.n	80028f2 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80027aa:	495a      	ldr	r1, [pc, #360]	; (8002914 <I2C_Compute_SCLL_SCLH+0x208>)
 80027ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027ae:	4613      	mov	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4413      	add	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	440b      	add	r3, r1
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	1c5a      	adds	r2, r3, #1
 80027bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027be:	fb02 f303 	mul.w	r3, r2, r3
 80027c2:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80027c4:	2300      	movs	r3, #0
 80027c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027c8:	e08c      	b.n	80028e4 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80027ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027cc:	6a3b      	ldr	r3, [r7, #32]
 80027ce:	441a      	add	r2, r3
 80027d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027d2:	3301      	adds	r3, #1
 80027d4:	6979      	ldr	r1, [r7, #20]
 80027d6:	fb03 f101 	mul.w	r1, r3, r1
 80027da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	440b      	add	r3, r1
 80027e0:	4413      	add	r3, r2
 80027e2:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80027e4:	4a4a      	ldr	r2, [pc, #296]	; (8002910 <I2C_Compute_SCLL_SCLH+0x204>)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	212c      	movs	r1, #44	; 0x2c
 80027ea:	fb01 f303 	mul.w	r3, r1, r3
 80027ee:	4413      	add	r3, r2
 80027f0:	3318      	adds	r3, #24
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d971      	bls.n	80028de <I2C_Compute_SCLL_SCLH+0x1d2>
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fe:	1ad2      	subs	r2, r2, r3
 8002800:	6a3b      	ldr	r3, [r7, #32]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	089b      	lsrs	r3, r3, #2
 8002806:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002808:	429a      	cmp	r2, r3
 800280a:	d268      	bcs.n	80028de <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800280c:	2300      	movs	r3, #0
 800280e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002810:	e062      	b.n	80028d8 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8002812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002814:	6a3b      	ldr	r3, [r7, #32]
 8002816:	441a      	add	r2, r3
 8002818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800281a:	3301      	adds	r3, #1
 800281c:	6979      	ldr	r1, [r7, #20]
 800281e:	fb03 f101 	mul.w	r1, r3, r1
 8002822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	440b      	add	r3, r1
 8002828:	4413      	add	r3, r2
 800282a:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	441a      	add	r2, r3
 8002832:	4937      	ldr	r1, [pc, #220]	; (8002910 <I2C_Compute_SCLL_SCLH+0x204>)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	202c      	movs	r0, #44	; 0x2c
 8002838:	fb00 f303 	mul.w	r3, r0, r3
 800283c:	440b      	add	r3, r1
 800283e:	3320      	adds	r3, #32
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	441a      	add	r2, r3
 8002844:	4932      	ldr	r1, [pc, #200]	; (8002910 <I2C_Compute_SCLL_SCLH+0x204>)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	202c      	movs	r0, #44	; 0x2c
 800284a:	fb00 f303 	mul.w	r3, r0, r3
 800284e:	440b      	add	r3, r1
 8002850:	3324      	adds	r3, #36	; 0x24
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4413      	add	r3, r2
 8002856:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min)
 8002858:	68ba      	ldr	r2, [r7, #8]
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	429a      	cmp	r2, r3
 800285e:	d338      	bcc.n	80028d2 <I2C_Compute_SCLL_SCLH+0x1c6>
 8002860:	68ba      	ldr	r2, [r7, #8]
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	429a      	cmp	r2, r3
 8002866:	d834      	bhi.n	80028d2 <I2C_Compute_SCLL_SCLH+0x1c6>
 8002868:	4a29      	ldr	r2, [pc, #164]	; (8002910 <I2C_Compute_SCLL_SCLH+0x204>)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	212c      	movs	r1, #44	; 0x2c
 800286e:	fb01 f303 	mul.w	r3, r1, r3
 8002872:	4413      	add	r3, r2
 8002874:	331c      	adds	r3, #28
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	429a      	cmp	r2, r3
 800287c:	d329      	bcc.n	80028d2 <I2C_Compute_SCLL_SCLH+0x1c6>
              && (ti2cclk < tscl_h))
 800287e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	429a      	cmp	r2, r3
 8002884:	d225      	bcs.n	80028d2 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 800288e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002890:	2b00      	cmp	r3, #0
 8002892:	da02      	bge.n	800289a <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8002894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002896:	425b      	negs	r3, r3
 8002898:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 800289a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800289e:	429a      	cmp	r2, r3
 80028a0:	d917      	bls.n	80028d2 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 80028a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a4:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 80028a6:	491b      	ldr	r1, [pc, #108]	; (8002914 <I2C_Compute_SCLL_SCLH+0x208>)
 80028a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028aa:	4613      	mov	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	440b      	add	r3, r1
 80028b4:	3310      	adds	r3, #16
 80028b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028b8:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 80028ba:	4916      	ldr	r1, [pc, #88]	; (8002914 <I2C_Compute_SCLL_SCLH+0x208>)
 80028bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028be:	4613      	mov	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	440b      	add	r3, r1
 80028c8:	330c      	adds	r3, #12
 80028ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028cc:	601a      	str	r2, [r3, #0]
              ret = count;
 80028ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028d0:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80028d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d4:	3301      	adds	r3, #1
 80028d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80028d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028da:	2bff      	cmp	r3, #255	; 0xff
 80028dc:	d999      	bls.n	8002812 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80028de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028e0:	3301      	adds	r3, #1
 80028e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028e6:	2bff      	cmp	r3, #255	; 0xff
 80028e8:	f67f af6f 	bls.w	80027ca <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80028ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ee:	3301      	adds	r3, #1
 80028f0:	637b      	str	r3, [r7, #52]	; 0x34
 80028f2:	4b09      	ldr	r3, [pc, #36]	; (8002918 <I2C_Compute_SCLL_SCLH+0x20c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028f8:	429a      	cmp	r2, r3
 80028fa:	f4ff af56 	bcc.w	80027aa <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 80028fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8002900:	4618      	mov	r0, r3
 8002902:	374c      	adds	r7, #76	; 0x4c
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	3b9aca00 	.word	0x3b9aca00
 8002910:	080226f8 	.word	0x080226f8
 8002914:	20000a78 	.word	0x20000a78
 8002918:	20001478 	.word	0x20001478

0800291c <I2C1_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C1_MspInit(const I2C_HandleTypeDef *hI2c)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b08a      	sub	sp, #40	; 0x28
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C1_SCL_GPIO_CLK_ENABLE();
 8002924:	4b2f      	ldr	r3, [pc, #188]	; (80029e4 <I2C1_MspInit+0xc8>)
 8002926:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800292a:	4a2e      	ldr	r2, [pc, #184]	; (80029e4 <I2C1_MspInit+0xc8>)
 800292c:	f043 0302 	orr.w	r3, r3, #2
 8002930:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002934:	4b2b      	ldr	r3, [pc, #172]	; (80029e4 <I2C1_MspInit+0xc8>)
 8002936:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	613b      	str	r3, [r7, #16]
 8002940:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C1_SDA_GPIO_CLK_ENABLE();
 8002942:	4b28      	ldr	r3, [pc, #160]	; (80029e4 <I2C1_MspInit+0xc8>)
 8002944:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002948:	4a26      	ldr	r2, [pc, #152]	; (80029e4 <I2C1_MspInit+0xc8>)
 800294a:	f043 0302 	orr.w	r3, r3, #2
 800294e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002952:	4b24      	ldr	r3, [pc, #144]	; (80029e4 <I2C1_MspInit+0xc8>)
 8002954:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	60fb      	str	r3, [r7, #12]
 800295e:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin     = BUS_I2C1_SCL_PIN;
 8002960:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002964:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode    = GPIO_MODE_AF_OD;
 8002966:	2312      	movs	r3, #18
 8002968:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull    = GPIO_PULLUP;
 800296a:	2301      	movs	r3, #1
 800296c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed             = GPIO_SPEED_FREQ_HIGH;
 800296e:	2302      	movs	r3, #2
 8002970:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate         = BUS_I2C1_SCL_AF;
 8002972:	2304      	movs	r3, #4
 8002974:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &gpio_init_structure);
 8002976:	f107 0314 	add.w	r3, r7, #20
 800297a:	4619      	mov	r1, r3
 800297c:	481a      	ldr	r0, [pc, #104]	; (80029e8 <I2C1_MspInit+0xcc>)
 800297e:	f011 f89d 	bl	8013abc <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin     = BUS_I2C1_SDA_PIN;
 8002982:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002986:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode    = GPIO_MODE_AF_OD;
 8002988:	2312      	movs	r3, #18
 800298a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull    = GPIO_PULLUP;
 800298c:	2301      	movs	r3, #1
 800298e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed             = GPIO_SPEED_FREQ_HIGH;
 8002990:	2302      	movs	r3, #2
 8002992:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate         = BUS_I2C1_SDA_AF;
 8002994:	2304      	movs	r3, #4
 8002996:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &gpio_init_structure);
 8002998:	f107 0314 	add.w	r3, r7, #20
 800299c:	4619      	mov	r1, r3
 800299e:	4812      	ldr	r0, [pc, #72]	; (80029e8 <I2C1_MspInit+0xcc>)
 80029a0:	f011 f88c 	bl	8013abc <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C1_CLK_ENABLE();
 80029a4:	4b0f      	ldr	r3, [pc, #60]	; (80029e4 <I2C1_MspInit+0xc8>)
 80029a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029aa:	4a0e      	ldr	r2, [pc, #56]	; (80029e4 <I2C1_MspInit+0xc8>)
 80029ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029b0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80029b4:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <I2C1_MspInit+0xc8>)
 80029b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029be:	60bb      	str	r3, [r7, #8]
 80029c0:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C1_FORCE_RESET();
 80029c2:	4b08      	ldr	r3, [pc, #32]	; (80029e4 <I2C1_MspInit+0xc8>)
 80029c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029c6:	4a07      	ldr	r2, [pc, #28]	; (80029e4 <I2C1_MspInit+0xc8>)
 80029c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029cc:	6753      	str	r3, [r2, #116]	; 0x74

  /* Release the I2C peripheral clock reset */
  BUS_I2C1_RELEASE_RESET();
 80029ce:	4b05      	ldr	r3, [pc, #20]	; (80029e4 <I2C1_MspInit+0xc8>)
 80029d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029d2:	4a04      	ldr	r2, [pc, #16]	; (80029e4 <I2C1_MspInit+0xc8>)
 80029d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029d8:	6753      	str	r3, [r2, #116]	; 0x74
}
 80029da:	bf00      	nop
 80029dc:	3728      	adds	r7, #40	; 0x28
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	46020c00 	.word	0x46020c00
 80029e8:	42020400 	.word	0x42020400

080029ec <I2C1_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C1_MspDeInit(const I2C_HandleTypeDef *hI2c)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b088      	sub	sp, #32
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C1_SCL_PIN;
 80029f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029f8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, gpio_init_structure.Pin);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	4619      	mov	r1, r3
 80029fe:	480b      	ldr	r0, [pc, #44]	; (8002a2c <I2C1_MspDeInit+0x40>)
 8002a00:	f011 fa34 	bl	8013e6c <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C1_SDA_PIN;
 8002a04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a08:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	4807      	ldr	r0, [pc, #28]	; (8002a2c <I2C1_MspDeInit+0x40>)
 8002a10:	f011 fa2c 	bl	8013e6c <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C1_CLK_DISABLE();
 8002a14:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <I2C1_MspDeInit+0x44>)
 8002a16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a1a:	4a05      	ldr	r2, [pc, #20]	; (8002a30 <I2C1_MspDeInit+0x44>)
 8002a1c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a20:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 8002a24:	bf00      	nop
 8002a26:	3720      	adds	r7, #32
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	42020400 	.word	0x42020400
 8002a30:	46020c00 	.word	0x46020c00

08002a34 <I2C1_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b088      	sub	sp, #32
 8002a38:	af04      	add	r7, sp, #16
 8002a3a:	607b      	str	r3, [r7, #4]
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	81fb      	strh	r3, [r7, #14]
 8002a40:	460b      	mov	r3, r1
 8002a42:	81bb      	strh	r3, [r7, #12]
 8002a44:	4613      	mov	r3, r2
 8002a46:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Write(&hbus_i2c1, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 8002a48:	8978      	ldrh	r0, [r7, #10]
 8002a4a:	89ba      	ldrh	r2, [r7, #12]
 8002a4c:	89f9      	ldrh	r1, [r7, #14]
 8002a4e:	f242 7310 	movw	r3, #10000	; 0x2710
 8002a52:	9302      	str	r3, [sp, #8]
 8002a54:	8b3b      	ldrh	r3, [r7, #24]
 8002a56:	9301      	str	r3, [sp, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	4807      	ldr	r0, [pc, #28]	; (8002a7c <I2C1_WriteReg+0x48>)
 8002a60:	f011 fc0a 	bl	8014278 <HAL_I2C_Mem_Write>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <I2C1_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	e001      	b.n	8002a72 <I2C1_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8002a6e:	f06f 0307 	mvn.w	r3, #7
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	2000147c 	.word	0x2000147c

08002a80 <I2C1_ReadReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b088      	sub	sp, #32
 8002a84:	af04      	add	r7, sp, #16
 8002a86:	607b      	str	r3, [r7, #4]
 8002a88:	4603      	mov	r3, r0
 8002a8a:	81fb      	strh	r3, [r7, #14]
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	81bb      	strh	r3, [r7, #12]
 8002a90:	4613      	mov	r3, r2
 8002a92:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c1, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 8002a94:	8978      	ldrh	r0, [r7, #10]
 8002a96:	89ba      	ldrh	r2, [r7, #12]
 8002a98:	89f9      	ldrh	r1, [r7, #14]
 8002a9a:	f242 7310 	movw	r3, #10000	; 0x2710
 8002a9e:	9302      	str	r3, [sp, #8]
 8002aa0:	8b3b      	ldrh	r3, [r7, #24]
 8002aa2:	9301      	str	r3, [sp, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	4807      	ldr	r0, [pc, #28]	; (8002ac8 <I2C1_ReadReg+0x48>)
 8002aac:	f011 fcf8 	bl	80144a0 <HAL_I2C_Mem_Read>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <I2C1_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	e001      	b.n	8002abe <I2C1_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8002aba:	f06f 0307 	mvn.w	r3, #7
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	2000147c 	.word	0x2000147c

08002acc <I2C2_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C2_MspInit(const I2C_HandleTypeDef *hI2c)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b08a      	sub	sp, #40	; 0x28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C2_SCL_GPIO_CLK_ENABLE();
 8002ad4:	4b2e      	ldr	r3, [pc, #184]	; (8002b90 <I2C2_MspInit+0xc4>)
 8002ad6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ada:	4a2d      	ldr	r2, [pc, #180]	; (8002b90 <I2C2_MspInit+0xc4>)
 8002adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ae0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002ae4:	4b2a      	ldr	r3, [pc, #168]	; (8002b90 <I2C2_MspInit+0xc4>)
 8002ae6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aee:	613b      	str	r3, [r7, #16]
 8002af0:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C2_SDA_GPIO_CLK_ENABLE();
 8002af2:	4b27      	ldr	r3, [pc, #156]	; (8002b90 <I2C2_MspInit+0xc4>)
 8002af4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002af8:	4a25      	ldr	r2, [pc, #148]	; (8002b90 <I2C2_MspInit+0xc4>)
 8002afa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002afe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002b02:	4b23      	ldr	r3, [pc, #140]	; (8002b90 <I2C2_MspInit+0xc4>)
 8002b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b0c:	60fb      	str	r3, [r7, #12]
 8002b0e:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin     = BUS_I2C2_SCL_PIN;
 8002b10:	2310      	movs	r3, #16
 8002b12:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode    = GPIO_MODE_AF_OD;
 8002b14:	2312      	movs	r3, #18
 8002b16:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull    = GPIO_PULLUP;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed             = GPIO_SPEED_FREQ_HIGH;
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate         = BUS_I2C2_SCL_AF;
 8002b20:	2304      	movs	r3, #4
 8002b22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &gpio_init_structure);
 8002b24:	f107 0314 	add.w	r3, r7, #20
 8002b28:	4619      	mov	r1, r3
 8002b2a:	481a      	ldr	r0, [pc, #104]	; (8002b94 <I2C2_MspInit+0xc8>)
 8002b2c:	f010 ffc6 	bl	8013abc <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin     = BUS_I2C2_SDA_PIN;
 8002b30:	2320      	movs	r3, #32
 8002b32:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode    = GPIO_MODE_AF_OD;
 8002b34:	2312      	movs	r3, #18
 8002b36:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull    = GPIO_PULLUP;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed             = GPIO_SPEED_FREQ_HIGH;
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate         = BUS_I2C2_SDA_AF;
 8002b40:	2304      	movs	r3, #4
 8002b42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &gpio_init_structure);
 8002b44:	f107 0314 	add.w	r3, r7, #20
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4812      	ldr	r0, [pc, #72]	; (8002b94 <I2C2_MspInit+0xc8>)
 8002b4c:	f010 ffb6 	bl	8013abc <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C2_CLK_ENABLE();
 8002b50:	4b0f      	ldr	r3, [pc, #60]	; (8002b90 <I2C2_MspInit+0xc4>)
 8002b52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b56:	4a0e      	ldr	r2, [pc, #56]	; (8002b90 <I2C2_MspInit+0xc4>)
 8002b58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b5c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002b60:	4b0b      	ldr	r3, [pc, #44]	; (8002b90 <I2C2_MspInit+0xc4>)
 8002b62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b6a:	60bb      	str	r3, [r7, #8]
 8002b6c:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C2_FORCE_RESET();
 8002b6e:	4b08      	ldr	r3, [pc, #32]	; (8002b90 <I2C2_MspInit+0xc4>)
 8002b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b72:	4a07      	ldr	r2, [pc, #28]	; (8002b90 <I2C2_MspInit+0xc4>)
 8002b74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b78:	6753      	str	r3, [r2, #116]	; 0x74

  /* Release the I2C peripheral clock reset */
  BUS_I2C2_RELEASE_RESET();
 8002b7a:	4b05      	ldr	r3, [pc, #20]	; (8002b90 <I2C2_MspInit+0xc4>)
 8002b7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b7e:	4a04      	ldr	r2, [pc, #16]	; (8002b90 <I2C2_MspInit+0xc4>)
 8002b80:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002b84:	6753      	str	r3, [r2, #116]	; 0x74
}
 8002b86:	bf00      	nop
 8002b88:	3728      	adds	r7, #40	; 0x28
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	46020c00 	.word	0x46020c00
 8002b94:	42021c00 	.word	0x42021c00

08002b98 <I2C2_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C2_MspDeInit(const I2C_HandleTypeDef *hI2c)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b088      	sub	sp, #32
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C2_SCL_PIN;
 8002ba0:	2310      	movs	r3, #16
 8002ba2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, gpio_init_structure.Pin);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	480a      	ldr	r0, [pc, #40]	; (8002bd4 <I2C2_MspDeInit+0x3c>)
 8002baa:	f011 f95f 	bl	8013e6c <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C2_SDA_PIN;
 8002bae:	2320      	movs	r3, #32
 8002bb0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	4807      	ldr	r0, [pc, #28]	; (8002bd4 <I2C2_MspDeInit+0x3c>)
 8002bb8:	f011 f958 	bl	8013e6c <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C2_CLK_DISABLE();
 8002bbc:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <I2C2_MspDeInit+0x40>)
 8002bbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002bc2:	4a05      	ldr	r2, [pc, #20]	; (8002bd8 <I2C2_MspDeInit+0x40>)
 8002bc4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002bc8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 8002bcc:	bf00      	nop
 8002bce:	3720      	adds	r7, #32
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	42021c00 	.word	0x42021c00
 8002bd8:	46020c00 	.word	0x46020c00

08002bdc <I2C2_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b088      	sub	sp, #32
 8002be0:	af04      	add	r7, sp, #16
 8002be2:	607b      	str	r3, [r7, #4]
 8002be4:	4603      	mov	r3, r0
 8002be6:	81fb      	strh	r3, [r7, #14]
 8002be8:	460b      	mov	r3, r1
 8002bea:	81bb      	strh	r3, [r7, #12]
 8002bec:	4613      	mov	r3, r2
 8002bee:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Write(&hbus_i2c2, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 8002bf0:	8978      	ldrh	r0, [r7, #10]
 8002bf2:	89ba      	ldrh	r2, [r7, #12]
 8002bf4:	89f9      	ldrh	r1, [r7, #14]
 8002bf6:	f242 7310 	movw	r3, #10000	; 0x2710
 8002bfa:	9302      	str	r3, [sp, #8]
 8002bfc:	8b3b      	ldrh	r3, [r7, #24]
 8002bfe:	9301      	str	r3, [sp, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	9300      	str	r3, [sp, #0]
 8002c04:	4603      	mov	r3, r0
 8002c06:	4807      	ldr	r0, [pc, #28]	; (8002c24 <I2C2_WriteReg+0x48>)
 8002c08:	f011 fb36 	bl	8014278 <HAL_I2C_Mem_Write>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <I2C2_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8002c12:	2300      	movs	r3, #0
 8002c14:	e001      	b.n	8002c1a <I2C2_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8002c16:	f06f 0307 	mvn.w	r3, #7
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	200014d0 	.word	0x200014d0

08002c28 <I2C2_ReadReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b088      	sub	sp, #32
 8002c2c:	af04      	add	r7, sp, #16
 8002c2e:	607b      	str	r3, [r7, #4]
 8002c30:	4603      	mov	r3, r0
 8002c32:	81fb      	strh	r3, [r7, #14]
 8002c34:	460b      	mov	r3, r1
 8002c36:	81bb      	strh	r3, [r7, #12]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c2, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 8002c3c:	8978      	ldrh	r0, [r7, #10]
 8002c3e:	89ba      	ldrh	r2, [r7, #12]
 8002c40:	89f9      	ldrh	r1, [r7, #14]
 8002c42:	f242 7310 	movw	r3, #10000	; 0x2710
 8002c46:	9302      	str	r3, [sp, #8]
 8002c48:	8b3b      	ldrh	r3, [r7, #24]
 8002c4a:	9301      	str	r3, [sp, #4]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	9300      	str	r3, [sp, #0]
 8002c50:	4603      	mov	r3, r0
 8002c52:	4807      	ldr	r0, [pc, #28]	; (8002c70 <I2C2_ReadReg+0x48>)
 8002c54:	f011 fc24 	bl	80144a0 <HAL_I2C_Mem_Read>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <I2C2_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	e001      	b.n	8002c66 <I2C2_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8002c62:	f06f 0307 	mvn.w	r3, #7
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	200014d0 	.word	0x200014d0

08002c74 <BSP_CAMERA_Init>:
  *         naming QQVGA, QVGA, VGA ...
  * @param  PixelFormat Capture pixel format
  * @retval BSP status
  */
int32_t BSP_CAMERA_Init(uint32_t Instance, uint32_t Resolution, uint32_t PixelFormat)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b08a      	sub	sp, #40	; 0x28
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8002c80:	2300      	movs	r3, #0
 8002c82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitTypeDef gpio_init_structure;
  if (Instance >= CAMERA_INSTANCES_NBR)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <BSP_CAMERA_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002c8a:	f06f 0301 	mvn.w	r3, #1
 8002c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c90:	e052      	b.n	8002d38 <BSP_CAMERA_Init+0xc4>
  }
  else
  {
    /* Set DCMI instance */
    hcamera_dcmi.Instance = DCMI;
 8002c92:	4b2c      	ldr	r3, [pc, #176]	; (8002d44 <BSP_CAMERA_Init+0xd0>)
 8002c94:	4a2c      	ldr	r2, [pc, #176]	; (8002d48 <BSP_CAMERA_Init+0xd4>)
 8002c96:	601a      	str	r2, [r3, #0]
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#else
    /* DCMI Initialization */
    DCMI_MspInit(&hcamera_dcmi);
 8002c98:	482a      	ldr	r0, [pc, #168]	; (8002d44 <BSP_CAMERA_Init+0xd0>)
 8002c9a:	f000 fa5f 	bl	800315c <DCMI_MspInit>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
    /* Initialize the camera driver structure */
    if (MX_DCMI_Init(&hcamera_dcmi) != HAL_OK)
 8002c9e:	4829      	ldr	r0, [pc, #164]	; (8002d44 <BSP_CAMERA_Init+0xd0>)
 8002ca0:	f000 f8a4 	bl	8002dec <MX_DCMI_Init>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <BSP_CAMERA_Init+0x3e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002caa:	f06f 0303 	mvn.w	r3, #3
 8002cae:	627b      	str	r3, [r7, #36]	; 0x24
 8002cb0:	e042      	b.n	8002d38 <BSP_CAMERA_Init+0xc4>
    }
    else if (BSP_CAMERA_HwReset(0) != BSP_ERROR_NONE)
 8002cb2:	2000      	movs	r0, #0
 8002cb4:	f000 f940 	bl	8002f38 <BSP_CAMERA_HwReset>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <BSP_CAMERA_Init+0x52>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8002cbe:	f06f 0307 	mvn.w	r3, #7
 8002cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8002cc4:	e038      	b.n	8002d38 <BSP_CAMERA_Init+0xc4>
    }
    else
    {
      gpio_init_structure.Pin       = CAM_PLUG_PIN;
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	613b      	str	r3, [r7, #16]
      gpio_init_structure.Pull      = GPIO_PULLUP;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	61bb      	str	r3, [r7, #24]
      gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	617b      	str	r3, [r7, #20]
      gpio_init_structure.Alternate = CAM_PLUG_PIN_AF;
 8002cd2:	230a      	movs	r3, #10
 8002cd4:	623b      	str	r3, [r7, #32]
      HAL_GPIO_Init(CAM_PLUG_PORT, &gpio_init_structure);
 8002cd6:	f107 0310 	add.w	r3, r7, #16
 8002cda:	4619      	mov	r1, r3
 8002cdc:	481b      	ldr	r0, [pc, #108]	; (8002d4c <BSP_CAMERA_Init+0xd8>)
 8002cde:	f010 feed 	bl	8013abc <HAL_GPIO_Init>

      if (((uint32_t)HAL_GPIO_ReadPin(CAM_PLUG_PORT, CAM_PLUG_PIN) & CAM_PLUG_PIN) == CAM_PLUG_PIN)
 8002ce2:	2102      	movs	r1, #2
 8002ce4:	4819      	ldr	r0, [pc, #100]	; (8002d4c <BSP_CAMERA_Init+0xd8>)
 8002ce6:	f011 f99f 	bl	8014028 <HAL_GPIO_ReadPin>
 8002cea:	4603      	mov	r3, r0
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d103      	bne.n	8002cfc <BSP_CAMERA_Init+0x88>
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002cf4:	f06f 0306 	mvn.w	r3, #6
 8002cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cfa:	e01d      	b.n	8002d38 <BSP_CAMERA_Init+0xc4>
      }
      else
      {
        /* Read ID of Camera module via I2C */
        if (OV5640_Probe(Resolution, PixelFormat) != BSP_ERROR_NONE)
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	68b8      	ldr	r0, [r7, #8]
 8002d00:	f000 fbd6 	bl	80034b0 <OV5640_Probe>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d003      	beq.n	8002d12 <BSP_CAMERA_Init+0x9e>
        {
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002d0a:	f06f 0306 	mvn.w	r3, #6
 8002d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d10:	e012      	b.n	8002d38 <BSP_CAMERA_Init+0xc4>
          else
          {
            ret = BSP_ERROR_NONE;
          }
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS > 0) */
          Camera_Ctx[Instance].Resolution = Resolution;
 8002d12:	490f      	ldr	r1, [pc, #60]	; (8002d50 <BSP_CAMERA_Init+0xdc>)
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	4613      	mov	r3, r2
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	4413      	add	r3, r2
 8002d1c:	011b      	lsls	r3, r3, #4
 8002d1e:	440b      	add	r3, r1
 8002d20:	68ba      	ldr	r2, [r7, #8]
 8002d22:	601a      	str	r2, [r3, #0]
          Camera_Ctx[Instance].PixelFormat = PixelFormat;
 8002d24:	490a      	ldr	r1, [pc, #40]	; (8002d50 <BSP_CAMERA_Init+0xdc>)
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	4413      	add	r3, r2
 8002d2e:	011b      	lsls	r3, r3, #4
 8002d30:	440b      	add	r3, r1
 8002d32:	3304      	adds	r3, #4
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* BSP status */
  return ret;
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3728      	adds	r7, #40	; 0x28
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	20001528 	.word	0x20001528
 8002d48:	4202c000 	.word	0x4202c000
 8002d4c:	42022000 	.word	0x42022000
 8002d50:	20001578 	.word	0x20001578

08002d54 <BSP_CAMERA_DeInit>:
  * @brief  DeInitializes the camera.
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_DeInit(uint32_t Instance)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= CAMERA_INSTANCES_NBR)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <BSP_CAMERA_DeInit+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002d62:	f06f 0301 	mvn.w	r3, #1
 8002d66:	60fb      	str	r3, [r7, #12]
 8002d68:	e033      	b.n	8002dd2 <BSP_CAMERA_DeInit+0x7e>
  }
  else
  {
    hcamera_dcmi.Instance = DCMI;
 8002d6a:	4b1c      	ldr	r3, [pc, #112]	; (8002ddc <BSP_CAMERA_DeInit+0x88>)
 8002d6c:	4a1c      	ldr	r2, [pc, #112]	; (8002de0 <BSP_CAMERA_DeInit+0x8c>)
 8002d6e:	601a      	str	r2, [r3, #0]

    /* First stop the camera to insure all data are transferred */
    if (BSP_CAMERA_Stop(Instance) != BSP_ERROR_NONE)
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 f89d 	bl	8002eb0 <BSP_CAMERA_Stop>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <BSP_CAMERA_DeInit+0x30>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002d7c:	f06f 0303 	mvn.w	r3, #3
 8002d80:	60fb      	str	r3, [r7, #12]
 8002d82:	e026      	b.n	8002dd2 <BSP_CAMERA_DeInit+0x7e>
    }
    else if (HAL_DCMI_DeInit(&hcamera_dcmi) != HAL_OK)
 8002d84:	4815      	ldr	r0, [pc, #84]	; (8002ddc <BSP_CAMERA_DeInit+0x88>)
 8002d86:	f00e fe99 	bl	8011abc <HAL_DCMI_DeInit>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d003      	beq.n	8002d98 <BSP_CAMERA_DeInit+0x44>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002d90:	f06f 0303 	mvn.w	r3, #3
 8002d94:	60fb      	str	r3, [r7, #12]
 8002d96:	e01c      	b.n	8002dd2 <BSP_CAMERA_DeInit+0x7e>
    }
    else
    {
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 0)
      DCMI_MspDeInit(&hcamera_dcmi);
 8002d98:	4810      	ldr	r0, [pc, #64]	; (8002ddc <BSP_CAMERA_DeInit+0x88>)
 8002d9a:	f000 fb35 	bl	8003408 <DCMI_MspDeInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS == 0) */

      /* De-initialize the camera module */
      if (Camera_Drv->DeInit(Camera_CompObj) != OV5640_OK)
 8002d9e:	4b11      	ldr	r3, [pc, #68]	; (8002de4 <BSP_CAMERA_DeInit+0x90>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	4a10      	ldr	r2, [pc, #64]	; (8002de8 <BSP_CAMERA_DeInit+0x94>)
 8002da6:	6812      	ldr	r2, [r2, #0]
 8002da8:	4610      	mov	r0, r2
 8002daa:	4798      	blx	r3
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <BSP_CAMERA_DeInit+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002db2:	f06f 0304 	mvn.w	r3, #4
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	e00b      	b.n	8002dd2 <BSP_CAMERA_DeInit+0x7e>
      }

      /* Set Camera in Power Down */
      else if (BSP_CAMERA_PwrDown(Instance) != BSP_ERROR_NONE)
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f8fc 	bl	8002fb8 <BSP_CAMERA_PwrDown>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <BSP_CAMERA_DeInit+0x7a>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8002dc6:	f06f 0307 	mvn.w	r3, #7
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	e001      	b.n	8002dd2 <BSP_CAMERA_DeInit+0x7e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	20001528 	.word	0x20001528
 8002de0:	4202c000 	.word	0x4202c000
 8002de4:	200015a8 	.word	0x200015a8
 8002de8:	20001524 	.word	0x20001524

08002dec <MX_DCMI_Init>:
  * @param  hdcmi  DCMI handle
  * @note   Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /*** Configures the DCMI to interface with the camera module ***/
  /* DCMI configuration */
  hdcmi->Instance              = DCMI;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a10      	ldr	r2, [pc, #64]	; (8002e38 <MX_DCMI_Init+0x4c>)
 8002df8:	601a      	str	r2, [r3, #0]
  hdcmi->Init.CaptureRate      = DCMI_CR_ALL_FRAME;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	615a      	str	r2, [r3, #20]
  hdcmi->Init.HSPolarity       = DCMI_HSPOLARITY_HIGH;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2240      	movs	r2, #64	; 0x40
 8002e04:	611a      	str	r2, [r3, #16]
  hdcmi->Init.SynchroMode      = DCMI_SYNCHRO_HARDWARE;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	605a      	str	r2, [r3, #4]
  hdcmi->Init.VSPolarity       = DCMI_VSPOLARITY_HIGH;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2280      	movs	r2, #128	; 0x80
 8002e10:	60da      	str	r2, [r3, #12]
  hdcmi->Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	619a      	str	r2, [r3, #24]
  hdcmi->Init.PCKPolarity      = DCMI_PCKPOLARITY_RISING;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	609a      	str	r2, [r3, #8]

  if (HAL_DCMI_Init(hdcmi) != HAL_OK)
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f00e fdd2 	bl	80119c8 <HAL_DCMI_Init>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <MX_DCMI_Init+0x42>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e000      	b.n	8002e30 <MX_DCMI_Init+0x44>
  }
  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3708      	adds	r7, #8
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	4202c000 	.word	0x4202c000

08002e3c <BSP_CAMERA_Start>:
  * @param  pBff     pointer to the camera output buffer
  * @param  Mode CAMERA_MODE_CONTINUOUS or CAMERA_MODE_SNAPSHOT
  * @retval BSP status
  */
int32_t BSP_CAMERA_Start(uint32_t Instance, uint8_t *pBff, uint32_t Mode)
{
 8002e3c:	b590      	push	{r4, r7, lr}
 8002e3e:	b087      	sub	sp, #28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= CAMERA_INSTANCES_NBR)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d003      	beq.n	8002e56 <BSP_CAMERA_Start+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002e4e:	f06f 0301 	mvn.w	r3, #1
 8002e52:	617b      	str	r3, [r7, #20]
 8002e54:	e023      	b.n	8002e9e <BSP_CAMERA_Start+0x62>
  }
  else if (HAL_DCMI_Start_DMA(&hcamera_dcmi, Mode, (uint32_t)pBff, (uint32_t)GetSize(Camera_Ctx[Instance].Resolution,
 8002e56:	68bc      	ldr	r4, [r7, #8]
 8002e58:	4913      	ldr	r1, [pc, #76]	; (8002ea8 <BSP_CAMERA_Start+0x6c>)
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	4413      	add	r3, r2
 8002e62:	011b      	lsls	r3, r3, #4
 8002e64:	440b      	add	r3, r1
 8002e66:	6818      	ldr	r0, [r3, #0]
 8002e68:	490f      	ldr	r1, [pc, #60]	; (8002ea8 <BSP_CAMERA_Start+0x6c>)
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	4413      	add	r3, r2
 8002e72:	011b      	lsls	r3, r3, #4
 8002e74:	440b      	add	r3, r1
 8002e76:	3304      	adds	r3, #4
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	f000 f91c 	bl	80030b8 <GetSize>
 8002e80:	4603      	mov	r3, r0
 8002e82:	4622      	mov	r2, r4
 8002e84:	6879      	ldr	r1, [r7, #4]
 8002e86:	4809      	ldr	r0, [pc, #36]	; (8002eac <BSP_CAMERA_Start+0x70>)
 8002e88:	f00e fe44 	bl	8011b14 <HAL_DCMI_Start_DMA>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <BSP_CAMERA_Start+0x5e>
                              Camera_Ctx[Instance].PixelFormat)) != HAL_OK)
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8002e92:	f06f 0303 	mvn.w	r3, #3
 8002e96:	617b      	str	r3, [r7, #20]
 8002e98:	e001      	b.n	8002e9e <BSP_CAMERA_Start+0x62>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	617b      	str	r3, [r7, #20]
  }

  /* Return BSP status */
  return ret;
 8002e9e:	697b      	ldr	r3, [r7, #20]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	371c      	adds	r7, #28
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd90      	pop	{r4, r7, pc}
 8002ea8:	20001578 	.word	0x20001578
 8002eac:	20001528 	.word	0x20001528

08002eb0 <BSP_CAMERA_Stop>:
  * @brief  Stop the CAMERA capture
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_Stop(uint32_t Instance)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= CAMERA_INSTANCES_NBR)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <BSP_CAMERA_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002ebe:	f06f 0301 	mvn.w	r3, #1
 8002ec2:	60fb      	str	r3, [r7, #12]
 8002ec4:	e00b      	b.n	8002ede <BSP_CAMERA_Stop+0x2e>
  }
  else if (HAL_DCMI_Stop(&hcamera_dcmi) != HAL_OK)
 8002ec6:	4808      	ldr	r0, [pc, #32]	; (8002ee8 <BSP_CAMERA_Stop+0x38>)
 8002ec8:	f00e ffc6 	bl	8011e58 <HAL_DCMI_Stop>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d003      	beq.n	8002eda <BSP_CAMERA_Stop+0x2a>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8002ed2:	f06f 0303 	mvn.w	r3, #3
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	e001      	b.n	8002ede <BSP_CAMERA_Stop+0x2e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8002eda:	2300      	movs	r3, #0
 8002edc:	60fb      	str	r3, [r7, #12]
  }

  /* Return BSP status */
  return ret;
 8002ede:	68fb      	ldr	r3, [r7, #12]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3710      	adds	r7, #16
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	20001528 	.word	0x20001528

08002eec <BSP_CAMERA_GetCapabilities>:
  * @note   This function should be called after the init. This to get Capabilities
  *         from the camera sensor OV5640
  * @retval Component status
  */
int32_t BSP_CAMERA_GetCapabilities(const uint32_t Instance, CAMERA_Capabilities_t *Capabilities)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CAMERA_INSTANCES_NBR)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d003      	beq.n	8002f04 <BSP_CAMERA_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002efc:	f06f 0301 	mvn.w	r3, #1
 8002f00:	60fb      	str	r3, [r7, #12]
 8002f02:	e010      	b.n	8002f26 <BSP_CAMERA_GetCapabilities+0x3a>
  }
  else if (Camera_Drv->GetCapabilities(Camera_CompObj, Capabilities) < 0)
 8002f04:	4b0a      	ldr	r3, [pc, #40]	; (8002f30 <BSP_CAMERA_GetCapabilities+0x44>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	4a0a      	ldr	r2, [pc, #40]	; (8002f34 <BSP_CAMERA_GetCapabilities+0x48>)
 8002f0c:	6812      	ldr	r2, [r2, #0]
 8002f0e:	6839      	ldr	r1, [r7, #0]
 8002f10:	4610      	mov	r0, r2
 8002f12:	4798      	blx	r3
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	da03      	bge.n	8002f22 <BSP_CAMERA_GetCapabilities+0x36>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002f1a:	f06f 0304 	mvn.w	r3, #4
 8002f1e:	60fb      	str	r3, [r7, #12]
 8002f20:	e001      	b.n	8002f26 <BSP_CAMERA_GetCapabilities+0x3a>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8002f22:	2300      	movs	r3, #0
 8002f24:	60fb      	str	r3, [r7, #12]
  }

  /* Return BSP status */
  return ret;
 8002f26:	68fb      	ldr	r3, [r7, #12]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	200015a8 	.word	0x200015a8
 8002f34:	20001524 	.word	0x20001524

08002f38 <BSP_CAMERA_HwReset>:
  * @brief  CAMERA hardware reset
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_HwReset(uint32_t Instance)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b088      	sub	sp, #32
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8002f40:	2300      	movs	r3, #0
 8002f42:	61fb      	str	r3, [r7, #28]
  GPIO_InitTypeDef gpio_init_structure;

  if (Instance >= CAMERA_INSTANCES_NBR)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <BSP_CAMERA_HwReset+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002f4a:	f06f 0301 	mvn.w	r3, #1
 8002f4e:	61fb      	str	r3, [r7, #28]
 8002f50:	e02a      	b.n	8002fa8 <BSP_CAMERA_HwReset+0x70>
  }
  else
  {
    gpio_init_structure.Pin  = RSTI_PIN | XSDN_PIN;
 8002f52:	230c      	movs	r3, #12
 8002f54:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002f56:	2300      	movs	r3, #0
 8002f58:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Alternate  = GPIO_AF10_DCMI;
 8002f5e:	230a      	movs	r3, #10
 8002f60:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002f62:	f107 0308 	add.w	r3, r7, #8
 8002f66:	4619      	mov	r1, r3
 8002f68:	4812      	ldr	r0, [pc, #72]	; (8002fb4 <BSP_CAMERA_HwReset+0x7c>)
 8002f6a:	f010 fda7 	bl	8013abc <HAL_GPIO_Init>

    /* Camera sensor RESET sequence */
    /* Assert the camera STANDBY and RSTI pins */
    HAL_GPIO_WritePin(XSDN_PORT, XSDN_PIN, GPIO_PIN_SET);
 8002f6e:	2201      	movs	r2, #1
 8002f70:	2108      	movs	r1, #8
 8002f72:	4810      	ldr	r0, [pc, #64]	; (8002fb4 <BSP_CAMERA_HwReset+0x7c>)
 8002f74:	f011 f870 	bl	8014058 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RSTI_PORT, RSTI_PIN, GPIO_PIN_RESET);
 8002f78:	2200      	movs	r2, #0
 8002f7a:	2104      	movs	r1, #4
 8002f7c:	480d      	ldr	r0, [pc, #52]	; (8002fb4 <BSP_CAMERA_HwReset+0x7c>)
 8002f7e:	f011 f86b 	bl	8014058 <HAL_GPIO_WritePin>
    HAL_Delay(100);   /* RST and XSDN signals asserted during 100ms */
 8002f82:	2064      	movs	r0, #100	; 0x64
 8002f84:	f00e fbba 	bl	80116fc <HAL_Delay>

    /* De-assert the camera STANDBY pin (active high) */
    HAL_GPIO_WritePin(XSDN_PORT, XSDN_PIN, GPIO_PIN_RESET);
 8002f88:	2200      	movs	r2, #0
 8002f8a:	2108      	movs	r1, #8
 8002f8c:	4809      	ldr	r0, [pc, #36]	; (8002fb4 <BSP_CAMERA_HwReset+0x7c>)
 8002f8e:	f011 f863 	bl	8014058 <HAL_GPIO_WritePin>
    HAL_Delay(3);     /* RST de-asserted and XSDN de-asserted during 3ms */
 8002f92:	2003      	movs	r0, #3
 8002f94:	f00e fbb2 	bl	80116fc <HAL_Delay>

    /* De-assert the camera RSTI pin (active low) */
    HAL_GPIO_WritePin(RSTI_PORT, RSTI_PIN, GPIO_PIN_SET);
 8002f98:	2201      	movs	r2, #1
 8002f9a:	2104      	movs	r1, #4
 8002f9c:	4805      	ldr	r0, [pc, #20]	; (8002fb4 <BSP_CAMERA_HwReset+0x7c>)
 8002f9e:	f011 f85b 	bl	8014058 <HAL_GPIO_WritePin>
    HAL_Delay(20);     /* RST de-asserted during 20ms */
 8002fa2:	2014      	movs	r0, #20
 8002fa4:	f00e fbaa 	bl	80116fc <HAL_Delay>
  }

  return ret;
 8002fa8:	69fb      	ldr	r3, [r7, #28]
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3720      	adds	r7, #32
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	42022000 	.word	0x42022000

08002fb8 <BSP_CAMERA_PwrDown>:
  * @brief  CAMERA power down
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_PwrDown(uint32_t Instance)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b088      	sub	sp, #32
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitTypeDef gpio_init_structure;

  if (Instance >= CAMERA_INSTANCES_NBR)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <BSP_CAMERA_PwrDown+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002fca:	f06f 0301 	mvn.w	r3, #1
 8002fce:	61fb      	str	r3, [r7, #28]
 8002fd0:	e017      	b.n	8003002 <BSP_CAMERA_PwrDown+0x4a>
  }
  else
  {
    gpio_init_structure.Pin  = RSTI_PIN | XSDN_PIN;
 8002fd2:	230c      	movs	r3, #12
 8002fd4:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Alternate  = GPIO_AF10_DCMI;
 8002fde:	230a      	movs	r3, #10
 8002fe0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002fe2:	f107 0308 	add.w	r3, r7, #8
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	4808      	ldr	r0, [pc, #32]	; (800300c <BSP_CAMERA_PwrDown+0x54>)
 8002fea:	f010 fd67 	bl	8013abc <HAL_GPIO_Init>

    /* Camera power down sequence */
    /* De-assert the camera STANDBY pin (active high) */
    HAL_GPIO_WritePin(XSDN_PORT, XSDN_PIN, GPIO_PIN_RESET);
 8002fee:	2200      	movs	r2, #0
 8002ff0:	2108      	movs	r1, #8
 8002ff2:	4806      	ldr	r0, [pc, #24]	; (800300c <BSP_CAMERA_PwrDown+0x54>)
 8002ff4:	f011 f830 	bl	8014058 <HAL_GPIO_WritePin>

    /* Assert the camera RSTI pin (active low) */
    HAL_GPIO_WritePin(RSTI_PORT, RSTI_PIN, GPIO_PIN_RESET);
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	2104      	movs	r1, #4
 8002ffc:	4803      	ldr	r0, [pc, #12]	; (800300c <BSP_CAMERA_PwrDown+0x54>)
 8002ffe:	f011 f82b 	bl	8014058 <HAL_GPIO_WritePin>
  }

  return ret;
 8003002:	69fb      	ldr	r3, [r7, #28]
}
 8003004:	4618      	mov	r0, r3
 8003006:	3720      	adds	r7, #32
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	42022000 	.word	0x42022000

08003010 <BSP_CAMERA_LineEventCallback>:
  * @brief  Line Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_LineEventCallback(uint32_t Instance)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <BSP_CAMERA_FrameEventCallback>:
  * @brief  Frame Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_FrameEventCallback(uint32_t Instance)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <BSP_CAMERA_VsyncEventCallback>:
  * @brief  Vsync Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_VsyncEventCallback(uint32_t Instance)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <BSP_CAMERA_ErrorCallback>:
  * @brief  Error callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_ErrorCallback(uint32_t Instance)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <HAL_DCMI_LineEventCallback>:
  * @brief  Line event callback
  * @param  hdcmi  pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_LineEventCallback(0);
 8003068:	2000      	movs	r0, #0
 800306a:	f7ff ffd1 	bl	8003010 <BSP_CAMERA_LineEventCallback>
}
 800306e:	bf00      	nop
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <HAL_DCMI_FrameEventCallback>:
  * @brief  Frame event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b082      	sub	sp, #8
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_FrameEventCallback(0);
 800307e:	2000      	movs	r0, #0
 8003080:	f7ff ffd0 	bl	8003024 <BSP_CAMERA_FrameEventCallback>
}
 8003084:	bf00      	nop
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <HAL_DCMI_VsyncEventCallback>:
  * @brief  Vsync event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_VsyncEventCallback(0);
 8003094:	2000      	movs	r0, #0
 8003096:	f7ff ffcf 	bl	8003038 <BSP_CAMERA_VsyncEventCallback>
}
 800309a:	bf00      	nop
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <HAL_DCMI_ErrorCallback>:
  * @brief  Error callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b082      	sub	sp, #8
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_ErrorCallback(0);
 80030aa:	2000      	movs	r0, #0
 80030ac:	f7ff ffce 	bl	800304c <BSP_CAMERA_ErrorCallback>
}
 80030b0:	bf00      	nop
 80030b2:	3708      	adds	r7, #8
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <GetSize>:
  * @param  Resolution  the current resolution.
  * @param  PixelFormat Pixel format
  * @retval capture size in pixels unit.
  */
static int32_t GetSize(uint32_t Resolution, uint32_t PixelFormat)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t size = 0;
 80030c2:	2300      	movs	r3, #0
 80030c4:	60fb      	str	r3, [r7, #12]
  uint32_t pf_div;
  if (PixelFormat == CAMERA_PF_RGB888)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d102      	bne.n	80030d2 <GetSize+0x1a>
  {
    pf_div = 3; /* each pixel on 3 bytes so 3/4 words */
 80030cc:	2303      	movs	r3, #3
 80030ce:	60bb      	str	r3, [r7, #8]
 80030d0:	e001      	b.n	80030d6 <GetSize+0x1e>
  }
  else
  {
    pf_div = 2; /* each pixel on 2 bytes so 1/2 words*/
 80030d2:	2302      	movs	r3, #2
 80030d4:	60bb      	str	r3, [r7, #8]
  }
  /* Get capture size */
  switch (Resolution)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2b04      	cmp	r3, #4
 80030da:	d834      	bhi.n	8003146 <GetSize+0x8e>
 80030dc:	a201      	add	r2, pc, #4	; (adr r2, 80030e4 <GetSize+0x2c>)
 80030de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e2:	bf00      	nop
 80030e4:	080030f9 	.word	0x080030f9
 80030e8:	08003109 	.word	0x08003109
 80030ec:	08003119 	.word	0x08003119
 80030f0:	08003129 	.word	0x08003129
 80030f4:	08003139 	.word	0x08003139
  {
    case CAMERA_R160x120:
      size = ((uint32_t)(160 * 120) * pf_div) / 4U;
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80030fe:	fb02 f303 	mul.w	r3, r2, r3
 8003102:	089b      	lsrs	r3, r3, #2
 8003104:	60fb      	str	r3, [r7, #12]
      break;
 8003106:	e01f      	b.n	8003148 <GetSize+0x90>
    case CAMERA_R320x240:
      size = ((uint32_t)(320 * 240) * pf_div) / 4U;
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	f44f 3296 	mov.w	r2, #76800	; 0x12c00
 800310e:	fb02 f303 	mul.w	r3, r2, r3
 8003112:	089b      	lsrs	r3, r3, #2
 8003114:	60fb      	str	r3, [r7, #12]
      break;
 8003116:	e017      	b.n	8003148 <GetSize+0x90>
    case CAMERA_R480x272:
      size = ((uint32_t)(480 * 272) * pf_div) / 4U;
 8003118:	68ba      	ldr	r2, [r7, #8]
 800311a:	4613      	mov	r3, r2
 800311c:	021b      	lsls	r3, r3, #8
 800311e:	1a9b      	subs	r3, r3, r2
 8003120:	025b      	lsls	r3, r3, #9
 8003122:	089b      	lsrs	r3, r3, #2
 8003124:	60fb      	str	r3, [r7, #12]
      break;
 8003126:	e00f      	b.n	8003148 <GetSize+0x90>
    case CAMERA_R640x480:
      size = ((uint32_t)(640 * 480) * pf_div) / 4U;
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
 800312e:	fb02 f303 	mul.w	r3, r2, r3
 8003132:	089b      	lsrs	r3, r3, #2
 8003134:	60fb      	str	r3, [r7, #12]
      break;
 8003136:	e007      	b.n	8003148 <GetSize+0x90>
    case CAMERA_R800x480:
      size = ((uint32_t)(800 * 480) * pf_div) / 4U;
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	4a07      	ldr	r2, [pc, #28]	; (8003158 <GetSize+0xa0>)
 800313c:	fb02 f303 	mul.w	r3, r2, r3
 8003140:	089b      	lsrs	r3, r3, #2
 8003142:	60fb      	str	r3, [r7, #12]
      break;
 8003144:	e000      	b.n	8003148 <GetSize+0x90>
    default:
      break;
 8003146:	bf00      	nop
  }

  return (int32_t)size;
 8003148:	68fb      	ldr	r3, [r7, #12]
}
 800314a:	4618      	mov	r0, r3
 800314c:	3714      	adds	r7, #20
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	0005dc00 	.word	0x0005dc00

0800315c <DCMI_MspInit>:
  * @brief  Initializes the DCMI MSP.
  * @param  hdcmi  DCMI handle
  * @retval None
  */
static void DCMI_MspInit(DCMI_HandleTypeDef *hdcmi)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b0aa      	sub	sp, #168	; 0xa8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef gpio_init_structure;
  DMA_NodeConfTypeDef node_config;

  /*** Enable peripherals and GPIO clocks ***/
  /* Enable DCMI clock */
  __HAL_RCC_DCMI_PSSI_CLK_ENABLE();
 8003164:	4b9c      	ldr	r3, [pc, #624]	; (80033d8 <DCMI_MspInit+0x27c>)
 8003166:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800316a:	4a9b      	ldr	r2, [pc, #620]	; (80033d8 <DCMI_MspInit+0x27c>)
 800316c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003170:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003174:	4b98      	ldr	r3, [pc, #608]	; (80033d8 <DCMI_MspInit+0x27c>)
 8003176:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800317a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800317e:	627b      	str	r3, [r7, #36]	; 0x24
 8003180:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPDMA1 clock */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8003182:	4b95      	ldr	r3, [pc, #596]	; (80033d8 <DCMI_MspInit+0x27c>)
 8003184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003188:	4a93      	ldr	r2, [pc, #588]	; (80033d8 <DCMI_MspInit+0x27c>)
 800318a:	f043 0301 	orr.w	r3, r3, #1
 800318e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8003192:	4b91      	ldr	r3, [pc, #580]	; (80033d8 <DCMI_MspInit+0x27c>)
 8003194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	623b      	str	r3, [r7, #32]
 800319e:	6a3b      	ldr	r3, [r7, #32]

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031a0:	4b8d      	ldr	r3, [pc, #564]	; (80033d8 <DCMI_MspInit+0x27c>)
 80031a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031a6:	4a8c      	ldr	r2, [pc, #560]	; (80033d8 <DCMI_MspInit+0x27c>)
 80031a8:	f043 0301 	orr.w	r3, r3, #1
 80031ac:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80031b0:	4b89      	ldr	r3, [pc, #548]	; (80033d8 <DCMI_MspInit+0x27c>)
 80031b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	61fb      	str	r3, [r7, #28]
 80031bc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031be:	4b86      	ldr	r3, [pc, #536]	; (80033d8 <DCMI_MspInit+0x27c>)
 80031c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031c4:	4a84      	ldr	r2, [pc, #528]	; (80033d8 <DCMI_MspInit+0x27c>)
 80031c6:	f043 0302 	orr.w	r3, r3, #2
 80031ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80031ce:	4b82      	ldr	r3, [pc, #520]	; (80033d8 <DCMI_MspInit+0x27c>)
 80031d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	61bb      	str	r3, [r7, #24]
 80031da:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031dc:	4b7e      	ldr	r3, [pc, #504]	; (80033d8 <DCMI_MspInit+0x27c>)
 80031de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031e2:	4a7d      	ldr	r2, [pc, #500]	; (80033d8 <DCMI_MspInit+0x27c>)
 80031e4:	f043 0304 	orr.w	r3, r3, #4
 80031e8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80031ec:	4b7a      	ldr	r3, [pc, #488]	; (80033d8 <DCMI_MspInit+0x27c>)
 80031ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031f2:	f003 0304 	and.w	r3, r3, #4
 80031f6:	617b      	str	r3, [r7, #20]
 80031f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80031fa:	4b77      	ldr	r3, [pc, #476]	; (80033d8 <DCMI_MspInit+0x27c>)
 80031fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003200:	4a75      	ldr	r2, [pc, #468]	; (80033d8 <DCMI_MspInit+0x27c>)
 8003202:	f043 0310 	orr.w	r3, r3, #16
 8003206:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800320a:	4b73      	ldr	r3, [pc, #460]	; (80033d8 <DCMI_MspInit+0x27c>)
 800320c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003210:	f003 0310 	and.w	r3, r3, #16
 8003214:	613b      	str	r3, [r7, #16]
 8003216:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003218:	4b6f      	ldr	r3, [pc, #444]	; (80033d8 <DCMI_MspInit+0x27c>)
 800321a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800321e:	4a6e      	ldr	r2, [pc, #440]	; (80033d8 <DCMI_MspInit+0x27c>)
 8003220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003224:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003228:	4b6b      	ldr	r3, [pc, #428]	; (80033d8 <DCMI_MspInit+0x27c>)
 800322a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800322e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003236:	4b68      	ldr	r3, [pc, #416]	; (80033d8 <DCMI_MspInit+0x27c>)
 8003238:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800323c:	4a66      	ldr	r2, [pc, #408]	; (80033d8 <DCMI_MspInit+0x27c>)
 800323e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003242:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003246:	4b64      	ldr	r3, [pc, #400]	; (80033d8 <DCMI_MspInit+0x27c>)
 8003248:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800324c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003250:	60bb      	str	r3, [r7, #8]
 8003252:	68bb      	ldr	r3, [r7, #8]

  /* Configure DCMI GPIO as alternate function */
  /* DCMI PIXCLK pin */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003254:	2302      	movs	r3, #2
 8003256:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800325a:	2300      	movs	r3, #0
 800325c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003260:	2303      	movs	r3, #3
 8003262:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  gpio_init_structure.Pin       = GPIO_PIN_6;
 8003266:	2340      	movs	r3, #64	; 0x40
 8003268:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  gpio_init_structure.Alternate = GPIO_AF4_DCMI;
 800326c:	2304      	movs	r3, #4
 800326e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 8003272:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003276:	4619      	mov	r1, r3
 8003278:	4858      	ldr	r0, [pc, #352]	; (80033dc <DCMI_MspInit+0x280>)
 800327a:	f010 fc1f 	bl	8013abc <HAL_GPIO_Init>

  /* DCMI HSYNC, D4 pins */
  gpio_init_structure.Pin       = GPIO_PIN_8 | GPIO_PIN_14;
 800327e:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8003282:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  gpio_init_structure.Alternate = GPIO_AF10_DCMI;
 8003286:	230a      	movs	r3, #10
 8003288:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800328c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003290:	4619      	mov	r1, r3
 8003292:	4853      	ldr	r0, [pc, #332]	; (80033e0 <DCMI_MspInit+0x284>)
 8003294:	f010 fc12 	bl	8013abc <HAL_GPIO_Init>

  /* DCMI D5, D6, D7 pins */
  gpio_init_structure.Pin       = GPIO_PIN_6 | GPIO_PIN_4 | GPIO_PIN_7;
 8003298:	23d0      	movs	r3, #208	; 0xd0
 800329a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800329e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80032a2:	4619      	mov	r1, r3
 80032a4:	484f      	ldr	r0, [pc, #316]	; (80033e4 <DCMI_MspInit+0x288>)
 80032a6:	f010 fc09 	bl	8013abc <HAL_GPIO_Init>

  /* DCMI D0, D1, D2 pins */
  gpio_init_structure.Pin       = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8;
 80032aa:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80032ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80032b2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80032b6:	4619      	mov	r1, r3
 80032b8:	484b      	ldr	r0, [pc, #300]	; (80033e8 <DCMI_MspInit+0x28c>)
 80032ba:	f010 fbff 	bl	8013abc <HAL_GPIO_Init>

  /* DCMI D3 pin */
  gpio_init_structure.Pin       = GPIO_PIN_1;
 80032be:	2302      	movs	r3, #2
 80032c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80032c4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80032c8:	4619      	mov	r1, r3
 80032ca:	4848      	ldr	r0, [pc, #288]	; (80033ec <DCMI_MspInit+0x290>)
 80032cc:	f010 fbf6 	bl	8013abc <HAL_GPIO_Init>

  /* DCMI VSYNC pin */
  gpio_init_structure.Pin       = GPIO_PIN_7;
 80032d0:	2380      	movs	r3, #128	; 0x80
 80032d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HAL_GPIO_Init(GPIOB, &gpio_init_structure);
 80032d6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80032da:	4619      	mov	r1, r3
 80032dc:	4844      	ldr	r0, [pc, #272]	; (80033f0 <DCMI_MspInit+0x294>)
 80032de:	f010 fbed 	bl	8013abc <HAL_GPIO_Init>

  /*** Configure the DMA ***/
  /* Set node type */
  node_config.NodeType                            = DMA_GPDMA_2D_NODE;
 80032e2:	2322      	movs	r3, #34	; 0x22
 80032e4:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Set common node parameters */
  node_config.Init.Request                        = GPDMA1_REQUEST_DCMI;
 80032e6:	2356      	movs	r3, #86	; 0x56
 80032e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  node_config.Init.BlkHWRequest                   = DMA_BREQ_SINGLE_BURST;
 80032ea:	2300      	movs	r3, #0
 80032ec:	633b      	str	r3, [r7, #48]	; 0x30
  node_config.Init.Direction                      = DMA_PERIPH_TO_MEMORY;
 80032ee:	2300      	movs	r3, #0
 80032f0:	637b      	str	r3, [r7, #52]	; 0x34
  node_config.Init.SrcInc                         = DMA_SINC_FIXED;
 80032f2:	2300      	movs	r3, #0
 80032f4:	63bb      	str	r3, [r7, #56]	; 0x38
  node_config.Init.DestInc                        = DMA_DINC_INCREMENTED;
 80032f6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80032fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  node_config.Init.SrcDataWidth                   = DMA_SRC_DATAWIDTH_WORD;
 80032fc:	2302      	movs	r3, #2
 80032fe:	643b      	str	r3, [r7, #64]	; 0x40
  node_config.Init.DestDataWidth                  = DMA_DEST_DATAWIDTH_WORD;
 8003300:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003304:	647b      	str	r3, [r7, #68]	; 0x44
  node_config.Init.SrcBurstLength                 = 1;
 8003306:	2301      	movs	r3, #1
 8003308:	64fb      	str	r3, [r7, #76]	; 0x4c
  node_config.Init.DestBurstLength                = 1;
 800330a:	2301      	movs	r3, #1
 800330c:	653b      	str	r3, [r7, #80]	; 0x50
  node_config.Init.TransferAllocatedPort          = DMA_SRC_ALLOCATED_PORT0 | DMA_DEST_ALLOCATED_PORT1;
 800330e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003312:	657b      	str	r3, [r7, #84]	; 0x54
  node_config.Init.TransferEventMode              = DMA_TCEM_EACH_LL_ITEM_TRANSFER;
 8003314:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003318:	65bb      	str	r3, [r7, #88]	; 0x58
  /* Set node data handling parameters */
  node_config.DataHandlingConfig.DataExchange     = DMA_EXCHANGE_NONE;
 800331a:	2300      	movs	r3, #0
 800331c:	663b      	str	r3, [r7, #96]	; 0x60
  node_config.DataHandlingConfig.DataAlignment    = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 800331e:	2300      	movs	r3, #0
 8003320:	667b      	str	r3, [r7, #100]	; 0x64
  /* Set node trigger parameters */
  node_config.TriggerConfig.TriggerPolarity       = DMA_TRIG_POLARITY_MASKED;
 8003322:	2300      	movs	r3, #0
 8003324:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* Set node repeated block parameters */
  node_config.RepeatBlockConfig.RepeatCount       = 1U;
 8003326:	2301      	movs	r3, #1
 8003328:	677b      	str	r3, [r7, #116]	; 0x74
  node_config.RepeatBlockConfig.SrcAddrOffset     = 0;
 800332a:	2300      	movs	r3, #0
 800332c:	67bb      	str	r3, [r7, #120]	; 0x78
  node_config.RepeatBlockConfig.DestAddrOffset    = 0;
 800332e:	2300      	movs	r3, #0
 8003330:	67fb      	str	r3, [r7, #124]	; 0x7c
  node_config.RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 8003332:	2300      	movs	r3, #0
 8003334:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  node_config.RepeatBlockConfig.BlkDestAddrOffset = 0;
 8003338:	2300      	movs	r3, #0
 800333a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  node_config.SrcSecure                           = DMA_CHANNEL_SRC_SEC;
  node_config.DestSecure                          = DMA_CHANNEL_DEST_SEC;
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build DCMINode1 */
  (void)HAL_DMAEx_List_BuildNode(&node_config, &DCMINode1);
 800333e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003342:	492c      	ldr	r1, [pc, #176]	; (80033f4 <DCMI_MspInit+0x298>)
 8003344:	4618      	mov	r0, r3
 8003346:	f00f fc69 	bl	8012c1c <HAL_DMAEx_List_BuildNode>

  /* Insert DCMINode1 to DCMI queue */
  (void)HAL_DMAEx_List_InsertNode_Tail(&DCMIQueue, &DCMINode1);
 800334a:	492a      	ldr	r1, [pc, #168]	; (80033f4 <DCMI_MspInit+0x298>)
 800334c:	482a      	ldr	r0, [pc, #168]	; (80033f8 <DCMI_MspInit+0x29c>)
 800334e:	f00f fd44 	bl	8012dda <HAL_DMAEx_List_InsertNode_Tail>

  /* Build DCMINode2 */
  (void)HAL_DMAEx_List_BuildNode(&node_config, &DCMINode2);
 8003352:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003356:	4929      	ldr	r1, [pc, #164]	; (80033fc <DCMI_MspInit+0x2a0>)
 8003358:	4618      	mov	r0, r3
 800335a:	f00f fc5f 	bl	8012c1c <HAL_DMAEx_List_BuildNode>

  /* Insert DCMINode2 to DCMI queue */
  (void)HAL_DMAEx_List_InsertNode_Tail(&DCMIQueue, &DCMINode2);
 800335e:	4927      	ldr	r1, [pc, #156]	; (80033fc <DCMI_MspInit+0x2a0>)
 8003360:	4825      	ldr	r0, [pc, #148]	; (80033f8 <DCMI_MspInit+0x29c>)
 8003362:	f00f fd3a 	bl	8012dda <HAL_DMAEx_List_InsertNode_Tail>

  /* Set queue circular mode for DCMI queue */
  (void)HAL_DMAEx_List_SetCircularMode(&DCMIQueue);
 8003366:	4824      	ldr	r0, [pc, #144]	; (80033f8 <DCMI_MspInit+0x29c>)
 8003368:	f00f fdf9 	bl	8012f5e <HAL_DMAEx_List_SetCircularMode>

  /*** Configure the DMA channel ***/
  hdma_handler.Instance                         = GPDMA1_Channel12;
 800336c:	4b24      	ldr	r3, [pc, #144]	; (8003400 <DCMI_MspInit+0x2a4>)
 800336e:	4a25      	ldr	r2, [pc, #148]	; (8003404 <DCMI_MspInit+0x2a8>)
 8003370:	601a      	str	r2, [r3, #0]
  hdma_handler.InitLinkedList.Priority          = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8003372:	4b23      	ldr	r3, [pc, #140]	; (8003400 <DCMI_MspInit+0x2a4>)
 8003374:	2200      	movs	r2, #0
 8003376:	639a      	str	r2, [r3, #56]	; 0x38
  hdma_handler.InitLinkedList.LinkStepMode      = DMA_LSM_FULL_EXECUTION;
 8003378:	4b21      	ldr	r3, [pc, #132]	; (8003400 <DCMI_MspInit+0x2a4>)
 800337a:	2200      	movs	r2, #0
 800337c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma_handler.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT1;
 800337e:	4b20      	ldr	r3, [pc, #128]	; (8003400 <DCMI_MspInit+0x2a4>)
 8003380:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003384:	641a      	str	r2, [r3, #64]	; 0x40
  hdma_handler.InitLinkedList.LinkedListMode    = DMA_LINKEDLIST_CIRCULAR;
 8003386:	4b1e      	ldr	r3, [pc, #120]	; (8003400 <DCMI_MspInit+0x2a4>)
 8003388:	2281      	movs	r2, #129	; 0x81
 800338a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma_handler.InitLinkedList.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 800338c:	4b1c      	ldr	r3, [pc, #112]	; (8003400 <DCMI_MspInit+0x2a4>)
 800338e:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8003392:	645a      	str	r2, [r3, #68]	; 0x44

  /* DMA linked list init */
  (void)HAL_DMAEx_List_Init(&hdma_handler);
 8003394:	481a      	ldr	r0, [pc, #104]	; (8003400 <DCMI_MspInit+0x2a4>)
 8003396:	f00f f99b 	bl	80126d0 <HAL_DMAEx_List_Init>

  /* Link DCMI queue to DMA channel */
  (void)HAL_DMAEx_List_LinkQ(&hdma_handler, &DCMIQueue);
 800339a:	4917      	ldr	r1, [pc, #92]	; (80033f8 <DCMI_MspInit+0x29c>)
 800339c:	4818      	ldr	r0, [pc, #96]	; (8003400 <DCMI_MspInit+0x2a4>)
 800339e:	f00f fe3f 	bl	8013020 <HAL_DMAEx_List_LinkQ>

  /* Associate the initialized DMA handle to the DCMI handle */
  __HAL_LINKDMA(hdcmi, DMA_Handle, hdma_handler);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a16      	ldr	r2, [pc, #88]	; (8003400 <DCMI_MspInit+0x2a4>)
 80033a6:	649a      	str	r2, [r3, #72]	; 0x48
 80033a8:	4a15      	ldr	r2, [pc, #84]	; (8003400 <DCMI_MspInit+0x2a4>)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	65d3      	str	r3, [r2, #92]	; 0x5c

  /*** Configure the NVIC for DCMI and DMA ***/
  /* NVIC configuration for DCMI transfer complete interrupt */
  HAL_NVIC_SetPriority(DCMI_PSSI_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 80033ae:	2200      	movs	r2, #0
 80033b0:	210e      	movs	r1, #14
 80033b2:	2077      	movs	r0, #119	; 0x77
 80033b4:	f00e fac5 	bl	8011942 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DCMI_PSSI_IRQn);
 80033b8:	2077      	movs	r0, #119	; 0x77
 80033ba:	f00e fadc 	bl	8011976 <HAL_NVIC_EnableIRQ>

  /* NVIC configuration for GPDMA1 transfer complete interrupt */
  HAL_NVIC_SetPriority(GPDMA1_Channel12_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 80033be:	2200      	movs	r2, #0
 80033c0:	210e      	movs	r1, #14
 80033c2:	2054      	movs	r0, #84	; 0x54
 80033c4:	f00e fabd 	bl	8011942 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(GPDMA1_Channel12_IRQn);
 80033c8:	2054      	movs	r0, #84	; 0x54
 80033ca:	f00e fad4 	bl	8011976 <HAL_NVIC_EnableIRQ>
}
 80033ce:	bf00      	nop
 80033d0:	37a8      	adds	r7, #168	; 0xa8
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	46020c00 	.word	0x46020c00
 80033dc:	42020000 	.word	0x42020000
 80033e0:	42021c00 	.word	0x42021c00
 80033e4:	42022000 	.word	0x42022000
 80033e8:	42020800 	.word	0x42020800
 80033ec:	42021000 	.word	0x42021000
 80033f0:	42020400 	.word	0x42020400
 80033f4:	20001664 	.word	0x20001664
 80033f8:	2000164c 	.word	0x2000164c
 80033fc:	20001688 	.word	0x20001688
 8003400:	200015d4 	.word	0x200015d4
 8003404:	40020650 	.word	0x40020650

08003408 <DCMI_MspDeInit>:
  * @brief  DeInitializes the DCMI MSP.
  * @param  hdcmi  DCMI handle
  * @retval None
  */
static void DCMI_MspDeInit(const DCMI_HandleTypeDef *hdcmi)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b088      	sub	sp, #32
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef gpio_init_structure;

  UNUSED(hdcmi);

  /* Disable NVIC  for DCMI transfer complete interrupt */
  HAL_NVIC_DisableIRQ(DCMI_PSSI_IRQn);
 8003410:	2077      	movs	r0, #119	; 0x77
 8003412:	f00e fabe 	bl	8011992 <HAL_NVIC_DisableIRQ>

  /* Disable NVIC for GPDMA1 transfer complete interrupt */
  HAL_NVIC_DisableIRQ(GPDMA1_Channel12_IRQn);
 8003416:	2054      	movs	r0, #84	; 0x54
 8003418:	f00e fabb 	bl	8011992 <HAL_NVIC_DisableIRQ>

  /* DMA linked list De-init */
  (void)HAL_DMAEx_List_DeInit(&hdma_handler);
 800341c:	481c      	ldr	r0, [pc, #112]	; (8003490 <DCMI_MspDeInit+0x88>)
 800341e:	f00f fa83 	bl	8012928 <HAL_DMAEx_List_DeInit>

  /* Reset the DCMI queue */
  (void)HAL_DMAEx_List_ResetQ(&DCMIQueue);
 8003422:	481c      	ldr	r0, [pc, #112]	; (8003494 <DCMI_MspDeInit+0x8c>)
 8003424:	f00f fd51 	bl	8012eca <HAL_DMAEx_List_ResetQ>

  /* DeInit DCMI GPIOs */
  gpio_init_structure.Alternate = GPIO_AF4_DCMI;
 8003428:	2304      	movs	r3, #4
 800342a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Pin       = GPIO_PIN_8 | GPIO_PIN_14;
 800342c:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8003430:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(GPIOH, gpio_init_structure.Pin);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	4619      	mov	r1, r3
 8003436:	4818      	ldr	r0, [pc, #96]	; (8003498 <DCMI_MspDeInit+0x90>)
 8003438:	f010 fd18 	bl	8013e6c <HAL_GPIO_DeInit>

  gpio_init_structure.Pin       = GPIO_PIN_6 | GPIO_PIN_4 | GPIO_PIN_7;
 800343c:	23d0      	movs	r3, #208	; 0xd0
 800343e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(GPIOI, gpio_init_structure.Pin);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	4619      	mov	r1, r3
 8003444:	4815      	ldr	r0, [pc, #84]	; (800349c <DCMI_MspDeInit+0x94>)
 8003446:	f010 fd11 	bl	8013e6c <HAL_GPIO_DeInit>

  gpio_init_structure.Pin       = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8;
 800344a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800344e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(GPIOC, gpio_init_structure.Pin);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	4619      	mov	r1, r3
 8003454:	4812      	ldr	r0, [pc, #72]	; (80034a0 <DCMI_MspDeInit+0x98>)
 8003456:	f010 fd09 	bl	8013e6c <HAL_GPIO_DeInit>

  gpio_init_structure.Pin       = GPIO_PIN_1;
 800345a:	2302      	movs	r3, #2
 800345c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(GPIOE, gpio_init_structure.Pin);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	4619      	mov	r1, r3
 8003462:	4810      	ldr	r0, [pc, #64]	; (80034a4 <DCMI_MspDeInit+0x9c>)
 8003464:	f010 fd02 	bl	8013e6c <HAL_GPIO_DeInit>

  gpio_init_structure.Pin       = GPIO_PIN_7;
 8003468:	2380      	movs	r3, #128	; 0x80
 800346a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(GPIOB, gpio_init_structure.Pin);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	4619      	mov	r1, r3
 8003470:	480d      	ldr	r0, [pc, #52]	; (80034a8 <DCMI_MspDeInit+0xa0>)
 8003472:	f010 fcfb 	bl	8013e6c <HAL_GPIO_DeInit>

  /* Disable DCMI clock */
  __HAL_RCC_DCMI_PSSI_CLK_DISABLE();
 8003476:	4b0d      	ldr	r3, [pc, #52]	; (80034ac <DCMI_MspDeInit+0xa4>)
 8003478:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800347c:	4a0b      	ldr	r2, [pc, #44]	; (80034ac <DCMI_MspDeInit+0xa4>)
 800347e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003482:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 8003486:	bf00      	nop
 8003488:	3720      	adds	r7, #32
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	200015d4 	.word	0x200015d4
 8003494:	2000164c 	.word	0x2000164c
 8003498:	42021c00 	.word	0x42021c00
 800349c:	42022000 	.word	0x42022000
 80034a0:	42020800 	.word	0x42020800
 80034a4:	42021000 	.word	0x42021000
 80034a8:	42020400 	.word	0x42020400
 80034ac:	46020c00 	.word	0x46020c00

080034b0 <OV5640_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
static int32_t OV5640_Probe(uint32_t Resolution, uint32_t PixelFormat)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b08a      	sub	sp, #40	; 0x28
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  OV5640_IO_t              IOCtx;
  uint32_t                 id;
  static OV5640_Object_t   OV5640Obj;

  /* Configure the camera driver */
  IOCtx.Address     = CAMERA_OV5640_ADDRESS;
 80034ba:	2378      	movs	r3, #120	; 0x78
 80034bc:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C1_Init;
 80034be:	4b33      	ldr	r3, [pc, #204]	; (800358c <OV5640_Probe+0xdc>)
 80034c0:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C1_DeInit;
 80034c2:	4b33      	ldr	r3, [pc, #204]	; (8003590 <OV5640_Probe+0xe0>)
 80034c4:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C1_ReadReg16;
 80034c6:	4b33      	ldr	r3, [pc, #204]	; (8003594 <OV5640_Probe+0xe4>)
 80034c8:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C1_WriteReg16;
 80034ca:	4b33      	ldr	r3, [pc, #204]	; (8003598 <OV5640_Probe+0xe8>)
 80034cc:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 80034ce:	4b33      	ldr	r3, [pc, #204]	; (800359c <OV5640_Probe+0xec>)
 80034d0:	623b      	str	r3, [r7, #32]

  if (OV5640_RegisterBusIO(&OV5640Obj, &IOCtx) != OV5640_OK)
 80034d2:	f107 030c 	add.w	r3, r7, #12
 80034d6:	4619      	mov	r1, r3
 80034d8:	4831      	ldr	r0, [pc, #196]	; (80035a0 <OV5640_Probe+0xf0>)
 80034da:	f009 f815 	bl	800c508 <OV5640_RegisterBusIO>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d003      	beq.n	80034ec <OV5640_Probe+0x3c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80034e4:	f06f 0304 	mvn.w	r3, #4
 80034e8:	627b      	str	r3, [r7, #36]	; 0x24
 80034ea:	e04a      	b.n	8003582 <OV5640_Probe+0xd2>
  }
  else if (OV5640_ReadID(&OV5640Obj, &id) != OV5640_OK)
 80034ec:	f107 0308 	add.w	r3, r7, #8
 80034f0:	4619      	mov	r1, r3
 80034f2:	482b      	ldr	r0, [pc, #172]	; (80035a0 <OV5640_Probe+0xf0>)
 80034f4:	f009 fc5c 	bl	800cdb0 <OV5640_ReadID>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <OV5640_Probe+0x56>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80034fe:	f06f 0304 	mvn.w	r3, #4
 8003502:	627b      	str	r3, [r7, #36]	; 0x24
 8003504:	e03d      	b.n	8003582 <OV5640_Probe+0xd2>
  }
  else
  {
    if (id != OV5640_ID)
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	f245 6240 	movw	r2, #22080	; 0x5640
 800350c:	4293      	cmp	r3, r2
 800350e:	d003      	beq.n	8003518 <OV5640_Probe+0x68>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003510:	f06f 0306 	mvn.w	r3, #6
 8003514:	627b      	str	r3, [r7, #36]	; 0x24
 8003516:	e034      	b.n	8003582 <OV5640_Probe+0xd2>
    }
    else
    {
      Camera_Drv = (CAMERA_Drv_t *) &OV5640_CAMERA_Driver;
 8003518:	4b22      	ldr	r3, [pc, #136]	; (80035a4 <OV5640_Probe+0xf4>)
 800351a:	4a23      	ldr	r2, [pc, #140]	; (80035a8 <OV5640_Probe+0xf8>)
 800351c:	601a      	str	r2, [r3, #0]
      Camera_CompObj = &OV5640Obj;
 800351e:	4b23      	ldr	r3, [pc, #140]	; (80035ac <OV5640_Probe+0xfc>)
 8003520:	4a1f      	ldr	r2, [pc, #124]	; (80035a0 <OV5640_Probe+0xf0>)
 8003522:	601a      	str	r2, [r3, #0]
      if (Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 8003524:	4b1f      	ldr	r3, [pc, #124]	; (80035a4 <OV5640_Probe+0xf4>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a20      	ldr	r2, [pc, #128]	; (80035ac <OV5640_Probe+0xfc>)
 800352c:	6810      	ldr	r0, [r2, #0]
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	6879      	ldr	r1, [r7, #4]
 8003532:	4798      	blx	r3
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <OV5640_Probe+0x92>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800353a:	f06f 0304 	mvn.w	r3, #4
 800353e:	627b      	str	r3, [r7, #36]	; 0x24
 8003540:	e01f      	b.n	8003582 <OV5640_Probe+0xd2>
      }
      else if (Camera_Drv->GetCapabilities(Camera_CompObj, &Camera_Cap) != OV5640_OK)
 8003542:	4b18      	ldr	r3, [pc, #96]	; (80035a4 <OV5640_Probe+0xf4>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	4a18      	ldr	r2, [pc, #96]	; (80035ac <OV5640_Probe+0xfc>)
 800354a:	6812      	ldr	r2, [r2, #0]
 800354c:	4918      	ldr	r1, [pc, #96]	; (80035b0 <OV5640_Probe+0x100>)
 800354e:	4610      	mov	r0, r2
 8003550:	4798      	blx	r3
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d003      	beq.n	8003560 <OV5640_Probe+0xb0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003558:	f06f 0304 	mvn.w	r3, #4
 800355c:	627b      	str	r3, [r7, #36]	; 0x24
 800355e:	e010      	b.n	8003582 <OV5640_Probe+0xd2>
      }
      else if (Camera_Drv->MirrorFlipConfig(Camera_CompObj, OV5640_MIRROR_FLIP_NONE) != OV5640_OK)
 8003560:	4b10      	ldr	r3, [pc, #64]	; (80035a4 <OV5640_Probe+0xf4>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003566:	4a11      	ldr	r2, [pc, #68]	; (80035ac <OV5640_Probe+0xfc>)
 8003568:	6812      	ldr	r2, [r2, #0]
 800356a:	2100      	movs	r1, #0
 800356c:	4610      	mov	r0, r2
 800356e:	4798      	blx	r3
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d003      	beq.n	800357e <OV5640_Probe+0xce>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003576:	f06f 0304 	mvn.w	r3, #4
 800357a:	627b      	str	r3, [r7, #36]	; 0x24
 800357c:	e001      	b.n	8003582 <OV5640_Probe+0xd2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800357e:	2300      	movs	r3, #0
 8003580:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ret;
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003584:	4618      	mov	r0, r3
 8003586:	3728      	adds	r7, #40	; 0x28
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	08001f41 	.word	0x08001f41
 8003590:	08001fb5 	.word	0x08001fb5
 8003594:	080020dd 	.word	0x080020dd
 8003598:	08002081 	.word	0x08002081
 800359c:	08002421 	.word	0x08002421
 80035a0:	200016ac 	.word	0x200016ac
 80035a4:	200015a8 	.word	0x200015a8
 80035a8:	20000144 	.word	0x20000144
 80035ac:	20001524 	.word	0x20001524
 80035b0:	200015ac 	.word	0x200015ac

080035b4 <BSP_EEPROM_Init>:
  * @brief  Initialize the I2C EEPROM.
  * @param  Instance EEPROM instance. Could only be 0.
  * @retval EEPROM state
  */
int32_t BSP_EEPROM_Init(uint32_t Instance)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80035bc:	2300      	movs	r3, #0
 80035be:	60fb      	str	r3, [r7, #12]

  if (Instance >= EEPROM_INSTANCES_NBR)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <BSP_EEPROM_Init+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80035c6:	f06f 0301 	mvn.w	r3, #1
 80035ca:	60fb      	str	r3, [r7, #12]
 80035cc:	e007      	b.n	80035de <BSP_EEPROM_Init+0x2a>
  }
  else
  {
    if (M24256_Probe() != BSP_ERROR_NONE)
 80035ce:	f000 f9eb 	bl	80039a8 <M24256_Probe>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d002      	beq.n	80035de <BSP_EEPROM_Init+0x2a>
    {
      ret = BSP_ERROR_NO_INIT;
 80035d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035dc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return BSP status */
  return ret;
 80035de:	68fb      	ldr	r3, [r7, #12]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <BSP_EEPROM_WritePage>:
  *         on the EEPROM.
  * @param  PageNbr EEPROM's internal page number to write to.
  * @retval BSP status
  */
int32_t BSP_EEPROM_WritePage(const uint32_t Instance, uint8_t *pBuffer, uint32_t PageNbr)
{
 80035e8:	b590      	push	{r4, r7, lr}
 80035ea:	b087      	sub	sp, #28
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80035f4:	2300      	movs	r3, #0
 80035f6:	617b      	str	r3, [r7, #20]
  uint16_t WriteAddr = (uint16_t)PageNbr * EEPROM_PAGESIZE;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	019b      	lsls	r3, r3, #6
 80035fe:	827b      	strh	r3, [r7, #18]

  if ((Instance >= EEPROM_INSTANCES_NBR) && (WriteAddr > EEPROM_MAX_SIZE))
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d007      	beq.n	8003616 <BSP_EEPROM_WritePage+0x2e>
 8003606:	8a7b      	ldrh	r3, [r7, #18]
 8003608:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800360c:	d903      	bls.n	8003616 <BSP_EEPROM_WritePage+0x2e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800360e:	f06f 0301 	mvn.w	r3, #1
 8003612:	617b      	str	r3, [r7, #20]
 8003614:	e018      	b.n	8003648 <BSP_EEPROM_WritePage+0x60>
  }
  else if (Eeprom_Drv->Write(Eeprom_CompObj, WriteAddr, pBuffer, EEPROM_PAGESIZE) != BSP_ERROR_NONE)
 8003616:	4b0f      	ldr	r3, [pc, #60]	; (8003654 <BSP_EEPROM_WritePage+0x6c>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689c      	ldr	r4, [r3, #8]
 800361c:	4b0e      	ldr	r3, [pc, #56]	; (8003658 <BSP_EEPROM_WritePage+0x70>)
 800361e:	6818      	ldr	r0, [r3, #0]
 8003620:	8a79      	ldrh	r1, [r7, #18]
 8003622:	2340      	movs	r3, #64	; 0x40
 8003624:	68ba      	ldr	r2, [r7, #8]
 8003626:	47a0      	blx	r4
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <BSP_EEPROM_WritePage+0x4e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800362e:	f06f 0304 	mvn.w	r3, #4
 8003632:	617b      	str	r3, [r7, #20]
 8003634:	e008      	b.n	8003648 <BSP_EEPROM_WritePage+0x60>
  }
  else
  {
    if (BSP_EEPROM_IsDeviceReady(Instance) != BSP_ERROR_NONE)
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f000 f962 	bl	8003900 <BSP_EEPROM_IsDeviceReady>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d002      	beq.n	8003648 <BSP_EEPROM_WritePage+0x60>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8003642:	f06f 0304 	mvn.w	r3, #4
 8003646:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return BSP status */
  return ret;
 8003648:	697b      	ldr	r3, [r7, #20]
}
 800364a:	4618      	mov	r0, r3
 800364c:	371c      	adds	r7, #28
 800364e:	46bd      	mov	sp, r7
 8003650:	bd90      	pop	{r4, r7, pc}
 8003652:	bf00      	nop
 8003654:	200016d8 	.word	0x200016d8
 8003658:	200016d4 	.word	0x200016d4

0800365c <BSP_EEPROM_ReadPage>:
  *         to the EEPROM.
  * @param  PageNbr EEPROM's internal page number to read from.
  * @retval BSP status
  */
int32_t BSP_EEPROM_ReadPage(const uint32_t Instance, uint8_t *pBuffer, uint32_t PageNbr)
{
 800365c:	b590      	push	{r4, r7, lr}
 800365e:	b087      	sub	sp, #28
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003668:	2300      	movs	r3, #0
 800366a:	617b      	str	r3, [r7, #20]
  uint16_t ReadAddr = (uint16_t)PageNbr * EEPROM_PAGESIZE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	b29b      	uxth	r3, r3
 8003670:	019b      	lsls	r3, r3, #6
 8003672:	827b      	strh	r3, [r7, #18]

  if ((Instance >= EEPROM_INSTANCES_NBR) && (ReadAddr > EEPROM_MAX_SIZE))
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d007      	beq.n	800368a <BSP_EEPROM_ReadPage+0x2e>
 800367a:	8a7b      	ldrh	r3, [r7, #18]
 800367c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003680:	d903      	bls.n	800368a <BSP_EEPROM_ReadPage+0x2e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003682:	f06f 0301 	mvn.w	r3, #1
 8003686:	617b      	str	r3, [r7, #20]
 8003688:	e00e      	b.n	80036a8 <BSP_EEPROM_ReadPage+0x4c>
  }
  else
  {
    if (Eeprom_Drv->Read(Eeprom_CompObj, ReadAddr, pBuffer, EEPROM_PAGESIZE) < 0)
 800368a:	4b0a      	ldr	r3, [pc, #40]	; (80036b4 <BSP_EEPROM_ReadPage+0x58>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68dc      	ldr	r4, [r3, #12]
 8003690:	4b09      	ldr	r3, [pc, #36]	; (80036b8 <BSP_EEPROM_ReadPage+0x5c>)
 8003692:	6818      	ldr	r0, [r3, #0]
 8003694:	8a79      	ldrh	r1, [r7, #18]
 8003696:	2340      	movs	r3, #64	; 0x40
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	47a0      	blx	r4
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	da02      	bge.n	80036a8 <BSP_EEPROM_ReadPage+0x4c>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80036a2:	f06f 0304 	mvn.w	r3, #4
 80036a6:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return BSP status */
  return ret;
 80036a8:	697b      	ldr	r3, [r7, #20]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	371c      	adds	r7, #28
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd90      	pop	{r4, r7, pc}
 80036b2:	bf00      	nop
 80036b4:	200016d8 	.word	0x200016d8
 80036b8:	200016d4 	.word	0x200016d4

080036bc <BSP_EEPROM_ReadBuffer>:
  * @param  ReadAddr EEPROM's internal address to start reading from.
  * @param  NbrOfBytes  Number of bytes to be read from the EEPROM.
  * @retval BSP status
  */
int32_t BSP_EEPROM_ReadBuffer(const uint32_t Instance, uint8_t *pBuffer, uint32_t ReadAddr, uint32_t NbrOfBytes)
{
 80036bc:	b590      	push	{r4, r7, lr}
 80036be:	b087      	sub	sp, #28
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
 80036c8:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80036ca:	2300      	movs	r3, #0
 80036cc:	617b      	str	r3, [r7, #20]

  if (Instance >= EEPROM_INSTANCES_NBR)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d003      	beq.n	80036dc <BSP_EEPROM_ReadBuffer+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80036d4:	f06f 0301 	mvn.w	r3, #1
 80036d8:	617b      	str	r3, [r7, #20]
 80036da:	e010      	b.n	80036fe <BSP_EEPROM_ReadBuffer+0x42>
  }
  else
  {
    if (Eeprom_Drv->Read(Eeprom_CompObj, ReadAddr, pBuffer, NbrOfBytes) < 0)
 80036dc:	4b0a      	ldr	r3, [pc, #40]	; (8003708 <BSP_EEPROM_ReadBuffer+0x4c>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68dc      	ldr	r4, [r3, #12]
 80036e2:	4b0a      	ldr	r3, [pc, #40]	; (800370c <BSP_EEPROM_ReadBuffer+0x50>)
 80036e4:	6818      	ldr	r0, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	b299      	uxth	r1, r3
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	68ba      	ldr	r2, [r7, #8]
 80036f0:	47a0      	blx	r4
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	da02      	bge.n	80036fe <BSP_EEPROM_ReadBuffer+0x42>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80036f8:	f06f 0304 	mvn.w	r3, #4
 80036fc:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return BSP status */
  return ret;
 80036fe:	697b      	ldr	r3, [r7, #20]
}
 8003700:	4618      	mov	r0, r3
 8003702:	371c      	adds	r7, #28
 8003704:	46bd      	mov	sp, r7
 8003706:	bd90      	pop	{r4, r7, pc}
 8003708:	200016d8 	.word	0x200016d8
 800370c:	200016d4 	.word	0x200016d4

08003710 <BSP_EEPROM_WriteBuffer>:
  * @param  WriteAddr EEPROM's internal address to write to.
  * @param  NbrOfBytes  number of bytes to write to the EEPROM.
  * @retval BSP status
  */
int32_t BSP_EEPROM_WriteBuffer(const uint32_t Instance, uint8_t *pBuffer, uint32_t WriteAddr, uint32_t NbrOfBytes)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b08c      	sub	sp, #48	; 0x30
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
 800371c:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800371e:	2300      	movs	r3, #0
 8003720:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t *write_buffer;
  uint32_t write_addr;
  uint32_t nbr_of_bytes;
  uint32_t  i;

  if (Instance >= EEPROM_INSTANCES_NBR)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d003      	beq.n	8003730 <BSP_EEPROM_WriteBuffer+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003728:	f06f 0301 	mvn.w	r3, #1
 800372c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800372e:	e0e2      	b.n	80038f6 <BSP_EEPROM_WriteBuffer+0x1e6>
  }
  else
  {
    write_buffer = pBuffer;
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	62bb      	str	r3, [r7, #40]	; 0x28
    write_addr   = WriteAddr;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	627b      	str	r3, [r7, #36]	; 0x24
    nbr_of_bytes = NbrOfBytes;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	61fb      	str	r3, [r7, #28]
    count = EEPROM_PAGESIZE - (write_addr % EEPROM_PAGESIZE);
 800373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003742:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003746:	61bb      	str	r3, [r7, #24]
    numofpages =  nbr_of_bytes / EEPROM_PAGESIZE;
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	099b      	lsrs	r3, r3, #6
 800374c:	617b      	str	r3, [r7, #20]
    numofsingle = nbr_of_bytes % EEPROM_PAGESIZE;
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003754:	613b      	str	r3, [r7, #16]

    /* If WriteAddr is EEPROM_PAGESIZE aligned */
    if ((write_addr % EEPROM_PAGESIZE) == 0U)
 8003756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003758:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800375c:	2b00      	cmp	r3, #0
 800375e:	d141      	bne.n	80037e4 <BSP_EEPROM_WriteBuffer+0xd4>
    {
      /* If nbr_of_bytes < EEPROM_PAGESIZE */
      if (numofpages == 0U)
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10d      	bne.n	8003782 <BSP_EEPROM_WriteBuffer+0x72>
      {
        /* Start writing data */
        if (EEPROM_WriteBytes(Instance, write_buffer, write_addr, numofsingle) != BSP_ERROR_NONE)
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800376a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 f8ed 	bl	800394c <EEPROM_WriteBytes>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 80be 	beq.w	80038f6 <BSP_EEPROM_WriteBuffer+0x1e6>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800377a:	f06f 0304 	mvn.w	r3, #4
 800377e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003780:	e0b9      	b.n	80038f6 <BSP_EEPROM_WriteBuffer+0x1e6>
        }
      }
      /* If nbr_of_bytes > EEPROM_PAGESIZE */
      else
      {
        i = 0;
 8003782:	2300      	movs	r3, #0
 8003784:	623b      	str	r3, [r7, #32]
        do
        {
          if (EEPROM_WriteBytes(Instance, write_buffer, write_addr, EEPROM_PAGESIZE) != BSP_ERROR_NONE)
 8003786:	2340      	movs	r3, #64	; 0x40
 8003788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800378a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	f000 f8dd 	bl	800394c <EEPROM_WriteBytes>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d003      	beq.n	80037a0 <BSP_EEPROM_WriteBuffer+0x90>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8003798:	f06f 0304 	mvn.w	r3, #4
 800379c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800379e:	e008      	b.n	80037b2 <BSP_EEPROM_WriteBuffer+0xa2>
          }
          else
          {
            write_addr += EEPROM_PAGESIZE;
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	3340      	adds	r3, #64	; 0x40
 80037a4:	627b      	str	r3, [r7, #36]	; 0x24
            write_buffer += EEPROM_PAGESIZE;
 80037a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a8:	3340      	adds	r3, #64	; 0x40
 80037aa:	62bb      	str	r3, [r7, #40]	; 0x28
            i++;
 80037ac:	6a3b      	ldr	r3, [r7, #32]
 80037ae:	3301      	adds	r3, #1
 80037b0:	623b      	str	r3, [r7, #32]
          }
        } while ((i < numofpages) && (ret == BSP_ERROR_NONE));
 80037b2:	6a3a      	ldr	r2, [r7, #32]
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d202      	bcs.n	80037c0 <BSP_EEPROM_WriteBuffer+0xb0>
 80037ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0e2      	beq.n	8003786 <BSP_EEPROM_WriteBuffer+0x76>

        if (numofsingle != 0U)
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f000 8097 	beq.w	80038f6 <BSP_EEPROM_WriteBuffer+0x1e6>
        {
          if (EEPROM_WriteBytes(Instance, write_buffer, write_addr, numofsingle) != BSP_ERROR_NONE)
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f000 f8bc 	bl	800394c <EEPROM_WriteBytes>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f000 808d 	beq.w	80038f6 <BSP_EEPROM_WriteBuffer+0x1e6>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 80037dc:	f06f 0304 	mvn.w	r3, #4
 80037e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037e2:	e088      	b.n	80038f6 <BSP_EEPROM_WriteBuffer+0x1e6>
    }
    /* If WriteAddr is not EEPROM_PAGESIZE aligned */
    else
    {
      /* If nbr_of_bytes < EEPROM_PAGESIZE */
      if (numofpages == 0U)
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d137      	bne.n	800385a <BSP_EEPROM_WriteBuffer+0x14a>
      {
        /* If the number of data to be written is more than the remaining space
        in the current page: */
        if (nbr_of_bytes > count)
 80037ea:	69fa      	ldr	r2, [r7, #28]
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d923      	bls.n	800383a <BSP_EEPROM_WriteBuffer+0x12a>
        {
          /* Write the data contained in same page */
          if (EEPROM_WriteBytes(Instance, write_buffer, write_addr, count) != BSP_ERROR_NONE)
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f000 f8a7 	bl	800394c <EEPROM_WriteBytes>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d003      	beq.n	800380c <BSP_EEPROM_WriteBuffer+0xfc>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8003804:	f06f 0304 	mvn.w	r3, #4
 8003808:	62fb      	str	r3, [r7, #44]	; 0x2c
 800380a:	e074      	b.n	80038f6 <BSP_EEPROM_WriteBuffer+0x1e6>
          }/* Write the remaining data in the following page */
          else if (EEPROM_WriteBytes(Instance, (uint8_t *)(write_buffer + count), (write_addr + count),
 800380c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	18d1      	adds	r1, r2, r3
 8003812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	18d0      	adds	r0, r2, r3
 8003818:	69fa      	ldr	r2, [r7, #28]
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	4602      	mov	r2, r0
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f000 f893 	bl	800394c <EEPROM_WriteBytes>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d003      	beq.n	8003834 <BSP_EEPROM_WriteBuffer+0x124>
                                     nbr_of_bytes - count) != BSP_ERROR_NONE)
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 800382c:	f06f 0304 	mvn.w	r3, #4
 8003830:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003832:	e060      	b.n	80038f6 <BSP_EEPROM_WriteBuffer+0x1e6>
          }
          else
          {
            ret = BSP_ERROR_NONE;
 8003834:	2300      	movs	r3, #0
 8003836:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003838:	e05d      	b.n	80038f6 <BSP_EEPROM_WriteBuffer+0x1e6>
          }
        }
        else if (EEPROM_WriteBytes(Instance, write_buffer, write_addr, numofsingle) != BSP_ERROR_NONE)
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800383e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 f883 	bl	800394c <EEPROM_WriteBytes>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d003      	beq.n	8003854 <BSP_EEPROM_WriteBuffer+0x144>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800384c:	f06f 0304 	mvn.w	r3, #4
 8003850:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003852:	e050      	b.n	80038f6 <BSP_EEPROM_WriteBuffer+0x1e6>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8003854:	2300      	movs	r3, #0
 8003856:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003858:	e04d      	b.n	80038f6 <BSP_EEPROM_WriteBuffer+0x1e6>
        }
      }
      /* If nbr_of_bytes > EEPROM_PAGESIZE */
      else
      {
        i = 0;
 800385a:	2300      	movs	r3, #0
 800385c:	623b      	str	r3, [r7, #32]
        nbr_of_bytes -= count;
 800385e:	69fa      	ldr	r2, [r7, #28]
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	61fb      	str	r3, [r7, #28]
        numofpages =  nbr_of_bytes / EEPROM_PAGESIZE;
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	099b      	lsrs	r3, r3, #6
 800386a:	617b      	str	r3, [r7, #20]
        numofsingle = nbr_of_bytes % EEPROM_PAGESIZE;
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003872:	613b      	str	r3, [r7, #16]

        if (EEPROM_WriteBytes(Instance, write_buffer, write_addr, count) != BSP_ERROR_NONE)
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003878:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f000 f866 	bl	800394c <EEPROM_WriteBytes>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d003      	beq.n	800388e <BSP_EEPROM_WriteBuffer+0x17e>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8003886:	f06f 0304 	mvn.w	r3, #4
 800388a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800388c:	e007      	b.n	800389e <BSP_EEPROM_WriteBuffer+0x18e>
        }
        else
        {
          write_addr += count;
 800388e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	4413      	add	r3, r2
 8003894:	627b      	str	r3, [r7, #36]	; 0x24
          write_buffer += count;
 8003896:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	4413      	add	r3, r2
 800389c:	62bb      	str	r3, [r7, #40]	; 0x28
        }

        do
        {
          if (EEPROM_WriteBytes(Instance, write_buffer, write_addr, EEPROM_PAGESIZE) != BSP_ERROR_NONE)
 800389e:	2340      	movs	r3, #64	; 0x40
 80038a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f000 f851 	bl	800394c <EEPROM_WriteBytes>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d003      	beq.n	80038b8 <BSP_EEPROM_WriteBuffer+0x1a8>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 80038b0:	f06f 0304 	mvn.w	r3, #4
 80038b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038b6:	e008      	b.n	80038ca <BSP_EEPROM_WriteBuffer+0x1ba>
          }
          else
          {
            write_addr += EEPROM_PAGESIZE;
 80038b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ba:	3340      	adds	r3, #64	; 0x40
 80038bc:	627b      	str	r3, [r7, #36]	; 0x24
            write_buffer += EEPROM_PAGESIZE;
 80038be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c0:	3340      	adds	r3, #64	; 0x40
 80038c2:	62bb      	str	r3, [r7, #40]	; 0x28
            i++;
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	3301      	adds	r3, #1
 80038c8:	623b      	str	r3, [r7, #32]
          }
        } while ((i < numofpages) && (ret == BSP_ERROR_NONE));
 80038ca:	6a3a      	ldr	r2, [r7, #32]
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d202      	bcs.n	80038d8 <BSP_EEPROM_WriteBuffer+0x1c8>
 80038d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d0e2      	beq.n	800389e <BSP_EEPROM_WriteBuffer+0x18e>

        if (numofsingle != 0U)
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00b      	beq.n	80038f6 <BSP_EEPROM_WriteBuffer+0x1e6>
        {
          if (EEPROM_WriteBytes(Instance, write_buffer, write_addr, numofsingle) != BSP_ERROR_NONE)
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f000 f831 	bl	800394c <EEPROM_WriteBytes>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d002      	beq.n	80038f6 <BSP_EEPROM_WriteBuffer+0x1e6>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 80038f0:	f06f 0304 	mvn.w	r3, #4
 80038f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
    }
  }

  /* Return BSP status */
  return ret;
 80038f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3730      	adds	r7, #48	; 0x30
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <BSP_EEPROM_IsDeviceReady>:
  *         I2C packets addressed to it. Once the write operation is complete
  *         the EEPROM responds to its address.
  * @retval BSP status
  */
int32_t BSP_EEPROM_IsDeviceReady(uint32_t Instance)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003908:	2300      	movs	r3, #0
 800390a:	60fb      	str	r3, [r7, #12]

  if (Instance >= EEPROM_INSTANCES_NBR)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <BSP_EEPROM_IsDeviceReady+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003912:	f06f 0301 	mvn.w	r3, #1
 8003916:	60fb      	str	r3, [r7, #12]
 8003918:	e00e      	b.n	8003938 <BSP_EEPROM_IsDeviceReady+0x38>
  }
  else
  {
    if (Eeprom_Drv->IsReady(Eeprom_CompObj, EEPROM_MAX_TRIALS) != BSP_ERROR_NONE)
 800391a:	4b0a      	ldr	r3, [pc, #40]	; (8003944 <BSP_EEPROM_IsDeviceReady+0x44>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	4a09      	ldr	r2, [pc, #36]	; (8003948 <BSP_EEPROM_IsDeviceReady+0x48>)
 8003922:	6812      	ldr	r2, [r2, #0]
 8003924:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8003928:	4610      	mov	r0, r2
 800392a:	4798      	blx	r3
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d002      	beq.n	8003938 <BSP_EEPROM_IsDeviceReady+0x38>
    {
      ret = BSP_ERROR_BUSY;
 8003932:	f06f 0302 	mvn.w	r3, #2
 8003936:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return BSP status */
  return ret;
 8003938:	68fb      	ldr	r3, [r7, #12]
}
 800393a:	4618      	mov	r0, r3
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	200016d8 	.word	0x200016d8
 8003948:	200016d4 	.word	0x200016d4

0800394c <EEPROM_WriteBytes>:
  * @param  WriteAddr EEPROM's internal address to write to.
  * @param  NbrOfBytes  number of bytes to write to the EEPROM.
  * @retval BSP status
  */
static int32_t EEPROM_WriteBytes(const uint32_t Instance, uint8_t *pBuffer, uint32_t WriteAddr, uint32_t NbrOfBytes)
{
 800394c:	b590      	push	{r4, r7, lr}
 800394e:	b087      	sub	sp, #28
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
 8003958:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800395a:	2300      	movs	r3, #0
 800395c:	617b      	str	r3, [r7, #20]

  if (Eeprom_Drv->Write(Eeprom_CompObj, WriteAddr, pBuffer, NbrOfBytes) < 0)
 800395e:	4b10      	ldr	r3, [pc, #64]	; (80039a0 <EEPROM_WriteBytes+0x54>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	689c      	ldr	r4, [r3, #8]
 8003964:	4b0f      	ldr	r3, [pc, #60]	; (80039a4 <EEPROM_WriteBytes+0x58>)
 8003966:	6818      	ldr	r0, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	b299      	uxth	r1, r3
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	b29b      	uxth	r3, r3
 8003970:	68ba      	ldr	r2, [r7, #8]
 8003972:	47a0      	blx	r4
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	da03      	bge.n	8003982 <EEPROM_WriteBytes+0x36>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800397a:	f06f 0304 	mvn.w	r3, #4
 800397e:	617b      	str	r3, [r7, #20]
 8003980:	e008      	b.n	8003994 <EEPROM_WriteBytes+0x48>
  }
  else
  {
    if (BSP_EEPROM_IsDeviceReady(Instance) != BSP_ERROR_NONE)
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f7ff ffbc 	bl	8003900 <BSP_EEPROM_IsDeviceReady>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d002      	beq.n	8003994 <EEPROM_WriteBytes+0x48>
    {
      ret = BSP_ERROR_BUSY;
 800398e:	f06f 0302 	mvn.w	r3, #2
 8003992:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return BSP status */
  return ret;
 8003994:	697b      	ldr	r3, [r7, #20]
}
 8003996:	4618      	mov	r0, r3
 8003998:	371c      	adds	r7, #28
 800399a:	46bd      	mov	sp, r7
 800399c:	bd90      	pop	{r4, r7, pc}
 800399e:	bf00      	nop
 80039a0:	200016d8 	.word	0x200016d8
 80039a4:	200016d4 	.word	0x200016d4

080039a8 <M24256_Probe>:
/**
  * @brief  Register Bus IOs
  * @retval BSP status
  */
static int32_t M24256_Probe(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b088      	sub	sp, #32
 80039ac:	af00      	add	r7, sp, #0
  int32_t ret;
  M24256_IO_t              IOCtx;
  static M24256_Object_t   M24256Obj;

  /* Configure the EEPROM driver */
  IOCtx.Init        = BSP_I2C2_Init;
 80039ae:	4b21      	ldr	r3, [pc, #132]	; (8003a34 <M24256_Probe+0x8c>)
 80039b0:	603b      	str	r3, [r7, #0]
  IOCtx.DeInit      = BSP_I2C2_DeInit;
 80039b2:	4b21      	ldr	r3, [pc, #132]	; (8003a38 <M24256_Probe+0x90>)
 80039b4:	607b      	str	r3, [r7, #4]
  IOCtx.Read        = BSP_I2C2_ReadReg16;
 80039b6:	4b21      	ldr	r3, [pc, #132]	; (8003a3c <M24256_Probe+0x94>)
 80039b8:	613b      	str	r3, [r7, #16]
  IOCtx.Write       = BSP_I2C2_WriteReg16;
 80039ba:	4b21      	ldr	r3, [pc, #132]	; (8003a40 <M24256_Probe+0x98>)
 80039bc:	60fb      	str	r3, [r7, #12]
  IOCtx.IsReady     = BSP_I2C2_IsReady;
 80039be:	4b21      	ldr	r3, [pc, #132]	; (8003a44 <M24256_Probe+0x9c>)
 80039c0:	617b      	str	r3, [r7, #20]
  IOCtx.Address     = (uint16_t)EEPROM_I2C_ADDRESS;
 80039c2:	23ac      	movs	r3, #172	; 0xac
 80039c4:	813b      	strh	r3, [r7, #8]

  if (M24256_RegisterBusIO(&M24256Obj, &IOCtx) != M24256_OK)
 80039c6:	463b      	mov	r3, r7
 80039c8:	4619      	mov	r1, r3
 80039ca:	481f      	ldr	r0, [pc, #124]	; (8003a48 <M24256_Probe+0xa0>)
 80039cc:	f007 fc6a 	bl	800b2a4 <M24256_RegisterBusIO>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <M24256_Probe+0x36>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 80039d6:	f06f 0307 	mvn.w	r3, #7
 80039da:	61fb      	str	r3, [r7, #28]
 80039dc:	e025      	b.n	8003a2a <M24256_Probe+0x82>
  }
  else
  {
    Eeprom_Drv = &M24256_EEPROM_Driver;
 80039de:	4b1b      	ldr	r3, [pc, #108]	; (8003a4c <M24256_Probe+0xa4>)
 80039e0:	4a1b      	ldr	r2, [pc, #108]	; (8003a50 <M24256_Probe+0xa8>)
 80039e2:	601a      	str	r2, [r3, #0]
    Eeprom_CompObj = &M24256Obj;
 80039e4:	4b1b      	ldr	r3, [pc, #108]	; (8003a54 <M24256_Probe+0xac>)
 80039e6:	4a18      	ldr	r2, [pc, #96]	; (8003a48 <M24256_Probe+0xa0>)
 80039e8:	601a      	str	r2, [r3, #0]
    if (Eeprom_Drv->Init(Eeprom_CompObj) != M24256_OK)
 80039ea:	4b18      	ldr	r3, [pc, #96]	; (8003a4c <M24256_Probe+0xa4>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a18      	ldr	r2, [pc, #96]	; (8003a54 <M24256_Probe+0xac>)
 80039f2:	6812      	ldr	r2, [r2, #0]
 80039f4:	4610      	mov	r0, r2
 80039f6:	4798      	blx	r3
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <M24256_Probe+0x5e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80039fe:	f06f 0304 	mvn.w	r3, #4
 8003a02:	61fb      	str	r3, [r7, #28]
 8003a04:	e011      	b.n	8003a2a <M24256_Probe+0x82>
    }
    else if (Eeprom_Drv->IsReady(Eeprom_CompObj, EEPROM_MAX_TRIALS) == BSP_ERROR_NONE)
 8003a06:	4b11      	ldr	r3, [pc, #68]	; (8003a4c <M24256_Probe+0xa4>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	4a11      	ldr	r2, [pc, #68]	; (8003a54 <M24256_Probe+0xac>)
 8003a0e:	6812      	ldr	r2, [r2, #0]
 8003a10:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8003a14:	4610      	mov	r0, r2
 8003a16:	4798      	blx	r3
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d102      	bne.n	8003a24 <M24256_Probe+0x7c>
    {
      ret = BSP_ERROR_NONE;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	61fb      	str	r3, [r7, #28]
 8003a22:	e002      	b.n	8003a2a <M24256_Probe+0x82>
    }
    else
    {
      ret = BSP_ERROR_BUSY;
 8003a24:	f06f 0302 	mvn.w	r3, #2
 8003a28:	61fb      	str	r3, [r7, #28]
    }
  }

  return ret;
 8003a2a:	69fb      	ldr	r3, [r7, #28]
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3720      	adds	r7, #32
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	08002139 	.word	0x08002139
 8003a38:	080021ad 	.word	0x080021ad
 8003a3c:	0800238d 	.word	0x0800238d
 8003a40:	08002331 	.word	0x08002331
 8003a44:	080023e9 	.word	0x080023e9
 8003a48:	200016dc 	.word	0x200016dc
 8003a4c:	200016d8 	.word	0x200016d8
 8003a50:	20000130 	.word	0x20000130
 8003a54:	200016d4 	.word	0x200016d4

08003a58 <BSP_ENV_SENSOR_Init>:
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY for instance 0
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
  * @retval BSP status.
  */
int32_t BSP_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8003a62:	2300      	movs	r3, #0
 8003a64:	60fb      	str	r3, [r7, #12]

  if (Instance >= ENV_SENSOR_INSTANCES_NBR)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d903      	bls.n	8003a74 <BSP_ENV_SENSOR_Init+0x1c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8003a6c:	f06f 0301 	mvn.w	r3, #1
 8003a70:	60fb      	str	r3, [r7, #12]
 8003a72:	e036      	b.n	8003ae2 <BSP_ENV_SENSOR_Init+0x8a>
  }
  else if (((Instance == 0U) && ((Functions & ENV_PRESSURE) != 0U))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d104      	bne.n	8003a84 <BSP_ENV_SENSOR_Init+0x2c>
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d107      	bne.n	8003a94 <BSP_ENV_SENSOR_Init+0x3c>
           || ((Instance == 1U) && ((Functions & ENV_HUMIDITY) != 0U)))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d108      	bne.n	8003a9c <BSP_ENV_SENSOR_Init+0x44>
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d003      	beq.n	8003a9c <BSP_ENV_SENSOR_Init+0x44>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8003a94:	f06f 030a 	mvn.w	r3, #10
 8003a98:	60fb      	str	r3, [r7, #12]
 8003a9a:	e022      	b.n	8003ae2 <BSP_ENV_SENSOR_Init+0x8a>
  }
  else
  {
    /* Probe the motion sensor */
    if (Instance == 0U)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d109      	bne.n	8003ab6 <BSP_ENV_SENSOR_Init+0x5e>
    {
      if (HTS221_Probe(Functions) != BSP_ERROR_NONE)
 8003aa2:	6838      	ldr	r0, [r7, #0]
 8003aa4:	f000 fa8e 	bl	8003fc4 <HTS221_Probe>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00c      	beq.n	8003ac8 <BSP_ENV_SENSOR_Init+0x70>
      {
        status = BSP_ERROR_COMPONENT_FAILURE;
 8003aae:	f06f 0304 	mvn.w	r3, #4
 8003ab2:	60fb      	str	r3, [r7, #12]
 8003ab4:	e008      	b.n	8003ac8 <BSP_ENV_SENSOR_Init+0x70>
      }
    }
    else /* Instance = 1 */
    {
      if (LPS22HH_Probe(Functions) != BSP_ERROR_NONE)
 8003ab6:	6838      	ldr	r0, [r7, #0]
 8003ab8:	f000 fafa 	bl	80040b0 <LPS22HH_Probe>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d002      	beq.n	8003ac8 <BSP_ENV_SENSOR_Init+0x70>
      {
        status = BSP_ERROR_COMPONENT_FAILURE;
 8003ac2:	f06f 0304 	mvn.w	r3, #4
 8003ac6:	60fb      	str	r3, [r7, #12]
      }
    }

    if (status == BSP_ERROR_NONE)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d109      	bne.n	8003ae2 <BSP_ENV_SENSOR_Init+0x8a>
    {
      /* Store current initialized functions */
      Env_Sensor_Ctx[Instance].Functions |= Functions;
 8003ace:	4a07      	ldr	r2, [pc, #28]	; (8003aec <BSP_ENV_SENSOR_Init+0x94>)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	431a      	orrs	r2, r3
 8003ada:	4904      	ldr	r1, [pc, #16]	; (8003aec <BSP_ENV_SENSOR_Init+0x94>)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }
  return status;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	2000170c 	.word	0x2000170c

08003af0 <BSP_ENV_SENSOR_DeInit>:
  * @brief  De-initialize environmental sensor.
  * @param  Instance Environmental sensor instance.
  * @retval BSP status.
  */
int32_t BSP_ENV_SENSOR_DeInit(uint32_t Instance)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8003af8:	2300      	movs	r3, #0
 8003afa:	60fb      	str	r3, [r7, #12]

  if (Instance >= ENV_SENSOR_INSTANCES_NBR)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d903      	bls.n	8003b0a <BSP_ENV_SENSOR_DeInit+0x1a>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8003b02:	f06f 0301 	mvn.w	r3, #1
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	e01c      	b.n	8003b44 <BSP_ENV_SENSOR_DeInit+0x54>
  }
  else if (Env_Sensor_Ctx[Instance].Functions != 0U)
 8003b0a:	4a11      	ldr	r2, [pc, #68]	; (8003b50 <BSP_ENV_SENSOR_DeInit+0x60>)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d016      	beq.n	8003b44 <BSP_ENV_SENSOR_DeInit+0x54>
  {
    /* De-initialize the sensor */
    if (Env_Sensor_Drv[Instance]->DeInit(Env_Sensor_CompObj[Instance]) < 0)
 8003b16:	4a0f      	ldr	r2, [pc, #60]	; (8003b54 <BSP_ENV_SENSOR_DeInit+0x64>)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	490d      	ldr	r1, [pc, #52]	; (8003b58 <BSP_ENV_SENSOR_DeInit+0x68>)
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003b28:	4610      	mov	r0, r2
 8003b2a:	4798      	blx	r3
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	da03      	bge.n	8003b3a <BSP_ENV_SENSOR_DeInit+0x4a>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8003b32:	f06f 0304 	mvn.w	r3, #4
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	e004      	b.n	8003b44 <BSP_ENV_SENSOR_DeInit+0x54>
    }
    else
    {
      /* Reset current initialized functions */
      Env_Sensor_Ctx[Instance].Functions = 0U;
 8003b3a:	4a05      	ldr	r2, [pc, #20]	; (8003b50 <BSP_ENV_SENSOR_DeInit+0x60>)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2100      	movs	r1, #0
 8003b40:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  }
  else
  {
    /* Nothing to do (not initialized) */
  }
  return status;
 8003b44:	68fb      	ldr	r3, [r7, #12]
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	2000170c 	.word	0x2000170c
 8003b54:	2000171c 	.word	0x2000171c
 8003b58:	20001714 	.word	0x20001714

08003b5c <BSP_ENV_SENSOR_GetCapabilities>:
  * @param  Instance Environmental sensor instance.
  * @param  Capabilities Pointer to environmental sensor capabilities.
  * @retval BSP status.
  */
int32_t BSP_ENV_SENSOR_GetCapabilities(const uint32_t Instance, ENV_SENSOR_Capabilities_t *Capabilities)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8003b66:	2300      	movs	r3, #0
 8003b68:	60fb      	str	r3, [r7, #12]

  if ((Instance >= ENV_SENSOR_INSTANCES_NBR) || (Capabilities == NULL))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d802      	bhi.n	8003b76 <BSP_ENV_SENSOR_GetCapabilities+0x1a>
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d103      	bne.n	8003b7e <BSP_ENV_SENSOR_GetCapabilities+0x22>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8003b76:	f06f 0301 	mvn.w	r3, #1
 8003b7a:	60fb      	str	r3, [r7, #12]
 8003b7c:	e01b      	b.n	8003bb6 <BSP_ENV_SENSOR_GetCapabilities+0x5a>
  }
  else if (Env_Sensor_Ctx[Instance].Functions == 0U)
 8003b7e:	4a10      	ldr	r2, [pc, #64]	; (8003bc0 <BSP_ENV_SENSOR_GetCapabilities+0x64>)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d103      	bne.n	8003b92 <BSP_ENV_SENSOR_GetCapabilities+0x36>
  {
    status = BSP_ERROR_NO_INIT;
 8003b8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	e011      	b.n	8003bb6 <BSP_ENV_SENSOR_GetCapabilities+0x5a>
  }
  else
  {
    /* Get the sensor capabilities */
    if (Env_Sensor_Drv[Instance]->GetCapabilities(Env_Sensor_CompObj[Instance], Capabilities) < 0)
 8003b92:	4a0c      	ldr	r2, [pc, #48]	; (8003bc4 <BSP_ENV_SENSOR_GetCapabilities+0x68>)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	490a      	ldr	r1, [pc, #40]	; (8003bc8 <BSP_ENV_SENSOR_GetCapabilities+0x6c>)
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003ba4:	6839      	ldr	r1, [r7, #0]
 8003ba6:	4610      	mov	r0, r2
 8003ba8:	4798      	blx	r3
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	da02      	bge.n	8003bb6 <BSP_ENV_SENSOR_GetCapabilities+0x5a>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8003bb0:	f06f 0304 	mvn.w	r3, #4
 8003bb4:	60fb      	str	r3, [r7, #12]
    }
  }

  return status;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3710      	adds	r7, #16
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	2000170c 	.word	0x2000170c
 8003bc4:	2000171c 	.word	0x2000171c
 8003bc8:	20001714 	.word	0x20001714

08003bcc <BSP_ENV_SENSOR_ReadID>:
  * @param  Instance Environmental sensor instance.
  * @param  Id Pointer to environmental sensor ID.
  * @retval BSP status.
  */
int32_t BSP_ENV_SENSOR_ReadID(const uint32_t Instance, uint8_t *Id)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	60fb      	str	r3, [r7, #12]

  if ((Instance >= ENV_SENSOR_INSTANCES_NBR) || (Id == NULL))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d802      	bhi.n	8003be6 <BSP_ENV_SENSOR_ReadID+0x1a>
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d103      	bne.n	8003bee <BSP_ENV_SENSOR_ReadID+0x22>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8003be6:	f06f 0301 	mvn.w	r3, #1
 8003bea:	60fb      	str	r3, [r7, #12]
 8003bec:	e01b      	b.n	8003c26 <BSP_ENV_SENSOR_ReadID+0x5a>
  }
  else if (Env_Sensor_Ctx[Instance].Functions == 0U)
 8003bee:	4a10      	ldr	r2, [pc, #64]	; (8003c30 <BSP_ENV_SENSOR_ReadID+0x64>)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d103      	bne.n	8003c02 <BSP_ENV_SENSOR_ReadID+0x36>
  {
    status = BSP_ERROR_NO_INIT;
 8003bfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bfe:	60fb      	str	r3, [r7, #12]
 8003c00:	e011      	b.n	8003c26 <BSP_ENV_SENSOR_ReadID+0x5a>
  }
  else
  {
    /* Read the environmental sensor ID */
    if (Env_Sensor_Drv[Instance]->ReadID(Env_Sensor_CompObj[Instance], Id) < 0)
 8003c02:	4a0c      	ldr	r2, [pc, #48]	; (8003c34 <BSP_ENV_SENSOR_ReadID+0x68>)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	490a      	ldr	r1, [pc, #40]	; (8003c38 <BSP_ENV_SENSOR_ReadID+0x6c>)
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003c14:	6839      	ldr	r1, [r7, #0]
 8003c16:	4610      	mov	r0, r2
 8003c18:	4798      	blx	r3
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	da02      	bge.n	8003c26 <BSP_ENV_SENSOR_ReadID+0x5a>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8003c20:	f06f 0304 	mvn.w	r3, #4
 8003c24:	60fb      	str	r3, [r7, #12]
    }
  }

  return status;
 8003c26:	68fb      	ldr	r3, [r7, #12]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	2000170c 	.word	0x2000170c
 8003c34:	2000171c 	.word	0x2000171c
 8003c38:	20001714 	.word	0x20001714

08003c3c <BSP_ENV_SENSOR_Enable>:
  *         - ENV_TEMPERATURE or ENV_HUMIDITY for instance 0
  *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
  * @retval BSP status.
  */
int32_t BSP_ENV_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8003c46:	2300      	movs	r3, #0
 8003c48:	60fb      	str	r3, [r7, #12]
  uint8_t index;

  if (Instance >= ENV_SENSOR_INSTANCES_NBR)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d903      	bls.n	8003c58 <BSP_ENV_SENSOR_Enable+0x1c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8003c50:	f06f 0301 	mvn.w	r3, #1
 8003c54:	60fb      	str	r3, [r7, #12]
 8003c56:	e03d      	b.n	8003cd4 <BSP_ENV_SENSOR_Enable+0x98>
  }
  else if (((Instance == 0U) && (Function == ENV_PRESSURE))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d102      	bne.n	8003c64 <BSP_ENV_SENSOR_Enable+0x28>
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d005      	beq.n	8003c70 <BSP_ENV_SENSOR_Enable+0x34>
           || ((Instance == 1U) && (Function == ENV_HUMIDITY)))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d106      	bne.n	8003c78 <BSP_ENV_SENSOR_Enable+0x3c>
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	2b04      	cmp	r3, #4
 8003c6e:	d103      	bne.n	8003c78 <BSP_ENV_SENSOR_Enable+0x3c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8003c70:	f06f 030a 	mvn.w	r3, #10
 8003c74:	60fb      	str	r3, [r7, #12]
 8003c76:	e02d      	b.n	8003cd4 <BSP_ENV_SENSOR_Enable+0x98>
  }
  else if ((Env_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8003c78:	4a19      	ldr	r2, [pc, #100]	; (8003ce0 <BSP_ENV_SENSOR_Enable+0xa4>)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	4013      	ands	r3, r2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d103      	bne.n	8003c90 <BSP_ENV_SENSOR_Enable+0x54>
  {
    status = BSP_ERROR_NO_INIT;
 8003c88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c8c:	60fb      	str	r3, [r7, #12]
 8003c8e:	e021      	b.n	8003cd4 <BSP_ENV_SENSOR_Enable+0x98>
  }
  else
  {
    /* Enable the environmental sensor function */
    index = (Function == ENV_TEMPERATURE) ? TEMPERATURE_ID : ((Function == ENV_PRESSURE) ? PRESSURE_ID : HUMIDITY_ID);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d006      	beq.n	8003ca4 <BSP_ENV_SENSOR_Enable+0x68>
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d101      	bne.n	8003ca0 <BSP_ENV_SENSOR_Enable+0x64>
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e002      	b.n	8003ca6 <BSP_ENV_SENSOR_Enable+0x6a>
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	e000      	b.n	8003ca6 <BSP_ENV_SENSOR_Enable+0x6a>
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	72fb      	strb	r3, [r7, #11]
    if (Env_Sensor_FuncDrv[Instance][index]->Enable(Env_Sensor_CompObj[Instance]) < 0)
 8003ca8:	7af9      	ldrb	r1, [r7, #11]
 8003caa:	480e      	ldr	r0, [pc, #56]	; (8003ce4 <BSP_ENV_SENSOR_Enable+0xa8>)
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	4413      	add	r3, r2
 8003cb4:	440b      	add	r3, r1
 8003cb6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	490a      	ldr	r1, [pc, #40]	; (8003ce8 <BSP_ENV_SENSOR_Enable+0xac>)
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003cc4:	4610      	mov	r0, r2
 8003cc6:	4798      	blx	r3
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	da02      	bge.n	8003cd4 <BSP_ENV_SENSOR_Enable+0x98>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8003cce:	f06f 0304 	mvn.w	r3, #4
 8003cd2:	60fb      	str	r3, [r7, #12]
    }
  }

  return status;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	2000170c 	.word	0x2000170c
 8003ce4:	20001724 	.word	0x20001724
 8003ce8:	20001714 	.word	0x20001714

08003cec <BSP_ENV_SENSOR_Disable>:
  *         - ENV_TEMPERATURE or ENV_HUMIDITY for instance 0
  *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
  * @retval BSP status.
  */
int32_t BSP_ENV_SENSOR_Disable(uint32_t Instance, uint32_t Function)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	60fb      	str	r3, [r7, #12]
  uint8_t index;

  if (Instance >= ENV_SENSOR_INSTANCES_NBR)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d903      	bls.n	8003d08 <BSP_ENV_SENSOR_Disable+0x1c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8003d00:	f06f 0301 	mvn.w	r3, #1
 8003d04:	60fb      	str	r3, [r7, #12]
 8003d06:	e03d      	b.n	8003d84 <BSP_ENV_SENSOR_Disable+0x98>
  }
  else if (((Instance == 0U) && (Function == ENV_PRESSURE))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d102      	bne.n	8003d14 <BSP_ENV_SENSOR_Disable+0x28>
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d005      	beq.n	8003d20 <BSP_ENV_SENSOR_Disable+0x34>
           || ((Instance == 1U) && (Function == ENV_HUMIDITY)))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d106      	bne.n	8003d28 <BSP_ENV_SENSOR_Disable+0x3c>
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	2b04      	cmp	r3, #4
 8003d1e:	d103      	bne.n	8003d28 <BSP_ENV_SENSOR_Disable+0x3c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8003d20:	f06f 030a 	mvn.w	r3, #10
 8003d24:	60fb      	str	r3, [r7, #12]
 8003d26:	e02d      	b.n	8003d84 <BSP_ENV_SENSOR_Disable+0x98>
  }
  else if ((Env_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8003d28:	4a19      	ldr	r2, [pc, #100]	; (8003d90 <BSP_ENV_SENSOR_Disable+0xa4>)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	4013      	ands	r3, r2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d103      	bne.n	8003d40 <BSP_ENV_SENSOR_Disable+0x54>
  {
    status = BSP_ERROR_NO_INIT;
 8003d38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d3c:	60fb      	str	r3, [r7, #12]
 8003d3e:	e021      	b.n	8003d84 <BSP_ENV_SENSOR_Disable+0x98>
  }
  else
  {
    /* Disable the environmental sensor function */
    index = (Function == ENV_TEMPERATURE) ? TEMPERATURE_ID : ((Function == ENV_PRESSURE) ? PRESSURE_ID : HUMIDITY_ID);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d006      	beq.n	8003d54 <BSP_ENV_SENSOR_Disable+0x68>
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d101      	bne.n	8003d50 <BSP_ENV_SENSOR_Disable+0x64>
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e002      	b.n	8003d56 <BSP_ENV_SENSOR_Disable+0x6a>
 8003d50:	2302      	movs	r3, #2
 8003d52:	e000      	b.n	8003d56 <BSP_ENV_SENSOR_Disable+0x6a>
 8003d54:	2300      	movs	r3, #0
 8003d56:	72fb      	strb	r3, [r7, #11]
    if (Env_Sensor_FuncDrv[Instance][index]->Disable(Env_Sensor_CompObj[Instance]) < 0)
 8003d58:	7af9      	ldrb	r1, [r7, #11]
 8003d5a:	480e      	ldr	r0, [pc, #56]	; (8003d94 <BSP_ENV_SENSOR_Disable+0xa8>)
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	4413      	add	r3, r2
 8003d64:	440b      	add	r3, r1
 8003d66:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	490a      	ldr	r1, [pc, #40]	; (8003d98 <BSP_ENV_SENSOR_Disable+0xac>)
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003d74:	4610      	mov	r0, r2
 8003d76:	4798      	blx	r3
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	da02      	bge.n	8003d84 <BSP_ENV_SENSOR_Disable+0x98>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8003d7e:	f06f 0304 	mvn.w	r3, #4
 8003d82:	60fb      	str	r3, [r7, #12]
    }
  }

  return status;
 8003d84:	68fb      	ldr	r3, [r7, #12]
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3710      	adds	r7, #16
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	2000170c 	.word	0x2000170c
 8003d94:	20001724 	.word	0x20001724
 8003d98:	20001714 	.word	0x20001714

08003d9c <BSP_ENV_SENSOR_GetOutputDataRate>:
  *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
  * @param  Odr Pointer to output data rate.
  * @retval BSP status.
  */
int32_t BSP_ENV_SENSOR_GetOutputDataRate(const uint32_t Instance, uint32_t Function, float_t *Odr)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8003da8:	2300      	movs	r3, #0
 8003daa:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if ((Instance >= ENV_SENSOR_INSTANCES_NBR) || (Odr == NULL))
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d802      	bhi.n	8003db8 <BSP_ENV_SENSOR_GetOutputDataRate+0x1c>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d103      	bne.n	8003dc0 <BSP_ENV_SENSOR_GetOutputDataRate+0x24>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8003db8:	f06f 0301 	mvn.w	r3, #1
 8003dbc:	617b      	str	r3, [r7, #20]
 8003dbe:	e03e      	b.n	8003e3e <BSP_ENV_SENSOR_GetOutputDataRate+0xa2>
  }
  else if (((Instance == 0U) && (Function == ENV_PRESSURE))
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d102      	bne.n	8003dcc <BSP_ENV_SENSOR_GetOutputDataRate+0x30>
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d005      	beq.n	8003dd8 <BSP_ENV_SENSOR_GetOutputDataRate+0x3c>
           || ((Instance == 1U) && (Function == ENV_HUMIDITY)))
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d106      	bne.n	8003de0 <BSP_ENV_SENSOR_GetOutputDataRate+0x44>
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	2b04      	cmp	r3, #4
 8003dd6:	d103      	bne.n	8003de0 <BSP_ENV_SENSOR_GetOutputDataRate+0x44>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8003dd8:	f06f 030a 	mvn.w	r3, #10
 8003ddc:	617b      	str	r3, [r7, #20]
 8003dde:	e02e      	b.n	8003e3e <BSP_ENV_SENSOR_GetOutputDataRate+0xa2>
  }
  else if ((Env_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8003de0:	4a19      	ldr	r2, [pc, #100]	; (8003e48 <BSP_ENV_SENSOR_GetOutputDataRate+0xac>)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	4013      	ands	r3, r2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d103      	bne.n	8003df8 <BSP_ENV_SENSOR_GetOutputDataRate+0x5c>
  {
    status = BSP_ERROR_NO_INIT;
 8003df0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003df4:	617b      	str	r3, [r7, #20]
 8003df6:	e022      	b.n	8003e3e <BSP_ENV_SENSOR_GetOutputDataRate+0xa2>
  }
  else
  {
    /* Get the environmental sensor output data rate */
    index = (Function == ENV_TEMPERATURE) ? TEMPERATURE_ID : ((Function == ENV_PRESSURE) ? PRESSURE_ID : HUMIDITY_ID);
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d006      	beq.n	8003e0c <BSP_ENV_SENSOR_GetOutputDataRate+0x70>
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d101      	bne.n	8003e08 <BSP_ENV_SENSOR_GetOutputDataRate+0x6c>
 8003e04:	2301      	movs	r3, #1
 8003e06:	e002      	b.n	8003e0e <BSP_ENV_SENSOR_GetOutputDataRate+0x72>
 8003e08:	2302      	movs	r3, #2
 8003e0a:	e000      	b.n	8003e0e <BSP_ENV_SENSOR_GetOutputDataRate+0x72>
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	74fb      	strb	r3, [r7, #19]
    if (Env_Sensor_FuncDrv[Instance][index]->GetOutputDataRate(Env_Sensor_CompObj[Instance], Odr) < 0)
 8003e10:	7cf9      	ldrb	r1, [r7, #19]
 8003e12:	480e      	ldr	r0, [pc, #56]	; (8003e4c <BSP_ENV_SENSOR_GetOutputDataRate+0xb0>)
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	4613      	mov	r3, r2
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	4413      	add	r3, r2
 8003e1c:	440b      	add	r3, r1
 8003e1e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	490a      	ldr	r1, [pc, #40]	; (8003e50 <BSP_ENV_SENSOR_GetOutputDataRate+0xb4>)
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003e2c:	6879      	ldr	r1, [r7, #4]
 8003e2e:	4610      	mov	r0, r2
 8003e30:	4798      	blx	r3
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	da02      	bge.n	8003e3e <BSP_ENV_SENSOR_GetOutputDataRate+0xa2>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8003e38:	f06f 0304 	mvn.w	r3, #4
 8003e3c:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8003e3e:	697b      	ldr	r3, [r7, #20]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3718      	adds	r7, #24
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	2000170c 	.word	0x2000170c
 8003e4c:	20001724 	.word	0x20001724
 8003e50:	20001714 	.word	0x20001714

08003e54 <BSP_ENV_SENSOR_SetOutputDataRate>:
  *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
  * @param  Odr Output data rate.
  * @retval BSP status.
  */
int32_t BSP_ENV_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float_t Odr)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8003e62:	2300      	movs	r3, #0
 8003e64:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if (Instance >= ENV_SENSOR_INSTANCES_NBR)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d903      	bls.n	8003e74 <BSP_ENV_SENSOR_SetOutputDataRate+0x20>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8003e6c:	f06f 0301 	mvn.w	r3, #1
 8003e70:	617b      	str	r3, [r7, #20]
 8003e72:	e03f      	b.n	8003ef4 <BSP_ENV_SENSOR_SetOutputDataRate+0xa0>
  }
  else if (((Instance == 0U) && (Function == ENV_PRESSURE))
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d102      	bne.n	8003e80 <BSP_ENV_SENSOR_SetOutputDataRate+0x2c>
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d005      	beq.n	8003e8c <BSP_ENV_SENSOR_SetOutputDataRate+0x38>
           || ((Instance == 1U) && (Function == ENV_HUMIDITY)))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d106      	bne.n	8003e94 <BSP_ENV_SENSOR_SetOutputDataRate+0x40>
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	2b04      	cmp	r3, #4
 8003e8a:	d103      	bne.n	8003e94 <BSP_ENV_SENSOR_SetOutputDataRate+0x40>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8003e8c:	f06f 030a 	mvn.w	r3, #10
 8003e90:	617b      	str	r3, [r7, #20]
 8003e92:	e02f      	b.n	8003ef4 <BSP_ENV_SENSOR_SetOutputDataRate+0xa0>
  }
  else if ((Env_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8003e94:	4a1a      	ldr	r2, [pc, #104]	; (8003f00 <BSP_ENV_SENSOR_SetOutputDataRate+0xac>)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d103      	bne.n	8003eac <BSP_ENV_SENSOR_SetOutputDataRate+0x58>
  {
    status = BSP_ERROR_NO_INIT;
 8003ea4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ea8:	617b      	str	r3, [r7, #20]
 8003eaa:	e023      	b.n	8003ef4 <BSP_ENV_SENSOR_SetOutputDataRate+0xa0>
  }
  else
  {
    /* Set the environmental sensor output data rate */
    index = (Function == ENV_TEMPERATURE) ? TEMPERATURE_ID : ((Function == ENV_PRESSURE) ? PRESSURE_ID : HUMIDITY_ID);
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d006      	beq.n	8003ec0 <BSP_ENV_SENSOR_SetOutputDataRate+0x6c>
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d101      	bne.n	8003ebc <BSP_ENV_SENSOR_SetOutputDataRate+0x68>
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e002      	b.n	8003ec2 <BSP_ENV_SENSOR_SetOutputDataRate+0x6e>
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	e000      	b.n	8003ec2 <BSP_ENV_SENSOR_SetOutputDataRate+0x6e>
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	74fb      	strb	r3, [r7, #19]
    if (Env_Sensor_FuncDrv[Instance][index]->SetOutputDataRate(Env_Sensor_CompObj[Instance], Odr) < 0)
 8003ec4:	7cf9      	ldrb	r1, [r7, #19]
 8003ec6:	480f      	ldr	r0, [pc, #60]	; (8003f04 <BSP_ENV_SENSOR_SetOutputDataRate+0xb0>)
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	4413      	add	r3, r2
 8003ed0:	440b      	add	r3, r1
 8003ed2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	490b      	ldr	r1, [pc, #44]	; (8003f08 <BSP_ENV_SENSOR_SetOutputDataRate+0xb4>)
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003ee0:	ed97 0a01 	vldr	s0, [r7, #4]
 8003ee4:	4610      	mov	r0, r2
 8003ee6:	4798      	blx	r3
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	da02      	bge.n	8003ef4 <BSP_ENV_SENSOR_SetOutputDataRate+0xa0>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8003eee:	f06f 0304 	mvn.w	r3, #4
 8003ef2:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8003ef4:	697b      	ldr	r3, [r7, #20]
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3718      	adds	r7, #24
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	2000170c 	.word	0x2000170c
 8003f04:	20001724 	.word	0x20001724
 8003f08:	20001714 	.word	0x20001714

08003f0c <BSP_ENV_SENSOR_GetValue>:
  *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
  * @param  Value Pointer to environmental sensor value.
  * @retval BSP status.
  */
int32_t BSP_ENV_SENSOR_GetValue(const uint32_t Instance, uint32_t Function, float_t *Value)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b086      	sub	sp, #24
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if ((Instance >= ENV_SENSOR_INSTANCES_NBR) || (Value == NULL))
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d802      	bhi.n	8003f28 <BSP_ENV_SENSOR_GetValue+0x1c>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d103      	bne.n	8003f30 <BSP_ENV_SENSOR_GetValue+0x24>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8003f28:	f06f 0301 	mvn.w	r3, #1
 8003f2c:	617b      	str	r3, [r7, #20]
 8003f2e:	e03e      	b.n	8003fae <BSP_ENV_SENSOR_GetValue+0xa2>
  }
  else if (((Instance == 0U) && (Function == ENV_PRESSURE))
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d102      	bne.n	8003f3c <BSP_ENV_SENSOR_GetValue+0x30>
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d005      	beq.n	8003f48 <BSP_ENV_SENSOR_GetValue+0x3c>
           || ((Instance == 1U) && (Function == ENV_HUMIDITY)))
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d106      	bne.n	8003f50 <BSP_ENV_SENSOR_GetValue+0x44>
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	2b04      	cmp	r3, #4
 8003f46:	d103      	bne.n	8003f50 <BSP_ENV_SENSOR_GetValue+0x44>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8003f48:	f06f 030a 	mvn.w	r3, #10
 8003f4c:	617b      	str	r3, [r7, #20]
 8003f4e:	e02e      	b.n	8003fae <BSP_ENV_SENSOR_GetValue+0xa2>
  }
  else if ((Env_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8003f50:	4a19      	ldr	r2, [pc, #100]	; (8003fb8 <BSP_ENV_SENSOR_GetValue+0xac>)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d103      	bne.n	8003f68 <BSP_ENV_SENSOR_GetValue+0x5c>
  {
    status = BSP_ERROR_NO_INIT;
 8003f60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f64:	617b      	str	r3, [r7, #20]
 8003f66:	e022      	b.n	8003fae <BSP_ENV_SENSOR_GetValue+0xa2>
  }
  else
  {
    /* Get environmental sensor value */
    index = (Function == ENV_TEMPERATURE) ? TEMPERATURE_ID : ((Function == ENV_PRESSURE) ? PRESSURE_ID : HUMIDITY_ID);
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d006      	beq.n	8003f7c <BSP_ENV_SENSOR_GetValue+0x70>
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d101      	bne.n	8003f78 <BSP_ENV_SENSOR_GetValue+0x6c>
 8003f74:	2301      	movs	r3, #1
 8003f76:	e002      	b.n	8003f7e <BSP_ENV_SENSOR_GetValue+0x72>
 8003f78:	2302      	movs	r3, #2
 8003f7a:	e000      	b.n	8003f7e <BSP_ENV_SENSOR_GetValue+0x72>
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	74fb      	strb	r3, [r7, #19]
    if (Env_Sensor_FuncDrv[Instance][index]->GetValue(Env_Sensor_CompObj[Instance], Value) < 0)
 8003f80:	7cf9      	ldrb	r1, [r7, #19]
 8003f82:	480e      	ldr	r0, [pc, #56]	; (8003fbc <BSP_ENV_SENSOR_GetValue+0xb0>)
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	4613      	mov	r3, r2
 8003f88:	005b      	lsls	r3, r3, #1
 8003f8a:	4413      	add	r3, r2
 8003f8c:	440b      	add	r3, r1
 8003f8e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	490a      	ldr	r1, [pc, #40]	; (8003fc0 <BSP_ENV_SENSOR_GetValue+0xb4>)
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003f9c:	6879      	ldr	r1, [r7, #4]
 8003f9e:	4610      	mov	r0, r2
 8003fa0:	4798      	blx	r3
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	da02      	bge.n	8003fae <BSP_ENV_SENSOR_GetValue+0xa2>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8003fa8:	f06f 0304 	mvn.w	r3, #4
 8003fac:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8003fae:	697b      	ldr	r3, [r7, #20]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3718      	adds	r7, #24
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	2000170c 	.word	0x2000170c
 8003fbc:	20001724 	.word	0x20001724
 8003fc0:	20001714 	.word	0x20001714

08003fc4 <HTS221_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
  * @retval BSP status.
  */
static int32_t HTS221_Probe(uint32_t Functions)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b08c      	sub	sp, #48	; 0x30
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  int32_t                status = BSP_ERROR_NONE;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HTS221_IO_t            IOCtx;
  uint8_t                hts221_id;
  static HTS221_Object_t HTS221_Obj;

  /* Configure the environmental sensor driver */
  IOCtx.BusType     = HTS221_I2C_BUS;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	617b      	str	r3, [r7, #20]
  IOCtx.Address     = HTS221_I2C_ADDRESS;
 8003fd4:	23bf      	movs	r3, #191	; 0xbf
 8003fd6:	763b      	strb	r3, [r7, #24]
  IOCtx.Init        = BSP_I2C2_Init;
 8003fd8:	4b29      	ldr	r3, [pc, #164]	; (8004080 <HTS221_Probe+0xbc>)
 8003fda:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C2_DeInit;
 8003fdc:	4b29      	ldr	r3, [pc, #164]	; (8004084 <HTS221_Probe+0xc0>)
 8003fde:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C2_ReadReg;
 8003fe0:	4b29      	ldr	r3, [pc, #164]	; (8004088 <HTS221_Probe+0xc4>)
 8003fe2:	623b      	str	r3, [r7, #32]
  IOCtx.WriteReg    = BSP_I2C2_WriteReg;
 8003fe4:	4b29      	ldr	r3, [pc, #164]	; (800408c <HTS221_Probe+0xc8>)
 8003fe6:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = BSP_GetTick;
 8003fe8:	4b29      	ldr	r3, [pc, #164]	; (8004090 <HTS221_Probe+0xcc>)
 8003fea:	627b      	str	r3, [r7, #36]	; 0x24

  /* Register Component Bus IO operations */
  if (HTS221_RegisterBusIO(&HTS221_Obj, &IOCtx) != HTS221_OK)
 8003fec:	f107 030c 	add.w	r3, r7, #12
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	4828      	ldr	r0, [pc, #160]	; (8004094 <HTS221_Probe+0xd0>)
 8003ff4:	f003 f940 	bl	8007278 <HTS221_RegisterBusIO>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d003      	beq.n	8004006 <HTS221_Probe+0x42>
  {
    status = BSP_ERROR_BUS_FAILURE;
 8003ffe:	f06f 0307 	mvn.w	r3, #7
 8004002:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004004:	e037      	b.n	8004076 <HTS221_Probe+0xb2>
  }
  /* Read the sensor ID */
  else if (HTS221_ReadID(&HTS221_Obj, &hts221_id) != HTS221_OK)
 8004006:	f107 030b 	add.w	r3, r7, #11
 800400a:	4619      	mov	r1, r3
 800400c:	4821      	ldr	r0, [pc, #132]	; (8004094 <HTS221_Probe+0xd0>)
 800400e:	f003 f9bc 	bl	800738a <HTS221_ReadID>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d003      	beq.n	8004020 <HTS221_Probe+0x5c>
  {
    status = BSP_ERROR_COMPONENT_FAILURE;
 8004018:	f06f 0304 	mvn.w	r3, #4
 800401c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800401e:	e02a      	b.n	8004076 <HTS221_Probe+0xb2>
  }
  /* Check if the returned sensor ID is correct */
  else if (hts221_id != HTS221_ID)
 8004020:	7afb      	ldrb	r3, [r7, #11]
 8004022:	2bbc      	cmp	r3, #188	; 0xbc
 8004024:	d003      	beq.n	800402e <HTS221_Probe+0x6a>
  {
    status = BSP_ERROR_UNKNOWN_COMPONENT;
 8004026:	f06f 0306 	mvn.w	r3, #6
 800402a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800402c:	e023      	b.n	8004076 <HTS221_Probe+0xb2>
  }
  else
  {
    Env_Sensor_CompObj[0] = &HTS221_Obj;
 800402e:	4b1a      	ldr	r3, [pc, #104]	; (8004098 <HTS221_Probe+0xd4>)
 8004030:	4a18      	ldr	r2, [pc, #96]	; (8004094 <HTS221_Probe+0xd0>)
 8004032:	601a      	str	r2, [r3, #0]
    Env_Sensor_Drv[0]     = (ENV_SENSOR_CommonDrv_t *) &HTS221_COMMON_Driver;
 8004034:	4b19      	ldr	r3, [pc, #100]	; (800409c <HTS221_Probe+0xd8>)
 8004036:	4a1a      	ldr	r2, [pc, #104]	; (80040a0 <HTS221_Probe+0xdc>)
 8004038:	601a      	str	r2, [r3, #0]
    /* Initialize the component */
    if (Env_Sensor_Drv[0]->Init(Env_Sensor_CompObj[0]) < 0)
 800403a:	4b18      	ldr	r3, [pc, #96]	; (800409c <HTS221_Probe+0xd8>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a15      	ldr	r2, [pc, #84]	; (8004098 <HTS221_Probe+0xd4>)
 8004042:	6812      	ldr	r2, [r2, #0]
 8004044:	4610      	mov	r0, r2
 8004046:	4798      	blx	r3
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	da03      	bge.n	8004056 <HTS221_Probe+0x92>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 800404e:	f06f 0304 	mvn.w	r3, #4
 8004052:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004054:	e00f      	b.n	8004076 <HTS221_Probe+0xb2>
    }
    else
    {
      if ((Functions & ENV_TEMPERATURE) != 0U)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	2b00      	cmp	r3, #0
 800405e:	d002      	beq.n	8004066 <HTS221_Probe+0xa2>
      {
        Env_Sensor_FuncDrv[0][TEMPERATURE_ID] = (ENV_SENSOR_FuncDrv_t *) &HTS221_TEMP_Driver;
 8004060:	4b10      	ldr	r3, [pc, #64]	; (80040a4 <HTS221_Probe+0xe0>)
 8004062:	4a11      	ldr	r2, [pc, #68]	; (80040a8 <HTS221_Probe+0xe4>)
 8004064:	601a      	str	r2, [r3, #0]
      }
      if ((Functions & ENV_HUMIDITY) != 0U)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f003 0304 	and.w	r3, r3, #4
 800406c:	2b00      	cmp	r3, #0
 800406e:	d002      	beq.n	8004076 <HTS221_Probe+0xb2>
      {
        Env_Sensor_FuncDrv[0][HUMIDITY_ID] = (ENV_SENSOR_FuncDrv_t *) &HTS221_HUM_Driver;
 8004070:	4b0c      	ldr	r3, [pc, #48]	; (80040a4 <HTS221_Probe+0xe0>)
 8004072:	4a0e      	ldr	r2, [pc, #56]	; (80040ac <HTS221_Probe+0xe8>)
 8004074:	609a      	str	r2, [r3, #8]
      }
    }
  }

  return status;
 8004076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004078:	4618      	mov	r0, r3
 800407a:	3730      	adds	r7, #48	; 0x30
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	08002139 	.word	0x08002139
 8004084:	080021ad 	.word	0x080021ad
 8004088:	080022d5 	.word	0x080022d5
 800408c:	08002279 	.word	0x08002279
 8004090:	08002421 	.word	0x08002421
 8004094:	2000173c 	.word	0x2000173c
 8004098:	20001714 	.word	0x20001714
 800409c:	2000171c 	.word	0x2000171c
 80040a0:	20000034 	.word	0x20000034
 80040a4:	20001724 	.word	0x20001724
 80040a8:	20000058 	.word	0x20000058
 80040ac:	20000044 	.word	0x20000044

080040b0 <LPS22HH_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE
  * @retval BSP status.
  */
static int32_t LPS22HH_Probe(uint32_t Functions)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b08c      	sub	sp, #48	; 0x30
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  int32_t                 status = BSP_ERROR_NONE;
 80040b8:	2300      	movs	r3, #0
 80040ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPS22HH_IO_t            IOCtx;
  uint8_t                 lps22hh_id;
  static LPS22HH_Object_t LPS22HH_Obj;

  /* Configure the environmental sensor driver */
  IOCtx.BusType     = LPS22HH_I2C_BUS;
 80040bc:	2300      	movs	r3, #0
 80040be:	617b      	str	r3, [r7, #20]
  IOCtx.Address     = LPS22HH_I2C_ADD_H;
 80040c0:	23bb      	movs	r3, #187	; 0xbb
 80040c2:	763b      	strb	r3, [r7, #24]
  IOCtx.Init        = BSP_I2C2_Init;
 80040c4:	4b29      	ldr	r3, [pc, #164]	; (800416c <LPS22HH_Probe+0xbc>)
 80040c6:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C2_DeInit;
 80040c8:	4b29      	ldr	r3, [pc, #164]	; (8004170 <LPS22HH_Probe+0xc0>)
 80040ca:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C2_ReadReg;
 80040cc:	4b29      	ldr	r3, [pc, #164]	; (8004174 <LPS22HH_Probe+0xc4>)
 80040ce:	623b      	str	r3, [r7, #32]
  IOCtx.WriteReg    = BSP_I2C2_WriteReg;
 80040d0:	4b29      	ldr	r3, [pc, #164]	; (8004178 <LPS22HH_Probe+0xc8>)
 80040d2:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = BSP_GetTick;
 80040d4:	4b29      	ldr	r3, [pc, #164]	; (800417c <LPS22HH_Probe+0xcc>)
 80040d6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Register Component Bus IO operations */
  if (LPS22HH_RegisterBusIO(&LPS22HH_Obj, &IOCtx) != LPS22HH_OK)
 80040d8:	f107 030c 	add.w	r3, r7, #12
 80040dc:	4619      	mov	r1, r3
 80040de:	4828      	ldr	r0, [pc, #160]	; (8004180 <LPS22HH_Probe+0xd0>)
 80040e0:	f006 fa86 	bl	800a5f0 <LPS22HH_RegisterBusIO>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <LPS22HH_Probe+0x42>
  {
    status = BSP_ERROR_BUS_FAILURE;
 80040ea:	f06f 0307 	mvn.w	r3, #7
 80040ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040f0:	e037      	b.n	8004162 <LPS22HH_Probe+0xb2>
  }
  /* Read the sensor ID */
  else if (LPS22HH_ReadID(&LPS22HH_Obj, &lps22hh_id) != LPS22HH_OK)
 80040f2:	f107 030b 	add.w	r3, r7, #11
 80040f6:	4619      	mov	r1, r3
 80040f8:	4821      	ldr	r0, [pc, #132]	; (8004180 <LPS22HH_Probe+0xd0>)
 80040fa:	f006 fb22 	bl	800a742 <LPS22HH_ReadID>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d003      	beq.n	800410c <LPS22HH_Probe+0x5c>
  {
    status = BSP_ERROR_COMPONENT_FAILURE;
 8004104:	f06f 0304 	mvn.w	r3, #4
 8004108:	62fb      	str	r3, [r7, #44]	; 0x2c
 800410a:	e02a      	b.n	8004162 <LPS22HH_Probe+0xb2>
  }
  /* Check if the returned sensor ID is correct */
  else if (lps22hh_id != LPS22HH_ID)
 800410c:	7afb      	ldrb	r3, [r7, #11]
 800410e:	2bb3      	cmp	r3, #179	; 0xb3
 8004110:	d003      	beq.n	800411a <LPS22HH_Probe+0x6a>
  {
    status = BSP_ERROR_UNKNOWN_COMPONENT;
 8004112:	f06f 0306 	mvn.w	r3, #6
 8004116:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004118:	e023      	b.n	8004162 <LPS22HH_Probe+0xb2>
  }
  else
  {
    Env_Sensor_CompObj[1] = &LPS22HH_Obj;
 800411a:	4b1a      	ldr	r3, [pc, #104]	; (8004184 <LPS22HH_Probe+0xd4>)
 800411c:	4a18      	ldr	r2, [pc, #96]	; (8004180 <LPS22HH_Probe+0xd0>)
 800411e:	605a      	str	r2, [r3, #4]
    Env_Sensor_Drv[1]     = (ENV_SENSOR_CommonDrv_t *) &LPS22HH_COMMON_Driver;
 8004120:	4b19      	ldr	r3, [pc, #100]	; (8004188 <LPS22HH_Probe+0xd8>)
 8004122:	4a1a      	ldr	r2, [pc, #104]	; (800418c <LPS22HH_Probe+0xdc>)
 8004124:	605a      	str	r2, [r3, #4]
    /* Initialize the component */
    if (Env_Sensor_Drv[1]->Init(Env_Sensor_CompObj[1]) < 0)
 8004126:	4b18      	ldr	r3, [pc, #96]	; (8004188 <LPS22HH_Probe+0xd8>)
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a15      	ldr	r2, [pc, #84]	; (8004184 <LPS22HH_Probe+0xd4>)
 800412e:	6852      	ldr	r2, [r2, #4]
 8004130:	4610      	mov	r0, r2
 8004132:	4798      	blx	r3
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	da03      	bge.n	8004142 <LPS22HH_Probe+0x92>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 800413a:	f06f 0304 	mvn.w	r3, #4
 800413e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004140:	e00f      	b.n	8004162 <LPS22HH_Probe+0xb2>
    }
    else
    {
      if ((Functions & ENV_TEMPERATURE) != 0U)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	2b00      	cmp	r3, #0
 800414a:	d002      	beq.n	8004152 <LPS22HH_Probe+0xa2>
      {
        Env_Sensor_FuncDrv[1][TEMPERATURE_ID] = (ENV_SENSOR_FuncDrv_t *) &LPS22HH_TEMP_Driver;
 800414c:	4b10      	ldr	r3, [pc, #64]	; (8004190 <LPS22HH_Probe+0xe0>)
 800414e:	4a11      	ldr	r2, [pc, #68]	; (8004194 <LPS22HH_Probe+0xe4>)
 8004150:	60da      	str	r2, [r3, #12]
      }
      if ((Functions & ENV_PRESSURE) != 0U)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d002      	beq.n	8004162 <LPS22HH_Probe+0xb2>
      {
        Env_Sensor_FuncDrv[1][PRESSURE_ID] = (ENV_SENSOR_FuncDrv_t *) &LPS22HH_PRESS_Driver;
 800415c:	4b0c      	ldr	r3, [pc, #48]	; (8004190 <LPS22HH_Probe+0xe0>)
 800415e:	4a0e      	ldr	r2, [pc, #56]	; (8004198 <LPS22HH_Probe+0xe8>)
 8004160:	611a      	str	r2, [r3, #16]
      }
    }
  }

  return status;
 8004162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004164:	4618      	mov	r0, r3
 8004166:	3730      	adds	r7, #48	; 0x30
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	08002139 	.word	0x08002139
 8004170:	080021ad 	.word	0x080021ad
 8004174:	080022d5 	.word	0x080022d5
 8004178:	08002279 	.word	0x08002279
 800417c:	08002421 	.word	0x08002421
 8004180:	20001770 	.word	0x20001770
 8004184:	20001714 	.word	0x20001714
 8004188:	2000171c 	.word	0x2000171c
 800418c:	200000f8 	.word	0x200000f8
 8004190:	20001724 	.word	0x20001724
 8004194:	2000011c 	.word	0x2000011c
 8004198:	20000108 	.word	0x20000108

0800419c <BSP_LIGHT_SENSOR_Init>:
  *         configures all necessary hardware resources (GPIOs, I2C, clocks..).
  * @param  Instance Ambiant Light Sensor instance. Could be only 0.
  * @retval BSP status
  */
int32_t BSP_LIGHT_SENSOR_Init(uint32_t Instance)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 80041a4:	2300      	movs	r3, #0
 80041a6:	60fb      	str	r3, [r7, #12]
  if (Instance >= LIGHT_SENSOR_INSTANCES_NBR)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d003      	beq.n	80041b6 <BSP_LIGHT_SENSOR_Init+0x1a>
  {
    status = BSP_ERROR_WRONG_PARAM;
 80041ae:	f06f 0301 	mvn.w	r3, #1
 80041b2:	60fb      	str	r3, [r7, #12]
 80041b4:	e01c      	b.n	80041f0 <BSP_LIGHT_SENSOR_Init+0x54>
  }
  else
  {
    /*Probe VEML3235 */
    if (VEML3235_Probe(Instance) != BSP_ERROR_NONE)
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f9b6 	bl	8004528 <VEML3235_Probe>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d003      	beq.n	80041ca <BSP_LIGHT_SENSOR_Init+0x2e>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 80041c2:	f06f 0304 	mvn.w	r3, #4
 80041c6:	60fb      	str	r3, [r7, #12]
 80041c8:	e012      	b.n	80041f0 <BSP_LIGHT_SENSOR_Init+0x54>
    }
    else
    {
      LIGHTSENSOR_Ctx[Instance].Gain = VEML3235_CONF_GAIN_1 ;
 80041ca:	490c      	ldr	r1, [pc, #48]	; (80041fc <BSP_LIGHT_SENSOR_Init+0x60>)
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	4613      	mov	r3, r2
 80041d0:	005b      	lsls	r3, r3, #1
 80041d2:	4413      	add	r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	440b      	add	r3, r1
 80041d8:	2200      	movs	r2, #0
 80041da:	601a      	str	r2, [r3, #0]
      LIGHTSENSOR_Ctx[Instance].ExposureTime = VEML3235_CONF_IT100;
 80041dc:	4907      	ldr	r1, [pc, #28]	; (80041fc <BSP_LIGHT_SENSOR_Init+0x60>)
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	4613      	mov	r3, r2
 80041e2:	005b      	lsls	r3, r3, #1
 80041e4:	4413      	add	r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	440b      	add	r3, r1
 80041ea:	3304      	adds	r3, #4
 80041ec:	2200      	movs	r2, #0
 80041ee:	601a      	str	r2, [r3, #0]

    }
  }
  return status;
 80041f0:	68fb      	ldr	r3, [r7, #12]
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	200017a4 	.word	0x200017a4

08004200 <BSP_LIGHT_SENSOR_ReadID>:
  * @param Instance    Light sensor instance.
  * @param pId    Pointer to the device ID.
  * @retval BSP status
  */
int32_t BSP_LIGHT_SENSOR_ReadID(const uint32_t Instance, uint32_t *pId)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= LIGHT_SENSOR_INSTANCES_NBR)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d003      	beq.n	8004218 <BSP_LIGHT_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004210:	f06f 0301 	mvn.w	r3, #1
 8004214:	60fb      	str	r3, [r7, #12]
 8004216:	e014      	b.n	8004242 <BSP_LIGHT_SENSOR_ReadID+0x42>
  }
  else if (VEML3235_LIGHT_SENSOR_Drv[Instance]->ReadID(VEML3235_LIGHT_SENSOR_CompObj[Instance], pId) < 0)
 8004218:	4a0c      	ldr	r2, [pc, #48]	; (800424c <BSP_LIGHT_SENSOR_ReadID+0x4c>)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	490b      	ldr	r1, [pc, #44]	; (8004250 <BSP_LIGHT_SENSOR_ReadID+0x50>)
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800422a:	6839      	ldr	r1, [r7, #0]
 800422c:	4610      	mov	r0, r2
 800422e:	4798      	blx	r3
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	da03      	bge.n	800423e <BSP_LIGHT_SENSOR_ReadID+0x3e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004236:	f06f 0304 	mvn.w	r3, #4
 800423a:	60fb      	str	r3, [r7, #12]
 800423c:	e001      	b.n	8004242 <BSP_LIGHT_SENSOR_ReadID+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800423e:	2300      	movs	r3, #0
 8004240:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004242:	68fb      	ldr	r3, [r7, #12]
}
 8004244:	4618      	mov	r0, r3
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	200017b4 	.word	0x200017b4
 8004250:	200017b0 	.word	0x200017b0

08004254 <BSP_LIGHT_SENSOR_GetCapabilities>:
  * @param Instance    Light sensor instance.
  * @param pCapabilities    Pointer to the light sensor capabilities.
  * @retval BSP status
  */
int32_t BSP_LIGHT_SENSOR_GetCapabilities(const uint32_t Instance, LIGHT_SENSOR_Capabilities_t *pCapabilities)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= LIGHT_SENSOR_INSTANCES_NBR)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d003      	beq.n	800426c <BSP_LIGHT_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004264:	f06f 0301 	mvn.w	r3, #1
 8004268:	60fb      	str	r3, [r7, #12]
 800426a:	e014      	b.n	8004296 <BSP_LIGHT_SENSOR_GetCapabilities+0x42>
  }
  else if (VEML3235_LIGHT_SENSOR_Drv[Instance]->GetCapabilities(VEML3235_LIGHT_SENSOR_CompObj[Instance],
 800426c:	4a0c      	ldr	r2, [pc, #48]	; (80042a0 <BSP_LIGHT_SENSOR_GetCapabilities+0x4c>)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	490b      	ldr	r1, [pc, #44]	; (80042a4 <BSP_LIGHT_SENSOR_GetCapabilities+0x50>)
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800427e:	6839      	ldr	r1, [r7, #0]
 8004280:	4610      	mov	r0, r2
 8004282:	4798      	blx	r3
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	da03      	bge.n	8004292 <BSP_LIGHT_SENSOR_GetCapabilities+0x3e>
                                                                pCapabilities) < 0)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800428a:	f06f 0304 	mvn.w	r3, #4
 800428e:	60fb      	str	r3, [r7, #12]
 8004290:	e001      	b.n	8004296 <BSP_LIGHT_SENSOR_GetCapabilities+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8004292:	2300      	movs	r3, #0
 8004294:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004296:	68fb      	ldr	r3, [r7, #12]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	200017b4 	.word	0x200017b4
 80042a4:	200017b0 	.word	0x200017b0

080042a8 <BSP_LIGHT_SENSOR_SetGain>:
  * @param  Channel ambiant light sensor channel
  * @param  Gain ambiant light integration gain to be configured
  * @retval BSP status
  */
int32_t BSP_LIGHT_SENSOR_SetGain(uint32_t Instance, uint8_t Channel, uint32_t Gain)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	460b      	mov	r3, r1
 80042b2:	607a      	str	r2, [r7, #4]
 80042b4:	72fb      	strb	r3, [r7, #11]
  int32_t status = BSP_ERROR_NONE;
 80042b6:	2300      	movs	r3, #0
 80042b8:	617b      	str	r3, [r7, #20]

  if (Instance >= LIGHT_SENSOR_INSTANCES_NBR)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d003      	beq.n	80042c8 <BSP_LIGHT_SENSOR_SetGain+0x20>
  {
    status = BSP_ERROR_WRONG_PARAM;
 80042c0:	f06f 0301 	mvn.w	r3, #1
 80042c4:	617b      	str	r3, [r7, #20]
 80042c6:	e01a      	b.n	80042fe <BSP_LIGHT_SENSOR_SetGain+0x56>
  }
  else
  {
    /* Set the Gain Value */
    if (VEML3235_LIGHT_SENSOR_Drv[Instance]->SetGain(VEML3235_LIGHT_SENSOR_CompObj[Instance], Channel, Gain) < 0)
 80042c8:	4a0f      	ldr	r2, [pc, #60]	; (8004308 <BSP_LIGHT_SENSOR_SetGain+0x60>)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	490e      	ldr	r1, [pc, #56]	; (800430c <BSP_LIGHT_SENSOR_SetGain+0x64>)
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80042da:	7af9      	ldrb	r1, [r7, #11]
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	4798      	blx	r3
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	da02      	bge.n	80042ec <BSP_LIGHT_SENSOR_SetGain+0x44>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 80042e6:	f06f 0304 	mvn.w	r3, #4
 80042ea:	617b      	str	r3, [r7, #20]
    }
    LIGHTSENSOR_Ctx[Instance].Gain = Gain;
 80042ec:	4908      	ldr	r1, [pc, #32]	; (8004310 <BSP_LIGHT_SENSOR_SetGain+0x68>)
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	4613      	mov	r3, r2
 80042f2:	005b      	lsls	r3, r3, #1
 80042f4:	4413      	add	r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	440b      	add	r3, r1
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	601a      	str	r2, [r3, #0]
  }
  return status ;
 80042fe:	697b      	ldr	r3, [r7, #20]
}
 8004300:	4618      	mov	r0, r3
 8004302:	3718      	adds	r7, #24
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	200017b4 	.word	0x200017b4
 800430c:	200017b0 	.word	0x200017b0
 8004310:	200017a4 	.word	0x200017a4

08004314 <BSP_LIGHT_SENSOR_GetGain>:
  * @param  Channel ambiant light sensor channel
  * @param  pGain  Pointer to integration time
  * @retval BSP status
  */
int32_t BSP_LIGHT_SENSOR_GetGain(const uint32_t Instance, uint8_t Channel, uint32_t *pGain)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	460b      	mov	r3, r1
 800431e:	607a      	str	r2, [r7, #4]
 8004320:	72fb      	strb	r3, [r7, #11]
  int32_t status = BSP_ERROR_NONE;
 8004322:	2300      	movs	r3, #0
 8004324:	617b      	str	r3, [r7, #20]

  if (Instance >= LIGHT_SENSOR_INSTANCES_NBR)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d003      	beq.n	8004334 <BSP_LIGHT_SENSOR_GetGain+0x20>
  {
    status = BSP_ERROR_WRONG_PARAM;
 800432c:	f06f 0301 	mvn.w	r3, #1
 8004330:	617b      	str	r3, [r7, #20]
 8004332:	e011      	b.n	8004358 <BSP_LIGHT_SENSOR_GetGain+0x44>
  }
  else
  {
    /* Get the Gain Value */
    if (VEML3235_LIGHT_SENSOR_Drv[Instance]->GetGain(VEML3235_LIGHT_SENSOR_CompObj[Instance], Channel, pGain) < 0)
 8004334:	4a0b      	ldr	r2, [pc, #44]	; (8004364 <BSP_LIGHT_SENSOR_GetGain+0x50>)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800433c:	69db      	ldr	r3, [r3, #28]
 800433e:	490a      	ldr	r1, [pc, #40]	; (8004368 <BSP_LIGHT_SENSOR_GetGain+0x54>)
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8004346:	7af9      	ldrb	r1, [r7, #11]
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	4798      	blx	r3
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	da02      	bge.n	8004358 <BSP_LIGHT_SENSOR_GetGain+0x44>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8004352:	f06f 0304 	mvn.w	r3, #4
 8004356:	617b      	str	r3, [r7, #20]
    }
  }
  return status ;
 8004358:	697b      	ldr	r3, [r7, #20]
}
 800435a:	4618      	mov	r0, r3
 800435c:	3718      	adds	r7, #24
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	200017b4 	.word	0x200017b4
 8004368:	200017b0 	.word	0x200017b0

0800436c <BSP_LIGHT_SENSOR_SetExposureTime>:
  * @param ExposureTime    New exposure time (the integration time) to be applied.
  * @warning This function must not be called when a capture is ongoing.
  * @retval BSP status
  */
int32_t BSP_LIGHT_SENSOR_SetExposureTime(uint32_t Instance, uint32_t ExposureTime)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= LIGHT_SENSOR_INSTANCES_NBR)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d003      	beq.n	8004384 <BSP_LIGHT_SENSOR_SetExposureTime+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800437c:	f06f 0301 	mvn.w	r3, #1
 8004380:	60fb      	str	r3, [r7, #12]
 8004382:	e01e      	b.n	80043c2 <BSP_LIGHT_SENSOR_SetExposureTime+0x56>
  }
  else if (VEML3235_LIGHT_SENSOR_Drv[Instance]->SetExposureTime(VEML3235_LIGHT_SENSOR_CompObj[Instance],
 8004384:	4a11      	ldr	r2, [pc, #68]	; (80043cc <BSP_LIGHT_SENSOR_SetExposureTime+0x60>)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	4910      	ldr	r1, [pc, #64]	; (80043d0 <BSP_LIGHT_SENSOR_SetExposureTime+0x64>)
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004396:	6839      	ldr	r1, [r7, #0]
 8004398:	4610      	mov	r0, r2
 800439a:	4798      	blx	r3
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	da03      	bge.n	80043aa <BSP_LIGHT_SENSOR_SetExposureTime+0x3e>
                                                                ExposureTime) < 0)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80043a2:	f06f 0304 	mvn.w	r3, #4
 80043a6:	60fb      	str	r3, [r7, #12]
 80043a8:	e00b      	b.n	80043c2 <BSP_LIGHT_SENSOR_SetExposureTime+0x56>
  }
  else
  {
    LIGHTSENSOR_Ctx[Instance].ExposureTime = ExposureTime ;
 80043aa:	490a      	ldr	r1, [pc, #40]	; (80043d4 <BSP_LIGHT_SENSOR_SetExposureTime+0x68>)
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	4613      	mov	r3, r2
 80043b0:	005b      	lsls	r3, r3, #1
 80043b2:	4413      	add	r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	440b      	add	r3, r1
 80043b8:	3304      	adds	r3, #4
 80043ba:	683a      	ldr	r2, [r7, #0]
 80043bc:	601a      	str	r2, [r3, #0]
    ret = BSP_ERROR_NONE;
 80043be:	2300      	movs	r3, #0
 80043c0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80043c2:	68fb      	ldr	r3, [r7, #12]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3710      	adds	r7, #16
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	200017b4 	.word	0x200017b4
 80043d0:	200017b0 	.word	0x200017b0
 80043d4:	200017a4 	.word	0x200017a4

080043d8 <BSP_LIGHT_SENSOR_GetExposureTime>:
  * @param Instance    Light sensor instance.
  * @param pExposureTime    Pointer to the current exposure time value.
  * @retval BSP status
  */
int32_t BSP_LIGHT_SENSOR_GetExposureTime(const uint32_t Instance, uint32_t *pExposureTime)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= LIGHT_SENSOR_INSTANCES_NBR)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d003      	beq.n	80043f0 <BSP_LIGHT_SENSOR_GetExposureTime+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80043e8:	f06f 0301 	mvn.w	r3, #1
 80043ec:	60fb      	str	r3, [r7, #12]
 80043ee:	e014      	b.n	800441a <BSP_LIGHT_SENSOR_GetExposureTime+0x42>
  }
  else if (VEML3235_LIGHT_SENSOR_Drv[Instance]->GetExposureTime(VEML3235_LIGHT_SENSOR_CompObj[Instance],
 80043f0:	4a0c      	ldr	r2, [pc, #48]	; (8004424 <BSP_LIGHT_SENSOR_GetExposureTime+0x4c>)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	490b      	ldr	r1, [pc, #44]	; (8004428 <BSP_LIGHT_SENSOR_GetExposureTime+0x50>)
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004402:	6839      	ldr	r1, [r7, #0]
 8004404:	4610      	mov	r0, r2
 8004406:	4798      	blx	r3
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	da03      	bge.n	8004416 <BSP_LIGHT_SENSOR_GetExposureTime+0x3e>
                                                                pExposureTime) < 0)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800440e:	f06f 0304 	mvn.w	r3, #4
 8004412:	60fb      	str	r3, [r7, #12]
 8004414:	e001      	b.n	800441a <BSP_LIGHT_SENSOR_GetExposureTime+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8004416:	2300      	movs	r3, #0
 8004418:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800441a:	68fb      	ldr	r3, [r7, #12]
}
 800441c:	4618      	mov	r0, r3
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	200017b4 	.word	0x200017b4
 8004428:	200017b0 	.word	0x200017b0

0800442c <BSP_LIGHT_SENSOR_Start>:
  * @param Instance    Light sensor instance.
  * @param Mode    Measurement mode (continuous mode)
  * @retval BSP status
  */
int32_t BSP_LIGHT_SENSOR_Start(uint32_t Instance, uint8_t Mode)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	460b      	mov	r3, r1
 8004436:	70fb      	strb	r3, [r7, #3]
  int32_t ret;

  if (Instance >= LIGHT_SENSOR_INSTANCES_NBR)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d003      	beq.n	8004446 <BSP_LIGHT_SENSOR_Start+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800443e:	f06f 0301 	mvn.w	r3, #1
 8004442:	60fb      	str	r3, [r7, #12]
 8004444:	e014      	b.n	8004470 <BSP_LIGHT_SENSOR_Start+0x44>
  }
  else if (VEML3235_LIGHT_SENSOR_Drv[Instance]->Start(VEML3235_LIGHT_SENSOR_CompObj[Instance], Mode) < 0)
 8004446:	4a0d      	ldr	r2, [pc, #52]	; (800447c <BSP_LIGHT_SENSOR_Start+0x50>)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800444e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004450:	490b      	ldr	r1, [pc, #44]	; (8004480 <BSP_LIGHT_SENSOR_Start+0x54>)
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004458:	78f9      	ldrb	r1, [r7, #3]
 800445a:	4610      	mov	r0, r2
 800445c:	4798      	blx	r3
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	da03      	bge.n	800446c <BSP_LIGHT_SENSOR_Start+0x40>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004464:	f06f 0304 	mvn.w	r3, #4
 8004468:	60fb      	str	r3, [r7, #12]
 800446a:	e001      	b.n	8004470 <BSP_LIGHT_SENSOR_Start+0x44>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800446c:	2300      	movs	r3, #0
 800446e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004470:	68fb      	ldr	r3, [r7, #12]
}
 8004472:	4618      	mov	r0, r3
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	200017b4 	.word	0x200017b4
 8004480:	200017b0 	.word	0x200017b0

08004484 <BSP_LIGHT_SENSOR_Stop>:
  * @brief Stop the measurement on all channels.
  * @param Instance    Light sensor instance.
  * @retval BSP status
  */
int32_t BSP_LIGHT_SENSOR_Stop(uint32_t Instance)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= LIGHT_SENSOR_INSTANCES_NBR)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <BSP_LIGHT_SENSOR_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004492:	f06f 0301 	mvn.w	r3, #1
 8004496:	60fb      	str	r3, [r7, #12]
 8004498:	e013      	b.n	80044c2 <BSP_LIGHT_SENSOR_Stop+0x3e>
  }
  else if (VEML3235_LIGHT_SENSOR_Drv[Instance]->Stop(VEML3235_LIGHT_SENSOR_CompObj[Instance]) < 0)
 800449a:	4a0c      	ldr	r2, [pc, #48]	; (80044cc <BSP_LIGHT_SENSOR_Stop+0x48>)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a4:	490a      	ldr	r1, [pc, #40]	; (80044d0 <BSP_LIGHT_SENSOR_Stop+0x4c>)
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80044ac:	4610      	mov	r0, r2
 80044ae:	4798      	blx	r3
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	da03      	bge.n	80044be <BSP_LIGHT_SENSOR_Stop+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80044b6:	f06f 0304 	mvn.w	r3, #4
 80044ba:	60fb      	str	r3, [r7, #12]
 80044bc:	e001      	b.n	80044c2 <BSP_LIGHT_SENSOR_Stop+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80044be:	2300      	movs	r3, #0
 80044c0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80044c2:	68fb      	ldr	r3, [r7, #12]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3710      	adds	r7, #16
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	200017b4 	.word	0x200017b4
 80044d0:	200017b0 	.word	0x200017b0

080044d4 <BSP_LIGHT_SENSOR_GetValues>:
  * @note  pResult[0] for ALS channel value, pResult[1] for white channel value.
  * @note The array size must match the number of channels of the device.
  * @retval BSP status
  */
int32_t BSP_LIGHT_SENSOR_GetValues(const uint32_t Instance, uint32_t *pResult)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= LIGHT_SENSOR_INSTANCES_NBR)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d003      	beq.n	80044ec <BSP_LIGHT_SENSOR_GetValues+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80044e4:	f06f 0301 	mvn.w	r3, #1
 80044e8:	60fb      	str	r3, [r7, #12]
 80044ea:	e014      	b.n	8004516 <BSP_LIGHT_SENSOR_GetValues+0x42>
  }
  else if (VEML3235_LIGHT_SENSOR_Drv[Instance]->GetValues(VEML3235_LIGHT_SENSOR_CompObj[Instance], pResult) < 0)
 80044ec:	4a0c      	ldr	r2, [pc, #48]	; (8004520 <BSP_LIGHT_SENSOR_GetValues+0x4c>)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f6:	490b      	ldr	r1, [pc, #44]	; (8004524 <BSP_LIGHT_SENSOR_GetValues+0x50>)
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80044fe:	6839      	ldr	r1, [r7, #0]
 8004500:	4610      	mov	r0, r2
 8004502:	4798      	blx	r3
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	da03      	bge.n	8004512 <BSP_LIGHT_SENSOR_GetValues+0x3e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800450a:	f06f 0304 	mvn.w	r3, #4
 800450e:	60fb      	str	r3, [r7, #12]
 8004510:	e001      	b.n	8004516 <BSP_LIGHT_SENSOR_GetValues+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8004512:	2300      	movs	r3, #0
 8004514:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004516:	68fb      	ldr	r3, [r7, #12]
}
 8004518:	4618      	mov	r0, r3
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	200017b4 	.word	0x200017b4
 8004524:	200017b0 	.word	0x200017b0

08004528 <VEML3235_Probe>:
/**
  * @brief  Probe the VEML3235 motion sensor driver.
  * @retval BSP status.
  */
static int32_t VEML3235_Probe(uint32_t Instance)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b08a      	sub	sp, #40	; 0x28
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  int32_t                 status = BSP_ERROR_NONE;
 8004530:	2300      	movs	r3, #0
 8004532:	627b      	str	r3, [r7, #36]	; 0x24
  VEML3235_IO_t            IOCtx;
  static VEML3235_Object_t VEML3235_Obj;

  /* Configure the motion sensor driver */
  IOCtx.ReadAddress   = VEML3235_I2C_READ_ADD;
 8004534:	2321      	movs	r3, #33	; 0x21
 8004536:	823b      	strh	r3, [r7, #16]
  IOCtx.WriteAddress  = VEML3235_I2C_WRITE_ADD;
 8004538:	2320      	movs	r3, #32
 800453a:	827b      	strh	r3, [r7, #18]
  IOCtx.Init          = BSP_I2C2_Init;
 800453c:	4b23      	ldr	r3, [pc, #140]	; (80045cc <VEML3235_Probe+0xa4>)
 800453e:	60bb      	str	r3, [r7, #8]
  IOCtx.DeInit        = BSP_I2C2_DeInit;
 8004540:	4b23      	ldr	r3, [pc, #140]	; (80045d0 <VEML3235_Probe+0xa8>)
 8004542:	60fb      	str	r3, [r7, #12]
  IOCtx.IsReady       = BSP_I2C2_IsReady;
 8004544:	4b23      	ldr	r3, [pc, #140]	; (80045d4 <VEML3235_Probe+0xac>)
 8004546:	617b      	str	r3, [r7, #20]
  IOCtx.ReadReg       = BSP_I2C2_ReadReg;
 8004548:	4b23      	ldr	r3, [pc, #140]	; (80045d8 <VEML3235_Probe+0xb0>)
 800454a:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg      = BSP_I2C2_WriteReg;
 800454c:	4b23      	ldr	r3, [pc, #140]	; (80045dc <VEML3235_Probe+0xb4>)
 800454e:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick       = BSP_GetTick;
 8004550:	4b23      	ldr	r3, [pc, #140]	; (80045e0 <VEML3235_Probe+0xb8>)
 8004552:	623b      	str	r3, [r7, #32]

  /* Register Component Bus IO operations */
  if (VEML3235_RegisterBusIO(&VEML3235_Obj, &IOCtx) != VEML3235_OK)
 8004554:	f107 0308 	add.w	r3, r7, #8
 8004558:	4619      	mov	r1, r3
 800455a:	4822      	ldr	r0, [pc, #136]	; (80045e4 <VEML3235_Probe+0xbc>)
 800455c:	f009 fc74 	bl	800de48 <VEML3235_RegisterBusIO>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <VEML3235_Probe+0x46>
  {
    status = BSP_ERROR_BUS_FAILURE;
 8004566:	f06f 0307 	mvn.w	r3, #7
 800456a:	627b      	str	r3, [r7, #36]	; 0x24
 800456c:	e029      	b.n	80045c2 <VEML3235_Probe+0x9a>
  }
  else if (HAL_I2C_IsDeviceReady(&hbus_i2c2, IOCtx.ReadAddress, 300, 2000) != HAL_OK)
 800456e:	8a39      	ldrh	r1, [r7, #16]
 8004570:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004574:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004578:	481b      	ldr	r0, [pc, #108]	; (80045e8 <VEML3235_Probe+0xc0>)
 800457a:	f010 f8ab 	bl	80146d4 <HAL_I2C_IsDeviceReady>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d003      	beq.n	800458c <VEML3235_Probe+0x64>
  {
    /* Component failure*/
    status = BSP_ERROR_COMPONENT_FAILURE;
 8004584:	f06f 0304 	mvn.w	r3, #4
 8004588:	627b      	str	r3, [r7, #36]	; 0x24
 800458a:	e01a      	b.n	80045c2 <VEML3235_Probe+0x9a>
  }
  else
  {
    VEML3235_LIGHT_SENSOR_CompObj[Instance] = &VEML3235_Obj;
 800458c:	4a17      	ldr	r2, [pc, #92]	; (80045ec <VEML3235_Probe+0xc4>)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4914      	ldr	r1, [pc, #80]	; (80045e4 <VEML3235_Probe+0xbc>)
 8004592:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    VEML3235_LIGHT_SENSOR_Drv[Instance] = (LIGHT_SENSOR_Drv_t *)&VEML3235_Driver;
 8004596:	4a16      	ldr	r2, [pc, #88]	; (80045f0 <VEML3235_Probe+0xc8>)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4916      	ldr	r1, [pc, #88]	; (80045f4 <VEML3235_Probe+0xcc>)
 800459c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    /* Initialize the component */
    if (VEML3235_LIGHT_SENSOR_Drv[Instance]->Init(VEML3235_LIGHT_SENSOR_CompObj[Instance]) < 0)
 80045a0:	4a13      	ldr	r2, [pc, #76]	; (80045f0 <VEML3235_Probe+0xc8>)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4910      	ldr	r1, [pc, #64]	; (80045ec <VEML3235_Probe+0xc4>)
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80045b2:	4610      	mov	r0, r2
 80045b4:	4798      	blx	r3
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	da02      	bge.n	80045c2 <VEML3235_Probe+0x9a>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 80045bc:	f06f 0304 	mvn.w	r3, #4
 80045c0:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  return status;
 80045c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3728      	adds	r7, #40	; 0x28
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	08002139 	.word	0x08002139
 80045d0:	080021ad 	.word	0x080021ad
 80045d4:	080023e9 	.word	0x080023e9
 80045d8:	080022d5 	.word	0x080022d5
 80045dc:	08002279 	.word	0x08002279
 80045e0:	08002421 	.word	0x08002421
 80045e4:	200017b8 	.word	0x200017b8
 80045e8:	200014d0 	.word	0x200014d0
 80045ec:	200017b0 	.word	0x200017b0
 80045f0:	200017b4 	.word	0x200017b4
 80045f4:	20000188 	.word	0x20000188

080045f8 <BSP_MOTION_SENSOR_Init>:
  *         - MOTION_GYRO and/or MOTION_ACCELERO for instance 0
  *         - MOTION_MAGNETO for instance 1
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8004602:	2300      	movs	r3, #0
 8004604:	60fb      	str	r3, [r7, #12]

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d903      	bls.n	8004614 <BSP_MOTION_SENSOR_Init+0x1c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 800460c:	f06f 0301 	mvn.w	r3, #1
 8004610:	60fb      	str	r3, [r7, #12]
 8004612:	e036      	b.n	8004682 <BSP_MOTION_SENSOR_Init+0x8a>
  }
  else if (((Instance == 0U) && ((Functions & MOTION_MAGNETO) != 0U))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d104      	bne.n	8004624 <BSP_MOTION_SENSOR_Init+0x2c>
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	f003 0304 	and.w	r3, r3, #4
 8004620:	2b00      	cmp	r3, #0
 8004622:	d107      	bne.n	8004634 <BSP_MOTION_SENSOR_Init+0x3c>
           || ((Instance == 1U) && ((Functions & (MOTION_GYRO | MOTION_ACCELERO)) != 0U)))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d108      	bne.n	800463c <BSP_MOTION_SENSOR_Init+0x44>
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	f003 0303 	and.w	r3, r3, #3
 8004630:	2b00      	cmp	r3, #0
 8004632:	d003      	beq.n	800463c <BSP_MOTION_SENSOR_Init+0x44>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8004634:	f06f 030a 	mvn.w	r3, #10
 8004638:	60fb      	str	r3, [r7, #12]
 800463a:	e022      	b.n	8004682 <BSP_MOTION_SENSOR_Init+0x8a>
  }
  else
  {
    /* Probe the motion sensor */
    if (Instance == 0U)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d109      	bne.n	8004656 <BSP_MOTION_SENSOR_Init+0x5e>
    {
      /* Probe the ISM330DHCX sensor */
      if (ISM330DHCX_Probe(Functions) != BSP_ERROR_NONE)
 8004642:	6838      	ldr	r0, [r7, #0]
 8004644:	f000 fc26 	bl	8004e94 <ISM330DHCX_Probe>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00c      	beq.n	8004668 <BSP_MOTION_SENSOR_Init+0x70>
      {
        status = BSP_ERROR_COMPONENT_FAILURE;
 800464e:	f06f 0304 	mvn.w	r3, #4
 8004652:	60fb      	str	r3, [r7, #12]
 8004654:	e008      	b.n	8004668 <BSP_MOTION_SENSOR_Init+0x70>
      }
    }
    else /* Instance = 1 */
    {
      /* Probe the IIS2MDC sensor */
      if (IIS2MDC_Probe(Functions) != BSP_ERROR_NONE)
 8004656:	6838      	ldr	r0, [r7, #0]
 8004658:	f000 fc92 	bl	8004f80 <IIS2MDC_Probe>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d002      	beq.n	8004668 <BSP_MOTION_SENSOR_Init+0x70>
      {
        status = BSP_ERROR_COMPONENT_FAILURE;
 8004662:	f06f 0304 	mvn.w	r3, #4
 8004666:	60fb      	str	r3, [r7, #12]
      }
    }

    if (status == BSP_ERROR_NONE)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d109      	bne.n	8004682 <BSP_MOTION_SENSOR_Init+0x8a>
    {
      /* Store current initialized functions */
      Motion_Sensor_Ctx[Instance].Functions |= Functions;
 800466e:	4a07      	ldr	r2, [pc, #28]	; (800468c <BSP_MOTION_SENSOR_Init+0x94>)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	431a      	orrs	r2, r3
 800467a:	4904      	ldr	r1, [pc, #16]	; (800468c <BSP_MOTION_SENSOR_Init+0x94>)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }
  return status;
 8004682:	68fb      	ldr	r3, [r7, #12]
}
 8004684:	4618      	mov	r0, r3
 8004686:	3710      	adds	r7, #16
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	200017e4 	.word	0x200017e4

08004690 <BSP_MOTION_SENSOR_DeInit>:
  * @brief  De-initialize the motion sensor.
  * @param  Instance Motion sensor instance.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_DeInit(uint32_t Instance)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8004698:	2300      	movs	r3, #0
 800469a:	60fb      	str	r3, [r7, #12]

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d903      	bls.n	80046aa <BSP_MOTION_SENSOR_DeInit+0x1a>
  {
    status = BSP_ERROR_WRONG_PARAM;
 80046a2:	f06f 0301 	mvn.w	r3, #1
 80046a6:	60fb      	str	r3, [r7, #12]
 80046a8:	e01c      	b.n	80046e4 <BSP_MOTION_SENSOR_DeInit+0x54>
  }
  else if (Motion_Sensor_Ctx[Instance].Functions != 0U)
 80046aa:	4a11      	ldr	r2, [pc, #68]	; (80046f0 <BSP_MOTION_SENSOR_DeInit+0x60>)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d016      	beq.n	80046e4 <BSP_MOTION_SENSOR_DeInit+0x54>
  {
    /* De-initialize the motion sensor */
    if (Motion_Sensor_Drv[Instance]->DeInit(Motion_Sensor_CompObj[Instance]) < 0)
 80046b6:	4a0f      	ldr	r2, [pc, #60]	; (80046f4 <BSP_MOTION_SENSOR_DeInit+0x64>)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	490d      	ldr	r1, [pc, #52]	; (80046f8 <BSP_MOTION_SENSOR_DeInit+0x68>)
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80046c8:	4610      	mov	r0, r2
 80046ca:	4798      	blx	r3
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	da03      	bge.n	80046da <BSP_MOTION_SENSOR_DeInit+0x4a>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 80046d2:	f06f 0304 	mvn.w	r3, #4
 80046d6:	60fb      	str	r3, [r7, #12]
 80046d8:	e004      	b.n	80046e4 <BSP_MOTION_SENSOR_DeInit+0x54>
    }
    else
    {
      /* Reset current initialized functions */
      Motion_Sensor_Ctx[Instance].Functions = 0U;
 80046da:	4a05      	ldr	r2, [pc, #20]	; (80046f0 <BSP_MOTION_SENSOR_DeInit+0x60>)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2100      	movs	r1, #0
 80046e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  }
  else
  {
    /* Nothing to do (not initialized) */
  }
  return status;
 80046e4:	68fb      	ldr	r3, [r7, #12]
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	200017e4 	.word	0x200017e4
 80046f4:	200017f4 	.word	0x200017f4
 80046f8:	200017ec 	.word	0x200017ec

080046fc <BSP_MOTION_SENSOR_GetCapabilities>:
  * @param  Instance Motion sensor instance.
  * @param  Capabilities Pointer to motion sensor capabilities.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_GetCapabilities(const uint32_t Instance, MOTION_SENSOR_Capabilities_t *Capabilities)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8004706:	2300      	movs	r3, #0
 8004708:	60fb      	str	r3, [r7, #12]

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Capabilities == NULL))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d802      	bhi.n	8004716 <BSP_MOTION_SENSOR_GetCapabilities+0x1a>
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d103      	bne.n	800471e <BSP_MOTION_SENSOR_GetCapabilities+0x22>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8004716:	f06f 0301 	mvn.w	r3, #1
 800471a:	60fb      	str	r3, [r7, #12]
 800471c:	e01b      	b.n	8004756 <BSP_MOTION_SENSOR_GetCapabilities+0x5a>
  }
  else if (Motion_Sensor_Ctx[Instance].Functions == 0U)
 800471e:	4a10      	ldr	r2, [pc, #64]	; (8004760 <BSP_MOTION_SENSOR_GetCapabilities+0x64>)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d103      	bne.n	8004732 <BSP_MOTION_SENSOR_GetCapabilities+0x36>
  {
    /* Driver not initialized */
    status = BSP_ERROR_NO_INIT;
 800472a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800472e:	60fb      	str	r3, [r7, #12]
 8004730:	e011      	b.n	8004756 <BSP_MOTION_SENSOR_GetCapabilities+0x5a>
  }
  else
  {
    /* Get the capabilities of the motion sensor */
    if (Motion_Sensor_Drv[Instance]->GetCapabilities(Motion_Sensor_CompObj[Instance], Capabilities) < 0)
 8004732:	4a0c      	ldr	r2, [pc, #48]	; (8004764 <BSP_MOTION_SENSOR_GetCapabilities+0x68>)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	490a      	ldr	r1, [pc, #40]	; (8004768 <BSP_MOTION_SENSOR_GetCapabilities+0x6c>)
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004744:	6839      	ldr	r1, [r7, #0]
 8004746:	4610      	mov	r0, r2
 8004748:	4798      	blx	r3
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	da02      	bge.n	8004756 <BSP_MOTION_SENSOR_GetCapabilities+0x5a>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8004750:	f06f 0304 	mvn.w	r3, #4
 8004754:	60fb      	str	r3, [r7, #12]
    }
  }

  return status;
 8004756:	68fb      	ldr	r3, [r7, #12]
}
 8004758:	4618      	mov	r0, r3
 800475a:	3710      	adds	r7, #16
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	200017e4 	.word	0x200017e4
 8004764:	200017f4 	.word	0x200017f4
 8004768:	200017ec 	.word	0x200017ec

0800476c <BSP_MOTION_SENSOR_ReadID>:
  * @param  Instance Motion sensor instance.
  * @param  Id Pointer to motion sensor ID.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_ReadID(const uint32_t Instance, uint8_t *Id)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8004776:	2300      	movs	r3, #0
 8004778:	60fb      	str	r3, [r7, #12]

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Id == NULL))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d802      	bhi.n	8004786 <BSP_MOTION_SENSOR_ReadID+0x1a>
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d103      	bne.n	800478e <BSP_MOTION_SENSOR_ReadID+0x22>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8004786:	f06f 0301 	mvn.w	r3, #1
 800478a:	60fb      	str	r3, [r7, #12]
 800478c:	e01b      	b.n	80047c6 <BSP_MOTION_SENSOR_ReadID+0x5a>
  }
  else if (Motion_Sensor_Ctx[Instance].Functions == 0U)
 800478e:	4a10      	ldr	r2, [pc, #64]	; (80047d0 <BSP_MOTION_SENSOR_ReadID+0x64>)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d103      	bne.n	80047a2 <BSP_MOTION_SENSOR_ReadID+0x36>
  {
    /* Driver not initialized */
    status = BSP_ERROR_NO_INIT;
 800479a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800479e:	60fb      	str	r3, [r7, #12]
 80047a0:	e011      	b.n	80047c6 <BSP_MOTION_SENSOR_ReadID+0x5a>
  }
  else
  {
    /* Read the motion sensor ID */
    if (Motion_Sensor_Drv[Instance]->ReadID(Motion_Sensor_CompObj[Instance], Id) < 0)
 80047a2:	4a0c      	ldr	r2, [pc, #48]	; (80047d4 <BSP_MOTION_SENSOR_ReadID+0x68>)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	490a      	ldr	r1, [pc, #40]	; (80047d8 <BSP_MOTION_SENSOR_ReadID+0x6c>)
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80047b4:	6839      	ldr	r1, [r7, #0]
 80047b6:	4610      	mov	r0, r2
 80047b8:	4798      	blx	r3
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	da02      	bge.n	80047c6 <BSP_MOTION_SENSOR_ReadID+0x5a>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 80047c0:	f06f 0304 	mvn.w	r3, #4
 80047c4:	60fb      	str	r3, [r7, #12]
    }
  }

  return status;
 80047c6:	68fb      	ldr	r3, [r7, #12]
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	200017e4 	.word	0x200017e4
 80047d4:	200017f4 	.word	0x200017f4
 80047d8:	200017ec 	.word	0x200017ec

080047dc <BSP_MOTION_SENSOR_Enable>:
  *         - MOTION_GYRO or MOTION_ACCELERO for instance 0
  *         - MOTION_MAGNETO for instance 1
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 80047e6:	2300      	movs	r3, #0
 80047e8:	60fb      	str	r3, [r7, #12]
  uint8_t index;

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d903      	bls.n	80047f8 <BSP_MOTION_SENSOR_Enable+0x1c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 80047f0:	f06f 0301 	mvn.w	r3, #1
 80047f4:	60fb      	str	r3, [r7, #12]
 80047f6:	e041      	b.n	800487c <BSP_MOTION_SENSOR_Enable+0xa0>
  }
  else if (((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d104      	bne.n	8004808 <BSP_MOTION_SENSOR_Enable+0x2c>
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	f003 0304 	and.w	r3, r3, #4
 8004804:	2b00      	cmp	r3, #0
 8004806:	d107      	bne.n	8004818 <BSP_MOTION_SENSOR_Enable+0x3c>
           || ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U)))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d108      	bne.n	8004820 <BSP_MOTION_SENSOR_Enable+0x44>
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	f003 0303 	and.w	r3, r3, #3
 8004814:	2b00      	cmp	r3, #0
 8004816:	d003      	beq.n	8004820 <BSP_MOTION_SENSOR_Enable+0x44>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8004818:	f06f 030a 	mvn.w	r3, #10
 800481c:	60fb      	str	r3, [r7, #12]
 800481e:	e02d      	b.n	800487c <BSP_MOTION_SENSOR_Enable+0xa0>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8004820:	4a19      	ldr	r2, [pc, #100]	; (8004888 <BSP_MOTION_SENSOR_Enable+0xac>)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	4013      	ands	r3, r2
 800482c:	2b00      	cmp	r3, #0
 800482e:	d103      	bne.n	8004838 <BSP_MOTION_SENSOR_Enable+0x5c>
  {
    /* Driver not initialized */
    status = BSP_ERROR_NO_INIT;
 8004830:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004834:	60fb      	str	r3, [r7, #12]
 8004836:	e021      	b.n	800487c <BSP_MOTION_SENSOR_Enable+0xa0>
  }
  else
  {
    /* Enable the motion sensor function */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d006      	beq.n	800484c <BSP_MOTION_SENSOR_Enable+0x70>
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	2b02      	cmp	r3, #2
 8004842:	d101      	bne.n	8004848 <BSP_MOTION_SENSOR_Enable+0x6c>
 8004844:	2301      	movs	r3, #1
 8004846:	e002      	b.n	800484e <BSP_MOTION_SENSOR_Enable+0x72>
 8004848:	2302      	movs	r3, #2
 800484a:	e000      	b.n	800484e <BSP_MOTION_SENSOR_Enable+0x72>
 800484c:	2300      	movs	r3, #0
 800484e:	72fb      	strb	r3, [r7, #11]
    if (Motion_Sensor_FuncDrv[Instance][index]->Enable(Motion_Sensor_CompObj[Instance]) < 0)
 8004850:	7af9      	ldrb	r1, [r7, #11]
 8004852:	480e      	ldr	r0, [pc, #56]	; (800488c <BSP_MOTION_SENSOR_Enable+0xb0>)
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	4613      	mov	r3, r2
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	4413      	add	r3, r2
 800485c:	440b      	add	r3, r1
 800485e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	490a      	ldr	r1, [pc, #40]	; (8004890 <BSP_MOTION_SENSOR_Enable+0xb4>)
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800486c:	4610      	mov	r0, r2
 800486e:	4798      	blx	r3
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	da02      	bge.n	800487c <BSP_MOTION_SENSOR_Enable+0xa0>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8004876:	f06f 0304 	mvn.w	r3, #4
 800487a:	60fb      	str	r3, [r7, #12]
    }
  }

  return status;
 800487c:	68fb      	ldr	r3, [r7, #12]
}
 800487e:	4618      	mov	r0, r3
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	200017e4 	.word	0x200017e4
 800488c:	200017fc 	.word	0x200017fc
 8004890:	200017ec 	.word	0x200017ec

08004894 <BSP_MOTION_SENSOR_Disable>:
  *         - MOTION_GYRO or MOTION_ACCELERO for instance 0
  *         - MOTION_MAGNETO for instance 1
  * @retval BSP status
  */
int32_t BSP_MOTION_SENSOR_Disable(uint32_t Instance, uint32_t Function)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 800489e:	2300      	movs	r3, #0
 80048a0:	60fb      	str	r3, [r7, #12]
  uint8_t index;

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d903      	bls.n	80048b0 <BSP_MOTION_SENSOR_Disable+0x1c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 80048a8:	f06f 0301 	mvn.w	r3, #1
 80048ac:	60fb      	str	r3, [r7, #12]
 80048ae:	e041      	b.n	8004934 <BSP_MOTION_SENSOR_Disable+0xa0>
  }
  else if (((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d104      	bne.n	80048c0 <BSP_MOTION_SENSOR_Disable+0x2c>
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	f003 0304 	and.w	r3, r3, #4
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d107      	bne.n	80048d0 <BSP_MOTION_SENSOR_Disable+0x3c>
           || ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U)))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d108      	bne.n	80048d8 <BSP_MOTION_SENSOR_Disable+0x44>
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	f003 0303 	and.w	r3, r3, #3
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d003      	beq.n	80048d8 <BSP_MOTION_SENSOR_Disable+0x44>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80048d0:	f06f 030a 	mvn.w	r3, #10
 80048d4:	60fb      	str	r3, [r7, #12]
 80048d6:	e02d      	b.n	8004934 <BSP_MOTION_SENSOR_Disable+0xa0>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 80048d8:	4a19      	ldr	r2, [pc, #100]	; (8004940 <BSP_MOTION_SENSOR_Disable+0xac>)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	4013      	ands	r3, r2
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d103      	bne.n	80048f0 <BSP_MOTION_SENSOR_Disable+0x5c>
  {
    /* Driver not initialized */
    status = BSP_ERROR_NO_INIT;
 80048e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048ec:	60fb      	str	r3, [r7, #12]
 80048ee:	e021      	b.n	8004934 <BSP_MOTION_SENSOR_Disable+0xa0>
  }
  else
  {
    /* Disable the motion sensor function */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d006      	beq.n	8004904 <BSP_MOTION_SENSOR_Disable+0x70>
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d101      	bne.n	8004900 <BSP_MOTION_SENSOR_Disable+0x6c>
 80048fc:	2301      	movs	r3, #1
 80048fe:	e002      	b.n	8004906 <BSP_MOTION_SENSOR_Disable+0x72>
 8004900:	2302      	movs	r3, #2
 8004902:	e000      	b.n	8004906 <BSP_MOTION_SENSOR_Disable+0x72>
 8004904:	2300      	movs	r3, #0
 8004906:	72fb      	strb	r3, [r7, #11]
    if (Motion_Sensor_FuncDrv[Instance][index]->Disable(Motion_Sensor_CompObj[Instance]) < 0)
 8004908:	7af9      	ldrb	r1, [r7, #11]
 800490a:	480e      	ldr	r0, [pc, #56]	; (8004944 <BSP_MOTION_SENSOR_Disable+0xb0>)
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	4613      	mov	r3, r2
 8004910:	005b      	lsls	r3, r3, #1
 8004912:	4413      	add	r3, r2
 8004914:	440b      	add	r3, r1
 8004916:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	490a      	ldr	r1, [pc, #40]	; (8004948 <BSP_MOTION_SENSOR_Disable+0xb4>)
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004924:	4610      	mov	r0, r2
 8004926:	4798      	blx	r3
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	da02      	bge.n	8004934 <BSP_MOTION_SENSOR_Disable+0xa0>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 800492e:	f06f 0304 	mvn.w	r3, #4
 8004932:	60fb      	str	r3, [r7, #12]
    }
  }

  return status;
 8004934:	68fb      	ldr	r3, [r7, #12]
}
 8004936:	4618      	mov	r0, r3
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	200017e4 	.word	0x200017e4
 8004944:	200017fc 	.word	0x200017fc
 8004948:	200017ec 	.word	0x200017ec

0800494c <BSP_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Axes Pointer to motion sensor axes.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_GetAxes(const uint32_t Instance, uint32_t Function, BSP_MOTION_SENSOR_Axes_t *Axes)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8004958:	2300      	movs	r3, #0
 800495a:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Axes == NULL))
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d802      	bhi.n	8004968 <BSP_MOTION_SENSOR_GetAxes+0x1c>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d103      	bne.n	8004970 <BSP_MOTION_SENSOR_GetAxes+0x24>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8004968:	f06f 0301 	mvn.w	r3, #1
 800496c:	617b      	str	r3, [r7, #20]
 800496e:	e042      	b.n	80049f6 <BSP_MOTION_SENSOR_GetAxes+0xaa>
  }
  else if (((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d104      	bne.n	8004980 <BSP_MOTION_SENSOR_GetAxes+0x34>
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	f003 0304 	and.w	r3, r3, #4
 800497c:	2b00      	cmp	r3, #0
 800497e:	d107      	bne.n	8004990 <BSP_MOTION_SENSOR_GetAxes+0x44>
           || ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U)))
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d108      	bne.n	8004998 <BSP_MOTION_SENSOR_GetAxes+0x4c>
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	f003 0303 	and.w	r3, r3, #3
 800498c:	2b00      	cmp	r3, #0
 800498e:	d003      	beq.n	8004998 <BSP_MOTION_SENSOR_GetAxes+0x4c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8004990:	f06f 030a 	mvn.w	r3, #10
 8004994:	617b      	str	r3, [r7, #20]
 8004996:	e02e      	b.n	80049f6 <BSP_MOTION_SENSOR_GetAxes+0xaa>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8004998:	4a19      	ldr	r2, [pc, #100]	; (8004a00 <BSP_MOTION_SENSOR_GetAxes+0xb4>)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	4013      	ands	r3, r2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d103      	bne.n	80049b0 <BSP_MOTION_SENSOR_GetAxes+0x64>
  {
    status = BSP_ERROR_NO_INIT;
 80049a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049ac:	617b      	str	r3, [r7, #20]
 80049ae:	e022      	b.n	80049f6 <BSP_MOTION_SENSOR_GetAxes+0xaa>
  }
  else
  {
    /* Get the motion sensor axes */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d006      	beq.n	80049c4 <BSP_MOTION_SENSOR_GetAxes+0x78>
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d101      	bne.n	80049c0 <BSP_MOTION_SENSOR_GetAxes+0x74>
 80049bc:	2301      	movs	r3, #1
 80049be:	e002      	b.n	80049c6 <BSP_MOTION_SENSOR_GetAxes+0x7a>
 80049c0:	2302      	movs	r3, #2
 80049c2:	e000      	b.n	80049c6 <BSP_MOTION_SENSOR_GetAxes+0x7a>
 80049c4:	2300      	movs	r3, #0
 80049c6:	74fb      	strb	r3, [r7, #19]
    if (Motion_Sensor_FuncDrv[Instance][index]->GetAxes(Motion_Sensor_CompObj[Instance], Axes) < 0)
 80049c8:	7cf9      	ldrb	r1, [r7, #19]
 80049ca:	480e      	ldr	r0, [pc, #56]	; (8004a04 <BSP_MOTION_SENSOR_GetAxes+0xb8>)
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	4613      	mov	r3, r2
 80049d0:	005b      	lsls	r3, r3, #1
 80049d2:	4413      	add	r3, r2
 80049d4:	440b      	add	r3, r1
 80049d6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80049da:	69db      	ldr	r3, [r3, #28]
 80049dc:	490a      	ldr	r1, [pc, #40]	; (8004a08 <BSP_MOTION_SENSOR_GetAxes+0xbc>)
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80049e4:	6879      	ldr	r1, [r7, #4]
 80049e6:	4610      	mov	r0, r2
 80049e8:	4798      	blx	r3
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	da02      	bge.n	80049f6 <BSP_MOTION_SENSOR_GetAxes+0xaa>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 80049f0:	f06f 0304 	mvn.w	r3, #4
 80049f4:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 80049f6:	697b      	ldr	r3, [r7, #20]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3718      	adds	r7, #24
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	200017e4 	.word	0x200017e4
 8004a04:	200017fc 	.word	0x200017fc
 8004a08:	200017ec 	.word	0x200017ec

08004a0c <BSP_MOTION_SENSOR_GetAxesRaw>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Axes Pointer to motion sensor raw axes.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_GetAxesRaw(const uint32_t Instance, uint32_t Function, BSP_MOTION_SENSOR_AxesRaw_t *Axes)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b086      	sub	sp, #24
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Axes == NULL))
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d802      	bhi.n	8004a28 <BSP_MOTION_SENSOR_GetAxesRaw+0x1c>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d103      	bne.n	8004a30 <BSP_MOTION_SENSOR_GetAxesRaw+0x24>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8004a28:	f06f 0301 	mvn.w	r3, #1
 8004a2c:	617b      	str	r3, [r7, #20]
 8004a2e:	e042      	b.n	8004ab6 <BSP_MOTION_SENSOR_GetAxesRaw+0xaa>
  }
  else if (((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d104      	bne.n	8004a40 <BSP_MOTION_SENSOR_GetAxesRaw+0x34>
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	f003 0304 	and.w	r3, r3, #4
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d107      	bne.n	8004a50 <BSP_MOTION_SENSOR_GetAxesRaw+0x44>
           || ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U)))
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d108      	bne.n	8004a58 <BSP_MOTION_SENSOR_GetAxesRaw+0x4c>
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	f003 0303 	and.w	r3, r3, #3
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d003      	beq.n	8004a58 <BSP_MOTION_SENSOR_GetAxesRaw+0x4c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8004a50:	f06f 030a 	mvn.w	r3, #10
 8004a54:	617b      	str	r3, [r7, #20]
 8004a56:	e02e      	b.n	8004ab6 <BSP_MOTION_SENSOR_GetAxesRaw+0xaa>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8004a58:	4a19      	ldr	r2, [pc, #100]	; (8004ac0 <BSP_MOTION_SENSOR_GetAxesRaw+0xb4>)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	4013      	ands	r3, r2
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d103      	bne.n	8004a70 <BSP_MOTION_SENSOR_GetAxesRaw+0x64>
  {
    status = BSP_ERROR_NO_INIT;
 8004a68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a6c:	617b      	str	r3, [r7, #20]
 8004a6e:	e022      	b.n	8004ab6 <BSP_MOTION_SENSOR_GetAxesRaw+0xaa>
  }
  else
  {
    /* Get the motion sensor row axes */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d006      	beq.n	8004a84 <BSP_MOTION_SENSOR_GetAxesRaw+0x78>
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d101      	bne.n	8004a80 <BSP_MOTION_SENSOR_GetAxesRaw+0x74>
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e002      	b.n	8004a86 <BSP_MOTION_SENSOR_GetAxesRaw+0x7a>
 8004a80:	2302      	movs	r3, #2
 8004a82:	e000      	b.n	8004a86 <BSP_MOTION_SENSOR_GetAxesRaw+0x7a>
 8004a84:	2300      	movs	r3, #0
 8004a86:	74fb      	strb	r3, [r7, #19]
    if (Motion_Sensor_FuncDrv[Instance][index]->GetAxesRaw(Motion_Sensor_CompObj[Instance], Axes) < 0)
 8004a88:	7cf9      	ldrb	r1, [r7, #19]
 8004a8a:	480e      	ldr	r0, [pc, #56]	; (8004ac4 <BSP_MOTION_SENSOR_GetAxesRaw+0xb8>)
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	4613      	mov	r3, r2
 8004a90:	005b      	lsls	r3, r3, #1
 8004a92:	4413      	add	r3, r2
 8004a94:	440b      	add	r3, r1
 8004a96:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	490a      	ldr	r1, [pc, #40]	; (8004ac8 <BSP_MOTION_SENSOR_GetAxesRaw+0xbc>)
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004aa4:	6879      	ldr	r1, [r7, #4]
 8004aa6:	4610      	mov	r0, r2
 8004aa8:	4798      	blx	r3
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	da02      	bge.n	8004ab6 <BSP_MOTION_SENSOR_GetAxesRaw+0xaa>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8004ab0:	f06f 0304 	mvn.w	r3, #4
 8004ab4:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8004ab6:	697b      	ldr	r3, [r7, #20]
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3718      	adds	r7, #24
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	200017e4 	.word	0x200017e4
 8004ac4:	200017fc 	.word	0x200017fc
 8004ac8:	200017ec 	.word	0x200017ec

08004acc <BSP_MOTION_SENSOR_GetSensitivity>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Sensitivity Pointer to sensitivity.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_GetSensitivity(const uint32_t Instance, uint32_t Function, float_t *Sensitivity)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Sensitivity == NULL))
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d802      	bhi.n	8004ae8 <BSP_MOTION_SENSOR_GetSensitivity+0x1c>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d103      	bne.n	8004af0 <BSP_MOTION_SENSOR_GetSensitivity+0x24>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8004ae8:	f06f 0301 	mvn.w	r3, #1
 8004aec:	617b      	str	r3, [r7, #20]
 8004aee:	e042      	b.n	8004b76 <BSP_MOTION_SENSOR_GetSensitivity+0xaa>
  }
  else if (((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d104      	bne.n	8004b00 <BSP_MOTION_SENSOR_GetSensitivity+0x34>
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	f003 0304 	and.w	r3, r3, #4
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d107      	bne.n	8004b10 <BSP_MOTION_SENSOR_GetSensitivity+0x44>
           || ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U)))
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d108      	bne.n	8004b18 <BSP_MOTION_SENSOR_GetSensitivity+0x4c>
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	f003 0303 	and.w	r3, r3, #3
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d003      	beq.n	8004b18 <BSP_MOTION_SENSOR_GetSensitivity+0x4c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8004b10:	f06f 030a 	mvn.w	r3, #10
 8004b14:	617b      	str	r3, [r7, #20]
 8004b16:	e02e      	b.n	8004b76 <BSP_MOTION_SENSOR_GetSensitivity+0xaa>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8004b18:	4a19      	ldr	r2, [pc, #100]	; (8004b80 <BSP_MOTION_SENSOR_GetSensitivity+0xb4>)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	4013      	ands	r3, r2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d103      	bne.n	8004b30 <BSP_MOTION_SENSOR_GetSensitivity+0x64>
  {
    status = BSP_ERROR_NO_INIT;
 8004b28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b2c:	617b      	str	r3, [r7, #20]
 8004b2e:	e022      	b.n	8004b76 <BSP_MOTION_SENSOR_GetSensitivity+0xaa>
  }
  else
  {
    /* Get the motion sensor sensitivity */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d006      	beq.n	8004b44 <BSP_MOTION_SENSOR_GetSensitivity+0x78>
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d101      	bne.n	8004b40 <BSP_MOTION_SENSOR_GetSensitivity+0x74>
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e002      	b.n	8004b46 <BSP_MOTION_SENSOR_GetSensitivity+0x7a>
 8004b40:	2302      	movs	r3, #2
 8004b42:	e000      	b.n	8004b46 <BSP_MOTION_SENSOR_GetSensitivity+0x7a>
 8004b44:	2300      	movs	r3, #0
 8004b46:	74fb      	strb	r3, [r7, #19]
    if (Motion_Sensor_FuncDrv[Instance][index]->GetSensitivity(Motion_Sensor_CompObj[Instance], Sensitivity) < 0)
 8004b48:	7cf9      	ldrb	r1, [r7, #19]
 8004b4a:	480e      	ldr	r0, [pc, #56]	; (8004b84 <BSP_MOTION_SENSOR_GetSensitivity+0xb8>)
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	005b      	lsls	r3, r3, #1
 8004b52:	4413      	add	r3, r2
 8004b54:	440b      	add	r3, r1
 8004b56:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	490a      	ldr	r1, [pc, #40]	; (8004b88 <BSP_MOTION_SENSOR_GetSensitivity+0xbc>)
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004b64:	6879      	ldr	r1, [r7, #4]
 8004b66:	4610      	mov	r0, r2
 8004b68:	4798      	blx	r3
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	da02      	bge.n	8004b76 <BSP_MOTION_SENSOR_GetSensitivity+0xaa>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8004b70:	f06f 0304 	mvn.w	r3, #4
 8004b74:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8004b76:	697b      	ldr	r3, [r7, #20]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3718      	adds	r7, #24
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	200017e4 	.word	0x200017e4
 8004b84:	200017fc 	.word	0x200017fc
 8004b88:	200017ec 	.word	0x200017ec

08004b8c <BSP_MOTION_SENSOR_GetOutputDataRate>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Odr Pointer to output data rate.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_GetOutputDataRate(const uint32_t Instance, uint32_t Function, float_t *Odr)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Odr == NULL))
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d802      	bhi.n	8004ba8 <BSP_MOTION_SENSOR_GetOutputDataRate+0x1c>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d103      	bne.n	8004bb0 <BSP_MOTION_SENSOR_GetOutputDataRate+0x24>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8004ba8:	f06f 0301 	mvn.w	r3, #1
 8004bac:	617b      	str	r3, [r7, #20]
 8004bae:	e042      	b.n	8004c36 <BSP_MOTION_SENSOR_GetOutputDataRate+0xaa>
  }
  else if (((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d104      	bne.n	8004bc0 <BSP_MOTION_SENSOR_GetOutputDataRate+0x34>
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	f003 0304 	and.w	r3, r3, #4
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d107      	bne.n	8004bd0 <BSP_MOTION_SENSOR_GetOutputDataRate+0x44>
           || ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U)))
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d108      	bne.n	8004bd8 <BSP_MOTION_SENSOR_GetOutputDataRate+0x4c>
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	f003 0303 	and.w	r3, r3, #3
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d003      	beq.n	8004bd8 <BSP_MOTION_SENSOR_GetOutputDataRate+0x4c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8004bd0:	f06f 030a 	mvn.w	r3, #10
 8004bd4:	617b      	str	r3, [r7, #20]
 8004bd6:	e02e      	b.n	8004c36 <BSP_MOTION_SENSOR_GetOutputDataRate+0xaa>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8004bd8:	4a19      	ldr	r2, [pc, #100]	; (8004c40 <BSP_MOTION_SENSOR_GetOutputDataRate+0xb4>)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	4013      	ands	r3, r2
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d103      	bne.n	8004bf0 <BSP_MOTION_SENSOR_GetOutputDataRate+0x64>
  {
    status = BSP_ERROR_NO_INIT;
 8004be8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004bec:	617b      	str	r3, [r7, #20]
 8004bee:	e022      	b.n	8004c36 <BSP_MOTION_SENSOR_GetOutputDataRate+0xaa>
  }
  else
  {
    /* Get the motion sensor output data rate */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d006      	beq.n	8004c04 <BSP_MOTION_SENSOR_GetOutputDataRate+0x78>
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d101      	bne.n	8004c00 <BSP_MOTION_SENSOR_GetOutputDataRate+0x74>
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e002      	b.n	8004c06 <BSP_MOTION_SENSOR_GetOutputDataRate+0x7a>
 8004c00:	2302      	movs	r3, #2
 8004c02:	e000      	b.n	8004c06 <BSP_MOTION_SENSOR_GetOutputDataRate+0x7a>
 8004c04:	2300      	movs	r3, #0
 8004c06:	74fb      	strb	r3, [r7, #19]
    if (Motion_Sensor_FuncDrv[Instance][index]->GetOutputDataRate(Motion_Sensor_CompObj[Instance], Odr) < 0)
 8004c08:	7cf9      	ldrb	r1, [r7, #19]
 8004c0a:	480e      	ldr	r0, [pc, #56]	; (8004c44 <BSP_MOTION_SENSOR_GetOutputDataRate+0xb8>)
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	4613      	mov	r3, r2
 8004c10:	005b      	lsls	r3, r3, #1
 8004c12:	4413      	add	r3, r2
 8004c14:	440b      	add	r3, r1
 8004c16:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	490a      	ldr	r1, [pc, #40]	; (8004c48 <BSP_MOTION_SENSOR_GetOutputDataRate+0xbc>)
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004c24:	6879      	ldr	r1, [r7, #4]
 8004c26:	4610      	mov	r0, r2
 8004c28:	4798      	blx	r3
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	da02      	bge.n	8004c36 <BSP_MOTION_SENSOR_GetOutputDataRate+0xaa>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8004c30:	f06f 0304 	mvn.w	r3, #4
 8004c34:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8004c36:	697b      	ldr	r3, [r7, #20]
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3718      	adds	r7, #24
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	200017e4 	.word	0x200017e4
 8004c44:	200017fc 	.word	0x200017fc
 8004c48:	200017ec 	.word	0x200017ec

08004c4c <BSP_MOTION_SENSOR_SetOutputDataRate>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Odr Output data rate.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float_t Odr)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b086      	sub	sp, #24
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d903      	bls.n	8004c6c <BSP_MOTION_SENSOR_SetOutputDataRate+0x20>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8004c64:	f06f 0301 	mvn.w	r3, #1
 8004c68:	617b      	str	r3, [r7, #20]
 8004c6a:	e043      	b.n	8004cf4 <BSP_MOTION_SENSOR_SetOutputDataRate+0xa8>
  }
  else if (((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d104      	bne.n	8004c7c <BSP_MOTION_SENSOR_SetOutputDataRate+0x30>
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	f003 0304 	and.w	r3, r3, #4
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d107      	bne.n	8004c8c <BSP_MOTION_SENSOR_SetOutputDataRate+0x40>
           || ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U)))
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d108      	bne.n	8004c94 <BSP_MOTION_SENSOR_SetOutputDataRate+0x48>
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	f003 0303 	and.w	r3, r3, #3
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d003      	beq.n	8004c94 <BSP_MOTION_SENSOR_SetOutputDataRate+0x48>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8004c8c:	f06f 030a 	mvn.w	r3, #10
 8004c90:	617b      	str	r3, [r7, #20]
 8004c92:	e02f      	b.n	8004cf4 <BSP_MOTION_SENSOR_SetOutputDataRate+0xa8>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8004c94:	4a1a      	ldr	r2, [pc, #104]	; (8004d00 <BSP_MOTION_SENSOR_SetOutputDataRate+0xb4>)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d103      	bne.n	8004cac <BSP_MOTION_SENSOR_SetOutputDataRate+0x60>
  {
    status = BSP_ERROR_NO_INIT;
 8004ca4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ca8:	617b      	str	r3, [r7, #20]
 8004caa:	e023      	b.n	8004cf4 <BSP_MOTION_SENSOR_SetOutputDataRate+0xa8>
  }
  else
  {
    /* Set the motion sensor output data rate */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d006      	beq.n	8004cc0 <BSP_MOTION_SENSOR_SetOutputDataRate+0x74>
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d101      	bne.n	8004cbc <BSP_MOTION_SENSOR_SetOutputDataRate+0x70>
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e002      	b.n	8004cc2 <BSP_MOTION_SENSOR_SetOutputDataRate+0x76>
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	e000      	b.n	8004cc2 <BSP_MOTION_SENSOR_SetOutputDataRate+0x76>
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	74fb      	strb	r3, [r7, #19]
    if (Motion_Sensor_FuncDrv[Instance][index]->SetOutputDataRate(Motion_Sensor_CompObj[Instance], Odr) < 0)
 8004cc4:	7cf9      	ldrb	r1, [r7, #19]
 8004cc6:	480f      	ldr	r0, [pc, #60]	; (8004d04 <BSP_MOTION_SENSOR_SetOutputDataRate+0xb8>)
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	005b      	lsls	r3, r3, #1
 8004cce:	4413      	add	r3, r2
 8004cd0:	440b      	add	r3, r1
 8004cd2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	490b      	ldr	r1, [pc, #44]	; (8004d08 <BSP_MOTION_SENSOR_SetOutputDataRate+0xbc>)
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004ce0:	ed97 0a01 	vldr	s0, [r7, #4]
 8004ce4:	4610      	mov	r0, r2
 8004ce6:	4798      	blx	r3
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	da02      	bge.n	8004cf4 <BSP_MOTION_SENSOR_SetOutputDataRate+0xa8>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8004cee:	f06f 0304 	mvn.w	r3, #4
 8004cf2:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8004cf4:	697b      	ldr	r3, [r7, #20]
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3718      	adds	r7, #24
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	200017e4 	.word	0x200017e4
 8004d04:	200017fc 	.word	0x200017fc
 8004d08:	200017ec 	.word	0x200017ec

08004d0c <BSP_MOTION_SENSOR_GetFullScale>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Fullscale Pointer to full scale value.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_GetFullScale(const uint32_t Instance, uint32_t Function, int32_t *Fullscale)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Fullscale == NULL))
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d802      	bhi.n	8004d28 <BSP_MOTION_SENSOR_GetFullScale+0x1c>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d103      	bne.n	8004d30 <BSP_MOTION_SENSOR_GetFullScale+0x24>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8004d28:	f06f 0301 	mvn.w	r3, #1
 8004d2c:	617b      	str	r3, [r7, #20]
 8004d2e:	e042      	b.n	8004db6 <BSP_MOTION_SENSOR_GetFullScale+0xaa>
  }
  else if (((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d104      	bne.n	8004d40 <BSP_MOTION_SENSOR_GetFullScale+0x34>
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	f003 0304 	and.w	r3, r3, #4
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d107      	bne.n	8004d50 <BSP_MOTION_SENSOR_GetFullScale+0x44>
           || ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U)))
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d108      	bne.n	8004d58 <BSP_MOTION_SENSOR_GetFullScale+0x4c>
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	f003 0303 	and.w	r3, r3, #3
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d003      	beq.n	8004d58 <BSP_MOTION_SENSOR_GetFullScale+0x4c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8004d50:	f06f 030a 	mvn.w	r3, #10
 8004d54:	617b      	str	r3, [r7, #20]
 8004d56:	e02e      	b.n	8004db6 <BSP_MOTION_SENSOR_GetFullScale+0xaa>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8004d58:	4a19      	ldr	r2, [pc, #100]	; (8004dc0 <BSP_MOTION_SENSOR_GetFullScale+0xb4>)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	4013      	ands	r3, r2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d103      	bne.n	8004d70 <BSP_MOTION_SENSOR_GetFullScale+0x64>
  {
    status = BSP_ERROR_NO_INIT;
 8004d68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d6c:	617b      	str	r3, [r7, #20]
 8004d6e:	e022      	b.n	8004db6 <BSP_MOTION_SENSOR_GetFullScale+0xaa>
  }
  else
  {
    /* Get the motion sensor full scale */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d006      	beq.n	8004d84 <BSP_MOTION_SENSOR_GetFullScale+0x78>
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d101      	bne.n	8004d80 <BSP_MOTION_SENSOR_GetFullScale+0x74>
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e002      	b.n	8004d86 <BSP_MOTION_SENSOR_GetFullScale+0x7a>
 8004d80:	2302      	movs	r3, #2
 8004d82:	e000      	b.n	8004d86 <BSP_MOTION_SENSOR_GetFullScale+0x7a>
 8004d84:	2300      	movs	r3, #0
 8004d86:	74fb      	strb	r3, [r7, #19]
    if (Motion_Sensor_FuncDrv[Instance][index]->GetFullScale(Motion_Sensor_CompObj[Instance], Fullscale) < 0)
 8004d88:	7cf9      	ldrb	r1, [r7, #19]
 8004d8a:	480e      	ldr	r0, [pc, #56]	; (8004dc4 <BSP_MOTION_SENSOR_GetFullScale+0xb8>)
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	005b      	lsls	r3, r3, #1
 8004d92:	4413      	add	r3, r2
 8004d94:	440b      	add	r3, r1
 8004d96:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004d9a:	695b      	ldr	r3, [r3, #20]
 8004d9c:	490a      	ldr	r1, [pc, #40]	; (8004dc8 <BSP_MOTION_SENSOR_GetFullScale+0xbc>)
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004da4:	6879      	ldr	r1, [r7, #4]
 8004da6:	4610      	mov	r0, r2
 8004da8:	4798      	blx	r3
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	da02      	bge.n	8004db6 <BSP_MOTION_SENSOR_GetFullScale+0xaa>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8004db0:	f06f 0304 	mvn.w	r3, #4
 8004db4:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8004db6:	697b      	ldr	r3, [r7, #20]
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3718      	adds	r7, #24
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	200017e4 	.word	0x200017e4
 8004dc4:	200017fc 	.word	0x200017fc
 8004dc8:	200017ec 	.word	0x200017ec

08004dcc <BSP_MOTION_SENSOR_SetFullScale>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Fullscale Full scale value.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b086      	sub	sp, #24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d903      	bls.n	8004dea <BSP_MOTION_SENSOR_SetFullScale+0x1e>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8004de2:	f06f 0301 	mvn.w	r3, #1
 8004de6:	617b      	str	r3, [r7, #20]
 8004de8:	e049      	b.n	8004e7e <BSP_MOTION_SENSOR_SetFullScale+0xb2>
  }
  else if (((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d104      	bne.n	8004dfa <BSP_MOTION_SENSOR_SetFullScale+0x2e>
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	f003 0304 	and.w	r3, r3, #4
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d107      	bne.n	8004e0a <BSP_MOTION_SENSOR_SetFullScale+0x3e>
           || ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U)))
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d108      	bne.n	8004e12 <BSP_MOTION_SENSOR_SetFullScale+0x46>
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	f003 0303 	and.w	r3, r3, #3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d003      	beq.n	8004e12 <BSP_MOTION_SENSOR_SetFullScale+0x46>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8004e0a:	f06f 030a 	mvn.w	r3, #10
 8004e0e:	617b      	str	r3, [r7, #20]
 8004e10:	e035      	b.n	8004e7e <BSP_MOTION_SENSOR_SetFullScale+0xb2>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8004e12:	4a1d      	ldr	r2, [pc, #116]	; (8004e88 <BSP_MOTION_SENSOR_SetFullScale+0xbc>)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d103      	bne.n	8004e2a <BSP_MOTION_SENSOR_SetFullScale+0x5e>
  {
    status = BSP_ERROR_NO_INIT;
 8004e22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e26:	617b      	str	r3, [r7, #20]
 8004e28:	e029      	b.n	8004e7e <BSP_MOTION_SENSOR_SetFullScale+0xb2>
  }
  else
  {
    /* Set the motion sensor full scale */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d006      	beq.n	8004e3e <BSP_MOTION_SENSOR_SetFullScale+0x72>
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d101      	bne.n	8004e3a <BSP_MOTION_SENSOR_SetFullScale+0x6e>
 8004e36:	2301      	movs	r3, #1
 8004e38:	e002      	b.n	8004e40 <BSP_MOTION_SENSOR_SetFullScale+0x74>
 8004e3a:	2302      	movs	r3, #2
 8004e3c:	e000      	b.n	8004e40 <BSP_MOTION_SENSOR_SetFullScale+0x74>
 8004e3e:	2300      	movs	r3, #0
 8004e40:	74fb      	strb	r3, [r7, #19]
    if (index == MAGNETO_ID)
 8004e42:	7cfb      	ldrb	r3, [r7, #19]
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d103      	bne.n	8004e50 <BSP_MOTION_SENSOR_SetFullScale+0x84>
    {
      /* Feature not supported for Magneto */
      status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8004e48:	f06f 030a 	mvn.w	r3, #10
 8004e4c:	617b      	str	r3, [r7, #20]
 8004e4e:	e016      	b.n	8004e7e <BSP_MOTION_SENSOR_SetFullScale+0xb2>
    }
    else
    {
      if (Motion_Sensor_FuncDrv[Instance][index]->SetFullScale(Motion_Sensor_CompObj[Instance], Fullscale) < 0)
 8004e50:	7cf9      	ldrb	r1, [r7, #19]
 8004e52:	480e      	ldr	r0, [pc, #56]	; (8004e8c <BSP_MOTION_SENSOR_SetFullScale+0xc0>)
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	4613      	mov	r3, r2
 8004e58:	005b      	lsls	r3, r3, #1
 8004e5a:	4413      	add	r3, r2
 8004e5c:	440b      	add	r3, r1
 8004e5e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	490a      	ldr	r1, [pc, #40]	; (8004e90 <BSP_MOTION_SENSOR_SetFullScale+0xc4>)
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004e6c:	6879      	ldr	r1, [r7, #4]
 8004e6e:	4610      	mov	r0, r2
 8004e70:	4798      	blx	r3
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	da02      	bge.n	8004e7e <BSP_MOTION_SENSOR_SetFullScale+0xb2>
      {
        status = BSP_ERROR_COMPONENT_FAILURE;
 8004e78:	f06f 0304 	mvn.w	r3, #4
 8004e7c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return status;
 8004e7e:	697b      	ldr	r3, [r7, #20]
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3718      	adds	r7, #24
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	200017e4 	.word	0x200017e4
 8004e8c:	200017fc 	.word	0x200017fc
 8004e90:	200017ec 	.word	0x200017ec

08004e94 <ISM330DHCX_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_GYRO and/or MOTION_ACCELERO
  * @retval BSP status.
  */
static int32_t ISM330DHCX_Probe(uint32_t Functions)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b08c      	sub	sp, #48	; 0x30
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  int32_t                 status = BSP_ERROR_NONE;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  ISM330DHCX_IO_t            IOCtx;
  uint8_t                 ism330dlc_id;
  static ISM330DHCX_Object_t ISM330DHCX_Obj;

  /* Configure the motion sensor driver */
  IOCtx.BusType     = ISM330DHCX_I2C_BUS;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	617b      	str	r3, [r7, #20]
  IOCtx.Address     = ISM330DHCX_I2C_ADD_H;
 8004ea4:	23d7      	movs	r3, #215	; 0xd7
 8004ea6:	763b      	strb	r3, [r7, #24]
  IOCtx.Init        = BSP_I2C2_Init;
 8004ea8:	4b29      	ldr	r3, [pc, #164]	; (8004f50 <ISM330DHCX_Probe+0xbc>)
 8004eaa:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C2_DeInit;
 8004eac:	4b29      	ldr	r3, [pc, #164]	; (8004f54 <ISM330DHCX_Probe+0xc0>)
 8004eae:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C2_ReadReg;
 8004eb0:	4b29      	ldr	r3, [pc, #164]	; (8004f58 <ISM330DHCX_Probe+0xc4>)
 8004eb2:	623b      	str	r3, [r7, #32]
  IOCtx.WriteReg    = BSP_I2C2_WriteReg;
 8004eb4:	4b29      	ldr	r3, [pc, #164]	; (8004f5c <ISM330DHCX_Probe+0xc8>)
 8004eb6:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = BSP_GetTick;
 8004eb8:	4b29      	ldr	r3, [pc, #164]	; (8004f60 <ISM330DHCX_Probe+0xcc>)
 8004eba:	627b      	str	r3, [r7, #36]	; 0x24

  /* Register Component Bus IO operations */
  if (ISM330DHCX_RegisterBusIO(&ISM330DHCX_Obj, &IOCtx) != ISM330DHCX_OK)
 8004ebc:	f107 030c 	add.w	r3, r7, #12
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	4828      	ldr	r0, [pc, #160]	; (8004f64 <ISM330DHCX_Probe+0xd0>)
 8004ec4:	f003 fc40 	bl	8008748 <ISM330DHCX_RegisterBusIO>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d003      	beq.n	8004ed6 <ISM330DHCX_Probe+0x42>
  {
    status = BSP_ERROR_BUS_FAILURE;
 8004ece:	f06f 0307 	mvn.w	r3, #7
 8004ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ed4:	e037      	b.n	8004f46 <ISM330DHCX_Probe+0xb2>
  }
  /* Read the sensor ID */
  else if (ISM330DHCX_ReadID(&ISM330DHCX_Obj, &ism330dlc_id) != ISM330DHCX_OK)
 8004ed6:	f107 030b 	add.w	r3, r7, #11
 8004eda:	4619      	mov	r1, r3
 8004edc:	4821      	ldr	r0, [pc, #132]	; (8004f64 <ISM330DHCX_Probe+0xd0>)
 8004ede:	f003 fd51 	bl	8008984 <ISM330DHCX_ReadID>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d003      	beq.n	8004ef0 <ISM330DHCX_Probe+0x5c>
  {
    status = BSP_ERROR_COMPONENT_FAILURE;
 8004ee8:	f06f 0304 	mvn.w	r3, #4
 8004eec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eee:	e02a      	b.n	8004f46 <ISM330DHCX_Probe+0xb2>
  }
  /* Check if the returned sensor ID is correct */
  else if (ism330dlc_id != ISM330DHCX_ID)
 8004ef0:	7afb      	ldrb	r3, [r7, #11]
 8004ef2:	2b6b      	cmp	r3, #107	; 0x6b
 8004ef4:	d003      	beq.n	8004efe <ISM330DHCX_Probe+0x6a>
  {
    status = BSP_ERROR_UNKNOWN_COMPONENT;
 8004ef6:	f06f 0306 	mvn.w	r3, #6
 8004efa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004efc:	e023      	b.n	8004f46 <ISM330DHCX_Probe+0xb2>
  }
  else
  {
    Motion_Sensor_CompObj[0] = &ISM330DHCX_Obj;
 8004efe:	4b1a      	ldr	r3, [pc, #104]	; (8004f68 <ISM330DHCX_Probe+0xd4>)
 8004f00:	4a18      	ldr	r2, [pc, #96]	; (8004f64 <ISM330DHCX_Probe+0xd0>)
 8004f02:	601a      	str	r2, [r3, #0]
    Motion_Sensor_Drv[0]     = (MOTION_SENSOR_CommonDrv_t *) &ISM330DHCX_COMMON_Driver;
 8004f04:	4b19      	ldr	r3, [pc, #100]	; (8004f6c <ISM330DHCX_Probe+0xd8>)
 8004f06:	4a1a      	ldr	r2, [pc, #104]	; (8004f70 <ISM330DHCX_Probe+0xdc>)
 8004f08:	601a      	str	r2, [r3, #0]
    /* Initialize the component */
    if (Motion_Sensor_Drv[0]->Init(Motion_Sensor_CompObj[0]) < 0)
 8004f0a:	4b18      	ldr	r3, [pc, #96]	; (8004f6c <ISM330DHCX_Probe+0xd8>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a15      	ldr	r2, [pc, #84]	; (8004f68 <ISM330DHCX_Probe+0xd4>)
 8004f12:	6812      	ldr	r2, [r2, #0]
 8004f14:	4610      	mov	r0, r2
 8004f16:	4798      	blx	r3
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	da03      	bge.n	8004f26 <ISM330DHCX_Probe+0x92>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8004f1e:	f06f 0304 	mvn.w	r3, #4
 8004f22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f24:	e00f      	b.n	8004f46 <ISM330DHCX_Probe+0xb2>
    }
    else
    {
      /* Link the MS driver with the component driver */
      if ((Functions & MOTION_GYRO) != 0U)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f003 0301 	and.w	r3, r3, #1
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d002      	beq.n	8004f36 <ISM330DHCX_Probe+0xa2>
      {
        Motion_Sensor_FuncDrv[0][GYRO_ID] = (MOTION_SENSOR_FuncDrv_t *) &ISM330DHCX_GYRO_Driver;
 8004f30:	4b10      	ldr	r3, [pc, #64]	; (8004f74 <ISM330DHCX_Probe+0xe0>)
 8004f32:	4a11      	ldr	r2, [pc, #68]	; (8004f78 <ISM330DHCX_Probe+0xe4>)
 8004f34:	601a      	str	r2, [r3, #0]
      }
      if ((Functions & MOTION_ACCELERO) != 0U)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f003 0302 	and.w	r3, r3, #2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d002      	beq.n	8004f46 <ISM330DHCX_Probe+0xb2>
      {
        Motion_Sensor_FuncDrv[0][ACCELERO_ID] = (MOTION_SENSOR_FuncDrv_t *) &ISM330DHCX_ACC_Driver;
 8004f40:	4b0c      	ldr	r3, [pc, #48]	; (8004f74 <ISM330DHCX_Probe+0xe0>)
 8004f42:	4a0e      	ldr	r2, [pc, #56]	; (8004f7c <ISM330DHCX_Probe+0xe8>)
 8004f44:	605a      	str	r2, [r3, #4]
      }
    }
  }

  return status;
 8004f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3730      	adds	r7, #48	; 0x30
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	08002139 	.word	0x08002139
 8004f54:	080021ad 	.word	0x080021ad
 8004f58:	080022d5 	.word	0x080022d5
 8004f5c:	08002279 	.word	0x08002279
 8004f60:	08002421 	.word	0x08002421
 8004f64:	20001814 	.word	0x20001814
 8004f68:	200017ec 	.word	0x200017ec
 8004f6c:	200017f4 	.word	0x200017f4
 8004f70:	200000a0 	.word	0x200000a0
 8004f74:	200017fc 	.word	0x200017fc
 8004f78:	200000d4 	.word	0x200000d4
 8004f7c:	200000b0 	.word	0x200000b0

08004f80 <IIS2MDC_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_MAGNETO
  * @retval BSP status.
  */
static int32_t IIS2MDC_Probe(uint32_t Functions)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b08c      	sub	sp, #48	; 0x30
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  int32_t                 status = BSP_ERROR_NONE;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  IIS2MDC_IO_t            IOCtx;
  uint8_t                 iis2mdc_id;
  static IIS2MDC_Object_t IIS2MDC_Obj;

  /* Configure the motion sensor driver */
  IOCtx.BusType     = IIS2MDC_I2C_BUS;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	617b      	str	r3, [r7, #20]
  IOCtx.Address     = IIS2MDC_I2C_ADD;
 8004f90:	233d      	movs	r3, #61	; 0x3d
 8004f92:	763b      	strb	r3, [r7, #24]
  IOCtx.Init        = BSP_I2C2_Init;
 8004f94:	4b25      	ldr	r3, [pc, #148]	; (800502c <IIS2MDC_Probe+0xac>)
 8004f96:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C2_DeInit;
 8004f98:	4b25      	ldr	r3, [pc, #148]	; (8005030 <IIS2MDC_Probe+0xb0>)
 8004f9a:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C2_ReadReg;
 8004f9c:	4b25      	ldr	r3, [pc, #148]	; (8005034 <IIS2MDC_Probe+0xb4>)
 8004f9e:	623b      	str	r3, [r7, #32]
  IOCtx.WriteReg    = BSP_I2C2_WriteReg;
 8004fa0:	4b25      	ldr	r3, [pc, #148]	; (8005038 <IIS2MDC_Probe+0xb8>)
 8004fa2:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = BSP_GetTick;
 8004fa4:	4b25      	ldr	r3, [pc, #148]	; (800503c <IIS2MDC_Probe+0xbc>)
 8004fa6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Register Component Bus IO operations */
  if (IIS2MDC_RegisterBusIO(&IIS2MDC_Obj, &IOCtx) != IIS2MDC_OK)
 8004fa8:	f107 030c 	add.w	r3, r7, #12
 8004fac:	4619      	mov	r1, r3
 8004fae:	4824      	ldr	r0, [pc, #144]	; (8005040 <IIS2MDC_Probe+0xc0>)
 8004fb0:	f002 ff84 	bl	8007ebc <IIS2MDC_RegisterBusIO>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d003      	beq.n	8004fc2 <IIS2MDC_Probe+0x42>
  {
    status = BSP_ERROR_BUS_FAILURE;
 8004fba:	f06f 0307 	mvn.w	r3, #7
 8004fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fc0:	e02f      	b.n	8005022 <IIS2MDC_Probe+0xa2>
  }
  /* Read the sensor ID */
  else if (IIS2MDC_ReadID(&IIS2MDC_Obj, &iis2mdc_id) != IIS2MDC_OK)
 8004fc2:	f107 030b 	add.w	r3, r7, #11
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	481d      	ldr	r0, [pc, #116]	; (8005040 <IIS2MDC_Probe+0xc0>)
 8004fca:	f003 f832 	bl	8008032 <IIS2MDC_ReadID>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d003      	beq.n	8004fdc <IIS2MDC_Probe+0x5c>
  {
    status = BSP_ERROR_COMPONENT_FAILURE;
 8004fd4:	f06f 0304 	mvn.w	r3, #4
 8004fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fda:	e022      	b.n	8005022 <IIS2MDC_Probe+0xa2>
  }
  /* Check if the returned sensor ID is correct */
  else if (iis2mdc_id != IIS2MDC_ID)
 8004fdc:	7afb      	ldrb	r3, [r7, #11]
 8004fde:	2b40      	cmp	r3, #64	; 0x40
 8004fe0:	d003      	beq.n	8004fea <IIS2MDC_Probe+0x6a>
  {
    status = BSP_ERROR_UNKNOWN_COMPONENT;
 8004fe2:	f06f 0306 	mvn.w	r3, #6
 8004fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fe8:	e01b      	b.n	8005022 <IIS2MDC_Probe+0xa2>
  }
  else
  {
    Motion_Sensor_CompObj[1] = &IIS2MDC_Obj;
 8004fea:	4b16      	ldr	r3, [pc, #88]	; (8005044 <IIS2MDC_Probe+0xc4>)
 8004fec:	4a14      	ldr	r2, [pc, #80]	; (8005040 <IIS2MDC_Probe+0xc0>)
 8004fee:	605a      	str	r2, [r3, #4]
    Motion_Sensor_Drv[1]     = (MOTION_SENSOR_CommonDrv_t *) &IIS2MDC_COMMON_Driver;
 8004ff0:	4b15      	ldr	r3, [pc, #84]	; (8005048 <IIS2MDC_Probe+0xc8>)
 8004ff2:	4a16      	ldr	r2, [pc, #88]	; (800504c <IIS2MDC_Probe+0xcc>)
 8004ff4:	605a      	str	r2, [r3, #4]
    /* Initialize the component */
    if (Motion_Sensor_Drv[1]->Init(Motion_Sensor_CompObj[1]) < 0)
 8004ff6:	4b14      	ldr	r3, [pc, #80]	; (8005048 <IIS2MDC_Probe+0xc8>)
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a11      	ldr	r2, [pc, #68]	; (8005044 <IIS2MDC_Probe+0xc4>)
 8004ffe:	6852      	ldr	r2, [r2, #4]
 8005000:	4610      	mov	r0, r2
 8005002:	4798      	blx	r3
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	da03      	bge.n	8005012 <IIS2MDC_Probe+0x92>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 800500a:	f06f 0304 	mvn.w	r3, #4
 800500e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005010:	e007      	b.n	8005022 <IIS2MDC_Probe+0xa2>
    }
    else
    {
      /* Link the MS driver with the component driver */
      if ((Functions & MOTION_MAGNETO) != 0U)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f003 0304 	and.w	r3, r3, #4
 8005018:	2b00      	cmp	r3, #0
 800501a:	d002      	beq.n	8005022 <IIS2MDC_Probe+0xa2>
      {
        Motion_Sensor_FuncDrv[1][MAGNETO_ID] = (MOTION_SENSOR_FuncDrv_t *) &IIS2MDC_MAG_Driver;
 800501c:	4b0c      	ldr	r3, [pc, #48]	; (8005050 <IIS2MDC_Probe+0xd0>)
 800501e:	4a0d      	ldr	r2, [pc, #52]	; (8005054 <IIS2MDC_Probe+0xd4>)
 8005020:	615a      	str	r2, [r3, #20]
      }
    }
  }

  return status;
 8005022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005024:	4618      	mov	r0, r3
 8005026:	3730      	adds	r7, #48	; 0x30
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	08002139 	.word	0x08002139
 8005030:	080021ad 	.word	0x080021ad
 8005034:	080022d5 	.word	0x080022d5
 8005038:	08002279 	.word	0x08002279
 800503c:	08002421 	.word	0x08002421
 8005040:	2000184c 	.word	0x2000184c
 8005044:	200017ec 	.word	0x200017ec
 8005048:	200017f4 	.word	0x200017f4
 800504c:	2000006c 	.word	0x2000006c
 8005050:	200017fc 	.word	0x200017fc
 8005054:	2000007c 	.word	0x2000007c

08005058 <BSP_OSPI_NOR_Init>:
  * @param  Instance   OSPI Instance
  * @param  Init       OSPI Init structure
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_Init(uint32_t Instance, BSP_OSPI_NOR_Init_t *Init)
{
 8005058:	b590      	push	{r4, r7, lr}
 800505a:	b095      	sub	sp, #84	; 0x54
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  int32_t ret;
  BSP_OSPI_NOR_Info_t pInfo;
  MX_OSPI_InitTypeDef ospi_init;

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d003      	beq.n	8005070 <BSP_OSPI_NOR_Init+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005068:	f06f 0301 	mvn.w	r3, #1
 800506c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800506e:	e091      	b.n	8005194 <BSP_OSPI_NOR_Init+0x13c>
  }
  else
  {
    /* Check if the instance is already initialized */
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 8005070:	494b      	ldr	r1, [pc, #300]	; (80051a0 <BSP_OSPI_NOR_Init+0x148>)
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	4613      	mov	r3, r2
 8005076:	005b      	lsls	r3, r3, #1
 8005078:	4413      	add	r3, r2
 800507a:	440b      	add	r3, r1
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	f040 8086 	bne.w	8005190 <BSP_OSPI_NOR_Init+0x138>
    {
#if (USE_HAL_OSPI_REGISTER_CALLBACKS == 0)
      /* Msp OSPI initialization */
      OSPI_NOR_MspInit(&hospi_nor[Instance]);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	225c      	movs	r2, #92	; 0x5c
 8005088:	fb02 f303 	mul.w	r3, r2, r3
 800508c:	4a45      	ldr	r2, [pc, #276]	; (80051a4 <BSP_OSPI_NOR_Init+0x14c>)
 800508e:	4413      	add	r3, r2
 8005090:	4618      	mov	r0, r3
 8005092:	f000 fe81 	bl	8005d98 <OSPI_NOR_MspInit>
        }
      }
#endif /* USE_HAL_OSPI_REGISTER_CALLBACKS */

      /* Get Flash information of one memory */
      (void)MX25LM51245G_GetFlashInfo(&pInfo);
 8005096:	f107 031c 	add.w	r3, r7, #28
 800509a:	4618      	mov	r0, r3
 800509c:	f006 f9f7 	bl	800b48e <MX25LM51245G_GetFlashInfo>

      /* Fill config structure */
      ospi_init.ClockPrescaler = 4; /* OctoSPI clock = 160MHz / ClockPrescaler = 40MHz */
 80050a0:	2304      	movs	r3, #4
 80050a2:	613b      	str	r3, [r7, #16]
      ospi_init.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050aa:	fa93 f3a3 	rbit	r3, r3
 80050ae:	643b      	str	r3, [r7, #64]	; 0x40
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80050b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050b2:	64bb      	str	r3, [r7, #72]	; 0x48
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80050b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d101      	bne.n	80050be <BSP_OSPI_NOR_Init+0x66>
  {
    return 32U;
 80050ba:	2320      	movs	r3, #32
 80050bc:	e003      	b.n	80050c6 <BSP_OSPI_NOR_Init+0x6e>
  }
  return __builtin_clz(value);
 80050be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050c0:	fab3 f383 	clz	r3, r3
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	60fb      	str	r3, [r7, #12]
      ospi_init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80050c8:	2300      	movs	r3, #0
 80050ca:	617b      	str	r3, [r7, #20]
      ospi_init.TransferRate   = (uint32_t)Init->TransferRate;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	785b      	ldrb	r3, [r3, #1]
 80050d0:	61bb      	str	r3, [r7, #24]

      /* STM32 OSPI interface initialization */
      if (MX_OSPI_NOR_Init(&hospi_nor[Instance], &ospi_init) != HAL_OK)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	225c      	movs	r2, #92	; 0x5c
 80050d6:	fb02 f303 	mul.w	r3, r2, r3
 80050da:	4a32      	ldr	r2, [pc, #200]	; (80051a4 <BSP_OSPI_NOR_Init+0x14c>)
 80050dc:	4413      	add	r3, r2
 80050de:	f107 020c 	add.w	r2, r7, #12
 80050e2:	4611      	mov	r1, r2
 80050e4:	4618      	mov	r0, r3
 80050e6:	f000 f8c3 	bl	8005270 <MX_OSPI_NOR_Init>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d003      	beq.n	80050f8 <BSP_OSPI_NOR_Init+0xa0>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 80050f0:	f06f 0303 	mvn.w	r3, #3
 80050f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050f6:	e04d      	b.n	8005194 <BSP_OSPI_NOR_Init+0x13c>
      }
      /* OSPI Delay Block enable */
      else if (OSPI_DLYB_Enable(&hospi_nor[Instance]) != BSP_ERROR_NONE)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	225c      	movs	r2, #92	; 0x5c
 80050fc:	fb02 f303 	mul.w	r3, r2, r3
 8005100:	4a28      	ldr	r2, [pc, #160]	; (80051a4 <BSP_OSPI_NOR_Init+0x14c>)
 8005102:	4413      	add	r3, r2
 8005104:	4618      	mov	r0, r3
 8005106:	f001 fae5 	bl	80066d4 <OSPI_DLYB_Enable>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d003      	beq.n	8005118 <BSP_OSPI_NOR_Init+0xc0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005110:	f06f 0304 	mvn.w	r3, #4
 8005114:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005116:	e03d      	b.n	8005194 <BSP_OSPI_NOR_Init+0x13c>
      }
      /* OSPI memory reset */
      else if (OSPI_NOR_ResetMemory(Instance) != BSP_ERROR_NONE)
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 ffdf 	bl	80060dc <OSPI_NOR_ResetMemory>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d003      	beq.n	800512c <BSP_OSPI_NOR_Init+0xd4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005124:	f06f 0304 	mvn.w	r3, #4
 8005128:	64fb      	str	r3, [r7, #76]	; 0x4c
 800512a:	e033      	b.n	8005194 <BSP_OSPI_NOR_Init+0x13c>
      }
      /* Check if memory is ready */
      else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	225c      	movs	r2, #92	; 0x5c
 8005130:	fb02 f303 	mul.w	r3, r2, r3
 8005134:	4a1b      	ldr	r2, [pc, #108]	; (80051a4 <BSP_OSPI_NOR_Init+0x14c>)
 8005136:	1898      	adds	r0, r3, r2
 8005138:	4919      	ldr	r1, [pc, #100]	; (80051a0 <BSP_OSPI_NOR_Init+0x148>)
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	4613      	mov	r3, r2
 800513e:	005b      	lsls	r3, r3, #1
 8005140:	4413      	add	r3, r2
 8005142:	440b      	add	r3, r1
 8005144:	3301      	adds	r3, #1
 8005146:	7819      	ldrb	r1, [r3, #0]
 8005148:	4c15      	ldr	r4, [pc, #84]	; (80051a0 <BSP_OSPI_NOR_Init+0x148>)
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	4613      	mov	r3, r2
 800514e:	005b      	lsls	r3, r3, #1
 8005150:	4413      	add	r3, r2
 8005152:	4423      	add	r3, r4
 8005154:	3302      	adds	r3, #2
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	461a      	mov	r2, r3
 800515a:	f006 f9c7 	bl	800b4ec <MX25LM51245G_AutoPollingMemReady>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d003      	beq.n	800516c <BSP_OSPI_NOR_Init+0x114>
                                                Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005164:	f06f 0304 	mvn.w	r3, #4
 8005168:	64fb      	str	r3, [r7, #76]	; 0x4c
 800516a:	e013      	b.n	8005194 <BSP_OSPI_NOR_Init+0x13c>
      }
      /* Configure the memory */
      else if (BSP_OSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	7819      	ldrb	r1, [r3, #0]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	785b      	ldrb	r3, [r3, #1]
 8005174:	461a      	mov	r2, r3
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 fba4 	bl	80058c4 <BSP_OSPI_NOR_ConfigFlash>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d003      	beq.n	800518a <BSP_OSPI_NOR_Init+0x132>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005182:	f06f 0304 	mvn.w	r3, #4
 8005186:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005188:	e004      	b.n	8005194 <BSP_OSPI_NOR_Init+0x13c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800518a:	2300      	movs	r3, #0
 800518c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800518e:	e001      	b.n	8005194 <BSP_OSPI_NOR_Init+0x13c>
      }
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8005190:	2300      	movs	r3, #0
 8005192:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }

  /* Return BSP status */
  return ret;
 8005194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8005196:	4618      	mov	r0, r3
 8005198:	3754      	adds	r7, #84	; 0x54
 800519a:	46bd      	mov	sp, r7
 800519c:	bd90      	pop	{r4, r7, pc}
 800519e:	bf00      	nop
 80051a0:	200018dc 	.word	0x200018dc
 80051a4:	20001880 	.word	0x20001880

080051a8 <BSP_OSPI_NOR_DeInit>:
  * @brief  De-Initializes the OSPI interface.
  * @param  Instance   OSPI Instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_DeInit(uint32_t Instance)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80051b0:	2300      	movs	r3, #0
 80051b2:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <BSP_OSPI_NOR_DeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80051ba:	f06f 0301 	mvn.w	r3, #1
 80051be:	60fb      	str	r3, [r7, #12]
 80051c0:	e04c      	b.n	800525c <BSP_OSPI_NOR_DeInit+0xb4>
  }
  else
  {
    /* Check if the instance is already initialized */
    if (Ospi_Nor_Ctx[Instance].IsInitialized != OSPI_ACCESS_NONE)
 80051c2:	4929      	ldr	r1, [pc, #164]	; (8005268 <BSP_OSPI_NOR_DeInit+0xc0>)
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	4613      	mov	r3, r2
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	4413      	add	r3, r2
 80051cc:	440b      	add	r3, r1
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d043      	beq.n	800525c <BSP_OSPI_NOR_DeInit+0xb4>
    {
      /* Disable Memory mapped mode */
      if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 80051d4:	4924      	ldr	r1, [pc, #144]	; (8005268 <BSP_OSPI_NOR_DeInit+0xc0>)
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	4613      	mov	r3, r2
 80051da:	005b      	lsls	r3, r3, #1
 80051dc:	4413      	add	r3, r2
 80051de:	440b      	add	r3, r1
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d108      	bne.n	80051f8 <BSP_OSPI_NOR_DeInit+0x50>
      {
        if (BSP_OSPI_NOR_DisableMemoryMappedMode(Instance) != BSP_ERROR_NONE)
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 fb30 	bl	800584c <BSP_OSPI_NOR_DisableMemoryMappedMode>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d002      	beq.n	80051f8 <BSP_OSPI_NOR_DeInit+0x50>
        {
          return BSP_ERROR_COMPONENT_FAILURE;
 80051f2:	f06f 0304 	mvn.w	r3, #4
 80051f6:	e032      	b.n	800525e <BSP_OSPI_NOR_DeInit+0xb6>
        }
      }

      /* Set default Ospi_Nor_Ctx values */
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 80051f8:	491b      	ldr	r1, [pc, #108]	; (8005268 <BSP_OSPI_NOR_DeInit+0xc0>)
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	4613      	mov	r3, r2
 80051fe:	005b      	lsls	r3, r3, #1
 8005200:	4413      	add	r3, r2
 8005202:	440b      	add	r3, r1
 8005204:	2200      	movs	r2, #0
 8005206:	701a      	strb	r2, [r3, #0]
      Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;
 8005208:	4917      	ldr	r1, [pc, #92]	; (8005268 <BSP_OSPI_NOR_DeInit+0xc0>)
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	4613      	mov	r3, r2
 800520e:	005b      	lsls	r3, r3, #1
 8005210:	4413      	add	r3, r2
 8005212:	440b      	add	r3, r1
 8005214:	3301      	adds	r3, #1
 8005216:	2200      	movs	r2, #0
 8005218:	701a      	strb	r2, [r3, #0]
      Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;
 800521a:	4913      	ldr	r1, [pc, #76]	; (8005268 <BSP_OSPI_NOR_DeInit+0xc0>)
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	4613      	mov	r3, r2
 8005220:	005b      	lsls	r3, r3, #1
 8005222:	4413      	add	r3, r2
 8005224:	440b      	add	r3, r1
 8005226:	3302      	adds	r3, #2
 8005228:	2200      	movs	r2, #0
 800522a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_OSPI_REGISTER_CALLBACKS == 0)
      OSPI_NOR_MspDeInit(&hospi_nor[Instance]);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	225c      	movs	r2, #92	; 0x5c
 8005230:	fb02 f303 	mul.w	r3, r2, r3
 8005234:	4a0d      	ldr	r2, [pc, #52]	; (800526c <BSP_OSPI_NOR_DeInit+0xc4>)
 8005236:	4413      	add	r3, r2
 8005238:	4618      	mov	r0, r3
 800523a:	f000 fef9 	bl	8006030 <OSPI_NOR_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS == 0) */

      /* Call the DeInit function to reset the driver */
      if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	225c      	movs	r2, #92	; 0x5c
 8005242:	fb02 f303 	mul.w	r3, r2, r3
 8005246:	4a09      	ldr	r2, [pc, #36]	; (800526c <BSP_OSPI_NOR_DeInit+0xc4>)
 8005248:	4413      	add	r3, r2
 800524a:	4618      	mov	r0, r3
 800524c:	f010 fe42 	bl	8015ed4 <HAL_OSPI_DeInit>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d002      	beq.n	800525c <BSP_OSPI_NOR_DeInit+0xb4>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8005256:	f06f 0303 	mvn.w	r3, #3
 800525a:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800525c:	68fb      	ldr	r3, [r7, #12]
}
 800525e:	4618      	mov	r0, r3
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	200018dc 	.word	0x200018dc
 800526c:	20001880 	.word	0x20001880

08005270 <MX_OSPI_NOR_Init>:
  * @param  hospi          OSPI handle
  * @param  Init           OSPI config structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_OSPI_NOR_Init(OSPI_HandleTypeDef *hospi, MX_OSPI_InitTypeDef *Init)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  /* OctoSPI initialization */
  hospi->Instance = OCTOSPI2;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a1e      	ldr	r2, [pc, #120]	; (80052f8 <MX_OSPI_NOR_Init+0x88>)
 800527e:	601a      	str	r2, [r3, #0]

  hospi->Init.FifoThreshold      = 4;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2204      	movs	r2, #4
 8005284:	605a      	str	r2, [r3, #4]
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	609a      	str	r2, [r3, #8]
  hospi->Init.DeviceSize         = Init->MemorySize; /* 512 MBits */
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	611a      	str	r2, [r3, #16]
  hospi->Init.ChipSelectHighTime = 2;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2202      	movs	r2, #2
 8005298:	615a      	str	r2, [r3, #20]
  hospi->Init.FreeRunningClock   = HAL_OSPI_FREERUNCLK_ENABLE;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2202      	movs	r2, #2
 800529e:	619a      	str	r2, [r3, #24]
  hospi->Init.ClockMode          = HAL_OSPI_CLOCK_MODE_0;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	61da      	str	r2, [r3, #28]
  hospi->Init.WrapSize           = HAL_OSPI_WRAP_NOT_SUPPORTED;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	621a      	str	r2, [r3, #32]
  hospi->Init.ClockPrescaler     = Init->ClockPrescaler;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	685a      	ldr	r2, [r3, #4]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	625a      	str	r2, [r3, #36]	; 0x24
  hospi->Init.SampleShifting     = Init->SampleShifting;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	689a      	ldr	r2, [r3, #8]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	629a      	str	r2, [r3, #40]	; 0x28
  hospi->Init.ChipSelectBoundary = 0;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	631a      	str	r2, [r3, #48]	; 0x30

  if (Init->TransferRate == (uint32_t) BSP_OSPI_NOR_DTR_TRANSFER)
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d108      	bne.n	80052dc <MX_OSPI_NOR_Init+0x6c>
  {
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80052d0:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80052da:	e005      	b.n	80052e8 <MX_OSPI_NOR_Init+0x78>
  }
  else
  {
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  return HAL_OSPI_Init(hospi);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f010 fd2d 	bl	8015d48 <HAL_OSPI_Init>
 80052ee:	4603      	mov	r3, r0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3708      	adds	r7, #8
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	420d2400 	.word	0x420d2400

080052fc <BSP_OSPI_NOR_Read>:
  * @param  ReadAddr  Read start address
  * @param  Size      Size of data to read
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_Read(uint32_t Instance, uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b088      	sub	sp, #32
 8005300:	af02      	add	r7, sp, #8
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
 8005308:	603b      	str	r3, [r7, #0]
  int32_t ret;

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d003      	beq.n	8005318 <BSP_OSPI_NOR_Read+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005310:	f06f 0301 	mvn.w	r3, #1
 8005314:	617b      	str	r3, [r7, #20]
 8005316:	e03d      	b.n	8005394 <BSP_OSPI_NOR_Read+0x98>
  }
  else
  {
    if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8005318:	4921      	ldr	r1, [pc, #132]	; (80053a0 <BSP_OSPI_NOR_Read+0xa4>)
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	4613      	mov	r3, r2
 800531e:	005b      	lsls	r3, r3, #1
 8005320:	4413      	add	r3, r2
 8005322:	440b      	add	r3, r1
 8005324:	3302      	adds	r3, #2
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d11f      	bne.n	800536c <BSP_OSPI_NOR_Read+0x70>
    {
      if (MX25LM51245G_ReadSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	225c      	movs	r2, #92	; 0x5c
 8005330:	fb02 f303 	mul.w	r3, r2, r3
 8005334:	4a1b      	ldr	r2, [pc, #108]	; (80053a4 <BSP_OSPI_NOR_Read+0xa8>)
 8005336:	1898      	adds	r0, r3, r2
 8005338:	4919      	ldr	r1, [pc, #100]	; (80053a0 <BSP_OSPI_NOR_Read+0xa4>)
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	4613      	mov	r3, r2
 800533e:	005b      	lsls	r3, r3, #1
 8005340:	4413      	add	r3, r2
 8005342:	440b      	add	r3, r1
 8005344:	3301      	adds	r3, #1
 8005346:	7819      	ldrb	r1, [r3, #0]
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	9301      	str	r3, [sp, #4]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	9300      	str	r3, [sp, #0]
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	2201      	movs	r2, #1
 8005354:	f006 f97c 	bl	800b650 <MX25LM51245G_ReadSTR>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d003      	beq.n	8005366 <BSP_OSPI_NOR_Read+0x6a>
                               MX25LM51245G_4BYTES_SIZE, pData, ReadAddr, Size) != MX25LM51245G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800535e:	f06f 0304 	mvn.w	r3, #4
 8005362:	617b      	str	r3, [r7, #20]
 8005364:	e016      	b.n	8005394 <BSP_OSPI_NOR_Read+0x98>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005366:	2300      	movs	r3, #0
 8005368:	617b      	str	r3, [r7, #20]
 800536a:	e013      	b.n	8005394 <BSP_OSPI_NOR_Read+0x98>
      }
    }
    else
    {
      if (MX25LM51245G_ReadDTR(&hospi_nor[Instance], pData, ReadAddr, Size) != MX25LM51245G_OK)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	225c      	movs	r2, #92	; 0x5c
 8005370:	fb02 f303 	mul.w	r3, r2, r3
 8005374:	4a0b      	ldr	r2, [pc, #44]	; (80053a4 <BSP_OSPI_NOR_Read+0xa8>)
 8005376:	1898      	adds	r0, r3, r2
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	68b9      	ldr	r1, [r7, #8]
 800537e:	f006 f9f0 	bl	800b762 <MX25LM51245G_ReadDTR>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d003      	beq.n	8005390 <BSP_OSPI_NOR_Read+0x94>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005388:	f06f 0304 	mvn.w	r3, #4
 800538c:	617b      	str	r3, [r7, #20]
 800538e:	e001      	b.n	8005394 <BSP_OSPI_NOR_Read+0x98>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005390:	2300      	movs	r3, #0
 8005392:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8005394:	697b      	ldr	r3, [r7, #20]
}
 8005396:	4618      	mov	r0, r3
 8005398:	3718      	adds	r7, #24
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	200018dc 	.word	0x200018dc
 80053a4:	20001880 	.word	0x20001880

080053a8 <BSP_OSPI_NOR_Write>:
  * @param  WriteAddr Write start address
  * @param  Size      Size of data to write
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_Write(const uint32_t Instance, const uint8_t *pData, uint32_t WriteAddr, uint32_t Size)
{
 80053a8:	b590      	push	{r4, r7, lr}
 80053aa:	b08d      	sub	sp, #52	; 0x34
 80053ac:	af02      	add	r7, sp, #8
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
 80053b4:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80053b6:	2300      	movs	r3, #0
 80053b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t current_size;
  uint32_t current_addr;
  uint32_t data_addr;

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d003      	beq.n	80053c8 <BSP_OSPI_NOR_Write+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80053c0:	f06f 0301 	mvn.w	r3, #1
 80053c4:	627b      	str	r3, [r7, #36]	; 0x24
 80053c6:	e0cb      	b.n	8005560 <BSP_OSPI_NOR_Write+0x1b8>
  }
  else
  {
    /* Calculation of the size between the write address and the end of the page */
    current_size = MX25LM51245G_PAGE_SIZE - (WriteAddr % MX25LM51245G_PAGE_SIZE);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80053d0:	623b      	str	r3, [r7, #32]

    /* Check if the size of the data is less than the remaining place in the page */
    if (current_size > Size)
 80053d2:	6a3a      	ldr	r2, [r7, #32]
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d901      	bls.n	80053de <BSP_OSPI_NOR_Write+0x36>
    {
      current_size = Size;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	623b      	str	r3, [r7, #32]
    }

    /* Initialize the address variables */
    current_addr = WriteAddr;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	61fb      	str	r3, [r7, #28]
    end_addr = WriteAddr + Size;
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	4413      	add	r3, r2
 80053e8:	617b      	str	r3, [r7, #20]
    data_addr = (uint32_t)pData;
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	61bb      	str	r3, [r7, #24]

    /* Perform the write page by page */
    do
    {
      /* Check if Flash busy ? */
      if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	225c      	movs	r2, #92	; 0x5c
 80053f2:	fb02 f303 	mul.w	r3, r2, r3
 80053f6:	4a5d      	ldr	r2, [pc, #372]	; (800556c <BSP_OSPI_NOR_Write+0x1c4>)
 80053f8:	1898      	adds	r0, r3, r2
 80053fa:	495d      	ldr	r1, [pc, #372]	; (8005570 <BSP_OSPI_NOR_Write+0x1c8>)
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	4613      	mov	r3, r2
 8005400:	005b      	lsls	r3, r3, #1
 8005402:	4413      	add	r3, r2
 8005404:	440b      	add	r3, r1
 8005406:	3301      	adds	r3, #1
 8005408:	7819      	ldrb	r1, [r3, #0]
 800540a:	4c59      	ldr	r4, [pc, #356]	; (8005570 <BSP_OSPI_NOR_Write+0x1c8>)
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	4613      	mov	r3, r2
 8005410:	005b      	lsls	r3, r3, #1
 8005412:	4413      	add	r3, r2
 8005414:	4423      	add	r3, r4
 8005416:	3302      	adds	r3, #2
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	461a      	mov	r2, r3
 800541c:	f006 f866 	bl	800b4ec <MX25LM51245G_AutoPollingMemReady>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d003      	beq.n	800542e <BSP_OSPI_NOR_Write+0x86>
                                           Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005426:	f06f 0304 	mvn.w	r3, #4
 800542a:	627b      	str	r3, [r7, #36]	; 0x24
 800542c:	e090      	b.n	8005550 <BSP_OSPI_NOR_Write+0x1a8>
      }/* Enable write operations */
      else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	225c      	movs	r2, #92	; 0x5c
 8005432:	fb02 f303 	mul.w	r3, r2, r3
 8005436:	4a4d      	ldr	r2, [pc, #308]	; (800556c <BSP_OSPI_NOR_Write+0x1c4>)
 8005438:	1898      	adds	r0, r3, r2
 800543a:	494d      	ldr	r1, [pc, #308]	; (8005570 <BSP_OSPI_NOR_Write+0x1c8>)
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	4613      	mov	r3, r2
 8005440:	005b      	lsls	r3, r3, #1
 8005442:	4413      	add	r3, r2
 8005444:	440b      	add	r3, r1
 8005446:	3301      	adds	r3, #1
 8005448:	7819      	ldrb	r1, [r3, #0]
 800544a:	4c49      	ldr	r4, [pc, #292]	; (8005570 <BSP_OSPI_NOR_Write+0x1c8>)
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	4613      	mov	r3, r2
 8005450:	005b      	lsls	r3, r3, #1
 8005452:	4413      	add	r3, r2
 8005454:	4423      	add	r3, r4
 8005456:	3302      	adds	r3, #2
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	461a      	mov	r2, r3
 800545c:	f006 fc64 	bl	800bd28 <MX25LM51245G_WriteEnable>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d003      	beq.n	800546e <BSP_OSPI_NOR_Write+0xc6>
                                        Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005466:	f06f 0304 	mvn.w	r3, #4
 800546a:	627b      	str	r3, [r7, #36]	; 0x24
 800546c:	e070      	b.n	8005550 <BSP_OSPI_NOR_Write+0x1a8>
      }
      else
      {
        if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 800546e:	4940      	ldr	r1, [pc, #256]	; (8005570 <BSP_OSPI_NOR_Write+0x1c8>)
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	4613      	mov	r3, r2
 8005474:	005b      	lsls	r3, r3, #1
 8005476:	4413      	add	r3, r2
 8005478:	440b      	add	r3, r1
 800547a:	3302      	adds	r3, #2
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d11d      	bne.n	80054be <BSP_OSPI_NOR_Write+0x116>
        {
          /* Issue page program command */
          if (MX25LM51245G_PageProgram(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	225c      	movs	r2, #92	; 0x5c
 8005486:	fb02 f303 	mul.w	r3, r2, r3
 800548a:	4a38      	ldr	r2, [pc, #224]	; (800556c <BSP_OSPI_NOR_Write+0x1c4>)
 800548c:	1898      	adds	r0, r3, r2
 800548e:	4938      	ldr	r1, [pc, #224]	; (8005570 <BSP_OSPI_NOR_Write+0x1c8>)
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	4613      	mov	r3, r2
 8005494:	005b      	lsls	r3, r3, #1
 8005496:	4413      	add	r3, r2
 8005498:	440b      	add	r3, r1
 800549a:	3301      	adds	r3, #1
 800549c:	7819      	ldrb	r1, [r3, #0]
 800549e:	69ba      	ldr	r2, [r7, #24]
 80054a0:	6a3b      	ldr	r3, [r7, #32]
 80054a2:	9301      	str	r3, [sp, #4]
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	9300      	str	r3, [sp, #0]
 80054a8:	4613      	mov	r3, r2
 80054aa:	2201      	movs	r2, #1
 80054ac:	f006 f9af 	bl	800b80e <MX25LM51245G_PageProgram>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d014      	beq.n	80054e0 <BSP_OSPI_NOR_Write+0x138>
                                       MX25LM51245G_4BYTES_SIZE, (uint8_t *)data_addr, current_addr,
                                       current_size) != MX25LM51245G_OK)
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 80054b6:	f06f 0304 	mvn.w	r3, #4
 80054ba:	627b      	str	r3, [r7, #36]	; 0x24
 80054bc:	e010      	b.n	80054e0 <BSP_OSPI_NOR_Write+0x138>
          }
        }
        else
        {
          /* Issue page program command */
          if (MX25LM51245G_PageProgramDTR(&hospi_nor[Instance], (uint8_t *)data_addr, current_addr,
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	225c      	movs	r2, #92	; 0x5c
 80054c2:	fb02 f303 	mul.w	r3, r2, r3
 80054c6:	4a29      	ldr	r2, [pc, #164]	; (800556c <BSP_OSPI_NOR_Write+0x1c4>)
 80054c8:	1898      	adds	r0, r3, r2
 80054ca:	69b9      	ldr	r1, [r7, #24]
 80054cc:	6a3b      	ldr	r3, [r7, #32]
 80054ce:	69fa      	ldr	r2, [r7, #28]
 80054d0:	f006 fa21 	bl	800b916 <MX25LM51245G_PageProgramDTR>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d002      	beq.n	80054e0 <BSP_OSPI_NOR_Write+0x138>
                                          current_size) != MX25LM51245G_OK)
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 80054da:	f06f 0304 	mvn.w	r3, #4
 80054de:	627b      	str	r3, [r7, #36]	; 0x24
          }
        }

        if (ret == BSP_ERROR_NONE)
 80054e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d134      	bne.n	8005550 <BSP_OSPI_NOR_Write+0x1a8>
        {
          /* Configure automatic polling mode to wait for end of program */
          if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	225c      	movs	r2, #92	; 0x5c
 80054ea:	fb02 f303 	mul.w	r3, r2, r3
 80054ee:	4a1f      	ldr	r2, [pc, #124]	; (800556c <BSP_OSPI_NOR_Write+0x1c4>)
 80054f0:	1898      	adds	r0, r3, r2
 80054f2:	491f      	ldr	r1, [pc, #124]	; (8005570 <BSP_OSPI_NOR_Write+0x1c8>)
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	4613      	mov	r3, r2
 80054f8:	005b      	lsls	r3, r3, #1
 80054fa:	4413      	add	r3, r2
 80054fc:	440b      	add	r3, r1
 80054fe:	3301      	adds	r3, #1
 8005500:	7819      	ldrb	r1, [r3, #0]
 8005502:	4c1b      	ldr	r4, [pc, #108]	; (8005570 <BSP_OSPI_NOR_Write+0x1c8>)
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	4613      	mov	r3, r2
 8005508:	005b      	lsls	r3, r3, #1
 800550a:	4413      	add	r3, r2
 800550c:	4423      	add	r3, r4
 800550e:	3302      	adds	r3, #2
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	461a      	mov	r2, r3
 8005514:	f005 ffea 	bl	800b4ec <MX25LM51245G_AutoPollingMemReady>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d003      	beq.n	8005526 <BSP_OSPI_NOR_Write+0x17e>
                                               Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 800551e:	f06f 0304 	mvn.w	r3, #4
 8005522:	627b      	str	r3, [r7, #36]	; 0x24
 8005524:	e014      	b.n	8005550 <BSP_OSPI_NOR_Write+0x1a8>
          }
          else
          {
            /* Update the address and size variables for next page programming */
            current_addr += current_size;
 8005526:	69fa      	ldr	r2, [r7, #28]
 8005528:	6a3b      	ldr	r3, [r7, #32]
 800552a:	4413      	add	r3, r2
 800552c:	61fb      	str	r3, [r7, #28]
            data_addr += current_size;
 800552e:	69ba      	ldr	r2, [r7, #24]
 8005530:	6a3b      	ldr	r3, [r7, #32]
 8005532:	4413      	add	r3, r2
 8005534:	61bb      	str	r3, [r7, #24]
            current_size = ((current_addr + MX25LM51245G_PAGE_SIZE) > end_addr)
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	f503 7380 	add.w	r3, r3, #256	; 0x100
                           ? (end_addr - current_addr)
                           : MX25LM51245G_PAGE_SIZE;
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	429a      	cmp	r2, r3
 8005540:	d203      	bcs.n	800554a <BSP_OSPI_NOR_Write+0x1a2>
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	e001      	b.n	800554e <BSP_OSPI_NOR_Write+0x1a6>
 800554a:	f44f 7380 	mov.w	r3, #256	; 0x100
            current_size = ((current_addr + MX25LM51245G_PAGE_SIZE) > end_addr)
 800554e:	623b      	str	r3, [r7, #32]
          }
        }
      }
    } while ((current_addr < end_addr) && (ret == BSP_ERROR_NONE));
 8005550:	69fa      	ldr	r2, [r7, #28]
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	429a      	cmp	r2, r3
 8005556:	d203      	bcs.n	8005560 <BSP_OSPI_NOR_Write+0x1b8>
 8005558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555a:	2b00      	cmp	r3, #0
 800555c:	f43f af47 	beq.w	80053ee <BSP_OSPI_NOR_Write+0x46>
  }

  /* Return BSP status */
  return ret;
 8005560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005562:	4618      	mov	r0, r3
 8005564:	372c      	adds	r7, #44	; 0x2c
 8005566:	46bd      	mov	sp, r7
 8005568:	bd90      	pop	{r4, r7, pc}
 800556a:	bf00      	nop
 800556c:	20001880 	.word	0x20001880
 8005570:	200018dc 	.word	0x200018dc

08005574 <BSP_OSPI_NOR_Erase_Block>:
  * @param  BlockAddress Block address to erase
  * @param  BlockSize    Erase Block size
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_Erase_Block(uint32_t Instance, uint32_t BlockAddress, BSP_OSPI_NOR_Erase_t BlockSize)
{
 8005574:	b590      	push	{r4, r7, lr}
 8005576:	b089      	sub	sp, #36	; 0x24
 8005578:	af02      	add	r7, sp, #8
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	4613      	mov	r3, r2
 8005580:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d003      	beq.n	8005590 <BSP_OSPI_NOR_Erase_Block+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005588:	f06f 0301 	mvn.w	r3, #1
 800558c:	617b      	str	r3, [r7, #20]
 800558e:	e065      	b.n	800565c <BSP_OSPI_NOR_Erase_Block+0xe8>
  }
  else
  {
    /* Check Flash busy ? */
    if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	225c      	movs	r2, #92	; 0x5c
 8005594:	fb02 f303 	mul.w	r3, r2, r3
 8005598:	4a33      	ldr	r2, [pc, #204]	; (8005668 <BSP_OSPI_NOR_Erase_Block+0xf4>)
 800559a:	1898      	adds	r0, r3, r2
 800559c:	4933      	ldr	r1, [pc, #204]	; (800566c <BSP_OSPI_NOR_Erase_Block+0xf8>)
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	4613      	mov	r3, r2
 80055a2:	005b      	lsls	r3, r3, #1
 80055a4:	4413      	add	r3, r2
 80055a6:	440b      	add	r3, r1
 80055a8:	3301      	adds	r3, #1
 80055aa:	7819      	ldrb	r1, [r3, #0]
 80055ac:	4c2f      	ldr	r4, [pc, #188]	; (800566c <BSP_OSPI_NOR_Erase_Block+0xf8>)
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	4613      	mov	r3, r2
 80055b2:	005b      	lsls	r3, r3, #1
 80055b4:	4413      	add	r3, r2
 80055b6:	4423      	add	r3, r4
 80055b8:	3302      	adds	r3, #2
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	461a      	mov	r2, r3
 80055be:	f005 ff95 	bl	800b4ec <MX25LM51245G_AutoPollingMemReady>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d003      	beq.n	80055d0 <BSP_OSPI_NOR_Erase_Block+0x5c>
                                         Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80055c8:	f06f 0304 	mvn.w	r3, #4
 80055cc:	617b      	str	r3, [r7, #20]
 80055ce:	e045      	b.n	800565c <BSP_OSPI_NOR_Erase_Block+0xe8>
    }/* Enable write operations */
    else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	225c      	movs	r2, #92	; 0x5c
 80055d4:	fb02 f303 	mul.w	r3, r2, r3
 80055d8:	4a23      	ldr	r2, [pc, #140]	; (8005668 <BSP_OSPI_NOR_Erase_Block+0xf4>)
 80055da:	1898      	adds	r0, r3, r2
 80055dc:	4923      	ldr	r1, [pc, #140]	; (800566c <BSP_OSPI_NOR_Erase_Block+0xf8>)
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	4613      	mov	r3, r2
 80055e2:	005b      	lsls	r3, r3, #1
 80055e4:	4413      	add	r3, r2
 80055e6:	440b      	add	r3, r1
 80055e8:	3301      	adds	r3, #1
 80055ea:	7819      	ldrb	r1, [r3, #0]
 80055ec:	4c1f      	ldr	r4, [pc, #124]	; (800566c <BSP_OSPI_NOR_Erase_Block+0xf8>)
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	4613      	mov	r3, r2
 80055f2:	005b      	lsls	r3, r3, #1
 80055f4:	4413      	add	r3, r2
 80055f6:	4423      	add	r3, r4
 80055f8:	3302      	adds	r3, #2
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	461a      	mov	r2, r3
 80055fe:	f006 fb93 	bl	800bd28 <MX25LM51245G_WriteEnable>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d003      	beq.n	8005610 <BSP_OSPI_NOR_Erase_Block+0x9c>
                                      Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005608:	f06f 0304 	mvn.w	r3, #4
 800560c:	617b      	str	r3, [r7, #20]
 800560e:	e025      	b.n	800565c <BSP_OSPI_NOR_Erase_Block+0xe8>
    }/* Issue Block Erase command */
    else if (MX25LM51245G_BlockErase(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	225c      	movs	r2, #92	; 0x5c
 8005614:	fb02 f303 	mul.w	r3, r2, r3
 8005618:	4a13      	ldr	r2, [pc, #76]	; (8005668 <BSP_OSPI_NOR_Erase_Block+0xf4>)
 800561a:	1898      	adds	r0, r3, r2
 800561c:	4913      	ldr	r1, [pc, #76]	; (800566c <BSP_OSPI_NOR_Erase_Block+0xf8>)
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	4613      	mov	r3, r2
 8005622:	005b      	lsls	r3, r3, #1
 8005624:	4413      	add	r3, r2
 8005626:	440b      	add	r3, r1
 8005628:	3301      	adds	r3, #1
 800562a:	7819      	ldrb	r1, [r3, #0]
 800562c:	4c0f      	ldr	r4, [pc, #60]	; (800566c <BSP_OSPI_NOR_Erase_Block+0xf8>)
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	4613      	mov	r3, r2
 8005632:	005b      	lsls	r3, r3, #1
 8005634:	4413      	add	r3, r2
 8005636:	4423      	add	r3, r4
 8005638:	3302      	adds	r3, #2
 800563a:	781a      	ldrb	r2, [r3, #0]
 800563c:	79fb      	ldrb	r3, [r7, #7]
 800563e:	9301      	str	r3, [sp, #4]
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	9300      	str	r3, [sp, #0]
 8005644:	2301      	movs	r3, #1
 8005646:	f006 f9bb 	bl	800b9c0 <MX25LM51245G_BlockErase>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d003      	beq.n	8005658 <BSP_OSPI_NOR_Erase_Block+0xe4>
                                     Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_4BYTES_SIZE,
                                     BlockAddress, BlockSize) != MX25LM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005650:	f06f 0304 	mvn.w	r3, #4
 8005654:	617b      	str	r3, [r7, #20]
 8005656:	e001      	b.n	800565c <BSP_OSPI_NOR_Erase_Block+0xe8>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8005658:	2300      	movs	r3, #0
 800565a:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return BSP status */
  return ret;
 800565c:	697b      	ldr	r3, [r7, #20]
}
 800565e:	4618      	mov	r0, r3
 8005660:	371c      	adds	r7, #28
 8005662:	46bd      	mov	sp, r7
 8005664:	bd90      	pop	{r4, r7, pc}
 8005666:	bf00      	nop
 8005668:	20001880 	.word	0x20001880
 800566c:	200018dc 	.word	0x200018dc

08005670 <BSP_OSPI_NOR_GetStatus>:
  * @brief  Reads current status of the OSPI memory.
  * @param  Instance  OSPI instance
  * @retval OSPI memory status: whether busy or not
  */
int32_t BSP_OSPI_NOR_GetStatus(uint32_t Instance)
{
 8005670:	b590      	push	{r4, r7, lr}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  static uint8_t reg[2];
  int32_t ret;

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d003      	beq.n	8005686 <BSP_OSPI_NOR_GetStatus+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800567e:	f06f 0301 	mvn.w	r3, #1
 8005682:	60fb      	str	r3, [r7, #12]
 8005684:	e05f      	b.n	8005746 <BSP_OSPI_NOR_GetStatus+0xd6>
  }
  else
  {
    if (MX25LM51245G_ReadSecurityRegister(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	225c      	movs	r2, #92	; 0x5c
 800568a:	fb02 f303 	mul.w	r3, r2, r3
 800568e:	4a30      	ldr	r2, [pc, #192]	; (8005750 <BSP_OSPI_NOR_GetStatus+0xe0>)
 8005690:	1898      	adds	r0, r3, r2
 8005692:	4930      	ldr	r1, [pc, #192]	; (8005754 <BSP_OSPI_NOR_GetStatus+0xe4>)
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	4613      	mov	r3, r2
 8005698:	005b      	lsls	r3, r3, #1
 800569a:	4413      	add	r3, r2
 800569c:	440b      	add	r3, r1
 800569e:	3301      	adds	r3, #1
 80056a0:	7819      	ldrb	r1, [r3, #0]
 80056a2:	4c2c      	ldr	r4, [pc, #176]	; (8005754 <BSP_OSPI_NOR_GetStatus+0xe4>)
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	4613      	mov	r3, r2
 80056a8:	005b      	lsls	r3, r3, #1
 80056aa:	4413      	add	r3, r2
 80056ac:	4423      	add	r3, r4
 80056ae:	3302      	adds	r3, #2
 80056b0:	781a      	ldrb	r2, [r3, #0]
 80056b2:	4b29      	ldr	r3, [pc, #164]	; (8005758 <BSP_OSPI_NOR_GetStatus+0xe8>)
 80056b4:	f006 fdda 	bl	800c26c <MX25LM51245G_ReadSecurityRegister>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d003      	beq.n	80056c6 <BSP_OSPI_NOR_GetStatus+0x56>
                                          Ospi_Nor_Ctx[Instance].TransferRate, reg) != MX25LM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80056be:	f06f 0304 	mvn.w	r3, #4
 80056c2:	60fb      	str	r3, [r7, #12]
 80056c4:	e03f      	b.n	8005746 <BSP_OSPI_NOR_GetStatus+0xd6>
    }/* Check the value of the register */
    else if ((reg[0] & (MX25LM51245G_SECR_P_FAIL | MX25LM51245G_SECR_E_FAIL)) != 0U)
 80056c6:	4b24      	ldr	r3, [pc, #144]	; (8005758 <BSP_OSPI_NOR_GetStatus+0xe8>)
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d003      	beq.n	80056da <BSP_OSPI_NOR_GetStatus+0x6a>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80056d2:	f06f 0304 	mvn.w	r3, #4
 80056d6:	60fb      	str	r3, [r7, #12]
 80056d8:	e035      	b.n	8005746 <BSP_OSPI_NOR_GetStatus+0xd6>
    }
    else if ((reg[0] & (MX25LM51245G_SECR_PSB | MX25LM51245G_SECR_ESB)) != 0U)
 80056da:	4b1f      	ldr	r3, [pc, #124]	; (8005758 <BSP_OSPI_NOR_GetStatus+0xe8>)
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	f003 030c 	and.w	r3, r3, #12
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d003      	beq.n	80056ee <BSP_OSPI_NOR_GetStatus+0x7e>
    {
      ret = BSP_ERROR_OSPI_SUSPENDED;
 80056e6:	f06f 0313 	mvn.w	r3, #19
 80056ea:	60fb      	str	r3, [r7, #12]
 80056ec:	e02b      	b.n	8005746 <BSP_OSPI_NOR_GetStatus+0xd6>
    }
    else if (MX25LM51245G_ReadStatusRegister(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	225c      	movs	r2, #92	; 0x5c
 80056f2:	fb02 f303 	mul.w	r3, r2, r3
 80056f6:	4a16      	ldr	r2, [pc, #88]	; (8005750 <BSP_OSPI_NOR_GetStatus+0xe0>)
 80056f8:	1898      	adds	r0, r3, r2
 80056fa:	4916      	ldr	r1, [pc, #88]	; (8005754 <BSP_OSPI_NOR_GetStatus+0xe4>)
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	4613      	mov	r3, r2
 8005700:	005b      	lsls	r3, r3, #1
 8005702:	4413      	add	r3, r2
 8005704:	440b      	add	r3, r1
 8005706:	3301      	adds	r3, #1
 8005708:	7819      	ldrb	r1, [r3, #0]
 800570a:	4c12      	ldr	r4, [pc, #72]	; (8005754 <BSP_OSPI_NOR_GetStatus+0xe4>)
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	4613      	mov	r3, r2
 8005710:	005b      	lsls	r3, r3, #1
 8005712:	4413      	add	r3, r2
 8005714:	4423      	add	r3, r4
 8005716:	3302      	adds	r3, #2
 8005718:	781a      	ldrb	r2, [r3, #0]
 800571a:	4b0f      	ldr	r3, [pc, #60]	; (8005758 <BSP_OSPI_NOR_GetStatus+0xe8>)
 800571c:	f006 fbd4 	bl	800bec8 <MX25LM51245G_ReadStatusRegister>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d003      	beq.n	800572e <BSP_OSPI_NOR_GetStatus+0xbe>
                                             Ospi_Nor_Ctx[Instance].TransferRate, reg) != MX25LM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005726:	f06f 0304 	mvn.w	r3, #4
 800572a:	60fb      	str	r3, [r7, #12]
 800572c:	e00b      	b.n	8005746 <BSP_OSPI_NOR_GetStatus+0xd6>
    }/* Check the value of the register */
    else if ((reg[0] & MX25LM51245G_SR_WIP) != 0U)
 800572e:	4b0a      	ldr	r3, [pc, #40]	; (8005758 <BSP_OSPI_NOR_GetStatus+0xe8>)
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	2b00      	cmp	r3, #0
 8005738:	d003      	beq.n	8005742 <BSP_OSPI_NOR_GetStatus+0xd2>
    {
      ret = BSP_ERROR_BUSY;
 800573a:	f06f 0302 	mvn.w	r3, #2
 800573e:	60fb      	str	r3, [r7, #12]
 8005740:	e001      	b.n	8005746 <BSP_OSPI_NOR_GetStatus+0xd6>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8005742:	2300      	movs	r3, #0
 8005744:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return BSP status */
  return ret;
 8005746:	68fb      	ldr	r3, [r7, #12]
}
 8005748:	4618      	mov	r0, r3
 800574a:	3714      	adds	r7, #20
 800574c:	46bd      	mov	sp, r7
 800574e:	bd90      	pop	{r4, r7, pc}
 8005750:	20001880 	.word	0x20001880
 8005754:	200018dc 	.word	0x200018dc
 8005758:	20001940 	.word	0x20001940

0800575c <BSP_OSPI_NOR_GetInfo>:
  * @param  Instance  OSPI instance
  * @param  pInfo     pointer on the configuration structure
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_GetInfo(uint32_t Instance, BSP_OSPI_NOR_Info_t *pInfo)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005766:	2300      	movs	r3, #0
 8005768:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d003      	beq.n	8005778 <BSP_OSPI_NOR_GetInfo+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005770:	f06f 0301 	mvn.w	r3, #1
 8005774:	60fb      	str	r3, [r7, #12]
 8005776:	e002      	b.n	800577e <BSP_OSPI_NOR_GetInfo+0x22>
  }
  else
  {
    (void)MX25LM51245G_GetFlashInfo(pInfo);
 8005778:	6838      	ldr	r0, [r7, #0]
 800577a:	f005 fe88 	bl	800b48e <MX25LM51245G_GetFlashInfo>
  }

  /* Return BSP status */
  return ret;
 800577e:	68fb      	ldr	r3, [r7, #12]
}
 8005780:	4618      	mov	r0, r3
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <BSP_OSPI_NOR_EnableMemoryMappedMode>:
  * @brief  Configure the OSPI in memory-mapped mode
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_EnableMemoryMappedMode(uint32_t Instance)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8005790:	2300      	movs	r3, #0
 8005792:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d003      	beq.n	80057a2 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800579a:	f06f 0301 	mvn.w	r3, #1
 800579e:	60fb      	str	r3, [r7, #12]
 80057a0:	e04b      	b.n	800583a <BSP_OSPI_NOR_EnableMemoryMappedMode+0xb2>
  }
  else
  {
    if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 80057a2:	4928      	ldr	r1, [pc, #160]	; (8005844 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xbc>)
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	4613      	mov	r3, r2
 80057a8:	005b      	lsls	r3, r3, #1
 80057aa:	4413      	add	r3, r2
 80057ac:	440b      	add	r3, r1
 80057ae:	3302      	adds	r3, #2
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d121      	bne.n	80057fa <BSP_OSPI_NOR_EnableMemoryMappedMode+0x72>
    {
      if (MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	225c      	movs	r2, #92	; 0x5c
 80057ba:	fb02 f303 	mul.w	r3, r2, r3
 80057be:	4a22      	ldr	r2, [pc, #136]	; (8005848 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xc0>)
 80057c0:	1898      	adds	r0, r3, r2
 80057c2:	4920      	ldr	r1, [pc, #128]	; (8005844 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xbc>)
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	4613      	mov	r3, r2
 80057c8:	005b      	lsls	r3, r3, #1
 80057ca:	4413      	add	r3, r2
 80057cc:	440b      	add	r3, r1
 80057ce:	3301      	adds	r3, #1
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	2201      	movs	r2, #1
 80057d4:	4619      	mov	r1, r3
 80057d6:	f006 f98e 	bl	800baf6 <MX25LM51245G_EnableSTRMemoryMappedMode>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d003      	beq.n	80057e8 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x60>
                                                 MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80057e0:	f06f 0304 	mvn.w	r3, #4
 80057e4:	60fb      	str	r3, [r7, #12]
 80057e6:	e028      	b.n	800583a <BSP_OSPI_NOR_EnableMemoryMappedMode+0xb2>
      }
      else /* Update OSPI context if all operations are well done */
      {
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 80057e8:	4916      	ldr	r1, [pc, #88]	; (8005844 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xbc>)
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	4613      	mov	r3, r2
 80057ee:	005b      	lsls	r3, r3, #1
 80057f0:	4413      	add	r3, r2
 80057f2:	440b      	add	r3, r1
 80057f4:	2202      	movs	r2, #2
 80057f6:	701a      	strb	r2, [r3, #0]
 80057f8:	e01f      	b.n	800583a <BSP_OSPI_NOR_EnableMemoryMappedMode+0xb2>
      }
    }
    else
    {
      if (MX25LM51245G_EnableMemoryMappedModeDTR(&hospi_nor[Instance],
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	225c      	movs	r2, #92	; 0x5c
 80057fe:	fb02 f303 	mul.w	r3, r2, r3
 8005802:	4a11      	ldr	r2, [pc, #68]	; (8005848 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xc0>)
 8005804:	1898      	adds	r0, r3, r2
 8005806:	490f      	ldr	r1, [pc, #60]	; (8005844 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xbc>)
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	4613      	mov	r3, r2
 800580c:	005b      	lsls	r3, r3, #1
 800580e:	4413      	add	r3, r2
 8005810:	440b      	add	r3, r1
 8005812:	3301      	adds	r3, #1
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	4619      	mov	r1, r3
 8005818:	f006 fa17 	bl	800bc4a <MX25LM51245G_EnableDTRMemoryMappedMode>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa2>
                                                 Ospi_Nor_Ctx[Instance].InterfaceMode) != MX25LM51245G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005822:	f06f 0304 	mvn.w	r3, #4
 8005826:	60fb      	str	r3, [r7, #12]
 8005828:	e007      	b.n	800583a <BSP_OSPI_NOR_EnableMemoryMappedMode+0xb2>
      }
      else /* Update OSPI context if all operations are well done */
      {
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 800582a:	4906      	ldr	r1, [pc, #24]	; (8005844 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xbc>)
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	4613      	mov	r3, r2
 8005830:	005b      	lsls	r3, r3, #1
 8005832:	4413      	add	r3, r2
 8005834:	440b      	add	r3, r1
 8005836:	2202      	movs	r2, #2
 8005838:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800583a:	68fb      	ldr	r3, [r7, #12]
}
 800583c:	4618      	mov	r0, r3
 800583e:	3710      	adds	r7, #16
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	200018dc 	.word	0x200018dc
 8005848:	20001880 	.word	0x20001880

0800584c <BSP_OSPI_NOR_DisableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_DisableMemoryMappedMode(uint32_t Instance)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8005854:	2300      	movs	r3, #0
 8005856:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d003      	beq.n	8005866 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800585e:	f06f 0301 	mvn.w	r3, #1
 8005862:	60fb      	str	r3, [r7, #12]
 8005864:	e024      	b.n	80058b0 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x64>
  }
  else
  {
    if (Ospi_Nor_Ctx[Instance].IsInitialized != OSPI_ACCESS_MMP)
 8005866:	4915      	ldr	r1, [pc, #84]	; (80058bc <BSP_OSPI_NOR_DisableMemoryMappedMode+0x70>)
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	4613      	mov	r3, r2
 800586c:	005b      	lsls	r3, r3, #1
 800586e:	4413      	add	r3, r2
 8005870:	440b      	add	r3, r1
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	2b02      	cmp	r3, #2
 8005876:	d003      	beq.n	8005880 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x34>
    {
      ret = BSP_ERROR_OSPI_MMP_UNLOCK_FAILURE;
 8005878:	f06f 031a 	mvn.w	r3, #26
 800587c:	60fb      	str	r3, [r7, #12]
 800587e:	e017      	b.n	80058b0 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x64>
    }/* Abort MMP back to indirect mode */
    else if (HAL_OSPI_Abort(&hospi_nor[Instance]) != HAL_OK)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	225c      	movs	r2, #92	; 0x5c
 8005884:	fb02 f303 	mul.w	r3, r2, r3
 8005888:	4a0d      	ldr	r2, [pc, #52]	; (80058c0 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x74>)
 800588a:	4413      	add	r3, r2
 800588c:	4618      	mov	r0, r3
 800588e:	f010 fdc9 	bl	8016424 <HAL_OSPI_Abort>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d003      	beq.n	80058a0 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x54>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005898:	f06f 0303 	mvn.w	r3, #3
 800589c:	60fb      	str	r3, [r7, #12]
 800589e:	e007      	b.n	80058b0 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x64>
    }
    else /* Update OSPI NOR context if all operations are well done */
    {
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 80058a0:	4906      	ldr	r1, [pc, #24]	; (80058bc <BSP_OSPI_NOR_DisableMemoryMappedMode+0x70>)
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	4613      	mov	r3, r2
 80058a6:	005b      	lsls	r3, r3, #1
 80058a8:	4413      	add	r3, r2
 80058aa:	440b      	add	r3, r1
 80058ac:	2201      	movs	r2, #1
 80058ae:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Return BSP status */
  return ret;
 80058b0:	68fb      	ldr	r3, [r7, #12]
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3710      	adds	r7, #16
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	200018dc 	.word	0x200018dc
 80058c0:	20001880 	.word	0x20001880

080058c4 <BSP_OSPI_NOR_ConfigFlash>:
  * @param  Mode      OSPI mode
  * @param  Rate      OSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_ConfigFlash(uint32_t Instance, BSP_OSPI_NOR_Interface_t Mode, BSP_OSPI_NOR_Transfer_t Rate)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	460b      	mov	r3, r1
 80058ce:	70fb      	strb	r3, [r7, #3]
 80058d0:	4613      	mov	r3, r2
 80058d2:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 80058d4:	2300      	movs	r3, #0
 80058d6:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d003      	beq.n	80058e6 <BSP_OSPI_NOR_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80058de:	f06f 0301 	mvn.w	r3, #1
 80058e2:	60fb      	str	r3, [r7, #12]
 80058e4:	e072      	b.n	80059cc <BSP_OSPI_NOR_ConfigFlash+0x108>
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 80058e6:	493c      	ldr	r1, [pc, #240]	; (80059d8 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	4613      	mov	r3, r2
 80058ec:	005b      	lsls	r3, r3, #1
 80058ee:	4413      	add	r3, r2
 80058f0:	440b      	add	r3, r1
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d103      	bne.n	8005900 <BSP_OSPI_NOR_ConfigFlash+0x3c>
    {
      ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 80058f8:	f06f 0319 	mvn.w	r3, #25
 80058fc:	60fb      	str	r3, [r7, #12]
 80058fe:	e065      	b.n	80059cc <BSP_OSPI_NOR_ConfigFlash+0x108>
    }
    else
    {
      /* Setup Flash interface ***************************************************/
      switch (Ospi_Nor_Ctx[Instance].InterfaceMode)
 8005900:	4935      	ldr	r1, [pc, #212]	; (80059d8 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	4613      	mov	r3, r2
 8005906:	005b      	lsls	r3, r3, #1
 8005908:	4413      	add	r3, r2
 800590a:	440b      	add	r3, r1
 800590c:	3301      	adds	r3, #1
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	2b01      	cmp	r3, #1
 8005912:	d12b      	bne.n	800596c <BSP_OSPI_NOR_ConfigFlash+0xa8>
      {
        case BSP_OSPI_NOR_OPI_MODE :  /* 8-8-8 commands */
          if ((Mode != BSP_OSPI_NOR_OPI_MODE) || (Rate != Ospi_Nor_Ctx[Instance].TransferRate))
 8005914:	78fb      	ldrb	r3, [r7, #3]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d10a      	bne.n	8005930 <BSP_OSPI_NOR_ConfigFlash+0x6c>
 800591a:	492f      	ldr	r1, [pc, #188]	; (80059d8 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	4613      	mov	r3, r2
 8005920:	005b      	lsls	r3, r3, #1
 8005922:	4413      	add	r3, r2
 8005924:	440b      	add	r3, r1
 8005926:	3302      	adds	r3, #2
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	78ba      	ldrb	r2, [r7, #2]
 800592c:	429a      	cmp	r2, r3
 800592e:	d02d      	beq.n	800598c <BSP_OSPI_NOR_ConfigFlash+0xc8>
          {
            /* Exit OPI mode */
            ret = OSPI_NOR_ExitOPIMode(Instance);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 fe1b 	bl	800656c <OSPI_NOR_ExitOPIMode>
 8005936:	60f8      	str	r0, [r7, #12]

            if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d126      	bne.n	800598c <BSP_OSPI_NOR_ConfigFlash+0xc8>
 800593e:	78fb      	ldrb	r3, [r7, #3]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d123      	bne.n	800598c <BSP_OSPI_NOR_ConfigFlash+0xc8>
            {

              if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8005944:	4924      	ldr	r1, [pc, #144]	; (80059d8 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	4613      	mov	r3, r2
 800594a:	005b      	lsls	r3, r3, #1
 800594c:	4413      	add	r3, r2
 800594e:	440b      	add	r3, r1
 8005950:	3302      	adds	r3, #2
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d104      	bne.n	8005962 <BSP_OSPI_NOR_ConfigFlash+0x9e>
              {
                /* Enter DTR OPI mode */
                ret = OSPI_NOR_EnterDOPIMode(Instance);
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 fc57 	bl	800620c <OSPI_NOR_EnterDOPIMode>
 800595e:	60f8      	str	r0, [r7, #12]
                /* Enter STR OPI mode */
                ret = OSPI_NOR_EnterSOPIMode(Instance);
              }
            }
          }
          break;
 8005960:	e014      	b.n	800598c <BSP_OSPI_NOR_ConfigFlash+0xc8>
                ret = OSPI_NOR_EnterSOPIMode(Instance);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 fd3c 	bl	80063e0 <OSPI_NOR_EnterSOPIMode>
 8005968:	60f8      	str	r0, [r7, #12]
          break;
 800596a:	e00f      	b.n	800598c <BSP_OSPI_NOR_ConfigFlash+0xc8>

        case BSP_OSPI_NOR_SPI_MODE :  /* 1-1-1 commands, Power on H/W default setting */
        default :
          if (Mode == BSP_OSPI_NOR_OPI_MODE)
 800596c:	78fb      	ldrb	r3, [r7, #3]
 800596e:	2b01      	cmp	r3, #1
 8005970:	d10e      	bne.n	8005990 <BSP_OSPI_NOR_ConfigFlash+0xcc>
          {
            if (Rate == BSP_OSPI_NOR_STR_TRANSFER)
 8005972:	78bb      	ldrb	r3, [r7, #2]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d104      	bne.n	8005982 <BSP_OSPI_NOR_ConfigFlash+0xbe>
            {
              /* Enter STR OPI mode */
              ret = OSPI_NOR_EnterSOPIMode(Instance);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 fd31 	bl	80063e0 <OSPI_NOR_EnterSOPIMode>
 800597e:	60f8      	str	r0, [r7, #12]
            {
              /* Enter DTR OPI mode */
              ret = OSPI_NOR_EnterDOPIMode(Instance);
            }
          }
          break;
 8005980:	e006      	b.n	8005990 <BSP_OSPI_NOR_ConfigFlash+0xcc>
              ret = OSPI_NOR_EnterDOPIMode(Instance);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 fc42 	bl	800620c <OSPI_NOR_EnterDOPIMode>
 8005988:	60f8      	str	r0, [r7, #12]
          break;
 800598a:	e001      	b.n	8005990 <BSP_OSPI_NOR_ConfigFlash+0xcc>
          break;
 800598c:	bf00      	nop
 800598e:	e000      	b.n	8005992 <BSP_OSPI_NOR_ConfigFlash+0xce>
          break;
 8005990:	bf00      	nop
      }

      /* Update OSPI context if all operations are well done */
      if (ret == BSP_ERROR_NONE)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d119      	bne.n	80059cc <BSP_OSPI_NOR_ConfigFlash+0x108>
      {
        /* Update current status parameter *****************************************/
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8005998:	490f      	ldr	r1, [pc, #60]	; (80059d8 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	4613      	mov	r3, r2
 800599e:	005b      	lsls	r3, r3, #1
 80059a0:	4413      	add	r3, r2
 80059a2:	440b      	add	r3, r1
 80059a4:	2201      	movs	r2, #1
 80059a6:	701a      	strb	r2, [r3, #0]
        Ospi_Nor_Ctx[Instance].InterfaceMode = Mode;
 80059a8:	490b      	ldr	r1, [pc, #44]	; (80059d8 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	4613      	mov	r3, r2
 80059ae:	005b      	lsls	r3, r3, #1
 80059b0:	4413      	add	r3, r2
 80059b2:	440b      	add	r3, r1
 80059b4:	3301      	adds	r3, #1
 80059b6:	78fa      	ldrb	r2, [r7, #3]
 80059b8:	701a      	strb	r2, [r3, #0]
        Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 80059ba:	4907      	ldr	r1, [pc, #28]	; (80059d8 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	4613      	mov	r3, r2
 80059c0:	005b      	lsls	r3, r3, #1
 80059c2:	4413      	add	r3, r2
 80059c4:	440b      	add	r3, r1
 80059c6:	3302      	adds	r3, #2
 80059c8:	78ba      	ldrb	r2, [r7, #2]
 80059ca:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 80059cc:	68fb      	ldr	r3, [r7, #12]
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3710      	adds	r7, #16
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	200018dc 	.word	0x200018dc

080059dc <BSP_OSPI_RAM_Init>:
  * @brief  Initializes the OSPI interface.
  * @param  Instance   OSPI Instance
  * @retval BSP status
  */
int32_t BSP_OSPI_RAM_Init(uint32_t Instance)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b08a      	sub	sp, #40	; 0x28
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  MX_OSPI_InitTypeDef ospi_init;
  int32_t ret = BSP_ERROR_NONE;
 80059e4:	2300      	movs	r3, #0
 80059e6:	627b      	str	r3, [r7, #36]	; 0x24

  /* MR0 register for read and write */
  uint8_t regW_MR0[2] = {0x24, 0x0D};
 80059e8:	f640 5324 	movw	r3, #3364	; 0xd24
 80059ec:	823b      	strh	r3, [r7, #16]

  /* MR8 register for read and write */
  uint8_t regW_MR8[2] = {0x0B, 0x08};
 80059ee:	f640 030b 	movw	r3, #2059	; 0x80b
 80059f2:	81bb      	strh	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= OSPI_RAM_INSTANCES_NUMBER)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d003      	beq.n	8005a02 <BSP_OSPI_RAM_Init+0x26>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80059fa:	f06f 0301 	mvn.w	r3, #1
 80059fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005a00:	e037      	b.n	8005a72 <BSP_OSPI_RAM_Init+0x96>
  }
  else
  {
    /* Check if the instance is already initialized */
    if (Ospi_Ram_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 8005a02:	4a2f      	ldr	r2, [pc, #188]	; (8005ac0 <BSP_OSPI_RAM_Init+0xe4>)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d131      	bne.n	8005a72 <BSP_OSPI_RAM_Init+0x96>
    {
#if (USE_HAL_OSPI_REGISTER_CALLBACKS == 0)
      /* Msp OSPI initialization */
      OSPI_RAM_MspInit(&hospi_ram[Instance]);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	225c      	movs	r2, #92	; 0x5c
 8005a12:	fb02 f303 	mul.w	r3, r2, r3
 8005a16:	4a2b      	ldr	r2, [pc, #172]	; (8005ac4 <BSP_OSPI_RAM_Init+0xe8>)
 8005a18:	4413      	add	r3, r2
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f000 fea4 	bl	8006768 <OSPI_RAM_MspInit>
        }
      }
#endif /* USE_HAL_OSPI_REGISTER_CALLBACKS */

      /* Fill config structure */
      ospi_init.ClockPrescaler = 2;
 8005a20:	2302      	movs	r3, #2
 8005a22:	61bb      	str	r3, [r7, #24]
      ospi_init.MemorySize     = 23; /* 64 MBits */
 8005a24:	2317      	movs	r3, #23
 8005a26:	617b      	str	r3, [r7, #20]
      ospi_init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	61fb      	str	r3, [r7, #28]

      /* STM32 OSPI interface initialization */
      if (MX_OSPI_RAM_Init(&hospi_ram[Instance], &ospi_init) != HAL_OK)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	225c      	movs	r2, #92	; 0x5c
 8005a30:	fb02 f303 	mul.w	r3, r2, r3
 8005a34:	4a23      	ldr	r2, [pc, #140]	; (8005ac4 <BSP_OSPI_RAM_Init+0xe8>)
 8005a36:	4413      	add	r3, r2
 8005a38:	f107 0214 	add.w	r2, r7, #20
 8005a3c:	4611      	mov	r1, r2
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f000 f896 	bl	8005b70 <MX_OSPI_RAM_Init>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d002      	beq.n	8005a50 <BSP_OSPI_RAM_Init+0x74>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8005a4a:	f06f 0303 	mvn.w	r3, #3
 8005a4e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      /* Update current status parameter */
      Ospi_Ram_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8005a50:	4a1b      	ldr	r2, [pc, #108]	; (8005ac0 <BSP_OSPI_RAM_Init+0xe4>)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2101      	movs	r1, #1
 8005a56:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
      Ospi_Ram_Ctx[Instance].LatencyType   = BSP_OSPI_RAM_FIXED_LATENCY;
 8005a5a:	4a19      	ldr	r2, [pc, #100]	; (8005ac0 <BSP_OSPI_RAM_Init+0xe4>)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	2201      	movs	r2, #1
 8005a64:	705a      	strb	r2, [r3, #1]
      Ospi_Ram_Ctx[Instance].BurstType     = BSP_OSPI_RAM_LINEAR_BURST;
 8005a66:	4a16      	ldr	r2, [pc, #88]	; (8005ac0 <BSP_OSPI_RAM_Init+0xe4>)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	4413      	add	r3, r2
 8005a6e:	2201      	movs	r2, #1
 8005a70:	709a      	strb	r2, [r3, #2]
    }
  }

  /* Configure Read Latency and drive Strength */
  if (APS6408_WriteReg(&hospi_ram[Instance], 0x00, *regW_MR0) != HAL_OK)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	225c      	movs	r2, #92	; 0x5c
 8005a76:	fb02 f303 	mul.w	r3, r2, r3
 8005a7a:	4a12      	ldr	r2, [pc, #72]	; (8005ac4 <BSP_OSPI_RAM_Init+0xe8>)
 8005a7c:	4413      	add	r3, r2
 8005a7e:	7c3a      	ldrb	r2, [r7, #16]
 8005a80:	2100      	movs	r1, #0
 8005a82:	4618      	mov	r0, r3
 8005a84:	f001 fb7e 	bl	8007184 <APS6408_WriteReg>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d002      	beq.n	8005a94 <BSP_OSPI_RAM_Init+0xb8>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8005a8e:	f06f 0303 	mvn.w	r3, #3
 8005a92:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Configure Burst Length */
  if (APS6408_WriteReg(&hospi_ram[Instance], 0x08, *regW_MR8) != HAL_OK)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	225c      	movs	r2, #92	; 0x5c
 8005a98:	fb02 f303 	mul.w	r3, r2, r3
 8005a9c:	4a09      	ldr	r2, [pc, #36]	; (8005ac4 <BSP_OSPI_RAM_Init+0xe8>)
 8005a9e:	4413      	add	r3, r2
 8005aa0:	7b3a      	ldrb	r2, [r7, #12]
 8005aa2:	2108      	movs	r1, #8
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f001 fb6d 	bl	8007184 <APS6408_WriteReg>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d002      	beq.n	8005ab6 <BSP_OSPI_RAM_Init+0xda>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;;
 8005ab0:	f06f 0303 	mvn.w	r3, #3
 8005ab4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Return BSP status */
  return ret;
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3728      	adds	r7, #40	; 0x28
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	2000193c 	.word	0x2000193c
 8005ac4:	200018e0 	.word	0x200018e0

08005ac8 <BSP_OSPI_RAM_DeInit>:
  * @brief  De-Initializes the OSPI interface.
  * @param  Instance   OSPI Instance
  * @retval BSP status
  */
int32_t BSP_OSPI_RAM_DeInit(uint32_t Instance)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= OSPI_RAM_INSTANCES_NUMBER)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d003      	beq.n	8005ae2 <BSP_OSPI_RAM_DeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005ada:	f06f 0301 	mvn.w	r3, #1
 8005ade:	60fb      	str	r3, [r7, #12]
 8005ae0:	e03d      	b.n	8005b5e <BSP_OSPI_RAM_DeInit+0x96>
  }
  else
  {
    /* Check if the instance is already initialized */
    if (Ospi_Ram_Ctx[Instance].IsInitialized != OSPI_ACCESS_NONE)
 8005ae2:	4a21      	ldr	r2, [pc, #132]	; (8005b68 <BSP_OSPI_RAM_DeInit+0xa0>)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d037      	beq.n	8005b5e <BSP_OSPI_RAM_DeInit+0x96>
    {
      /* Disable Memory mapped mode */
      if (Ospi_Ram_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8005aee:	4a1e      	ldr	r2, [pc, #120]	; (8005b68 <BSP_OSPI_RAM_DeInit+0xa0>)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	d108      	bne.n	8005b0c <BSP_OSPI_RAM_DeInit+0x44>
      {
        if (BSP_OSPI_RAM_DisableMemoryMappedMode(Instance) != BSP_ERROR_NONE)
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 f8f4 	bl	8005ce8 <BSP_OSPI_RAM_DisableMemoryMappedMode>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d002      	beq.n	8005b0c <BSP_OSPI_RAM_DeInit+0x44>
        {
          return BSP_ERROR_COMPONENT_FAILURE;
 8005b06:	f06f 0304 	mvn.w	r3, #4
 8005b0a:	e029      	b.n	8005b60 <BSP_OSPI_RAM_DeInit+0x98>
        }
      }
      /* Set default Ospi_Ram_Ctx values */
      Ospi_Ram_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 8005b0c:	4a16      	ldr	r2, [pc, #88]	; (8005b68 <BSP_OSPI_RAM_DeInit+0xa0>)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2100      	movs	r1, #0
 8005b12:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
      Ospi_Ram_Ctx[Instance].LatencyType   = BSP_OSPI_RAM_FIXED_LATENCY;
 8005b16:	4a14      	ldr	r2, [pc, #80]	; (8005b68 <BSP_OSPI_RAM_DeInit+0xa0>)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4413      	add	r3, r2
 8005b1e:	2201      	movs	r2, #1
 8005b20:	705a      	strb	r2, [r3, #1]
      Ospi_Ram_Ctx[Instance].BurstType     = BSP_OSPI_RAM_LINEAR_BURST;
 8005b22:	4a11      	ldr	r2, [pc, #68]	; (8005b68 <BSP_OSPI_RAM_DeInit+0xa0>)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	4413      	add	r3, r2
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	709a      	strb	r2, [r3, #2]

#if (USE_HAL_OSPI_REGISTER_CALLBACKS == 0)
      OSPI_RAM_MspDeInit(&hospi_ram[Instance]);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	225c      	movs	r2, #92	; 0x5c
 8005b32:	fb02 f303 	mul.w	r3, r2, r3
 8005b36:	4a0d      	ldr	r2, [pc, #52]	; (8005b6c <BSP_OSPI_RAM_DeInit+0xa4>)
 8005b38:	4413      	add	r3, r2
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f000 ff6a 	bl	8006a14 <OSPI_RAM_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS == 0) */

      /* Call the DeInit function to reset the driver */
      if (HAL_OSPI_DeInit(&hospi_ram[Instance]) != HAL_OK)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	225c      	movs	r2, #92	; 0x5c
 8005b44:	fb02 f303 	mul.w	r3, r2, r3
 8005b48:	4a08      	ldr	r2, [pc, #32]	; (8005b6c <BSP_OSPI_RAM_DeInit+0xa4>)
 8005b4a:	4413      	add	r3, r2
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f010 f9c1 	bl	8015ed4 <HAL_OSPI_DeInit>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d002      	beq.n	8005b5e <BSP_OSPI_RAM_DeInit+0x96>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8005b58:	f06f 0303 	mvn.w	r3, #3
 8005b5c:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	2000193c 	.word	0x2000193c
 8005b6c:	200018e0 	.word	0x200018e0

08005b70 <MX_OSPI_RAM_Init>:
  * @param  hospi          OSPI handle
  * @param  Init           OSPI config structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_OSPI_RAM_Init(OSPI_HandleTypeDef *hospi, MX_OSPI_InitTypeDef *Init)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  /* OctoSPI initialization */
  hospi->Instance = OCTOSPI1;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a19      	ldr	r2, [pc, #100]	; (8005be4 <MX_OSPI_RAM_Init+0x74>)
 8005b7e:	601a      	str	r2, [r3, #0]

  hospi->Init.FifoThreshold         = 1;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	605a      	str	r2, [r3, #4]
  hospi->Init.DualQuad              = HAL_OSPI_DUALQUAD_DISABLE;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	609a      	str	r2, [r3, #8]
  hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_APMEMORY;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005b92:	60da      	str	r2, [r3, #12]
  hospi->Init.DeviceSize            = Init->MemorySize;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	611a      	str	r2, [r3, #16]
  hospi->Init.ChipSelectHighTime    = 1;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	615a      	str	r2, [r3, #20]
  hospi->Init.ClockMode             = HAL_OSPI_CLOCK_MODE_0;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	61da      	str	r2, [r3, #28]
  hospi->Init.ClockPrescaler        = Init->ClockPrescaler;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	685a      	ldr	r2, [r3, #4]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	625a      	str	r2, [r3, #36]	; 0x24
  hospi->Init.SampleShifting        = Init->SampleShifting;
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	689a      	ldr	r2, [r3, #8]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	629a      	str	r2, [r3, #40]	; 0x28
  hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi->Init.ChipSelectBoundary    = 0;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	631a      	str	r2, [r3, #48]	; 0x30
  hospi->Init.FreeRunningClock      = HAL_OSPI_FREERUNCLK_DISABLE;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	619a      	str	r2, [r3, #24]
  hospi->Init.DelayBlockBypass      = HAL_OSPI_DELAY_BLOCK_USED;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OSPI_Init(hospi);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f010 f8b8 	bl	8015d48 <HAL_OSPI_Init>
 8005bd8:	4603      	mov	r3, r0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3708      	adds	r7, #8
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	420d1400 	.word	0x420d1400

08005be8 <BSP_OSPI_RAM_Read>:
  * @param  ReadAddr  Read start address
  * @param  Size      Size of data to read
  * @retval BSP status
  */
int32_t BSP_OSPI_RAM_Read(uint32_t Instance, uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b088      	sub	sp, #32
 8005bec:	af02      	add	r7, sp, #8
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
 8005bf4:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	617b      	str	r3, [r7, #20]

  /* Check if the instance is supported */
  if (Instance >= OSPI_RAM_INSTANCES_NUMBER)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d003      	beq.n	8005c08 <BSP_OSPI_RAM_Read+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005c00:	f06f 0301 	mvn.w	r3, #1
 8005c04:	617b      	str	r3, [r7, #20]
 8005c06:	e00f      	b.n	8005c28 <BSP_OSPI_RAM_Read+0x40>
  }
  else
  {
    if (APS6408_Read(&hospi_ram[0], pData, ReadAddr, Size, DUMMY_CLOCK_CYCLES_READ, 1) != APS6408_OK)
 8005c08:	2301      	movs	r3, #1
 8005c0a:	9301      	str	r3, [sp, #4]
 8005c0c:	2305      	movs	r3, #5
 8005c0e:	9300      	str	r3, [sp, #0]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	68b9      	ldr	r1, [r7, #8]
 8005c16:	4807      	ldr	r0, [pc, #28]	; (8005c34 <BSP_OSPI_RAM_Read+0x4c>)
 8005c18:	f001 f946 	bl	8006ea8 <APS6408_Read>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d002      	beq.n	8005c28 <BSP_OSPI_RAM_Read+0x40>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005c22:	f06f 0303 	mvn.w	r3, #3
 8005c26:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return BSP status */
  return ret;
 8005c28:	697b      	ldr	r3, [r7, #20]
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3718      	adds	r7, #24
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	200018e0 	.word	0x200018e0

08005c38 <BSP_OSPI_RAM_Write>:
  * @param  WriteAddr Write start address
  * @param  Size      Size of data to write
  * @retval BSP status
  */
int32_t BSP_OSPI_RAM_Write(uint32_t Instance, uint8_t *pData, uint32_t WriteAddr, uint32_t Size)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b088      	sub	sp, #32
 8005c3c:	af02      	add	r7, sp, #8
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	607a      	str	r2, [r7, #4]
 8005c44:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005c46:	2300      	movs	r3, #0
 8005c48:	617b      	str	r3, [r7, #20]

  /* Check if the instance is supported */
  if (Instance >= OSPI_RAM_INSTANCES_NUMBER)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d003      	beq.n	8005c58 <BSP_OSPI_RAM_Write+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005c50:	f06f 0301 	mvn.w	r3, #1
 8005c54:	617b      	str	r3, [r7, #20]
 8005c56:	e00f      	b.n	8005c78 <BSP_OSPI_RAM_Write+0x40>
  }
  else
  {
    if (APS6408_Write(&hospi_ram[0], pData, WriteAddr, Size, DUMMY_CLOCK_CYCLES_WRITE, 1) != APS6408_OK)
 8005c58:	2301      	movs	r3, #1
 8005c5a:	9301      	str	r3, [sp, #4]
 8005c5c:	2304      	movs	r3, #4
 8005c5e:	9300      	str	r3, [sp, #0]
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	68b9      	ldr	r1, [r7, #8]
 8005c66:	4807      	ldr	r0, [pc, #28]	; (8005c84 <BSP_OSPI_RAM_Write+0x4c>)
 8005c68:	f001 f978 	bl	8006f5c <APS6408_Write>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d002      	beq.n	8005c78 <BSP_OSPI_RAM_Write+0x40>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005c72:	f06f 0303 	mvn.w	r3, #3
 8005c76:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return BSP status */
  return ret;
 8005c78:	697b      	ldr	r3, [r7, #20]
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3718      	adds	r7, #24
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	200018e0 	.word	0x200018e0

08005c88 <BSP_OSPI_RAM_EnableMemoryMappedMode>:
  * @brief  Configure the OSPI in memory-mapped mode
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
int32_t BSP_OSPI_RAM_EnableMemoryMappedMode(uint32_t Instance)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8005c90:	2300      	movs	r3, #0
 8005c92:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= OSPI_RAM_INSTANCES_NUMBER)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d003      	beq.n	8005ca2 <BSP_OSPI_RAM_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005c9a:	f06f 0301 	mvn.w	r3, #1
 8005c9e:	60fb      	str	r3, [r7, #12]
 8005ca0:	e01b      	b.n	8005cda <BSP_OSPI_RAM_EnableMemoryMappedMode+0x52>
  }
  /* OSPI Delay Block enable */
  else if (OSPI_DLYB_Enable(&hospi_ram[Instance]) != BSP_ERROR_NONE)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	225c      	movs	r2, #92	; 0x5c
 8005ca6:	fb02 f303 	mul.w	r3, r2, r3
 8005caa:	4a0e      	ldr	r2, [pc, #56]	; (8005ce4 <BSP_OSPI_RAM_EnableMemoryMappedMode+0x5c>)
 8005cac:	4413      	add	r3, r2
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f000 fd10 	bl	80066d4 <OSPI_DLYB_Enable>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d003      	beq.n	8005cc2 <BSP_OSPI_RAM_EnableMemoryMappedMode+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8005cba:	f06f 0304 	mvn.w	r3, #4
 8005cbe:	60fb      	str	r3, [r7, #12]
 8005cc0:	e00b      	b.n	8005cda <BSP_OSPI_RAM_EnableMemoryMappedMode+0x52>
  }
  else
  {
    if (APS6408_EnableMemoryMappedMode(&hospi_ram[0], DUMMY_CLOCK_CYCLES_READ, DUMMY_CLOCK_CYCLES_WRITE,
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	2204      	movs	r2, #4
 8005cc6:	2105      	movs	r1, #5
 8005cc8:	4806      	ldr	r0, [pc, #24]	; (8005ce4 <BSP_OSPI_RAM_EnableMemoryMappedMode+0x5c>)
 8005cca:	f001 f9a1 	bl	8007010 <APS6408_EnableMemoryMappedMode>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d002      	beq.n	8005cda <BSP_OSPI_RAM_EnableMemoryMappedMode+0x52>
                                       1) != APS6408_OK)
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005cd4:	f06f 0303 	mvn.w	r3, #3
 8005cd8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return BSP status */
  return ret;
 8005cda:	68fb      	ldr	r3, [r7, #12]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3710      	adds	r7, #16
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	200018e0 	.word	0x200018e0

08005ce8 <BSP_OSPI_RAM_DisableMemoryMappedMode>:
  * @brief  Exit the memory-mapped mode
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
int32_t BSP_OSPI_RAM_DisableMemoryMappedMode(uint32_t Instance)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= OSPI_RAM_INSTANCES_NUMBER)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d003      	beq.n	8005d02 <BSP_OSPI_RAM_DisableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005cfa:	f06f 0301 	mvn.w	r3, #1
 8005cfe:	60fb      	str	r3, [r7, #12]
 8005d00:	e01e      	b.n	8005d40 <BSP_OSPI_RAM_DisableMemoryMappedMode+0x58>
  }
  else
  {
    if (Ospi_Ram_Ctx[Instance].IsInitialized != OSPI_ACCESS_MMP)
 8005d02:	4a12      	ldr	r2, [pc, #72]	; (8005d4c <BSP_OSPI_RAM_DisableMemoryMappedMode+0x64>)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d003      	beq.n	8005d16 <BSP_OSPI_RAM_DisableMemoryMappedMode+0x2e>
    {
      ret = BSP_ERROR_OSPI_MMP_UNLOCK_FAILURE;
 8005d0e:	f06f 031a 	mvn.w	r3, #26
 8005d12:	60fb      	str	r3, [r7, #12]
 8005d14:	e014      	b.n	8005d40 <BSP_OSPI_RAM_DisableMemoryMappedMode+0x58>
    }
    /* Abort MMP back to indirect mode */
    else if (HAL_OSPI_Abort(&hospi_ram[Instance]) != HAL_OK)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	225c      	movs	r2, #92	; 0x5c
 8005d1a:	fb02 f303 	mul.w	r3, r2, r3
 8005d1e:	4a0c      	ldr	r2, [pc, #48]	; (8005d50 <BSP_OSPI_RAM_DisableMemoryMappedMode+0x68>)
 8005d20:	4413      	add	r3, r2
 8005d22:	4618      	mov	r0, r3
 8005d24:	f010 fb7e 	bl	8016424 <HAL_OSPI_Abort>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d003      	beq.n	8005d36 <BSP_OSPI_RAM_DisableMemoryMappedMode+0x4e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005d2e:	f06f 0303 	mvn.w	r3, #3
 8005d32:	60fb      	str	r3, [r7, #12]
 8005d34:	e004      	b.n	8005d40 <BSP_OSPI_RAM_DisableMemoryMappedMode+0x58>
    }
    /* Update OSPI HyperRAM context if all operations are well done */
    else
    {
      Ospi_Ram_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8005d36:	4a05      	ldr	r2, [pc, #20]	; (8005d4c <BSP_OSPI_RAM_DisableMemoryMappedMode+0x64>)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2101      	movs	r1, #1
 8005d3c:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
    }
  }

  /* Return BSP status */
  return ret;
 8005d40:	68fb      	ldr	r3, [r7, #12]
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	2000193c 	.word	0x2000193c
 8005d50:	200018e0 	.word	0x200018e0

08005d54 <BSP_OSPI_RAM_ReadID>:
  * @param  Instance  OSPI instance
  * @param  Id Pointer to RAM ID bytes
  * @retval BSP status
  */
int32_t BSP_OSPI_RAM_ReadID(uint32_t Instance, uint8_t *Id)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  /* Check if the instance is supported */
  if (Instance >= OSPI_RAM_INSTANCES_NUMBER)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d003      	beq.n	8005d6c <BSP_OSPI_RAM_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005d64:	f06f 0301 	mvn.w	r3, #1
 8005d68:	60fb      	str	r3, [r7, #12]
 8005d6a:	e00d      	b.n	8005d88 <BSP_OSPI_RAM_ReadID+0x34>
  }
  else if (APS6408_ReadID(&hospi_ram[0], Id, 6U) != APS6408_OK)
 8005d6c:	2206      	movs	r2, #6
 8005d6e:	6839      	ldr	r1, [r7, #0]
 8005d70:	4808      	ldr	r0, [pc, #32]	; (8005d94 <BSP_OSPI_RAM_ReadID+0x40>)
 8005d72:	f001 fa5a 	bl	800722a <APS6408_ReadID>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d003      	beq.n	8005d84 <BSP_OSPI_RAM_ReadID+0x30>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8005d7c:	f06f 0304 	mvn.w	r3, #4
 8005d80:	60fb      	str	r3, [r7, #12]
 8005d82:	e001      	b.n	8005d88 <BSP_OSPI_RAM_ReadID+0x34>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8005d84:	2300      	movs	r3, #0
 8005d86:	60fb      	str	r3, [r7, #12]
  }

  /* Return BSP status */
  return ret;
 8005d88:	68fb      	ldr	r3, [r7, #12]
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	200018e0 	.word	0x200018e0

08005d98 <OSPI_NOR_MspInit>:
  * @brief  Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspInit(const OSPI_HandleTypeDef *hospi)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b094      	sub	sp, #80	; 0x50
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]

  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* Enable the OctoSPI memory interface clock */
  OSPI_NOR_CLK_ENABLE();
 8005da0:	4b9f      	ldr	r3, [pc, #636]	; (8006020 <OSPI_NOR_MspInit+0x288>)
 8005da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005da6:	4a9e      	ldr	r2, [pc, #632]	; (8006020 <OSPI_NOR_MspInit+0x288>)
 8005da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005db0:	4b9b      	ldr	r3, [pc, #620]	; (8006020 <OSPI_NOR_MspInit+0x288>)
 8005db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dba:	63bb      	str	r3, [r7, #56]	; 0x38
 8005dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38

  /* Reset the OctoSPI memory interface */
  OSPI_NOR_FORCE_RESET();
 8005dbe:	4b98      	ldr	r3, [pc, #608]	; (8006020 <OSPI_NOR_MspInit+0x288>)
 8005dc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dc2:	4a97      	ldr	r2, [pc, #604]	; (8006020 <OSPI_NOR_MspInit+0x288>)
 8005dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dc8:	6693      	str	r3, [r2, #104]	; 0x68
  OSPI_NOR_RELEASE_RESET();
 8005dca:	4b95      	ldr	r3, [pc, #596]	; (8006020 <OSPI_NOR_MspInit+0x288>)
 8005dcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dce:	4a94      	ldr	r2, [pc, #592]	; (8006020 <OSPI_NOR_MspInit+0x288>)
 8005dd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005dd4:	6693      	str	r3, [r2, #104]	; 0x68

  /* Enable GPIO clocks */
  OSPI_NOR_CLK_GPIO_CLK_ENABLE();
 8005dd6:	4b92      	ldr	r3, [pc, #584]	; (8006020 <OSPI_NOR_MspInit+0x288>)
 8005dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ddc:	4a90      	ldr	r2, [pc, #576]	; (8006020 <OSPI_NOR_MspInit+0x288>)
 8005dde:	f043 0320 	orr.w	r3, r3, #32
 8005de2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005de6:	4b8e      	ldr	r3, [pc, #568]	; (8006020 <OSPI_NOR_MspInit+0x288>)
 8005de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dec:	f003 0320 	and.w	r3, r3, #32
 8005df0:	637b      	str	r3, [r7, #52]	; 0x34
 8005df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  OSPI_NOR_DQS_GPIO_CLK_ENABLE();
 8005df4:	4b8a      	ldr	r3, [pc, #552]	; (8006020 <OSPI_NOR_MspInit+0x288>)
 8005df6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dfa:	4a89      	ldr	r2, [pc, #548]	; (8006020 <OSPI_NOR_MspInit+0x288>)
 8005dfc:	f043 0320 	orr.w	r3, r3, #32
 8005e00:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005e04:	4b86      	ldr	r3, [pc, #536]	; (8006020 <OSPI_NOR_MspInit+0x288>)
 8005e06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e0a:	f003 0320 	and.w	r3, r3, #32
 8005e0e:	633b      	str	r3, [r7, #48]	; 0x30
 8005e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  OSPI_NOR_CS_GPIO_CLK_ENABLE();
 8005e12:	4b83      	ldr	r3, [pc, #524]	; (8006020 <OSPI_NOR_MspInit+0x288>)
 8005e14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e18:	4a81      	ldr	r2, [pc, #516]	; (8006020 <OSPI_NOR_MspInit+0x288>)
 8005e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e1e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005e22:	4b7f      	ldr	r3, [pc, #508]	; (8006020 <OSPI_NOR_MspInit+0x288>)
 8005e24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  OSPI_NOR_D0_GPIO_CLK_ENABLE();
 8005e30:	4b7b      	ldr	r3, [pc, #492]	; (8006020 <OSPI_NOR_MspInit+0x288>)
 8005e32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e36:	4a7a      	ldr	r2, [pc, #488]	; (8006020 <OSPI_NOR_MspInit+0x288>)
 8005e38:	f043 0320 	orr.w	r3, r3, #32
 8005e3c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005e40:	4b77      	ldr	r3, [pc, #476]	; (8006020 <OSPI_NOR_MspInit+0x288>)
 8005e42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e46:	f003 0320 	and.w	r3, r3, #32
 8005e4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  OSPI_NOR_D1_GPIO_CLK_ENABLE();
 8005e4e:	4b74      	ldr	r3, [pc, #464]	; (8006020 <OSPI_NOR_MspInit+0x288>)
 8005e50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e54:	4a72      	ldr	r2, [pc, #456]	; (8006020 <OSPI_NOR_MspInit+0x288>)
 8005e56:	f043 0320 	orr.w	r3, r3, #32
 8005e5a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005e5e:	4b70      	ldr	r3, [pc, #448]	; (8006020 <OSPI_NOR_MspInit+0x288>)
 8005e60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e64:	f003 0320 	and.w	r3, r3, #32
 8005e68:	627b      	str	r3, [r7, #36]	; 0x24
 8005e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  OSPI_NOR_D2_GPIO_CLK_ENABLE();
 8005e6c:	4b6c      	ldr	r3, [pc, #432]	; (8006020 <OSPI_NOR_MspInit+0x288>)
 8005e6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e72:	4a6b      	ldr	r2, [pc, #428]	; (8006020 <OSPI_NOR_MspInit+0x288>)
 8005e74:	f043 0320 	orr.w	r3, r3, #32
 8005e78:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005e7c:	4b68      	ldr	r3, [pc, #416]	; (8006020 <OSPI_NOR_MspInit+0x288>)
 8005e7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e82:	f003 0320 	and.w	r3, r3, #32
 8005e86:	623b      	str	r3, [r7, #32]
 8005e88:	6a3b      	ldr	r3, [r7, #32]
  OSPI_NOR_D3_GPIO_CLK_ENABLE();
 8005e8a:	4b65      	ldr	r3, [pc, #404]	; (8006020 <OSPI_NOR_MspInit+0x288>)
 8005e8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e90:	4a63      	ldr	r2, [pc, #396]	; (8006020 <OSPI_NOR_MspInit+0x288>)
 8005e92:	f043 0320 	orr.w	r3, r3, #32
 8005e96:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005e9a:	4b61      	ldr	r3, [pc, #388]	; (8006020 <OSPI_NOR_MspInit+0x288>)
 8005e9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ea0:	f003 0320 	and.w	r3, r3, #32
 8005ea4:	61fb      	str	r3, [r7, #28]
 8005ea6:	69fb      	ldr	r3, [r7, #28]
  OSPI_NOR_D4_GPIO_CLK_ENABLE();
 8005ea8:	4b5d      	ldr	r3, [pc, #372]	; (8006020 <OSPI_NOR_MspInit+0x288>)
 8005eaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005eae:	4a5c      	ldr	r2, [pc, #368]	; (8006020 <OSPI_NOR_MspInit+0x288>)
 8005eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eb4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005eb8:	4b59      	ldr	r3, [pc, #356]	; (8006020 <OSPI_NOR_MspInit+0x288>)
 8005eba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ec2:	61bb      	str	r3, [r7, #24]
 8005ec4:	69bb      	ldr	r3, [r7, #24]
  OSPI_NOR_D5_GPIO_CLK_ENABLE();
 8005ec6:	4b56      	ldr	r3, [pc, #344]	; (8006020 <OSPI_NOR_MspInit+0x288>)
 8005ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ecc:	4a54      	ldr	r2, [pc, #336]	; (8006020 <OSPI_NOR_MspInit+0x288>)
 8005ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ed2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005ed6:	4b52      	ldr	r3, [pc, #328]	; (8006020 <OSPI_NOR_MspInit+0x288>)
 8005ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ee0:	617b      	str	r3, [r7, #20]
 8005ee2:	697b      	ldr	r3, [r7, #20]
  OSPI_NOR_D6_GPIO_CLK_ENABLE();
 8005ee4:	4b4e      	ldr	r3, [pc, #312]	; (8006020 <OSPI_NOR_MspInit+0x288>)
 8005ee6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005eea:	4a4d      	ldr	r2, [pc, #308]	; (8006020 <OSPI_NOR_MspInit+0x288>)
 8005eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ef0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005ef4:	4b4a      	ldr	r3, [pc, #296]	; (8006020 <OSPI_NOR_MspInit+0x288>)
 8005ef6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005efe:	613b      	str	r3, [r7, #16]
 8005f00:	693b      	ldr	r3, [r7, #16]
  OSPI_NOR_D7_GPIO_CLK_ENABLE();
 8005f02:	4b47      	ldr	r3, [pc, #284]	; (8006020 <OSPI_NOR_MspInit+0x288>)
 8005f04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f08:	4a45      	ldr	r2, [pc, #276]	; (8006020 <OSPI_NOR_MspInit+0x288>)
 8005f0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f0e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005f12:	4b43      	ldr	r3, [pc, #268]	; (8006020 <OSPI_NOR_MspInit+0x288>)
 8005f14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f1c:	60fb      	str	r3, [r7, #12]
 8005f1e:	68fb      	ldr	r3, [r7, #12]

  /* OctoSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_CS_PIN;
 8005f20:	2320      	movs	r3, #32
 8005f22:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8005f24:	2302      	movs	r3, #2
 8005f26:	643b      	str	r3, [r7, #64]	; 0x40
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	647b      	str	r3, [r7, #68]	; 0x44
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	64bb      	str	r3, [r7, #72]	; 0x48
  GPIO_InitStruct.Alternate = OSPI_NOR_CS_PIN_AF;
 8005f30:	2305      	movs	r3, #5
 8005f32:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_NOR_CS_GPIO_PORT, &GPIO_InitStruct);
 8005f34:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005f38:	4619      	mov	r1, r3
 8005f3a:	483a      	ldr	r0, [pc, #232]	; (8006024 <OSPI_NOR_MspInit+0x28c>)
 8005f3c:	f00d fdbe 	bl	8013abc <HAL_GPIO_Init>

  /* OctoSPI DQS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_DQS_PIN;
 8005f40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f44:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_NOR_DQS_PIN_AF;
 8005f46:	2305      	movs	r3, #5
 8005f48:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_NOR_DQS_GPIO_PORT, &GPIO_InitStruct);
 8005f4a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005f4e:	4619      	mov	r1, r3
 8005f50:	4835      	ldr	r0, [pc, #212]	; (8006028 <OSPI_NOR_MspInit+0x290>)
 8005f52:	f00d fdb3 	bl	8013abc <HAL_GPIO_Init>

  /* OctoSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_CLK_PIN;
 8005f56:	2310      	movs	r3, #16
 8005f58:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	647b      	str	r3, [r7, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_CLK_PIN_AF;
 8005f5e:	2305      	movs	r3, #5
 8005f60:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_NOR_CLK_GPIO_PORT, &GPIO_InitStruct);
 8005f62:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005f66:	4619      	mov	r1, r3
 8005f68:	482f      	ldr	r0, [pc, #188]	; (8006028 <OSPI_NOR_MspInit+0x290>)
 8005f6a:	f00d fda7 	bl	8013abc <HAL_GPIO_Init>

  /* OctoSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_D0_PIN;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_NOR_D0_PIN_AF;
 8005f72:	2305      	movs	r3, #5
 8005f74:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_NOR_D0_GPIO_PORT, &GPIO_InitStruct);
 8005f76:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	482a      	ldr	r0, [pc, #168]	; (8006028 <OSPI_NOR_MspInit+0x290>)
 8005f7e:	f00d fd9d 	bl	8013abc <HAL_GPIO_Init>

  /* OctoSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_D1_PIN;
 8005f82:	2302      	movs	r3, #2
 8005f84:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_NOR_D1_PIN_AF;
 8005f86:	2305      	movs	r3, #5
 8005f88:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_NOR_D1_GPIO_PORT, &GPIO_InitStruct);
 8005f8a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005f8e:	4619      	mov	r1, r3
 8005f90:	4825      	ldr	r0, [pc, #148]	; (8006028 <OSPI_NOR_MspInit+0x290>)
 8005f92:	f00d fd93 	bl	8013abc <HAL_GPIO_Init>

  /* OctoSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_D2_PIN;
 8005f96:	2304      	movs	r3, #4
 8005f98:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_NOR_D2_PIN_AF;
 8005f9a:	2305      	movs	r3, #5
 8005f9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_NOR_D2_GPIO_PORT, &GPIO_InitStruct);
 8005f9e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	4820      	ldr	r0, [pc, #128]	; (8006028 <OSPI_NOR_MspInit+0x290>)
 8005fa6:	f00d fd89 	bl	8013abc <HAL_GPIO_Init>

  /* OctoSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_D3_PIN;
 8005faa:	2308      	movs	r3, #8
 8005fac:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_NOR_D3_PIN_AF;
 8005fae:	2305      	movs	r3, #5
 8005fb0:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_NOR_D3_GPIO_PORT, &GPIO_InitStruct);
 8005fb2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	481b      	ldr	r0, [pc, #108]	; (8006028 <OSPI_NOR_MspInit+0x290>)
 8005fba:	f00d fd7f 	bl	8013abc <HAL_GPIO_Init>

  /* OctoSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_D4_PIN;
 8005fbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_NOR_D4_PIN_AF;
 8005fc4:	2305      	movs	r3, #5
 8005fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_NOR_D4_GPIO_PORT, &GPIO_InitStruct);
 8005fc8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005fcc:	4619      	mov	r1, r3
 8005fce:	4817      	ldr	r0, [pc, #92]	; (800602c <OSPI_NOR_MspInit+0x294>)
 8005fd0:	f00d fd74 	bl	8013abc <HAL_GPIO_Init>

  /* OctoSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_D5_PIN;
 8005fd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_NOR_D5_PIN_AF;
 8005fda:	2305      	movs	r3, #5
 8005fdc:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_NOR_D5_GPIO_PORT, &GPIO_InitStruct);
 8005fde:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	4811      	ldr	r0, [pc, #68]	; (800602c <OSPI_NOR_MspInit+0x294>)
 8005fe6:	f00d fd69 	bl	8013abc <HAL_GPIO_Init>

  /* OctoSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_D6_PIN;
 8005fea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005fee:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_NOR_D6_PIN_AF;
 8005ff0:	2305      	movs	r3, #5
 8005ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_NOR_D6_GPIO_PORT, &GPIO_InitStruct);
 8005ff4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	480c      	ldr	r0, [pc, #48]	; (800602c <OSPI_NOR_MspInit+0x294>)
 8005ffc:	f00d fd5e 	bl	8013abc <HAL_GPIO_Init>

  /* OctoSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_D7_PIN;
 8006000:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006004:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_NOR_D7_PIN_AF;
 8006006:	2305      	movs	r3, #5
 8006008:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_NOR_D7_GPIO_PORT, &GPIO_InitStruct);
 800600a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800600e:	4619      	mov	r1, r3
 8006010:	4806      	ldr	r0, [pc, #24]	; (800602c <OSPI_NOR_MspInit+0x294>)
 8006012:	f00d fd53 	bl	8013abc <HAL_GPIO_Init>
}
 8006016:	bf00      	nop
 8006018:	3750      	adds	r7, #80	; 0x50
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	46020c00 	.word	0x46020c00
 8006024:	42022000 	.word	0x42022000
 8006028:	42021400 	.word	0x42021400
 800602c:	42021c00 	.word	0x42021c00

08006030 <OSPI_NOR_MspDeInit>:
  * @brief  De-Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspDeInit(const OSPI_HandleTypeDef *hospi)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* OctoSPI GPIO pins de-configuration  */
  HAL_GPIO_DeInit(OSPI_NOR_CLK_GPIO_PORT, OSPI_NOR_CLK_PIN);
 8006038:	2110      	movs	r1, #16
 800603a:	4824      	ldr	r0, [pc, #144]	; (80060cc <OSPI_NOR_MspDeInit+0x9c>)
 800603c:	f00d ff16 	bl	8013e6c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_DQS_GPIO_PORT, OSPI_NOR_DQS_PIN);
 8006040:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006044:	4821      	ldr	r0, [pc, #132]	; (80060cc <OSPI_NOR_MspDeInit+0x9c>)
 8006046:	f00d ff11 	bl	8013e6c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_CS_GPIO_PORT, OSPI_NOR_CS_PIN);
 800604a:	2120      	movs	r1, #32
 800604c:	4820      	ldr	r0, [pc, #128]	; (80060d0 <OSPI_NOR_MspDeInit+0xa0>)
 800604e:	f00d ff0d 	bl	8013e6c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D0_GPIO_PORT, OSPI_NOR_D0_PIN);
 8006052:	2101      	movs	r1, #1
 8006054:	481d      	ldr	r0, [pc, #116]	; (80060cc <OSPI_NOR_MspDeInit+0x9c>)
 8006056:	f00d ff09 	bl	8013e6c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D1_GPIO_PORT, OSPI_NOR_D1_PIN);
 800605a:	2102      	movs	r1, #2
 800605c:	481b      	ldr	r0, [pc, #108]	; (80060cc <OSPI_NOR_MspDeInit+0x9c>)
 800605e:	f00d ff05 	bl	8013e6c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D2_GPIO_PORT, OSPI_NOR_D2_PIN);
 8006062:	2104      	movs	r1, #4
 8006064:	4819      	ldr	r0, [pc, #100]	; (80060cc <OSPI_NOR_MspDeInit+0x9c>)
 8006066:	f00d ff01 	bl	8013e6c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D3_GPIO_PORT, OSPI_NOR_D3_PIN);
 800606a:	2108      	movs	r1, #8
 800606c:	4817      	ldr	r0, [pc, #92]	; (80060cc <OSPI_NOR_MspDeInit+0x9c>)
 800606e:	f00d fefd 	bl	8013e6c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D4_GPIO_PORT, OSPI_NOR_D4_PIN);
 8006072:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006076:	4817      	ldr	r0, [pc, #92]	; (80060d4 <OSPI_NOR_MspDeInit+0xa4>)
 8006078:	f00d fef8 	bl	8013e6c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D5_GPIO_PORT, OSPI_NOR_D5_PIN);
 800607c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006080:	4814      	ldr	r0, [pc, #80]	; (80060d4 <OSPI_NOR_MspDeInit+0xa4>)
 8006082:	f00d fef3 	bl	8013e6c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D6_GPIO_PORT, OSPI_NOR_D6_PIN);
 8006086:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800608a:	4812      	ldr	r0, [pc, #72]	; (80060d4 <OSPI_NOR_MspDeInit+0xa4>)
 800608c:	f00d feee 	bl	8013e6c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D7_GPIO_PORT, OSPI_NOR_D7_PIN);
 8006090:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006094:	480f      	ldr	r0, [pc, #60]	; (80060d4 <OSPI_NOR_MspDeInit+0xa4>)
 8006096:	f00d fee9 	bl	8013e6c <HAL_GPIO_DeInit>

  /* Reset the OctoSPI memory interface */
  OSPI_NOR_FORCE_RESET();
 800609a:	4b0f      	ldr	r3, [pc, #60]	; (80060d8 <OSPI_NOR_MspDeInit+0xa8>)
 800609c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800609e:	4a0e      	ldr	r2, [pc, #56]	; (80060d8 <OSPI_NOR_MspDeInit+0xa8>)
 80060a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060a4:	6693      	str	r3, [r2, #104]	; 0x68
  OSPI_NOR_RELEASE_RESET();
 80060a6:	4b0c      	ldr	r3, [pc, #48]	; (80060d8 <OSPI_NOR_MspDeInit+0xa8>)
 80060a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060aa:	4a0b      	ldr	r2, [pc, #44]	; (80060d8 <OSPI_NOR_MspDeInit+0xa8>)
 80060ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060b0:	6693      	str	r3, [r2, #104]	; 0x68

  /* Disable the OctoSPI memory interface clock */
  OSPI_NOR_CLK_DISABLE();
 80060b2:	4b09      	ldr	r3, [pc, #36]	; (80060d8 <OSPI_NOR_MspDeInit+0xa8>)
 80060b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060b8:	4a07      	ldr	r2, [pc, #28]	; (80060d8 <OSPI_NOR_MspDeInit+0xa8>)
 80060ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80060c2:	bf00      	nop
 80060c4:	3708      	adds	r7, #8
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	42021400 	.word	0x42021400
 80060d0:	42022000 	.word	0x42022000
 80060d4:	42021c00 	.word	0x42021c00
 80060d8:	46020c00 	.word	0x46020c00

080060dc <OSPI_NOR_ResetMemory>:
  * @brief  This function reset the OSPI memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ResetMemory(uint32_t Instance)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80060e4:	2300      	movs	r3, #0
 80060e6:	60fb      	str	r3, [r7, #12]

  if (MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE,
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	225c      	movs	r2, #92	; 0x5c
 80060ec:	fb02 f303 	mul.w	r3, r2, r3
 80060f0:	4a44      	ldr	r2, [pc, #272]	; (8006204 <OSPI_NOR_ResetMemory+0x128>)
 80060f2:	4413      	add	r3, r2
 80060f4:	2200      	movs	r2, #0
 80060f6:	2100      	movs	r1, #0
 80060f8:	4618      	mov	r0, r3
 80060fa:	f006 f955 	bl	800c3a8 <MX25LM51245G_ResetEnable>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d003      	beq.n	800610c <OSPI_NOR_ResetMemory+0x30>
                               BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006104:	f06f 0304 	mvn.w	r3, #4
 8006108:	60fb      	str	r3, [r7, #12]
 800610a:	e076      	b.n	80061fa <OSPI_NOR_ResetMemory+0x11e>
  }
  else if (MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE,
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	225c      	movs	r2, #92	; 0x5c
 8006110:	fb02 f303 	mul.w	r3, r2, r3
 8006114:	4a3b      	ldr	r2, [pc, #236]	; (8006204 <OSPI_NOR_ResetMemory+0x128>)
 8006116:	4413      	add	r3, r2
 8006118:	2200      	movs	r2, #0
 800611a:	2100      	movs	r1, #0
 800611c:	4618      	mov	r0, r3
 800611e:	f006 f99b 	bl	800c458 <MX25LM51245G_ResetMemory>
 8006122:	4603      	mov	r3, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d003      	beq.n	8006130 <OSPI_NOR_ResetMemory+0x54>
                                    BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006128:	f06f 0304 	mvn.w	r3, #4
 800612c:	60fb      	str	r3, [r7, #12]
 800612e:	e064      	b.n	80061fa <OSPI_NOR_ResetMemory+0x11e>
  }
  else if (MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	225c      	movs	r2, #92	; 0x5c
 8006134:	fb02 f303 	mul.w	r3, r2, r3
 8006138:	4a32      	ldr	r2, [pc, #200]	; (8006204 <OSPI_NOR_ResetMemory+0x128>)
 800613a:	4413      	add	r3, r2
 800613c:	2200      	movs	r2, #0
 800613e:	2101      	movs	r1, #1
 8006140:	4618      	mov	r0, r3
 8006142:	f006 f931 	bl	800c3a8 <MX25LM51245G_ResetEnable>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d003      	beq.n	8006154 <OSPI_NOR_ResetMemory+0x78>
                                    BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800614c:	f06f 0304 	mvn.w	r3, #4
 8006150:	60fb      	str	r3, [r7, #12]
 8006152:	e052      	b.n	80061fa <OSPI_NOR_ResetMemory+0x11e>
  }
  else if (MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	225c      	movs	r2, #92	; 0x5c
 8006158:	fb02 f303 	mul.w	r3, r2, r3
 800615c:	4a29      	ldr	r2, [pc, #164]	; (8006204 <OSPI_NOR_ResetMemory+0x128>)
 800615e:	4413      	add	r3, r2
 8006160:	2200      	movs	r2, #0
 8006162:	2101      	movs	r1, #1
 8006164:	4618      	mov	r0, r3
 8006166:	f006 f977 	bl	800c458 <MX25LM51245G_ResetMemory>
 800616a:	4603      	mov	r3, r0
 800616c:	2b00      	cmp	r3, #0
 800616e:	d003      	beq.n	8006178 <OSPI_NOR_ResetMemory+0x9c>
                                    BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006170:	f06f 0304 	mvn.w	r3, #4
 8006174:	60fb      	str	r3, [r7, #12]
 8006176:	e040      	b.n	80061fa <OSPI_NOR_ResetMemory+0x11e>
  }
  else if (MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	225c      	movs	r2, #92	; 0x5c
 800617c:	fb02 f303 	mul.w	r3, r2, r3
 8006180:	4a20      	ldr	r2, [pc, #128]	; (8006204 <OSPI_NOR_ResetMemory+0x128>)
 8006182:	4413      	add	r3, r2
 8006184:	2201      	movs	r2, #1
 8006186:	2101      	movs	r1, #1
 8006188:	4618      	mov	r0, r3
 800618a:	f006 f90d 	bl	800c3a8 <MX25LM51245G_ResetEnable>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d003      	beq.n	800619c <OSPI_NOR_ResetMemory+0xc0>
                                    BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006194:	f06f 0304 	mvn.w	r3, #4
 8006198:	60fb      	str	r3, [r7, #12]
 800619a:	e02e      	b.n	80061fa <OSPI_NOR_ResetMemory+0x11e>
  }
  else if (MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	225c      	movs	r2, #92	; 0x5c
 80061a0:	fb02 f303 	mul.w	r3, r2, r3
 80061a4:	4a17      	ldr	r2, [pc, #92]	; (8006204 <OSPI_NOR_ResetMemory+0x128>)
 80061a6:	4413      	add	r3, r2
 80061a8:	2201      	movs	r2, #1
 80061aa:	2101      	movs	r1, #1
 80061ac:	4618      	mov	r0, r3
 80061ae:	f006 f953 	bl	800c458 <MX25LM51245G_ResetMemory>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d003      	beq.n	80061c0 <OSPI_NOR_ResetMemory+0xe4>
                                    BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80061b8:	f06f 0304 	mvn.w	r3, #4
 80061bc:	60fb      	str	r3, [r7, #12]
 80061be:	e01c      	b.n	80061fa <OSPI_NOR_ResetMemory+0x11e>
  }
  else
  {
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;     /* After reset S/W setting to indirect access  */
 80061c0:	4911      	ldr	r1, [pc, #68]	; (8006208 <OSPI_NOR_ResetMemory+0x12c>)
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	4613      	mov	r3, r2
 80061c6:	005b      	lsls	r3, r3, #1
 80061c8:	4413      	add	r3, r2
 80061ca:	440b      	add	r3, r1
 80061cc:	2201      	movs	r2, #1
 80061ce:	701a      	strb	r2, [r3, #0]
    Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;    /* After reset H/W back to SPI mode by default */
 80061d0:	490d      	ldr	r1, [pc, #52]	; (8006208 <OSPI_NOR_ResetMemory+0x12c>)
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	4613      	mov	r3, r2
 80061d6:	005b      	lsls	r3, r3, #1
 80061d8:	4413      	add	r3, r2
 80061da:	440b      	add	r3, r1
 80061dc:	3301      	adds	r3, #1
 80061de:	2200      	movs	r2, #0
 80061e0:	701a      	strb	r2, [r3, #0]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER; /* After reset S/W setting to STR mode        */
 80061e2:	4909      	ldr	r1, [pc, #36]	; (8006208 <OSPI_NOR_ResetMemory+0x12c>)
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	4613      	mov	r3, r2
 80061e8:	005b      	lsls	r3, r3, #1
 80061ea:	4413      	add	r3, r2
 80061ec:	440b      	add	r3, r1
 80061ee:	3302      	adds	r3, #2
 80061f0:	2200      	movs	r2, #0
 80061f2:	701a      	strb	r2, [r3, #0]

    /* After SWreset CMD, wait in case SWReset occurred during erase operation */
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 80061f4:	2064      	movs	r0, #100	; 0x64
 80061f6:	f00b fa81 	bl	80116fc <HAL_Delay>
  }

  /* Return BSP status */
  return ret;
 80061fa:	68fb      	ldr	r3, [r7, #12]
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3710      	adds	r7, #16
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}
 8006204:	20001880 	.word	0x20001880
 8006208:	200018dc 	.word	0x200018dc

0800620c <OSPI_NOR_EnterDOPIMode>:
  * @brief  This function enables the octal DTR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterDOPIMode(uint32_t Instance)
{
 800620c:	b590      	push	{r4, r7, lr}
 800620e:	b087      	sub	sp, #28
 8006210:	af02      	add	r7, sp, #8
 8006212:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	225c      	movs	r2, #92	; 0x5c
 8006218:	fb02 f303 	mul.w	r3, r2, r3
 800621c:	4a6e      	ldr	r2, [pc, #440]	; (80063d8 <OSPI_NOR_EnterDOPIMode+0x1cc>)
 800621e:	1898      	adds	r0, r3, r2
 8006220:	496e      	ldr	r1, [pc, #440]	; (80063dc <OSPI_NOR_EnterDOPIMode+0x1d0>)
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	4613      	mov	r3, r2
 8006226:	005b      	lsls	r3, r3, #1
 8006228:	4413      	add	r3, r2
 800622a:	440b      	add	r3, r1
 800622c:	3301      	adds	r3, #1
 800622e:	7819      	ldrb	r1, [r3, #0]
 8006230:	4c6a      	ldr	r4, [pc, #424]	; (80063dc <OSPI_NOR_EnterDOPIMode+0x1d0>)
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	4613      	mov	r3, r2
 8006236:	005b      	lsls	r3, r3, #1
 8006238:	4413      	add	r3, r2
 800623a:	4423      	add	r3, r4
 800623c:	3302      	adds	r3, #2
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	461a      	mov	r2, r3
 8006242:	f005 fd71 	bl	800bd28 <MX25LM51245G_WriteEnable>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d003      	beq.n	8006254 <OSPI_NOR_EnterDOPIMode+0x48>
                               Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800624c:	f06f 0304 	mvn.w	r3, #4
 8006250:	60fb      	str	r3, [r7, #12]
 8006252:	e0bb      	b.n	80063cc <OSPI_NOR_EnterDOPIMode+0x1c0>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	225c      	movs	r2, #92	; 0x5c
 8006258:	fb02 f303 	mul.w	r3, r2, r3
 800625c:	4a5e      	ldr	r2, [pc, #376]	; (80063d8 <OSPI_NOR_EnterDOPIMode+0x1cc>)
 800625e:	1898      	adds	r0, r3, r2
 8006260:	495e      	ldr	r1, [pc, #376]	; (80063dc <OSPI_NOR_EnterDOPIMode+0x1d0>)
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	4613      	mov	r3, r2
 8006266:	005b      	lsls	r3, r3, #1
 8006268:	4413      	add	r3, r2
 800626a:	440b      	add	r3, r1
 800626c:	3301      	adds	r3, #1
 800626e:	7819      	ldrb	r1, [r3, #0]
 8006270:	4c5a      	ldr	r4, [pc, #360]	; (80063dc <OSPI_NOR_EnterDOPIMode+0x1d0>)
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	4613      	mov	r3, r2
 8006276:	005b      	lsls	r3, r3, #1
 8006278:	4413      	add	r3, r2
 800627a:	4423      	add	r3, r4
 800627c:	3302      	adds	r3, #2
 800627e:	781a      	ldrb	r2, [r3, #0]
 8006280:	2307      	movs	r3, #7
 8006282:	9300      	str	r3, [sp, #0]
 8006284:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006288:	f005 febc 	bl	800c004 <MX25LM51245G_WriteCfg2Register>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d003      	beq.n	800629a <OSPI_NOR_EnterDOPIMode+0x8e>
                                          Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR,
                                          MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006292:	f06f 0304 	mvn.w	r3, #4
 8006296:	60fb      	str	r3, [r7, #12]
 8006298:	e098      	b.n	80063cc <OSPI_NOR_EnterDOPIMode+0x1c0>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	225c      	movs	r2, #92	; 0x5c
 800629e:	fb02 f303 	mul.w	r3, r2, r3
 80062a2:	4a4d      	ldr	r2, [pc, #308]	; (80063d8 <OSPI_NOR_EnterDOPIMode+0x1cc>)
 80062a4:	1898      	adds	r0, r3, r2
 80062a6:	494d      	ldr	r1, [pc, #308]	; (80063dc <OSPI_NOR_EnterDOPIMode+0x1d0>)
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	4613      	mov	r3, r2
 80062ac:	005b      	lsls	r3, r3, #1
 80062ae:	4413      	add	r3, r2
 80062b0:	440b      	add	r3, r1
 80062b2:	3301      	adds	r3, #1
 80062b4:	7819      	ldrb	r1, [r3, #0]
 80062b6:	4c49      	ldr	r4, [pc, #292]	; (80063dc <OSPI_NOR_EnterDOPIMode+0x1d0>)
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	4613      	mov	r3, r2
 80062bc:	005b      	lsls	r3, r3, #1
 80062be:	4413      	add	r3, r2
 80062c0:	4423      	add	r3, r4
 80062c2:	3302      	adds	r3, #2
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	461a      	mov	r2, r3
 80062c8:	f005 fd2e 	bl	800bd28 <MX25LM51245G_WriteEnable>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d003      	beq.n	80062da <OSPI_NOR_EnterDOPIMode+0xce>
                                    Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80062d2:	f06f 0304 	mvn.w	r3, #4
 80062d6:	60fb      	str	r3, [r7, #12]
 80062d8:	e078      	b.n	80063cc <OSPI_NOR_EnterDOPIMode+0x1c0>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	225c      	movs	r2, #92	; 0x5c
 80062de:	fb02 f303 	mul.w	r3, r2, r3
 80062e2:	4a3d      	ldr	r2, [pc, #244]	; (80063d8 <OSPI_NOR_EnterDOPIMode+0x1cc>)
 80062e4:	1898      	adds	r0, r3, r2
 80062e6:	493d      	ldr	r1, [pc, #244]	; (80063dc <OSPI_NOR_EnterDOPIMode+0x1d0>)
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	4613      	mov	r3, r2
 80062ec:	005b      	lsls	r3, r3, #1
 80062ee:	4413      	add	r3, r2
 80062f0:	440b      	add	r3, r1
 80062f2:	3301      	adds	r3, #1
 80062f4:	7819      	ldrb	r1, [r3, #0]
 80062f6:	4c39      	ldr	r4, [pc, #228]	; (80063dc <OSPI_NOR_EnterDOPIMode+0x1d0>)
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	4613      	mov	r3, r2
 80062fc:	005b      	lsls	r3, r3, #1
 80062fe:	4413      	add	r3, r2
 8006300:	4423      	add	r3, r4
 8006302:	3302      	adds	r3, #2
 8006304:	781a      	ldrb	r2, [r3, #0]
 8006306:	2302      	movs	r3, #2
 8006308:	9300      	str	r3, [sp, #0]
 800630a:	2300      	movs	r3, #0
 800630c:	f005 fe7a 	bl	800c004 <MX25LM51245G_WriteCfg2Register>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d003      	beq.n	800631e <OSPI_NOR_EnterDOPIMode+0x112>
                                          Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR,
                                          MX25LM51245G_CR2_DOPI) != MX25LM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006316:	f06f 0304 	mvn.w	r3, #4
 800631a:	60fb      	str	r3, [r7, #12]
 800631c:	e056      	b.n	80063cc <OSPI_NOR_EnterDOPIMode+0x1c0>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 800631e:	2028      	movs	r0, #40	; 0x28
 8006320:	f00b f9ec 	bl	80116fc <HAL_Delay>

    /* Reconfigure the memory type of the peripheral */
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8006324:	4a2c      	ldr	r2, [pc, #176]	; (80063d8 <OSPI_NOR_EnterDOPIMode+0x1cc>)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	215c      	movs	r1, #92	; 0x5c
 800632a:	fb01 f303 	mul.w	r3, r1, r3
 800632e:	4413      	add	r3, r2
 8006330:	330c      	adds	r3, #12
 8006332:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006336:	601a      	str	r2, [r3, #0]
    hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8006338:	4a27      	ldr	r2, [pc, #156]	; (80063d8 <OSPI_NOR_EnterDOPIMode+0x1cc>)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	215c      	movs	r1, #92	; 0x5c
 800633e:	fb01 f303 	mul.w	r3, r1, r3
 8006342:	4413      	add	r3, r2
 8006344:	332c      	adds	r3, #44	; 0x2c
 8006346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800634a:	601a      	str	r2, [r3, #0]
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	225c      	movs	r2, #92	; 0x5c
 8006350:	fb02 f303 	mul.w	r3, r2, r3
 8006354:	4a20      	ldr	r2, [pc, #128]	; (80063d8 <OSPI_NOR_EnterDOPIMode+0x1cc>)
 8006356:	4413      	add	r3, r2
 8006358:	4618      	mov	r0, r3
 800635a:	f00f fcf5 	bl	8015d48 <HAL_OSPI_Init>
 800635e:	4603      	mov	r3, r0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d003      	beq.n	800636c <OSPI_NOR_EnterDOPIMode+0x160>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8006364:	f06f 0303 	mvn.w	r3, #3
 8006368:	60fb      	str	r3, [r7, #12]
 800636a:	e02f      	b.n	80063cc <OSPI_NOR_EnterDOPIMode+0x1c0>
    }
    /* Check Flash busy ? */
    else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	225c      	movs	r2, #92	; 0x5c
 8006370:	fb02 f303 	mul.w	r3, r2, r3
 8006374:	4a18      	ldr	r2, [pc, #96]	; (80063d8 <OSPI_NOR_EnterDOPIMode+0x1cc>)
 8006376:	4413      	add	r3, r2
 8006378:	2201      	movs	r2, #1
 800637a:	2101      	movs	r1, #1
 800637c:	4618      	mov	r0, r3
 800637e:	f005 f8b5 	bl	800b4ec <MX25LM51245G_AutoPollingMemReady>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d003      	beq.n	8006390 <OSPI_NOR_EnterDOPIMode+0x184>
                                              BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006388:	f06f 0304 	mvn.w	r3, #4
 800638c:	60fb      	str	r3, [r7, #12]
 800638e:	e01d      	b.n	80063cc <OSPI_NOR_EnterDOPIMode+0x1c0>
    }
    /* Check the configuration has been correctly done */
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER,
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	225c      	movs	r2, #92	; 0x5c
 8006394:	fb02 f303 	mul.w	r3, r2, r3
 8006398:	4a0f      	ldr	r2, [pc, #60]	; (80063d8 <OSPI_NOR_EnterDOPIMode+0x1cc>)
 800639a:	1898      	adds	r0, r3, r2
 800639c:	f107 0308 	add.w	r3, r7, #8
 80063a0:	9300      	str	r3, [sp, #0]
 80063a2:	2300      	movs	r3, #0
 80063a4:	2201      	movs	r2, #1
 80063a6:	2101      	movs	r1, #1
 80063a8:	f005 fec1 	bl	800c12e <MX25LM51245G_ReadCfg2Register>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d003      	beq.n	80063ba <OSPI_NOR_EnterDOPIMode+0x1ae>
                                           MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80063b2:	f06f 0304 	mvn.w	r3, #4
 80063b6:	60fb      	str	r3, [r7, #12]
 80063b8:	e008      	b.n	80063cc <OSPI_NOR_EnterDOPIMode+0x1c0>
    }
    else if (reg[0] != MX25LM51245G_CR2_DOPI)
 80063ba:	7a3b      	ldrb	r3, [r7, #8]
 80063bc:	2b02      	cmp	r3, #2
 80063be:	d003      	beq.n	80063c8 <OSPI_NOR_EnterDOPIMode+0x1bc>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80063c0:	f06f 0304 	mvn.w	r3, #4
 80063c4:	60fb      	str	r3, [r7, #12]
 80063c6:	e001      	b.n	80063cc <OSPI_NOR_EnterDOPIMode+0x1c0>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 80063c8:	2300      	movs	r3, #0
 80063ca:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return BSP status */
  return ret;
 80063cc:	68fb      	ldr	r3, [r7, #12]
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3714      	adds	r7, #20
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd90      	pop	{r4, r7, pc}
 80063d6:	bf00      	nop
 80063d8:	20001880 	.word	0x20001880
 80063dc:	200018dc 	.word	0x200018dc

080063e0 <OSPI_NOR_EnterSOPIMode>:
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterSOPIMode(uint32_t Instance)
{
 80063e0:	b590      	push	{r4, r7, lr}
 80063e2:	b087      	sub	sp, #28
 80063e4:	af02      	add	r7, sp, #8
 80063e6:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	225c      	movs	r2, #92	; 0x5c
 80063ec:	fb02 f303 	mul.w	r3, r2, r3
 80063f0:	4a5c      	ldr	r2, [pc, #368]	; (8006564 <OSPI_NOR_EnterSOPIMode+0x184>)
 80063f2:	1898      	adds	r0, r3, r2
 80063f4:	495c      	ldr	r1, [pc, #368]	; (8006568 <OSPI_NOR_EnterSOPIMode+0x188>)
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	4613      	mov	r3, r2
 80063fa:	005b      	lsls	r3, r3, #1
 80063fc:	4413      	add	r3, r2
 80063fe:	440b      	add	r3, r1
 8006400:	3301      	adds	r3, #1
 8006402:	7819      	ldrb	r1, [r3, #0]
 8006404:	4c58      	ldr	r4, [pc, #352]	; (8006568 <OSPI_NOR_EnterSOPIMode+0x188>)
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	4613      	mov	r3, r2
 800640a:	005b      	lsls	r3, r3, #1
 800640c:	4413      	add	r3, r2
 800640e:	4423      	add	r3, r4
 8006410:	3302      	adds	r3, #2
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	461a      	mov	r2, r3
 8006416:	f005 fc87 	bl	800bd28 <MX25LM51245G_WriteEnable>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d003      	beq.n	8006428 <OSPI_NOR_EnterSOPIMode+0x48>
                               Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006420:	f06f 0304 	mvn.w	r3, #4
 8006424:	60fb      	str	r3, [r7, #12]
 8006426:	e097      	b.n	8006558 <OSPI_NOR_EnterSOPIMode+0x178>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	225c      	movs	r2, #92	; 0x5c
 800642c:	fb02 f303 	mul.w	r3, r2, r3
 8006430:	4a4c      	ldr	r2, [pc, #304]	; (8006564 <OSPI_NOR_EnterSOPIMode+0x184>)
 8006432:	1898      	adds	r0, r3, r2
 8006434:	494c      	ldr	r1, [pc, #304]	; (8006568 <OSPI_NOR_EnterSOPIMode+0x188>)
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	4613      	mov	r3, r2
 800643a:	005b      	lsls	r3, r3, #1
 800643c:	4413      	add	r3, r2
 800643e:	440b      	add	r3, r1
 8006440:	3301      	adds	r3, #1
 8006442:	7819      	ldrb	r1, [r3, #0]
 8006444:	4c48      	ldr	r4, [pc, #288]	; (8006568 <OSPI_NOR_EnterSOPIMode+0x188>)
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	4613      	mov	r3, r2
 800644a:	005b      	lsls	r3, r3, #1
 800644c:	4413      	add	r3, r2
 800644e:	4423      	add	r3, r4
 8006450:	3302      	adds	r3, #2
 8006452:	781a      	ldrb	r2, [r3, #0]
 8006454:	2307      	movs	r3, #7
 8006456:	9300      	str	r3, [sp, #0]
 8006458:	f44f 7340 	mov.w	r3, #768	; 0x300
 800645c:	f005 fdd2 	bl	800c004 <MX25LM51245G_WriteCfg2Register>
 8006460:	4603      	mov	r3, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d003      	beq.n	800646e <OSPI_NOR_EnterSOPIMode+0x8e>
                                          Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR,
                                          MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006466:	f06f 0304 	mvn.w	r3, #4
 800646a:	60fb      	str	r3, [r7, #12]
 800646c:	e074      	b.n	8006558 <OSPI_NOR_EnterSOPIMode+0x178>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	225c      	movs	r2, #92	; 0x5c
 8006472:	fb02 f303 	mul.w	r3, r2, r3
 8006476:	4a3b      	ldr	r2, [pc, #236]	; (8006564 <OSPI_NOR_EnterSOPIMode+0x184>)
 8006478:	1898      	adds	r0, r3, r2
 800647a:	493b      	ldr	r1, [pc, #236]	; (8006568 <OSPI_NOR_EnterSOPIMode+0x188>)
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	4613      	mov	r3, r2
 8006480:	005b      	lsls	r3, r3, #1
 8006482:	4413      	add	r3, r2
 8006484:	440b      	add	r3, r1
 8006486:	3301      	adds	r3, #1
 8006488:	7819      	ldrb	r1, [r3, #0]
 800648a:	4c37      	ldr	r4, [pc, #220]	; (8006568 <OSPI_NOR_EnterSOPIMode+0x188>)
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	4613      	mov	r3, r2
 8006490:	005b      	lsls	r3, r3, #1
 8006492:	4413      	add	r3, r2
 8006494:	4423      	add	r3, r4
 8006496:	3302      	adds	r3, #2
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	461a      	mov	r2, r3
 800649c:	f005 fc44 	bl	800bd28 <MX25LM51245G_WriteEnable>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d003      	beq.n	80064ae <OSPI_NOR_EnterSOPIMode+0xce>
                                    Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80064a6:	f06f 0304 	mvn.w	r3, #4
 80064aa:	60fb      	str	r3, [r7, #12]
 80064ac:	e054      	b.n	8006558 <OSPI_NOR_EnterSOPIMode+0x178>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	225c      	movs	r2, #92	; 0x5c
 80064b2:	fb02 f303 	mul.w	r3, r2, r3
 80064b6:	4a2b      	ldr	r2, [pc, #172]	; (8006564 <OSPI_NOR_EnterSOPIMode+0x184>)
 80064b8:	1898      	adds	r0, r3, r2
 80064ba:	492b      	ldr	r1, [pc, #172]	; (8006568 <OSPI_NOR_EnterSOPIMode+0x188>)
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	4613      	mov	r3, r2
 80064c0:	005b      	lsls	r3, r3, #1
 80064c2:	4413      	add	r3, r2
 80064c4:	440b      	add	r3, r1
 80064c6:	3301      	adds	r3, #1
 80064c8:	7819      	ldrb	r1, [r3, #0]
 80064ca:	4c27      	ldr	r4, [pc, #156]	; (8006568 <OSPI_NOR_EnterSOPIMode+0x188>)
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	4613      	mov	r3, r2
 80064d0:	005b      	lsls	r3, r3, #1
 80064d2:	4413      	add	r3, r2
 80064d4:	4423      	add	r3, r4
 80064d6:	3302      	adds	r3, #2
 80064d8:	781a      	ldrb	r2, [r3, #0]
 80064da:	2301      	movs	r3, #1
 80064dc:	9300      	str	r3, [sp, #0]
 80064de:	2300      	movs	r3, #0
 80064e0:	f005 fd90 	bl	800c004 <MX25LM51245G_WriteCfg2Register>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d003      	beq.n	80064f2 <OSPI_NOR_EnterSOPIMode+0x112>
                                          Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR,
                                          MX25LM51245G_CR2_SOPI) != MX25LM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80064ea:	f06f 0304 	mvn.w	r3, #4
 80064ee:	60fb      	str	r3, [r7, #12]
 80064f0:	e032      	b.n	8006558 <OSPI_NOR_EnterSOPIMode+0x178>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 80064f2:	2028      	movs	r0, #40	; 0x28
 80064f4:	f00b f902 	bl	80116fc <HAL_Delay>

    /* Check Flash busy ? */
    if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	225c      	movs	r2, #92	; 0x5c
 80064fc:	fb02 f303 	mul.w	r3, r2, r3
 8006500:	4a18      	ldr	r2, [pc, #96]	; (8006564 <OSPI_NOR_EnterSOPIMode+0x184>)
 8006502:	4413      	add	r3, r2
 8006504:	2200      	movs	r2, #0
 8006506:	2101      	movs	r1, #1
 8006508:	4618      	mov	r0, r3
 800650a:	f004 ffef 	bl	800b4ec <MX25LM51245G_AutoPollingMemReady>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d003      	beq.n	800651c <OSPI_NOR_EnterSOPIMode+0x13c>
                                         BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006514:	f06f 0304 	mvn.w	r3, #4
 8006518:	60fb      	str	r3, [r7, #12]
 800651a:	e01d      	b.n	8006558 <OSPI_NOR_EnterSOPIMode+0x178>
    }
    /* Check the configuration has been correctly done */
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER,
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	225c      	movs	r2, #92	; 0x5c
 8006520:	fb02 f303 	mul.w	r3, r2, r3
 8006524:	4a0f      	ldr	r2, [pc, #60]	; (8006564 <OSPI_NOR_EnterSOPIMode+0x184>)
 8006526:	1898      	adds	r0, r3, r2
 8006528:	f107 0308 	add.w	r3, r7, #8
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	2300      	movs	r3, #0
 8006530:	2200      	movs	r2, #0
 8006532:	2101      	movs	r1, #1
 8006534:	f005 fdfb 	bl	800c12e <MX25LM51245G_ReadCfg2Register>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d003      	beq.n	8006546 <OSPI_NOR_EnterSOPIMode+0x166>
                                           MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800653e:	f06f 0304 	mvn.w	r3, #4
 8006542:	60fb      	str	r3, [r7, #12]
 8006544:	e008      	b.n	8006558 <OSPI_NOR_EnterSOPIMode+0x178>
    }
    else if (reg[0] != MX25LM51245G_CR2_SOPI)
 8006546:	7a3b      	ldrb	r3, [r7, #8]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d003      	beq.n	8006554 <OSPI_NOR_EnterSOPIMode+0x174>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800654c:	f06f 0304 	mvn.w	r3, #4
 8006550:	60fb      	str	r3, [r7, #12]
 8006552:	e001      	b.n	8006558 <OSPI_NOR_EnterSOPIMode+0x178>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8006554:	2300      	movs	r3, #0
 8006556:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return BSP status */
  return ret;
 8006558:	68fb      	ldr	r3, [r7, #12]
}
 800655a:	4618      	mov	r0, r3
 800655c:	3714      	adds	r7, #20
 800655e:	46bd      	mov	sp, r7
 8006560:	bd90      	pop	{r4, r7, pc}
 8006562:	bf00      	nop
 8006564:	20001880 	.word	0x20001880
 8006568:	200018dc 	.word	0x200018dc

0800656c <OSPI_NOR_ExitOPIMode>:
  * @brief  This function disables the octal DTR or STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ExitOPIMode(uint32_t Instance)
{
 800656c:	b590      	push	{r4, r7, lr}
 800656e:	b087      	sub	sp, #28
 8006570:	af02      	add	r7, sp, #8
 8006572:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8006574:	2300      	movs	r3, #0
 8006576:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	225c      	movs	r2, #92	; 0x5c
 800657c:	fb02 f303 	mul.w	r3, r2, r3
 8006580:	4a52      	ldr	r2, [pc, #328]	; (80066cc <OSPI_NOR_ExitOPIMode+0x160>)
 8006582:	1898      	adds	r0, r3, r2
 8006584:	4952      	ldr	r1, [pc, #328]	; (80066d0 <OSPI_NOR_ExitOPIMode+0x164>)
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	4613      	mov	r3, r2
 800658a:	005b      	lsls	r3, r3, #1
 800658c:	4413      	add	r3, r2
 800658e:	440b      	add	r3, r1
 8006590:	3301      	adds	r3, #1
 8006592:	7819      	ldrb	r1, [r3, #0]
 8006594:	4c4e      	ldr	r4, [pc, #312]	; (80066d0 <OSPI_NOR_ExitOPIMode+0x164>)
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	4613      	mov	r3, r2
 800659a:	005b      	lsls	r3, r3, #1
 800659c:	4413      	add	r3, r2
 800659e:	4423      	add	r3, r4
 80065a0:	3302      	adds	r3, #2
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	461a      	mov	r2, r3
 80065a6:	f005 fbbf 	bl	800bd28 <MX25LM51245G_WriteEnable>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d003      	beq.n	80065b8 <OSPI_NOR_ExitOPIMode+0x4c>
                               Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80065b0:	f06f 0304 	mvn.w	r3, #4
 80065b4:	60fb      	str	r3, [r7, #12]
 80065b6:	e083      	b.n	80066c0 <OSPI_NOR_ExitOPIMode+0x154>
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
 80065b8:	2300      	movs	r3, #0
 80065ba:	723b      	strb	r3, [r7, #8]
    reg[1] = 0;
 80065bc:	2300      	movs	r3, #0
 80065be:	727b      	strb	r3, [r7, #9]
    if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	225c      	movs	r2, #92	; 0x5c
 80065c4:	fb02 f303 	mul.w	r3, r2, r3
 80065c8:	4a40      	ldr	r2, [pc, #256]	; (80066cc <OSPI_NOR_ExitOPIMode+0x160>)
 80065ca:	1898      	adds	r0, r3, r2
 80065cc:	4940      	ldr	r1, [pc, #256]	; (80066d0 <OSPI_NOR_ExitOPIMode+0x164>)
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	4613      	mov	r3, r2
 80065d2:	005b      	lsls	r3, r3, #1
 80065d4:	4413      	add	r3, r2
 80065d6:	440b      	add	r3, r1
 80065d8:	3301      	adds	r3, #1
 80065da:	7819      	ldrb	r1, [r3, #0]
 80065dc:	4c3c      	ldr	r4, [pc, #240]	; (80066d0 <OSPI_NOR_ExitOPIMode+0x164>)
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	4613      	mov	r3, r2
 80065e2:	005b      	lsls	r3, r3, #1
 80065e4:	4413      	add	r3, r2
 80065e6:	4423      	add	r3, r4
 80065e8:	3302      	adds	r3, #2
 80065ea:	781a      	ldrb	r2, [r3, #0]
 80065ec:	7a3b      	ldrb	r3, [r7, #8]
 80065ee:	9300      	str	r3, [sp, #0]
 80065f0:	2300      	movs	r3, #0
 80065f2:	f005 fd07 	bl	800c004 <MX25LM51245G_WriteCfg2Register>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d003      	beq.n	8006604 <OSPI_NOR_ExitOPIMode+0x98>
                                       Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR,
                                       reg[0]) != MX25LM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80065fc:	f06f 0304 	mvn.w	r3, #4
 8006600:	60fb      	str	r3, [r7, #12]
 8006602:	e05d      	b.n	80066c0 <OSPI_NOR_ExitOPIMode+0x154>
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8006604:	2028      	movs	r0, #40	; 0x28
 8006606:	f00b f879 	bl	80116fc <HAL_Delay>

      if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 800660a:	4931      	ldr	r1, [pc, #196]	; (80066d0 <OSPI_NOR_ExitOPIMode+0x164>)
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	4613      	mov	r3, r2
 8006610:	005b      	lsls	r3, r3, #1
 8006612:	4413      	add	r3, r2
 8006614:	440b      	add	r3, r1
 8006616:	3302      	adds	r3, #2
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	2b01      	cmp	r3, #1
 800661c:	d120      	bne.n	8006660 <OSPI_NOR_ExitOPIMode+0xf4>
      {
        /* Reconfigure the memory type of the peripheral */
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 800661e:	4a2b      	ldr	r2, [pc, #172]	; (80066cc <OSPI_NOR_ExitOPIMode+0x160>)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	215c      	movs	r1, #92	; 0x5c
 8006624:	fb01 f303 	mul.w	r3, r1, r3
 8006628:	4413      	add	r3, r2
 800662a:	330c      	adds	r3, #12
 800662c:	2200      	movs	r2, #0
 800662e:	601a      	str	r2, [r3, #0]
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8006630:	4a26      	ldr	r2, [pc, #152]	; (80066cc <OSPI_NOR_ExitOPIMode+0x160>)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	215c      	movs	r1, #92	; 0x5c
 8006636:	fb01 f303 	mul.w	r3, r1, r3
 800663a:	4413      	add	r3, r2
 800663c:	332c      	adds	r3, #44	; 0x2c
 800663e:	2200      	movs	r2, #0
 8006640:	601a      	str	r2, [r3, #0]
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	225c      	movs	r2, #92	; 0x5c
 8006646:	fb02 f303 	mul.w	r3, r2, r3
 800664a:	4a20      	ldr	r2, [pc, #128]	; (80066cc <OSPI_NOR_ExitOPIMode+0x160>)
 800664c:	4413      	add	r3, r2
 800664e:	4618      	mov	r0, r3
 8006650:	f00f fb7a 	bl	8015d48 <HAL_OSPI_Init>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d002      	beq.n	8006660 <OSPI_NOR_ExitOPIMode+0xf4>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800665a:	f06f 0303 	mvn.w	r3, #3
 800665e:	60fb      	str	r3, [r7, #12]
        }
      }

      if (ret == BSP_ERROR_NONE)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d12c      	bne.n	80066c0 <OSPI_NOR_ExitOPIMode+0x154>
      {
        /* Check Flash busy ? */
        if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE,
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	225c      	movs	r2, #92	; 0x5c
 800666a:	fb02 f303 	mul.w	r3, r2, r3
 800666e:	4a17      	ldr	r2, [pc, #92]	; (80066cc <OSPI_NOR_ExitOPIMode+0x160>)
 8006670:	4413      	add	r3, r2
 8006672:	2200      	movs	r2, #0
 8006674:	2100      	movs	r1, #0
 8006676:	4618      	mov	r0, r3
 8006678:	f004 ff38 	bl	800b4ec <MX25LM51245G_AutoPollingMemReady>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d003      	beq.n	800668a <OSPI_NOR_ExitOPIMode+0x11e>
                                             BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8006682:	f06f 0304 	mvn.w	r3, #4
 8006686:	60fb      	str	r3, [r7, #12]
 8006688:	e01a      	b.n	80066c0 <OSPI_NOR_ExitOPIMode+0x154>
        }
        /* Check the configuration has been correctly done */
        else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER,
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	225c      	movs	r2, #92	; 0x5c
 800668e:	fb02 f303 	mul.w	r3, r2, r3
 8006692:	4a0e      	ldr	r2, [pc, #56]	; (80066cc <OSPI_NOR_ExitOPIMode+0x160>)
 8006694:	1898      	adds	r0, r3, r2
 8006696:	f107 0308 	add.w	r3, r7, #8
 800669a:	9300      	str	r3, [sp, #0]
 800669c:	2300      	movs	r3, #0
 800669e:	2200      	movs	r2, #0
 80066a0:	2100      	movs	r1, #0
 80066a2:	f005 fd44 	bl	800c12e <MX25LM51245G_ReadCfg2Register>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d003      	beq.n	80066b4 <OSPI_NOR_ExitOPIMode+0x148>
                                               MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 80066ac:	f06f 0304 	mvn.w	r3, #4
 80066b0:	60fb      	str	r3, [r7, #12]
 80066b2:	e005      	b.n	80066c0 <OSPI_NOR_ExitOPIMode+0x154>
        }
        else if (reg[0] != 0U)
 80066b4:	7a3b      	ldrb	r3, [r7, #8]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d002      	beq.n	80066c0 <OSPI_NOR_ExitOPIMode+0x154>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 80066ba:	f06f 0304 	mvn.w	r3, #4
 80066be:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 80066c0:	68fb      	ldr	r3, [r7, #12]
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3714      	adds	r7, #20
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd90      	pop	{r4, r7, pc}
 80066ca:	bf00      	nop
 80066cc:	20001880 	.word	0x20001880
 80066d0:	200018dc 	.word	0x200018dc

080066d4 <OSPI_DLYB_Enable>:
  * @brief  This function enables delay block.
  * @param  hospi OSPI handle
  * @retval BSP status
  */
static int32_t OSPI_DLYB_Enable(OSPI_HandleTypeDef *hospi)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b088      	sub	sp, #32
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  HAL_OSPI_DLYB_CfgTypeDef dlyb_cfg, dlyb_cfg_test;
  int32_t ret = BSP_ERROR_NONE;
 80066dc:	2300      	movs	r3, #0
 80066de:	61fb      	str	r3, [r7, #28]
  uint32_t div_value = 4;
 80066e0:	2304      	movs	r3, #4
 80066e2:	61bb      	str	r3, [r7, #24]

  /* Delay block configuration ------------------------------------------------ */
  if (HAL_OSPI_DLYB_GetClockPeriod(hospi, &dlyb_cfg) != HAL_OK)
 80066e4:	f107 0310 	add.w	r3, r7, #16
 80066e8:	4619      	mov	r1, r3
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f010 f94c 	bl	8016988 <HAL_OSPI_DLYB_GetClockPeriod>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d002      	beq.n	80066fc <OSPI_DLYB_Enable+0x28>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 80066f6:	f06f 0303 	mvn.w	r3, #3
 80066fa:	61fb      	str	r3, [r7, #28]
  }

  /* PhaseSel is divided by 4 (emperic value)*/
  dlyb_cfg.PhaseSel /= div_value;
 80066fc:	697a      	ldr	r2, [r7, #20]
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	fbb2 f3f3 	udiv	r3, r2, r3
 8006704:	617b      	str	r3, [r7, #20]

  /* save the present configuration for check*/
  dlyb_cfg_test = dlyb_cfg;
 8006706:	f107 0308 	add.w	r3, r7, #8
 800670a:	f107 0210 	add.w	r2, r7, #16
 800670e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006712:	e883 0003 	stmia.w	r3, {r0, r1}

  /*set delay block configuration*/
  if (HAL_OSPI_DLYB_SetConfig(hospi, &dlyb_cfg) != HAL_OK)
 8006716:	f107 0310 	add.w	r3, r7, #16
 800671a:	4619      	mov	r1, r3
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f010 f8bf 	bl	80168a0 <HAL_OSPI_DLYB_SetConfig>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d002      	beq.n	800672e <OSPI_DLYB_Enable+0x5a>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8006728:	f06f 0303 	mvn.w	r3, #3
 800672c:	61fb      	str	r3, [r7, #28]
  }

  /*check the set value*/
  if (HAL_OSPI_DLYB_GetConfig(hospi, &dlyb_cfg) != HAL_OK)
 800672e:	f107 0310 	add.w	r3, r7, #16
 8006732:	4619      	mov	r1, r3
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f010 f8fb 	bl	8016930 <HAL_OSPI_DLYB_GetConfig>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d002      	beq.n	8006746 <OSPI_DLYB_Enable+0x72>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8006740:	f06f 0303 	mvn.w	r3, #3
 8006744:	61fb      	str	r3, [r7, #28]
  }

  if ((dlyb_cfg.PhaseSel != dlyb_cfg_test.PhaseSel) || (dlyb_cfg.Units != dlyb_cfg_test.Units))
 8006746:	697a      	ldr	r2, [r7, #20]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	429a      	cmp	r2, r3
 800674c:	d103      	bne.n	8006756 <OSPI_DLYB_Enable+0x82>
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	429a      	cmp	r2, r3
 8006754:	d002      	beq.n	800675c <OSPI_DLYB_Enable+0x88>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8006756:	f06f 0303 	mvn.w	r3, #3
 800675a:	61fb      	str	r3, [r7, #28]
  }

  /* Return BSP status */
  return ret;
 800675c:	69fb      	ldr	r3, [r7, #28]
}
 800675e:	4618      	mov	r0, r3
 8006760:	3720      	adds	r7, #32
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
	...

08006768 <OSPI_RAM_MspInit>:
  * @brief  Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_RAM_MspInit(const OSPI_HandleTypeDef *hospi)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b094      	sub	sp, #80	; 0x50
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]

  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* Enable the OctoSPI memory interface clock */
  OSPI_RAM_CLK_ENABLE();
 8006770:	4ba0      	ldr	r3, [pc, #640]	; (80069f4 <OSPI_RAM_MspInit+0x28c>)
 8006772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006776:	4a9f      	ldr	r2, [pc, #636]	; (80069f4 <OSPI_RAM_MspInit+0x28c>)
 8006778:	f043 0310 	orr.w	r3, r3, #16
 800677c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006780:	4b9c      	ldr	r3, [pc, #624]	; (80069f4 <OSPI_RAM_MspInit+0x28c>)
 8006782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006786:	f003 0310 	and.w	r3, r3, #16
 800678a:	63bb      	str	r3, [r7, #56]	; 0x38
 800678c:	6bbb      	ldr	r3, [r7, #56]	; 0x38

  /* Reset the OctoSPI memory interface */
  OSPI_RAM_FORCE_RESET();
 800678e:	4b99      	ldr	r3, [pc, #612]	; (80069f4 <OSPI_RAM_MspInit+0x28c>)
 8006790:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006792:	4a98      	ldr	r2, [pc, #608]	; (80069f4 <OSPI_RAM_MspInit+0x28c>)
 8006794:	f043 0310 	orr.w	r3, r3, #16
 8006798:	6693      	str	r3, [r2, #104]	; 0x68
  OSPI_RAM_RELEASE_RESET();
 800679a:	4b96      	ldr	r3, [pc, #600]	; (80069f4 <OSPI_RAM_MspInit+0x28c>)
 800679c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800679e:	4a95      	ldr	r2, [pc, #596]	; (80069f4 <OSPI_RAM_MspInit+0x28c>)
 80067a0:	f023 0310 	bic.w	r3, r3, #16
 80067a4:	6693      	str	r3, [r2, #104]	; 0x68

  /* Enable GPIO clocks */
  OSPI_RAM_CLK_GPIO_CLK_ENABLE();
 80067a6:	4b93      	ldr	r3, [pc, #588]	; (80069f4 <OSPI_RAM_MspInit+0x28c>)
 80067a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067ac:	4a91      	ldr	r2, [pc, #580]	; (80069f4 <OSPI_RAM_MspInit+0x28c>)
 80067ae:	f043 0302 	orr.w	r3, r3, #2
 80067b2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80067b6:	4b8f      	ldr	r3, [pc, #572]	; (80069f4 <OSPI_RAM_MspInit+0x28c>)
 80067b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067bc:	f003 0302 	and.w	r3, r3, #2
 80067c0:	637b      	str	r3, [r7, #52]	; 0x34
 80067c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  OSPI_RAM_DQS_GPIO_CLK_ENABLE();
 80067c4:	4b8b      	ldr	r3, [pc, #556]	; (80069f4 <OSPI_RAM_MspInit+0x28c>)
 80067c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067ca:	4a8a      	ldr	r2, [pc, #552]	; (80069f4 <OSPI_RAM_MspInit+0x28c>)
 80067cc:	f043 0310 	orr.w	r3, r3, #16
 80067d0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80067d4:	4b87      	ldr	r3, [pc, #540]	; (80069f4 <OSPI_RAM_MspInit+0x28c>)
 80067d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067da:	f003 0310 	and.w	r3, r3, #16
 80067de:	633b      	str	r3, [r7, #48]	; 0x30
 80067e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  OSPI_RAM_CS_GPIO_CLK_ENABLE();
 80067e2:	4b84      	ldr	r3, [pc, #528]	; (80069f4 <OSPI_RAM_MspInit+0x28c>)
 80067e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067e8:	4a82      	ldr	r2, [pc, #520]	; (80069f4 <OSPI_RAM_MspInit+0x28c>)
 80067ea:	f043 0302 	orr.w	r3, r3, #2
 80067ee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80067f2:	4b80      	ldr	r3, [pc, #512]	; (80069f4 <OSPI_RAM_MspInit+0x28c>)
 80067f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067f8:	f003 0302 	and.w	r3, r3, #2
 80067fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  OSPI_RAM_D0_GPIO_CLK_ENABLE();
 8006800:	4b7c      	ldr	r3, [pc, #496]	; (80069f4 <OSPI_RAM_MspInit+0x28c>)
 8006802:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006806:	4a7b      	ldr	r2, [pc, #492]	; (80069f4 <OSPI_RAM_MspInit+0x28c>)
 8006808:	f043 0320 	orr.w	r3, r3, #32
 800680c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006810:	4b78      	ldr	r3, [pc, #480]	; (80069f4 <OSPI_RAM_MspInit+0x28c>)
 8006812:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006816:	f003 0320 	and.w	r3, r3, #32
 800681a:	62bb      	str	r3, [r7, #40]	; 0x28
 800681c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  OSPI_RAM_D1_GPIO_CLK_ENABLE();
 800681e:	4b75      	ldr	r3, [pc, #468]	; (80069f4 <OSPI_RAM_MspInit+0x28c>)
 8006820:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006824:	4a73      	ldr	r2, [pc, #460]	; (80069f4 <OSPI_RAM_MspInit+0x28c>)
 8006826:	f043 0320 	orr.w	r3, r3, #32
 800682a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800682e:	4b71      	ldr	r3, [pc, #452]	; (80069f4 <OSPI_RAM_MspInit+0x28c>)
 8006830:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006834:	f003 0320 	and.w	r3, r3, #32
 8006838:	627b      	str	r3, [r7, #36]	; 0x24
 800683a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  OSPI_RAM_D2_GPIO_CLK_ENABLE();
 800683c:	4b6d      	ldr	r3, [pc, #436]	; (80069f4 <OSPI_RAM_MspInit+0x28c>)
 800683e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006842:	4a6c      	ldr	r2, [pc, #432]	; (80069f4 <OSPI_RAM_MspInit+0x28c>)
 8006844:	f043 0320 	orr.w	r3, r3, #32
 8006848:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800684c:	4b69      	ldr	r3, [pc, #420]	; (80069f4 <OSPI_RAM_MspInit+0x28c>)
 800684e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006852:	f003 0320 	and.w	r3, r3, #32
 8006856:	623b      	str	r3, [r7, #32]
 8006858:	6a3b      	ldr	r3, [r7, #32]
  OSPI_RAM_D3_GPIO_CLK_ENABLE();
 800685a:	4b66      	ldr	r3, [pc, #408]	; (80069f4 <OSPI_RAM_MspInit+0x28c>)
 800685c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006860:	4a64      	ldr	r2, [pc, #400]	; (80069f4 <OSPI_RAM_MspInit+0x28c>)
 8006862:	f043 0320 	orr.w	r3, r3, #32
 8006866:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800686a:	4b62      	ldr	r3, [pc, #392]	; (80069f4 <OSPI_RAM_MspInit+0x28c>)
 800686c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006870:	f003 0320 	and.w	r3, r3, #32
 8006874:	61fb      	str	r3, [r7, #28]
 8006876:	69fb      	ldr	r3, [r7, #28]
  OSPI_RAM_D4_GPIO_CLK_ENABLE();
 8006878:	4b5e      	ldr	r3, [pc, #376]	; (80069f4 <OSPI_RAM_MspInit+0x28c>)
 800687a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800687e:	4a5d      	ldr	r2, [pc, #372]	; (80069f4 <OSPI_RAM_MspInit+0x28c>)
 8006880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006884:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006888:	4b5a      	ldr	r3, [pc, #360]	; (80069f4 <OSPI_RAM_MspInit+0x28c>)
 800688a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800688e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006892:	61bb      	str	r3, [r7, #24]
 8006894:	69bb      	ldr	r3, [r7, #24]
  OSPI_RAM_D5_GPIO_CLK_ENABLE();
 8006896:	4b57      	ldr	r3, [pc, #348]	; (80069f4 <OSPI_RAM_MspInit+0x28c>)
 8006898:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800689c:	4a55      	ldr	r2, [pc, #340]	; (80069f4 <OSPI_RAM_MspInit+0x28c>)
 800689e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80068a6:	4b53      	ldr	r3, [pc, #332]	; (80069f4 <OSPI_RAM_MspInit+0x28c>)
 80068a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068b0:	617b      	str	r3, [r7, #20]
 80068b2:	697b      	ldr	r3, [r7, #20]
  OSPI_RAM_D6_GPIO_CLK_ENABLE();
 80068b4:	4b4f      	ldr	r3, [pc, #316]	; (80069f4 <OSPI_RAM_MspInit+0x28c>)
 80068b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068ba:	4a4e      	ldr	r2, [pc, #312]	; (80069f4 <OSPI_RAM_MspInit+0x28c>)
 80068bc:	f043 0304 	orr.w	r3, r3, #4
 80068c0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80068c4:	4b4b      	ldr	r3, [pc, #300]	; (80069f4 <OSPI_RAM_MspInit+0x28c>)
 80068c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068ca:	f003 0304 	and.w	r3, r3, #4
 80068ce:	613b      	str	r3, [r7, #16]
 80068d0:	693b      	ldr	r3, [r7, #16]
  OSPI_RAM_D7_GPIO_CLK_ENABLE();
 80068d2:	4b48      	ldr	r3, [pc, #288]	; (80069f4 <OSPI_RAM_MspInit+0x28c>)
 80068d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068d8:	4a46      	ldr	r2, [pc, #280]	; (80069f4 <OSPI_RAM_MspInit+0x28c>)
 80068da:	f043 0308 	orr.w	r3, r3, #8
 80068de:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80068e2:	4b44      	ldr	r3, [pc, #272]	; (80069f4 <OSPI_RAM_MspInit+0x28c>)
 80068e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068e8:	f003 0308 	and.w	r3, r3, #8
 80068ec:	60fb      	str	r3, [r7, #12]
 80068ee:	68fb      	ldr	r3, [r7, #12]

  /* OctoSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_RAM_CS_PIN;
 80068f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80068f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80068f6:	2302      	movs	r3, #2
 80068f8:	643b      	str	r3, [r7, #64]	; 0x40
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80068fa:	2301      	movs	r3, #1
 80068fc:	647b      	str	r3, [r7, #68]	; 0x44
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80068fe:	2303      	movs	r3, #3
 8006900:	64bb      	str	r3, [r7, #72]	; 0x48
  GPIO_InitStruct.Alternate = OSPI_RAM_CS_PIN_AF;
 8006902:	230a      	movs	r3, #10
 8006904:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_RAM_CS_GPIO_PORT, &GPIO_InitStruct);
 8006906:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800690a:	4619      	mov	r1, r3
 800690c:	483a      	ldr	r0, [pc, #232]	; (80069f8 <OSPI_RAM_MspInit+0x290>)
 800690e:	f00d f8d5 	bl	8013abc <HAL_GPIO_Init>

  /* OctoSPI DQS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_RAM_DQS_PIN;
 8006912:	2308      	movs	r3, #8
 8006914:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_RAM_DQS_PIN_AF;
 8006916:	2303      	movs	r3, #3
 8006918:	64fb      	str	r3, [r7, #76]	; 0x4c
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800691a:	2300      	movs	r3, #0
 800691c:	647b      	str	r3, [r7, #68]	; 0x44
  HAL_GPIO_Init(OSPI_RAM_DQS_GPIO_PORT, &GPIO_InitStruct);
 800691e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006922:	4619      	mov	r1, r3
 8006924:	4835      	ldr	r0, [pc, #212]	; (80069fc <OSPI_RAM_MspInit+0x294>)
 8006926:	f00d f8c9 	bl	8013abc <HAL_GPIO_Init>

  /* OctoSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_RAM_CLK_PIN;
 800692a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800692e:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8006930:	2300      	movs	r3, #0
 8006932:	647b      	str	r3, [r7, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_RAM_CLK_PIN_AF;
 8006934:	230a      	movs	r3, #10
 8006936:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_RAM_CLK_GPIO_PORT, &GPIO_InitStruct);
 8006938:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800693c:	4619      	mov	r1, r3
 800693e:	482e      	ldr	r0, [pc, #184]	; (80069f8 <OSPI_RAM_MspInit+0x290>)
 8006940:	f00d f8bc 	bl	8013abc <HAL_GPIO_Init>

  /* OctoSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_RAM_D0_PIN;
 8006944:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006948:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_RAM_D0_PIN_AF;
 800694a:	230a      	movs	r3, #10
 800694c:	64fb      	str	r3, [r7, #76]	; 0x4c
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800694e:	2300      	movs	r3, #0
 8006950:	647b      	str	r3, [r7, #68]	; 0x44
  HAL_GPIO_Init(OSPI_RAM_D0_GPIO_PORT, &GPIO_InitStruct);
 8006952:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006956:	4619      	mov	r1, r3
 8006958:	4829      	ldr	r0, [pc, #164]	; (8006a00 <OSPI_RAM_MspInit+0x298>)
 800695a:	f00d f8af 	bl	8013abc <HAL_GPIO_Init>

  /* OctoSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_RAM_D1_PIN;
 800695e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006962:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_RAM_D1_PIN_AF;
 8006964:	230a      	movs	r3, #10
 8006966:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_RAM_D1_GPIO_PORT, &GPIO_InitStruct);
 8006968:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800696c:	4619      	mov	r1, r3
 800696e:	4824      	ldr	r0, [pc, #144]	; (8006a00 <OSPI_RAM_MspInit+0x298>)
 8006970:	f00d f8a4 	bl	8013abc <HAL_GPIO_Init>

  /* OctoSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_RAM_D2_PIN;
 8006974:	2380      	movs	r3, #128	; 0x80
 8006976:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_RAM_D2_PIN_AF;
 8006978:	230a      	movs	r3, #10
 800697a:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_RAM_D2_GPIO_PORT, &GPIO_InitStruct);
 800697c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006980:	4619      	mov	r1, r3
 8006982:	481f      	ldr	r0, [pc, #124]	; (8006a00 <OSPI_RAM_MspInit+0x298>)
 8006984:	f00d f89a 	bl	8013abc <HAL_GPIO_Init>

  /* OctoSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_RAM_D3_PIN;
 8006988:	2340      	movs	r3, #64	; 0x40
 800698a:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_RAM_D3_PIN_AF;
 800698c:	230a      	movs	r3, #10
 800698e:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_RAM_D3_GPIO_PORT, &GPIO_InitStruct);
 8006990:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006994:	4619      	mov	r1, r3
 8006996:	481a      	ldr	r0, [pc, #104]	; (8006a00 <OSPI_RAM_MspInit+0x298>)
 8006998:	f00d f890 	bl	8013abc <HAL_GPIO_Init>

  /* OctoSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_RAM_D4_PIN;
 800699c:	2304      	movs	r3, #4
 800699e:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_RAM_D4_PIN_AF;
 80069a0:	2303      	movs	r3, #3
 80069a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_RAM_D4_GPIO_PORT, &GPIO_InitStruct);
 80069a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80069a8:	4619      	mov	r1, r3
 80069aa:	4816      	ldr	r0, [pc, #88]	; (8006a04 <OSPI_RAM_MspInit+0x29c>)
 80069ac:	f00d f886 	bl	8013abc <HAL_GPIO_Init>

  /* OctoSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_RAM_D5_PIN;
 80069b0:	2301      	movs	r3, #1
 80069b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_RAM_D5_PIN_AF;
 80069b4:	2303      	movs	r3, #3
 80069b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_RAM_D5_GPIO_PORT, &GPIO_InitStruct);
 80069b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80069bc:	4619      	mov	r1, r3
 80069be:	4812      	ldr	r0, [pc, #72]	; (8006a08 <OSPI_RAM_MspInit+0x2a0>)
 80069c0:	f00d f87c 	bl	8013abc <HAL_GPIO_Init>

  /* OctoSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_RAM_D6_PIN;
 80069c4:	2308      	movs	r3, #8
 80069c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_RAM_D6_PIN_AF;
 80069c8:	230a      	movs	r3, #10
 80069ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_RAM_D6_GPIO_PORT, &GPIO_InitStruct);
 80069cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80069d0:	4619      	mov	r1, r3
 80069d2:	480e      	ldr	r0, [pc, #56]	; (8006a0c <OSPI_RAM_MspInit+0x2a4>)
 80069d4:	f00d f872 	bl	8013abc <HAL_GPIO_Init>

  /* OctoSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_RAM_D7_PIN;
 80069d8:	2380      	movs	r3, #128	; 0x80
 80069da:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_RAM_D7_PIN_AF;
 80069dc:	230a      	movs	r3, #10
 80069de:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_RAM_D7_GPIO_PORT, &GPIO_InitStruct);
 80069e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80069e4:	4619      	mov	r1, r3
 80069e6:	480a      	ldr	r0, [pc, #40]	; (8006a10 <OSPI_RAM_MspInit+0x2a8>)
 80069e8:	f00d f868 	bl	8013abc <HAL_GPIO_Init>
}
 80069ec:	bf00      	nop
 80069ee:	3750      	adds	r7, #80	; 0x50
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	46020c00 	.word	0x46020c00
 80069f8:	42020400 	.word	0x42020400
 80069fc:	42021000 	.word	0x42021000
 8006a00:	42021400 	.word	0x42021400
 8006a04:	42021c00 	.word	0x42021c00
 8006a08:	42022000 	.word	0x42022000
 8006a0c:	42020800 	.word	0x42020800
 8006a10:	42020c00 	.word	0x42020c00

08006a14 <OSPI_RAM_MspDeInit>:
  * @brief  De-Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_RAM_MspDeInit(const OSPI_HandleTypeDef *hospi)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* OctoSPI GPIO pins de-configuration  */
  HAL_GPIO_DeInit(OSPI_RAM_CLK_GPIO_PORT, OSPI_RAM_CLK_PIN);
 8006a1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006a20:	4822      	ldr	r0, [pc, #136]	; (8006aac <OSPI_RAM_MspDeInit+0x98>)
 8006a22:	f00d fa23 	bl	8013e6c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_RAM_DQS_GPIO_PORT, OSPI_RAM_DQS_PIN);
 8006a26:	2108      	movs	r1, #8
 8006a28:	4821      	ldr	r0, [pc, #132]	; (8006ab0 <OSPI_RAM_MspDeInit+0x9c>)
 8006a2a:	f00d fa1f 	bl	8013e6c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_RAM_CS_GPIO_PORT, OSPI_RAM_CS_PIN);
 8006a2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006a32:	481e      	ldr	r0, [pc, #120]	; (8006aac <OSPI_RAM_MspDeInit+0x98>)
 8006a34:	f00d fa1a 	bl	8013e6c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_RAM_D0_GPIO_PORT, OSPI_RAM_D0_PIN);
 8006a38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006a3c:	481d      	ldr	r0, [pc, #116]	; (8006ab4 <OSPI_RAM_MspDeInit+0xa0>)
 8006a3e:	f00d fa15 	bl	8013e6c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_RAM_D1_GPIO_PORT, OSPI_RAM_D1_PIN);
 8006a42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a46:	481b      	ldr	r0, [pc, #108]	; (8006ab4 <OSPI_RAM_MspDeInit+0xa0>)
 8006a48:	f00d fa10 	bl	8013e6c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_RAM_D2_GPIO_PORT, OSPI_RAM_D2_PIN);
 8006a4c:	2180      	movs	r1, #128	; 0x80
 8006a4e:	4819      	ldr	r0, [pc, #100]	; (8006ab4 <OSPI_RAM_MspDeInit+0xa0>)
 8006a50:	f00d fa0c 	bl	8013e6c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_RAM_D3_GPIO_PORT, OSPI_RAM_D3_PIN);
 8006a54:	2140      	movs	r1, #64	; 0x40
 8006a56:	4817      	ldr	r0, [pc, #92]	; (8006ab4 <OSPI_RAM_MspDeInit+0xa0>)
 8006a58:	f00d fa08 	bl	8013e6c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_RAM_D4_GPIO_PORT, OSPI_RAM_D4_PIN);
 8006a5c:	2104      	movs	r1, #4
 8006a5e:	4816      	ldr	r0, [pc, #88]	; (8006ab8 <OSPI_RAM_MspDeInit+0xa4>)
 8006a60:	f00d fa04 	bl	8013e6c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_RAM_D5_GPIO_PORT, OSPI_RAM_D5_PIN);
 8006a64:	2101      	movs	r1, #1
 8006a66:	4815      	ldr	r0, [pc, #84]	; (8006abc <OSPI_RAM_MspDeInit+0xa8>)
 8006a68:	f00d fa00 	bl	8013e6c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_RAM_D6_GPIO_PORT, OSPI_RAM_D6_PIN);
 8006a6c:	2108      	movs	r1, #8
 8006a6e:	4814      	ldr	r0, [pc, #80]	; (8006ac0 <OSPI_RAM_MspDeInit+0xac>)
 8006a70:	f00d f9fc 	bl	8013e6c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_RAM_D7_GPIO_PORT, OSPI_RAM_D7_PIN);
 8006a74:	2180      	movs	r1, #128	; 0x80
 8006a76:	4813      	ldr	r0, [pc, #76]	; (8006ac4 <OSPI_RAM_MspDeInit+0xb0>)
 8006a78:	f00d f9f8 	bl	8013e6c <HAL_GPIO_DeInit>

  /* Reset the OctoSPI memory interface */
  OSPI_RAM_FORCE_RESET();
 8006a7c:	4b12      	ldr	r3, [pc, #72]	; (8006ac8 <OSPI_RAM_MspDeInit+0xb4>)
 8006a7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a80:	4a11      	ldr	r2, [pc, #68]	; (8006ac8 <OSPI_RAM_MspDeInit+0xb4>)
 8006a82:	f043 0310 	orr.w	r3, r3, #16
 8006a86:	6693      	str	r3, [r2, #104]	; 0x68
  OSPI_RAM_RELEASE_RESET();
 8006a88:	4b0f      	ldr	r3, [pc, #60]	; (8006ac8 <OSPI_RAM_MspDeInit+0xb4>)
 8006a8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a8c:	4a0e      	ldr	r2, [pc, #56]	; (8006ac8 <OSPI_RAM_MspDeInit+0xb4>)
 8006a8e:	f023 0310 	bic.w	r3, r3, #16
 8006a92:	6693      	str	r3, [r2, #104]	; 0x68

  /* Disable the OctoSPI memory interface clock */
  OSPI_RAM_CLK_DISABLE();
 8006a94:	4b0c      	ldr	r3, [pc, #48]	; (8006ac8 <OSPI_RAM_MspDeInit+0xb4>)
 8006a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a9a:	4a0b      	ldr	r2, [pc, #44]	; (8006ac8 <OSPI_RAM_MspDeInit+0xb4>)
 8006a9c:	f023 0310 	bic.w	r3, r3, #16
 8006aa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006aa4:	bf00      	nop
 8006aa6:	3708      	adds	r7, #8
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	42020400 	.word	0x42020400
 8006ab0:	42021000 	.word	0x42021000
 8006ab4:	42021400 	.word	0x42021400
 8006ab8:	42021c00 	.word	0x42021c00
 8006abc:	42022000 	.word	0x42022000
 8006ac0:	42020800 	.word	0x42020800
 8006ac4:	42020c00 	.word	0x42020c00
 8006ac8:	46020c00 	.word	0x46020c00

08006acc <BSP_RANGING_SENSOR_Init>:
  * @brief Initializes the ranging sensor.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t BSP_RANGING_SENSOR_Init(uint32_t Instance)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d903      	bls.n	8006ae2 <BSP_RANGING_SENSOR_Init+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006ada:	f06f 0301 	mvn.w	r3, #1
 8006ade:	60fb      	str	r3, [r7, #12]
 8006ae0:	e005      	b.n	8006aee <BSP_RANGING_SENSOR_Init+0x22>
  }
  else
  {
    /* run i2c recovery before probing the device */
    (void)vl53l5cx_i2c_recover();
 8006ae2:	f000 f955 	bl	8006d90 <vl53l5cx_i2c_recover>
    ret = VL53L5CX_Probe(Instance);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 f8ce 	bl	8006c88 <VL53L5CX_Probe>
 8006aec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006aee:	68fb      	ldr	r3, [r7, #12]
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3710      	adds	r7, #16
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <BSP_RANGING_SENSOR_ReadID>:
  * @param Instance    Ranging sensor instance.
  * @param pId    Pointer to the device ID.
  * @retval BSP status
  */
int32_t BSP_RANGING_SENSOR_ReadID(const uint32_t Instance, uint32_t *pId)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d903      	bls.n	8006b10 <BSP_RANGING_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006b08:	f06f 0301 	mvn.w	r3, #1
 8006b0c:	60fb      	str	r3, [r7, #12]
 8006b0e:	e012      	b.n	8006b36 <BSP_RANGING_SENSOR_ReadID+0x3e>
  }
  else if (VL53L5A1_RANGING_SENSOR_Drv->ReadID(VL53L5A1_RANGING_SENSOR_CompObj[Instance], pId) < 0)
 8006b10:	4b0b      	ldr	r3, [pc, #44]	; (8006b40 <BSP_RANGING_SENSOR_ReadID+0x48>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	490b      	ldr	r1, [pc, #44]	; (8006b44 <BSP_RANGING_SENSOR_ReadID+0x4c>)
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006b1e:	6839      	ldr	r1, [r7, #0]
 8006b20:	4610      	mov	r0, r2
 8006b22:	4798      	blx	r3
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	da03      	bge.n	8006b32 <BSP_RANGING_SENSOR_ReadID+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006b2a:	f06f 0304 	mvn.w	r3, #4
 8006b2e:	60fb      	str	r3, [r7, #12]
 8006b30:	e001      	b.n	8006b36 <BSP_RANGING_SENSOR_ReadID+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8006b32:	2300      	movs	r3, #0
 8006b34:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006b36:	68fb      	ldr	r3, [r7, #12]
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3710      	adds	r7, #16
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	20001950 	.word	0x20001950
 8006b44:	20001944 	.word	0x20001944

08006b48 <BSP_RANGING_SENSOR_GetCapabilities>:
  * @param Instance    Ranging sensor instance.
  * @param pCapabilities    Pointer to the ranging sensor capabilities.
  * @retval BSP status
  */
int32_t BSP_RANGING_SENSOR_GetCapabilities(const uint32_t Instance, RANGING_SENSOR_Capabilities_t *pCapabilities)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2b02      	cmp	r3, #2
 8006b56:	d903      	bls.n	8006b60 <BSP_RANGING_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006b58:	f06f 0301 	mvn.w	r3, #1
 8006b5c:	60fb      	str	r3, [r7, #12]
 8006b5e:	e012      	b.n	8006b86 <BSP_RANGING_SENSOR_GetCapabilities+0x3e>
  }
  else if (VL53L5A1_RANGING_SENSOR_Drv->GetCapabilities(VL53L5A1_RANGING_SENSOR_CompObj[Instance], pCapabilities) < 0)
 8006b60:	4b0b      	ldr	r3, [pc, #44]	; (8006b90 <BSP_RANGING_SENSOR_GetCapabilities+0x48>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68db      	ldr	r3, [r3, #12]
 8006b66:	490b      	ldr	r1, [pc, #44]	; (8006b94 <BSP_RANGING_SENSOR_GetCapabilities+0x4c>)
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006b6e:	6839      	ldr	r1, [r7, #0]
 8006b70:	4610      	mov	r0, r2
 8006b72:	4798      	blx	r3
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	da03      	bge.n	8006b82 <BSP_RANGING_SENSOR_GetCapabilities+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006b7a:	f06f 0304 	mvn.w	r3, #4
 8006b7e:	60fb      	str	r3, [r7, #12]
 8006b80:	e001      	b.n	8006b86 <BSP_RANGING_SENSOR_GetCapabilities+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8006b82:	2300      	movs	r3, #0
 8006b84:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006b86:	68fb      	ldr	r3, [r7, #12]
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3710      	adds	r7, #16
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	20001950 	.word	0x20001950
 8006b94:	20001944 	.word	0x20001944

08006b98 <BSP_RANGING_SENSOR_ConfigProfile>:
  * @param Instance    Ranging sensor instance.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval BSP status
  */
int32_t BSP_RANGING_SENSOR_ConfigProfile(const uint32_t Instance, RANGING_SENSOR_ProfileConfig_t *pConfig)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d903      	bls.n	8006bb0 <BSP_RANGING_SENSOR_ConfigProfile+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006ba8:	f06f 0301 	mvn.w	r3, #1
 8006bac:	60fb      	str	r3, [r7, #12]
 8006bae:	e012      	b.n	8006bd6 <BSP_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else if (VL53L5A1_RANGING_SENSOR_Drv->ConfigProfile(VL53L5A1_RANGING_SENSOR_CompObj[Instance], pConfig) < 0)
 8006bb0:	4b0b      	ldr	r3, [pc, #44]	; (8006be0 <BSP_RANGING_SENSOR_ConfigProfile+0x48>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	490b      	ldr	r1, [pc, #44]	; (8006be4 <BSP_RANGING_SENSOR_ConfigProfile+0x4c>)
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006bbe:	6839      	ldr	r1, [r7, #0]
 8006bc0:	4610      	mov	r0, r2
 8006bc2:	4798      	blx	r3
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	da03      	bge.n	8006bd2 <BSP_RANGING_SENSOR_ConfigProfile+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006bca:	f06f 0304 	mvn.w	r3, #4
 8006bce:	60fb      	str	r3, [r7, #12]
 8006bd0:	e001      	b.n	8006bd6 <BSP_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3710      	adds	r7, #16
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	20001950 	.word	0x20001950
 8006be4:	20001944 	.word	0x20001944

08006be8 <BSP_RANGING_SENSOR_GetDistance>:
  * @param Instance    Ranging sensor instance.
  * @param pResult    Pointer to the result struct.
  * @retval BSP status
  */
int32_t BSP_RANGING_SENSOR_GetDistance(const uint32_t Instance, RANGING_SENSOR_Result_t *pResult)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2b02      	cmp	r3, #2
 8006bf6:	d903      	bls.n	8006c00 <BSP_RANGING_SENSOR_GetDistance+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006bf8:	f06f 0301 	mvn.w	r3, #1
 8006bfc:	60fb      	str	r3, [r7, #12]
 8006bfe:	e012      	b.n	8006c26 <BSP_RANGING_SENSOR_GetDistance+0x3e>
  }
  else if (VL53L5A1_RANGING_SENSOR_Drv->GetDistance(VL53L5A1_RANGING_SENSOR_CompObj[Instance], pResult) < 0)
 8006c00:	4b0b      	ldr	r3, [pc, #44]	; (8006c30 <BSP_RANGING_SENSOR_GetDistance+0x48>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	69db      	ldr	r3, [r3, #28]
 8006c06:	490b      	ldr	r1, [pc, #44]	; (8006c34 <BSP_RANGING_SENSOR_GetDistance+0x4c>)
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006c0e:	6839      	ldr	r1, [r7, #0]
 8006c10:	4610      	mov	r0, r2
 8006c12:	4798      	blx	r3
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	da03      	bge.n	8006c22 <BSP_RANGING_SENSOR_GetDistance+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006c1a:	f06f 0304 	mvn.w	r3, #4
 8006c1e:	60fb      	str	r3, [r7, #12]
 8006c20:	e001      	b.n	8006c26 <BSP_RANGING_SENSOR_GetDistance+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8006c22:	2300      	movs	r3, #0
 8006c24:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006c26:	68fb      	ldr	r3, [r7, #12]
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3710      	adds	r7, #16
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	20001950 	.word	0x20001950
 8006c34:	20001944 	.word	0x20001944

08006c38 <BSP_RANGING_SENSOR_Start>:
  * @param Instance    Ranging sensor instance.
  * @param Mode        The desired ranging mode
  * @retval BSP status
  */
int32_t BSP_RANGING_SENSOR_Start(uint32_t Instance, uint32_t Mode)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2b02      	cmp	r3, #2
 8006c46:	d903      	bls.n	8006c50 <BSP_RANGING_SENSOR_Start+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006c48:	f06f 0301 	mvn.w	r3, #1
 8006c4c:	60fb      	str	r3, [r7, #12]
 8006c4e:	e012      	b.n	8006c76 <BSP_RANGING_SENSOR_Start+0x3e>
  }
  else if (VL53L5A1_RANGING_SENSOR_Drv->Start(VL53L5A1_RANGING_SENSOR_CompObj[Instance], Mode) < 0)
 8006c50:	4b0b      	ldr	r3, [pc, #44]	; (8006c80 <BSP_RANGING_SENSOR_Start+0x48>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	6a1b      	ldr	r3, [r3, #32]
 8006c56:	490b      	ldr	r1, [pc, #44]	; (8006c84 <BSP_RANGING_SENSOR_Start+0x4c>)
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006c5e:	6839      	ldr	r1, [r7, #0]
 8006c60:	4610      	mov	r0, r2
 8006c62:	4798      	blx	r3
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	da03      	bge.n	8006c72 <BSP_RANGING_SENSOR_Start+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006c6a:	f06f 0304 	mvn.w	r3, #4
 8006c6e:	60fb      	str	r3, [r7, #12]
 8006c70:	e001      	b.n	8006c76 <BSP_RANGING_SENSOR_Start+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8006c72:	2300      	movs	r3, #0
 8006c74:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006c76:	68fb      	ldr	r3, [r7, #12]
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3710      	adds	r7, #16
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}
 8006c80:	20001950 	.word	0x20001950
 8006c84:	20001944 	.word	0x20001944

08006c88 <VL53L5CX_Probe>:
  * @brief Register Bus IOs if component ID is OK.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
static int32_t VL53L5CX_Probe(uint32_t Instance)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b08a      	sub	sp, #40	; 0x28
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  VL53L5CX_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L5CX_Object_t   VL53L5CXObj[RANGING_SENSOR_INSTANCES_NBR];

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L5CX_ADDRESS;
 8006c90:	2352      	movs	r3, #82	; 0x52
 8006c92:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C2_Init;
 8006c94:	4b34      	ldr	r3, [pc, #208]	; (8006d68 <VL53L5CX_Probe+0xe0>)
 8006c96:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C2_DeInit;
 8006c98:	4b34      	ldr	r3, [pc, #208]	; (8006d6c <VL53L5CX_Probe+0xe4>)
 8006c9a:	613b      	str	r3, [r7, #16]
  IOCtx.WriteReg    = BSP_I2C2_WriteReg16;
 8006c9c:	4b34      	ldr	r3, [pc, #208]	; (8006d70 <VL53L5CX_Probe+0xe8>)
 8006c9e:	61bb      	str	r3, [r7, #24]
  IOCtx.ReadReg     = BSP_I2C2_ReadReg16;
 8006ca0:	4b34      	ldr	r3, [pc, #208]	; (8006d74 <VL53L5CX_Probe+0xec>)
 8006ca2:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = BSP_GetTick;
 8006ca4:	4b34      	ldr	r3, [pc, #208]	; (8006d78 <VL53L5CX_Probe+0xf0>)
 8006ca6:	623b      	str	r3, [r7, #32]

  if (VL53L5CX_RegisterBusIO(&(VL53L5CXObj[Instance]), &IOCtx) != VL53L5CX_OK)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f640 1258 	movw	r2, #2392	; 0x958
 8006cae:	fb02 f303 	mul.w	r3, r2, r3
 8006cb2:	4a32      	ldr	r2, [pc, #200]	; (8006d7c <VL53L5CX_Probe+0xf4>)
 8006cb4:	4413      	add	r3, r2
 8006cb6:	f107 020c 	add.w	r2, r7, #12
 8006cba:	4611      	mov	r1, r2
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f007 fd27 	bl	800e710 <VL53L5CX_RegisterBusIO>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d003      	beq.n	8006cd0 <VL53L5CX_Probe+0x48>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006cc8:	f06f 0304 	mvn.w	r3, #4
 8006ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8006cce:	e045      	b.n	8006d5c <VL53L5CX_Probe+0xd4>
  }
  else
  {
    VL53L5A1_RANGING_SENSOR_Drv = (RANGING_SENSOR_Drv_t *) &VL53L5CX_RANGING_SENSOR_Driver;
 8006cd0:	4b2b      	ldr	r3, [pc, #172]	; (8006d80 <VL53L5CX_Probe+0xf8>)
 8006cd2:	4a2c      	ldr	r2, [pc, #176]	; (8006d84 <VL53L5CX_Probe+0xfc>)
 8006cd4:	601a      	str	r2, [r3, #0]
    VL53L5A1_RANGING_SENSOR_CompObj[Instance] = &(VL53L5CXObj[Instance]);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f640 1258 	movw	r2, #2392	; 0x958
 8006cdc:	fb02 f303 	mul.w	r3, r2, r3
 8006ce0:	4a26      	ldr	r2, [pc, #152]	; (8006d7c <VL53L5CX_Probe+0xf4>)
 8006ce2:	441a      	add	r2, r3
 8006ce4:	4928      	ldr	r1, [pc, #160]	; (8006d88 <VL53L5CX_Probe+0x100>)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    /* Check if the Component ID is correct, Initialize the sensor and Check the Sensor capabilities */
    if ((VL53L5CX_ReadID(&(VL53L5CXObj[Instance]), &id) != VL53L5CX_OK)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f640 1258 	movw	r2, #2392	; 0x958
 8006cf2:	fb02 f303 	mul.w	r3, r2, r3
 8006cf6:	4a21      	ldr	r2, [pc, #132]	; (8006d7c <VL53L5CX_Probe+0xf4>)
 8006cf8:	4413      	add	r3, r2
 8006cfa:	f107 0208 	add.w	r2, r7, #8
 8006cfe:	4611      	mov	r1, r2
 8006d00:	4618      	mov	r0, r3
 8006d02:	f007 fdb5 	bl	800e870 <VL53L5CX_ReadID>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d118      	bne.n	8006d3e <VL53L5CX_Probe+0xb6>
        || (VL53L5A1_RANGING_SENSOR_Drv->Init(VL53L5A1_RANGING_SENSOR_CompObj[Instance]) != VL53L5CX_OK)
 8006d0c:	4b1c      	ldr	r3, [pc, #112]	; (8006d80 <VL53L5CX_Probe+0xf8>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	491d      	ldr	r1, [pc, #116]	; (8006d88 <VL53L5CX_Probe+0x100>)
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006d1a:	4610      	mov	r0, r2
 8006d1c:	4798      	blx	r3
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d10c      	bne.n	8006d3e <VL53L5CX_Probe+0xb6>
        || (VL53L5A1_RANGING_SENSOR_Drv->GetCapabilities(VL53L5A1_RANGING_SENSOR_CompObj[Instance],
 8006d24:	4b16      	ldr	r3, [pc, #88]	; (8006d80 <VL53L5CX_Probe+0xf8>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	4917      	ldr	r1, [pc, #92]	; (8006d88 <VL53L5CX_Probe+0x100>)
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006d32:	4916      	ldr	r1, [pc, #88]	; (8006d8c <VL53L5CX_Probe+0x104>)
 8006d34:	4610      	mov	r0, r2
 8006d36:	4798      	blx	r3
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d003      	beq.n	8006d46 <VL53L5CX_Probe+0xbe>
                                                         &VL53L5A1_RANGING_SENSOR_Cap) != VL53L5CX_OK))
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006d3e:	f06f 0304 	mvn.w	r3, #4
 8006d42:	627b      	str	r3, [r7, #36]	; 0x24
 8006d44:	e00a      	b.n	8006d5c <VL53L5CX_Probe+0xd4>
    }
    else if (id != VL53L5CX_ID)
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	f24f 0202 	movw	r2, #61442	; 0xf002
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d003      	beq.n	8006d58 <VL53L5CX_Probe+0xd0>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006d50:	f06f 0306 	mvn.w	r3, #6
 8006d54:	627b      	str	r3, [r7, #36]	; 0x24
 8006d56:	e001      	b.n	8006d5c <VL53L5CX_Probe+0xd4>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret;
 8006d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3728      	adds	r7, #40	; 0x28
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	08002139 	.word	0x08002139
 8006d6c:	080021ad 	.word	0x080021ad
 8006d70:	08002331 	.word	0x08002331
 8006d74:	0800238d 	.word	0x0800238d
 8006d78:	08002421 	.word	0x08002421
 8006d7c:	20001964 	.word	0x20001964
 8006d80:	20001950 	.word	0x20001950
 8006d84:	200001c8 	.word	0x200001c8
 8006d88:	20001944 	.word	0x20001944
 8006d8c:	20001954 	.word	0x20001954

08006d90 <vl53l5cx_i2c_recover>:

/**
  * @brief This functions permits to avoid HW reset due to an I2C bug on the device.
  */
static int32_t vl53l5cx_i2c_recover(void)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b088      	sub	sp, #32
 8006d94:	af00      	add	r7, sp, #0
  /* We can't assume bus state based on SDA and SCL state (we may be in a data or NAK bit so SCL=SDA=1)
  * by setting SDA high and toggling SCL at least 10 time we ensure whatever agent and state
  * all agent should end up seeing a "stop" and bus get back to an known idle i2c  bus state */

  uint8_t i;
  uint8_t retry_cnt = 0;
 8006d96:	2300      	movs	r3, #0
 8006d98:	77bb      	strb	r3, [r7, #30]
  static uint8_t is_already_init = 0U;
  GPIO_InitTypeDef GPIO_InitStruct;

  if (is_already_init == 1U)
 8006d9a:	4b40      	ldr	r3, [pc, #256]	; (8006e9c <vl53l5cx_i2c_recover+0x10c>)
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d101      	bne.n	8006da6 <vl53l5cx_i2c_recover+0x16>
  {
    return BSP_ERROR_NONE;
 8006da2:	2300      	movs	r3, #0
 8006da4:	e075      	b.n	8006e92 <vl53l5cx_i2c_recover+0x102>
  }

  /* Enable I/O */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006da6:	4b3e      	ldr	r3, [pc, #248]	; (8006ea0 <vl53l5cx_i2c_recover+0x110>)
 8006da8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dac:	4a3c      	ldr	r2, [pc, #240]	; (8006ea0 <vl53l5cx_i2c_recover+0x110>)
 8006dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006db2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006db6:	4b3a      	ldr	r3, [pc, #232]	; (8006ea0 <vl53l5cx_i2c_recover+0x110>)
 8006db8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dc0:	607b      	str	r3, [r7, #4]
 8006dc2:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Pin = VL53L5A1_LP_PIN;
 8006dc4:	2302      	movs	r3, #2
 8006dc6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(VL53L5A1_LP_PORT, &GPIO_InitStruct);
 8006dd0:	f107 0308 	add.w	r3, r7, #8
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	4833      	ldr	r0, [pc, #204]	; (8006ea4 <vl53l5cx_i2c_recover+0x114>)
 8006dd8:	f00c fe70 	bl	8013abc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(VL53L5A1_LP_PORT, VL53L5A1_LP_PIN, GPIO_PIN_SET);
 8006ddc:	2201      	movs	r2, #1
 8006dde:	2102      	movs	r1, #2
 8006de0:	4830      	ldr	r0, [pc, #192]	; (8006ea4 <vl53l5cx_i2c_recover+0x114>)
 8006de2:	f00d f939 	bl	8014058 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = BUS_I2C2_SCL_PIN;
 8006de6:	2310      	movs	r3, #16
 8006de8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8006dea:	2311      	movs	r3, #17
 8006dec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006dee:	2301      	movs	r3, #1
 8006df0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 8006df2:	f107 0308 	add.w	r3, r7, #8
 8006df6:	4619      	mov	r1, r3
 8006df8:	482a      	ldr	r0, [pc, #168]	; (8006ea4 <vl53l5cx_i2c_recover+0x114>)
 8006dfa:	f00c fe5f 	bl	8013abc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = BUS_I2C2_SDA_PIN;
 8006dfe:	2320      	movs	r3, #32
 8006e00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8006e02:	2311      	movs	r3, #17
 8006e04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e06:	2301      	movs	r3, #1
 8006e08:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 8006e0a:	f107 0308 	add.w	r3, r7, #8
 8006e0e:	4619      	mov	r1, r3
 8006e10:	4824      	ldr	r0, [pc, #144]	; (8006ea4 <vl53l5cx_i2c_recover+0x114>)
 8006e12:	f00c fe53 	bl	8013abc <HAL_GPIO_Init>

  HAL_GPIO_WritePin(BUS_I2C2_SCL_GPIO_PORT, BUS_I2C2_SCL_PIN, GPIO_PIN_SET);
 8006e16:	2201      	movs	r2, #1
 8006e18:	2110      	movs	r1, #16
 8006e1a:	4822      	ldr	r0, [pc, #136]	; (8006ea4 <vl53l5cx_i2c_recover+0x114>)
 8006e1c:	f00d f91c 	bl	8014058 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BUS_I2C2_SDA_GPIO_PORT, BUS_I2C2_SDA_PIN, GPIO_PIN_SET);
 8006e20:	2201      	movs	r2, #1
 8006e22:	2120      	movs	r1, #32
 8006e24:	481f      	ldr	r0, [pc, #124]	; (8006ea4 <vl53l5cx_i2c_recover+0x114>)
 8006e26:	f00d f917 	bl	8014058 <HAL_GPIO_WritePin>

  do
  {
    for (i = 0; i < 10U; i++)
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	77fb      	strb	r3, [r7, #31]
 8006e2e:	e012      	b.n	8006e56 <vl53l5cx_i2c_recover+0xc6>
    {
      HAL_GPIO_WritePin(BUS_I2C2_SCL_GPIO_PORT, BUS_I2C2_SCL_PIN, GPIO_PIN_RESET);
 8006e30:	2200      	movs	r2, #0
 8006e32:	2110      	movs	r1, #16
 8006e34:	481b      	ldr	r0, [pc, #108]	; (8006ea4 <vl53l5cx_i2c_recover+0x114>)
 8006e36:	f00d f90f 	bl	8014058 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8006e3a:	2001      	movs	r0, #1
 8006e3c:	f00a fc5e 	bl	80116fc <HAL_Delay>
      HAL_GPIO_WritePin(BUS_I2C2_SCL_GPIO_PORT, BUS_I2C2_SCL_PIN, GPIO_PIN_SET);
 8006e40:	2201      	movs	r2, #1
 8006e42:	2110      	movs	r1, #16
 8006e44:	4817      	ldr	r0, [pc, #92]	; (8006ea4 <vl53l5cx_i2c_recover+0x114>)
 8006e46:	f00d f907 	bl	8014058 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8006e4a:	2001      	movs	r0, #1
 8006e4c:	f00a fc56 	bl	80116fc <HAL_Delay>
    for (i = 0; i < 10U; i++)
 8006e50:	7ffb      	ldrb	r3, [r7, #31]
 8006e52:	3301      	adds	r3, #1
 8006e54:	77fb      	strb	r3, [r7, #31]
 8006e56:	7ffb      	ldrb	r3, [r7, #31]
 8006e58:	2b09      	cmp	r3, #9
 8006e5a:	d9e9      	bls.n	8006e30 <vl53l5cx_i2c_recover+0xa0>
    }
    retry_cnt++;
 8006e5c:	7fbb      	ldrb	r3, [r7, #30]
 8006e5e:	3301      	adds	r3, #1
 8006e60:	77bb      	strb	r3, [r7, #30]
  } while ((HAL_GPIO_ReadPin(BUS_I2C2_SDA_GPIO_PORT, BUS_I2C2_SDA_PIN) == GPIO_PIN_RESET) && (retry_cnt < 7U));
 8006e62:	2120      	movs	r1, #32
 8006e64:	480f      	ldr	r0, [pc, #60]	; (8006ea4 <vl53l5cx_i2c_recover+0x114>)
 8006e66:	f00d f8df 	bl	8014028 <HAL_GPIO_ReadPin>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d102      	bne.n	8006e76 <vl53l5cx_i2c_recover+0xe6>
 8006e70:	7fbb      	ldrb	r3, [r7, #30]
 8006e72:	2b06      	cmp	r3, #6
 8006e74:	d9d9      	bls.n	8006e2a <vl53l5cx_i2c_recover+0x9a>

  if (HAL_GPIO_ReadPin(BUS_I2C2_SCL_GPIO_PORT, BUS_I2C2_SDA_PIN) == GPIO_PIN_RESET)
 8006e76:	2120      	movs	r1, #32
 8006e78:	480a      	ldr	r0, [pc, #40]	; (8006ea4 <vl53l5cx_i2c_recover+0x114>)
 8006e7a:	f00d f8d5 	bl	8014028 <HAL_GPIO_ReadPin>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d102      	bne.n	8006e8a <vl53l5cx_i2c_recover+0xfa>
  {
    /* We are still in a bad i2c state, return error */
    return BSP_ERROR_COMPONENT_FAILURE;
 8006e84:	f06f 0304 	mvn.w	r3, #4
 8006e88:	e003      	b.n	8006e92 <vl53l5cx_i2c_recover+0x102>
  }

  is_already_init = 1U;
 8006e8a:	4b04      	ldr	r3, [pc, #16]	; (8006e9c <vl53l5cx_i2c_recover+0x10c>)
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	701a      	strb	r2, [r3, #0]

  return BSP_ERROR_NONE;
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3720      	adds	r7, #32
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	2000356c 	.word	0x2000356c
 8006ea0:	46020c00 	.word	0x46020c00
 8006ea4:	42021c00 	.word	0x42021c00

08006ea8 <APS6408_Read>:
  * @param  BurstType Type of burst used for the access
  * @retval OSPI memory status
  */
int32_t APS6408_Read(OSPI_HandleTypeDef *Ctx, uint8_t *pData, uint32_t ReadAddr, uint32_t Size, uint32_t LatencyCode,
                     uint32_t BurstType)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b098      	sub	sp, #96	; 0x60
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	607a      	str	r2, [r7, #4]
 8006eb4:	603b      	str	r3, [r7, #0]
  OSPI_RegularCmdTypeDef sCommand = {0};
 8006eb6:	f107 0310 	add.w	r3, r7, #16
 8006eba:	2250      	movs	r2, #80	; 0x50
 8006ebc:	2100      	movs	r1, #0
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f016 fcfe 	bl	801d8c0 <memset>

  /* Initialize the read command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	617b      	str	r3, [r7, #20]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 8006ecc:	2304      	movs	r3, #4
 8006ece:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = (BurstType == 0U) ? APS6408_READ_LINEAR_BURST_CMD : APS6408_READ_CMD;
 8006ed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d101      	bne.n	8006ee2 <APS6408_Read+0x3a>
 8006ede:	2320      	movs	r3, #32
 8006ee0:	e000      	b.n	8006ee4 <APS6408_Read+0x3c>
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	61bb      	str	r3, [r7, #24]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 8006ee6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006eea:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8006eec:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006ef0:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 8006ef2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006ef6:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.Address            = ReadAddr;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8006efc:	2300      	movs	r3, #0
 8006efe:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_8_LINES;
 8006f00:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006f04:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 8006f06:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006f0a:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.NbData             = Size;
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DummyCycles        = LatencyCode;
 8006f10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f12:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DQSMode            = HAL_OSPI_DQS_ENABLE;
 8006f14:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8006f18:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Configure the command */
  if (HAL_OSPI_Command(Ctx, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006f1e:	f107 0310 	add.w	r3, r7, #16
 8006f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f26:	4619      	mov	r1, r3
 8006f28:	68f8      	ldr	r0, [r7, #12]
 8006f2a:	f00f f804 	bl	8015f36 <HAL_OSPI_Command>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d002      	beq.n	8006f3a <APS6408_Read+0x92>
  {
    return APS6408_ERROR;
 8006f34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f38:	e00c      	b.n	8006f54 <APS6408_Read+0xac>
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(Ctx, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f3e:	68b9      	ldr	r1, [r7, #8]
 8006f40:	68f8      	ldr	r0, [r7, #12]
 8006f42:	f00f f8f8 	bl	8016136 <HAL_OSPI_Receive>
 8006f46:	4603      	mov	r3, r0
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d002      	beq.n	8006f52 <APS6408_Read+0xaa>
  {
    return APS6408_ERROR;
 8006f4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f50:	e000      	b.n	8006f54 <APS6408_Read+0xac>
  }

  return APS6408_OK;
 8006f52:	2300      	movs	r3, #0
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3760      	adds	r7, #96	; 0x60
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <APS6408_Write>:
  * @param  BurstType Type of burst used for the access
  * @retval OSPI memory status
  */
int32_t APS6408_Write(OSPI_HandleTypeDef *Ctx, uint8_t *pData, uint32_t WriteAddr, uint32_t Size, uint32_t LatencyCode,
                      uint32_t BurstType)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b098      	sub	sp, #96	; 0x60
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	607a      	str	r2, [r7, #4]
 8006f68:	603b      	str	r3, [r7, #0]
  OSPI_RegularCmdTypeDef sCommand = {0};
 8006f6a:	f107 0310 	add.w	r3, r7, #16
 8006f6e:	2250      	movs	r2, #80	; 0x50
 8006f70:	2100      	movs	r1, #0
 8006f72:	4618      	mov	r0, r3
 8006f74:	f016 fca4 	bl	801d8c0 <memset>

  /* Initialize the write command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = (BurstType == 0U) ? APS6408_WRITE_LINEAR_BURST_CMD : APS6408_WRITE_CMD;
 8006f80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d101      	bne.n	8006f8a <APS6408_Write+0x2e>
 8006f86:	23a0      	movs	r3, #160	; 0xa0
 8006f88:	e000      	b.n	8006f8c <APS6408_Write+0x30>
 8006f8a:	2380      	movs	r3, #128	; 0x80
 8006f8c:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 8006f8e:	2304      	movs	r3, #4
 8006f90:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8006f92:	2300      	movs	r3, #0
 8006f94:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8006f96:	2300      	movs	r3, #0
 8006f98:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Address            = WriteAddr;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 8006f9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8006fa4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006fa8:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 8006faa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006fae:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_8_LINES;
 8006fb4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006fb8:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.NbData             = Size;
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 8006fbe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006fc2:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = LatencyCode;
 8006fc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006fc6:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DQSMode            = HAL_OSPI_DQS_ENABLE;
 8006fc8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8006fcc:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Configure the command */
  if (HAL_OSPI_Command(Ctx, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006fd2:	f107 0310 	add.w	r3, r7, #16
 8006fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fda:	4619      	mov	r1, r3
 8006fdc:	68f8      	ldr	r0, [r7, #12]
 8006fde:	f00e ffaa 	bl	8015f36 <HAL_OSPI_Command>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d002      	beq.n	8006fee <APS6408_Write+0x92>
  {
    return APS6408_ERROR;
 8006fe8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006fec:	e00c      	b.n	8007008 <APS6408_Write+0xac>
  }

  /* Transmission of the data */
  if (HAL_OSPI_Transmit(Ctx, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ff2:	68b9      	ldr	r1, [r7, #8]
 8006ff4:	68f8      	ldr	r0, [r7, #12]
 8006ff6:	f00f f82b 	bl	8016050 <HAL_OSPI_Transmit>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d002      	beq.n	8007006 <APS6408_Write+0xaa>
  {
    return APS6408_ERROR;
 8007000:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007004:	e000      	b.n	8007008 <APS6408_Write+0xac>
  }

  return APS6408_OK;
 8007006:	2300      	movs	r3, #0
}
 8007008:	4618      	mov	r0, r3
 800700a:	3760      	adds	r7, #96	; 0x60
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <APS6408_EnableMemoryMappedMode>:
  * @param  Ctx Component object pointer
  * @retval OSPI memory status
  */
int32_t APS6408_EnableMemoryMappedMode(OSPI_HandleTypeDef *Ctx, uint32_t ReadLatencyCode, uint32_t WriteLatencyCode,
                                       uint32_t BurstType)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b09a      	sub	sp, #104	; 0x68
 8007014:	af00      	add	r7, sp, #0
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	60b9      	str	r1, [r7, #8]
 800701a:	607a      	str	r2, [r7, #4]
 800701c:	603b      	str	r3, [r7, #0]
  OSPI_RegularCmdTypeDef   sCommand;
  OSPI_MemoryMappedTypeDef sMemMappedCfg;

  /* Initialize the write command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 800701e:	2302      	movs	r3, #2
 8007020:	61bb      	str	r3, [r7, #24]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8007022:	2300      	movs	r3, #0
 8007024:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 8007026:	2304      	movs	r3, #4
 8007028:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800702a:	2300      	movs	r3, #0
 800702c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800702e:	2300      	movs	r3, #0
 8007030:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.Instruction        = (BurstType == 0U) ? APS6408_WRITE_LINEAR_BURST_CMD : APS6408_WRITE_CMD;
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d101      	bne.n	800703c <APS6408_EnableMemoryMappedMode+0x2c>
 8007038:	23a0      	movs	r3, #160	; 0xa0
 800703a:	e000      	b.n	800703e <APS6408_EnableMemoryMappedMode+0x2e>
 800703c:	2380      	movs	r3, #128	; 0x80
 800703e:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 8007040:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007044:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8007046:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800704a:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 800704c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007050:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8007052:	2300      	movs	r3, #0
 8007054:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DataMode           = HAL_OSPI_DATA_8_LINES;
 8007056:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800705a:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 800705c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007060:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DummyCycles        = WriteLatencyCode;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DQSMode            = HAL_OSPI_DQS_ENABLE;
 8007066:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800706a:	663b      	str	r3, [r7, #96]	; 0x60
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800706c:	2300      	movs	r3, #0
 800706e:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_OSPI_Command(Ctx, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007070:	f107 0318 	add.w	r3, r7, #24
 8007074:	f241 3288 	movw	r2, #5000	; 0x1388
 8007078:	4619      	mov	r1, r3
 800707a:	68f8      	ldr	r0, [r7, #12]
 800707c:	f00e ff5b 	bl	8015f36 <HAL_OSPI_Command>
 8007080:	4603      	mov	r3, r0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d002      	beq.n	800708c <APS6408_EnableMemoryMappedMode+0x7c>
  {
    return APS6408_ERROR;
 8007086:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800708a:	e024      	b.n	80070d6 <APS6408_EnableMemoryMappedMode+0xc6>
  }

  /* Initialize the read command */
  sCommand.OperationType = HAL_OSPI_OPTYPE_READ_CFG;
 800708c:	2301      	movs	r3, #1
 800708e:	61bb      	str	r3, [r7, #24]
  sCommand.Instruction   = APS6408_READ_CMD;
 8007090:	2300      	movs	r3, #0
 8007092:	623b      	str	r3, [r7, #32]
  sCommand.DummyCycles   = ReadLatencyCode;
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(Ctx, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007098:	f107 0318 	add.w	r3, r7, #24
 800709c:	f241 3288 	movw	r2, #5000	; 0x1388
 80070a0:	4619      	mov	r1, r3
 80070a2:	68f8      	ldr	r0, [r7, #12]
 80070a4:	f00e ff47 	bl	8015f36 <HAL_OSPI_Command>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d002      	beq.n	80070b4 <APS6408_EnableMemoryMappedMode+0xa4>
  {
    return APS6408_ERROR;
 80070ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070b2:	e010      	b.n	80070d6 <APS6408_EnableMemoryMappedMode+0xc6>
  }

  /* OctoSPI activation of memory-mapped mode */
  sMemMappedCfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_ENABLE;
 80070b4:	2308      	movs	r3, #8
 80070b6:	613b      	str	r3, [r7, #16]
  sMemMappedCfg.TimeOutPeriod     = 0x34U;
 80070b8:	2334      	movs	r3, #52	; 0x34
 80070ba:	617b      	str	r3, [r7, #20]

  if (HAL_OSPI_MemoryMapped(Ctx, &sMemMappedCfg) != HAL_OK)
 80070bc:	f107 0310 	add.w	r3, r7, #16
 80070c0:	4619      	mov	r1, r3
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	f00f f961 	bl	801638a <HAL_OSPI_MemoryMapped>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d002      	beq.n	80070d4 <APS6408_EnableMemoryMappedMode+0xc4>
  {
    return APS6408_ERROR;
 80070ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070d2:	e000      	b.n	80070d6 <APS6408_EnableMemoryMappedMode+0xc6>
  }

  return APS6408_OK;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3768      	adds	r7, #104	; 0x68
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}

080070de <APS6408_ReadReg>:
  * @param  Value Register value pointer
  * @param  LatencyCode Latency used for the access
  * @retval error status
  */
int32_t APS6408_ReadReg(OSPI_HandleTypeDef *Ctx, uint32_t Address, uint8_t *Value, uint32_t LatencyCode)
{
 80070de:	b580      	push	{r7, lr}
 80070e0:	b098      	sub	sp, #96	; 0x60
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	60f8      	str	r0, [r7, #12]
 80070e6:	60b9      	str	r1, [r7, #8]
 80070e8:	607a      	str	r2, [r7, #4]
 80070ea:	603b      	str	r3, [r7, #0]
  OSPI_RegularCmdTypeDef sCommand = {0};
 80070ec:	f107 0310 	add.w	r3, r7, #16
 80070f0:	2250      	movs	r2, #80	; 0x50
 80070f2:	2100      	movs	r1, #0
 80070f4:	4618      	mov	r0, r3
 80070f6:	f016 fbe3 	bl	801d8c0 <memset>

  /* Initialize the read register command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80070fa:	2300      	movs	r3, #0
 80070fc:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 80070fe:	2304      	movs	r3, #4
 8007100:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8007102:	2300      	movs	r3, #0
 8007104:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8007106:	2300      	movs	r3, #0
 8007108:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = APS6408_READ_REG_CMD;
 800710a:	2340      	movs	r3, #64	; 0x40
 800710c:	61bb      	str	r3, [r7, #24]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 800710e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007112:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8007114:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8007118:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 800711a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800711e:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.Address            = Address;
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8007124:	2300      	movs	r3, #0
 8007126:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_8_LINES;
 8007128:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800712c:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 800712e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007132:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.NbData             = 2;
 8007134:	2302      	movs	r3, #2
 8007136:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DummyCycles        = LatencyCode;
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DQSMode            = HAL_OSPI_DQS_ENABLE;
 800713c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8007140:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8007142:	2300      	movs	r3, #0
 8007144:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Configure the command */
  if (HAL_OSPI_Command(Ctx, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007146:	f107 0310 	add.w	r3, r7, #16
 800714a:	f241 3288 	movw	r2, #5000	; 0x1388
 800714e:	4619      	mov	r1, r3
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	f00e fef0 	bl	8015f36 <HAL_OSPI_Command>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d002      	beq.n	8007162 <APS6408_ReadReg+0x84>
  {
    return APS6408_ERROR;
 800715c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007160:	e00c      	b.n	800717c <APS6408_ReadReg+0x9e>
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(Ctx, (uint8_t *)Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007162:	f241 3288 	movw	r2, #5000	; 0x1388
 8007166:	6879      	ldr	r1, [r7, #4]
 8007168:	68f8      	ldr	r0, [r7, #12]
 800716a:	f00e ffe4 	bl	8016136 <HAL_OSPI_Receive>
 800716e:	4603      	mov	r3, r0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d002      	beq.n	800717a <APS6408_ReadReg+0x9c>
  {
    return APS6408_ERROR;
 8007174:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007178:	e000      	b.n	800717c <APS6408_ReadReg+0x9e>
  }

  return APS6408_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	3760      	adds	r7, #96	; 0x60
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <APS6408_WriteReg>:
  * @param  Address Register address
  * @param  Value Value to write to register
  * @retval error status
  */
int32_t APS6408_WriteReg(OSPI_HandleTypeDef *Ctx, uint32_t Address, uint8_t Value)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b098      	sub	sp, #96	; 0x60
 8007188:	af00      	add	r7, sp, #0
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	4613      	mov	r3, r2
 8007190:	71fb      	strb	r3, [r7, #7]
  OSPI_RegularCmdTypeDef sCommand = {0};
 8007192:	f107 0310 	add.w	r3, r7, #16
 8007196:	2250      	movs	r2, #80	; 0x50
 8007198:	2100      	movs	r1, #0
 800719a:	4618      	mov	r0, r3
 800719c:	f016 fb90 	bl	801d8c0 <memset>

  /* Initialize the write register command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80071a0:	2300      	movs	r3, #0
 80071a2:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 80071a4:	2304      	movs	r3, #4
 80071a6:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80071a8:	2300      	movs	r3, #0
 80071aa:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80071ac:	2300      	movs	r3, #0
 80071ae:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = APS6408_WRITE_REG_CMD;
 80071b0:	23c0      	movs	r3, #192	; 0xc0
 80071b2:	61bb      	str	r3, [r7, #24]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 80071b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80071ba:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80071be:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 80071c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80071c4:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.Address            = Address;
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80071ca:	2300      	movs	r3, #0
 80071cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_8_LINES;
 80071ce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80071d2:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 80071d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80071d8:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.NbData             = 2;
 80071da:	2302      	movs	r3, #2
 80071dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DummyCycles        = 0;
 80071de:	2300      	movs	r3, #0
 80071e0:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80071e2:	2300      	movs	r3, #0
 80071e4:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80071e6:	2300      	movs	r3, #0
 80071e8:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Configure the command */
  if (HAL_OSPI_Command(Ctx, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80071ea:	f107 0310 	add.w	r3, r7, #16
 80071ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80071f2:	4619      	mov	r1, r3
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	f00e fe9e 	bl	8015f36 <HAL_OSPI_Command>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d002      	beq.n	8007206 <APS6408_WriteReg+0x82>
  {
    return APS6408_ERROR;
 8007200:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007204:	e00d      	b.n	8007222 <APS6408_WriteReg+0x9e>
  }

  /* Transmission of the data */
  if (HAL_OSPI_Transmit(Ctx, (uint8_t *)(&Value), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007206:	1dfb      	adds	r3, r7, #7
 8007208:	f241 3288 	movw	r2, #5000	; 0x1388
 800720c:	4619      	mov	r1, r3
 800720e:	68f8      	ldr	r0, [r7, #12]
 8007210:	f00e ff1e 	bl	8016050 <HAL_OSPI_Transmit>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d002      	beq.n	8007220 <APS6408_WriteReg+0x9c>
  {
    return APS6408_ERROR;
 800721a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800721e:	e000      	b.n	8007222 <APS6408_WriteReg+0x9e>
  }

  return APS6408_OK;
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	3760      	adds	r7, #96	; 0x60
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}

0800722a <APS6408_ReadID>:
  * @param  ID IDs pointer (2 * 8-bits value)
  * @param  LatencyCode Latency used for the access
  * @retval error status
  */
int32_t APS6408_ReadID(OSPI_HandleTypeDef *Ctx, uint8_t *ID, uint32_t LatencyCode)
{
 800722a:	b580      	push	{r7, lr}
 800722c:	b084      	sub	sp, #16
 800722e:	af00      	add	r7, sp, #0
 8007230:	60f8      	str	r0, [r7, #12]
 8007232:	60b9      	str	r1, [r7, #8]
 8007234:	607a      	str	r2, [r7, #4]
  /* Read the Mode Register 1 and 2 */
  if (APS6408_ReadReg(Ctx, APS6408_MR1_ADDRESS, ID, LatencyCode) != APS6408_OK)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	68ba      	ldr	r2, [r7, #8]
 800723a:	2101      	movs	r1, #1
 800723c:	68f8      	ldr	r0, [r7, #12]
 800723e:	f7ff ff4e 	bl	80070de <APS6408_ReadReg>
 8007242:	4603      	mov	r3, r0
 8007244:	2b00      	cmp	r3, #0
 8007246:	d002      	beq.n	800724e <APS6408_ReadID+0x24>
  {
    return APS6408_ERROR;
 8007248:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800724c:	e010      	b.n	8007270 <APS6408_ReadID+0x46>
  }

  /* Keep only Vendor ID from Mode Register 1 */
  *ID &= (APS6408_MR1_VENDOR_ID);
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	f003 031f 	and.w	r3, r3, #31
 8007256:	b2da      	uxtb	r2, r3
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	701a      	strb	r2, [r3, #0]

  /* Keep only Device ID and Device Density from Mode Register 2 */
  *(ID + 1) &= (APS6408_MR2_DEVICE_ID | APS6408_MR2_DENSITY);
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	3301      	adds	r3, #1
 8007260:	781a      	ldrb	r2, [r3, #0]
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	3301      	adds	r3, #1
 8007266:	f002 021f 	and.w	r2, r2, #31
 800726a:	b2d2      	uxtb	r2, r2
 800726c:	701a      	strb	r2, [r3, #0]

  return APS6408_OK;
 800726e:	2300      	movs	r3, #0
}
 8007270:	4618      	mov	r0, r3
 8007272:	3710      	adds	r7, #16
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <HTS221_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d103      	bne.n	8007290 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8007288:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800728c:	60fb      	str	r3, [r7, #12]
 800728e:	e034      	b.n	80072fa <HTS221_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	685a      	ldr	r2, [r3, #4]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	689a      	ldr	r2, [r3, #8]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	7b1a      	ldrb	r2, [r3, #12]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	691a      	ldr	r2, [r3, #16]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	695a      	ldr	r2, [r3, #20]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	699a      	ldr	r2, [r3, #24]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4a0e      	ldr	r2, [pc, #56]	; (8007304 <HTS221_RegisterBusIO+0x8c>)
 80072cc:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4a0d      	ldr	r2, [pc, #52]	; (8007308 <HTS221_RegisterBusIO+0x90>)
 80072d2:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	69da      	ldr	r2, [r3, #28]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init != NULL)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d004      	beq.n	80072f4 <HTS221_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4798      	blx	r3
 80072f0:	60f8      	str	r0, [r7, #12]
 80072f2:	e002      	b.n	80072fa <HTS221_RegisterBusIO+0x82>
    }
    else
    {
      ret = HTS221_ERROR;
 80072f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072f8:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80072fa:	68fb      	ldr	r3, [r7, #12]
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3710      	adds	r7, #16
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}
 8007304:	08007937 	.word	0x08007937
 8007308:	08007999 	.word	0x08007999

0800730c <HTS221_Init>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800731a:	2b00      	cmp	r3, #0
 800731c:	d108      	bne.n	8007330 <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 faa4 	bl	800786c <HTS221_Initialize>
 8007324:	4603      	mov	r3, r0
 8007326:	2b00      	cmp	r3, #0
 8007328:	d002      	beq.n	8007330 <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 800732a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800732e:	e004      	b.n	800733a <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HTS221_OK;
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	3708      	adds	r7, #8
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}

08007342 <HTS221_DeInit>:
  * @brief  Deinitialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 8007342:	b580      	push	{r7, lr}
 8007344:	b082      	sub	sp, #8
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007350:	2b01      	cmp	r3, #1
 8007352:	d111      	bne.n	8007378 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 f878 	bl	800744a <HTS221_HUM_Disable>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d002      	beq.n	8007366 <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 8007360:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007364:	e00d      	b.n	8007382 <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f95f 	bl	800762a <HTS221_TEMP_Disable>
 800736c:	4603      	mov	r3, r0
 800736e:	2b00      	cmp	r3, #0
 8007370:	d002      	beq.n	8007378 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 8007372:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007376:	e004      	b.n	8007382 <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HTS221_OK;
 8007380:	2300      	movs	r3, #0
}
 8007382:	4618      	mov	r0, r3
 8007384:	3708      	adds	r7, #8
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <HTS221_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 800738a:	b580      	push	{r7, lr}
 800738c:	b082      	sub	sp, #8
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
 8007392:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	3320      	adds	r3, #32
 8007398:	6839      	ldr	r1, [r7, #0]
 800739a:	4618      	mov	r0, r3
 800739c:	f000 fc28 	bl	8007bf0 <hts221_device_id_get>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d002      	beq.n	80073ac <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 80073a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073aa:	e000      	b.n	80073ae <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3708      	adds	r7, #8
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
	...

080073b8 <HTS221_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to HTS221 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	2201      	movs	r2, #1
 80073c6:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	2200      	movs	r2, #0
 80073cc:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	2201      	movs	r2, #1
 80073d2:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	2200      	movs	r2, #0
 80073d8:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	4a07      	ldr	r2, [pc, #28]	; (80073fc <HTS221_GetCapabilities+0x44>)
 80073de:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	4a06      	ldr	r2, [pc, #24]	; (80073fc <HTS221_GetCapabilities+0x44>)
 80073e4:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	f04f 0200 	mov.w	r2, #0
 80073ec:	60da      	str	r2, [r3, #12]
  return HTS221_OK;
 80073ee:	2300      	movs	r3, #0
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr
 80073fc:	41480000 	.word	0x41480000

08007400 <HTS221_HUM_Enable>:
  * @brief  Enable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800740e:	2b01      	cmp	r3, #1
 8007410:	d101      	bne.n	8007416 <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 8007412:	2300      	movs	r3, #0
 8007414:	e015      	b.n	8007442 <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800741c:	2b00      	cmp	r3, #0
 800741e:	d10b      	bne.n	8007438 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	3320      	adds	r3, #32
 8007424:	2101      	movs	r1, #1
 8007426:	4618      	mov	r0, r3
 8007428:	f000 fbf3 	bl	8007c12 <hts221_power_on_set>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d002      	beq.n	8007438 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 8007432:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007436:	e004      	b.n	8007442 <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return HTS221_OK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	3708      	adds	r7, #8
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}

0800744a <HTS221_HUM_Disable>:
  * @brief  Disable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 800744a:	b580      	push	{r7, lr}
 800744c:	b082      	sub	sp, #8
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007458:	2b00      	cmp	r3, #0
 800745a:	d101      	bne.n	8007460 <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 800745c:	2300      	movs	r3, #0
 800745e:	e015      	b.n	800748c <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007466:	2b00      	cmp	r3, #0
 8007468:	d10b      	bne.n	8007482 <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	3320      	adds	r3, #32
 800746e:	2100      	movs	r1, #0
 8007470:	4618      	mov	r0, r3
 8007472:	f000 fbce 	bl	8007c12 <hts221_power_on_set>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d002      	beq.n	8007482 <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 800747c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007480:	e004      	b.n	800748c <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return HTS221_OK;
 800748a:	2300      	movs	r3, #0
}
 800748c:	4618      	mov	r0, r3
 800748e:	3708      	adds	r7, #8
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <HTS221_HUM_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 800749e:	6839      	ldr	r1, [r7, #0]
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 f96f 	bl	8007784 <HTS221_GetOutputDataRate>
 80074a6:	4603      	mov	r3, r0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3708      	adds	r7, #8
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <HTS221_HUM_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 80074bc:	ed97 0a00 	vldr	s0, [r7]
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 f9a3 	bl	800780c <HTS221_SetOutputDataRate>
 80074c6:	4603      	mov	r3, r0
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3708      	adds	r7, #8
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <HTS221_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b088      	sub	sp, #32
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	3320      	adds	r3, #32
 80074de:	f107 020c 	add.w	r2, r7, #12
 80074e2:	4611      	mov	r1, r2
 80074e4:	4618      	mov	r0, r3
 80074e6:	f000 fc58 	bl	8007d9a <hts221_hum_adc_point_0_get>
 80074ea:	4603      	mov	r3, r0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d002      	beq.n	80074f6 <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 80074f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80074f4:	e06b      	b.n	80075ce <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f103 0220 	add.w	r2, r3, #32
 80074fc:	f107 030c 	add.w	r3, r7, #12
 8007500:	3304      	adds	r3, #4
 8007502:	4619      	mov	r1, r3
 8007504:	4610      	mov	r0, r2
 8007506:	f000 fbaa 	bl	8007c5e <hts221_hum_rh_point_0_get>
 800750a:	4603      	mov	r3, r0
 800750c:	2b00      	cmp	r3, #0
 800750e:	d002      	beq.n	8007516 <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 8007510:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007514:	e05b      	b.n	80075ce <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f103 0220 	add.w	r2, r3, #32
 800751c:	f107 030c 	add.w	r3, r7, #12
 8007520:	3308      	adds	r3, #8
 8007522:	4619      	mov	r1, r3
 8007524:	4610      	mov	r0, r2
 8007526:	f000 fc5c 	bl	8007de2 <hts221_hum_adc_point_1_get>
 800752a:	4603      	mov	r3, r0
 800752c:	2b00      	cmp	r3, #0
 800752e:	d002      	beq.n	8007536 <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 8007530:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007534:	e04b      	b.n	80075ce <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f103 0220 	add.w	r2, r3, #32
 800753c:	f107 030c 	add.w	r3, r7, #12
 8007540:	330c      	adds	r3, #12
 8007542:	4619      	mov	r1, r3
 8007544:	4610      	mov	r0, r2
 8007546:	f000 fba8 	bl	8007c9a <hts221_hum_rh_point_1_get>
 800754a:	4603      	mov	r3, r0
 800754c:	2b00      	cmp	r3, #0
 800754e:	d002      	beq.n	8007556 <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 8007550:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007554:	e03b      	b.n	80075ce <HTS221_HUM_GetHumidity+0xfe>
 8007556:	2300      	movs	r3, #0
 8007558:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	3320      	adds	r3, #32
 800755e:	f107 021c 	add.w	r2, r7, #28
 8007562:	4611      	mov	r1, r2
 8007564:	4618      	mov	r0, r3
 8007566:	f000 fafd 	bl	8007b64 <hts221_humidity_raw_get>
 800756a:	4603      	mov	r3, r0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d002      	beq.n	8007576 <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 8007570:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007574:	e02b      	b.n	80075ce <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8007576:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800757a:	ee07 3a90 	vmov	s15, r3
 800757e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007582:	f107 030c 	add.w	r3, r7, #12
 8007586:	eeb0 0a67 	vmov.f32	s0, s15
 800758a:	4618      	mov	r0, r3
 800758c:	f000 f99a 	bl	80078c4 <Linear_Interpolation>
 8007590:	eef0 7a40 	vmov.f32	s15, s0
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	edd3 7a00 	vldr	s15, [r3]
 80075a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80075a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075a8:	d503      	bpl.n	80075b2 <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	f04f 0200 	mov.w	r2, #0
 80075b0:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	edd3 7a00 	vldr	s15, [r3]
 80075b8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80075d8 <HTS221_HUM_GetHumidity+0x108>
 80075bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075c4:	dd02      	ble.n	80075cc <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	4a04      	ldr	r2, [pc, #16]	; (80075dc <HTS221_HUM_GetHumidity+0x10c>)
 80075ca:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3720      	adds	r7, #32
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	42c80000 	.word	0x42c80000
 80075dc:	42c80000 	.word	0x42c80000

080075e0 <HTS221_TEMP_Enable>:
  * @brief  Enable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b082      	sub	sp, #8
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d101      	bne.n	80075f6 <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 80075f2:	2300      	movs	r3, #0
 80075f4:	e015      	b.n	8007622 <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d10b      	bne.n	8007618 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	3320      	adds	r3, #32
 8007604:	2101      	movs	r1, #1
 8007606:	4618      	mov	r0, r3
 8007608:	f000 fb03 	bl	8007c12 <hts221_power_on_set>
 800760c:	4603      	mov	r3, r0
 800760e:	2b00      	cmp	r3, #0
 8007610:	d002      	beq.n	8007618 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 8007612:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007616:	e004      	b.n	8007622 <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return HTS221_OK;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3708      	adds	r7, #8
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <HTS221_TEMP_Disable>:
  * @brief  Disable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 800762a:	b580      	push	{r7, lr}
 800762c:	b082      	sub	sp, #8
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007638:	2b00      	cmp	r3, #0
 800763a:	d101      	bne.n	8007640 <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 800763c:	2300      	movs	r3, #0
 800763e:	e015      	b.n	800766c <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007646:	2b00      	cmp	r3, #0
 8007648:	d10b      	bne.n	8007662 <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	3320      	adds	r3, #32
 800764e:	2100      	movs	r1, #0
 8007650:	4618      	mov	r0, r3
 8007652:	f000 fade 	bl	8007c12 <hts221_power_on_set>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	d002      	beq.n	8007662 <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 800765c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007660:	e004      	b.n	800766c <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return HTS221_OK;
 800766a:	2300      	movs	r3, #0
}
 800766c:	4618      	mov	r0, r3
 800766e:	3708      	adds	r7, #8
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <HTS221_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b082      	sub	sp, #8
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 800767e:	6839      	ldr	r1, [r7, #0]
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 f87f 	bl	8007784 <HTS221_GetOutputDataRate>
 8007686:	4603      	mov	r3, r0
}
 8007688:	4618      	mov	r0, r3
 800768a:	3708      	adds	r7, #8
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <HTS221_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 800769c:	ed97 0a00 	vldr	s0, [r7]
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 f8b3 	bl	800780c <HTS221_SetOutputDataRate>
 80076a6:	4603      	mov	r3, r0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3708      	adds	r7, #8
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <HTS221_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b088      	sub	sp, #32
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	3320      	adds	r3, #32
 80076be:	f107 020c 	add.w	r2, r7, #12
 80076c2:	4611      	mov	r1, r2
 80076c4:	4618      	mov	r0, r3
 80076c6:	f000 fbb0 	bl	8007e2a <hts221_temp_adc_point_0_get>
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d002      	beq.n	80076d6 <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 80076d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076d4:	e052      	b.n	800777c <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f103 0220 	add.w	r2, r3, #32
 80076dc:	f107 030c 	add.w	r3, r7, #12
 80076e0:	3304      	adds	r3, #4
 80076e2:	4619      	mov	r1, r3
 80076e4:	4610      	mov	r0, r2
 80076e6:	f000 faf6 	bl	8007cd6 <hts221_temp_deg_point_0_get>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d002      	beq.n	80076f6 <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 80076f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076f4:	e042      	b.n	800777c <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f103 0220 	add.w	r2, r3, #32
 80076fc:	f107 030c 	add.w	r3, r7, #12
 8007700:	3308      	adds	r3, #8
 8007702:	4619      	mov	r1, r3
 8007704:	4610      	mov	r0, r2
 8007706:	f000 fbb4 	bl	8007e72 <hts221_temp_adc_point_1_get>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d002      	beq.n	8007716 <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 8007710:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007714:	e032      	b.n	800777c <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f103 0220 	add.w	r2, r3, #32
 800771c:	f107 030c 	add.w	r3, r7, #12
 8007720:	330c      	adds	r3, #12
 8007722:	4619      	mov	r1, r3
 8007724:	4610      	mov	r0, r2
 8007726:	f000 fb07 	bl	8007d38 <hts221_temp_deg_point_1_get>
 800772a:	4603      	mov	r3, r0
 800772c:	2b00      	cmp	r3, #0
 800772e:	d002      	beq.n	8007736 <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 8007730:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007734:	e022      	b.n	800777c <HTS221_TEMP_GetTemperature+0xcc>
 8007736:	2300      	movs	r3, #0
 8007738:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	3320      	adds	r3, #32
 800773e:	f107 021c 	add.w	r2, r7, #28
 8007742:	4611      	mov	r1, r2
 8007744:	4618      	mov	r0, r3
 8007746:	f000 fa30 	bl	8007baa <hts221_temperature_raw_get>
 800774a:	4603      	mov	r3, r0
 800774c:	2b00      	cmp	r3, #0
 800774e:	d002      	beq.n	8007756 <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 8007750:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007754:	e012      	b.n	800777c <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8007756:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800775a:	ee07 3a90 	vmov	s15, r3
 800775e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007762:	f107 030c 	add.w	r3, r7, #12
 8007766:	eeb0 0a67 	vmov.f32	s0, s15
 800776a:	4618      	mov	r0, r3
 800776c:	f000 f8aa 	bl	80078c4 <Linear_Interpolation>
 8007770:	eef0 7a40 	vmov.f32	s15, s0
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 800777a:	2300      	movs	r3, #0
}
 800777c:	4618      	mov	r0, r3
 800777e:	3720      	adds	r7, #32
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <HTS221_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 800778e:	2300      	movs	r3, #0
 8007790:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	3320      	adds	r3, #32
 8007796:	f107 020b 	add.w	r2, r7, #11
 800779a:	4611      	mov	r1, r2
 800779c:	4618      	mov	r0, r3
 800779e:	f000 f983 	bl	8007aa8 <hts221_data_rate_get>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d002      	beq.n	80077ae <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 80077a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80077ac:	e025      	b.n	80077fa <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 80077ae:	7afb      	ldrb	r3, [r7, #11]
 80077b0:	2b03      	cmp	r3, #3
 80077b2:	d81d      	bhi.n	80077f0 <HTS221_GetOutputDataRate+0x6c>
 80077b4:	a201      	add	r2, pc, #4	; (adr r2, 80077bc <HTS221_GetOutputDataRate+0x38>)
 80077b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ba:	bf00      	nop
 80077bc:	080077cd 	.word	0x080077cd
 80077c0:	080077d7 	.word	0x080077d7
 80077c4:	080077e1 	.word	0x080077e1
 80077c8:	080077e9 	.word	0x080077e9
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	f04f 0200 	mov.w	r2, #0
 80077d2:	601a      	str	r2, [r3, #0]
      break;
 80077d4:	e010      	b.n	80077f8 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80077dc:	601a      	str	r2, [r3, #0]
      break;
 80077de:	e00b      	b.n	80077f8 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	4a08      	ldr	r2, [pc, #32]	; (8007804 <HTS221_GetOutputDataRate+0x80>)
 80077e4:	601a      	str	r2, [r3, #0]
      break;
 80077e6:	e007      	b.n	80077f8 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	4a07      	ldr	r2, [pc, #28]	; (8007808 <HTS221_GetOutputDataRate+0x84>)
 80077ec:	601a      	str	r2, [r3, #0]
      break;
 80077ee:	e003      	b.n	80077f8 <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 80077f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80077f4:	60fb      	str	r3, [r7, #12]
      break;
 80077f6:	bf00      	nop
  }

  return ret;
 80077f8:	68fb      	ldr	r3, [r7, #12]
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3710      	adds	r7, #16
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	40e00000 	.word	0x40e00000
 8007808:	41480000 	.word	0x41480000

0800780c <HTS221_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8007818:	edd7 7a00 	vldr	s15, [r7]
 800781c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007820:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007828:	d801      	bhi.n	800782e <HTS221_SetOutputDataRate+0x22>
 800782a:	2301      	movs	r3, #1
 800782c:	e00b      	b.n	8007846 <HTS221_SetOutputDataRate+0x3a>
 800782e:	edd7 7a00 	vldr	s15, [r7]
 8007832:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8007836:	eef4 7ac7 	vcmpe.f32	s15, s14
 800783a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800783e:	d801      	bhi.n	8007844 <HTS221_SetOutputDataRate+0x38>
 8007840:	2302      	movs	r3, #2
 8007842:	e000      	b.n	8007846 <HTS221_SetOutputDataRate+0x3a>
 8007844:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 8007846:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	3320      	adds	r3, #32
 800784c:	7bfa      	ldrb	r2, [r7, #15]
 800784e:	4611      	mov	r1, r2
 8007850:	4618      	mov	r0, r3
 8007852:	f000 f902 	bl	8007a5a <hts221_data_rate_set>
 8007856:	4603      	mov	r3, r0
 8007858:	2b00      	cmp	r3, #0
 800785a:	d002      	beq.n	8007862 <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 800785c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007860:	e000      	b.n	8007864 <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 8007862:	2300      	movs	r3, #0
}
 8007864:	4618      	mov	r0, r3
 8007866:	3710      	adds	r7, #16
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <HTS221_Initialize>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	3320      	adds	r3, #32
 8007878:	2100      	movs	r1, #0
 800787a:	4618      	mov	r0, r3
 800787c:	f000 f9c9 	bl	8007c12 <hts221_power_on_set>
 8007880:	4603      	mov	r3, r0
 8007882:	2b00      	cmp	r3, #0
 8007884:	d002      	beq.n	800788c <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 8007886:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800788a:	e017      	b.n	80078bc <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	3320      	adds	r3, #32
 8007890:	2101      	movs	r1, #1
 8007892:	4618      	mov	r0, r3
 8007894:	f000 f940 	bl	8007b18 <hts221_block_data_update_set>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d002      	beq.n	80078a4 <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 800789e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078a2:	e00b      	b.n	80078bc <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 80078a4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f7ff ffaf 	bl	800780c <HTS221_SetOutputDataRate>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d002      	beq.n	80078ba <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 80078b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078b8:	e000      	b.n	80078bc <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 80078ba:	2300      	movs	r3, #0
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3708      	adds	r7, #8
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <Linear_Interpolation>:
  * @param  Lin the line
  * @param  Coeff the coefficient
  * @retval Calculation result
  */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	ed93 7a03 	vldr	s14, [r3, #12]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80078dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80078e0:	edd7 7a00 	vldr	s15, [r7]
 80078e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	edd3 6a02 	vldr	s13, [r3, #8]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80078f4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	ed93 6a00 	vldr	s12, [r3]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	edd3 7a03 	vldr	s15, [r3, #12]
 8007904:	ee66 7a27 	vmul.f32	s15, s12, s15
 8007908:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800790c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	edd3 6a02 	vldr	s13, [r3, #8]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	edd3 7a00 	vldr	s15, [r3]
 800791c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007920:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007924:	eef0 7a66 	vmov.f32	s15, s13
}
 8007928:	eeb0 0a67 	vmov.f32	s0, s15
 800792c:	370c      	adds	r7, #12
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr

08007936 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8007936:	b590      	push	{r4, r7, lr}
 8007938:	b087      	sub	sp, #28
 800793a:	af00      	add	r7, sp, #0
 800793c:	60f8      	str	r0, [r7, #12]
 800793e:	607a      	str	r2, [r7, #4]
 8007940:	461a      	mov	r2, r3
 8007942:	460b      	mov	r3, r1
 8007944:	72fb      	strb	r3, [r7, #11]
 8007946:	4613      	mov	r3, r2
 8007948:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d10e      	bne.n	8007974 <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	695c      	ldr	r4, [r3, #20]
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	7b1b      	ldrb	r3, [r3, #12]
 800795e:	b298      	uxth	r0, r3
 8007960:	7afb      	ldrb	r3, [r7, #11]
 8007962:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007966:	b2db      	uxtb	r3, r3
 8007968:	b299      	uxth	r1, r3
 800796a:	893b      	ldrh	r3, [r7, #8]
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	47a0      	blx	r4
 8007970:	4603      	mov	r3, r0
 8007972:	e00d      	b.n	8007990 <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	695c      	ldr	r4, [r3, #20]
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	7b1b      	ldrb	r3, [r3, #12]
 800797c:	b298      	uxth	r0, r3
 800797e:	7afb      	ldrb	r3, [r7, #11]
 8007980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007984:	b2db      	uxtb	r3, r3
 8007986:	b299      	uxth	r1, r3
 8007988:	893b      	ldrh	r3, [r7, #8]
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	47a0      	blx	r4
 800798e:	4603      	mov	r3, r0
  }
}
 8007990:	4618      	mov	r0, r3
 8007992:	371c      	adds	r7, #28
 8007994:	46bd      	mov	sp, r7
 8007996:	bd90      	pop	{r4, r7, pc}

08007998 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8007998:	b590      	push	{r4, r7, lr}
 800799a:	b087      	sub	sp, #28
 800799c:	af00      	add	r7, sp, #0
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	607a      	str	r2, [r7, #4]
 80079a2:	461a      	mov	r2, r3
 80079a4:	460b      	mov	r3, r1
 80079a6:	72fb      	strb	r3, [r7, #11]
 80079a8:	4613      	mov	r3, r2
 80079aa:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d10e      	bne.n	80079d6 <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	691c      	ldr	r4, [r3, #16]
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	7b1b      	ldrb	r3, [r3, #12]
 80079c0:	b298      	uxth	r0, r3
 80079c2:	7afb      	ldrb	r3, [r7, #11]
 80079c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	b299      	uxth	r1, r3
 80079cc:	893b      	ldrh	r3, [r7, #8]
 80079ce:	687a      	ldr	r2, [r7, #4]
 80079d0:	47a0      	blx	r4
 80079d2:	4603      	mov	r3, r0
 80079d4:	e00d      	b.n	80079f2 <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	691c      	ldr	r4, [r3, #16]
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	7b1b      	ldrb	r3, [r3, #12]
 80079de:	b298      	uxth	r0, r3
 80079e0:	7afb      	ldrb	r3, [r7, #11]
 80079e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	b299      	uxth	r1, r3
 80079ea:	893b      	ldrh	r3, [r7, #8]
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	47a0      	blx	r4
 80079f0:	4603      	mov	r3, r0
  }
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	371c      	adds	r7, #28
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd90      	pop	{r4, r7, pc}

080079fa <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 80079fa:	b590      	push	{r4, r7, lr}
 80079fc:	b087      	sub	sp, #28
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	60f8      	str	r0, [r7, #12]
 8007a02:	607a      	str	r2, [r7, #4]
 8007a04:	461a      	mov	r2, r3
 8007a06:	460b      	mov	r3, r1
 8007a08:	72fb      	strb	r3, [r7, #11]
 8007a0a:	4613      	mov	r3, r2
 8007a0c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	685c      	ldr	r4, [r3, #4]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	68d8      	ldr	r0, [r3, #12]
 8007a16:	893b      	ldrh	r3, [r7, #8]
 8007a18:	7af9      	ldrb	r1, [r7, #11]
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	47a0      	blx	r4
 8007a1e:	6178      	str	r0, [r7, #20]

  return ret;
 8007a20:	697b      	ldr	r3, [r7, #20]
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	371c      	adds	r7, #28
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd90      	pop	{r4, r7, pc}

08007a2a <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8007a2a:	b590      	push	{r4, r7, lr}
 8007a2c:	b087      	sub	sp, #28
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	60f8      	str	r0, [r7, #12]
 8007a32:	607a      	str	r2, [r7, #4]
 8007a34:	461a      	mov	r2, r3
 8007a36:	460b      	mov	r3, r1
 8007a38:	72fb      	strb	r3, [r7, #11]
 8007a3a:	4613      	mov	r3, r2
 8007a3c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681c      	ldr	r4, [r3, #0]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	68d8      	ldr	r0, [r3, #12]
 8007a46:	893b      	ldrh	r3, [r7, #8]
 8007a48:	7af9      	ldrb	r1, [r7, #11]
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	47a0      	blx	r4
 8007a4e:	6178      	str	r0, [r7, #20]

  return ret;
 8007a50:	697b      	ldr	r3, [r7, #20]
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	371c      	adds	r7, #28
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd90      	pop	{r4, r7, pc}

08007a5a <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b084      	sub	sp, #16
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
 8007a62:	460b      	mov	r3, r1
 8007a64:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8007a66:	f107 0208 	add.w	r2, r7, #8
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	2120      	movs	r1, #32
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f7ff ffc3 	bl	80079fa <hts221_read_reg>
 8007a74:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d10f      	bne.n	8007a9c <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8007a7c:	78fb      	ldrb	r3, [r7, #3]
 8007a7e:	f003 0303 	and.w	r3, r3, #3
 8007a82:	b2da      	uxtb	r2, r3
 8007a84:	7a3b      	ldrb	r3, [r7, #8]
 8007a86:	f362 0301 	bfi	r3, r2, #0, #2
 8007a8a:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8007a8c:	f107 0208 	add.w	r2, r7, #8
 8007a90:	2301      	movs	r3, #1
 8007a92:	2120      	movs	r1, #32
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f7ff ffc8 	bl	8007a2a <hts221_write_reg>
 8007a9a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
	...

08007aa8 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8007ab2:	f107 0208 	add.w	r2, r7, #8
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	2120      	movs	r1, #32
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f7ff ff9d 	bl	80079fa <hts221_read_reg>
 8007ac0:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8007ac2:	7a3b      	ldrb	r3, [r7, #8]
 8007ac4:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	2b03      	cmp	r3, #3
 8007acc:	d81a      	bhi.n	8007b04 <hts221_data_rate_get+0x5c>
 8007ace:	a201      	add	r2, pc, #4	; (adr r2, 8007ad4 <hts221_data_rate_get+0x2c>)
 8007ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ad4:	08007ae5 	.word	0x08007ae5
 8007ad8:	08007aed 	.word	0x08007aed
 8007adc:	08007af5 	.word	0x08007af5
 8007ae0:	08007afd 	.word	0x08007afd
  {
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	701a      	strb	r2, [r3, #0]
      break;
 8007aea:	e00f      	b.n	8007b0c <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	2201      	movs	r2, #1
 8007af0:	701a      	strb	r2, [r3, #0]
      break;
 8007af2:	e00b      	b.n	8007b0c <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	2202      	movs	r2, #2
 8007af8:	701a      	strb	r2, [r3, #0]
      break;
 8007afa:	e007      	b.n	8007b0c <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	2203      	movs	r2, #3
 8007b00:	701a      	strb	r2, [r3, #0]
      break;
 8007b02:	e003      	b.n	8007b0c <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	2204      	movs	r2, #4
 8007b08:	701a      	strb	r2, [r3, #0]
      break;
 8007b0a:	bf00      	nop
  }

  return ret;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3710      	adds	r7, #16
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop

08007b18 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	460b      	mov	r3, r1
 8007b22:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8007b24:	f107 0208 	add.w	r2, r7, #8
 8007b28:	2301      	movs	r3, #1
 8007b2a:	2120      	movs	r1, #32
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f7ff ff64 	bl	80079fa <hts221_read_reg>
 8007b32:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d10f      	bne.n	8007b5a <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8007b3a:	78fb      	ldrb	r3, [r7, #3]
 8007b3c:	f003 0301 	and.w	r3, r3, #1
 8007b40:	b2da      	uxtb	r2, r3
 8007b42:	7a3b      	ldrb	r3, [r7, #8]
 8007b44:	f362 0382 	bfi	r3, r2, #2, #1
 8007b48:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8007b4a:	f107 0208 	add.w	r2, r7, #8
 8007b4e:	2301      	movs	r3, #1
 8007b50:	2120      	movs	r1, #32
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f7ff ff69 	bl	8007a2a <hts221_write_reg>
 8007b58:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3710      	adds	r7, #16
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8007b6e:	f107 0208 	add.w	r2, r7, #8
 8007b72:	2302      	movs	r3, #2
 8007b74:	2128      	movs	r1, #40	; 0x28
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f7ff ff3f 	bl	80079fa <hts221_read_reg>
 8007b7c:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8007b7e:	7a7b      	ldrb	r3, [r7, #9]
 8007b80:	b21a      	sxth	r2, r3
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	021b      	lsls	r3, r3, #8
 8007b90:	b29a      	uxth	r2, r3
 8007b92:	7a3b      	ldrb	r3, [r7, #8]
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	4413      	add	r3, r2
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	b21a      	sxth	r2, r3
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	801a      	strh	r2, [r3, #0]

  return ret;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3710      	adds	r7, #16
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}

08007baa <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8007baa:	b580      	push	{r7, lr}
 8007bac:	b084      	sub	sp, #16
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
 8007bb2:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8007bb4:	f107 0208 	add.w	r2, r7, #8
 8007bb8:	2302      	movs	r3, #2
 8007bba:	212a      	movs	r1, #42	; 0x2a
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f7ff ff1c 	bl	80079fa <hts221_read_reg>
 8007bc2:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8007bc4:	7a7b      	ldrb	r3, [r7, #9]
 8007bc6:	b21a      	sxth	r2, r3
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	021b      	lsls	r3, r3, #8
 8007bd6:	b29a      	uxth	r2, r3
 8007bd8:	7a3b      	ldrb	r3, [r7, #8]
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	4413      	add	r3, r2
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	b21a      	sxth	r2, r3
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	801a      	strh	r2, [r3, #0]

  return ret;
 8007be6:	68fb      	ldr	r3, [r7, #12]
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3710      	adds	r7, #16
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	683a      	ldr	r2, [r7, #0]
 8007bfe:	210f      	movs	r1, #15
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f7ff fefa 	bl	80079fa <hts221_read_reg>
 8007c06:	60f8      	str	r0, [r7, #12]

  return ret;
 8007c08:	68fb      	ldr	r3, [r7, #12]
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3710      	adds	r7, #16
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}

08007c12 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b084      	sub	sp, #16
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8007c1e:	f107 0208 	add.w	r2, r7, #8
 8007c22:	2301      	movs	r3, #1
 8007c24:	2120      	movs	r1, #32
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f7ff fee7 	bl	80079fa <hts221_read_reg>
 8007c2c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d10f      	bne.n	8007c54 <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 8007c34:	78fb      	ldrb	r3, [r7, #3]
 8007c36:	f003 0301 	and.w	r3, r3, #1
 8007c3a:	b2da      	uxtb	r2, r3
 8007c3c:	7a3b      	ldrb	r3, [r7, #8]
 8007c3e:	f362 13c7 	bfi	r3, r2, #7, #1
 8007c42:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8007c44:	f107 0208 	add.w	r2, r7, #8
 8007c48:	2301      	movs	r3, #1
 8007c4a:	2120      	movs	r1, #32
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f7ff feec 	bl	8007a2a <hts221_write_reg>
 8007c52:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007c54:	68fb      	ldr	r3, [r7, #12]
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}

08007c5e <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8007c5e:	b580      	push	{r7, lr}
 8007c60:	b084      	sub	sp, #16
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
 8007c66:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 8007c68:	f107 020b 	add.w	r2, r7, #11
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	2130      	movs	r1, #48	; 0x30
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f7ff fec2 	bl	80079fa <hts221_read_reg>
 8007c76:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8007c78:	7afb      	ldrb	r3, [r7, #11]
 8007c7a:	ee07 3a90 	vmov	s15, r3
 8007c7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007c82:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007c86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8007c90:	68fb      	ldr	r3, [r7, #12]
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3710      	adds	r7, #16
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}

08007c9a <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8007c9a:	b580      	push	{r7, lr}
 8007c9c:	b084      	sub	sp, #16
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
 8007ca2:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8007ca4:	f107 020b 	add.w	r2, r7, #11
 8007ca8:	2301      	movs	r3, #1
 8007caa:	2131      	movs	r1, #49	; 0x31
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f7ff fea4 	bl	80079fa <hts221_read_reg>
 8007cb2:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8007cb4:	7afb      	ldrb	r3, [r7, #11]
 8007cb6:	ee07 3a90 	vmov	s15, r3
 8007cba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007cbe:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007cc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3710      	adds	r7, #16
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}

08007cd6 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8007cd6:	b580      	push	{r7, lr}
 8007cd8:	b086      	sub	sp, #24
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
 8007cde:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8007ce0:	f107 020f 	add.w	r2, r7, #15
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	2132      	movs	r1, #50	; 0x32
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f7ff fe86 	bl	80079fa <hts221_read_reg>
 8007cee:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d11b      	bne.n	8007d2e <hts221_temp_deg_point_0_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8007cf6:	f107 0210 	add.w	r2, r7, #16
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	2135      	movs	r1, #53	; 0x35
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f7ff fe7b 	bl	80079fa <hts221_read_reg>
 8007d04:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 8007d06:	7c3b      	ldrb	r3, [r7, #16]
 8007d08:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8007d10:	7cfb      	ldrb	r3, [r7, #19]
 8007d12:	021b      	lsls	r3, r3, #8
 8007d14:	7bfa      	ldrb	r2, [r7, #15]
 8007d16:	4413      	add	r3, r2
 8007d18:	ee07 3a90 	vmov	s15, r3
 8007d1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007d20:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8007d24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8007d2e:	697b      	ldr	r3, [r7, #20]
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3718      	adds	r7, #24
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b086      	sub	sp, #24
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8007d42:	f107 020f 	add.w	r2, r7, #15
 8007d46:	2301      	movs	r3, #1
 8007d48:	2133      	movs	r1, #51	; 0x33
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f7ff fe55 	bl	80079fa <hts221_read_reg>
 8007d50:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d11b      	bne.n	8007d90 <hts221_temp_deg_point_1_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8007d58:	f107 0210 	add.w	r2, r7, #16
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	2135      	movs	r1, #53	; 0x35
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f7ff fe4a 	bl	80079fa <hts221_read_reg>
 8007d66:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 8007d68:	7c3b      	ldrb	r3, [r7, #16]
 8007d6a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8007d72:	7cfb      	ldrb	r3, [r7, #19]
 8007d74:	021b      	lsls	r3, r3, #8
 8007d76:	7bfa      	ldrb	r2, [r7, #15]
 8007d78:	4413      	add	r3, r2
 8007d7a:	ee07 3a90 	vmov	s15, r3
 8007d7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007d82:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8007d86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8007d90:	697b      	ldr	r3, [r7, #20]
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3718      	adds	r7, #24
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b084      	sub	sp, #16
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
 8007da2:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8007da4:	f107 0208 	add.w	r2, r7, #8
 8007da8:	2302      	movs	r3, #2
 8007daa:	2136      	movs	r1, #54	; 0x36
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f7ff fe24 	bl	80079fa <hts221_read_reg>
 8007db2:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8007db4:	7a7b      	ldrb	r3, [r7, #9]
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	021b      	lsls	r3, r3, #8
 8007dba:	b29a      	uxth	r2, r3
 8007dbc:	7a3b      	ldrb	r3, [r7, #8]
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	4413      	add	r3, r2
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8007dc6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007dca:	ee07 3a90 	vmov	s15, r3
 8007dce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3710      	adds	r7, #16
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}

08007de2 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8007de2:	b580      	push	{r7, lr}
 8007de4:	b084      	sub	sp, #16
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
 8007dea:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8007dec:	f107 0208 	add.w	r2, r7, #8
 8007df0:	2302      	movs	r3, #2
 8007df2:	213a      	movs	r1, #58	; 0x3a
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f7ff fe00 	bl	80079fa <hts221_read_reg>
 8007dfa:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8007dfc:	7a7b      	ldrb	r3, [r7, #9]
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	021b      	lsls	r3, r3, #8
 8007e02:	b29a      	uxth	r2, r3
 8007e04:	7a3b      	ldrb	r3, [r7, #8]
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	4413      	add	r3, r2
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8007e0e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007e12:	ee07 3a90 	vmov	s15, r3
 8007e16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8007e20:	68fb      	ldr	r3, [r7, #12]
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3710      	adds	r7, #16
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b084      	sub	sp, #16
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
 8007e32:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 8007e34:	f107 0208 	add.w	r2, r7, #8
 8007e38:	2302      	movs	r3, #2
 8007e3a:	213c      	movs	r1, #60	; 0x3c
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f7ff fddc 	bl	80079fa <hts221_read_reg>
 8007e42:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8007e44:	7a7b      	ldrb	r3, [r7, #9]
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	021b      	lsls	r3, r3, #8
 8007e4a:	b29a      	uxth	r2, r3
 8007e4c:	7a3b      	ldrb	r3, [r7, #8]
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	4413      	add	r3, r2
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8007e56:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007e5a:	ee07 3a90 	vmov	s15, r3
 8007e5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8007e68:	68fb      	ldr	r3, [r7, #12]
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3710      	adds	r7, #16
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}

08007e72 <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8007e72:	b580      	push	{r7, lr}
 8007e74:	b084      	sub	sp, #16
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
 8007e7a:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 8007e7c:	f107 0208 	add.w	r2, r7, #8
 8007e80:	2302      	movs	r3, #2
 8007e82:	213e      	movs	r1, #62	; 0x3e
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f7ff fdb8 	bl	80079fa <hts221_read_reg>
 8007e8a:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8007e8c:	7a7b      	ldrb	r3, [r7, #9]
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	021b      	lsls	r3, r3, #8
 8007e92:	b29a      	uxth	r2, r3
 8007e94:	7a3b      	ldrb	r3, [r7, #8]
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	4413      	add	r3, r2
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8007e9e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007ea2:	ee07 3a90 	vmov	s15, r3
 8007ea6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3710      	adds	r7, #16
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
	...

08007ebc <IIS2MDC_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_RegisterBusIO(IIS2MDC_Object_t *pObj, IIS2MDC_IO_t *pIO)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2MDC_OK;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d103      	bne.n	8007ed8 <IIS2MDC_RegisterBusIO+0x1c>
  {
    ret = IIS2MDC_ERROR;
 8007ed0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ed4:	60fb      	str	r3, [r7, #12]
 8007ed6:	e04f      	b.n	8007f78 <IIS2MDC_RegisterBusIO+0xbc>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	685a      	ldr	r2, [r3, #4]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	689a      	ldr	r2, [r3, #8]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	7b1a      	ldrb	r2, [r3, #12]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	691a      	ldr	r2, [r3, #16]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	695a      	ldr	r2, [r3, #20]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	699a      	ldr	r2, [r3, #24]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4a1c      	ldr	r2, [pc, #112]	; (8007f84 <IIS2MDC_RegisterBusIO+0xc8>)
 8007f14:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4a1b      	ldr	r2, [pc, #108]	; (8007f88 <IIS2MDC_RegisterBusIO+0xcc>)
 8007f1a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	69da      	ldr	r2, [r3, #28]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle    = pObj;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d103      	bne.n	8007f3a <IIS2MDC_RegisterBusIO+0x7e>
    {
      ret = IIS2MDC_ERROR;
 8007f32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f36:	60fb      	str	r3, [r7, #12]
 8007f38:	e01e      	b.n	8007f78 <IIS2MDC_RegisterBusIO+0xbc>
    }
    else if (pObj->IO.Init() != IIS2MDC_OK)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4798      	blx	r3
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d003      	beq.n	8007f4e <IIS2MDC_RegisterBusIO+0x92>
    {
      ret = IIS2MDC_ERROR;
 8007f46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f4a:	60fb      	str	r3, [r7, #12]
 8007f4c:	e014      	b.n	8007f78 <IIS2MDC_RegisterBusIO+0xbc>
    }
    else
    {
      if (pObj->IO.BusType != IIS2MDC_I2C_BUS) /* If the bus type is not I2C */
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d010      	beq.n	8007f78 <IIS2MDC_RegisterBusIO+0xbc>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d10b      	bne.n	8007f78 <IIS2MDC_RegisterBusIO+0xbc>
        {
          /* Disable I2C interface on the component */
          if (iis2mdc_i2c_interface_set(&(pObj->Ctx), IIS2MDC_I2C_DISABLE) != IIS2MDC_OK)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	3320      	adds	r3, #32
 8007f64:	2101      	movs	r1, #1
 8007f66:	4618      	mov	r0, r3
 8007f68:	f000 fbc8 	bl	80086fc <iis2mdc_i2c_interface_set>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d002      	beq.n	8007f78 <IIS2MDC_RegisterBusIO+0xbc>
          {
            ret = IIS2MDC_ERROR;
 8007f72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f76:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8007f78:	68fb      	ldr	r3, [r7, #12]
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3710      	adds	r7, #16
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	0800837f 	.word	0x0800837f
 8007f88:	080083e1 	.word	0x080083e1

08007f8c <IIS2MDC_Init>:
  * @brief  Initialize the IIS2MDC sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_Init(IIS2MDC_Object_t *pObj)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b082      	sub	sp, #8
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (iis2mdc_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2MDC_OK)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	3320      	adds	r3, #32
 8007f98:	2101      	movs	r1, #1
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f000 fb06 	bl	80085ac <iis2mdc_block_data_update_set>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d002      	beq.n	8007fac <IIS2MDC_Init+0x20>
  {
    return IIS2MDC_ERROR;
 8007fa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007faa:	e028      	b.n	8007ffe <IIS2MDC_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	3320      	adds	r3, #32
 8007fb0:	2102      	movs	r1, #2
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f000 fa75 	bl	80084a2 <iis2mdc_operating_mode_set>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d002      	beq.n	8007fc4 <IIS2MDC_Init+0x38>
  {
    return IIS2MDC_ERROR;
 8007fbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007fc2:	e01c      	b.n	8007ffe <IIS2MDC_Init+0x72>
  }

  /* Output data rate selection */
  if (iis2mdc_data_rate_set(&(pObj->Ctx), IIS2MDC_ODR_100Hz) != IIS2MDC_OK)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	3320      	adds	r3, #32
 8007fc8:	2103      	movs	r1, #3
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f000 fa8f 	bl	80084ee <iis2mdc_data_rate_set>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d002      	beq.n	8007fdc <IIS2MDC_Init+0x50>
  {
    return IIS2MDC_ERROR;
 8007fd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007fda:	e010      	b.n	8007ffe <IIS2MDC_Init+0x72>
  }

  /* Self Test disabled. */
  if (iis2mdc_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != IIS2MDC_OK)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	3320      	adds	r3, #32
 8007fe0:	2100      	movs	r1, #0
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f000 fb64 	bl	80086b0 <iis2mdc_self_test_set>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d002      	beq.n	8007ff4 <IIS2MDC_Init+0x68>
  {
    return IIS2MDC_ERROR;
 8007fee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ff2:	e004      	b.n	8007ffe <IIS2MDC_Init+0x72>
  }

  pObj->is_initialized = 1;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return IIS2MDC_OK;
 8007ffc:	2300      	movs	r3, #0
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3708      	adds	r7, #8
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}

08008006 <IIS2MDC_DeInit>:
  * @brief  Deinitialize the IIS2MDC magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_DeInit(IIS2MDC_Object_t *pObj)
{
 8008006:	b580      	push	{r7, lr}
 8008008:	b082      	sub	sp, #8
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (IIS2MDC_MAG_Disable(pObj) != IIS2MDC_OK)
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 f874 	bl	80080fc <IIS2MDC_MAG_Disable>
 8008014:	4603      	mov	r3, r0
 8008016:	2b00      	cmp	r3, #0
 8008018:	d002      	beq.n	8008020 <IIS2MDC_DeInit+0x1a>
  {
    return IIS2MDC_ERROR;
 800801a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800801e:	e004      	b.n	800802a <IIS2MDC_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2200      	movs	r2, #0
 8008024:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return IIS2MDC_OK;
 8008028:	2300      	movs	r3, #0
}
 800802a:	4618      	mov	r0, r3
 800802c:	3708      	adds	r7, #8
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}

08008032 <IIS2MDC_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_ReadID(IIS2MDC_Object_t *pObj, uint8_t *Id)
{
 8008032:	b580      	push	{r7, lr}
 8008034:	b082      	sub	sp, #8
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
 800803a:	6039      	str	r1, [r7, #0]
  if (iis2mdc_device_id_get(&(pObj->Ctx), Id) != IIS2MDC_OK)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	3320      	adds	r3, #32
 8008040:	6839      	ldr	r1, [r7, #0]
 8008042:	4618      	mov	r0, r3
 8008044:	f000 fb23 	bl	800868e <iis2mdc_device_id_get>
 8008048:	4603      	mov	r3, r0
 800804a:	2b00      	cmp	r3, #0
 800804c:	d002      	beq.n	8008054 <IIS2MDC_ReadID+0x22>
  {
    return IIS2MDC_ERROR;
 800804e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008052:	e000      	b.n	8008056 <IIS2MDC_ReadID+0x24>
  }

  return IIS2MDC_OK;
 8008054:	2300      	movs	r3, #0
}
 8008056:	4618      	mov	r0, r3
 8008058:	3708      	adds	r7, #8
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
	...

08008060 <IIS2MDC_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to IIS2MDC magnetometer sensor capabilities
  * @retval Component status
  */
int32_t IIS2MDC_GetCapabilities(IIS2MDC_Object_t *pObj, IIS2MDC_Capabilities_t *Capabilities)
{
 8008060:	b480      	push	{r7}
 8008062:	b083      	sub	sp, #12
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	2200      	movs	r2, #0
 800806e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	2200      	movs	r2, #0
 8008074:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	2201      	movs	r2, #1
 800807a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	2200      	movs	r2, #0
 8008080:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	2200      	movs	r2, #0
 8008086:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	2200      	movs	r2, #0
 800808c:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	2232      	movs	r2, #50	; 0x32
 8008092:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	f04f 0200 	mov.w	r2, #0
 800809a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	f04f 0200 	mov.w	r2, #0
 80080a2:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	4a04      	ldr	r2, [pc, #16]	; (80080b8 <IIS2MDC_GetCapabilities+0x58>)
 80080a8:	619a      	str	r2, [r3, #24]
  return IIS2MDC_OK;
 80080aa:	2300      	movs	r3, #0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	370c      	adds	r7, #12
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr
 80080b8:	42c80000 	.word	0x42c80000

080080bc <IIS2MDC_MAG_Enable>:
  * @brief Enable the IIS2MDC magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_Enable(IIS2MDC_Object_t *pObj)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b082      	sub	sp, #8
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d101      	bne.n	80080d2 <IIS2MDC_MAG_Enable+0x16>
  {
    return IIS2MDC_OK;
 80080ce:	2300      	movs	r3, #0
 80080d0:	e010      	b.n	80080f4 <IIS2MDC_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_CONTINUOUS_MODE) != IIS2MDC_OK)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	3320      	adds	r3, #32
 80080d6:	2100      	movs	r1, #0
 80080d8:	4618      	mov	r0, r3
 80080da:	f000 f9e2 	bl	80084a2 <iis2mdc_operating_mode_set>
 80080de:	4603      	mov	r3, r0
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d002      	beq.n	80080ea <IIS2MDC_MAG_Enable+0x2e>
  {
    return IIS2MDC_ERROR;
 80080e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80080e8:	e004      	b.n	80080f4 <IIS2MDC_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2201      	movs	r2, #1
 80080ee:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return IIS2MDC_OK;
 80080f2:	2300      	movs	r3, #0
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3708      	adds	r7, #8
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <IIS2MDC_MAG_Disable>:
  * @brief Disable the IIS2MDC magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_Disable(IIS2MDC_Object_t *pObj)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800810a:	2b00      	cmp	r3, #0
 800810c:	d101      	bne.n	8008112 <IIS2MDC_MAG_Disable+0x16>
  {
    return IIS2MDC_OK;
 800810e:	2300      	movs	r3, #0
 8008110:	e010      	b.n	8008134 <IIS2MDC_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	3320      	adds	r3, #32
 8008116:	2102      	movs	r1, #2
 8008118:	4618      	mov	r0, r3
 800811a:	f000 f9c2 	bl	80084a2 <iis2mdc_operating_mode_set>
 800811e:	4603      	mov	r3, r0
 8008120:	2b00      	cmp	r3, #0
 8008122:	d002      	beq.n	800812a <IIS2MDC_MAG_Disable+0x2e>
  {
    return IIS2MDC_ERROR;
 8008124:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008128:	e004      	b.n	8008134 <IIS2MDC_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return IIS2MDC_OK;
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	3708      	adds	r7, #8
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <IIS2MDC_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_GetSensitivity(IIS2MDC_Object_t *pObj, float *Sensitivity)
{
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  *Sensitivity = IIS2MDC_MAG_SENSITIVITY_FS_50GAUSS;
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 800814c:	601a      	str	r2, [r3, #0]

  return IIS2MDC_OK;
 800814e:	2300      	movs	r3, #0
}
 8008150:	4618      	mov	r0, r3
 8008152:	370c      	adds	r7, #12
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr

0800815c <IIS2MDC_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_GetOutputDataRate(IIS2MDC_Object_t *pObj, float *Odr)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2MDC_OK;
 8008166:	2300      	movs	r3, #0
 8008168:	60fb      	str	r3, [r7, #12]
  iis2mdc_odr_t odr_low_level;

  /* Get current output data rate. */
  if (iis2mdc_data_rate_get(&(pObj->Ctx), &odr_low_level) != IIS2MDC_OK)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	3320      	adds	r3, #32
 800816e:	f107 020b 	add.w	r2, r7, #11
 8008172:	4611      	mov	r1, r2
 8008174:	4618      	mov	r0, r3
 8008176:	f000 f9e1 	bl	800853c <iis2mdc_data_rate_get>
 800817a:	4603      	mov	r3, r0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d002      	beq.n	8008186 <IIS2MDC_MAG_GetOutputDataRate+0x2a>
  {
    return IIS2MDC_ERROR;
 8008180:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008184:	e023      	b.n	80081ce <IIS2MDC_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8008186:	7afb      	ldrb	r3, [r7, #11]
 8008188:	2b03      	cmp	r3, #3
 800818a:	d81b      	bhi.n	80081c4 <IIS2MDC_MAG_GetOutputDataRate+0x68>
 800818c:	a201      	add	r2, pc, #4	; (adr r2, 8008194 <IIS2MDC_MAG_GetOutputDataRate+0x38>)
 800818e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008192:	bf00      	nop
 8008194:	080081a5 	.word	0x080081a5
 8008198:	080081ad 	.word	0x080081ad
 800819c:	080081b5 	.word	0x080081b5
 80081a0:	080081bd 	.word	0x080081bd
  {
    case IIS2MDC_ODR_10Hz:
      *Odr = 10.0f;
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	4a0c      	ldr	r2, [pc, #48]	; (80081d8 <IIS2MDC_MAG_GetOutputDataRate+0x7c>)
 80081a8:	601a      	str	r2, [r3, #0]
      break;
 80081aa:	e00f      	b.n	80081cc <IIS2MDC_MAG_GetOutputDataRate+0x70>

    case IIS2MDC_ODR_20Hz:
      *Odr = 20.0f;
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	4a0b      	ldr	r2, [pc, #44]	; (80081dc <IIS2MDC_MAG_GetOutputDataRate+0x80>)
 80081b0:	601a      	str	r2, [r3, #0]
      break;
 80081b2:	e00b      	b.n	80081cc <IIS2MDC_MAG_GetOutputDataRate+0x70>

    case IIS2MDC_ODR_50Hz:
      *Odr = 50.0f;
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	4a0a      	ldr	r2, [pc, #40]	; (80081e0 <IIS2MDC_MAG_GetOutputDataRate+0x84>)
 80081b8:	601a      	str	r2, [r3, #0]
      break;
 80081ba:	e007      	b.n	80081cc <IIS2MDC_MAG_GetOutputDataRate+0x70>

    case IIS2MDC_ODR_100Hz:
      *Odr = 100.0f;
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	4a09      	ldr	r2, [pc, #36]	; (80081e4 <IIS2MDC_MAG_GetOutputDataRate+0x88>)
 80081c0:	601a      	str	r2, [r3, #0]
      break;
 80081c2:	e003      	b.n	80081cc <IIS2MDC_MAG_GetOutputDataRate+0x70>

    default:
      ret = IIS2MDC_ERROR;
 80081c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80081c8:	60fb      	str	r3, [r7, #12]
      break;
 80081ca:	bf00      	nop
  }

  return ret;
 80081cc:	68fb      	ldr	r3, [r7, #12]
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3710      	adds	r7, #16
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	bf00      	nop
 80081d8:	41200000 	.word	0x41200000
 80081dc:	41a00000 	.word	0x41a00000
 80081e0:	42480000 	.word	0x42480000
 80081e4:	42c80000 	.word	0x42c80000

080081e8 <IIS2MDC_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_SetOutputDataRate(IIS2MDC_Object_t *pObj, float Odr)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	ed87 0a00 	vstr	s0, [r7]
  iis2mdc_odr_t new_odr;

  new_odr = (Odr <= 10.000f) ? IIS2MDC_ODR_10Hz
            : (Odr <= 20.000f) ? IIS2MDC_ODR_20Hz
 80081f4:	edd7 7a00 	vldr	s15, [r7]
 80081f8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80081fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008204:	d801      	bhi.n	800820a <IIS2MDC_MAG_SetOutputDataRate+0x22>
 8008206:	2300      	movs	r3, #0
 8008208:	e016      	b.n	8008238 <IIS2MDC_MAG_SetOutputDataRate+0x50>
 800820a:	edd7 7a00 	vldr	s15, [r7]
 800820e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8008212:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800821a:	d801      	bhi.n	8008220 <IIS2MDC_MAG_SetOutputDataRate+0x38>
 800821c:	2301      	movs	r3, #1
 800821e:	e00b      	b.n	8008238 <IIS2MDC_MAG_SetOutputDataRate+0x50>
 8008220:	edd7 7a00 	vldr	s15, [r7]
 8008224:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8008260 <IIS2MDC_MAG_SetOutputDataRate+0x78>
 8008228:	eef4 7ac7 	vcmpe.f32	s15, s14
 800822c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008230:	d801      	bhi.n	8008236 <IIS2MDC_MAG_SetOutputDataRate+0x4e>
 8008232:	2302      	movs	r3, #2
 8008234:	e000      	b.n	8008238 <IIS2MDC_MAG_SetOutputDataRate+0x50>
 8008236:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? IIS2MDC_ODR_10Hz
 8008238:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? IIS2MDC_ODR_50Hz
            :                    IIS2MDC_ODR_100Hz;

  if (iis2mdc_data_rate_set(&(pObj->Ctx), new_odr) != IIS2MDC_OK)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	3320      	adds	r3, #32
 800823e:	7bfa      	ldrb	r2, [r7, #15]
 8008240:	4611      	mov	r1, r2
 8008242:	4618      	mov	r0, r3
 8008244:	f000 f953 	bl	80084ee <iis2mdc_data_rate_set>
 8008248:	4603      	mov	r3, r0
 800824a:	2b00      	cmp	r3, #0
 800824c:	d002      	beq.n	8008254 <IIS2MDC_MAG_SetOutputDataRate+0x6c>
  {
    return IIS2MDC_ERROR;
 800824e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008252:	e000      	b.n	8008256 <IIS2MDC_MAG_SetOutputDataRate+0x6e>
  }

  return IIS2MDC_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	42480000 	.word	0x42480000

08008264 <IIS2MDC_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_GetFullScale(IIS2MDC_Object_t *pObj, int32_t *FullScale)
{
 8008264:	b480      	push	{r7}
 8008266:	b083      	sub	sp, #12
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  *FullScale = 50;
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	2232      	movs	r2, #50	; 0x32
 8008272:	601a      	str	r2, [r3, #0]

  return IIS2MDC_OK;
 8008274:	2300      	movs	r3, #0
}
 8008276:	4618      	mov	r0, r3
 8008278:	370c      	adds	r7, #12
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr

08008282 <IIS2MDC_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_SetFullScale(IIS2MDC_Object_t *pObj, int32_t FullScale)
{
 8008282:	b480      	push	{r7}
 8008284:	b083      	sub	sp, #12
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
 800828a:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(FullScale);
  return IIS2MDC_OK;
 800828c:	2300      	movs	r3, #0
}
 800828e:	4618      	mov	r0, r3
 8008290:	370c      	adds	r7, #12
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr

0800829a <IIS2MDC_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_GetAxesRaw(IIS2MDC_Object_t *pObj, IIS2MDC_AxesRaw_t *Value)
{
 800829a:	b580      	push	{r7, lr}
 800829c:	b084      	sub	sp, #16
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
 80082a2:	6039      	str	r1, [r7, #0]
  iis2mdc_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (iis2mdc_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2MDC_OK)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	3320      	adds	r3, #32
 80082a8:	f107 0208 	add.w	r2, r7, #8
 80082ac:	4611      	mov	r1, r2
 80082ae:	4618      	mov	r0, r3
 80082b0:	f000 f9a2 	bl	80085f8 <iis2mdc_magnetic_raw_get>
 80082b4:	4603      	mov	r3, r0
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d002      	beq.n	80082c0 <IIS2MDC_MAG_GetAxesRaw+0x26>
  {
    return IIS2MDC_ERROR;
 80082ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80082be:	e00c      	b.n	80082da <IIS2MDC_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80082c0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80082c8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80082d0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	809a      	strh	r2, [r3, #4]

  return IIS2MDC_OK;
 80082d8:	2300      	movs	r3, #0
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3710      	adds	r7, #16
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}

080082e2 <IIS2MDC_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_GetAxes(IIS2MDC_Object_t *pObj, IIS2MDC_Axes_t *MagneticField)
{
 80082e2:	b580      	push	{r7, lr}
 80082e4:	b086      	sub	sp, #24
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
 80082ea:	6039      	str	r1, [r7, #0]
  iis2mdc_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (iis2mdc_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2MDC_OK)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	3320      	adds	r3, #32
 80082f0:	f107 0210 	add.w	r2, r7, #16
 80082f4:	4611      	mov	r1, r2
 80082f6:	4618      	mov	r0, r3
 80082f8:	f000 f97e 	bl	80085f8 <iis2mdc_magnetic_raw_get>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d002      	beq.n	8008308 <IIS2MDC_MAG_GetAxes+0x26>
  {
    return IIS2MDC_ERROR;
 8008302:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008306:	e036      	b.n	8008376 <IIS2MDC_MAG_GetAxes+0x94>
  }

  /* Get IIS2MDC actual sensitivity. */
  (void)IIS2MDC_MAG_GetSensitivity(pObj, &sensitivity);
 8008308:	f107 030c 	add.w	r3, r7, #12
 800830c:	4619      	mov	r1, r3
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f7ff ff14 	bl	800813c <IIS2MDC_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8008314:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008318:	ee07 3a90 	vmov	s15, r3
 800831c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008320:	edd7 7a03 	vldr	s15, [r7, #12]
 8008324:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008328:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800832c:	ee17 2a90 	vmov	r2, s15
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8008334:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008338:	ee07 3a90 	vmov	s15, r3
 800833c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008340:	edd7 7a03 	vldr	s15, [r7, #12]
 8008344:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008348:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800834c:	ee17 2a90 	vmov	r2, s15
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8008354:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008358:	ee07 3a90 	vmov	s15, r3
 800835c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008360:	edd7 7a03 	vldr	s15, [r7, #12]
 8008364:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008368:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800836c:	ee17 2a90 	vmov	r2, s15
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	609a      	str	r2, [r3, #8]

  return IIS2MDC_OK;
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	3718      	adds	r7, #24
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}

0800837e <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800837e:	b590      	push	{r4, r7, lr}
 8008380:	b087      	sub	sp, #28
 8008382:	af00      	add	r7, sp, #0
 8008384:	60f8      	str	r0, [r7, #12]
 8008386:	607a      	str	r2, [r7, #4]
 8008388:	461a      	mov	r2, r3
 800838a:	460b      	mov	r3, r1
 800838c:	72fb      	strb	r3, [r7, #11]
 800838e:	4613      	mov	r3, r2
 8008390:	813b      	strh	r3, [r7, #8]
  IIS2MDC_Object_t *pObj = (IIS2MDC_Object_t *)Handle;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d10e      	bne.n	80083bc <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	695c      	ldr	r4, [r3, #20]
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	7b1b      	ldrb	r3, [r3, #12]
 80083a6:	b298      	uxth	r0, r3
 80083a8:	7afb      	ldrb	r3, [r7, #11]
 80083aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	b299      	uxth	r1, r3
 80083b2:	893b      	ldrh	r3, [r7, #8]
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	47a0      	blx	r4
 80083b8:	4603      	mov	r3, r0
 80083ba:	e00d      	b.n	80083d8 <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	695c      	ldr	r4, [r3, #20]
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	7b1b      	ldrb	r3, [r3, #12]
 80083c4:	b298      	uxth	r0, r3
 80083c6:	7afb      	ldrb	r3, [r7, #11]
 80083c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083cc:	b2db      	uxtb	r3, r3
 80083ce:	b299      	uxth	r1, r3
 80083d0:	893b      	ldrh	r3, [r7, #8]
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	47a0      	blx	r4
 80083d6:	4603      	mov	r3, r0
  }
}
 80083d8:	4618      	mov	r0, r3
 80083da:	371c      	adds	r7, #28
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd90      	pop	{r4, r7, pc}

080083e0 <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80083e0:	b590      	push	{r4, r7, lr}
 80083e2:	b087      	sub	sp, #28
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	607a      	str	r2, [r7, #4]
 80083ea:	461a      	mov	r2, r3
 80083ec:	460b      	mov	r3, r1
 80083ee:	72fb      	strb	r3, [r7, #11]
 80083f0:	4613      	mov	r3, r2
 80083f2:	813b      	strh	r3, [r7, #8]
  IIS2MDC_Object_t *pObj = (IIS2MDC_Object_t *)Handle;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d10e      	bne.n	800841e <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	691c      	ldr	r4, [r3, #16]
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	7b1b      	ldrb	r3, [r3, #12]
 8008408:	b298      	uxth	r0, r3
 800840a:	7afb      	ldrb	r3, [r7, #11]
 800840c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008410:	b2db      	uxtb	r3, r3
 8008412:	b299      	uxth	r1, r3
 8008414:	893b      	ldrh	r3, [r7, #8]
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	47a0      	blx	r4
 800841a:	4603      	mov	r3, r0
 800841c:	e00d      	b.n	800843a <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	691c      	ldr	r4, [r3, #16]
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	7b1b      	ldrb	r3, [r3, #12]
 8008426:	b298      	uxth	r0, r3
 8008428:	7afb      	ldrb	r3, [r7, #11]
 800842a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800842e:	b2db      	uxtb	r3, r3
 8008430:	b299      	uxth	r1, r3
 8008432:	893b      	ldrh	r3, [r7, #8]
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	47a0      	blx	r4
 8008438:	4603      	mov	r3, r0
  }
}
 800843a:	4618      	mov	r0, r3
 800843c:	371c      	adds	r7, #28
 800843e:	46bd      	mov	sp, r7
 8008440:	bd90      	pop	{r4, r7, pc}

08008442 <iis2mdc_read_reg>:
  *
  */
int32_t __weak iis2mdc_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8008442:	b590      	push	{r4, r7, lr}
 8008444:	b087      	sub	sp, #28
 8008446:	af00      	add	r7, sp, #0
 8008448:	60f8      	str	r0, [r7, #12]
 800844a:	607a      	str	r2, [r7, #4]
 800844c:	461a      	mov	r2, r3
 800844e:	460b      	mov	r3, r1
 8008450:	72fb      	strb	r3, [r7, #11]
 8008452:	4613      	mov	r3, r2
 8008454:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	685c      	ldr	r4, [r3, #4]
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	68d8      	ldr	r0, [r3, #12]
 800845e:	893b      	ldrh	r3, [r7, #8]
 8008460:	7af9      	ldrb	r1, [r7, #11]
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	47a0      	blx	r4
 8008466:	6178      	str	r0, [r7, #20]

  return ret;
 8008468:	697b      	ldr	r3, [r7, #20]
}
 800846a:	4618      	mov	r0, r3
 800846c:	371c      	adds	r7, #28
 800846e:	46bd      	mov	sp, r7
 8008470:	bd90      	pop	{r4, r7, pc}

08008472 <iis2mdc_write_reg>:
  *
  */
int32_t __weak iis2mdc_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8008472:	b590      	push	{r4, r7, lr}
 8008474:	b087      	sub	sp, #28
 8008476:	af00      	add	r7, sp, #0
 8008478:	60f8      	str	r0, [r7, #12]
 800847a:	607a      	str	r2, [r7, #4]
 800847c:	461a      	mov	r2, r3
 800847e:	460b      	mov	r3, r1
 8008480:	72fb      	strb	r3, [r7, #11]
 8008482:	4613      	mov	r3, r2
 8008484:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681c      	ldr	r4, [r3, #0]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	68d8      	ldr	r0, [r3, #12]
 800848e:	893b      	ldrh	r3, [r7, #8]
 8008490:	7af9      	ldrb	r1, [r7, #11]
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	47a0      	blx	r4
 8008496:	6178      	str	r0, [r7, #20]

  return ret;
 8008498:	697b      	ldr	r3, [r7, #20]
}
 800849a:	4618      	mov	r0, r3
 800849c:	371c      	adds	r7, #28
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd90      	pop	{r4, r7, pc}

080084a2 <iis2mdc_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_operating_mode_set(stmdev_ctx_t *ctx,
                                   iis2mdc_md_t val)
{
 80084a2:	b580      	push	{r7, lr}
 80084a4:	b084      	sub	sp, #16
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
 80084aa:	460b      	mov	r3, r1
 80084ac:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 80084ae:	f107 0208 	add.w	r2, r7, #8
 80084b2:	2301      	movs	r3, #1
 80084b4:	2160      	movs	r1, #96	; 0x60
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f7ff ffc3 	bl	8008442 <iis2mdc_read_reg>
 80084bc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d10f      	bne.n	80084e4 <iis2mdc_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 80084c4:	78fb      	ldrb	r3, [r7, #3]
 80084c6:	f003 0303 	and.w	r3, r3, #3
 80084ca:	b2da      	uxtb	r2, r3
 80084cc:	7a3b      	ldrb	r3, [r7, #8]
 80084ce:	f362 0301 	bfi	r3, r2, #0, #2
 80084d2:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 80084d4:	f107 0208 	add.w	r2, r7, #8
 80084d8:	2301      	movs	r3, #1
 80084da:	2160      	movs	r1, #96	; 0x60
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f7ff ffc8 	bl	8008472 <iis2mdc_write_reg>
 80084e2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80084e4:	68fb      	ldr	r3, [r7, #12]
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3710      	adds	r7, #16
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}

080084ee <iis2mdc_data_rate_set>:
  * @param  val      change the values of odr in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_data_rate_set(stmdev_ctx_t *ctx, iis2mdc_odr_t val)
{
 80084ee:	b580      	push	{r7, lr}
 80084f0:	b084      	sub	sp, #16
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	6078      	str	r0, [r7, #4]
 80084f6:	460b      	mov	r3, r1
 80084f8:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 80084fa:	f107 0208 	add.w	r2, r7, #8
 80084fe:	2301      	movs	r3, #1
 8008500:	2160      	movs	r1, #96	; 0x60
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f7ff ff9d 	bl	8008442 <iis2mdc_read_reg>
 8008508:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d10f      	bne.n	8008530 <iis2mdc_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8008510:	78fb      	ldrb	r3, [r7, #3]
 8008512:	f003 0303 	and.w	r3, r3, #3
 8008516:	b2da      	uxtb	r2, r3
 8008518:	7a3b      	ldrb	r3, [r7, #8]
 800851a:	f362 0383 	bfi	r3, r2, #2, #2
 800851e:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8008520:	f107 0208 	add.w	r2, r7, #8
 8008524:	2301      	movs	r3, #1
 8008526:	2160      	movs	r1, #96	; 0x60
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f7ff ffa2 	bl	8008472 <iis2mdc_write_reg>
 800852e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008530:	68fb      	ldr	r3, [r7, #12]
}
 8008532:	4618      	mov	r0, r3
 8008534:	3710      	adds	r7, #16
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
	...

0800853c <iis2mdc_data_rate_get>:
  * @param  val      Get the values of odr in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_data_rate_get(stmdev_ctx_t *ctx, iis2mdc_odr_t *val)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8008546:	f107 0208 	add.w	r2, r7, #8
 800854a:	2301      	movs	r3, #1
 800854c:	2160      	movs	r1, #96	; 0x60
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f7ff ff77 	bl	8008442 <iis2mdc_read_reg>
 8008554:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8008556:	7a3b      	ldrb	r3, [r7, #8]
 8008558:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800855c:	b2db      	uxtb	r3, r3
 800855e:	2b03      	cmp	r3, #3
 8008560:	d81a      	bhi.n	8008598 <iis2mdc_data_rate_get+0x5c>
 8008562:	a201      	add	r2, pc, #4	; (adr r2, 8008568 <iis2mdc_data_rate_get+0x2c>)
 8008564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008568:	08008579 	.word	0x08008579
 800856c:	08008581 	.word	0x08008581
 8008570:	08008589 	.word	0x08008589
 8008574:	08008591 	.word	0x08008591
  {
    case IIS2MDC_ODR_10Hz:
      *val = IIS2MDC_ODR_10Hz;
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	2200      	movs	r2, #0
 800857c:	701a      	strb	r2, [r3, #0]
      break;
 800857e:	e00f      	b.n	80085a0 <iis2mdc_data_rate_get+0x64>

    case IIS2MDC_ODR_20Hz:
      *val = IIS2MDC_ODR_20Hz;
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	2201      	movs	r2, #1
 8008584:	701a      	strb	r2, [r3, #0]
      break;
 8008586:	e00b      	b.n	80085a0 <iis2mdc_data_rate_get+0x64>

    case IIS2MDC_ODR_50Hz:
      *val = IIS2MDC_ODR_50Hz;
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	2202      	movs	r2, #2
 800858c:	701a      	strb	r2, [r3, #0]
      break;
 800858e:	e007      	b.n	80085a0 <iis2mdc_data_rate_get+0x64>

    case IIS2MDC_ODR_100Hz:
      *val = IIS2MDC_ODR_100Hz;
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	2203      	movs	r2, #3
 8008594:	701a      	strb	r2, [r3, #0]
      break;
 8008596:	e003      	b.n	80085a0 <iis2mdc_data_rate_get+0x64>

    default:
      *val = IIS2MDC_ODR_10Hz;
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	2200      	movs	r2, #0
 800859c:	701a      	strb	r2, [r3, #0]
      break;
 800859e:	bf00      	nop
  }

  return ret;
 80085a0:	68fb      	ldr	r3, [r7, #12]
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3710      	adds	r7, #16
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop

080085ac <iis2mdc_block_data_update_set>:
  * @param  val      change the values of bdu in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	460b      	mov	r3, r1
 80085b6:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 80085b8:	f107 0208 	add.w	r2, r7, #8
 80085bc:	2301      	movs	r3, #1
 80085be:	2162      	movs	r1, #98	; 0x62
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f7ff ff3e 	bl	8008442 <iis2mdc_read_reg>
 80085c6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d10f      	bne.n	80085ee <iis2mdc_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80085ce:	78fb      	ldrb	r3, [r7, #3]
 80085d0:	f003 0301 	and.w	r3, r3, #1
 80085d4:	b2da      	uxtb	r2, r3
 80085d6:	7a3b      	ldrb	r3, [r7, #8]
 80085d8:	f362 1304 	bfi	r3, r2, #4, #1
 80085dc:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 80085de:	f107 0208 	add.w	r2, r7, #8
 80085e2:	2301      	movs	r3, #1
 80085e4:	2162      	movs	r1, #98	; 0x62
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f7ff ff43 	bl	8008472 <iis2mdc_write_reg>
 80085ec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80085ee:	68fb      	ldr	r3, [r7, #12]
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3710      	adds	r7, #16
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <iis2mdc_magnetic_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b086      	sub	sp, #24
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret =  iis2mdc_read_reg(ctx, IIS2MDC_OUTX_L_REG, buff, 6);
 8008602:	f107 020c 	add.w	r2, r7, #12
 8008606:	2306      	movs	r3, #6
 8008608:	2168      	movs	r1, #104	; 0x68
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f7ff ff19 	bl	8008442 <iis2mdc_read_reg>
 8008610:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8008612:	7b7b      	ldrb	r3, [r7, #13]
 8008614:	b21a      	sxth	r2, r3
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008620:	b29b      	uxth	r3, r3
 8008622:	021b      	lsls	r3, r3, #8
 8008624:	b29a      	uxth	r2, r3
 8008626:	7b3b      	ldrb	r3, [r7, #12]
 8008628:	b29b      	uxth	r3, r3
 800862a:	4413      	add	r3, r2
 800862c:	b29b      	uxth	r3, r3
 800862e:	b21a      	sxth	r2, r3
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8008634:	7bfa      	ldrb	r2, [r7, #15]
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	3302      	adds	r3, #2
 800863a:	b212      	sxth	r2, r2
 800863c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	3302      	adds	r3, #2
 8008642:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008646:	b29b      	uxth	r3, r3
 8008648:	021b      	lsls	r3, r3, #8
 800864a:	b29a      	uxth	r2, r3
 800864c:	7bbb      	ldrb	r3, [r7, #14]
 800864e:	b29b      	uxth	r3, r3
 8008650:	4413      	add	r3, r2
 8008652:	b29a      	uxth	r2, r3
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	3302      	adds	r3, #2
 8008658:	b212      	sxth	r2, r2
 800865a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800865c:	7c7a      	ldrb	r2, [r7, #17]
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	3304      	adds	r3, #4
 8008662:	b212      	sxth	r2, r2
 8008664:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	3304      	adds	r3, #4
 800866a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800866e:	b29b      	uxth	r3, r3
 8008670:	021b      	lsls	r3, r3, #8
 8008672:	b29a      	uxth	r2, r3
 8008674:	7c3b      	ldrb	r3, [r7, #16]
 8008676:	b29b      	uxth	r3, r3
 8008678:	4413      	add	r3, r2
 800867a:	b29a      	uxth	r2, r3
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	3304      	adds	r3, #4
 8008680:	b212      	sxth	r2, r2
 8008682:	801a      	strh	r2, [r3, #0]

  return ret;
 8008684:	697b      	ldr	r3, [r7, #20]
}
 8008686:	4618      	mov	r0, r3
 8008688:	3718      	adds	r7, #24
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}

0800868e <iis2mdc_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800868e:	b580      	push	{r7, lr}
 8008690:	b084      	sub	sp, #16
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
 8008696:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  iis2mdc_read_reg(ctx, IIS2MDC_WHO_AM_I, buff, 1);
 8008698:	2301      	movs	r3, #1
 800869a:	683a      	ldr	r2, [r7, #0]
 800869c:	214f      	movs	r1, #79	; 0x4f
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f7ff fecf 	bl	8008442 <iis2mdc_read_reg>
 80086a4:	60f8      	str	r0, [r7, #12]

  return ret;
 80086a6:	68fb      	ldr	r3, [r7, #12]
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3710      	adds	r7, #16
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <iis2mdc_self_test_set>:
  * @param  val      change the values of self_test in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	460b      	mov	r3, r1
 80086ba:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 80086bc:	f107 0208 	add.w	r2, r7, #8
 80086c0:	2301      	movs	r3, #1
 80086c2:	2162      	movs	r1, #98	; 0x62
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f7ff febc 	bl	8008442 <iis2mdc_read_reg>
 80086ca:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d10f      	bne.n	80086f2 <iis2mdc_self_test_set+0x42>
  {
    reg.self_test = val;
 80086d2:	78fb      	ldrb	r3, [r7, #3]
 80086d4:	f003 0301 	and.w	r3, r3, #1
 80086d8:	b2da      	uxtb	r2, r3
 80086da:	7a3b      	ldrb	r3, [r7, #8]
 80086dc:	f362 0341 	bfi	r3, r2, #1, #1
 80086e0:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 80086e2:	f107 0208 	add.w	r2, r7, #8
 80086e6:	2301      	movs	r3, #1
 80086e8:	2162      	movs	r1, #98	; 0x62
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f7ff fec1 	bl	8008472 <iis2mdc_write_reg>
 80086f0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80086f2:	68fb      	ldr	r3, [r7, #12]
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3710      	adds	r7, #16
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <iis2mdc_i2c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_i2c_interface_set(stmdev_ctx_t *ctx,
                                  iis2mdc_i2c_dis_t val)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	460b      	mov	r3, r1
 8008706:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8008708:	f107 0208 	add.w	r2, r7, #8
 800870c:	2301      	movs	r3, #1
 800870e:	2162      	movs	r1, #98	; 0x62
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f7ff fe96 	bl	8008442 <iis2mdc_read_reg>
 8008716:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d10f      	bne.n	800873e <iis2mdc_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 800871e:	78fb      	ldrb	r3, [r7, #3]
 8008720:	f003 0301 	and.w	r3, r3, #1
 8008724:	b2da      	uxtb	r2, r3
 8008726:	7a3b      	ldrb	r3, [r7, #8]
 8008728:	f362 1345 	bfi	r3, r2, #5, #1
 800872c:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 800872e:	f107 0208 	add.w	r2, r7, #8
 8008732:	2301      	movs	r3, #1
 8008734:	2162      	movs	r1, #98	; 0x62
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f7ff fe9b 	bl	8008472 <iis2mdc_write_reg>
 800873c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800873e:	68fb      	ldr	r3, [r7, #12]
}
 8008740:	4618      	mov	r0, r3
 8008742:	3710      	adds	r7, #16
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}

08008748 <ISM330DHCX_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_RegisterBusIO(ISM330DHCX_Object_t *pObj, ISM330DHCX_IO_t *pIO)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b084      	sub	sp, #16
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8008752:	2300      	movs	r3, #0
 8008754:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d103      	bne.n	8008764 <ISM330DHCX_RegisterBusIO+0x1c>
  {
    ret = ISM330DHCX_ERROR;
 800875c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008760:	60fb      	str	r3, [r7, #12]
 8008762:	e051      	b.n	8008808 <ISM330DHCX_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	681a      	ldr	r2, [r3, #0]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	685a      	ldr	r2, [r3, #4]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	689a      	ldr	r2, [r3, #8]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	7b1a      	ldrb	r2, [r3, #12]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	691a      	ldr	r2, [r3, #16]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	695a      	ldr	r2, [r3, #20]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	699a      	ldr	r2, [r3, #24]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	4a1d      	ldr	r2, [pc, #116]	; (8008814 <ISM330DHCX_RegisterBusIO+0xcc>)
 80087a0:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4a1c      	ldr	r2, [pc, #112]	; (8008818 <ISM330DHCX_RegisterBusIO+0xd0>)
 80087a6:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	69da      	ldr	r2, [r3, #28]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d103      	bne.n	80087c6 <ISM330DHCX_RegisterBusIO+0x7e>
    {
      ret = ISM330DHCX_ERROR;
 80087be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80087c2:	60fb      	str	r3, [r7, #12]
 80087c4:	e020      	b.n	8008808 <ISM330DHCX_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != ISM330DHCX_OK)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4798      	blx	r3
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d003      	beq.n	80087da <ISM330DHCX_RegisterBusIO+0x92>
    {
      ret = ISM330DHCX_ERROR;
 80087d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80087d6:	60fb      	str	r3, [r7, #12]
 80087d8:	e016      	b.n	8008808 <ISM330DHCX_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == ISM330DHCX_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	689b      	ldr	r3, [r3, #8]
 80087de:	2b02      	cmp	r3, #2
 80087e0:	d112      	bne.n	8008808 <ISM330DHCX_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d10d      	bne.n	8008808 <ISM330DHCX_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80087ec:	230c      	movs	r3, #12
 80087ee:	72fb      	strb	r3, [r7, #11]

          if (ISM330DHCX_Write_Reg(pObj, ISM330DHCX_CTRL3_C, data) != ISM330DHCX_OK)
 80087f0:	7afb      	ldrb	r3, [r7, #11]
 80087f2:	461a      	mov	r2, r3
 80087f4:	2112      	movs	r1, #18
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 fd73 	bl	80092e2 <ISM330DHCX_Write_Reg>
 80087fc:	4603      	mov	r3, r0
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d002      	beq.n	8008808 <ISM330DHCX_RegisterBusIO+0xc0>
          {
            ret = ISM330DHCX_ERROR;
 8008802:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008806:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8008808:	68fb      	ldr	r3, [r7, #12]
}
 800880a:	4618      	mov	r0, r3
 800880c:	3710      	adds	r7, #16
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop
 8008814:	08009751 	.word	0x08009751
 8008818:	08009787 	.word	0x08009787

0800881c <ISM330DHCX_Init>:
  * @brief  Initialize the ISM330DHCX sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_Init(ISM330DHCX_Object_t *pObj)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  /* Set DEVICE_CONF bit */
  if (ism330dhcx_device_conf_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	3320      	adds	r3, #32
 8008828:	2101      	movs	r1, #1
 800882a:	4618      	mov	r0, r3
 800882c:	f001 fd2a 	bl	800a284 <ism330dhcx_device_conf_set>
 8008830:	4603      	mov	r3, r0
 8008832:	2b00      	cmp	r3, #0
 8008834:	d002      	beq.n	800883c <ISM330DHCX_Init+0x20>
  {
    return ISM330DHCX_ERROR;
 8008836:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800883a:	e078      	b.n	800892e <ISM330DHCX_Init+0x112>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	3320      	adds	r3, #32
 8008840:	2101      	movs	r1, #1
 8008842:	4618      	mov	r0, r3
 8008844:	f001 fda1 	bl	800a38a <ism330dhcx_auto_increment_set>
 8008848:	4603      	mov	r3, r0
 800884a:	2b00      	cmp	r3, #0
 800884c:	d002      	beq.n	8008854 <ISM330DHCX_Init+0x38>
  {
    return ISM330DHCX_ERROR;
 800884e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008852:	e06c      	b.n	800892e <ISM330DHCX_Init+0x112>
  }

  /* SW reset */
  if (ism330dhcx_reset_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	3320      	adds	r3, #32
 8008858:	2101      	movs	r1, #1
 800885a:	4618      	mov	r0, r3
 800885c:	f001 fd6f 	bl	800a33e <ism330dhcx_reset_set>
 8008860:	4603      	mov	r3, r0
 8008862:	2b00      	cmp	r3, #0
 8008864:	d002      	beq.n	800886c <ISM330DHCX_Init+0x50>
  {
    return ISM330DHCX_ERROR;
 8008866:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800886a:	e060      	b.n	800892e <ISM330DHCX_Init+0x112>
  }

  /* Enable register address automatically incremented during a multiple byte
     access with a serial interface. */
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	3320      	adds	r3, #32
 8008870:	2101      	movs	r1, #1
 8008872:	4618      	mov	r0, r3
 8008874:	f001 fd89 	bl	800a38a <ism330dhcx_auto_increment_set>
 8008878:	4603      	mov	r3, r0
 800887a:	2b00      	cmp	r3, #0
 800887c:	d002      	beq.n	8008884 <ISM330DHCX_Init+0x68>
  {
    return ISM330DHCX_ERROR;
 800887e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008882:	e054      	b.n	800892e <ISM330DHCX_Init+0x112>
  }

  /* Enable BDU */
  if (ism330dhcx_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	3320      	adds	r3, #32
 8008888:	2101      	movs	r1, #1
 800888a:	4618      	mov	r0, r3
 800888c:	f001 fc3e 	bl	800a10c <ism330dhcx_block_data_update_set>
 8008890:	4603      	mov	r3, r0
 8008892:	2b00      	cmp	r3, #0
 8008894:	d002      	beq.n	800889c <ISM330DHCX_Init+0x80>
  {
    return ISM330DHCX_ERROR;
 8008896:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800889a:	e048      	b.n	800892e <ISM330DHCX_Init+0x112>
  }

  /* FIFO mode selection */
  if (ism330dhcx_fifo_mode_set(&(pObj->Ctx), ISM330DHCX_BYPASS_MODE) != ISM330DHCX_OK)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	3320      	adds	r3, #32
 80088a0:	2100      	movs	r1, #0
 80088a2:	4618      	mov	r0, r3
 80088a4:	f001 fd97 	bl	800a3d6 <ism330dhcx_fifo_mode_set>
 80088a8:	4603      	mov	r3, r0
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d002      	beq.n	80088b4 <ISM330DHCX_Init+0x98>
  {
    return ISM330DHCX_ERROR;
 80088ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80088b2:	e03c      	b.n	800892e <ISM330DHCX_Init+0x112>
  }

  /* Select default output data rate. */
  pObj->acc_odr = ISM330DHCX_XL_ODR_104Hz;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2204      	movs	r2, #4
 80088b8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	3320      	adds	r3, #32
 80088c0:	2100      	movs	r1, #0
 80088c2:	4618      	mov	r0, r3
 80088c4:	f001 f808 	bl	80098d8 <ism330dhcx_xl_data_rate_set>
 80088c8:	4603      	mov	r3, r0
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d002      	beq.n	80088d4 <ISM330DHCX_Init+0xb8>
  {
    return ISM330DHCX_ERROR;
 80088ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80088d2:	e02c      	b.n	800892e <ISM330DHCX_Init+0x112>
  }

  /* Full scale selection. */
  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), ISM330DHCX_2g) != ISM330DHCX_OK)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	3320      	adds	r3, #32
 80088d8:	2100      	movs	r1, #0
 80088da:	4618      	mov	r0, r3
 80088dc:	f000 ff9e 	bl	800981c <ism330dhcx_xl_full_scale_set>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d002      	beq.n	80088ec <ISM330DHCX_Init+0xd0>
  {
    return ISM330DHCX_ERROR;
 80088e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80088ea:	e020      	b.n	800892e <ISM330DHCX_Init+0x112>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = ISM330DHCX_GY_ODR_104Hz;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2204      	movs	r2, #4
 80088f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	3320      	adds	r3, #32
 80088f8:	2100      	movs	r1, #0
 80088fa:	4618      	mov	r0, r3
 80088fc:	f001 fa38 	bl	8009d70 <ism330dhcx_gy_data_rate_set>
 8008900:	4603      	mov	r3, r0
 8008902:	2b00      	cmp	r3, #0
 8008904:	d002      	beq.n	800890c <ISM330DHCX_Init+0xf0>
  {
    return ISM330DHCX_ERROR;
 8008906:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800890a:	e010      	b.n	800892e <ISM330DHCX_Init+0x112>
  }

  /* Full scale selection. */
  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), ISM330DHCX_2000dps) != ISM330DHCX_OK)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	3320      	adds	r3, #32
 8008910:	210c      	movs	r1, #12
 8008912:	4618      	mov	r0, r3
 8008914:	f001 f9b4 	bl	8009c80 <ism330dhcx_gy_full_scale_set>
 8008918:	4603      	mov	r3, r0
 800891a:	2b00      	cmp	r3, #0
 800891c:	d002      	beq.n	8008924 <ISM330DHCX_Init+0x108>
  {
    return ISM330DHCX_ERROR;
 800891e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008922:	e004      	b.n	800892e <ISM330DHCX_Init+0x112>
  }

  pObj->is_initialized = 1;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2201      	movs	r2, #1
 8008928:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return ISM330DHCX_OK;
 800892c:	2300      	movs	r3, #0
}
 800892e:	4618      	mov	r0, r3
 8008930:	3708      	adds	r7, #8
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}

08008936 <ISM330DHCX_DeInit>:
  * @brief  Deinitialize the ISM330DHCX sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_DeInit(ISM330DHCX_Object_t *pObj)
{
 8008936:	b580      	push	{r7, lr}
 8008938:	b082      	sub	sp, #8
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (ISM330DHCX_ACC_Disable(pObj) != ISM330DHCX_OK)
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 f888 	bl	8008a54 <ISM330DHCX_ACC_Disable>
 8008944:	4603      	mov	r3, r0
 8008946:	2b00      	cmp	r3, #0
 8008948:	d002      	beq.n	8008950 <ISM330DHCX_DeInit+0x1a>
  {
    return ISM330DHCX_ERROR;
 800894a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800894e:	e015      	b.n	800897c <ISM330DHCX_DeInit+0x46>
  }

  if (ISM330DHCX_GYRO_Disable(pObj) != ISM330DHCX_OK)
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f000 fa92 	bl	8008e7a <ISM330DHCX_GYRO_Disable>
 8008956:	4603      	mov	r3, r0
 8008958:	2b00      	cmp	r3, #0
 800895a:	d002      	beq.n	8008962 <ISM330DHCX_DeInit+0x2c>
  {
    return ISM330DHCX_ERROR;
 800895c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008960:	e00c      	b.n	800897c <ISM330DHCX_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = ISM330DHCX_XL_ODR_OFF;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2200      	movs	r2, #0
 8008966:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  pObj->gyro_odr = ISM330DHCX_GY_ODR_OFF;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2200      	movs	r2, #0
 800896e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  pObj->is_initialized = 0;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2200      	movs	r2, #0
 8008976:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return ISM330DHCX_OK;
 800897a:	2300      	movs	r3, #0
}
 800897c:	4618      	mov	r0, r3
 800897e:	3708      	adds	r7, #8
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <ISM330DHCX_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ReadID(ISM330DHCX_Object_t *pObj, uint8_t *Id)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]
  if (ism330dhcx_device_id_get(&(pObj->Ctx), Id) != ISM330DHCX_OK)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	3320      	adds	r3, #32
 8008992:	6839      	ldr	r1, [r7, #0]
 8008994:	4618      	mov	r0, r3
 8008996:	f001 fcc1 	bl	800a31c <ism330dhcx_device_id_get>
 800899a:	4603      	mov	r3, r0
 800899c:	2b00      	cmp	r3, #0
 800899e:	d002      	beq.n	80089a6 <ISM330DHCX_ReadID+0x22>
  {
    return ISM330DHCX_ERROR;
 80089a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80089a4:	e000      	b.n	80089a8 <ISM330DHCX_ReadID+0x24>
  }

  return ISM330DHCX_OK;
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3708      	adds	r7, #8
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <ISM330DHCX_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to ISM330DHCX sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GetCapabilities(ISM330DHCX_Object_t *pObj, ISM330DHCX_Capabilities_t *Capabilities)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b083      	sub	sp, #12
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	2201      	movs	r2, #1
 80089be:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	2201      	movs	r2, #1
 80089c4:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	2200      	movs	r2, #0
 80089ca:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	2200      	movs	r2, #0
 80089d0:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 4000;
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80089d8:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	2210      	movs	r2, #16
 80089de:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	2200      	movs	r2, #0
 80089e4:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6667.0f;
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	4a07      	ldr	r2, [pc, #28]	; (8008a08 <ISM330DHCX_GetCapabilities+0x58>)
 80089ea:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6667.0f;
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	4a06      	ldr	r2, [pc, #24]	; (8008a08 <ISM330DHCX_GetCapabilities+0x58>)
 80089f0:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	f04f 0200 	mov.w	r2, #0
 80089f8:	619a      	str	r2, [r3, #24]
  return ISM330DHCX_OK;
 80089fa:	2300      	movs	r3, #0
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	370c      	adds	r7, #12
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr
 8008a08:	45d05800 	.word	0x45d05800

08008a0c <ISM330DHCX_ACC_Enable>:
  * @brief  Enable the ISM330DHCX accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_Enable(ISM330DHCX_Object_t *pObj)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008a1a:	2b01      	cmp	r3, #1
 8008a1c:	d101      	bne.n	8008a22 <ISM330DHCX_ACC_Enable+0x16>
  {
    return ISM330DHCX_OK;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	e014      	b.n	8008a4c <ISM330DHCX_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != ISM330DHCX_OK)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f103 0220 	add.w	r2, r3, #32
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8008a2e:	4619      	mov	r1, r3
 8008a30:	4610      	mov	r0, r2
 8008a32:	f000 ff51 	bl	80098d8 <ism330dhcx_xl_data_rate_set>
 8008a36:	4603      	mov	r3, r0
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d002      	beq.n	8008a42 <ISM330DHCX_ACC_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 8008a3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a40:	e004      	b.n	8008a4c <ISM330DHCX_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2201      	movs	r2, #1
 8008a46:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return ISM330DHCX_OK;
 8008a4a:	2300      	movs	r3, #0
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3708      	adds	r7, #8
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <ISM330DHCX_ACC_Disable>:
  * @brief  Disable the ISM330DHCX accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_Disable(ISM330DHCX_Object_t *pObj)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b082      	sub	sp, #8
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d101      	bne.n	8008a6a <ISM330DHCX_ACC_Disable+0x16>
  {
    return ISM330DHCX_OK;
 8008a66:	2300      	movs	r3, #0
 8008a68:	e01f      	b.n	8008aaa <ISM330DHCX_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != ISM330DHCX_OK)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f103 0220 	add.w	r2, r3, #32
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	3333      	adds	r3, #51	; 0x33
 8008a74:	4619      	mov	r1, r3
 8008a76:	4610      	mov	r0, r2
 8008a78:	f001 f89a 	bl	8009bb0 <ism330dhcx_xl_data_rate_get>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d002      	beq.n	8008a88 <ISM330DHCX_ACC_Disable+0x34>
  {
    return ISM330DHCX_ERROR;
 8008a82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a86:	e010      	b.n	8008aaa <ISM330DHCX_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	3320      	adds	r3, #32
 8008a8c:	2100      	movs	r1, #0
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f000 ff22 	bl	80098d8 <ism330dhcx_xl_data_rate_set>
 8008a94:	4603      	mov	r3, r0
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d002      	beq.n	8008aa0 <ISM330DHCX_ACC_Disable+0x4c>
  {
    return ISM330DHCX_ERROR;
 8008a9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a9e:	e004      	b.n	8008aaa <ISM330DHCX_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return ISM330DHCX_OK;
 8008aa8:	2300      	movs	r3, #0
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3708      	adds	r7, #8
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
	...

08008ab4 <ISM330DHCX_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b084      	sub	sp, #16
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	3320      	adds	r3, #32
 8008ac6:	f107 020b 	add.w	r2, r7, #11
 8008aca:	4611      	mov	r1, r2
 8008acc:	4618      	mov	r0, r3
 8008ace:	f000 fecb 	bl	8009868 <ism330dhcx_xl_full_scale_get>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d002      	beq.n	8008ade <ISM330DHCX_ACC_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 8008ad8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008adc:	e023      	b.n	8008b26 <ISM330DHCX_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8008ade:	7afb      	ldrb	r3, [r7, #11]
 8008ae0:	2b03      	cmp	r3, #3
 8008ae2:	d81b      	bhi.n	8008b1c <ISM330DHCX_ACC_GetSensitivity+0x68>
 8008ae4:	a201      	add	r2, pc, #4	; (adr r2, 8008aec <ISM330DHCX_ACC_GetSensitivity+0x38>)
 8008ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aea:	bf00      	nop
 8008aec:	08008afd 	.word	0x08008afd
 8008af0:	08008b15 	.word	0x08008b15
 8008af4:	08008b05 	.word	0x08008b05
 8008af8:	08008b0d 	.word	0x08008b0d
  {
    case ISM330DHCX_2g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_2G;
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	4a0c      	ldr	r2, [pc, #48]	; (8008b30 <ISM330DHCX_ACC_GetSensitivity+0x7c>)
 8008b00:	601a      	str	r2, [r3, #0]
      break;
 8008b02:	e00f      	b.n	8008b24 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_4g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_4G;
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	4a0b      	ldr	r2, [pc, #44]	; (8008b34 <ISM330DHCX_ACC_GetSensitivity+0x80>)
 8008b08:	601a      	str	r2, [r3, #0]
      break;
 8008b0a:	e00b      	b.n	8008b24 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_8g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_8G;
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	4a0a      	ldr	r2, [pc, #40]	; (8008b38 <ISM330DHCX_ACC_GetSensitivity+0x84>)
 8008b10:	601a      	str	r2, [r3, #0]
      break;
 8008b12:	e007      	b.n	8008b24 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_16g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_16G;
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	4a09      	ldr	r2, [pc, #36]	; (8008b3c <ISM330DHCX_ACC_GetSensitivity+0x88>)
 8008b18:	601a      	str	r2, [r3, #0]
      break;
 8008b1a:	e003      	b.n	8008b24 <ISM330DHCX_ACC_GetSensitivity+0x70>

    default:
      ret = ISM330DHCX_ERROR;
 8008b1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b20:	60fb      	str	r3, [r7, #12]
      break;
 8008b22:	bf00      	nop
  }

  return ret;
 8008b24:	68fb      	ldr	r3, [r7, #12]
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3710      	adds	r7, #16
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	3d79db23 	.word	0x3d79db23
 8008b34:	3df9db23 	.word	0x3df9db23
 8008b38:	3e79db23 	.word	0x3e79db23
 8008b3c:	3ef9db23 	.word	0x3ef9db23

08008b40 <ISM330DHCX_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetOutputDataRate(ISM330DHCX_Object_t *pObj, float *Odr)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	60fb      	str	r3, [r7, #12]
  ism330dhcx_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	3320      	adds	r3, #32
 8008b52:	f107 020b 	add.w	r2, r7, #11
 8008b56:	4611      	mov	r1, r2
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f001 f829 	bl	8009bb0 <ism330dhcx_xl_data_rate_get>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d002      	beq.n	8008b6a <ISM330DHCX_ACC_GetOutputDataRate+0x2a>
  {
    return ISM330DHCX_ERROR;
 8008b64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b68:	e04e      	b.n	8008c08 <ISM330DHCX_ACC_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8008b6a:	7afb      	ldrb	r3, [r7, #11]
 8008b6c:	2b0a      	cmp	r3, #10
 8008b6e:	d846      	bhi.n	8008bfe <ISM330DHCX_ACC_GetOutputDataRate+0xbe>
 8008b70:	a201      	add	r2, pc, #4	; (adr r2, 8008b78 <ISM330DHCX_ACC_GetOutputDataRate+0x38>)
 8008b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b76:	bf00      	nop
 8008b78:	08008ba5 	.word	0x08008ba5
 8008b7c:	08008baf 	.word	0x08008baf
 8008b80:	08008bb7 	.word	0x08008bb7
 8008b84:	08008bbf 	.word	0x08008bbf
 8008b88:	08008bc7 	.word	0x08008bc7
 8008b8c:	08008bcf 	.word	0x08008bcf
 8008b90:	08008bd7 	.word	0x08008bd7
 8008b94:	08008bdf 	.word	0x08008bdf
 8008b98:	08008be7 	.word	0x08008be7
 8008b9c:	08008bef 	.word	0x08008bef
 8008ba0:	08008bf7 	.word	0x08008bf7
  {
    case ISM330DHCX_XL_ODR_OFF:
      *Odr = 0.0f;
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	f04f 0200 	mov.w	r2, #0
 8008baa:	601a      	str	r2, [r3, #0]
      break;
 8008bac:	e02b      	b.n	8008c06 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	4a17      	ldr	r2, [pc, #92]	; (8008c10 <ISM330DHCX_ACC_GetOutputDataRate+0xd0>)
 8008bb2:	601a      	str	r2, [r3, #0]
      break;
 8008bb4:	e027      	b.n	8008c06 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_26Hz:
      *Odr = 26.0f;
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	4a16      	ldr	r2, [pc, #88]	; (8008c14 <ISM330DHCX_ACC_GetOutputDataRate+0xd4>)
 8008bba:	601a      	str	r2, [r3, #0]
      break;
 8008bbc:	e023      	b.n	8008c06 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_52Hz:
      *Odr = 52.0f;
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	4a15      	ldr	r2, [pc, #84]	; (8008c18 <ISM330DHCX_ACC_GetOutputDataRate+0xd8>)
 8008bc2:	601a      	str	r2, [r3, #0]
      break;
 8008bc4:	e01f      	b.n	8008c06 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_104Hz:
      *Odr = 104.0f;
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	4a14      	ldr	r2, [pc, #80]	; (8008c1c <ISM330DHCX_ACC_GetOutputDataRate+0xdc>)
 8008bca:	601a      	str	r2, [r3, #0]
      break;
 8008bcc:	e01b      	b.n	8008c06 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_208Hz:
      *Odr = 208.0f;
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	4a13      	ldr	r2, [pc, #76]	; (8008c20 <ISM330DHCX_ACC_GetOutputDataRate+0xe0>)
 8008bd2:	601a      	str	r2, [r3, #0]
      break;
 8008bd4:	e017      	b.n	8008c06 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_416Hz:
      *Odr = 416.0f;
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	4a12      	ldr	r2, [pc, #72]	; (8008c24 <ISM330DHCX_ACC_GetOutputDataRate+0xe4>)
 8008bda:	601a      	str	r2, [r3, #0]
      break;
 8008bdc:	e013      	b.n	8008c06 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_833Hz:
      *Odr = 833.0f;
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	4a11      	ldr	r2, [pc, #68]	; (8008c28 <ISM330DHCX_ACC_GetOutputDataRate+0xe8>)
 8008be2:	601a      	str	r2, [r3, #0]
      break;
 8008be4:	e00f      	b.n	8008c06 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_1666Hz:
      *Odr = 1666.0f;
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	4a10      	ldr	r2, [pc, #64]	; (8008c2c <ISM330DHCX_ACC_GetOutputDataRate+0xec>)
 8008bea:	601a      	str	r2, [r3, #0]
      break;
 8008bec:	e00b      	b.n	8008c06 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_3332Hz:
      *Odr = 3332.0f;
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	4a0f      	ldr	r2, [pc, #60]	; (8008c30 <ISM330DHCX_ACC_GetOutputDataRate+0xf0>)
 8008bf2:	601a      	str	r2, [r3, #0]
      break;
 8008bf4:	e007      	b.n	8008c06 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	4a0e      	ldr	r2, [pc, #56]	; (8008c34 <ISM330DHCX_ACC_GetOutputDataRate+0xf4>)
 8008bfa:	601a      	str	r2, [r3, #0]
      break;
 8008bfc:	e003      	b.n	8008c06 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    default:
      ret = ISM330DHCX_ERROR;
 8008bfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c02:	60fb      	str	r3, [r7, #12]
      break;
 8008c04:	bf00      	nop
  }

  return ret;
 8008c06:	68fb      	ldr	r3, [r7, #12]
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3710      	adds	r7, #16
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}
 8008c10:	41480000 	.word	0x41480000
 8008c14:	41d00000 	.word	0x41d00000
 8008c18:	42500000 	.word	0x42500000
 8008c1c:	42d00000 	.word	0x42d00000
 8008c20:	43500000 	.word	0x43500000
 8008c24:	43d00000 	.word	0x43d00000
 8008c28:	44504000 	.word	0x44504000
 8008c2c:	44d04000 	.word	0x44d04000
 8008c30:	45504000 	.word	0x45504000
 8008c34:	45d05800 	.word	0x45d05800

08008c38 <ISM330DHCX_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	d106      	bne.n	8008c5c <ISM330DHCX_ACC_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8008c4e:	ed97 0a00 	vldr	s0, [r7]
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 fb60 	bl	8009318 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	e005      	b.n	8008c68 <ISM330DHCX_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8008c5c:	ed97 0a00 	vldr	s0, [r7]
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 fbe5 	bl	8009430 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>
 8008c66:	4603      	mov	r3, r0
  }
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3708      	adds	r7, #8
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <ISM330DHCX_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetFullScale(ISM330DHCX_Object_t *pObj, int32_t *FullScale)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b084      	sub	sp, #16
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	3320      	adds	r3, #32
 8008c82:	f107 020b 	add.w	r2, r7, #11
 8008c86:	4611      	mov	r1, r2
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f000 fded 	bl	8009868 <ism330dhcx_xl_full_scale_get>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d002      	beq.n	8008c9a <ISM330DHCX_ACC_GetFullScale+0x2a>
  {
    return ISM330DHCX_ERROR;
 8008c94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c98:	e023      	b.n	8008ce2 <ISM330DHCX_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8008c9a:	7afb      	ldrb	r3, [r7, #11]
 8008c9c:	2b03      	cmp	r3, #3
 8008c9e:	d81b      	bhi.n	8008cd8 <ISM330DHCX_ACC_GetFullScale+0x68>
 8008ca0:	a201      	add	r2, pc, #4	; (adr r2, 8008ca8 <ISM330DHCX_ACC_GetFullScale+0x38>)
 8008ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ca6:	bf00      	nop
 8008ca8:	08008cb9 	.word	0x08008cb9
 8008cac:	08008cd1 	.word	0x08008cd1
 8008cb0:	08008cc1 	.word	0x08008cc1
 8008cb4:	08008cc9 	.word	0x08008cc9
  {
    case ISM330DHCX_2g:
      *FullScale =  2;
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	2202      	movs	r2, #2
 8008cbc:	601a      	str	r2, [r3, #0]
      break;
 8008cbe:	e00f      	b.n	8008ce0 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_4g:
      *FullScale =  4;
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	2204      	movs	r2, #4
 8008cc4:	601a      	str	r2, [r3, #0]
      break;
 8008cc6:	e00b      	b.n	8008ce0 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_8g:
      *FullScale =  8;
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	2208      	movs	r2, #8
 8008ccc:	601a      	str	r2, [r3, #0]
      break;
 8008cce:	e007      	b.n	8008ce0 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_16g:
      *FullScale = 16;
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	2210      	movs	r2, #16
 8008cd4:	601a      	str	r2, [r3, #0]
      break;
 8008cd6:	e003      	b.n	8008ce0 <ISM330DHCX_ACC_GetFullScale+0x70>

    default:
      ret = ISM330DHCX_ERROR;
 8008cd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008cdc:	60fb      	str	r3, [r7, #12]
      break;
 8008cde:	bf00      	nop
  }

  return ret;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3710      	adds	r7, #16
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop

08008cec <ISM330DHCX_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
           : (FullScale <= 4) ? ISM330DHCX_4g
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	2b02      	cmp	r3, #2
 8008cfa:	dd0b      	ble.n	8008d14 <ISM330DHCX_ACC_SetFullScale+0x28>
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	2b04      	cmp	r3, #4
 8008d00:	dd06      	ble.n	8008d10 <ISM330DHCX_ACC_SetFullScale+0x24>
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	2b08      	cmp	r3, #8
 8008d06:	dc01      	bgt.n	8008d0c <ISM330DHCX_ACC_SetFullScale+0x20>
 8008d08:	2303      	movs	r3, #3
 8008d0a:	e004      	b.n	8008d16 <ISM330DHCX_ACC_SetFullScale+0x2a>
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	e002      	b.n	8008d16 <ISM330DHCX_ACC_SetFullScale+0x2a>
 8008d10:	2302      	movs	r3, #2
 8008d12:	e000      	b.n	8008d16 <ISM330DHCX_ACC_SetFullScale+0x2a>
 8008d14:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
 8008d16:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? ISM330DHCX_8g
           :                    ISM330DHCX_16g;

  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	3320      	adds	r3, #32
 8008d1c:	7bfa      	ldrb	r2, [r7, #15]
 8008d1e:	4611      	mov	r1, r2
 8008d20:	4618      	mov	r0, r3
 8008d22:	f000 fd7b 	bl	800981c <ism330dhcx_xl_full_scale_set>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d002      	beq.n	8008d32 <ISM330DHCX_ACC_SetFullScale+0x46>
  {
    return ISM330DHCX_ERROR;
 8008d2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d30:	e000      	b.n	8008d34 <ISM330DHCX_ACC_SetFullScale+0x48>
  }

  return ISM330DHCX_OK;
 8008d32:	2300      	movs	r3, #0
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3710      	adds	r7, #16
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <ISM330DHCX_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetAxesRaw(ISM330DHCX_Object_t *pObj, ISM330DHCX_AxesRaw_t *Value)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b084      	sub	sp, #16
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	3320      	adds	r3, #32
 8008d4a:	f107 0208 	add.w	r2, r7, #8
 8008d4e:	4611      	mov	r1, r2
 8008d50:	4618      	mov	r0, r3
 8008d52:	f001 fa4c 	bl	800a1ee <ism330dhcx_acceleration_raw_get>
 8008d56:	4603      	mov	r3, r0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d002      	beq.n	8008d62 <ISM330DHCX_ACC_GetAxesRaw+0x26>
  {
    return ISM330DHCX_ERROR;
 8008d5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d60:	e00c      	b.n	8008d7c <ISM330DHCX_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8008d62:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8008d6a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8008d72:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	809a      	strh	r2, [r3, #4]

  return ISM330DHCX_OK;
 8008d7a:	2300      	movs	r3, #0
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3710      	adds	r7, #16
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <ISM330DHCX_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *Acceleration)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b086      	sub	sp, #24
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8008d8e:	f04f 0300 	mov.w	r3, #0
 8008d92:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	3320      	adds	r3, #32
 8008d98:	f107 0210 	add.w	r2, r7, #16
 8008d9c:	4611      	mov	r1, r2
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f001 fa25 	bl	800a1ee <ism330dhcx_acceleration_raw_get>
 8008da4:	4603      	mov	r3, r0
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d002      	beq.n	8008db0 <ISM330DHCX_ACC_GetAxes+0x2c>
  {
    return ISM330DHCX_ERROR;
 8008daa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008dae:	e03c      	b.n	8008e2a <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_ACC_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 8008db0:	f107 030c 	add.w	r3, r7, #12
 8008db4:	4619      	mov	r1, r3
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f7ff fe7c 	bl	8008ab4 <ISM330DHCX_ACC_GetSensitivity>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d002      	beq.n	8008dc8 <ISM330DHCX_ACC_GetAxes+0x44>
  {
    return ISM330DHCX_ERROR;
 8008dc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008dc6:	e030      	b.n	8008e2a <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8008dc8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008dcc:	ee07 3a90 	vmov	s15, r3
 8008dd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008dd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8008dd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ddc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008de0:	ee17 2a90 	vmov	r2, s15
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8008de8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008dec:	ee07 3a90 	vmov	s15, r3
 8008df0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008df4:	edd7 7a03 	vldr	s15, [r7, #12]
 8008df8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008e00:	ee17 2a90 	vmov	r2, s15
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8008e08:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008e0c:	ee07 3a90 	vmov	s15, r3
 8008e10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008e14:	edd7 7a03 	vldr	s15, [r7, #12]
 8008e18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008e20:	ee17 2a90 	vmov	r2, s15
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 8008e28:	2300      	movs	r3, #0
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3718      	adds	r7, #24
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <ISM330DHCX_GYRO_Enable>:
  * @brief  Enable the ISM330DHCX gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_Enable(ISM330DHCX_Object_t *pObj)
{
 8008e32:	b580      	push	{r7, lr}
 8008e34:	b082      	sub	sp, #8
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d101      	bne.n	8008e48 <ISM330DHCX_GYRO_Enable+0x16>
  {
    return ISM330DHCX_OK;
 8008e44:	2300      	movs	r3, #0
 8008e46:	e014      	b.n	8008e72 <ISM330DHCX_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != ISM330DHCX_OK)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f103 0220 	add.w	r2, r3, #32
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008e54:	4619      	mov	r1, r3
 8008e56:	4610      	mov	r0, r2
 8008e58:	f000 ff8a 	bl	8009d70 <ism330dhcx_gy_data_rate_set>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d002      	beq.n	8008e68 <ISM330DHCX_GYRO_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 8008e62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e66:	e004      	b.n	8008e72 <ISM330DHCX_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return ISM330DHCX_OK;
 8008e70:	2300      	movs	r3, #0
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3708      	adds	r7, #8
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}

08008e7a <ISM330DHCX_GYRO_Disable>:
  * @brief  Disable the ISM330DHCX gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_Disable(ISM330DHCX_Object_t *pObj)
{
 8008e7a:	b580      	push	{r7, lr}
 8008e7c:	b082      	sub	sp, #8
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d101      	bne.n	8008e90 <ISM330DHCX_GYRO_Disable+0x16>
  {
    return ISM330DHCX_OK;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	e01f      	b.n	8008ed0 <ISM330DHCX_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != ISM330DHCX_OK)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f103 0220 	add.w	r2, r3, #32
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	3334      	adds	r3, #52	; 0x34
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	4610      	mov	r0, r2
 8008e9e:	f001 f8d3 	bl	800a048 <ism330dhcx_gy_data_rate_get>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d002      	beq.n	8008eae <ISM330DHCX_GYRO_Disable+0x34>
  {
    return ISM330DHCX_ERROR;
 8008ea8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008eac:	e010      	b.n	8008ed0 <ISM330DHCX_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	3320      	adds	r3, #32
 8008eb2:	2100      	movs	r1, #0
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f000 ff5b 	bl	8009d70 <ism330dhcx_gy_data_rate_set>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d002      	beq.n	8008ec6 <ISM330DHCX_GYRO_Disable+0x4c>
  {
    return ISM330DHCX_ERROR;
 8008ec0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ec4:	e004      	b.n	8008ed0 <ISM330DHCX_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return ISM330DHCX_OK;
 8008ece:	2300      	movs	r3, #0
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3708      	adds	r7, #8
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <ISM330DHCX_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b084      	sub	sp, #16
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	3320      	adds	r3, #32
 8008eea:	f107 020b 	add.w	r2, r7, #11
 8008eee:	4611      	mov	r1, r2
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f000 feeb 	bl	8009ccc <ism330dhcx_gy_full_scale_get>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d002      	beq.n	8008f02 <ISM330DHCX_GYRO_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 8008efc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f00:	e03d      	b.n	8008f7e <ISM330DHCX_GYRO_GetSensitivity+0xa6>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8008f02:	7afb      	ldrb	r3, [r7, #11]
 8008f04:	2b0c      	cmp	r3, #12
 8008f06:	d835      	bhi.n	8008f74 <ISM330DHCX_GYRO_GetSensitivity+0x9c>
 8008f08:	a201      	add	r2, pc, #4	; (adr r2, 8008f10 <ISM330DHCX_GYRO_GetSensitivity+0x38>)
 8008f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f0e:	bf00      	nop
 8008f10:	08008f4d 	.word	0x08008f4d
 8008f14:	08008f6d 	.word	0x08008f6d
 8008f18:	08008f45 	.word	0x08008f45
 8008f1c:	08008f75 	.word	0x08008f75
 8008f20:	08008f55 	.word	0x08008f55
 8008f24:	08008f75 	.word	0x08008f75
 8008f28:	08008f75 	.word	0x08008f75
 8008f2c:	08008f75 	.word	0x08008f75
 8008f30:	08008f5d 	.word	0x08008f5d
 8008f34:	08008f75 	.word	0x08008f75
 8008f38:	08008f75 	.word	0x08008f75
 8008f3c:	08008f75 	.word	0x08008f75
 8008f40:	08008f65 	.word	0x08008f65
  {
    case ISM330DHCX_125dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_125DPS;
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	4a10      	ldr	r2, [pc, #64]	; (8008f88 <ISM330DHCX_GYRO_GetSensitivity+0xb0>)
 8008f48:	601a      	str	r2, [r3, #0]
      break;
 8008f4a:	e017      	b.n	8008f7c <ISM330DHCX_GYRO_GetSensitivity+0xa4>

    case ISM330DHCX_250dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_250DPS;
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	4a0f      	ldr	r2, [pc, #60]	; (8008f8c <ISM330DHCX_GYRO_GetSensitivity+0xb4>)
 8008f50:	601a      	str	r2, [r3, #0]
      break;
 8008f52:	e013      	b.n	8008f7c <ISM330DHCX_GYRO_GetSensitivity+0xa4>

    case ISM330DHCX_500dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_500DPS;
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	4a0e      	ldr	r2, [pc, #56]	; (8008f90 <ISM330DHCX_GYRO_GetSensitivity+0xb8>)
 8008f58:	601a      	str	r2, [r3, #0]
      break;
 8008f5a:	e00f      	b.n	8008f7c <ISM330DHCX_GYRO_GetSensitivity+0xa4>

    case ISM330DHCX_1000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_1000DPS;
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	4a0d      	ldr	r2, [pc, #52]	; (8008f94 <ISM330DHCX_GYRO_GetSensitivity+0xbc>)
 8008f60:	601a      	str	r2, [r3, #0]
      break;
 8008f62:	e00b      	b.n	8008f7c <ISM330DHCX_GYRO_GetSensitivity+0xa4>

    case ISM330DHCX_2000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_2000DPS;
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	4a0c      	ldr	r2, [pc, #48]	; (8008f98 <ISM330DHCX_GYRO_GetSensitivity+0xc0>)
 8008f68:	601a      	str	r2, [r3, #0]
      break;
 8008f6a:	e007      	b.n	8008f7c <ISM330DHCX_GYRO_GetSensitivity+0xa4>

    case ISM330DHCX_4000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_4000DPS;
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	4a0b      	ldr	r2, [pc, #44]	; (8008f9c <ISM330DHCX_GYRO_GetSensitivity+0xc4>)
 8008f70:	601a      	str	r2, [r3, #0]
      break;
 8008f72:	e003      	b.n	8008f7c <ISM330DHCX_GYRO_GetSensitivity+0xa4>

    default:
      ret = ISM330DHCX_ERROR;
 8008f74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f78:	60fb      	str	r3, [r7, #12]
      break;
 8008f7a:	bf00      	nop
  }

  return ret;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3710      	adds	r7, #16
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	408c0000 	.word	0x408c0000
 8008f8c:	410c0000 	.word	0x410c0000
 8008f90:	418c0000 	.word	0x418c0000
 8008f94:	420c0000 	.word	0x420c0000
 8008f98:	428c0000 	.word	0x428c0000
 8008f9c:	430c0000 	.word	0x430c0000

08008fa0 <ISM330DHCX_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetOutputDataRate(ISM330DHCX_Object_t *pObj, float *Odr)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b084      	sub	sp, #16
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8008faa:	2300      	movs	r3, #0
 8008fac:	60fb      	str	r3, [r7, #12]
  ism330dhcx_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	3320      	adds	r3, #32
 8008fb2:	f107 020b 	add.w	r2, r7, #11
 8008fb6:	4611      	mov	r1, r2
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f001 f845 	bl	800a048 <ism330dhcx_gy_data_rate_get>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d002      	beq.n	8008fca <ISM330DHCX_GYRO_GetOutputDataRate+0x2a>
  {
    return ISM330DHCX_ERROR;
 8008fc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008fc8:	e04e      	b.n	8009068 <ISM330DHCX_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8008fca:	7afb      	ldrb	r3, [r7, #11]
 8008fcc:	2b0a      	cmp	r3, #10
 8008fce:	d846      	bhi.n	800905e <ISM330DHCX_GYRO_GetOutputDataRate+0xbe>
 8008fd0:	a201      	add	r2, pc, #4	; (adr r2, 8008fd8 <ISM330DHCX_GYRO_GetOutputDataRate+0x38>)
 8008fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fd6:	bf00      	nop
 8008fd8:	08009005 	.word	0x08009005
 8008fdc:	0800900f 	.word	0x0800900f
 8008fe0:	08009017 	.word	0x08009017
 8008fe4:	0800901f 	.word	0x0800901f
 8008fe8:	08009027 	.word	0x08009027
 8008fec:	0800902f 	.word	0x0800902f
 8008ff0:	08009037 	.word	0x08009037
 8008ff4:	0800903f 	.word	0x0800903f
 8008ff8:	08009047 	.word	0x08009047
 8008ffc:	0800904f 	.word	0x0800904f
 8009000:	08009057 	.word	0x08009057
  {
    case ISM330DHCX_GY_ODR_OFF:
      *Odr = 0.0f;
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	f04f 0200 	mov.w	r2, #0
 800900a:	601a      	str	r2, [r3, #0]
      break;
 800900c:	e02b      	b.n	8009066 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_12Hz5:
      *Odr = 12.5f;
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	4a17      	ldr	r2, [pc, #92]	; (8009070 <ISM330DHCX_GYRO_GetOutputDataRate+0xd0>)
 8009012:	601a      	str	r2, [r3, #0]
      break;
 8009014:	e027      	b.n	8009066 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_26Hz:
      *Odr = 26.0f;
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	4a16      	ldr	r2, [pc, #88]	; (8009074 <ISM330DHCX_GYRO_GetOutputDataRate+0xd4>)
 800901a:	601a      	str	r2, [r3, #0]
      break;
 800901c:	e023      	b.n	8009066 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_52Hz:
      *Odr = 52.0f;
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	4a15      	ldr	r2, [pc, #84]	; (8009078 <ISM330DHCX_GYRO_GetOutputDataRate+0xd8>)
 8009022:	601a      	str	r2, [r3, #0]
      break;
 8009024:	e01f      	b.n	8009066 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_104Hz:
      *Odr = 104.0f;
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	4a14      	ldr	r2, [pc, #80]	; (800907c <ISM330DHCX_GYRO_GetOutputDataRate+0xdc>)
 800902a:	601a      	str	r2, [r3, #0]
      break;
 800902c:	e01b      	b.n	8009066 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_208Hz:
      *Odr = 208.0f;
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	4a13      	ldr	r2, [pc, #76]	; (8009080 <ISM330DHCX_GYRO_GetOutputDataRate+0xe0>)
 8009032:	601a      	str	r2, [r3, #0]
      break;
 8009034:	e017      	b.n	8009066 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_416Hz:
      *Odr = 416.0f;
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	4a12      	ldr	r2, [pc, #72]	; (8009084 <ISM330DHCX_GYRO_GetOutputDataRate+0xe4>)
 800903a:	601a      	str	r2, [r3, #0]
      break;
 800903c:	e013      	b.n	8009066 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_833Hz:
      *Odr = 833.0f;
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	4a11      	ldr	r2, [pc, #68]	; (8009088 <ISM330DHCX_GYRO_GetOutputDataRate+0xe8>)
 8009042:	601a      	str	r2, [r3, #0]
      break;
 8009044:	e00f      	b.n	8009066 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_1666Hz:
      *Odr =  1666.0f;
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	4a10      	ldr	r2, [pc, #64]	; (800908c <ISM330DHCX_GYRO_GetOutputDataRate+0xec>)
 800904a:	601a      	str	r2, [r3, #0]
      break;
 800904c:	e00b      	b.n	8009066 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_3332Hz:
      *Odr =  3332.0f;
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	4a0f      	ldr	r2, [pc, #60]	; (8009090 <ISM330DHCX_GYRO_GetOutputDataRate+0xf0>)
 8009052:	601a      	str	r2, [r3, #0]
      break;
 8009054:	e007      	b.n	8009066 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_6667Hz:
      *Odr =  6667.0f;
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	4a0e      	ldr	r2, [pc, #56]	; (8009094 <ISM330DHCX_GYRO_GetOutputDataRate+0xf4>)
 800905a:	601a      	str	r2, [r3, #0]
      break;
 800905c:	e003      	b.n	8009066 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = ISM330DHCX_ERROR;
 800905e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009062:	60fb      	str	r3, [r7, #12]
      break;
 8009064:	bf00      	nop
  }

  return ret;
 8009066:	68fb      	ldr	r3, [r7, #12]
}
 8009068:	4618      	mov	r0, r3
 800906a:	3710      	adds	r7, #16
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}
 8009070:	41480000 	.word	0x41480000
 8009074:	41d00000 	.word	0x41d00000
 8009078:	42500000 	.word	0x42500000
 800907c:	42d00000 	.word	0x42d00000
 8009080:	43500000 	.word	0x43500000
 8009084:	43d00000 	.word	0x43d00000
 8009088:	44504000 	.word	0x44504000
 800908c:	44d04000 	.word	0x44d04000
 8009090:	45504000 	.word	0x45504000
 8009094:	45d05800 	.word	0x45d05800

08009098 <ISM330DHCX_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d106      	bne.n	80090bc <ISM330DHCX_GYRO_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 80090ae:	ed97 0a00 	vldr	s0, [r7]
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f000 fa3e 	bl	8009534 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>
 80090b8:	4603      	mov	r3, r0
 80090ba:	e005      	b.n	80090c8 <ISM330DHCX_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 80090bc:	ed97 0a00 	vldr	s0, [r7]
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f000 fac3 	bl	800964c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>
 80090c6:	4603      	mov	r3, r0
  }
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3708      	adds	r7, #8
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <ISM330DHCX_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetFullScale(ISM330DHCX_Object_t *pObj, int32_t  *FullScale)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b084      	sub	sp, #16
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 80090da:	2300      	movs	r3, #0
 80090dc:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	3320      	adds	r3, #32
 80090e2:	f107 020b 	add.w	r2, r7, #11
 80090e6:	4611      	mov	r1, r2
 80090e8:	4618      	mov	r0, r3
 80090ea:	f000 fdef 	bl	8009ccc <ism330dhcx_gy_full_scale_get>
 80090ee:	4603      	mov	r3, r0
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d002      	beq.n	80090fa <ISM330DHCX_GYRO_GetFullScale+0x2a>
  {
    return ISM330DHCX_ERROR;
 80090f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80090f8:	e041      	b.n	800917e <ISM330DHCX_GYRO_GetFullScale+0xae>
  }

  switch (fs_low_level)
 80090fa:	7afb      	ldrb	r3, [r7, #11]
 80090fc:	2b0c      	cmp	r3, #12
 80090fe:	d839      	bhi.n	8009174 <ISM330DHCX_GYRO_GetFullScale+0xa4>
 8009100:	a201      	add	r2, pc, #4	; (adr r2, 8009108 <ISM330DHCX_GYRO_GetFullScale+0x38>)
 8009102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009106:	bf00      	nop
 8009108:	08009145 	.word	0x08009145
 800910c:	0800916b 	.word	0x0800916b
 8009110:	0800913d 	.word	0x0800913d
 8009114:	08009175 	.word	0x08009175
 8009118:	0800914d 	.word	0x0800914d
 800911c:	08009175 	.word	0x08009175
 8009120:	08009175 	.word	0x08009175
 8009124:	08009175 	.word	0x08009175
 8009128:	08009157 	.word	0x08009157
 800912c:	08009175 	.word	0x08009175
 8009130:	08009175 	.word	0x08009175
 8009134:	08009175 	.word	0x08009175
 8009138:	08009161 	.word	0x08009161
  {
    case ISM330DHCX_125dps:
      *FullScale =  125;
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	227d      	movs	r2, #125	; 0x7d
 8009140:	601a      	str	r2, [r3, #0]
      break;
 8009142:	e01b      	b.n	800917c <ISM330DHCX_GYRO_GetFullScale+0xac>

    case ISM330DHCX_250dps:
      *FullScale =  250;
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	22fa      	movs	r2, #250	; 0xfa
 8009148:	601a      	str	r2, [r3, #0]
      break;
 800914a:	e017      	b.n	800917c <ISM330DHCX_GYRO_GetFullScale+0xac>

    case ISM330DHCX_500dps:
      *FullScale =  500;
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8009152:	601a      	str	r2, [r3, #0]
      break;
 8009154:	e012      	b.n	800917c <ISM330DHCX_GYRO_GetFullScale+0xac>

    case ISM330DHCX_1000dps:
      *FullScale = 1000;
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800915c:	601a      	str	r2, [r3, #0]
      break;
 800915e:	e00d      	b.n	800917c <ISM330DHCX_GYRO_GetFullScale+0xac>

    case ISM330DHCX_2000dps:
      *FullScale = 2000;
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009166:	601a      	str	r2, [r3, #0]
      break;
 8009168:	e008      	b.n	800917c <ISM330DHCX_GYRO_GetFullScale+0xac>

    case ISM330DHCX_4000dps:
      *FullScale = 4000;
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8009170:	601a      	str	r2, [r3, #0]
      break;
 8009172:	e003      	b.n	800917c <ISM330DHCX_GYRO_GetFullScale+0xac>

    default:
      ret = ISM330DHCX_ERROR;
 8009174:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009178:	60fb      	str	r3, [r7, #12]
      break;
 800917a:	bf00      	nop
  }

  return ret;
 800917c:	68fb      	ldr	r3, [r7, #12]
}
 800917e:	4618      	mov	r0, r3
 8009180:	3710      	adds	r7, #16
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop

08009188 <ISM330DHCX_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b084      	sub	sp, #16
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? ISM330DHCX_125dps
           : (FullScale <= 250)  ? ISM330DHCX_250dps
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	2b7d      	cmp	r3, #125	; 0x7d
 8009196:	dd18      	ble.n	80091ca <ISM330DHCX_GYRO_SetFullScale+0x42>
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	2bfa      	cmp	r3, #250	; 0xfa
 800919c:	dd13      	ble.n	80091c6 <ISM330DHCX_GYRO_SetFullScale+0x3e>
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80091a4:	dd0d      	ble.n	80091c2 <ISM330DHCX_GYRO_SetFullScale+0x3a>
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80091ac:	dd07      	ble.n	80091be <ISM330DHCX_GYRO_SetFullScale+0x36>
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80091b4:	dc01      	bgt.n	80091ba <ISM330DHCX_GYRO_SetFullScale+0x32>
 80091b6:	230c      	movs	r3, #12
 80091b8:	e008      	b.n	80091cc <ISM330DHCX_GYRO_SetFullScale+0x44>
 80091ba:	2301      	movs	r3, #1
 80091bc:	e006      	b.n	80091cc <ISM330DHCX_GYRO_SetFullScale+0x44>
 80091be:	2308      	movs	r3, #8
 80091c0:	e004      	b.n	80091cc <ISM330DHCX_GYRO_SetFullScale+0x44>
 80091c2:	2304      	movs	r3, #4
 80091c4:	e002      	b.n	80091cc <ISM330DHCX_GYRO_SetFullScale+0x44>
 80091c6:	2300      	movs	r3, #0
 80091c8:	e000      	b.n	80091cc <ISM330DHCX_GYRO_SetFullScale+0x44>
 80091ca:	2302      	movs	r3, #2
  new_fs = (FullScale <= 125)  ? ISM330DHCX_125dps
 80091cc:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? ISM330DHCX_500dps
           : (FullScale <= 1000) ? ISM330DHCX_1000dps
           : (FullScale <= 2000) ? ISM330DHCX_2000dps
           :                       ISM330DHCX_4000dps;

  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	3320      	adds	r3, #32
 80091d2:	7bfa      	ldrb	r2, [r7, #15]
 80091d4:	4611      	mov	r1, r2
 80091d6:	4618      	mov	r0, r3
 80091d8:	f000 fd52 	bl	8009c80 <ism330dhcx_gy_full_scale_set>
 80091dc:	4603      	mov	r3, r0
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d002      	beq.n	80091e8 <ISM330DHCX_GYRO_SetFullScale+0x60>
  {
    return ISM330DHCX_ERROR;
 80091e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80091e6:	e000      	b.n	80091ea <ISM330DHCX_GYRO_SetFullScale+0x62>
  }

  return ISM330DHCX_OK;
 80091e8:	2300      	movs	r3, #0
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3710      	adds	r7, #16
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}

080091f2 <ISM330DHCX_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetAxesRaw(ISM330DHCX_Object_t *pObj, ISM330DHCX_AxesRaw_t *Value)
{
 80091f2:	b580      	push	{r7, lr}
 80091f4:	b084      	sub	sp, #16
 80091f6:	af00      	add	r7, sp, #0
 80091f8:	6078      	str	r0, [r7, #4]
 80091fa:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	3320      	adds	r3, #32
 8009200:	f107 0208 	add.w	r2, r7, #8
 8009204:	4611      	mov	r1, r2
 8009206:	4618      	mov	r0, r3
 8009208:	f000 ffa6 	bl	800a158 <ism330dhcx_angular_rate_raw_get>
 800920c:	4603      	mov	r3, r0
 800920e:	2b00      	cmp	r3, #0
 8009210:	d002      	beq.n	8009218 <ISM330DHCX_GYRO_GetAxesRaw+0x26>
  {
    return ISM330DHCX_ERROR;
 8009212:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009216:	e00c      	b.n	8009232 <ISM330DHCX_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8009218:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8009220:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8009228:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	809a      	strh	r2, [r3, #4]

  return ISM330DHCX_OK;
 8009230:	2300      	movs	r3, #0
}
 8009232:	4618      	mov	r0, r3
 8009234:	3710      	adds	r7, #16
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}

0800923a <ISM330DHCX_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *AngularRate)
{
 800923a:	b580      	push	{r7, lr}
 800923c:	b086      	sub	sp, #24
 800923e:	af00      	add	r7, sp, #0
 8009240:	6078      	str	r0, [r7, #4]
 8009242:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	3320      	adds	r3, #32
 8009248:	f107 0210 	add.w	r2, r7, #16
 800924c:	4611      	mov	r1, r2
 800924e:	4618      	mov	r0, r3
 8009250:	f000 ff82 	bl	800a158 <ism330dhcx_angular_rate_raw_get>
 8009254:	4603      	mov	r3, r0
 8009256:	2b00      	cmp	r3, #0
 8009258:	d002      	beq.n	8009260 <ISM330DHCX_GYRO_GetAxes+0x26>
  {
    return ISM330DHCX_ERROR;
 800925a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800925e:	e03c      	b.n	80092da <ISM330DHCX_GYRO_GetAxes+0xa0>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_GYRO_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 8009260:	f107 030c 	add.w	r3, r7, #12
 8009264:	4619      	mov	r1, r3
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f7ff fe36 	bl	8008ed8 <ISM330DHCX_GYRO_GetSensitivity>
 800926c:	4603      	mov	r3, r0
 800926e:	2b00      	cmp	r3, #0
 8009270:	d002      	beq.n	8009278 <ISM330DHCX_GYRO_GetAxes+0x3e>
  {
    return ISM330DHCX_ERROR;
 8009272:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009276:	e030      	b.n	80092da <ISM330DHCX_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8009278:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800927c:	ee07 3a90 	vmov	s15, r3
 8009280:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009284:	edd7 7a03 	vldr	s15, [r7, #12]
 8009288:	ee67 7a27 	vmul.f32	s15, s14, s15
 800928c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009290:	ee17 2a90 	vmov	r2, s15
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8009298:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800929c:	ee07 3a90 	vmov	s15, r3
 80092a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80092a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80092a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80092b0:	ee17 2a90 	vmov	r2, s15
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80092b8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80092bc:	ee07 3a90 	vmov	s15, r3
 80092c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80092c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80092c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80092d0:	ee17 2a90 	vmov	r2, s15
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 80092d8:	2300      	movs	r3, #0
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3718      	adds	r7, #24
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}

080092e2 <ISM330DHCX_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_Write_Reg(ISM330DHCX_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80092e2:	b580      	push	{r7, lr}
 80092e4:	b082      	sub	sp, #8
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
 80092ea:	460b      	mov	r3, r1
 80092ec:	70fb      	strb	r3, [r7, #3]
 80092ee:	4613      	mov	r3, r2
 80092f0:	70bb      	strb	r3, [r7, #2]
  if (ism330dhcx_write_reg(&(pObj->Ctx), Reg, &Data, 1) != ISM330DHCX_OK)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f103 0020 	add.w	r0, r3, #32
 80092f8:	1cba      	adds	r2, r7, #2
 80092fa:	78f9      	ldrb	r1, [r7, #3]
 80092fc:	2301      	movs	r3, #1
 80092fe:	f000 fa75 	bl	80097ec <ism330dhcx_write_reg>
 8009302:	4603      	mov	r3, r0
 8009304:	2b00      	cmp	r3, #0
 8009306:	d002      	beq.n	800930e <ISM330DHCX_Write_Reg+0x2c>
  {
    return ISM330DHCX_ERROR;
 8009308:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800930c:	e000      	b.n	8009310 <ISM330DHCX_Write_Reg+0x2e>
  }

  return ISM330DHCX_OK;
 800930e:	2300      	movs	r3, #0
}
 8009310:	4618      	mov	r0, r3
 8009312:	3708      	adds	r7, #8
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b084      	sub	sp, #16
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
            : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8009324:	edd7 7a00 	vldr	s15, [r7]
 8009328:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800932c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009334:	d801      	bhi.n	800933a <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x22>
 8009336:	2301      	movs	r3, #1
 8009338:	e058      	b.n	80093ec <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800933a:	edd7 7a00 	vldr	s15, [r7]
 800933e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8009342:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800934a:	d801      	bhi.n	8009350 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x38>
 800934c:	2302      	movs	r3, #2
 800934e:	e04d      	b.n	80093ec <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8009350:	edd7 7a00 	vldr	s15, [r7]
 8009354:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8009414 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8009358:	eef4 7ac7 	vcmpe.f32	s15, s14
 800935c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009360:	d801      	bhi.n	8009366 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8009362:	2303      	movs	r3, #3
 8009364:	e042      	b.n	80093ec <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8009366:	edd7 7a00 	vldr	s15, [r7]
 800936a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8009418 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x100>
 800936e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009376:	d801      	bhi.n	800937c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x64>
 8009378:	2304      	movs	r3, #4
 800937a:	e037      	b.n	80093ec <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800937c:	edd7 7a00 	vldr	s15, [r7]
 8009380:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800941c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x104>
 8009384:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800938c:	d801      	bhi.n	8009392 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800938e:	2305      	movs	r3, #5
 8009390:	e02c      	b.n	80093ec <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8009392:	edd7 7a00 	vldr	s15, [r7]
 8009396:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8009420 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x108>
 800939a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800939e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093a2:	d801      	bhi.n	80093a8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x90>
 80093a4:	2306      	movs	r3, #6
 80093a6:	e021      	b.n	80093ec <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80093a8:	edd7 7a00 	vldr	s15, [r7]
 80093ac:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8009424 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x10c>
 80093b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80093b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093b8:	d801      	bhi.n	80093be <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xa6>
 80093ba:	2307      	movs	r3, #7
 80093bc:	e016      	b.n	80093ec <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80093be:	edd7 7a00 	vldr	s15, [r7]
 80093c2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8009428 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x110>
 80093c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80093ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093ce:	d801      	bhi.n	80093d4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80093d0:	2308      	movs	r3, #8
 80093d2:	e00b      	b.n	80093ec <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80093d4:	edd7 7a00 	vldr	s15, [r7]
 80093d8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800942c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x114>
 80093dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80093e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093e4:	d801      	bhi.n	80093ea <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80093e6:	2309      	movs	r3, #9
 80093e8:	e000      	b.n	80093ec <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80093ea:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 80093ec:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1666.0f) ? ISM330DHCX_XL_ODR_1666Hz
            : (Odr <= 3332.0f) ? ISM330DHCX_XL_ODR_3332Hz
            :                    ISM330DHCX_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	3320      	adds	r3, #32
 80093f2:	7bfa      	ldrb	r2, [r7, #15]
 80093f4:	4611      	mov	r1, r2
 80093f6:	4618      	mov	r0, r3
 80093f8:	f000 fa6e 	bl	80098d8 <ism330dhcx_xl_data_rate_set>
 80093fc:	4603      	mov	r3, r0
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d002      	beq.n	8009408 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 8009402:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009406:	e000      	b.n	800940a <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 8009408:	2300      	movs	r3, #0
}
 800940a:	4618      	mov	r0, r3
 800940c:	3710      	adds	r7, #16
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
 8009412:	bf00      	nop
 8009414:	42500000 	.word	0x42500000
 8009418:	42d00000 	.word	0x42d00000
 800941c:	43500000 	.word	0x43500000
 8009420:	43d00000 	.word	0x43d00000
 8009424:	44504000 	.word	0x44504000
 8009428:	44d04000 	.word	0x44d04000
 800942c:	45504000 	.word	0x45504000

08009430 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8009430:	b480      	push	{r7}
 8009432:	b083      	sub	sp, #12
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
                  : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 800943c:	edd7 7a00 	vldr	s15, [r7]
 8009440:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8009444:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800944c:	d801      	bhi.n	8009452 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x22>
 800944e:	2301      	movs	r3, #1
 8009450:	e058      	b.n	8009504 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8009452:	edd7 7a00 	vldr	s15, [r7]
 8009456:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800945a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800945e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009462:	d801      	bhi.n	8009468 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x38>
 8009464:	2302      	movs	r3, #2
 8009466:	e04d      	b.n	8009504 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8009468:	edd7 7a00 	vldr	s15, [r7]
 800946c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8009518 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8009470:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009478:	d801      	bhi.n	800947e <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x4e>
 800947a:	2303      	movs	r3, #3
 800947c:	e042      	b.n	8009504 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800947e:	edd7 7a00 	vldr	s15, [r7]
 8009482:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800951c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xec>
 8009486:	eef4 7ac7 	vcmpe.f32	s15, s14
 800948a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800948e:	d801      	bhi.n	8009494 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x64>
 8009490:	2304      	movs	r3, #4
 8009492:	e037      	b.n	8009504 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8009494:	edd7 7a00 	vldr	s15, [r7]
 8009498:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8009520 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf0>
 800949c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80094a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094a4:	d801      	bhi.n	80094aa <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80094a6:	2305      	movs	r3, #5
 80094a8:	e02c      	b.n	8009504 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80094aa:	edd7 7a00 	vldr	s15, [r7]
 80094ae:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8009524 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf4>
 80094b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80094b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094ba:	d801      	bhi.n	80094c0 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x90>
 80094bc:	2306      	movs	r3, #6
 80094be:	e021      	b.n	8009504 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80094c0:	edd7 7a00 	vldr	s15, [r7]
 80094c4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8009528 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf8>
 80094c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80094cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094d0:	d801      	bhi.n	80094d6 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xa6>
 80094d2:	2307      	movs	r3, #7
 80094d4:	e016      	b.n	8009504 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80094d6:	edd7 7a00 	vldr	s15, [r7]
 80094da:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800952c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xfc>
 80094de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80094e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094e6:	d801      	bhi.n	80094ec <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xbc>
 80094e8:	2308      	movs	r3, #8
 80094ea:	e00b      	b.n	8009504 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80094ec:	edd7 7a00 	vldr	s15, [r7]
 80094f0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8009530 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x100>
 80094f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80094f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094fc:	d801      	bhi.n	8009502 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80094fe:	2309      	movs	r3, #9
 8009500:	e000      	b.n	8009504 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8009502:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 8009504:	687a      	ldr	r2, [r7, #4]
 8009506:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                  : (Odr <=  833.0f) ? ISM330DHCX_XL_ODR_833Hz
                  : (Odr <= 1666.0f) ? ISM330DHCX_XL_ODR_1666Hz
                  : (Odr <= 3332.0f) ? ISM330DHCX_XL_ODR_3332Hz
                  :                    ISM330DHCX_XL_ODR_6667Hz;

  return ISM330DHCX_OK;
 800950a:	2300      	movs	r3, #0
}
 800950c:	4618      	mov	r0, r3
 800950e:	370c      	adds	r7, #12
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr
 8009518:	42500000 	.word	0x42500000
 800951c:	42d00000 	.word	0x42d00000
 8009520:	43500000 	.word	0x43500000
 8009524:	43d00000 	.word	0x43d00000
 8009528:	44504000 	.word	0x44504000
 800952c:	44d04000 	.word	0x44d04000
 8009530:	45504000 	.word	0x45504000

08009534 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8009540:	edd7 7a00 	vldr	s15, [r7]
 8009544:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8009548:	eef4 7ac7 	vcmpe.f32	s15, s14
 800954c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009550:	d801      	bhi.n	8009556 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8009552:	2301      	movs	r3, #1
 8009554:	e058      	b.n	8009608 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8009556:	edd7 7a00 	vldr	s15, [r7]
 800955a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800955e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009566:	d801      	bhi.n	800956c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8009568:	2302      	movs	r3, #2
 800956a:	e04d      	b.n	8009608 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800956c:	edd7 7a00 	vldr	s15, [r7]
 8009570:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8009630 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8009574:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800957c:	d801      	bhi.n	8009582 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 800957e:	2303      	movs	r3, #3
 8009580:	e042      	b.n	8009608 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8009582:	edd7 7a00 	vldr	s15, [r7]
 8009586:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8009634 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x100>
 800958a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800958e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009592:	d801      	bhi.n	8009598 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8009594:	2304      	movs	r3, #4
 8009596:	e037      	b.n	8009608 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8009598:	edd7 7a00 	vldr	s15, [r7]
 800959c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8009638 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x104>
 80095a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80095a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095a8:	d801      	bhi.n	80095ae <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 80095aa:	2305      	movs	r3, #5
 80095ac:	e02c      	b.n	8009608 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80095ae:	edd7 7a00 	vldr	s15, [r7]
 80095b2:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800963c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x108>
 80095b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80095ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095be:	d801      	bhi.n	80095c4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x90>
 80095c0:	2306      	movs	r3, #6
 80095c2:	e021      	b.n	8009608 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80095c4:	edd7 7a00 	vldr	s15, [r7]
 80095c8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8009640 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 80095cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80095d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095d4:	d801      	bhi.n	80095da <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 80095d6:	2307      	movs	r3, #7
 80095d8:	e016      	b.n	8009608 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80095da:	edd7 7a00 	vldr	s15, [r7]
 80095de:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8009644 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x110>
 80095e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80095e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095ea:	d801      	bhi.n	80095f0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 80095ec:	2308      	movs	r3, #8
 80095ee:	e00b      	b.n	8009608 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80095f0:	edd7 7a00 	vldr	s15, [r7]
 80095f4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8009648 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x114>
 80095f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80095fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009600:	d801      	bhi.n	8009606 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8009602:	2309      	movs	r3, #9
 8009604:	e000      	b.n	8009608 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8009606:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 8009608:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1666.0f) ? ISM330DHCX_GY_ODR_1666Hz
            : (Odr <= 3332.0f) ? ISM330DHCX_GY_ODR_3332Hz
            :                    ISM330DHCX_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	3320      	adds	r3, #32
 800960e:	7bfa      	ldrb	r2, [r7, #15]
 8009610:	4611      	mov	r1, r2
 8009612:	4618      	mov	r0, r3
 8009614:	f000 fbac 	bl	8009d70 <ism330dhcx_gy_data_rate_set>
 8009618:	4603      	mov	r3, r0
 800961a:	2b00      	cmp	r3, #0
 800961c:	d002      	beq.n	8009624 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 800961e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009622:	e000      	b.n	8009626 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 8009624:	2300      	movs	r3, #0
}
 8009626:	4618      	mov	r0, r3
 8009628:	3710      	adds	r7, #16
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}
 800962e:	bf00      	nop
 8009630:	42500000 	.word	0x42500000
 8009634:	42d00000 	.word	0x42d00000
 8009638:	43500000 	.word	0x43500000
 800963c:	43d00000 	.word	0x43d00000
 8009640:	44504000 	.word	0x44504000
 8009644:	44d04000 	.word	0x44d04000
 8009648:	45504000 	.word	0x45504000

0800964c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 800964c:	b480      	push	{r7}
 800964e:	b083      	sub	sp, #12
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8009658:	edd7 7a00 	vldr	s15, [r7]
 800965c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8009660:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009668:	d801      	bhi.n	800966e <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x22>
 800966a:	2301      	movs	r3, #1
 800966c:	e058      	b.n	8009720 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800966e:	edd7 7a00 	vldr	s15, [r7]
 8009672:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8009676:	eef4 7ac7 	vcmpe.f32	s15, s14
 800967a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800967e:	d801      	bhi.n	8009684 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8009680:	2302      	movs	r3, #2
 8009682:	e04d      	b.n	8009720 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8009684:	edd7 7a00 	vldr	s15, [r7]
 8009688:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8009734 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 800968c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009694:	d801      	bhi.n	800969a <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8009696:	2303      	movs	r3, #3
 8009698:	e042      	b.n	8009720 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800969a:	edd7 7a00 	vldr	s15, [r7]
 800969e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8009738 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xec>
 80096a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80096a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096aa:	d801      	bhi.n	80096b0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x64>
 80096ac:	2304      	movs	r3, #4
 80096ae:	e037      	b.n	8009720 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80096b0:	edd7 7a00 	vldr	s15, [r7]
 80096b4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800973c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 80096b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80096bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096c0:	d801      	bhi.n	80096c6 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 80096c2:	2305      	movs	r3, #5
 80096c4:	e02c      	b.n	8009720 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80096c6:	edd7 7a00 	vldr	s15, [r7]
 80096ca:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8009740 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 80096ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80096d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096d6:	d801      	bhi.n	80096dc <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x90>
 80096d8:	2306      	movs	r3, #6
 80096da:	e021      	b.n	8009720 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80096dc:	edd7 7a00 	vldr	s15, [r7]
 80096e0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8009744 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 80096e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80096e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096ec:	d801      	bhi.n	80096f2 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 80096ee:	2307      	movs	r3, #7
 80096f0:	e016      	b.n	8009720 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80096f2:	edd7 7a00 	vldr	s15, [r7]
 80096f6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8009748 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 80096fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80096fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009702:	d801      	bhi.n	8009708 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8009704:	2308      	movs	r3, #8
 8009706:	e00b      	b.n	8009720 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8009708:	edd7 7a00 	vldr	s15, [r7]
 800970c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800974c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8009710:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009718:	d801      	bhi.n	800971e <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 800971a:	2309      	movs	r3, #9
 800971c:	e000      	b.n	8009720 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800971e:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                   : (Odr <=  833.0f) ? ISM330DHCX_GY_ODR_833Hz
                   : (Odr <= 1666.0f) ? ISM330DHCX_GY_ODR_1666Hz
                   : (Odr <= 3332.0f) ? ISM330DHCX_GY_ODR_3332Hz
                   :                    ISM330DHCX_GY_ODR_6667Hz;

  return ISM330DHCX_OK;
 8009726:	2300      	movs	r3, #0
}
 8009728:	4618      	mov	r0, r3
 800972a:	370c      	adds	r7, #12
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr
 8009734:	42500000 	.word	0x42500000
 8009738:	42d00000 	.word	0x42d00000
 800973c:	43500000 	.word	0x43500000
 8009740:	43d00000 	.word	0x43d00000
 8009744:	44504000 	.word	0x44504000
 8009748:	44d04000 	.word	0x44d04000
 800974c:	45504000 	.word	0x45504000

08009750 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8009750:	b590      	push	{r4, r7, lr}
 8009752:	b087      	sub	sp, #28
 8009754:	af00      	add	r7, sp, #0
 8009756:	60f8      	str	r0, [r7, #12]
 8009758:	607a      	str	r2, [r7, #4]
 800975a:	461a      	mov	r2, r3
 800975c:	460b      	mov	r3, r1
 800975e:	72fb      	strb	r3, [r7, #11]
 8009760:	4613      	mov	r3, r2
 8009762:	813b      	strh	r3, [r7, #8]
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	695c      	ldr	r4, [r3, #20]
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	7b1b      	ldrb	r3, [r3, #12]
 8009770:	b298      	uxth	r0, r3
 8009772:	7afb      	ldrb	r3, [r7, #11]
 8009774:	b299      	uxth	r1, r3
 8009776:	893b      	ldrh	r3, [r7, #8]
 8009778:	687a      	ldr	r2, [r7, #4]
 800977a:	47a0      	blx	r4
 800977c:	4603      	mov	r3, r0
}
 800977e:	4618      	mov	r0, r3
 8009780:	371c      	adds	r7, #28
 8009782:	46bd      	mov	sp, r7
 8009784:	bd90      	pop	{r4, r7, pc}

08009786 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8009786:	b590      	push	{r4, r7, lr}
 8009788:	b087      	sub	sp, #28
 800978a:	af00      	add	r7, sp, #0
 800978c:	60f8      	str	r0, [r7, #12]
 800978e:	607a      	str	r2, [r7, #4]
 8009790:	461a      	mov	r2, r3
 8009792:	460b      	mov	r3, r1
 8009794:	72fb      	strb	r3, [r7, #11]
 8009796:	4613      	mov	r3, r2
 8009798:	813b      	strh	r3, [r7, #8]
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	691c      	ldr	r4, [r3, #16]
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	7b1b      	ldrb	r3, [r3, #12]
 80097a6:	b298      	uxth	r0, r3
 80097a8:	7afb      	ldrb	r3, [r7, #11]
 80097aa:	b299      	uxth	r1, r3
 80097ac:	893b      	ldrh	r3, [r7, #8]
 80097ae:	687a      	ldr	r2, [r7, #4]
 80097b0:	47a0      	blx	r4
 80097b2:	4603      	mov	r3, r0
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	371c      	adds	r7, #28
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd90      	pop	{r4, r7, pc}

080097bc <ism330dhcx_read_reg>:
  *
  */
int32_t __weak ism330dhcx_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 80097bc:	b590      	push	{r4, r7, lr}
 80097be:	b087      	sub	sp, #28
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	60f8      	str	r0, [r7, #12]
 80097c4:	607a      	str	r2, [r7, #4]
 80097c6:	461a      	mov	r2, r3
 80097c8:	460b      	mov	r3, r1
 80097ca:	72fb      	strb	r3, [r7, #11]
 80097cc:	4613      	mov	r3, r2
 80097ce:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	685c      	ldr	r4, [r3, #4]
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	68d8      	ldr	r0, [r3, #12]
 80097d8:	893b      	ldrh	r3, [r7, #8]
 80097da:	7af9      	ldrb	r1, [r7, #11]
 80097dc:	687a      	ldr	r2, [r7, #4]
 80097de:	47a0      	blx	r4
 80097e0:	6178      	str	r0, [r7, #20]

  return ret;
 80097e2:	697b      	ldr	r3, [r7, #20]
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	371c      	adds	r7, #28
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd90      	pop	{r4, r7, pc}

080097ec <ism330dhcx_write_reg>:
  *
  */
int32_t __weak ism330dhcx_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 80097ec:	b590      	push	{r4, r7, lr}
 80097ee:	b087      	sub	sp, #28
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	60f8      	str	r0, [r7, #12]
 80097f4:	607a      	str	r2, [r7, #4]
 80097f6:	461a      	mov	r2, r3
 80097f8:	460b      	mov	r3, r1
 80097fa:	72fb      	strb	r3, [r7, #11]
 80097fc:	4613      	mov	r3, r2
 80097fe:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681c      	ldr	r4, [r3, #0]
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	68d8      	ldr	r0, [r3, #12]
 8009808:	893b      	ldrh	r3, [r7, #8]
 800980a:	7af9      	ldrb	r1, [r7, #11]
 800980c:	687a      	ldr	r2, [r7, #4]
 800980e:	47a0      	blx	r4
 8009810:	6178      	str	r0, [r7, #20]

  return ret;
 8009812:	697b      	ldr	r3, [r7, #20]
}
 8009814:	4618      	mov	r0, r3
 8009816:	371c      	adds	r7, #28
 8009818:	46bd      	mov	sp, r7
 800981a:	bd90      	pop	{r4, r7, pc}

0800981c <ism330dhcx_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t val)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b084      	sub	sp, #16
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
 8009824:	460b      	mov	r3, r1
 8009826:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8009828:	f107 0208 	add.w	r2, r7, #8
 800982c:	2301      	movs	r3, #1
 800982e:	2110      	movs	r1, #16
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f7ff ffc3 	bl	80097bc <ism330dhcx_read_reg>
 8009836:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d10f      	bne.n	800985e <ism330dhcx_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 800983e:	78fb      	ldrb	r3, [r7, #3]
 8009840:	f003 0303 	and.w	r3, r3, #3
 8009844:	b2da      	uxtb	r2, r3
 8009846:	7a3b      	ldrb	r3, [r7, #8]
 8009848:	f362 0383 	bfi	r3, r2, #2, #2
 800984c:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 800984e:	f107 0208 	add.w	r2, r7, #8
 8009852:	2301      	movs	r3, #1
 8009854:	2110      	movs	r1, #16
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f7ff ffc8 	bl	80097ec <ism330dhcx_write_reg>
 800985c:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 800985e:	68fb      	ldr	r3, [r7, #12]
}
 8009860:	4618      	mov	r0, r3
 8009862:	3710      	adds	r7, #16
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <ism330dhcx_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t *val)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b084      	sub	sp, #16
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8009872:	f107 0208 	add.w	r2, r7, #8
 8009876:	2301      	movs	r3, #1
 8009878:	2110      	movs	r1, #16
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f7ff ff9e 	bl	80097bc <ism330dhcx_read_reg>
 8009880:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.fs_xl)
 8009882:	7a3b      	ldrb	r3, [r7, #8]
 8009884:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8009888:	b2db      	uxtb	r3, r3
 800988a:	2b03      	cmp	r3, #3
 800988c:	d81a      	bhi.n	80098c4 <ism330dhcx_xl_full_scale_get+0x5c>
 800988e:	a201      	add	r2, pc, #4	; (adr r2, 8009894 <ism330dhcx_xl_full_scale_get+0x2c>)
 8009890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009894:	080098a5 	.word	0x080098a5
 8009898:	080098ad 	.word	0x080098ad
 800989c:	080098b5 	.word	0x080098b5
 80098a0:	080098bd 	.word	0x080098bd
  {
    case ISM330DHCX_2g:
      *val = ISM330DHCX_2g;
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	2200      	movs	r2, #0
 80098a8:	701a      	strb	r2, [r3, #0]
      break;
 80098aa:	e00f      	b.n	80098cc <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_16g:
      *val = ISM330DHCX_16g;
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	2201      	movs	r2, #1
 80098b0:	701a      	strb	r2, [r3, #0]
      break;
 80098b2:	e00b      	b.n	80098cc <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_4g:
      *val = ISM330DHCX_4g;
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	2202      	movs	r2, #2
 80098b8:	701a      	strb	r2, [r3, #0]
      break;
 80098ba:	e007      	b.n	80098cc <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_8g:
      *val = ISM330DHCX_8g;
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	2203      	movs	r2, #3
 80098c0:	701a      	strb	r2, [r3, #0]
      break;
 80098c2:	e003      	b.n	80098cc <ism330dhcx_xl_full_scale_get+0x64>

    default:
      *val = ISM330DHCX_2g;
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	2200      	movs	r2, #0
 80098c8:	701a      	strb	r2, [r3, #0]
      break;
 80098ca:	bf00      	nop
  }

  return ret;
 80098cc:	68fb      	ldr	r3, [r7, #12]
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3710      	adds	r7, #16
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
 80098d6:	bf00      	nop

080098d8 <ism330dhcx_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t val)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b086      	sub	sp, #24
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	460b      	mov	r3, r1
 80098e2:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_xl_t odr_xl =  val;
 80098e4:	78fb      	ldrb	r3, [r7, #3]
 80098e6:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 80098e8:	f107 030c 	add.w	r3, r7, #12
 80098ec:	4619      	mov	r1, r3
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 fd97 	bl	800a422 <ism330dhcx_fsm_enable_get>
 80098f4:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	f040 80c4 	bne.w	8009a86 <ism330dhcx_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80098fe:	7b3b      	ldrb	r3, [r7, #12]
 8009900:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009904:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8009906:	7b3b      	ldrb	r3, [r7, #12]
 8009908:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800990c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800990e:	4313      	orrs	r3, r2
 8009910:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8009912:	7b3b      	ldrb	r3, [r7, #12]
 8009914:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009918:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800991a:	4313      	orrs	r3, r2
 800991c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800991e:	7b3b      	ldrb	r3, [r7, #12]
 8009920:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009924:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8009926:	4313      	orrs	r3, r2
 8009928:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800992a:	7b3b      	ldrb	r3, [r7, #12]
 800992c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009930:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8009932:	4313      	orrs	r3, r2
 8009934:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8009936:	7b3b      	ldrb	r3, [r7, #12]
 8009938:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800993c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800993e:	4313      	orrs	r3, r2
 8009940:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8009942:	7b3b      	ldrb	r3, [r7, #12]
 8009944:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009948:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800994a:	4313      	orrs	r3, r2
 800994c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800994e:	7b3b      	ldrb	r3, [r7, #12]
 8009950:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009954:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8009956:	4313      	orrs	r3, r2
 8009958:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800995a:	7b7b      	ldrb	r3, [r7, #13]
 800995c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009960:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8009962:	4313      	orrs	r3, r2
 8009964:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8009966:	7b7b      	ldrb	r3, [r7, #13]
 8009968:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800996c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800996e:	4313      	orrs	r3, r2
 8009970:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8009972:	7b7b      	ldrb	r3, [r7, #13]
 8009974:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009978:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800997a:	4313      	orrs	r3, r2
 800997c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800997e:	7b7b      	ldrb	r3, [r7, #13]
 8009980:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009984:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8009986:	4313      	orrs	r3, r2
 8009988:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800998a:	7b7b      	ldrb	r3, [r7, #13]
 800998c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009990:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8009992:	4313      	orrs	r3, r2
 8009994:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8009996:	7b7b      	ldrb	r3, [r7, #13]
 8009998:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800999c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800999e:	4313      	orrs	r3, r2
 80099a0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80099a2:	7b7b      	ldrb	r3, [r7, #13]
 80099a4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80099a8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80099aa:	4313      	orrs	r3, r2
 80099ac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80099ae:	7b7b      	ldrb	r3, [r7, #13]
 80099b0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80099b4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80099b6:	4313      	orrs	r3, r2
 80099b8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d163      	bne.n	8009a86 <ism330dhcx_xl_data_rate_set+0x1ae>
    {
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 80099be:	f107 030b 	add.w	r3, r7, #11
 80099c2:	4619      	mov	r1, r3
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 fd59 	bl	800a47c <ism330dhcx_fsm_data_rate_get>
 80099ca:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d159      	bne.n	8009a86 <ism330dhcx_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 80099d2:	7afb      	ldrb	r3, [r7, #11]
 80099d4:	2b03      	cmp	r3, #3
 80099d6:	d853      	bhi.n	8009a80 <ism330dhcx_xl_data_rate_set+0x1a8>
 80099d8:	a201      	add	r2, pc, #4	; (adr r2, 80099e0 <ism330dhcx_xl_data_rate_set+0x108>)
 80099da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099de:	bf00      	nop
 80099e0:	080099f1 	.word	0x080099f1
 80099e4:	08009a03 	.word	0x08009a03
 80099e8:	08009a21 	.word	0x08009a21
 80099ec:	08009a4b 	.word	0x08009a4b
        {
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF)
 80099f0:	78fb      	ldrb	r3, [r7, #3]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d102      	bne.n	80099fc <ism330dhcx_xl_data_rate_set+0x124>
            {
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 80099f6:	2301      	movs	r3, #1
 80099f8:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80099fa:	e044      	b.n	8009a86 <ism330dhcx_xl_data_rate_set+0x1ae>
              odr_xl = val;
 80099fc:	78fb      	ldrb	r3, [r7, #3]
 80099fe:	75fb      	strb	r3, [r7, #23]
            break;
 8009a00:	e041      	b.n	8009a86 <ism330dhcx_xl_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8009a02:	78fb      	ldrb	r3, [r7, #3]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d102      	bne.n	8009a0e <ism330dhcx_xl_data_rate_set+0x136>
            {
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8009a08:	2302      	movs	r3, #2
 8009a0a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8009a0c:	e03b      	b.n	8009a86 <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8009a0e:	78fb      	ldrb	r3, [r7, #3]
 8009a10:	2b01      	cmp	r3, #1
 8009a12:	d102      	bne.n	8009a1a <ism330dhcx_xl_data_rate_set+0x142>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8009a14:	2302      	movs	r3, #2
 8009a16:	75fb      	strb	r3, [r7, #23]
            break;
 8009a18:	e035      	b.n	8009a86 <ism330dhcx_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8009a1a:	78fb      	ldrb	r3, [r7, #3]
 8009a1c:	75fb      	strb	r3, [r7, #23]
            break;
 8009a1e:	e032      	b.n	8009a86 <ism330dhcx_xl_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8009a20:	78fb      	ldrb	r3, [r7, #3]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d102      	bne.n	8009a2c <ism330dhcx_xl_data_rate_set+0x154>
            {
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8009a26:	2303      	movs	r3, #3
 8009a28:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8009a2a:	e02c      	b.n	8009a86 <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8009a2c:	78fb      	ldrb	r3, [r7, #3]
 8009a2e:	2b01      	cmp	r3, #1
 8009a30:	d102      	bne.n	8009a38 <ism330dhcx_xl_data_rate_set+0x160>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8009a32:	2303      	movs	r3, #3
 8009a34:	75fb      	strb	r3, [r7, #23]
            break;
 8009a36:	e026      	b.n	8009a86 <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 8009a38:	78fb      	ldrb	r3, [r7, #3]
 8009a3a:	2b02      	cmp	r3, #2
 8009a3c:	d102      	bne.n	8009a44 <ism330dhcx_xl_data_rate_set+0x16c>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8009a3e:	2303      	movs	r3, #3
 8009a40:	75fb      	strb	r3, [r7, #23]
            break;
 8009a42:	e020      	b.n	8009a86 <ism330dhcx_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8009a44:	78fb      	ldrb	r3, [r7, #3]
 8009a46:	75fb      	strb	r3, [r7, #23]
            break;
 8009a48:	e01d      	b.n	8009a86 <ism330dhcx_xl_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8009a4a:	78fb      	ldrb	r3, [r7, #3]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d102      	bne.n	8009a56 <ism330dhcx_xl_data_rate_set+0x17e>
            {
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8009a50:	2304      	movs	r3, #4
 8009a52:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8009a54:	e017      	b.n	8009a86 <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8009a56:	78fb      	ldrb	r3, [r7, #3]
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d102      	bne.n	8009a62 <ism330dhcx_xl_data_rate_set+0x18a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8009a5c:	2304      	movs	r3, #4
 8009a5e:	75fb      	strb	r3, [r7, #23]
            break;
 8009a60:	e011      	b.n	8009a86 <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 8009a62:	78fb      	ldrb	r3, [r7, #3]
 8009a64:	2b02      	cmp	r3, #2
 8009a66:	d102      	bne.n	8009a6e <ism330dhcx_xl_data_rate_set+0x196>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8009a68:	2304      	movs	r3, #4
 8009a6a:	75fb      	strb	r3, [r7, #23]
            break;
 8009a6c:	e00b      	b.n	8009a86 <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_52Hz)
 8009a6e:	78fb      	ldrb	r3, [r7, #3]
 8009a70:	2b03      	cmp	r3, #3
 8009a72:	d102      	bne.n	8009a7a <ism330dhcx_xl_data_rate_set+0x1a2>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8009a74:	2304      	movs	r3, #4
 8009a76:	75fb      	strb	r3, [r7, #23]
            break;
 8009a78:	e005      	b.n	8009a86 <ism330dhcx_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8009a7a:	78fb      	ldrb	r3, [r7, #3]
 8009a7c:	75fb      	strb	r3, [r7, #23]
            break;
 8009a7e:	e002      	b.n	8009a86 <ism330dhcx_xl_data_rate_set+0x1ae>

          default:
            odr_xl = val;
 8009a80:	78fb      	ldrb	r3, [r7, #3]
 8009a82:	75fb      	strb	r3, [r7, #23]
            break;
 8009a84:	bf00      	nop
      }
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 8009a86:	2300      	movs	r3, #0
 8009a88:	72bb      	strb	r3, [r7, #10]

  if (ret == 0)
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d16c      	bne.n	8009b6a <ism330dhcx_xl_data_rate_set+0x292>
  {
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 8009a90:	f107 030a 	add.w	r3, r7, #10
 8009a94:	4619      	mov	r1, r3
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 fd38 	bl	800a50c <ism330dhcx_mlc_get>
 8009a9c:	6138      	str	r0, [r7, #16]

    if (mlc_enable == PROPERTY_ENABLE)
 8009a9e:	7abb      	ldrb	r3, [r7, #10]
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	d162      	bne.n	8009b6a <ism330dhcx_xl_data_rate_set+0x292>
    {
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 8009aa4:	f107 0309 	add.w	r3, r7, #9
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f000 fd58 	bl	800a560 <ism330dhcx_mlc_data_rate_get>
 8009ab0:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d158      	bne.n	8009b6a <ism330dhcx_xl_data_rate_set+0x292>
      {
        switch (mlc_odr)
 8009ab8:	7a7b      	ldrb	r3, [r7, #9]
 8009aba:	2b03      	cmp	r3, #3
 8009abc:	d852      	bhi.n	8009b64 <ism330dhcx_xl_data_rate_set+0x28c>
 8009abe:	a201      	add	r2, pc, #4	; (adr r2, 8009ac4 <ism330dhcx_xl_data_rate_set+0x1ec>)
 8009ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac4:	08009ad5 	.word	0x08009ad5
 8009ac8:	08009ae7 	.word	0x08009ae7
 8009acc:	08009b05 	.word	0x08009b05
 8009ad0:	08009b2f 	.word	0x08009b2f
        {
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8009ad4:	78fb      	ldrb	r3, [r7, #3]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d102      	bne.n	8009ae0 <ism330dhcx_xl_data_rate_set+0x208>
            {
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 8009ada:	2301      	movs	r3, #1
 8009adc:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8009ade:	e044      	b.n	8009b6a <ism330dhcx_xl_data_rate_set+0x292>
              odr_xl = val;
 8009ae0:	78fb      	ldrb	r3, [r7, #3]
 8009ae2:	75fb      	strb	r3, [r7, #23]
            break;
 8009ae4:	e041      	b.n	8009b6a <ism330dhcx_xl_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8009ae6:	78fb      	ldrb	r3, [r7, #3]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d102      	bne.n	8009af2 <ism330dhcx_xl_data_rate_set+0x21a>
            {
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8009aec:	2302      	movs	r3, #2
 8009aee:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8009af0:	e03b      	b.n	8009b6a <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8009af2:	78fb      	ldrb	r3, [r7, #3]
 8009af4:	2b01      	cmp	r3, #1
 8009af6:	d102      	bne.n	8009afe <ism330dhcx_xl_data_rate_set+0x226>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8009af8:	2302      	movs	r3, #2
 8009afa:	75fb      	strb	r3, [r7, #23]
            break;
 8009afc:	e035      	b.n	8009b6a <ism330dhcx_xl_data_rate_set+0x292>
              odr_xl = val;
 8009afe:	78fb      	ldrb	r3, [r7, #3]
 8009b00:	75fb      	strb	r3, [r7, #23]
            break;
 8009b02:	e032      	b.n	8009b6a <ism330dhcx_xl_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8009b04:	78fb      	ldrb	r3, [r7, #3]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d102      	bne.n	8009b10 <ism330dhcx_xl_data_rate_set+0x238>
            {
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8009b0a:	2303      	movs	r3, #3
 8009b0c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8009b0e:	e02c      	b.n	8009b6a <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8009b10:	78fb      	ldrb	r3, [r7, #3]
 8009b12:	2b01      	cmp	r3, #1
 8009b14:	d102      	bne.n	8009b1c <ism330dhcx_xl_data_rate_set+0x244>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8009b16:	2303      	movs	r3, #3
 8009b18:	75fb      	strb	r3, [r7, #23]
            break;
 8009b1a:	e026      	b.n	8009b6a <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 8009b1c:	78fb      	ldrb	r3, [r7, #3]
 8009b1e:	2b02      	cmp	r3, #2
 8009b20:	d102      	bne.n	8009b28 <ism330dhcx_xl_data_rate_set+0x250>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8009b22:	2303      	movs	r3, #3
 8009b24:	75fb      	strb	r3, [r7, #23]
            break;
 8009b26:	e020      	b.n	8009b6a <ism330dhcx_xl_data_rate_set+0x292>
              odr_xl = val;
 8009b28:	78fb      	ldrb	r3, [r7, #3]
 8009b2a:	75fb      	strb	r3, [r7, #23]
            break;
 8009b2c:	e01d      	b.n	8009b6a <ism330dhcx_xl_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8009b2e:	78fb      	ldrb	r3, [r7, #3]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d102      	bne.n	8009b3a <ism330dhcx_xl_data_rate_set+0x262>
            {
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8009b34:	2304      	movs	r3, #4
 8009b36:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8009b38:	e017      	b.n	8009b6a <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8009b3a:	78fb      	ldrb	r3, [r7, #3]
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d102      	bne.n	8009b46 <ism330dhcx_xl_data_rate_set+0x26e>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8009b40:	2304      	movs	r3, #4
 8009b42:	75fb      	strb	r3, [r7, #23]
            break;
 8009b44:	e011      	b.n	8009b6a <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 8009b46:	78fb      	ldrb	r3, [r7, #3]
 8009b48:	2b02      	cmp	r3, #2
 8009b4a:	d102      	bne.n	8009b52 <ism330dhcx_xl_data_rate_set+0x27a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8009b4c:	2304      	movs	r3, #4
 8009b4e:	75fb      	strb	r3, [r7, #23]
            break;
 8009b50:	e00b      	b.n	8009b6a <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_52Hz)
 8009b52:	78fb      	ldrb	r3, [r7, #3]
 8009b54:	2b03      	cmp	r3, #3
 8009b56:	d102      	bne.n	8009b5e <ism330dhcx_xl_data_rate_set+0x286>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8009b58:	2304      	movs	r3, #4
 8009b5a:	75fb      	strb	r3, [r7, #23]
            break;
 8009b5c:	e005      	b.n	8009b6a <ism330dhcx_xl_data_rate_set+0x292>
              odr_xl = val;
 8009b5e:	78fb      	ldrb	r3, [r7, #3]
 8009b60:	75fb      	strb	r3, [r7, #23]
            break;
 8009b62:	e002      	b.n	8009b6a <ism330dhcx_xl_data_rate_set+0x292>

          default:
            odr_xl = val;
 8009b64:	78fb      	ldrb	r3, [r7, #3]
 8009b66:	75fb      	strb	r3, [r7, #23]
            break;
 8009b68:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0)
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d107      	bne.n	8009b80 <ism330dhcx_xl_data_rate_set+0x2a8>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8009b70:	f107 0208 	add.w	r2, r7, #8
 8009b74:	2301      	movs	r3, #1
 8009b76:	2110      	movs	r1, #16
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f7ff fe1f 	bl	80097bc <ism330dhcx_read_reg>
 8009b7e:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl1_xl, 1);
  }

  if (ret == 0)
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d10f      	bne.n	8009ba6 <ism330dhcx_xl_data_rate_set+0x2ce>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8009b86:	7dfb      	ldrb	r3, [r7, #23]
 8009b88:	f003 030f 	and.w	r3, r3, #15
 8009b8c:	b2da      	uxtb	r2, r3
 8009b8e:	7a3b      	ldrb	r3, [r7, #8]
 8009b90:	f362 1307 	bfi	r3, r2, #4, #4
 8009b94:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 8009b96:	f107 0208 	add.w	r2, r7, #8
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	2110      	movs	r1, #16
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f7ff fe24 	bl	80097ec <ism330dhcx_write_reg>
 8009ba4:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8009ba6:	693b      	ldr	r3, [r7, #16]
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3718      	adds	r7, #24
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}

08009bb0 <ism330dhcx_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t *val)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8009bba:	f107 0208 	add.w	r2, r7, #8
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	2110      	movs	r1, #16
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f7ff fdfa 	bl	80097bc <ism330dhcx_read_reg>
 8009bc8:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.odr_xl)
 8009bca:	7a3b      	ldrb	r3, [r7, #8]
 8009bcc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8009bd0:	b2db      	uxtb	r3, r3
 8009bd2:	2b0b      	cmp	r3, #11
 8009bd4:	d84a      	bhi.n	8009c6c <ism330dhcx_xl_data_rate_get+0xbc>
 8009bd6:	a201      	add	r2, pc, #4	; (adr r2, 8009bdc <ism330dhcx_xl_data_rate_get+0x2c>)
 8009bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bdc:	08009c0d 	.word	0x08009c0d
 8009be0:	08009c15 	.word	0x08009c15
 8009be4:	08009c1d 	.word	0x08009c1d
 8009be8:	08009c25 	.word	0x08009c25
 8009bec:	08009c2d 	.word	0x08009c2d
 8009bf0:	08009c35 	.word	0x08009c35
 8009bf4:	08009c3d 	.word	0x08009c3d
 8009bf8:	08009c45 	.word	0x08009c45
 8009bfc:	08009c4d 	.word	0x08009c4d
 8009c00:	08009c55 	.word	0x08009c55
 8009c04:	08009c5d 	.word	0x08009c5d
 8009c08:	08009c65 	.word	0x08009c65
  {
    case ISM330DHCX_XL_ODR_OFF:
      *val = ISM330DHCX_XL_ODR_OFF;
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	701a      	strb	r2, [r3, #0]
      break;
 8009c12:	e02f      	b.n	8009c74 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_12Hz5:
      *val = ISM330DHCX_XL_ODR_12Hz5;
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	2201      	movs	r2, #1
 8009c18:	701a      	strb	r2, [r3, #0]
      break;
 8009c1a:	e02b      	b.n	8009c74 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_26Hz:
      *val = ISM330DHCX_XL_ODR_26Hz;
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	2202      	movs	r2, #2
 8009c20:	701a      	strb	r2, [r3, #0]
      break;
 8009c22:	e027      	b.n	8009c74 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_52Hz:
      *val = ISM330DHCX_XL_ODR_52Hz;
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	2203      	movs	r2, #3
 8009c28:	701a      	strb	r2, [r3, #0]
      break;
 8009c2a:	e023      	b.n	8009c74 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_104Hz:
      *val = ISM330DHCX_XL_ODR_104Hz;
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	2204      	movs	r2, #4
 8009c30:	701a      	strb	r2, [r3, #0]
      break;
 8009c32:	e01f      	b.n	8009c74 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_208Hz:
      *val = ISM330DHCX_XL_ODR_208Hz;
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	2205      	movs	r2, #5
 8009c38:	701a      	strb	r2, [r3, #0]
      break;
 8009c3a:	e01b      	b.n	8009c74 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_416Hz:
      *val = ISM330DHCX_XL_ODR_416Hz;
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	2206      	movs	r2, #6
 8009c40:	701a      	strb	r2, [r3, #0]
      break;
 8009c42:	e017      	b.n	8009c74 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_833Hz:
      *val = ISM330DHCX_XL_ODR_833Hz;
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	2207      	movs	r2, #7
 8009c48:	701a      	strb	r2, [r3, #0]
      break;
 8009c4a:	e013      	b.n	8009c74 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_1666Hz:
      *val = ISM330DHCX_XL_ODR_1666Hz;
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	2208      	movs	r2, #8
 8009c50:	701a      	strb	r2, [r3, #0]
      break;
 8009c52:	e00f      	b.n	8009c74 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_3332Hz:
      *val = ISM330DHCX_XL_ODR_3332Hz;
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	2209      	movs	r2, #9
 8009c58:	701a      	strb	r2, [r3, #0]
      break;
 8009c5a:	e00b      	b.n	8009c74 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_6667Hz:
      *val = ISM330DHCX_XL_ODR_6667Hz;
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	220a      	movs	r2, #10
 8009c60:	701a      	strb	r2, [r3, #0]
      break;
 8009c62:	e007      	b.n	8009c74 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_1Hz6:
      *val = ISM330DHCX_XL_ODR_1Hz6;
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	220b      	movs	r2, #11
 8009c68:	701a      	strb	r2, [r3, #0]
      break;
 8009c6a:	e003      	b.n	8009c74 <ism330dhcx_xl_data_rate_get+0xc4>

    default:
      *val = ISM330DHCX_XL_ODR_OFF;
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	701a      	strb	r2, [r3, #0]
      break;
 8009c72:	bf00      	nop
  }

  return ret;
 8009c74:	68fb      	ldr	r3, [r7, #12]
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3710      	adds	r7, #16
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}
 8009c7e:	bf00      	nop

08009c80 <ism330dhcx_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t val)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b084      	sub	sp, #16
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	460b      	mov	r3, r1
 8009c8a:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8009c8c:	f107 0208 	add.w	r2, r7, #8
 8009c90:	2301      	movs	r3, #1
 8009c92:	2111      	movs	r1, #17
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f7ff fd91 	bl	80097bc <ism330dhcx_read_reg>
 8009c9a:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  if (ret == 0)
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d10f      	bne.n	8009cc2 <ism330dhcx_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 8009ca2:	78fb      	ldrb	r3, [r7, #3]
 8009ca4:	f003 030f 	and.w	r3, r3, #15
 8009ca8:	b2da      	uxtb	r2, r3
 8009caa:	7a3b      	ldrb	r3, [r7, #8]
 8009cac:	f362 0303 	bfi	r3, r2, #0, #4
 8009cb0:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 8009cb2:	f107 0208 	add.w	r2, r7, #8
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	2111      	movs	r1, #17
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f7ff fd96 	bl	80097ec <ism330dhcx_write_reg>
 8009cc0:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3710      	adds	r7, #16
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}

08009ccc <ism330dhcx_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t *val)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8009cd6:	f107 0208 	add.w	r2, r7, #8
 8009cda:	2301      	movs	r3, #1
 8009cdc:	2111      	movs	r1, #17
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f7ff fd6c 	bl	80097bc <ism330dhcx_read_reg>
 8009ce4:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.fs_g)
 8009ce6:	7a3b      	ldrb	r3, [r7, #8]
 8009ce8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009cec:	b2db      	uxtb	r3, r3
 8009cee:	2b0c      	cmp	r3, #12
 8009cf0:	d834      	bhi.n	8009d5c <ism330dhcx_gy_full_scale_get+0x90>
 8009cf2:	a201      	add	r2, pc, #4	; (adr r2, 8009cf8 <ism330dhcx_gy_full_scale_get+0x2c>)
 8009cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cf8:	08009d35 	.word	0x08009d35
 8009cfc:	08009d55 	.word	0x08009d55
 8009d00:	08009d2d 	.word	0x08009d2d
 8009d04:	08009d5d 	.word	0x08009d5d
 8009d08:	08009d3d 	.word	0x08009d3d
 8009d0c:	08009d5d 	.word	0x08009d5d
 8009d10:	08009d5d 	.word	0x08009d5d
 8009d14:	08009d5d 	.word	0x08009d5d
 8009d18:	08009d45 	.word	0x08009d45
 8009d1c:	08009d5d 	.word	0x08009d5d
 8009d20:	08009d5d 	.word	0x08009d5d
 8009d24:	08009d5d 	.word	0x08009d5d
 8009d28:	08009d4d 	.word	0x08009d4d
  {
    case ISM330DHCX_125dps:
      *val = ISM330DHCX_125dps;
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	2202      	movs	r2, #2
 8009d30:	701a      	strb	r2, [r3, #0]
      break;
 8009d32:	e017      	b.n	8009d64 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_250dps:
      *val = ISM330DHCX_250dps;
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	2200      	movs	r2, #0
 8009d38:	701a      	strb	r2, [r3, #0]
      break;
 8009d3a:	e013      	b.n	8009d64 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_500dps:
      *val = ISM330DHCX_500dps;
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	2204      	movs	r2, #4
 8009d40:	701a      	strb	r2, [r3, #0]
      break;
 8009d42:	e00f      	b.n	8009d64 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_1000dps:
      *val = ISM330DHCX_1000dps;
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	2208      	movs	r2, #8
 8009d48:	701a      	strb	r2, [r3, #0]
      break;
 8009d4a:	e00b      	b.n	8009d64 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_2000dps:
      *val = ISM330DHCX_2000dps;
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	220c      	movs	r2, #12
 8009d50:	701a      	strb	r2, [r3, #0]
      break;
 8009d52:	e007      	b.n	8009d64 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_4000dps:
      *val = ISM330DHCX_4000dps;
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	2201      	movs	r2, #1
 8009d58:	701a      	strb	r2, [r3, #0]
      break;
 8009d5a:	e003      	b.n	8009d64 <ism330dhcx_gy_full_scale_get+0x98>

    default:
      *val = ISM330DHCX_125dps;
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	2202      	movs	r2, #2
 8009d60:	701a      	strb	r2, [r3, #0]
      break;
 8009d62:	bf00      	nop
  }

  return ret;
 8009d64:	68fb      	ldr	r3, [r7, #12]
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3710      	adds	r7, #16
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}
 8009d6e:	bf00      	nop

08009d70 <ism330dhcx_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t val)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b086      	sub	sp, #24
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	460b      	mov	r3, r1
 8009d7a:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_g_t odr_gy =  val;
 8009d7c:	78fb      	ldrb	r3, [r7, #3]
 8009d7e:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8009d80:	f107 030c 	add.w	r3, r7, #12
 8009d84:	4619      	mov	r1, r3
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f000 fb4b 	bl	800a422 <ism330dhcx_fsm_enable_get>
 8009d8c:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	f040 80c4 	bne.w	8009f1e <ism330dhcx_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8009d96:	7b3b      	ldrb	r3, [r7, #12]
 8009d98:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009d9c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8009d9e:	7b3b      	ldrb	r3, [r7, #12]
 8009da0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009da4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8009da6:	4313      	orrs	r3, r2
 8009da8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8009daa:	7b3b      	ldrb	r3, [r7, #12]
 8009dac:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009db0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8009db2:	4313      	orrs	r3, r2
 8009db4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8009db6:	7b3b      	ldrb	r3, [r7, #12]
 8009db8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009dbc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8009dc2:	7b3b      	ldrb	r3, [r7, #12]
 8009dc4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009dc8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8009dce:	7b3b      	ldrb	r3, [r7, #12]
 8009dd0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009dd4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8009dda:	7b3b      	ldrb	r3, [r7, #12]
 8009ddc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009de0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8009de2:	4313      	orrs	r3, r2
 8009de4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8009de6:	7b3b      	ldrb	r3, [r7, #12]
 8009de8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009dec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8009dee:	4313      	orrs	r3, r2
 8009df0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8009df2:	7b7b      	ldrb	r3, [r7, #13]
 8009df4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009df8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8009dfe:	7b7b      	ldrb	r3, [r7, #13]
 8009e00:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009e04:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8009e06:	4313      	orrs	r3, r2
 8009e08:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8009e0a:	7b7b      	ldrb	r3, [r7, #13]
 8009e0c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009e10:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8009e12:	4313      	orrs	r3, r2
 8009e14:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8009e16:	7b7b      	ldrb	r3, [r7, #13]
 8009e18:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009e1c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8009e22:	7b7b      	ldrb	r3, [r7, #13]
 8009e24:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009e28:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8009e2a:	4313      	orrs	r3, r2
 8009e2c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8009e2e:	7b7b      	ldrb	r3, [r7, #13]
 8009e30:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009e34:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8009e36:	4313      	orrs	r3, r2
 8009e38:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8009e3a:	7b7b      	ldrb	r3, [r7, #13]
 8009e3c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009e40:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8009e42:	4313      	orrs	r3, r2
 8009e44:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8009e46:	7b7b      	ldrb	r3, [r7, #13]
 8009e48:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009e4c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8009e52:	2b01      	cmp	r3, #1
 8009e54:	d163      	bne.n	8009f1e <ism330dhcx_gy_data_rate_set+0x1ae>
    {
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 8009e56:	f107 030b 	add.w	r3, r7, #11
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f000 fb0d 	bl	800a47c <ism330dhcx_fsm_data_rate_get>
 8009e62:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d159      	bne.n	8009f1e <ism330dhcx_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8009e6a:	7afb      	ldrb	r3, [r7, #11]
 8009e6c:	2b03      	cmp	r3, #3
 8009e6e:	d853      	bhi.n	8009f18 <ism330dhcx_gy_data_rate_set+0x1a8>
 8009e70:	a201      	add	r2, pc, #4	; (adr r2, 8009e78 <ism330dhcx_gy_data_rate_set+0x108>)
 8009e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e76:	bf00      	nop
 8009e78:	08009e89 	.word	0x08009e89
 8009e7c:	08009e9b 	.word	0x08009e9b
 8009e80:	08009eb9 	.word	0x08009eb9
 8009e84:	08009ee3 	.word	0x08009ee3
        {
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8009e88:	78fb      	ldrb	r3, [r7, #3]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d102      	bne.n	8009e94 <ism330dhcx_gy_data_rate_set+0x124>
            {
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8009e92:	e044      	b.n	8009f1e <ism330dhcx_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8009e94:	78fb      	ldrb	r3, [r7, #3]
 8009e96:	75fb      	strb	r3, [r7, #23]
            break;
 8009e98:	e041      	b.n	8009f1e <ism330dhcx_gy_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8009e9a:	78fb      	ldrb	r3, [r7, #3]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d102      	bne.n	8009ea6 <ism330dhcx_gy_data_rate_set+0x136>
            {
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8009ea0:	2302      	movs	r3, #2
 8009ea2:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8009ea4:	e03b      	b.n	8009f1e <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8009ea6:	78fb      	ldrb	r3, [r7, #3]
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d102      	bne.n	8009eb2 <ism330dhcx_gy_data_rate_set+0x142>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8009eac:	2302      	movs	r3, #2
 8009eae:	75fb      	strb	r3, [r7, #23]
            break;
 8009eb0:	e035      	b.n	8009f1e <ism330dhcx_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8009eb2:	78fb      	ldrb	r3, [r7, #3]
 8009eb4:	75fb      	strb	r3, [r7, #23]
            break;
 8009eb6:	e032      	b.n	8009f1e <ism330dhcx_gy_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8009eb8:	78fb      	ldrb	r3, [r7, #3]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d102      	bne.n	8009ec4 <ism330dhcx_gy_data_rate_set+0x154>
            {
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8009ebe:	2303      	movs	r3, #3
 8009ec0:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8009ec2:	e02c      	b.n	8009f1e <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8009ec4:	78fb      	ldrb	r3, [r7, #3]
 8009ec6:	2b01      	cmp	r3, #1
 8009ec8:	d102      	bne.n	8009ed0 <ism330dhcx_gy_data_rate_set+0x160>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8009eca:	2303      	movs	r3, #3
 8009ecc:	75fb      	strb	r3, [r7, #23]
            break;
 8009ece:	e026      	b.n	8009f1e <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8009ed0:	78fb      	ldrb	r3, [r7, #3]
 8009ed2:	2b02      	cmp	r3, #2
 8009ed4:	d102      	bne.n	8009edc <ism330dhcx_gy_data_rate_set+0x16c>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8009ed6:	2303      	movs	r3, #3
 8009ed8:	75fb      	strb	r3, [r7, #23]
            break;
 8009eda:	e020      	b.n	8009f1e <ism330dhcx_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8009edc:	78fb      	ldrb	r3, [r7, #3]
 8009ede:	75fb      	strb	r3, [r7, #23]
            break;
 8009ee0:	e01d      	b.n	8009f1e <ism330dhcx_gy_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8009ee2:	78fb      	ldrb	r3, [r7, #3]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d102      	bne.n	8009eee <ism330dhcx_gy_data_rate_set+0x17e>
            {
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8009ee8:	2304      	movs	r3, #4
 8009eea:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8009eec:	e017      	b.n	8009f1e <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8009eee:	78fb      	ldrb	r3, [r7, #3]
 8009ef0:	2b01      	cmp	r3, #1
 8009ef2:	d102      	bne.n	8009efa <ism330dhcx_gy_data_rate_set+0x18a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8009ef4:	2304      	movs	r3, #4
 8009ef6:	75fb      	strb	r3, [r7, #23]
            break;
 8009ef8:	e011      	b.n	8009f1e <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8009efa:	78fb      	ldrb	r3, [r7, #3]
 8009efc:	2b02      	cmp	r3, #2
 8009efe:	d102      	bne.n	8009f06 <ism330dhcx_gy_data_rate_set+0x196>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8009f00:	2304      	movs	r3, #4
 8009f02:	75fb      	strb	r3, [r7, #23]
            break;
 8009f04:	e00b      	b.n	8009f1e <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_52Hz)
 8009f06:	78fb      	ldrb	r3, [r7, #3]
 8009f08:	2b03      	cmp	r3, #3
 8009f0a:	d102      	bne.n	8009f12 <ism330dhcx_gy_data_rate_set+0x1a2>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8009f0c:	2304      	movs	r3, #4
 8009f0e:	75fb      	strb	r3, [r7, #23]
            break;
 8009f10:	e005      	b.n	8009f1e <ism330dhcx_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8009f12:	78fb      	ldrb	r3, [r7, #3]
 8009f14:	75fb      	strb	r3, [r7, #23]
            break;
 8009f16:	e002      	b.n	8009f1e <ism330dhcx_gy_data_rate_set+0x1ae>

          default:
            odr_gy = val;
 8009f18:	78fb      	ldrb	r3, [r7, #3]
 8009f1a:	75fb      	strb	r3, [r7, #23]
            break;
 8009f1c:	bf00      	nop
      }
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	72bb      	strb	r3, [r7, #10]

  if (ret == 0)
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d16c      	bne.n	800a002 <ism330dhcx_gy_data_rate_set+0x292>
  {
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 8009f28:	f107 030a 	add.w	r3, r7, #10
 8009f2c:	4619      	mov	r1, r3
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f000 faec 	bl	800a50c <ism330dhcx_mlc_get>
 8009f34:	6138      	str	r0, [r7, #16]

    if (mlc_enable == PROPERTY_ENABLE)
 8009f36:	7abb      	ldrb	r3, [r7, #10]
 8009f38:	2b01      	cmp	r3, #1
 8009f3a:	d162      	bne.n	800a002 <ism330dhcx_gy_data_rate_set+0x292>
    {
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 8009f3c:	f107 0309 	add.w	r3, r7, #9
 8009f40:	4619      	mov	r1, r3
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 fb0c 	bl	800a560 <ism330dhcx_mlc_data_rate_get>
 8009f48:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d158      	bne.n	800a002 <ism330dhcx_gy_data_rate_set+0x292>
      {
        switch (mlc_odr)
 8009f50:	7a7b      	ldrb	r3, [r7, #9]
 8009f52:	2b03      	cmp	r3, #3
 8009f54:	d852      	bhi.n	8009ffc <ism330dhcx_gy_data_rate_set+0x28c>
 8009f56:	a201      	add	r2, pc, #4	; (adr r2, 8009f5c <ism330dhcx_gy_data_rate_set+0x1ec>)
 8009f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f5c:	08009f6d 	.word	0x08009f6d
 8009f60:	08009f7f 	.word	0x08009f7f
 8009f64:	08009f9d 	.word	0x08009f9d
 8009f68:	08009fc7 	.word	0x08009fc7
        {
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8009f6c:	78fb      	ldrb	r3, [r7, #3]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d102      	bne.n	8009f78 <ism330dhcx_gy_data_rate_set+0x208>
            {
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 8009f72:	2301      	movs	r3, #1
 8009f74:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8009f76:	e044      	b.n	800a002 <ism330dhcx_gy_data_rate_set+0x292>
              odr_gy = val;
 8009f78:	78fb      	ldrb	r3, [r7, #3]
 8009f7a:	75fb      	strb	r3, [r7, #23]
            break;
 8009f7c:	e041      	b.n	800a002 <ism330dhcx_gy_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8009f7e:	78fb      	ldrb	r3, [r7, #3]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d102      	bne.n	8009f8a <ism330dhcx_gy_data_rate_set+0x21a>
            {
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8009f84:	2302      	movs	r3, #2
 8009f86:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8009f88:	e03b      	b.n	800a002 <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8009f8a:	78fb      	ldrb	r3, [r7, #3]
 8009f8c:	2b01      	cmp	r3, #1
 8009f8e:	d102      	bne.n	8009f96 <ism330dhcx_gy_data_rate_set+0x226>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8009f90:	2302      	movs	r3, #2
 8009f92:	75fb      	strb	r3, [r7, #23]
            break;
 8009f94:	e035      	b.n	800a002 <ism330dhcx_gy_data_rate_set+0x292>
              odr_gy = val;
 8009f96:	78fb      	ldrb	r3, [r7, #3]
 8009f98:	75fb      	strb	r3, [r7, #23]
            break;
 8009f9a:	e032      	b.n	800a002 <ism330dhcx_gy_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8009f9c:	78fb      	ldrb	r3, [r7, #3]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d102      	bne.n	8009fa8 <ism330dhcx_gy_data_rate_set+0x238>
            {
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8009fa2:	2303      	movs	r3, #3
 8009fa4:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8009fa6:	e02c      	b.n	800a002 <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8009fa8:	78fb      	ldrb	r3, [r7, #3]
 8009faa:	2b01      	cmp	r3, #1
 8009fac:	d102      	bne.n	8009fb4 <ism330dhcx_gy_data_rate_set+0x244>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8009fae:	2303      	movs	r3, #3
 8009fb0:	75fb      	strb	r3, [r7, #23]
            break;
 8009fb2:	e026      	b.n	800a002 <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8009fb4:	78fb      	ldrb	r3, [r7, #3]
 8009fb6:	2b02      	cmp	r3, #2
 8009fb8:	d102      	bne.n	8009fc0 <ism330dhcx_gy_data_rate_set+0x250>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8009fba:	2303      	movs	r3, #3
 8009fbc:	75fb      	strb	r3, [r7, #23]
            break;
 8009fbe:	e020      	b.n	800a002 <ism330dhcx_gy_data_rate_set+0x292>
              odr_gy = val;
 8009fc0:	78fb      	ldrb	r3, [r7, #3]
 8009fc2:	75fb      	strb	r3, [r7, #23]
            break;
 8009fc4:	e01d      	b.n	800a002 <ism330dhcx_gy_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8009fc6:	78fb      	ldrb	r3, [r7, #3]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d102      	bne.n	8009fd2 <ism330dhcx_gy_data_rate_set+0x262>
            {
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8009fcc:	2304      	movs	r3, #4
 8009fce:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8009fd0:	e017      	b.n	800a002 <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8009fd2:	78fb      	ldrb	r3, [r7, #3]
 8009fd4:	2b01      	cmp	r3, #1
 8009fd6:	d102      	bne.n	8009fde <ism330dhcx_gy_data_rate_set+0x26e>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8009fd8:	2304      	movs	r3, #4
 8009fda:	75fb      	strb	r3, [r7, #23]
            break;
 8009fdc:	e011      	b.n	800a002 <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8009fde:	78fb      	ldrb	r3, [r7, #3]
 8009fe0:	2b02      	cmp	r3, #2
 8009fe2:	d102      	bne.n	8009fea <ism330dhcx_gy_data_rate_set+0x27a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8009fe4:	2304      	movs	r3, #4
 8009fe6:	75fb      	strb	r3, [r7, #23]
            break;
 8009fe8:	e00b      	b.n	800a002 <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_52Hz)
 8009fea:	78fb      	ldrb	r3, [r7, #3]
 8009fec:	2b03      	cmp	r3, #3
 8009fee:	d102      	bne.n	8009ff6 <ism330dhcx_gy_data_rate_set+0x286>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8009ff0:	2304      	movs	r3, #4
 8009ff2:	75fb      	strb	r3, [r7, #23]
            break;
 8009ff4:	e005      	b.n	800a002 <ism330dhcx_gy_data_rate_set+0x292>
              odr_gy = val;
 8009ff6:	78fb      	ldrb	r3, [r7, #3]
 8009ff8:	75fb      	strb	r3, [r7, #23]
            break;
 8009ffa:	e002      	b.n	800a002 <ism330dhcx_gy_data_rate_set+0x292>

          default:
            odr_gy = val;
 8009ffc:	78fb      	ldrb	r3, [r7, #3]
 8009ffe:	75fb      	strb	r3, [r7, #23]
            break;
 800a000:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0)
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d107      	bne.n	800a018 <ism330dhcx_gy_data_rate_set+0x2a8>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 800a008:	f107 0208 	add.w	r2, r7, #8
 800a00c:	2301      	movs	r3, #1
 800a00e:	2111      	movs	r1, #17
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f7ff fbd3 	bl	80097bc <ism330dhcx_read_reg>
 800a016:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl2_g, 1);
  }

  if (ret == 0)
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d10f      	bne.n	800a03e <ism330dhcx_gy_data_rate_set+0x2ce>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 800a01e:	7dfb      	ldrb	r3, [r7, #23]
 800a020:	f003 030f 	and.w	r3, r3, #15
 800a024:	b2da      	uxtb	r2, r3
 800a026:	7a3b      	ldrb	r3, [r7, #8]
 800a028:	f362 1307 	bfi	r3, r2, #4, #4
 800a02c:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 800a02e:	f107 0208 	add.w	r2, r7, #8
 800a032:	2301      	movs	r3, #1
 800a034:	2111      	movs	r1, #17
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f7ff fbd8 	bl	80097ec <ism330dhcx_write_reg>
 800a03c:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 800a03e:	693b      	ldr	r3, [r7, #16]
}
 800a040:	4618      	mov	r0, r3
 800a042:	3718      	adds	r7, #24
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}

0800a048 <ism330dhcx_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t *val)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b084      	sub	sp, #16
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 800a052:	f107 0208 	add.w	r2, r7, #8
 800a056:	2301      	movs	r3, #1
 800a058:	2111      	movs	r1, #17
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f7ff fbae 	bl	80097bc <ism330dhcx_read_reg>
 800a060:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.odr_g)
 800a062:	7a3b      	ldrb	r3, [r7, #8]
 800a064:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800a068:	b2db      	uxtb	r3, r3
 800a06a:	2b0a      	cmp	r3, #10
 800a06c:	d844      	bhi.n	800a0f8 <ism330dhcx_gy_data_rate_get+0xb0>
 800a06e:	a201      	add	r2, pc, #4	; (adr r2, 800a074 <ism330dhcx_gy_data_rate_get+0x2c>)
 800a070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a074:	0800a0a1 	.word	0x0800a0a1
 800a078:	0800a0a9 	.word	0x0800a0a9
 800a07c:	0800a0b1 	.word	0x0800a0b1
 800a080:	0800a0b9 	.word	0x0800a0b9
 800a084:	0800a0c1 	.word	0x0800a0c1
 800a088:	0800a0c9 	.word	0x0800a0c9
 800a08c:	0800a0d1 	.word	0x0800a0d1
 800a090:	0800a0d9 	.word	0x0800a0d9
 800a094:	0800a0e1 	.word	0x0800a0e1
 800a098:	0800a0e9 	.word	0x0800a0e9
 800a09c:	0800a0f1 	.word	0x0800a0f1
  {
    case ISM330DHCX_GY_ODR_OFF:
      *val = ISM330DHCX_GY_ODR_OFF;
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	701a      	strb	r2, [r3, #0]
      break;
 800a0a6:	e02b      	b.n	800a100 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_12Hz5:
      *val = ISM330DHCX_GY_ODR_12Hz5;
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	701a      	strb	r2, [r3, #0]
      break;
 800a0ae:	e027      	b.n	800a100 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_26Hz:
      *val = ISM330DHCX_GY_ODR_26Hz;
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	2202      	movs	r2, #2
 800a0b4:	701a      	strb	r2, [r3, #0]
      break;
 800a0b6:	e023      	b.n	800a100 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_52Hz:
      *val = ISM330DHCX_GY_ODR_52Hz;
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	2203      	movs	r2, #3
 800a0bc:	701a      	strb	r2, [r3, #0]
      break;
 800a0be:	e01f      	b.n	800a100 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_104Hz:
      *val = ISM330DHCX_GY_ODR_104Hz;
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	2204      	movs	r2, #4
 800a0c4:	701a      	strb	r2, [r3, #0]
      break;
 800a0c6:	e01b      	b.n	800a100 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_208Hz:
      *val = ISM330DHCX_GY_ODR_208Hz;
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	2205      	movs	r2, #5
 800a0cc:	701a      	strb	r2, [r3, #0]
      break;
 800a0ce:	e017      	b.n	800a100 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_416Hz:
      *val = ISM330DHCX_GY_ODR_416Hz;
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	2206      	movs	r2, #6
 800a0d4:	701a      	strb	r2, [r3, #0]
      break;
 800a0d6:	e013      	b.n	800a100 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_833Hz:
      *val = ISM330DHCX_GY_ODR_833Hz;
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	2207      	movs	r2, #7
 800a0dc:	701a      	strb	r2, [r3, #0]
      break;
 800a0de:	e00f      	b.n	800a100 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_1666Hz:
      *val = ISM330DHCX_GY_ODR_1666Hz;
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	2208      	movs	r2, #8
 800a0e4:	701a      	strb	r2, [r3, #0]
      break;
 800a0e6:	e00b      	b.n	800a100 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_3332Hz:
      *val = ISM330DHCX_GY_ODR_3332Hz;
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	2209      	movs	r2, #9
 800a0ec:	701a      	strb	r2, [r3, #0]
      break;
 800a0ee:	e007      	b.n	800a100 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_6667Hz:
      *val = ISM330DHCX_GY_ODR_6667Hz;
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	220a      	movs	r2, #10
 800a0f4:	701a      	strb	r2, [r3, #0]
      break;
 800a0f6:	e003      	b.n	800a100 <ism330dhcx_gy_data_rate_get+0xb8>

    default:
      *val = ISM330DHCX_GY_ODR_OFF;
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	701a      	strb	r2, [r3, #0]
      break;
 800a0fe:	bf00      	nop
  }

  return ret;
 800a100:	68fb      	ldr	r3, [r7, #12]
}
 800a102:	4618      	mov	r0, r3
 800a104:	3710      	adds	r7, #16
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}
 800a10a:	bf00      	nop

0800a10c <ism330dhcx_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_block_data_update_set(stmdev_ctx_t *ctx,
                                         uint8_t val)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b084      	sub	sp, #16
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	460b      	mov	r3, r1
 800a116:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 800a118:	f107 0208 	add.w	r2, r7, #8
 800a11c:	2301      	movs	r3, #1
 800a11e:	2112      	movs	r1, #18
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f7ff fb4b 	bl	80097bc <ism330dhcx_read_reg>
 800a126:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d10f      	bne.n	800a14e <ism330dhcx_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 800a12e:	78fb      	ldrb	r3, [r7, #3]
 800a130:	f003 0301 	and.w	r3, r3, #1
 800a134:	b2da      	uxtb	r2, r3
 800a136:	7a3b      	ldrb	r3, [r7, #8]
 800a138:	f362 1386 	bfi	r3, r2, #6, #1
 800a13c:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 800a13e:	f107 0208 	add.w	r2, r7, #8
 800a142:	2301      	movs	r3, #1
 800a144:	2112      	movs	r1, #18
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f7ff fb50 	bl	80097ec <ism330dhcx_write_reg>
 800a14c:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 800a14e:	68fb      	ldr	r3, [r7, #12]
}
 800a150:	4618      	mov	r0, r3
 800a152:	3710      	adds	r7, #16
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}

0800a158 <ism330dhcx_angular_rate_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_angular_rate_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b086      	sub	sp, #24
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
 800a160:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_G, buff, 6);
 800a162:	f107 020c 	add.w	r2, r7, #12
 800a166:	2306      	movs	r3, #6
 800a168:	2122      	movs	r1, #34	; 0x22
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f7ff fb26 	bl	80097bc <ism330dhcx_read_reg>
 800a170:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800a172:	7b7b      	ldrb	r3, [r7, #13]
 800a174:	b21a      	sxth	r2, r3
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a180:	b29b      	uxth	r3, r3
 800a182:	021b      	lsls	r3, r3, #8
 800a184:	b29a      	uxth	r2, r3
 800a186:	7b3b      	ldrb	r3, [r7, #12]
 800a188:	b29b      	uxth	r3, r3
 800a18a:	4413      	add	r3, r2
 800a18c:	b29b      	uxth	r3, r3
 800a18e:	b21a      	sxth	r2, r3
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800a194:	7bfa      	ldrb	r2, [r7, #15]
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	3302      	adds	r3, #2
 800a19a:	b212      	sxth	r2, r2
 800a19c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	3302      	adds	r3, #2
 800a1a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a1a6:	b29b      	uxth	r3, r3
 800a1a8:	021b      	lsls	r3, r3, #8
 800a1aa:	b29a      	uxth	r2, r3
 800a1ac:	7bbb      	ldrb	r3, [r7, #14]
 800a1ae:	b29b      	uxth	r3, r3
 800a1b0:	4413      	add	r3, r2
 800a1b2:	b29a      	uxth	r2, r3
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	3302      	adds	r3, #2
 800a1b8:	b212      	sxth	r2, r2
 800a1ba:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800a1bc:	7c7a      	ldrb	r2, [r7, #17]
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	3304      	adds	r3, #4
 800a1c2:	b212      	sxth	r2, r2
 800a1c4:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	3304      	adds	r3, #4
 800a1ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	021b      	lsls	r3, r3, #8
 800a1d2:	b29a      	uxth	r2, r3
 800a1d4:	7c3b      	ldrb	r3, [r7, #16]
 800a1d6:	b29b      	uxth	r3, r3
 800a1d8:	4413      	add	r3, r2
 800a1da:	b29a      	uxth	r2, r3
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	3304      	adds	r3, #4
 800a1e0:	b212      	sxth	r2, r2
 800a1e2:	801a      	strh	r2, [r3, #0]

  return ret;
 800a1e4:	697b      	ldr	r3, [r7, #20]
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3718      	adds	r7, #24
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}

0800a1ee <ism330dhcx_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_acceleration_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 800a1ee:	b580      	push	{r7, lr}
 800a1f0:	b086      	sub	sp, #24
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	6078      	str	r0, [r7, #4]
 800a1f6:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_A, buff, 6);
 800a1f8:	f107 020c 	add.w	r2, r7, #12
 800a1fc:	2306      	movs	r3, #6
 800a1fe:	2128      	movs	r1, #40	; 0x28
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f7ff fadb 	bl	80097bc <ism330dhcx_read_reg>
 800a206:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800a208:	7b7b      	ldrb	r3, [r7, #13]
 800a20a:	b21a      	sxth	r2, r3
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a216:	b29b      	uxth	r3, r3
 800a218:	021b      	lsls	r3, r3, #8
 800a21a:	b29a      	uxth	r2, r3
 800a21c:	7b3b      	ldrb	r3, [r7, #12]
 800a21e:	b29b      	uxth	r3, r3
 800a220:	4413      	add	r3, r2
 800a222:	b29b      	uxth	r3, r3
 800a224:	b21a      	sxth	r2, r3
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800a22a:	7bfa      	ldrb	r2, [r7, #15]
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	3302      	adds	r3, #2
 800a230:	b212      	sxth	r2, r2
 800a232:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	3302      	adds	r3, #2
 800a238:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a23c:	b29b      	uxth	r3, r3
 800a23e:	021b      	lsls	r3, r3, #8
 800a240:	b29a      	uxth	r2, r3
 800a242:	7bbb      	ldrb	r3, [r7, #14]
 800a244:	b29b      	uxth	r3, r3
 800a246:	4413      	add	r3, r2
 800a248:	b29a      	uxth	r2, r3
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	3302      	adds	r3, #2
 800a24e:	b212      	sxth	r2, r2
 800a250:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800a252:	7c7a      	ldrb	r2, [r7, #17]
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	3304      	adds	r3, #4
 800a258:	b212      	sxth	r2, r2
 800a25a:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	3304      	adds	r3, #4
 800a260:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a264:	b29b      	uxth	r3, r3
 800a266:	021b      	lsls	r3, r3, #8
 800a268:	b29a      	uxth	r2, r3
 800a26a:	7c3b      	ldrb	r3, [r7, #16]
 800a26c:	b29b      	uxth	r3, r3
 800a26e:	4413      	add	r3, r2
 800a270:	b29a      	uxth	r2, r3
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	3304      	adds	r3, #4
 800a276:	b212      	sxth	r2, r2
 800a278:	801a      	strh	r2, [r3, #0]

  return ret;
 800a27a:	697b      	ldr	r3, [r7, #20]
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3718      	adds	r7, #24
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <ism330dhcx_device_conf_set>:
  * @param  val    Change the values of device_conf in reg CTRL9_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_conf_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b084      	sub	sp, #16
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	460b      	mov	r3, r1
 800a28e:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl9_xl_t ctrl9_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL9_XL,
 800a290:	f107 0208 	add.w	r2, r7, #8
 800a294:	2301      	movs	r3, #1
 800a296:	2118      	movs	r1, #24
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f7ff fa8f 	bl	80097bc <ism330dhcx_read_reg>
 800a29e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl9_xl, 1);

  if (ret == 0)
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d10f      	bne.n	800a2c6 <ism330dhcx_device_conf_set+0x42>
  {
    ctrl9_xl.device_conf = (uint8_t)val;
 800a2a6:	78fb      	ldrb	r3, [r7, #3]
 800a2a8:	f003 0301 	and.w	r3, r3, #1
 800a2ac:	b2da      	uxtb	r2, r3
 800a2ae:	7a3b      	ldrb	r3, [r7, #8]
 800a2b0:	f362 0341 	bfi	r3, r2, #1, #1
 800a2b4:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL9_XL,
 800a2b6:	f107 0208 	add.w	r2, r7, #8
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	2118      	movs	r1, #24
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f7ff fa94 	bl	80097ec <ism330dhcx_write_reg>
 800a2c4:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl9_xl, 1);
  }

  return ret;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	3710      	adds	r7, #16
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}

0800a2d0 <ism330dhcx_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_mem_bank_set(stmdev_ctx_t *ctx,
                                ism330dhcx_reg_access_t val)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b084      	sub	sp, #16
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
 800a2d8:	460b      	mov	r3, r1
 800a2da:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_func_cfg_access_t func_cfg_access;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 800a2dc:	f107 0208 	add.w	r2, r7, #8
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	2101      	movs	r1, #1
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f7ff fa69 	bl	80097bc <ism330dhcx_read_reg>
 800a2ea:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d10f      	bne.n	800a312 <ism330dhcx_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 800a2f2:	78fb      	ldrb	r3, [r7, #3]
 800a2f4:	f003 0303 	and.w	r3, r3, #3
 800a2f8:	b2da      	uxtb	r2, r3
 800a2fa:	7a3b      	ldrb	r3, [r7, #8]
 800a2fc:	f362 1387 	bfi	r3, r2, #6, #2
 800a300:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 800a302:	f107 0208 	add.w	r2, r7, #8
 800a306:	2301      	movs	r3, #1
 800a308:	2101      	movs	r1, #1
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f7ff fa6e 	bl	80097ec <ism330dhcx_write_reg>
 800a310:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 800a312:	68fb      	ldr	r3, [r7, #12]
}
 800a314:	4618      	mov	r0, r3
 800a316:	3710      	adds	r7, #16
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}

0800a31c <ism330dhcx_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b084      	sub	sp, #16
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_WHO_AM_I, buff, 1);
 800a326:	2301      	movs	r3, #1
 800a328:	683a      	ldr	r2, [r7, #0]
 800a32a:	210f      	movs	r1, #15
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f7ff fa45 	bl	80097bc <ism330dhcx_read_reg>
 800a332:	60f8      	str	r0, [r7, #12]

  return ret;
 800a334:	68fb      	ldr	r3, [r7, #12]
}
 800a336:	4618      	mov	r0, r3
 800a338:	3710      	adds	r7, #16
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}

0800a33e <ism330dhcx_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800a33e:	b580      	push	{r7, lr}
 800a340:	b084      	sub	sp, #16
 800a342:	af00      	add	r7, sp, #0
 800a344:	6078      	str	r0, [r7, #4]
 800a346:	460b      	mov	r3, r1
 800a348:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 800a34a:	f107 0208 	add.w	r2, r7, #8
 800a34e:	2301      	movs	r3, #1
 800a350:	2112      	movs	r1, #18
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f7ff fa32 	bl	80097bc <ism330dhcx_read_reg>
 800a358:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d10f      	bne.n	800a380 <ism330dhcx_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 800a360:	78fb      	ldrb	r3, [r7, #3]
 800a362:	f003 0301 	and.w	r3, r3, #1
 800a366:	b2da      	uxtb	r2, r3
 800a368:	7a3b      	ldrb	r3, [r7, #8]
 800a36a:	f362 0300 	bfi	r3, r2, #0, #1
 800a36e:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 800a370:	f107 0208 	add.w	r2, r7, #8
 800a374:	2301      	movs	r3, #1
 800a376:	2112      	movs	r1, #18
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f7ff fa37 	bl	80097ec <ism330dhcx_write_reg>
 800a37e:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 800a380:	68fb      	ldr	r3, [r7, #12]
}
 800a382:	4618      	mov	r0, r3
 800a384:	3710      	adds	r7, #16
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}

0800a38a <ism330dhcx_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800a38a:	b580      	push	{r7, lr}
 800a38c:	b084      	sub	sp, #16
 800a38e:	af00      	add	r7, sp, #0
 800a390:	6078      	str	r0, [r7, #4]
 800a392:	460b      	mov	r3, r1
 800a394:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 800a396:	f107 0208 	add.w	r2, r7, #8
 800a39a:	2301      	movs	r3, #1
 800a39c:	2112      	movs	r1, #18
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f7ff fa0c 	bl	80097bc <ism330dhcx_read_reg>
 800a3a4:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d10f      	bne.n	800a3cc <ism330dhcx_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = (uint8_t)val;
 800a3ac:	78fb      	ldrb	r3, [r7, #3]
 800a3ae:	f003 0301 	and.w	r3, r3, #1
 800a3b2:	b2da      	uxtb	r2, r3
 800a3b4:	7a3b      	ldrb	r3, [r7, #8]
 800a3b6:	f362 0382 	bfi	r3, r2, #2, #1
 800a3ba:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 800a3bc:	f107 0208 	add.w	r2, r7, #8
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	2112      	movs	r1, #18
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f7ff fa11 	bl	80097ec <ism330dhcx_write_reg>
 800a3ca:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
}
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	3710      	adds	r7, #16
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}

0800a3d6 <ism330dhcx_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_mode_set(stmdev_ctx_t *ctx,
                                 ism330dhcx_fifo_mode_t val)
{
 800a3d6:	b580      	push	{r7, lr}
 800a3d8:	b084      	sub	sp, #16
 800a3da:	af00      	add	r7, sp, #0
 800a3dc:	6078      	str	r0, [r7, #4]
 800a3de:	460b      	mov	r3, r1
 800a3e0:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 800a3e2:	f107 0208 	add.w	r2, r7, #8
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	210a      	movs	r1, #10
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f7ff f9e6 	bl	80097bc <ism330dhcx_read_reg>
 800a3f0:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl4, 1);

  if (ret == 0)
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d10f      	bne.n	800a418 <ism330dhcx_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 800a3f8:	78fb      	ldrb	r3, [r7, #3]
 800a3fa:	f003 0307 	and.w	r3, r3, #7
 800a3fe:	b2da      	uxtb	r2, r3
 800a400:	7a3b      	ldrb	r3, [r7, #8]
 800a402:	f362 0302 	bfi	r3, r2, #0, #3
 800a406:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 800a408:	f107 0208 	add.w	r2, r7, #8
 800a40c:	2301      	movs	r3, #1
 800a40e:	210a      	movs	r1, #10
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f7ff f9eb 	bl	80097ec <ism330dhcx_write_reg>
 800a416:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl4, 1);
  }

  return ret;
 800a418:	68fb      	ldr	r3, [r7, #12]
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3710      	adds	r7, #16
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}

0800a422 <ism330dhcx_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_enable_get(stmdev_ctx_t *ctx,
                                  ism330dhcx_emb_fsm_enable_t *val)
{
 800a422:	b580      	push	{r7, lr}
 800a424:	b084      	sub	sp, #16
 800a426:	af00      	add	r7, sp, #0
 800a428:	6078      	str	r0, [r7, #4]
 800a42a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 800a42c:	2102      	movs	r1, #2
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f7ff ff4e 	bl	800a2d0 <ism330dhcx_mem_bank_set>
 800a434:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d106      	bne.n	800a44a <ism330dhcx_fsm_enable_get+0x28>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
                              (uint8_t *)&val->fsm_enable_a, 1);
 800a43c:	683a      	ldr	r2, [r7, #0]
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
 800a43e:	2301      	movs	r3, #1
 800a440:	2146      	movs	r1, #70	; 0x46
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f7ff f9ba 	bl	80097bc <ism330dhcx_read_reg>
 800a448:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d107      	bne.n	800a460 <ism330dhcx_fsm_enable_get+0x3e>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
                              (uint8_t *)&val->fsm_enable_b, 1);
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	1c5a      	adds	r2, r3, #1
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
 800a454:	2301      	movs	r3, #1
 800a456:	2147      	movs	r1, #71	; 0x47
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f7ff f9af 	bl	80097bc <ism330dhcx_read_reg>
 800a45e:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d104      	bne.n	800a470 <ism330dhcx_fsm_enable_get+0x4e>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 800a466:	2100      	movs	r1, #0
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f7ff ff31 	bl	800a2d0 <ism330dhcx_mem_bank_set>
 800a46e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800a470:	68fb      	ldr	r3, [r7, #12]
}
 800a472:	4618      	mov	r0, r3
 800a474:	3710      	adds	r7, #16
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}
	...

0800a47c <ism330dhcx_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fsm_odr_t *val)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b084      	sub	sp, #16
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 800a486:	2102      	movs	r1, #2
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f7ff ff21 	bl	800a2d0 <ism330dhcx_mem_bank_set>
 800a48e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d107      	bne.n	800a4a6 <ism330dhcx_fsm_data_rate_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_B,
 800a496:	f107 0208 	add.w	r2, r7, #8
 800a49a:	2301      	movs	r3, #1
 800a49c:	215f      	movs	r1, #95	; 0x5f
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f7ff f98c 	bl	80097bc <ism330dhcx_read_reg>
 800a4a4:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d104      	bne.n	800a4b6 <ism330dhcx_fsm_data_rate_get+0x3a>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 800a4ac:	2100      	movs	r1, #0
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f7ff ff0e 	bl	800a2d0 <ism330dhcx_mem_bank_set>
 800a4b4:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 800a4b6:	7a3b      	ldrb	r3, [r7, #8]
 800a4b8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a4bc:	b2db      	uxtb	r3, r3
 800a4be:	2b03      	cmp	r3, #3
 800a4c0:	d81a      	bhi.n	800a4f8 <ism330dhcx_fsm_data_rate_get+0x7c>
 800a4c2:	a201      	add	r2, pc, #4	; (adr r2, 800a4c8 <ism330dhcx_fsm_data_rate_get+0x4c>)
 800a4c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4c8:	0800a4d9 	.word	0x0800a4d9
 800a4cc:	0800a4e1 	.word	0x0800a4e1
 800a4d0:	0800a4e9 	.word	0x0800a4e9
 800a4d4:	0800a4f1 	.word	0x0800a4f1
  {
    case ISM330DHCX_ODR_FSM_12Hz5:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	701a      	strb	r2, [r3, #0]
      break;
 800a4de:	e00f      	b.n	800a500 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_26Hz:
      *val = ISM330DHCX_ODR_FSM_26Hz;
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	701a      	strb	r2, [r3, #0]
      break;
 800a4e6:	e00b      	b.n	800a500 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_52Hz:
      *val = ISM330DHCX_ODR_FSM_52Hz;
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	2202      	movs	r2, #2
 800a4ec:	701a      	strb	r2, [r3, #0]
      break;
 800a4ee:	e007      	b.n	800a500 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_104Hz:
      *val = ISM330DHCX_ODR_FSM_104Hz;
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	2203      	movs	r2, #3
 800a4f4:	701a      	strb	r2, [r3, #0]
      break;
 800a4f6:	e003      	b.n	800a500 <ism330dhcx_fsm_data_rate_get+0x84>

    default:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	701a      	strb	r2, [r3, #0]
      break;
 800a4fe:	bf00      	nop
  }

  return ret;
 800a500:	68fb      	ldr	r3, [r7, #12]
}
 800a502:	4618      	mov	r0, r3
 800a504:	3710      	adds	r7, #16
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}
 800a50a:	bf00      	nop

0800a50c <ism330dhcx_mlc_get>:
  * @param  val      Get the values of mlc_en in
  *                  reg EMB_FUNC_EN_B
  *
  */
int32_t ism330dhcx_mlc_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b084      	sub	sp, #16
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_en_b_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 800a516:	2102      	movs	r1, #2
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f7ff fed9 	bl	800a2d0 <ism330dhcx_mem_bank_set>
 800a51e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d107      	bne.n	800a536 <ism330dhcx_mlc_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_EN_B,
 800a526:	f107 0208 	add.w	r2, r7, #8
 800a52a:	2301      	movs	r3, #1
 800a52c:	2105      	movs	r1, #5
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f7ff f944 	bl	80097bc <ism330dhcx_read_reg>
 800a534:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d10b      	bne.n	800a554 <ism330dhcx_mlc_get+0x48>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 800a53c:	2100      	movs	r1, #0
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f7ff fec6 	bl	800a2d0 <ism330dhcx_mem_bank_set>
 800a544:	60f8      	str	r0, [r7, #12]
    *val  = reg.mlc_en;
 800a546:	7a3b      	ldrb	r3, [r7, #8]
 800a548:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a54c:	b2db      	uxtb	r3, r3
 800a54e:	461a      	mov	r2, r3
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800a554:	68fb      	ldr	r3, [r7, #12]
}
 800a556:	4618      	mov	r0, r3
 800a558:	3710      	adds	r7, #16
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
	...

0800a560 <ism330dhcx_mlc_data_rate_get>:
  *                  reg EMB_FUNC_ODR_CFG_C
  *
  */
int32_t ism330dhcx_mlc_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_mlc_odr_t *val)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b084      	sub	sp, #16
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
 800a568:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_c_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 800a56a:	2102      	movs	r1, #2
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f7ff feaf 	bl	800a2d0 <ism330dhcx_mem_bank_set>
 800a572:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d107      	bne.n	800a58a <ism330dhcx_mlc_data_rate_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_C,
 800a57a:	f107 0208 	add.w	r2, r7, #8
 800a57e:	2301      	movs	r3, #1
 800a580:	2160      	movs	r1, #96	; 0x60
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f7ff f91a 	bl	80097bc <ism330dhcx_read_reg>
 800a588:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d12a      	bne.n	800a5e6 <ism330dhcx_mlc_data_rate_get+0x86>
  {
    switch (reg.mlc_odr)
 800a590:	7a3b      	ldrb	r3, [r7, #8]
 800a592:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800a596:	b2db      	uxtb	r3, r3
 800a598:	2b03      	cmp	r3, #3
 800a59a:	d81b      	bhi.n	800a5d4 <ism330dhcx_mlc_data_rate_get+0x74>
 800a59c:	a201      	add	r2, pc, #4	; (adr r2, 800a5a4 <ism330dhcx_mlc_data_rate_get+0x44>)
 800a59e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5a2:	bf00      	nop
 800a5a4:	0800a5b5 	.word	0x0800a5b5
 800a5a8:	0800a5bd 	.word	0x0800a5bd
 800a5ac:	0800a5c5 	.word	0x0800a5c5
 800a5b0:	0800a5cd 	.word	0x0800a5cd
    {
      case ISM330DHCX_ODR_PRGS_12Hz5:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	701a      	strb	r2, [r3, #0]
        break;
 800a5ba:	e00f      	b.n	800a5dc <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_26Hz:
        *val = ISM330DHCX_ODR_PRGS_26Hz;
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	2201      	movs	r2, #1
 800a5c0:	701a      	strb	r2, [r3, #0]
        break;
 800a5c2:	e00b      	b.n	800a5dc <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_52Hz:
        *val = ISM330DHCX_ODR_PRGS_52Hz;
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	2202      	movs	r2, #2
 800a5c8:	701a      	strb	r2, [r3, #0]
        break;
 800a5ca:	e007      	b.n	800a5dc <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_104Hz:
        *val = ISM330DHCX_ODR_PRGS_104Hz;
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	2203      	movs	r2, #3
 800a5d0:	701a      	strb	r2, [r3, #0]
        break;
 800a5d2:	e003      	b.n	800a5dc <ism330dhcx_mlc_data_rate_get+0x7c>

      default:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	701a      	strb	r2, [r3, #0]
        break;
 800a5da:	bf00      	nop
    }

    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 800a5dc:	2100      	movs	r1, #0
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f7ff fe76 	bl	800a2d0 <ism330dhcx_mem_bank_set>
 800a5e4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3710      	adds	r7, #16
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}

0800a5f0 <LPS22HH_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_RegisterBusIO(LPS22HH_Object_t *pObj, LPS22HH_IO_t *pIO)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b084      	sub	sp, #16
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
 800a5f8:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d103      	bne.n	800a60c <LPS22HH_RegisterBusIO+0x1c>
  {
    ret = LPS22HH_ERROR;
 800a604:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a608:	60fb      	str	r3, [r7, #12]
 800a60a:	e051      	b.n	800a6b0 <LPS22HH_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	681a      	ldr	r2, [r3, #0]
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	685a      	ldr	r2, [r3, #4]
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	689a      	ldr	r2, [r3, #8]
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	7b1a      	ldrb	r2, [r3, #12]
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	691a      	ldr	r2, [r3, #16]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	695a      	ldr	r2, [r3, #20]
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	699a      	ldr	r2, [r3, #24]
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	4a1d      	ldr	r2, [pc, #116]	; (800a6bc <LPS22HH_RegisterBusIO+0xcc>)
 800a648:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	4a1c      	ldr	r2, [pc, #112]	; (800a6c0 <LPS22HH_RegisterBusIO+0xd0>)
 800a64e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	69da      	ldr	r2, [r3, #28]
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	687a      	ldr	r2, [r7, #4]
 800a65c:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d103      	bne.n	800a66e <LPS22HH_RegisterBusIO+0x7e>
    {
      ret = LPS22HH_ERROR;
 800a666:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a66a:	60fb      	str	r3, [r7, #12]
 800a66c:	e020      	b.n	800a6b0 <LPS22HH_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22HH_OK)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	4798      	blx	r3
 800a674:	4603      	mov	r3, r0
 800a676:	2b00      	cmp	r3, #0
 800a678:	d003      	beq.n	800a682 <LPS22HH_RegisterBusIO+0x92>
    {
      ret = LPS22HH_ERROR;
 800a67a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a67e:	60fb      	str	r3, [r7, #12]
 800a680:	e016      	b.n	800a6b0 <LPS22HH_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HH_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	689b      	ldr	r3, [r3, #8]
 800a686:	2b02      	cmp	r3, #2
 800a688:	d112      	bne.n	800a6b0 <LPS22HH_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a690:	2b00      	cmp	r3, #0
 800a692:	d10d      	bne.n	800a6b0 <LPS22HH_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 800a694:	2301      	movs	r3, #1
 800a696:	72fb      	strb	r3, [r7, #11]

          if (LPS22HH_Write_Reg(pObj, LPS22HH_CTRL_REG1, data) != LPS22HH_OK)
 800a698:	7afb      	ldrb	r3, [r7, #11]
 800a69a:	461a      	mov	r2, r3
 800a69c:	2110      	movs	r1, #16
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f000 f9df 	bl	800aa62 <LPS22HH_Write_Reg>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d002      	beq.n	800a6b0 <LPS22HH_RegisterBusIO+0xc0>
          {
            ret = LPS22HH_ERROR;
 800a6aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a6ae:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3710      	adds	r7, #16
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}
 800a6ba:	bf00      	nop
 800a6bc:	0800ad8b 	.word	0x0800ad8b
 800a6c0:	0800adc1 	.word	0x0800adc1

0800a6c4 <LPS22HH_Init>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Init(LPS22HH_Object_t *pObj)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b082      	sub	sp, #8
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d108      	bne.n	800a6e8 <LPS22HH_Init+0x24>
  {
    if (LPS22HH_Initialize(pObj) != LPS22HH_OK)
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f000 fb0e 	bl	800acf8 <LPS22HH_Initialize>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d002      	beq.n	800a6e8 <LPS22HH_Init+0x24>
    {
      return LPS22HH_ERROR;
 800a6e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a6e6:	e004      	b.n	800a6f2 <LPS22HH_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LPS22HH_OK;
 800a6f0:	2300      	movs	r3, #0
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3708      	adds	r7, #8
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}

0800a6fa <LPS22HH_DeInit>:
  * @brief  Deinitialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_DeInit(LPS22HH_Object_t *pObj)
{
 800a6fa:	b580      	push	{r7, lr}
 800a6fc:	b082      	sub	sp, #8
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a708:	2b01      	cmp	r3, #1
 800a70a:	d111      	bne.n	800a730 <LPS22HH_DeInit+0x36>
  {
    if (LPS22HH_PRESS_Disable(pObj) != LPS22HH_OK)
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f000 f877 	bl	800a800 <LPS22HH_PRESS_Disable>
 800a712:	4603      	mov	r3, r0
 800a714:	2b00      	cmp	r3, #0
 800a716:	d002      	beq.n	800a71e <LPS22HH_DeInit+0x24>
    {
      return LPS22HH_ERROR;
 800a718:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a71c:	e00d      	b.n	800a73a <LPS22HH_DeInit+0x40>
    }

    if (LPS22HH_TEMP_Disable(pObj) != LPS22HH_OK)
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f000 f918 	bl	800a954 <LPS22HH_TEMP_Disable>
 800a724:	4603      	mov	r3, r0
 800a726:	2b00      	cmp	r3, #0
 800a728:	d002      	beq.n	800a730 <LPS22HH_DeInit+0x36>
    {
      return LPS22HH_ERROR;
 800a72a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a72e:	e004      	b.n	800a73a <LPS22HH_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2200      	movs	r2, #0
 800a734:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LPS22HH_OK;
 800a738:	2300      	movs	r3, #0
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3708      	adds	r7, #8
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}

0800a742 <LPS22HH_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_ReadID(LPS22HH_Object_t *pObj, uint8_t *Id)
{
 800a742:	b580      	push	{r7, lr}
 800a744:	b082      	sub	sp, #8
 800a746:	af00      	add	r7, sp, #0
 800a748:	6078      	str	r0, [r7, #4]
 800a74a:	6039      	str	r1, [r7, #0]
  if (lps22hh_device_id_get(&(pObj->Ctx), Id) != LPS22HH_OK)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	3320      	adds	r3, #32
 800a750:	6839      	ldr	r1, [r7, #0]
 800a752:	4618      	mov	r0, r3
 800a754:	f000 fd1a 	bl	800b18c <lps22hh_device_id_get>
 800a758:	4603      	mov	r3, r0
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d002      	beq.n	800a764 <LPS22HH_ReadID+0x22>
  {
    return LPS22HH_ERROR;
 800a75e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a762:	e000      	b.n	800a766 <LPS22HH_ReadID+0x24>
  }

  return LPS22HH_OK;
 800a764:	2300      	movs	r3, #0
}
 800a766:	4618      	mov	r0, r3
 800a768:	3708      	adds	r7, #8
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}
	...

0800a770 <LPS22HH_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LPS22HH sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_GetCapabilities(LPS22HH_Object_t *pObj, LPS22HH_Capabilities_t *Capabilities)
{
 800a770:	b480      	push	{r7}
 800a772:	b083      	sub	sp, #12
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	2200      	movs	r2, #0
 800a77e:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	2201      	movs	r2, #1
 800a784:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	2201      	movs	r2, #1
 800a78a:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	2200      	movs	r2, #0
 800a790:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	f04f 0200 	mov.w	r2, #0
 800a798:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 200.0f;
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	4a05      	ldr	r2, [pc, #20]	; (800a7b4 <LPS22HH_GetCapabilities+0x44>)
 800a79e:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 200.0f;
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	4a04      	ldr	r2, [pc, #16]	; (800a7b4 <LPS22HH_GetCapabilities+0x44>)
 800a7a4:	60da      	str	r2, [r3, #12]
  return LPS22HH_OK;
 800a7a6:	2300      	movs	r3, #0
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	370c      	adds	r7, #12
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b2:	4770      	bx	lr
 800a7b4:	43480000 	.word	0x43480000

0800a7b8 <LPS22HH_PRESS_Enable>:
  * @brief  Enable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Enable(LPS22HH_Object_t *pObj)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b082      	sub	sp, #8
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a7c6:	2b01      	cmp	r3, #1
 800a7c8:	d101      	bne.n	800a7ce <LPS22HH_PRESS_Enable+0x16>
  {
    return LPS22HH_OK;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	e014      	b.n	800a7f8 <LPS22HH_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f103 0220 	add.w	r2, r3, #32
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800a7da:	4619      	mov	r1, r3
 800a7dc:	4610      	mov	r0, r2
 800a7de:	f000 fb93 	bl	800af08 <lps22hh_data_rate_set>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d002      	beq.n	800a7ee <LPS22HH_PRESS_Enable+0x36>
  {
    return LPS22HH_ERROR;
 800a7e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a7ec:	e004      	b.n	800a7f8 <LPS22HH_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2201      	movs	r2, #1
 800a7f2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LPS22HH_OK;
 800a7f6:	2300      	movs	r3, #0
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3708      	adds	r7, #8
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}

0800a800 <LPS22HH_PRESS_Disable>:
  * @brief  Disable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Disable(LPS22HH_Object_t *pObj)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b082      	sub	sp, #8
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d101      	bne.n	800a816 <LPS22HH_PRESS_Disable+0x16>
  {
    return LPS22HH_OK;
 800a812:	2300      	movs	r3, #0
 800a814:	e024      	b.n	800a860 <LPS22HH_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HH temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d11a      	bne.n	800a856 <LPS22HH_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f103 0220 	add.w	r2, r3, #32
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	3333      	adds	r3, #51	; 0x33
 800a82a:	4619      	mov	r1, r3
 800a82c:	4610      	mov	r0, r2
 800a82e:	f000 fbb9 	bl	800afa4 <lps22hh_data_rate_get>
 800a832:	4603      	mov	r3, r0
 800a834:	2b00      	cmp	r3, #0
 800a836:	d002      	beq.n	800a83e <LPS22HH_PRESS_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 800a838:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a83c:	e010      	b.n	800a860 <LPS22HH_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	3320      	adds	r3, #32
 800a842:	2100      	movs	r1, #0
 800a844:	4618      	mov	r0, r3
 800a846:	f000 fb5f 	bl	800af08 <lps22hh_data_rate_set>
 800a84a:	4603      	mov	r3, r0
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d002      	beq.n	800a856 <LPS22HH_PRESS_Disable+0x56>
    {
      return LPS22HH_ERROR;
 800a850:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a854:	e004      	b.n	800a860 <LPS22HH_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2200      	movs	r2, #0
 800a85a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LPS22HH_OK;
 800a85e:	2300      	movs	r3, #0
}
 800a860:	4618      	mov	r0, r3
 800a862:	3708      	adds	r7, #8
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}

0800a868 <LPS22HH_PRESS_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b082      	sub	sp, #8
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 800a872:	6839      	ldr	r1, [r7, #0]
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f000 f90f 	bl	800aa98 <LPS22HH_GetOutputDataRate>
 800a87a:	4603      	mov	r3, r0
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3708      	adds	r7, #8
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <LPS22HH_PRESS_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b082      	sub	sp, #8
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a896:	2b01      	cmp	r3, #1
 800a898:	d106      	bne.n	800a8a8 <LPS22HH_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 800a89a:	ed97 0a00 	vldr	s0, [r7]
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 f95e 	bl	800ab60 <LPS22HH_SetOutputDataRate_When_Enabled>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	e005      	b.n	800a8b4 <LPS22HH_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 800a8a8:	ed97 0a00 	vldr	s0, [r7]
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	f000 f9c9 	bl	800ac44 <LPS22HH_SetOutputDataRate_When_Disabled>
 800a8b2:	4603      	mov	r3, r0
  }
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3708      	adds	r7, #8
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}

0800a8bc <LPS22HH_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetPressure(LPS22HH_Object_t *pObj, float *Value)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b084      	sub	sp, #16
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
 800a8c4:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 800a8c6:	f107 030c 	add.w	r3, r7, #12
 800a8ca:	2204      	movs	r2, #4
 800a8cc:	2100      	movs	r1, #0
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f012 fff6 	bl	801d8c0 <memset>
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HH_OK)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	3320      	adds	r3, #32
 800a8d8:	f107 020c 	add.w	r2, r7, #12
 800a8dc:	4611      	mov	r1, r2
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f000 fc08 	bl	800b0f4 <lps22hh_pressure_raw_get>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d002      	beq.n	800a8f0 <LPS22HH_PRESS_GetPressure+0x34>
  {
    return LPS22HH_ERROR;
 800a8ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a8ee:	e009      	b.n	800a904 <LPS22HH_PRESS_GetPressure+0x48>
  }

  *Value = lps22hh_from_lsb_to_hpa((uint32_t)data_raw_pressure.i32bit);
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f000 fab0 	bl	800ae58 <lps22hh_from_lsb_to_hpa>
 800a8f8:	eef0 7a40 	vmov.f32	s15, s0
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HH_OK;
 800a902:	2300      	movs	r3, #0
}
 800a904:	4618      	mov	r0, r3
 800a906:	3710      	adds	r7, #16
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}

0800a90c <LPS22HH_TEMP_Enable>:
  * @brief  Enable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Enable(LPS22HH_Object_t *pObj)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b082      	sub	sp, #8
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a91a:	2b01      	cmp	r3, #1
 800a91c:	d101      	bne.n	800a922 <LPS22HH_TEMP_Enable+0x16>
  {
    return LPS22HH_OK;
 800a91e:	2300      	movs	r3, #0
 800a920:	e014      	b.n	800a94c <LPS22HH_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f103 0220 	add.w	r2, r3, #32
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800a92e:	4619      	mov	r1, r3
 800a930:	4610      	mov	r0, r2
 800a932:	f000 fae9 	bl	800af08 <lps22hh_data_rate_set>
 800a936:	4603      	mov	r3, r0
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d002      	beq.n	800a942 <LPS22HH_TEMP_Enable+0x36>
  {
    return LPS22HH_ERROR;
 800a93c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a940:	e004      	b.n	800a94c <LPS22HH_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2201      	movs	r2, #1
 800a946:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LPS22HH_OK;
 800a94a:	2300      	movs	r3, #0
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3708      	adds	r7, #8
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}

0800a954 <LPS22HH_TEMP_Disable>:
  * @brief  Disable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Disable(LPS22HH_Object_t *pObj)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b082      	sub	sp, #8
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a962:	2b00      	cmp	r3, #0
 800a964:	d101      	bne.n	800a96a <LPS22HH_TEMP_Disable+0x16>
  {
    return LPS22HH_OK;
 800a966:	2300      	movs	r3, #0
 800a968:	e024      	b.n	800a9b4 <LPS22HH_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HH pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a970:	2b00      	cmp	r3, #0
 800a972:	d11a      	bne.n	800a9aa <LPS22HH_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f103 0220 	add.w	r2, r3, #32
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	3333      	adds	r3, #51	; 0x33
 800a97e:	4619      	mov	r1, r3
 800a980:	4610      	mov	r0, r2
 800a982:	f000 fb0f 	bl	800afa4 <lps22hh_data_rate_get>
 800a986:	4603      	mov	r3, r0
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d002      	beq.n	800a992 <LPS22HH_TEMP_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 800a98c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a990:	e010      	b.n	800a9b4 <LPS22HH_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	3320      	adds	r3, #32
 800a996:	2100      	movs	r1, #0
 800a998:	4618      	mov	r0, r3
 800a99a:	f000 fab5 	bl	800af08 <lps22hh_data_rate_set>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d002      	beq.n	800a9aa <LPS22HH_TEMP_Disable+0x56>
    {
      return LPS22HH_ERROR;
 800a9a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a9a8:	e004      	b.n	800a9b4 <LPS22HH_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LPS22HH_OK;
 800a9b2:	2300      	movs	r3, #0
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3708      	adds	r7, #8
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}

0800a9bc <LPS22HH_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b082      	sub	sp, #8
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
 800a9c4:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 800a9c6:	6839      	ldr	r1, [r7, #0]
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f000 f865 	bl	800aa98 <LPS22HH_GetOutputDataRate>
 800a9ce:	4603      	mov	r3, r0
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	3708      	adds	r7, #8
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}

0800a9d8 <LPS22HH_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b082      	sub	sp, #8
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
 800a9e0:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a9ea:	2b01      	cmp	r3, #1
 800a9ec:	d106      	bne.n	800a9fc <LPS22HH_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 800a9ee:	ed97 0a00 	vldr	s0, [r7]
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f000 f8b4 	bl	800ab60 <LPS22HH_SetOutputDataRate_When_Enabled>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	e005      	b.n	800aa08 <LPS22HH_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 800a9fc:	ed97 0a00 	vldr	s0, [r7]
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f000 f91f 	bl	800ac44 <LPS22HH_SetOutputDataRate_When_Disabled>
 800aa06:	4603      	mov	r3, r0
  }
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	3708      	adds	r7, #8
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}

0800aa10 <LPS22HH_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetTemperature(LPS22HH_Object_t *pObj, float *Value)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b084      	sub	sp, #16
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 800aa1a:	f107 030c 	add.w	r3, r7, #12
 800aa1e:	2202      	movs	r2, #2
 800aa20:	2100      	movs	r1, #0
 800aa22:	4618      	mov	r0, r3
 800aa24:	f012 ff4c 	bl	801d8c0 <memset>
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HH_OK)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	3320      	adds	r3, #32
 800aa2c:	f107 020c 	add.w	r2, r7, #12
 800aa30:	4611      	mov	r1, r2
 800aa32:	4618      	mov	r0, r3
 800aa34:	f000 fb87 	bl	800b146 <lps22hh_temperature_raw_get>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d002      	beq.n	800aa44 <LPS22HH_TEMP_GetTemperature+0x34>
  {
    return LPS22HH_ERROR;
 800aa3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aa42:	e00a      	b.n	800aa5a <LPS22HH_TEMP_GetTemperature+0x4a>
  }

  *Value = lps22hh_from_lsb_to_celsius(data_raw_temperature.i16bit);
 800aa44:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f000 fa1d 	bl	800ae88 <lps22hh_from_lsb_to_celsius>
 800aa4e:	eef0 7a40 	vmov.f32	s15, s0
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HH_OK;
 800aa58:	2300      	movs	r3, #0
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3710      	adds	r7, #16
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}

0800aa62 <LPS22HH_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Write_Reg(LPS22HH_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800aa62:	b580      	push	{r7, lr}
 800aa64:	b082      	sub	sp, #8
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	6078      	str	r0, [r7, #4]
 800aa6a:	460b      	mov	r3, r1
 800aa6c:	70fb      	strb	r3, [r7, #3]
 800aa6e:	4613      	mov	r3, r2
 800aa70:	70bb      	strb	r3, [r7, #2]
  if (lps22hh_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HH_OK)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f103 0020 	add.w	r0, r3, #32
 800aa78:	1cba      	adds	r2, r7, #2
 800aa7a:	78f9      	ldrb	r1, [r7, #3]
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	f000 f9d2 	bl	800ae26 <lps22hh_write_reg>
 800aa82:	4603      	mov	r3, r0
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d002      	beq.n	800aa8e <LPS22HH_Write_Reg+0x2c>
  {
    return LPS22HH_ERROR;
 800aa88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aa8c:	e000      	b.n	800aa90 <LPS22HH_Write_Reg+0x2e>
  }

  return LPS22HH_OK;
 800aa8e:	2300      	movs	r3, #0
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	3708      	adds	r7, #8
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}

0800aa98 <LPS22HH_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b084      	sub	sp, #16
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
 800aaa0:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	60fb      	str	r3, [r7, #12]
  lps22hh_odr_t odr_low_level;

  if (lps22hh_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HH_OK)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	3320      	adds	r3, #32
 800aaaa:	f107 020b 	add.w	r2, r7, #11
 800aaae:	4611      	mov	r1, r2
 800aab0:	4618      	mov	r0, r3
 800aab2:	f000 fa77 	bl	800afa4 <lps22hh_data_rate_get>
 800aab6:	4603      	mov	r3, r0
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d002      	beq.n	800aac2 <LPS22HH_GetOutputDataRate+0x2a>
  {
    return LPS22HH_ERROR;
 800aabc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aac0:	e03d      	b.n	800ab3e <LPS22HH_GetOutputDataRate+0xa6>
  }

  switch (odr_low_level)
 800aac2:	7afb      	ldrb	r3, [r7, #11]
 800aac4:	2b07      	cmp	r3, #7
 800aac6:	d835      	bhi.n	800ab34 <LPS22HH_GetOutputDataRate+0x9c>
 800aac8:	a201      	add	r2, pc, #4	; (adr r2, 800aad0 <LPS22HH_GetOutputDataRate+0x38>)
 800aaca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aace:	bf00      	nop
 800aad0:	0800aaf1 	.word	0x0800aaf1
 800aad4:	0800aafb 	.word	0x0800aafb
 800aad8:	0800ab05 	.word	0x0800ab05
 800aadc:	0800ab0d 	.word	0x0800ab0d
 800aae0:	0800ab15 	.word	0x0800ab15
 800aae4:	0800ab1d 	.word	0x0800ab1d
 800aae8:	0800ab25 	.word	0x0800ab25
 800aaec:	0800ab2d 	.word	0x0800ab2d
  {
    case LPS22HH_POWER_DOWN:
      *Odr = 0.0f;
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	f04f 0200 	mov.w	r2, #0
 800aaf6:	601a      	str	r2, [r3, #0]
      break;
 800aaf8:	e020      	b.n	800ab3c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_1_Hz:
      *Odr = 1.0f;
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ab00:	601a      	str	r2, [r3, #0]
      break;
 800ab02:	e01b      	b.n	800ab3c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_10_Hz:
      *Odr = 10.0f;
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	4a10      	ldr	r2, [pc, #64]	; (800ab48 <LPS22HH_GetOutputDataRate+0xb0>)
 800ab08:	601a      	str	r2, [r3, #0]
      break;
 800ab0a:	e017      	b.n	800ab3c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_25_Hz:
      *Odr = 25.0f;
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	4a0f      	ldr	r2, [pc, #60]	; (800ab4c <LPS22HH_GetOutputDataRate+0xb4>)
 800ab10:	601a      	str	r2, [r3, #0]
      break;
 800ab12:	e013      	b.n	800ab3c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_50_Hz:
      *Odr = 50.0f;
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	4a0e      	ldr	r2, [pc, #56]	; (800ab50 <LPS22HH_GetOutputDataRate+0xb8>)
 800ab18:	601a      	str	r2, [r3, #0]
      break;
 800ab1a:	e00f      	b.n	800ab3c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_75_Hz:
      *Odr = 75.0f;
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	4a0d      	ldr	r2, [pc, #52]	; (800ab54 <LPS22HH_GetOutputDataRate+0xbc>)
 800ab20:	601a      	str	r2, [r3, #0]
      break;
 800ab22:	e00b      	b.n	800ab3c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_100_Hz:
      *Odr = 100.0f;
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	4a0c      	ldr	r2, [pc, #48]	; (800ab58 <LPS22HH_GetOutputDataRate+0xc0>)
 800ab28:	601a      	str	r2, [r3, #0]
      break;
 800ab2a:	e007      	b.n	800ab3c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_200_Hz:
      *Odr = 200.0f;
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	4a0b      	ldr	r2, [pc, #44]	; (800ab5c <LPS22HH_GetOutputDataRate+0xc4>)
 800ab30:	601a      	str	r2, [r3, #0]
      break;
 800ab32:	e003      	b.n	800ab3c <LPS22HH_GetOutputDataRate+0xa4>

    default:
      ret = LPS22HH_ERROR;
 800ab34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab38:	60fb      	str	r3, [r7, #12]
      break;
 800ab3a:	bf00      	nop
  }

  return ret;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3710      	adds	r7, #16
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}
 800ab46:	bf00      	nop
 800ab48:	41200000 	.word	0x41200000
 800ab4c:	41c80000 	.word	0x41c80000
 800ab50:	42480000 	.word	0x42480000
 800ab54:	42960000 	.word	0x42960000
 800ab58:	42c80000 	.word	0x42c80000
 800ab5c:	43480000 	.word	0x43480000

0800ab60 <LPS22HH_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Enabled(LPS22HH_Object_t *pObj, float Odr)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b084      	sub	sp, #16
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	ed87 0a00 	vstr	s0, [r7]
  lps22hh_odr_t new_odr;

  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
            : (Odr <=  10.0f) ? LPS22HH_10_Hz
 800ab6c:	edd7 7a00 	vldr	s15, [r7]
 800ab70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab74:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ab78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab7c:	d801      	bhi.n	800ab82 <LPS22HH_SetOutputDataRate_When_Enabled+0x22>
 800ab7e:	2301      	movs	r3, #1
 800ab80:	e037      	b.n	800abf2 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 800ab82:	edd7 7a00 	vldr	s15, [r7]
 800ab86:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800ab8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ab8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab92:	d801      	bhi.n	800ab98 <LPS22HH_SetOutputDataRate_When_Enabled+0x38>
 800ab94:	2302      	movs	r3, #2
 800ab96:	e02c      	b.n	800abf2 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 800ab98:	edd7 7a00 	vldr	s15, [r7]
 800ab9c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800aba0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aba8:	d801      	bhi.n	800abae <LPS22HH_SetOutputDataRate_When_Enabled+0x4e>
 800abaa:	2303      	movs	r3, #3
 800abac:	e021      	b.n	800abf2 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 800abae:	edd7 7a00 	vldr	s15, [r7]
 800abb2:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800ac38 <LPS22HH_SetOutputDataRate_When_Enabled+0xd8>
 800abb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800abba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abbe:	d801      	bhi.n	800abc4 <LPS22HH_SetOutputDataRate_When_Enabled+0x64>
 800abc0:	2304      	movs	r3, #4
 800abc2:	e016      	b.n	800abf2 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 800abc4:	edd7 7a00 	vldr	s15, [r7]
 800abc8:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800ac3c <LPS22HH_SetOutputDataRate_When_Enabled+0xdc>
 800abcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800abd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abd4:	d801      	bhi.n	800abda <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 800abd6:	2305      	movs	r3, #5
 800abd8:	e00b      	b.n	800abf2 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 800abda:	edd7 7a00 	vldr	s15, [r7]
 800abde:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800ac40 <LPS22HH_SetOutputDataRate_When_Enabled+0xe0>
 800abe2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800abe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abea:	d801      	bhi.n	800abf0 <LPS22HH_SetOutputDataRate_When_Enabled+0x90>
 800abec:	2306      	movs	r3, #6
 800abee:	e000      	b.n	800abf2 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 800abf0:	2307      	movs	r3, #7
  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 800abf2:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  50.0f) ? LPS22HH_50_Hz
            : (Odr <=  75.0f) ? LPS22HH_75_Hz
            : (Odr <= 100.0f) ? LPS22HH_100_Hz
            :                   LPS22HH_200_Hz;

  if (lps22hh_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HH_OK)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	3320      	adds	r3, #32
 800abf8:	7bfa      	ldrb	r2, [r7, #15]
 800abfa:	4611      	mov	r1, r2
 800abfc:	4618      	mov	r0, r3
 800abfe:	f000 f983 	bl	800af08 <lps22hh_data_rate_set>
 800ac02:	4603      	mov	r3, r0
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d002      	beq.n	800ac0e <LPS22HH_SetOutputDataRate_When_Enabled+0xae>
  {
    return LPS22HH_ERROR;
 800ac08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ac0c:	e00f      	b.n	800ac2e <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
  }

  if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f103 0220 	add.w	r2, r3, #32
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	3333      	adds	r3, #51	; 0x33
 800ac18:	4619      	mov	r1, r3
 800ac1a:	4610      	mov	r0, r2
 800ac1c:	f000 f9c2 	bl	800afa4 <lps22hh_data_rate_get>
 800ac20:	4603      	mov	r3, r0
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d002      	beq.n	800ac2c <LPS22HH_SetOutputDataRate_When_Enabled+0xcc>
  {
    return LPS22HH_ERROR;
 800ac26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ac2a:	e000      	b.n	800ac2e <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
  }

  return LPS22HH_OK;
 800ac2c:	2300      	movs	r3, #0
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	3710      	adds	r7, #16
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}
 800ac36:	bf00      	nop
 800ac38:	42480000 	.word	0x42480000
 800ac3c:	42960000 	.word	0x42960000
 800ac40:	42c80000 	.word	0x42c80000

0800ac44 <LPS22HH_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Disabled(LPS22HH_Object_t *pObj, float Odr)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b083      	sub	sp, #12
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
 800ac4c:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
                   : (Odr <=  10.0f) ? LPS22HH_10_Hz
 800ac50:	edd7 7a00 	vldr	s15, [r7]
 800ac54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac58:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ac5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac60:	d801      	bhi.n	800ac66 <LPS22HH_SetOutputDataRate_When_Disabled+0x22>
 800ac62:	2301      	movs	r3, #1
 800ac64:	e037      	b.n	800acd6 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 800ac66:	edd7 7a00 	vldr	s15, [r7]
 800ac6a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800ac6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ac72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac76:	d801      	bhi.n	800ac7c <LPS22HH_SetOutputDataRate_When_Disabled+0x38>
 800ac78:	2302      	movs	r3, #2
 800ac7a:	e02c      	b.n	800acd6 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 800ac7c:	edd7 7a00 	vldr	s15, [r7]
 800ac80:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800ac84:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ac88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac8c:	d801      	bhi.n	800ac92 <LPS22HH_SetOutputDataRate_When_Disabled+0x4e>
 800ac8e:	2303      	movs	r3, #3
 800ac90:	e021      	b.n	800acd6 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 800ac92:	edd7 7a00 	vldr	s15, [r7]
 800ac96:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800acec <LPS22HH_SetOutputDataRate_When_Disabled+0xa8>
 800ac9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ac9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aca2:	d801      	bhi.n	800aca8 <LPS22HH_SetOutputDataRate_When_Disabled+0x64>
 800aca4:	2304      	movs	r3, #4
 800aca6:	e016      	b.n	800acd6 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 800aca8:	edd7 7a00 	vldr	s15, [r7]
 800acac:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800acf0 <LPS22HH_SetOutputDataRate_When_Disabled+0xac>
 800acb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800acb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acb8:	d801      	bhi.n	800acbe <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 800acba:	2305      	movs	r3, #5
 800acbc:	e00b      	b.n	800acd6 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 800acbe:	edd7 7a00 	vldr	s15, [r7]
 800acc2:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800acf4 <LPS22HH_SetOutputDataRate_When_Disabled+0xb0>
 800acc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800acca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acce:	d801      	bhi.n	800acd4 <LPS22HH_SetOutputDataRate_When_Disabled+0x90>
 800acd0:	2306      	movs	r3, #6
 800acd2:	e000      	b.n	800acd6 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 800acd4:	2307      	movs	r3, #7
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 800acd6:	687a      	ldr	r2, [r7, #4]
 800acd8:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                   : (Odr <=  50.0f) ? LPS22HH_50_Hz
                   : (Odr <=  75.0f) ? LPS22HH_75_Hz
                   : (Odr <= 100.0f) ? LPS22HH_100_Hz
                   :                   LPS22HH_200_Hz;

  return LPS22HH_OK;
 800acdc:	2300      	movs	r3, #0
}
 800acde:	4618      	mov	r0, r3
 800ace0:	370c      	adds	r7, #12
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr
 800acea:	bf00      	nop
 800acec:	42480000 	.word	0x42480000
 800acf0:	42960000 	.word	0x42960000
 800acf4:	42c80000 	.word	0x42c80000

0800acf8 <LPS22HH_Initialize>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_Initialize(LPS22HH_Object_t *pObj)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b082      	sub	sp, #8
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  /* Disable MIPI I3C(SM) interface */
  if (lps22hh_i3c_interface_set(&(pObj->Ctx), LPS22HH_I3C_DISABLE) != LPS22HH_OK)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	3320      	adds	r3, #32
 800ad04:	2111      	movs	r1, #17
 800ad06:	4618      	mov	r0, r3
 800ad08:	f000 fa9d 	bl	800b246 <lps22hh_i3c_interface_set>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d002      	beq.n	800ad18 <LPS22HH_Initialize+0x20>
  {
    return LPS22HH_ERROR;
 800ad12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad16:	e034      	b.n	800ad82 <LPS22HH_Initialize+0x8a>
  }

  /* Power down the device, set Low Noise Enable (bit 5), clear One Shot (bit 4) */
  if (lps22hh_data_rate_set(&(pObj->Ctx), (lps22hh_odr_t)(LPS22HH_POWER_DOWN | 0x10)) != LPS22HH_OK)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	3320      	adds	r3, #32
 800ad1c:	2110      	movs	r1, #16
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f000 f8f2 	bl	800af08 <lps22hh_data_rate_set>
 800ad24:	4603      	mov	r3, r0
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d002      	beq.n	800ad30 <LPS22HH_Initialize+0x38>
  {
    return LPS22HH_ERROR;
 800ad2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad2e:	e028      	b.n	800ad82 <LPS22HH_Initialize+0x8a>
  }

  /* Disable low-pass filter on LPS22HH pressure data */
  if (lps22hh_lp_bandwidth_set(&(pObj->Ctx), LPS22HH_LPF_ODR_DIV_2) != LPS22HH_OK)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	3320      	adds	r3, #32
 800ad34:	2100      	movs	r1, #0
 800ad36:	4618      	mov	r0, r3
 800ad38:	f000 fa5f 	bl	800b1fa <lps22hh_lp_bandwidth_set>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d002      	beq.n	800ad48 <LPS22HH_Initialize+0x50>
  {
    return LPS22HH_ERROR;
 800ad42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad46:	e01c      	b.n	800ad82 <LPS22HH_Initialize+0x8a>
  }

  /* Set block data update mode */
  if (lps22hh_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	3320      	adds	r3, #32
 800ad4c:	2101      	movs	r1, #1
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f000 f8b4 	bl	800aebc <lps22hh_block_data_update_set>
 800ad54:	4603      	mov	r3, r0
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d002      	beq.n	800ad60 <LPS22HH_Initialize+0x68>
  {
    return LPS22HH_ERROR;
 800ad5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad5e:	e010      	b.n	800ad82 <LPS22HH_Initialize+0x8a>
  }

  /* Set autoincrement for multi-byte read/write */
  if (lps22hh_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	3320      	adds	r3, #32
 800ad64:	2101      	movs	r1, #1
 800ad66:	4618      	mov	r0, r3
 800ad68:	f000 fa21 	bl	800b1ae <lps22hh_auto_increment_set>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d002      	beq.n	800ad78 <LPS22HH_Initialize+0x80>
  {
    return LPS22HH_ERROR;
 800ad72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad76:	e004      	b.n	800ad82 <LPS22HH_Initialize+0x8a>
  }

  pObj->last_odr = LPS22HH_25_Hz;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2203      	movs	r2, #3
 800ad7c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  return LPS22HH_OK;
 800ad80:	2300      	movs	r3, #0
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3708      	adds	r7, #8
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}

0800ad8a <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800ad8a:	b590      	push	{r4, r7, lr}
 800ad8c:	b087      	sub	sp, #28
 800ad8e:	af00      	add	r7, sp, #0
 800ad90:	60f8      	str	r0, [r7, #12]
 800ad92:	607a      	str	r2, [r7, #4]
 800ad94:	461a      	mov	r2, r3
 800ad96:	460b      	mov	r3, r1
 800ad98:	72fb      	strb	r3, [r7, #11]
 800ad9a:	4613      	mov	r3, r2
 800ad9c:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	695c      	ldr	r4, [r3, #20]
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	7b1b      	ldrb	r3, [r3, #12]
 800adaa:	b298      	uxth	r0, r3
 800adac:	7afb      	ldrb	r3, [r7, #11]
 800adae:	b299      	uxth	r1, r3
 800adb0:	893b      	ldrh	r3, [r7, #8]
 800adb2:	687a      	ldr	r2, [r7, #4]
 800adb4:	47a0      	blx	r4
 800adb6:	4603      	mov	r3, r0
}
 800adb8:	4618      	mov	r0, r3
 800adba:	371c      	adds	r7, #28
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd90      	pop	{r4, r7, pc}

0800adc0 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800adc0:	b590      	push	{r4, r7, lr}
 800adc2:	b087      	sub	sp, #28
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	60f8      	str	r0, [r7, #12]
 800adc8:	607a      	str	r2, [r7, #4]
 800adca:	461a      	mov	r2, r3
 800adcc:	460b      	mov	r3, r1
 800adce:	72fb      	strb	r3, [r7, #11]
 800add0:	4613      	mov	r3, r2
 800add2:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	691c      	ldr	r4, [r3, #16]
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	7b1b      	ldrb	r3, [r3, #12]
 800ade0:	b298      	uxth	r0, r3
 800ade2:	7afb      	ldrb	r3, [r7, #11]
 800ade4:	b299      	uxth	r1, r3
 800ade6:	893b      	ldrh	r3, [r7, #8]
 800ade8:	687a      	ldr	r2, [r7, #4]
 800adea:	47a0      	blx	r4
 800adec:	4603      	mov	r3, r0
}
 800adee:	4618      	mov	r0, r3
 800adf0:	371c      	adds	r7, #28
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd90      	pop	{r4, r7, pc}

0800adf6 <lps22hh_read_reg>:
  *
  */
int32_t __weak lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 800adf6:	b590      	push	{r4, r7, lr}
 800adf8:	b087      	sub	sp, #28
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	60f8      	str	r0, [r7, #12]
 800adfe:	607a      	str	r2, [r7, #4]
 800ae00:	461a      	mov	r2, r3
 800ae02:	460b      	mov	r3, r1
 800ae04:	72fb      	strb	r3, [r7, #11]
 800ae06:	4613      	mov	r3, r2
 800ae08:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	685c      	ldr	r4, [r3, #4]
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	68d8      	ldr	r0, [r3, #12]
 800ae12:	893b      	ldrh	r3, [r7, #8]
 800ae14:	7af9      	ldrb	r1, [r7, #11]
 800ae16:	687a      	ldr	r2, [r7, #4]
 800ae18:	47a0      	blx	r4
 800ae1a:	6178      	str	r0, [r7, #20]

  return ret;
 800ae1c:	697b      	ldr	r3, [r7, #20]
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	371c      	adds	r7, #28
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd90      	pop	{r4, r7, pc}

0800ae26 <lps22hh_write_reg>:
  *
  */
int32_t __weak lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 800ae26:	b590      	push	{r4, r7, lr}
 800ae28:	b087      	sub	sp, #28
 800ae2a:	af00      	add	r7, sp, #0
 800ae2c:	60f8      	str	r0, [r7, #12]
 800ae2e:	607a      	str	r2, [r7, #4]
 800ae30:	461a      	mov	r2, r3
 800ae32:	460b      	mov	r3, r1
 800ae34:	72fb      	strb	r3, [r7, #11]
 800ae36:	4613      	mov	r3, r2
 800ae38:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	681c      	ldr	r4, [r3, #0]
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	68d8      	ldr	r0, [r3, #12]
 800ae42:	893b      	ldrh	r3, [r7, #8]
 800ae44:	7af9      	ldrb	r1, [r7, #11]
 800ae46:	687a      	ldr	r2, [r7, #4]
 800ae48:	47a0      	blx	r4
 800ae4a:	6178      	str	r0, [r7, #20]

  return ret;
 800ae4c:	697b      	ldr	r3, [r7, #20]
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	371c      	adds	r7, #28
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd90      	pop	{r4, r7, pc}
	...

0800ae58 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b083      	sub	sp, #12
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	ee07 3a90 	vmov	s15, r3
 800ae66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae6a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800ae84 <lps22hh_from_lsb_to_hpa+0x2c>
 800ae6e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800ae72:	eef0 7a66 	vmov.f32	s15, s13
}
 800ae76:	eeb0 0a67 	vmov.f32	s0, s15
 800ae7a:	370c      	adds	r7, #12
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr
 800ae84:	49800000 	.word	0x49800000

0800ae88 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b083      	sub	sp, #12
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	4603      	mov	r3, r0
 800ae90:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 800ae92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ae96:	ee07 3a90 	vmov	s15, r3
 800ae9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae9e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800aeb8 <lps22hh_from_lsb_to_celsius+0x30>
 800aea2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800aea6:	eef0 7a66 	vmov.f32	s15, s13
}
 800aeaa:	eeb0 0a67 	vmov.f32	s0, s15
 800aeae:	370c      	adds	r7, #12
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb6:	4770      	bx	lr
 800aeb8:	42c80000 	.word	0x42c80000

0800aebc <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b084      	sub	sp, #16
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
 800aec4:	460b      	mov	r3, r1
 800aec6:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 800aec8:	f107 0208 	add.w	r2, r7, #8
 800aecc:	2301      	movs	r3, #1
 800aece:	2110      	movs	r1, #16
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f7ff ff90 	bl	800adf6 <lps22hh_read_reg>
 800aed6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d10f      	bne.n	800aefe <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800aede:	78fb      	ldrb	r3, [r7, #3]
 800aee0:	f003 0301 	and.w	r3, r3, #1
 800aee4:	b2da      	uxtb	r2, r3
 800aee6:	7a3b      	ldrb	r3, [r7, #8]
 800aee8:	f362 0341 	bfi	r3, r2, #1, #1
 800aeec:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 800aeee:	f107 0208 	add.w	r2, r7, #8
 800aef2:	2301      	movs	r3, #1
 800aef4:	2110      	movs	r1, #16
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f7ff ff95 	bl	800ae26 <lps22hh_write_reg>
 800aefc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800aefe:	68fb      	ldr	r3, [r7, #12]
}
 800af00:	4618      	mov	r0, r3
 800af02:	3710      	adds	r7, #16
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}

0800af08 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b086      	sub	sp, #24
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	460b      	mov	r3, r1
 800af12:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800af14:	f107 0210 	add.w	r2, r7, #16
 800af18:	2301      	movs	r3, #1
 800af1a:	2110      	movs	r1, #16
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f7ff ff6a 	bl	800adf6 <lps22hh_read_reg>
 800af22:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d107      	bne.n	800af3a <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800af2a:	f107 020c 	add.w	r2, r7, #12
 800af2e:	2301      	movs	r3, #1
 800af30:	2111      	movs	r1, #17
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f7ff ff5f 	bl	800adf6 <lps22hh_read_reg>
 800af38:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d10f      	bne.n	800af60 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 800af40:	78fb      	ldrb	r3, [r7, #3]
 800af42:	f003 0307 	and.w	r3, r3, #7
 800af46:	b2da      	uxtb	r2, r3
 800af48:	7c3b      	ldrb	r3, [r7, #16]
 800af4a:	f362 1306 	bfi	r3, r2, #4, #3
 800af4e:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800af50:	f107 0210 	add.w	r2, r7, #16
 800af54:	2301      	movs	r3, #1
 800af56:	2110      	movs	r1, #16
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f7ff ff64 	bl	800ae26 <lps22hh_write_reg>
 800af5e:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d119      	bne.n	800af9a <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 800af66:	78fb      	ldrb	r3, [r7, #3]
 800af68:	091b      	lsrs	r3, r3, #4
 800af6a:	f003 0301 	and.w	r3, r3, #1
 800af6e:	b2da      	uxtb	r2, r3
 800af70:	7b3b      	ldrb	r3, [r7, #12]
 800af72:	f362 0341 	bfi	r3, r2, #1, #1
 800af76:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 800af78:	78fb      	ldrb	r3, [r7, #3]
 800af7a:	08db      	lsrs	r3, r3, #3
 800af7c:	f003 0301 	and.w	r3, r3, #1
 800af80:	b2da      	uxtb	r2, r3
 800af82:	7b3b      	ldrb	r3, [r7, #12]
 800af84:	f362 0300 	bfi	r3, r2, #0, #1
 800af88:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800af8a:	f107 020c 	add.w	r2, r7, #12
 800af8e:	2301      	movs	r3, #1
 800af90:	2111      	movs	r1, #17
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f7ff ff47 	bl	800ae26 <lps22hh_write_reg>
 800af98:	6178      	str	r0, [r7, #20]
  }

  return ret;
 800af9a:	697b      	ldr	r3, [r7, #20]
}
 800af9c:	4618      	mov	r0, r3
 800af9e:	3718      	adds	r7, #24
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}

0800afa4 <lps22hh_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_get(stmdev_ctx_t *ctx, lps22hh_odr_t *val)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b086      	sub	sp, #24
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
 800afac:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800afae:	f107 0210 	add.w	r2, r7, #16
 800afb2:	2301      	movs	r3, #1
 800afb4:	2110      	movs	r1, #16
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f7ff ff1d 	bl	800adf6 <lps22hh_read_reg>
 800afbc:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d107      	bne.n	800afd4 <lps22hh_data_rate_get+0x30>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800afc4:	f107 020c 	add.w	r2, r7, #12
 800afc8:	2301      	movs	r3, #1
 800afca:	2111      	movs	r1, #17
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f7ff ff12 	bl	800adf6 <lps22hh_read_reg>
 800afd2:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	f040 8086 	bne.w	800b0e8 <lps22hh_data_rate_get+0x144>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800afdc:	f107 020c 	add.w	r2, r7, #12
 800afe0:	2301      	movs	r3, #1
 800afe2:	2111      	movs	r1, #17
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f7ff ff06 	bl	800adf6 <lps22hh_read_reg>
 800afea:	6178      	str	r0, [r7, #20]

    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 800afec:	7b3b      	ldrb	r3, [r7, #12]
 800afee:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800aff2:	b2db      	uxtb	r3, r3
 800aff4:	011a      	lsls	r2, r3, #4
 800aff6:	7b3b      	ldrb	r3, [r7, #12]
 800aff8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800affc:	b2db      	uxtb	r3, r3
 800affe:	00db      	lsls	r3, r3, #3
 800b000:	4413      	add	r3, r2
             ctrl_reg1.odr))
 800b002:	7c3a      	ldrb	r2, [r7, #16]
 800b004:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800b008:	b2d2      	uxtb	r2, r2
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 800b00a:	4413      	add	r3, r2
 800b00c:	2b15      	cmp	r3, #21
 800b00e:	d867      	bhi.n	800b0e0 <lps22hh_data_rate_get+0x13c>
 800b010:	a201      	add	r2, pc, #4	; (adr r2, 800b018 <lps22hh_data_rate_get+0x74>)
 800b012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b016:	bf00      	nop
 800b018:	0800b071 	.word	0x0800b071
 800b01c:	0800b081 	.word	0x0800b081
 800b020:	0800b089 	.word	0x0800b089
 800b024:	0800b091 	.word	0x0800b091
 800b028:	0800b099 	.word	0x0800b099
 800b02c:	0800b0a1 	.word	0x0800b0a1
 800b030:	0800b0d1 	.word	0x0800b0d1
 800b034:	0800b0d9 	.word	0x0800b0d9
 800b038:	0800b079 	.word	0x0800b079
 800b03c:	0800b0e1 	.word	0x0800b0e1
 800b040:	0800b0e1 	.word	0x0800b0e1
 800b044:	0800b0e1 	.word	0x0800b0e1
 800b048:	0800b0e1 	.word	0x0800b0e1
 800b04c:	0800b0e1 	.word	0x0800b0e1
 800b050:	0800b0e1 	.word	0x0800b0e1
 800b054:	0800b0e1 	.word	0x0800b0e1
 800b058:	0800b0e1 	.word	0x0800b0e1
 800b05c:	0800b0a9 	.word	0x0800b0a9
 800b060:	0800b0b1 	.word	0x0800b0b1
 800b064:	0800b0b9 	.word	0x0800b0b9
 800b068:	0800b0c1 	.word	0x0800b0c1
 800b06c:	0800b0c9 	.word	0x0800b0c9
    {
      case LPS22HH_POWER_DOWN:
        *val = LPS22HH_POWER_DOWN;
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	2200      	movs	r2, #0
 800b074:	701a      	strb	r2, [r3, #0]
        break;
 800b076:	e037      	b.n	800b0e8 <lps22hh_data_rate_get+0x144>

      case LPS22HH_ONE_SHOOT:
        *val = LPS22HH_ONE_SHOOT;
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	2208      	movs	r2, #8
 800b07c:	701a      	strb	r2, [r3, #0]
        break;
 800b07e:	e033      	b.n	800b0e8 <lps22hh_data_rate_get+0x144>

      case LPS22HH_1_Hz:
        *val = LPS22HH_1_Hz;
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	2201      	movs	r2, #1
 800b084:	701a      	strb	r2, [r3, #0]
        break;
 800b086:	e02f      	b.n	800b0e8 <lps22hh_data_rate_get+0x144>

      case LPS22HH_10_Hz:
        *val = LPS22HH_10_Hz;
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	2202      	movs	r2, #2
 800b08c:	701a      	strb	r2, [r3, #0]
        break;
 800b08e:	e02b      	b.n	800b0e8 <lps22hh_data_rate_get+0x144>

      case LPS22HH_25_Hz:
        *val = LPS22HH_25_Hz;
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	2203      	movs	r2, #3
 800b094:	701a      	strb	r2, [r3, #0]
        break;
 800b096:	e027      	b.n	800b0e8 <lps22hh_data_rate_get+0x144>

      case LPS22HH_50_Hz:
        *val = LPS22HH_50_Hz;
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	2204      	movs	r2, #4
 800b09c:	701a      	strb	r2, [r3, #0]
        break;
 800b09e:	e023      	b.n	800b0e8 <lps22hh_data_rate_get+0x144>

      case LPS22HH_75_Hz:
        *val = LPS22HH_75_Hz;
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	2205      	movs	r2, #5
 800b0a4:	701a      	strb	r2, [r3, #0]
        break;
 800b0a6:	e01f      	b.n	800b0e8 <lps22hh_data_rate_get+0x144>

      case LPS22HH_1_Hz_LOW_NOISE:
        *val = LPS22HH_1_Hz_LOW_NOISE;
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	2211      	movs	r2, #17
 800b0ac:	701a      	strb	r2, [r3, #0]
        break;
 800b0ae:	e01b      	b.n	800b0e8 <lps22hh_data_rate_get+0x144>

      case LPS22HH_10_Hz_LOW_NOISE:
        *val = LPS22HH_10_Hz_LOW_NOISE;
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	2212      	movs	r2, #18
 800b0b4:	701a      	strb	r2, [r3, #0]
        break;
 800b0b6:	e017      	b.n	800b0e8 <lps22hh_data_rate_get+0x144>

      case LPS22HH_25_Hz_LOW_NOISE:
        *val = LPS22HH_25_Hz_LOW_NOISE;
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	2213      	movs	r2, #19
 800b0bc:	701a      	strb	r2, [r3, #0]
        break;
 800b0be:	e013      	b.n	800b0e8 <lps22hh_data_rate_get+0x144>

      case LPS22HH_50_Hz_LOW_NOISE:
        *val = LPS22HH_50_Hz_LOW_NOISE;
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	2214      	movs	r2, #20
 800b0c4:	701a      	strb	r2, [r3, #0]
        break;
 800b0c6:	e00f      	b.n	800b0e8 <lps22hh_data_rate_get+0x144>

      case LPS22HH_75_Hz_LOW_NOISE:
        *val = LPS22HH_75_Hz_LOW_NOISE;
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	2215      	movs	r2, #21
 800b0cc:	701a      	strb	r2, [r3, #0]
        break;
 800b0ce:	e00b      	b.n	800b0e8 <lps22hh_data_rate_get+0x144>

      case LPS22HH_100_Hz:
        *val = LPS22HH_100_Hz;
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	2206      	movs	r2, #6
 800b0d4:	701a      	strb	r2, [r3, #0]
        break;
 800b0d6:	e007      	b.n	800b0e8 <lps22hh_data_rate_get+0x144>

      case LPS22HH_200_Hz:
        *val = LPS22HH_200_Hz;
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	2207      	movs	r2, #7
 800b0dc:	701a      	strb	r2, [r3, #0]
        break;
 800b0de:	e003      	b.n	800b0e8 <lps22hh_data_rate_get+0x144>

      default:
        *val = LPS22HH_POWER_DOWN;
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	701a      	strb	r2, [r3, #0]
        break;
 800b0e6:	bf00      	nop
    }
  }

  return ret;
 800b0e8:	697b      	ldr	r3, [r7, #20]
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	3718      	adds	r7, #24
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}
 800b0f2:	bf00      	nop

0800b0f4 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b084      	sub	sp, #16
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 800b0fe:	f107 0208 	add.w	r2, r7, #8
 800b102:	2303      	movs	r3, #3
 800b104:	2128      	movs	r1, #40	; 0x28
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f7ff fe75 	bl	800adf6 <lps22hh_read_reg>
 800b10c:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 800b10e:	7abb      	ldrb	r3, [r7, #10]
 800b110:	461a      	mov	r2, r3
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	021b      	lsls	r3, r3, #8
 800b11c:	7a7a      	ldrb	r2, [r7, #9]
 800b11e:	441a      	add	r2, r3
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	021b      	lsls	r3, r3, #8
 800b12a:	7a3a      	ldrb	r2, [r7, #8]
 800b12c:	441a      	add	r2, r3
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	021a      	lsls	r2, r3, #8
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	601a      	str	r2, [r3, #0]

  return ret;
 800b13c:	68fb      	ldr	r3, [r7, #12]
}
 800b13e:	4618      	mov	r0, r3
 800b140:	3710      	adds	r7, #16
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}

0800b146 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 800b146:	b580      	push	{r7, lr}
 800b148:	b084      	sub	sp, #16
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	6078      	str	r0, [r7, #4]
 800b14e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 800b150:	f107 0208 	add.w	r2, r7, #8
 800b154:	2302      	movs	r3, #2
 800b156:	212b      	movs	r1, #43	; 0x2b
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f7ff fe4c 	bl	800adf6 <lps22hh_read_reg>
 800b15e:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 800b160:	7a7b      	ldrb	r3, [r7, #9]
 800b162:	b21a      	sxth	r2, r3
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b16e:	b29b      	uxth	r3, r3
 800b170:	021b      	lsls	r3, r3, #8
 800b172:	b29a      	uxth	r2, r3
 800b174:	7a3b      	ldrb	r3, [r7, #8]
 800b176:	b29b      	uxth	r3, r3
 800b178:	4413      	add	r3, r2
 800b17a:	b29b      	uxth	r3, r3
 800b17c:	b21a      	sxth	r2, r3
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	801a      	strh	r2, [r3, #0]

  return ret;
 800b182:	68fb      	ldr	r3, [r7, #12]
}
 800b184:	4618      	mov	r0, r3
 800b186:	3710      	adds	r7, #16
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}

0800b18c <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b084      	sub	sp, #16
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
 800b194:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 800b196:	2301      	movs	r3, #1
 800b198:	683a      	ldr	r2, [r7, #0]
 800b19a:	210f      	movs	r1, #15
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f7ff fe2a 	bl	800adf6 <lps22hh_read_reg>
 800b1a2:	60f8      	str	r0, [r7, #12]

  return ret;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3710      	adds	r7, #16
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}

0800b1ae <lps22hh_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800b1ae:	b580      	push	{r7, lr}
 800b1b0:	b084      	sub	sp, #16
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	6078      	str	r0, [r7, #4]
 800b1b6:	460b      	mov	r3, r1
 800b1b8:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 800b1ba:	f107 0208 	add.w	r2, r7, #8
 800b1be:	2301      	movs	r3, #1
 800b1c0:	2111      	movs	r1, #17
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f7ff fe17 	bl	800adf6 <lps22hh_read_reg>
 800b1c8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d10f      	bne.n	800b1f0 <lps22hh_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 800b1d0:	78fb      	ldrb	r3, [r7, #3]
 800b1d2:	f003 0301 	and.w	r3, r3, #1
 800b1d6:	b2da      	uxtb	r2, r3
 800b1d8:	7a3b      	ldrb	r3, [r7, #8]
 800b1da:	f362 1304 	bfi	r3, r2, #4, #1
 800b1de:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 800b1e0:	f107 0208 	add.w	r2, r7, #8
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	2111      	movs	r1, #17
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f7ff fe1c 	bl	800ae26 <lps22hh_write_reg>
 800b1ee:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	3710      	adds	r7, #16
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}

0800b1fa <lps22hh_lp_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                 lps22hh_lpfp_cfg_t val)
{
 800b1fa:	b580      	push	{r7, lr}
 800b1fc:	b084      	sub	sp, #16
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	6078      	str	r0, [r7, #4]
 800b202:	460b      	mov	r3, r1
 800b204:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 800b206:	f107 0208 	add.w	r2, r7, #8
 800b20a:	2301      	movs	r3, #1
 800b20c:	2110      	movs	r1, #16
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f7ff fdf1 	bl	800adf6 <lps22hh_read_reg>
 800b214:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d10f      	bne.n	800b23c <lps22hh_lp_bandwidth_set+0x42>
  {
    reg.lpfp_cfg = (uint8_t)val;
 800b21c:	78fb      	ldrb	r3, [r7, #3]
 800b21e:	f003 0303 	and.w	r3, r3, #3
 800b222:	b2da      	uxtb	r2, r3
 800b224:	7a3b      	ldrb	r3, [r7, #8]
 800b226:	f362 0383 	bfi	r3, r2, #2, #2
 800b22a:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 800b22c:	f107 0208 	add.w	r2, r7, #8
 800b230:	2301      	movs	r3, #1
 800b232:	2110      	movs	r1, #16
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f7ff fdf6 	bl	800ae26 <lps22hh_write_reg>
 800b23a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800b23c:	68fb      	ldr	r3, [r7, #12]
}
 800b23e:	4618      	mov	r0, r3
 800b240:	3710      	adds	r7, #16
 800b242:	46bd      	mov	sp, r7
 800b244:	bd80      	pop	{r7, pc}

0800b246 <lps22hh_i3c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_i3c_interface_set(stmdev_ctx_t *ctx,
                                  lps22hh_i3c_disable_t val)
{
 800b246:	b580      	push	{r7, lr}
 800b248:	b084      	sub	sp, #16
 800b24a:	af00      	add	r7, sp, #0
 800b24c:	6078      	str	r0, [r7, #4]
 800b24e:	460b      	mov	r3, r1
 800b250:	70fb      	strb	r3, [r7, #3]
  lps22hh_if_ctrl_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 800b252:	f107 0208 	add.w	r2, r7, #8
 800b256:	2301      	movs	r3, #1
 800b258:	210e      	movs	r1, #14
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f7ff fdcb 	bl	800adf6 <lps22hh_read_reg>
 800b260:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d118      	bne.n	800b29a <lps22hh_i3c_interface_set+0x54>
  {
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 800b268:	78fb      	ldrb	r3, [r7, #3]
 800b26a:	f003 0301 	and.w	r3, r3, #1
 800b26e:	b2da      	uxtb	r2, r3
 800b270:	7a3b      	ldrb	r3, [r7, #8]
 800b272:	f362 0341 	bfi	r3, r2, #1, #1
 800b276:	723b      	strb	r3, [r7, #8]
    reg.int_en_i3c = ((uint8_t)val & 0x10U) >> 4;
 800b278:	78fb      	ldrb	r3, [r7, #3]
 800b27a:	091b      	lsrs	r3, r3, #4
 800b27c:	f003 0301 	and.w	r3, r3, #1
 800b280:	b2da      	uxtb	r2, r3
 800b282:	7a3b      	ldrb	r3, [r7, #8]
 800b284:	f362 13c7 	bfi	r3, r2, #7, #1
 800b288:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 800b28a:	f107 0208 	add.w	r2, r7, #8
 800b28e:	2301      	movs	r3, #1
 800b290:	210e      	movs	r1, #14
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f7ff fdc7 	bl	800ae26 <lps22hh_write_reg>
 800b298:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800b29a:	68fb      	ldr	r3, [r7, #12]
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	3710      	adds	r7, #16
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd80      	pop	{r7, pc}

0800b2a4 <M24256_RegisterBusIO>:
  * @brief  Function
  * @param  Component object pointer
  * @retval Component status
  */
int32_t M24256_RegisterBusIO(M24256_Object_t *pObj, M24256_IO_t *pIO)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b084      	sub	sp, #16
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
 800b2ac:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d103      	bne.n	800b2bc <M24256_RegisterBusIO+0x18>
  {
    ret = M24256_ERROR;
 800b2b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b2b8:	60fb      	str	r3, [r7, #12]
 800b2ba:	e02f      	b.n	800b31c <M24256_RegisterBusIO+0x78>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	681a      	ldr	r2, [r3, #0]
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	685a      	ldr	r2, [r3, #4]
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	891a      	ldrh	r2, [r3, #8]
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	811a      	strh	r2, [r3, #8]
    pObj->IO.Write     = pIO->Write;
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	68da      	ldr	r2, [r3, #12]
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	60da      	str	r2, [r3, #12]
    pObj->IO.Read      = pIO->Read;
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	691a      	ldr	r2, [r3, #16]
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	611a      	str	r2, [r3, #16]
    pObj->IO.IsReady   = pIO->IsReady;
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	695a      	ldr	r2, [r3, #20]
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	615a      	str	r2, [r3, #20]

    pObj->Ctx.Read     = M24256_ReadWrap;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	4a0e      	ldr	r2, [pc, #56]	; (800b328 <M24256_RegisterBusIO+0x84>)
 800b2f0:	621a      	str	r2, [r3, #32]
    pObj->Ctx.Write    = M24256_WriteWrap;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	4a0d      	ldr	r2, [pc, #52]	; (800b32c <M24256_RegisterBusIO+0x88>)
 800b2f6:	61da      	str	r2, [r3, #28]
    pObj->Ctx.IsReady  = M24256_IsReadyWrap;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	4a0d      	ldr	r2, [pc, #52]	; (800b330 <M24256_RegisterBusIO+0x8c>)
 800b2fc:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.handle   = pObj;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	687a      	ldr	r2, [r7, #4]
 800b302:	629a      	str	r2, [r3, #40]	; 0x28

    if (pObj->IO.Init != NULL)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d004      	beq.n	800b316 <M24256_RegisterBusIO+0x72>
    {
      ret = pObj->IO.Init();
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	4798      	blx	r3
 800b312:	60f8      	str	r0, [r7, #12]
 800b314:	e002      	b.n	800b31c <M24256_RegisterBusIO+0x78>
    }
    else
    {
      ret = M24256_ERROR;
 800b316:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b31a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800b31c:	68fb      	ldr	r3, [r7, #12]
}
 800b31e:	4618      	mov	r0, r3
 800b320:	3710      	adds	r7, #16
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}
 800b326:	bf00      	nop
 800b328:	0800b405 	.word	0x0800b405
 800b32c:	0800b437 	.word	0x0800b437
 800b330:	0800b469 	.word	0x0800b469

0800b334 <M24256_Init>:
  * @brief  Initializes the M24256 EEPROM component.
  * @param  pObj  M24256 object
  * @retval Component status
  */
int32_t M24256_Init(M24256_Object_t *pObj)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b082      	sub	sp, #8
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  if (pObj->IsInitialized != 1U)
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b342:	2b01      	cmp	r3, #1
 800b344:	d006      	beq.n	800b354 <M24256_Init+0x20>
  {
    pObj->IO.Init();
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	4798      	blx	r3
    pObj->IsInitialized = 1U;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2201      	movs	r2, #1
 800b350:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  return M24256_OK;
 800b354:	2300      	movs	r3, #0
}
 800b356:	4618      	mov	r0, r3
 800b358:	3708      	adds	r7, #8
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}

0800b35e <M24256_DeInit>:
  * @brief  DeInitializes the M24256 EEPROM component.
  * @param  pObj  M24256 object
  * @retval Component status
  */
int32_t M24256_DeInit(M24256_Object_t *pObj)
{
 800b35e:	b480      	push	{r7}
 800b360:	b083      	sub	sp, #12
 800b362:	af00      	add	r7, sp, #0
 800b364:	6078      	str	r0, [r7, #4]
  if (pObj->IsInitialized != 0U)
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d003      	beq.n	800b378 <M24256_DeInit+0x1a>
  {
    pObj->IsInitialized = 0U;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2200      	movs	r2, #0
 800b374:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  return M24256_OK;
 800b378:	2300      	movs	r3, #0
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	370c      	adds	r7, #12
 800b37e:	46bd      	mov	sp, r7
 800b380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b384:	4770      	bx	lr

0800b386 <M24256_Write>:
  * @brief  DeInitializes the M24256 EEPROM component.
  * @param  pObj  M24256 object
  * @retval Component status
  */
int32_t M24256_Write(const M24256_Object_t *pObj, uint16_t Addr, uint8_t *pData, uint16_t Length)
{
 800b386:	b590      	push	{r4, r7, lr}
 800b388:	b085      	sub	sp, #20
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	60f8      	str	r0, [r7, #12]
 800b38e:	607a      	str	r2, [r7, #4]
 800b390:	461a      	mov	r2, r3
 800b392:	460b      	mov	r3, r1
 800b394:	817b      	strh	r3, [r7, #10]
 800b396:	4613      	mov	r3, r2
 800b398:	813b      	strh	r3, [r7, #8]
  return pObj->Ctx.Write(pObj->Ctx.handle, Addr, pData, Length);
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	69dc      	ldr	r4, [r3, #28]
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800b3a2:	893b      	ldrh	r3, [r7, #8]
 800b3a4:	8979      	ldrh	r1, [r7, #10]
 800b3a6:	687a      	ldr	r2, [r7, #4]
 800b3a8:	47a0      	blx	r4
 800b3aa:	4603      	mov	r3, r0
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3714      	adds	r7, #20
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd90      	pop	{r4, r7, pc}

0800b3b4 <M24256_Read>:
  * @brief  DeInitializes the M24256 EEPROM component.
  * @param  pObj  M24256 object
  * @retval Component status
  */
int32_t M24256_Read(const M24256_Object_t *pObj, uint16_t Addr, uint8_t *pData, uint16_t Length)
{
 800b3b4:	b590      	push	{r4, r7, lr}
 800b3b6:	b085      	sub	sp, #20
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	60f8      	str	r0, [r7, #12]
 800b3bc:	607a      	str	r2, [r7, #4]
 800b3be:	461a      	mov	r2, r3
 800b3c0:	460b      	mov	r3, r1
 800b3c2:	817b      	strh	r3, [r7, #10]
 800b3c4:	4613      	mov	r3, r2
 800b3c6:	813b      	strh	r3, [r7, #8]
  return pObj->Ctx.Read(pObj->Ctx.handle, Addr, pData, Length);
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	6a1c      	ldr	r4, [r3, #32]
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800b3d0:	893b      	ldrh	r3, [r7, #8]
 800b3d2:	8979      	ldrh	r1, [r7, #10]
 800b3d4:	687a      	ldr	r2, [r7, #4]
 800b3d6:	47a0      	blx	r4
 800b3d8:	4603      	mov	r3, r0
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	3714      	adds	r7, #20
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd90      	pop	{r4, r7, pc}

0800b3e2 <M24256_IsReady>:
  * @param  pObj  M24256 object
  * @param  Trials  The number of trials before returning a timeout error
  * @retval Component status
  */
int32_t M24256_IsReady(const M24256_Object_t *pObj, uint32_t Trials)
{
 800b3e2:	b580      	push	{r7, lr}
 800b3e4:	b082      	sub	sp, #8
 800b3e6:	af00      	add	r7, sp, #0
 800b3e8:	6078      	str	r0, [r7, #4]
 800b3ea:	6039      	str	r1, [r7, #0]
  return pObj->Ctx.IsReady(pObj->Ctx.handle, Trials);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3f0:	687a      	ldr	r2, [r7, #4]
 800b3f2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800b3f4:	6839      	ldr	r1, [r7, #0]
 800b3f6:	4610      	mov	r0, r2
 800b3f8:	4798      	blx	r3
 800b3fa:	4603      	mov	r3, r0
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	3708      	adds	r7, #8
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}

0800b404 <M24256_ReadWrap>:
  * @param  pData  The target register value to be written
  * @param  Length Buffer size to be written
  * @retval Component status
  */
static int32_t M24256_ReadWrap(const void *handle, uint16_t Addr, uint8_t *pData, uint16_t Length)
{
 800b404:	b590      	push	{r4, r7, lr}
 800b406:	b087      	sub	sp, #28
 800b408:	af00      	add	r7, sp, #0
 800b40a:	60f8      	str	r0, [r7, #12]
 800b40c:	607a      	str	r2, [r7, #4]
 800b40e:	461a      	mov	r2, r3
 800b410:	460b      	mov	r3, r1
 800b412:	817b      	strh	r3, [r7, #10]
 800b414:	4613      	mov	r3, r2
 800b416:	813b      	strh	r3, [r7, #8]
  /* Derogation MISRAC2012-Rule-11.5 */
  const M24256_Object_t *pObj = (const M24256_Object_t *)handle;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	617b      	str	r3, [r7, #20]

  return pObj->IO.Read(pObj->IO.Address, Addr, pData, Length);
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	691c      	ldr	r4, [r3, #16]
 800b420:	697b      	ldr	r3, [r7, #20]
 800b422:	8918      	ldrh	r0, [r3, #8]
 800b424:	893b      	ldrh	r3, [r7, #8]
 800b426:	8979      	ldrh	r1, [r7, #10]
 800b428:	687a      	ldr	r2, [r7, #4]
 800b42a:	47a0      	blx	r4
 800b42c:	4603      	mov	r3, r0
}
 800b42e:	4618      	mov	r0, r3
 800b430:	371c      	adds	r7, #28
 800b432:	46bd      	mov	sp, r7
 800b434:	bd90      	pop	{r4, r7, pc}

0800b436 <M24256_WriteWrap>:
  * @param  pData   The target register value to be written
  * @param  Length  Buffer size to be written
  * @retval Component status
  */
static int32_t M24256_WriteWrap(const void *handle, uint16_t Addr, uint8_t *pData, uint16_t Length)
{
 800b436:	b590      	push	{r4, r7, lr}
 800b438:	b087      	sub	sp, #28
 800b43a:	af00      	add	r7, sp, #0
 800b43c:	60f8      	str	r0, [r7, #12]
 800b43e:	607a      	str	r2, [r7, #4]
 800b440:	461a      	mov	r2, r3
 800b442:	460b      	mov	r3, r1
 800b444:	817b      	strh	r3, [r7, #10]
 800b446:	4613      	mov	r3, r2
 800b448:	813b      	strh	r3, [r7, #8]
  /* Derogation MISRAC2012-Rule-11.5 */
  const M24256_Object_t *pObj = (const M24256_Object_t *)handle;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	617b      	str	r3, [r7, #20]

  return pObj->IO.Write(pObj->IO.Address, Addr, pData, Length);
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	68dc      	ldr	r4, [r3, #12]
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	8918      	ldrh	r0, [r3, #8]
 800b456:	893b      	ldrh	r3, [r7, #8]
 800b458:	8979      	ldrh	r1, [r7, #10]
 800b45a:	687a      	ldr	r2, [r7, #4]
 800b45c:	47a0      	blx	r4
 800b45e:	4603      	mov	r3, r0
}
 800b460:	4618      	mov	r0, r3
 800b462:	371c      	adds	r7, #28
 800b464:	46bd      	mov	sp, r7
 800b466:	bd90      	pop	{r4, r7, pc}

0800b468 <M24256_IsReadyWrap>:
  * @param  handle  Component object handle
  * @param  Trials  The number of trials before returning a timeout error
  * @retval Component status
  */
static int32_t M24256_IsReadyWrap(const void *handle, uint32_t Trials)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b084      	sub	sp, #16
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	6039      	str	r1, [r7, #0]
  /* Derogation MISRAC2012-Rule-11.5 */
  const M24256_Object_t *pObj = (const M24256_Object_t *)handle;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	60fb      	str	r3, [r7, #12]

  return pObj->IO.IsReady(pObj->IO.Address, Trials);
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	695b      	ldr	r3, [r3, #20]
 800b47a:	68fa      	ldr	r2, [r7, #12]
 800b47c:	8912      	ldrh	r2, [r2, #8]
 800b47e:	6839      	ldr	r1, [r7, #0]
 800b480:	4610      	mov	r0, r2
 800b482:	4798      	blx	r3
 800b484:	4603      	mov	r3, r0
}
 800b486:	4618      	mov	r0, r3
 800b488:	3710      	adds	r7, #16
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}

0800b48e <MX25LM51245G_GetFlashInfo>:
  * @brief  Get Flash information
  * @param  pInfo pointer to information structure
  * @retval error status
  */
int32_t MX25LM51245G_GetFlashInfo(MX25LM51245G_Info_t *pInfo)
{
 800b48e:	b480      	push	{r7}
 800b490:	b083      	sub	sp, #12
 800b492:	af00      	add	r7, sp, #0
 800b494:	6078      	str	r0, [r7, #4]
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25LM51245G_FLASH_SIZE;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800b49c:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b4a4:	605a      	str	r2, [r3, #4]
  pInfo->EraseSectorsNumber     = (MX25LM51245G_FLASH_SIZE / MX25LM51245G_SECTOR_64K);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b4ac:	609a      	str	r2, [r3, #8]
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b4b4:	60da      	str	r2, [r3, #12]
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE / MX25LM51245G_SUBSECTOR_4K);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b4bc:	611a      	str	r2, [r3, #16]
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b4c4:	615a      	str	r2, [r3, #20]
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE / MX25LM51245G_SUBSECTOR_4K);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b4cc:	619a      	str	r2, [r3, #24]
  pInfo->ProgPageSize           = MX25LM51245G_PAGE_SIZE;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b4d4:	61da      	str	r2, [r3, #28]
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE / MX25LM51245G_PAGE_SIZE);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800b4dc:	621a      	str	r2, [r3, #32]

  return MX25LM51245G_OK;
 800b4de:	2300      	movs	r3, #0
};
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	370c      	adds	r7, #12
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ea:	4770      	bx	lr

0800b4ec <MX25LM51245G_AutoPollingMemReady>:
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25LM51245G_AutoPollingMemReady(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode,
                                         MX25LM51245G_Transfer_t Rate)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b09c      	sub	sp, #112	; 0x70
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
 800b4f4:	460b      	mov	r3, r1
 800b4f6:	70fb      	strb	r3, [r7, #3]
 800b4f8:	4613      	mov	r3, r2
 800b4fa:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef  s_command = {0};
 800b4fc:	f107 0320 	add.w	r3, r7, #32
 800b500:	2250      	movs	r2, #80	; 0x50
 800b502:	2100      	movs	r1, #0
 800b504:	4618      	mov	r0, r3
 800b506:	f012 f9db 	bl	801d8c0 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 800b50a:	f107 030c 	add.w	r3, r7, #12
 800b50e:	2200      	movs	r2, #0
 800b510:	601a      	str	r2, [r3, #0]
 800b512:	605a      	str	r2, [r3, #4]
 800b514:	609a      	str	r2, [r3, #8]
 800b516:	60da      	str	r2, [r3, #12]
 800b518:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800b51a:	78fb      	ldrb	r3, [r7, #3]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d105      	bne.n	800b52c <MX25LM51245G_AutoPollingMemReady+0x40>
 800b520:	78bb      	ldrb	r3, [r7, #2]
 800b522:	2b01      	cmp	r3, #1
 800b524:	d102      	bne.n	800b52c <MX25LM51245G_AutoPollingMemReady+0x40>
  {
    return MX25LM51245G_ERROR;
 800b526:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b52a:	e08d      	b.n	800b648 <MX25LM51245G_AutoPollingMemReady+0x15c>
  }

  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800b52c:	2300      	movs	r3, #0
 800b52e:	623b      	str	r3, [r7, #32]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800b530:	2300      	movs	r3, #0
 800b532:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_OSPI_INSTRUCTION_1_LINE
                                 : HAL_OSPI_INSTRUCTION_8_LINES;
 800b534:	78fb      	ldrb	r3, [r7, #3]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d101      	bne.n	800b53e <MX25LM51245G_AutoPollingMemReady+0x52>
 800b53a:	2301      	movs	r3, #1
 800b53c:	e000      	b.n	800b540 <MX25LM51245G_AutoPollingMemReady+0x54>
 800b53e:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
 800b540:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER)
                                 ? HAL_OSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800b542:	78bb      	ldrb	r3, [r7, #2]
 800b544:	2b01      	cmp	r3, #1
 800b546:	d101      	bne.n	800b54c <MX25LM51245G_AutoPollingMemReady+0x60>
 800b548:	2308      	movs	r3, #8
 800b54a:	e000      	b.n	800b54e <MX25LM51245G_AutoPollingMemReady+0x62>
 800b54c:	2300      	movs	r3, #0
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER)
 800b54e:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_OSPI_INSTRUCTION_8_BITS
                                 : HAL_OSPI_INSTRUCTION_16_BITS;
 800b550:	78fb      	ldrb	r3, [r7, #3]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d101      	bne.n	800b55a <MX25LM51245G_AutoPollingMemReady+0x6e>
 800b556:	2300      	movs	r3, #0
 800b558:	e000      	b.n	800b55c <MX25LM51245G_AutoPollingMemReady+0x70>
 800b55a:	2310      	movs	r3, #16
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE)
 800b55c:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
                                 ? MX25LM51245G_READ_STATUS_REG_CMD
                                 : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 800b55e:	78fb      	ldrb	r3, [r7, #3]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d101      	bne.n	800b568 <MX25LM51245G_AutoPollingMemReady+0x7c>
 800b564:	2305      	movs	r3, #5
 800b566:	e001      	b.n	800b56c <MX25LM51245G_AutoPollingMemReady+0x80>
 800b568:	f240 53fa 	movw	r3, #1530	; 0x5fa
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
 800b56c:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 800b56e:	78fb      	ldrb	r3, [r7, #3]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d101      	bne.n	800b578 <MX25LM51245G_AutoPollingMemReady+0x8c>
 800b574:	2300      	movs	r3, #0
 800b576:	e001      	b.n	800b57c <MX25LM51245G_AutoPollingMemReady+0x90>
 800b578:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b57c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER)
                                 ? HAL_OSPI_ADDRESS_DTR_ENABLE
                                 : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800b57e:	78bb      	ldrb	r3, [r7, #2]
 800b580:	2b01      	cmp	r3, #1
 800b582:	d102      	bne.n	800b58a <MX25LM51245G_AutoPollingMemReady+0x9e>
 800b584:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b588:	e000      	b.n	800b58c <MX25LM51245G_AutoPollingMemReady+0xa0>
 800b58a:	2300      	movs	r3, #0
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER)
 800b58c:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800b58e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800b592:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Address            = 0U;
 800b594:	2300      	movs	r3, #0
 800b596:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800b598:	2300      	movs	r3, #0
 800b59a:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800b59c:	78fb      	ldrb	r3, [r7, #3]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d102      	bne.n	800b5a8 <MX25LM51245G_AutoPollingMemReady+0xbc>
 800b5a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b5a6:	e001      	b.n	800b5ac <MX25LM51245G_AutoPollingMemReady+0xc0>
 800b5a8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b5ac:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER)
                                 ? HAL_OSPI_DATA_DTR_ENABLE
                                 : HAL_OSPI_DATA_DTR_DISABLE;
 800b5ae:	78bb      	ldrb	r3, [r7, #2]
 800b5b0:	2b01      	cmp	r3, #1
 800b5b2:	d102      	bne.n	800b5ba <MX25LM51245G_AutoPollingMemReady+0xce>
 800b5b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b5b8:	e000      	b.n	800b5bc <MX25LM51245G_AutoPollingMemReady+0xd0>
 800b5ba:	2300      	movs	r3, #0
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER)
 800b5bc:	663b      	str	r3, [r7, #96]	; 0x60
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE)
                                 ? 0U
                                 : ((Rate == MX25LM51245G_DTR_TRANSFER)
 800b5be:	78fb      	ldrb	r3, [r7, #3]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d006      	beq.n	800b5d2 <MX25LM51245G_AutoPollingMemReady+0xe6>
 800b5c4:	78bb      	ldrb	r3, [r7, #2]
 800b5c6:	2b01      	cmp	r3, #1
 800b5c8:	d101      	bne.n	800b5ce <MX25LM51245G_AutoPollingMemReady+0xe2>
 800b5ca:	2305      	movs	r3, #5
 800b5cc:	e002      	b.n	800b5d4 <MX25LM51245G_AutoPollingMemReady+0xe8>
 800b5ce:	2304      	movs	r3, #4
 800b5d0:	e000      	b.n	800b5d4 <MX25LM51245G_AutoPollingMemReady+0xe8>
 800b5d2:	2300      	movs	r3, #0
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE)
 800b5d4:	667b      	str	r3, [r7, #100]	; 0x64
                                    ? DUMMY_CYCLES_REG_OCTAL_DTR
                                    : DUMMY_CYCLES_REG_OCTAL);
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 800b5d6:	78bb      	ldrb	r3, [r7, #2]
 800b5d8:	2b01      	cmp	r3, #1
 800b5da:	d101      	bne.n	800b5e0 <MX25LM51245G_AutoPollingMemReady+0xf4>
 800b5dc:	2302      	movs	r3, #2
 800b5de:	e000      	b.n	800b5e2 <MX25LM51245G_AutoPollingMemReady+0xf6>
 800b5e0:	2301      	movs	r3, #1
 800b5e2:	65fb      	str	r3, [r7, #92]	; 0x5c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 800b5e4:	78bb      	ldrb	r3, [r7, #2]
 800b5e6:	2b01      	cmp	r3, #1
 800b5e8:	d102      	bne.n	800b5f0 <MX25LM51245G_AutoPollingMemReady+0x104>
 800b5ea:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800b5ee:	e000      	b.n	800b5f2 <MX25LM51245G_AutoPollingMemReady+0x106>
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	66bb      	str	r3, [r7, #104]	; 0x68
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	66fb      	str	r3, [r7, #108]	; 0x6c

  s_config.Match         = 0U;
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	60fb      	str	r3, [r7, #12]
  s_config.Mask          = MX25LM51245G_SR_WIP;
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	613b      	str	r3, [r7, #16]
  s_config.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 800b600:	2300      	movs	r3, #0
 800b602:	617b      	str	r3, [r7, #20]
  s_config.Interval      = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 800b604:	2310      	movs	r3, #16
 800b606:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 800b608:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b60c:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b60e:	f107 0320 	add.w	r3, r7, #32
 800b612:	f241 3288 	movw	r2, #5000	; 0x1388
 800b616:	4619      	mov	r1, r3
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f00a fc8c 	bl	8015f36 <HAL_OSPI_Command>
 800b61e:	4603      	mov	r3, r0
 800b620:	2b00      	cmp	r3, #0
 800b622:	d002      	beq.n	800b62a <MX25LM51245G_AutoPollingMemReady+0x13e>
  {
    return MX25LM51245G_ERROR;
 800b624:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b628:	e00e      	b.n	800b648 <MX25LM51245G_AutoPollingMemReady+0x15c>
  }

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b62a:	f107 030c 	add.w	r3, r7, #12
 800b62e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b632:	4619      	mov	r1, r3
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f00a fe21 	bl	801627c <HAL_OSPI_AutoPolling>
 800b63a:	4603      	mov	r3, r0
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d002      	beq.n	800b646 <MX25LM51245G_AutoPollingMemReady+0x15a>
  {
    return MX25LM51245G_ERROR;
 800b640:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b644:	e000      	b.n	800b648 <MX25LM51245G_AutoPollingMemReady+0x15c>
  }

  return MX25LM51245G_OK;
 800b646:	2300      	movs	r3, #0
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3770      	adds	r7, #112	; 0x70
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}

0800b650 <MX25LM51245G_ReadSTR>:
  * @param  Size Size of data to read
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_ReadSTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode,
                             MX25LM51245G_AddressSize_t AddressSize, uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b098      	sub	sp, #96	; 0x60
 800b654:	af00      	add	r7, sp, #0
 800b656:	60f8      	str	r0, [r7, #12]
 800b658:	607b      	str	r3, [r7, #4]
 800b65a:	460b      	mov	r3, r1
 800b65c:	72fb      	strb	r3, [r7, #11]
 800b65e:	4613      	mov	r3, r2
 800b660:	72bb      	strb	r3, [r7, #10]
  OSPI_RegularCmdTypeDef s_command = {0};
 800b662:	f107 0310 	add.w	r3, r7, #16
 800b666:	2250      	movs	r2, #80	; 0x50
 800b668:	2100      	movs	r1, #0
 800b66a:	4618      	mov	r0, r3
 800b66c:	f012 f928 	bl	801d8c0 <memset>

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 800b670:	7afb      	ldrb	r3, [r7, #11]
 800b672:	2b01      	cmp	r3, #1
 800b674:	d105      	bne.n	800b682 <MX25LM51245G_ReadSTR+0x32>
 800b676:	7abb      	ldrb	r3, [r7, #10]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d102      	bne.n	800b682 <MX25LM51245G_ReadSTR+0x32>
  {
    return MX25LM51245G_ERROR;
 800b67c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b680:	e06b      	b.n	800b75a <MX25LM51245G_ReadSTR+0x10a>
  }

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800b682:	2300      	movs	r3, #0
 800b684:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800b686:	2300      	movs	r3, #0
 800b688:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_OSPI_INSTRUCTION_1_LINE
                                 : HAL_OSPI_INSTRUCTION_8_LINES;
 800b68a:	7afb      	ldrb	r3, [r7, #11]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d101      	bne.n	800b694 <MX25LM51245G_ReadSTR+0x44>
 800b690:	2301      	movs	r3, #1
 800b692:	e000      	b.n	800b696 <MX25LM51245G_ReadSTR+0x46>
 800b694:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
 800b696:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800b698:	2300      	movs	r3, #0
 800b69a:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_OSPI_INSTRUCTION_8_BITS
                                 : HAL_OSPI_INSTRUCTION_16_BITS;
 800b69c:	7afb      	ldrb	r3, [r7, #11]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d101      	bne.n	800b6a6 <MX25LM51245G_ReadSTR+0x56>
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	e000      	b.n	800b6a8 <MX25LM51245G_ReadSTR+0x58>
 800b6a6:	2310      	movs	r3, #16
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE)
 800b6a8:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
                                 ? ((AddressSize == MX25LM51245G_3BYTES_SIZE)
                                    ? MX25LM51245G_FAST_READ_CMD
                                    : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD)
                                 : MX25LM51245G_OCTA_READ_CMD;
 800b6aa:	7afb      	ldrb	r3, [r7, #11]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d106      	bne.n	800b6be <MX25LM51245G_ReadSTR+0x6e>
 800b6b0:	7abb      	ldrb	r3, [r7, #10]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d101      	bne.n	800b6ba <MX25LM51245G_ReadSTR+0x6a>
 800b6b6:	230b      	movs	r3, #11
 800b6b8:	e003      	b.n	800b6c2 <MX25LM51245G_ReadSTR+0x72>
 800b6ba:	230c      	movs	r3, #12
 800b6bc:	e001      	b.n	800b6c2 <MX25LM51245G_ReadSTR+0x72>
 800b6be:	f64e 4313 	movw	r3, #60435	; 0xec13
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
 800b6c2:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_OSPI_ADDRESS_1_LINE
                                 : HAL_OSPI_ADDRESS_8_LINES;
 800b6c4:	7afb      	ldrb	r3, [r7, #11]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d102      	bne.n	800b6d0 <MX25LM51245G_ReadSTR+0x80>
 800b6ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6ce:	e001      	b.n	800b6d4 <MX25LM51245G_ReadSTR+0x84>
 800b6d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE)
 800b6d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE)
                                 ? HAL_OSPI_ADDRESS_24_BITS
                                 : HAL_OSPI_ADDRESS_32_BITS;
 800b6da:	7abb      	ldrb	r3, [r7, #10]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d102      	bne.n	800b6e6 <MX25LM51245G_ReadSTR+0x96>
 800b6e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b6e4:	e001      	b.n	800b6ea <MX25LM51245G_ReadSTR+0x9a>
 800b6e6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE)
 800b6ea:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Address            = ReadAddr;
 800b6ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b6ee:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800b6f4:	7afb      	ldrb	r3, [r7, #11]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d102      	bne.n	800b700 <MX25LM51245G_ReadSTR+0xb0>
 800b6fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b6fe:	e001      	b.n	800b704 <MX25LM51245G_ReadSTR+0xb4>
 800b700:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b704:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 800b706:	2300      	movs	r3, #0
 800b708:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 800b70a:	7afb      	ldrb	r3, [r7, #11]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d101      	bne.n	800b714 <MX25LM51245G_ReadSTR+0xc4>
 800b710:	2308      	movs	r3, #8
 800b712:	e000      	b.n	800b716 <MX25LM51245G_ReadSTR+0xc6>
 800b714:	2306      	movs	r3, #6
 800b716:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.NbData             = Size;
 800b718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b71a:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800b71c:	2300      	movs	r3, #0
 800b71e:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800b720:	2300      	movs	r3, #0
 800b722:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b724:	f107 0310 	add.w	r3, r7, #16
 800b728:	f241 3288 	movw	r2, #5000	; 0x1388
 800b72c:	4619      	mov	r1, r3
 800b72e:	68f8      	ldr	r0, [r7, #12]
 800b730:	f00a fc01 	bl	8015f36 <HAL_OSPI_Command>
 800b734:	4603      	mov	r3, r0
 800b736:	2b00      	cmp	r3, #0
 800b738:	d002      	beq.n	800b740 <MX25LM51245G_ReadSTR+0xf0>
  {
    return MX25LM51245G_ERROR;
 800b73a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b73e:	e00c      	b.n	800b75a <MX25LM51245G_ReadSTR+0x10a>
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(Ctx, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b740:	f241 3288 	movw	r2, #5000	; 0x1388
 800b744:	6879      	ldr	r1, [r7, #4]
 800b746:	68f8      	ldr	r0, [r7, #12]
 800b748:	f00a fcf5 	bl	8016136 <HAL_OSPI_Receive>
 800b74c:	4603      	mov	r3, r0
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d002      	beq.n	800b758 <MX25LM51245G_ReadSTR+0x108>
  {
    return MX25LM51245G_ERROR;
 800b752:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b756:	e000      	b.n	800b75a <MX25LM51245G_ReadSTR+0x10a>
  }

  return MX25LM51245G_OK;
 800b758:	2300      	movs	r3, #0
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	3760      	adds	r7, #96	; 0x60
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}

0800b762 <MX25LM51245G_ReadDTR>:
  * @param  Size Size of data to read
  * @note   Only OPI mode support DTR transfer rate
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_ReadDTR(OSPI_HandleTypeDef *Ctx, uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 800b762:	b580      	push	{r7, lr}
 800b764:	b098      	sub	sp, #96	; 0x60
 800b766:	af00      	add	r7, sp, #0
 800b768:	60f8      	str	r0, [r7, #12]
 800b76a:	60b9      	str	r1, [r7, #8]
 800b76c:	607a      	str	r2, [r7, #4]
 800b76e:	603b      	str	r3, [r7, #0]
  OSPI_RegularCmdTypeDef s_command = {0};
 800b770:	f107 0310 	add.w	r3, r7, #16
 800b774:	2250      	movs	r2, #80	; 0x50
 800b776:	2100      	movs	r1, #0
 800b778:	4618      	mov	r0, r3
 800b77a:	f012 f8a1 	bl	801d8c0 <memset>

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800b77e:	2300      	movs	r3, #0
 800b780:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800b782:	2300      	movs	r3, #0
 800b784:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 800b786:	2304      	movs	r3, #4
 800b788:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
 800b78a:	2308      	movs	r3, #8
 800b78c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 800b78e:	2310      	movs	r3, #16
 800b790:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 800b792:	f64e 6311 	movw	r3, #60945	; 0xee11
 800b796:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 800b798:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b79c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 800b79e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b7a2:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800b7a4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800b7a8:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Address            = ReadAddr;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 800b7b2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b7b6:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 800b7b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b7bc:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 800b7be:	2306      	movs	r3, #6
 800b7c0:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.NbData             = Size;
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
 800b7c6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800b7ca:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b7d0:	f107 0310 	add.w	r3, r7, #16
 800b7d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7d8:	4619      	mov	r1, r3
 800b7da:	68f8      	ldr	r0, [r7, #12]
 800b7dc:	f00a fbab 	bl	8015f36 <HAL_OSPI_Command>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d002      	beq.n	800b7ec <MX25LM51245G_ReadDTR+0x8a>
  {
    return MX25LM51245G_ERROR;
 800b7e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b7ea:	e00c      	b.n	800b806 <MX25LM51245G_ReadDTR+0xa4>
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(Ctx, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b7ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7f0:	68b9      	ldr	r1, [r7, #8]
 800b7f2:	68f8      	ldr	r0, [r7, #12]
 800b7f4:	f00a fc9f 	bl	8016136 <HAL_OSPI_Receive>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d002      	beq.n	800b804 <MX25LM51245G_ReadDTR+0xa2>
  {
    return MX25LM51245G_ERROR;
 800b7fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b802:	e000      	b.n	800b806 <MX25LM51245G_ReadDTR+0xa4>
  }

  return MX25LM51245G_OK;
 800b804:	2300      	movs	r3, #0
}
 800b806:	4618      	mov	r0, r3
 800b808:	3760      	adds	r7, #96	; 0x60
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}

0800b80e <MX25LM51245G_PageProgram>:
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_PageProgram(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode,
                                 MX25LM51245G_AddressSize_t AddressSize, uint8_t *pData, uint32_t WriteAddr,
                                 uint32_t Size)
{
 800b80e:	b580      	push	{r7, lr}
 800b810:	b098      	sub	sp, #96	; 0x60
 800b812:	af00      	add	r7, sp, #0
 800b814:	60f8      	str	r0, [r7, #12]
 800b816:	607b      	str	r3, [r7, #4]
 800b818:	460b      	mov	r3, r1
 800b81a:	72fb      	strb	r3, [r7, #11]
 800b81c:	4613      	mov	r3, r2
 800b81e:	72bb      	strb	r3, [r7, #10]
  OSPI_RegularCmdTypeDef s_command = {0};
 800b820:	f107 0310 	add.w	r3, r7, #16
 800b824:	2250      	movs	r2, #80	; 0x50
 800b826:	2100      	movs	r1, #0
 800b828:	4618      	mov	r0, r3
 800b82a:	f012 f849 	bl	801d8c0 <memset>

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 800b82e:	7afb      	ldrb	r3, [r7, #11]
 800b830:	2b01      	cmp	r3, #1
 800b832:	d105      	bne.n	800b840 <MX25LM51245G_PageProgram+0x32>
 800b834:	7abb      	ldrb	r3, [r7, #10]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d102      	bne.n	800b840 <MX25LM51245G_PageProgram+0x32>
  {
    return MX25LM51245G_ERROR;
 800b83a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b83e:	e066      	b.n	800b90e <MX25LM51245G_PageProgram+0x100>
  }

  /* Initialize the program command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800b840:	2300      	movs	r3, #0
 800b842:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800b844:	2300      	movs	r3, #0
 800b846:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_OSPI_INSTRUCTION_1_LINE
                                 : HAL_OSPI_INSTRUCTION_8_LINES;
 800b848:	7afb      	ldrb	r3, [r7, #11]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d101      	bne.n	800b852 <MX25LM51245G_PageProgram+0x44>
 800b84e:	2301      	movs	r3, #1
 800b850:	e000      	b.n	800b854 <MX25LM51245G_PageProgram+0x46>
 800b852:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
 800b854:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800b856:	2300      	movs	r3, #0
 800b858:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_OSPI_INSTRUCTION_8_BITS
                                 : HAL_OSPI_INSTRUCTION_16_BITS;
 800b85a:	7afb      	ldrb	r3, [r7, #11]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d101      	bne.n	800b864 <MX25LM51245G_PageProgram+0x56>
 800b860:	2300      	movs	r3, #0
 800b862:	e000      	b.n	800b866 <MX25LM51245G_PageProgram+0x58>
 800b864:	2310      	movs	r3, #16
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE)
 800b866:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
                                 ? ((AddressSize == MX25LM51245G_3BYTES_SIZE)
                                    ? MX25LM51245G_PAGE_PROG_CMD
                                    : MX25LM51245G_4_BYTE_PAGE_PROG_CMD)
                                 : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 800b868:	7afb      	ldrb	r3, [r7, #11]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d106      	bne.n	800b87c <MX25LM51245G_PageProgram+0x6e>
 800b86e:	7abb      	ldrb	r3, [r7, #10]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d101      	bne.n	800b878 <MX25LM51245G_PageProgram+0x6a>
 800b874:	2302      	movs	r3, #2
 800b876:	e003      	b.n	800b880 <MX25LM51245G_PageProgram+0x72>
 800b878:	2312      	movs	r3, #18
 800b87a:	e001      	b.n	800b880 <MX25LM51245G_PageProgram+0x72>
 800b87c:	f241 23ed 	movw	r3, #4845	; 0x12ed
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
 800b880:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_OSPI_ADDRESS_1_LINE
                                 : HAL_OSPI_ADDRESS_8_LINES;
 800b882:	7afb      	ldrb	r3, [r7, #11]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d102      	bne.n	800b88e <MX25LM51245G_PageProgram+0x80>
 800b888:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b88c:	e001      	b.n	800b892 <MX25LM51245G_PageProgram+0x84>
 800b88e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE)
 800b892:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 800b894:	2300      	movs	r3, #0
 800b896:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE)
                                 ? HAL_OSPI_ADDRESS_24_BITS
                                 : HAL_OSPI_ADDRESS_32_BITS;
 800b898:	7abb      	ldrb	r3, [r7, #10]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d102      	bne.n	800b8a4 <MX25LM51245G_PageProgram+0x96>
 800b89e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b8a2:	e001      	b.n	800b8a8 <MX25LM51245G_PageProgram+0x9a>
 800b8a4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE)
 800b8a8:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Address            = WriteAddr;
 800b8aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b8ac:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800b8b2:	7afb      	ldrb	r3, [r7, #11]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d102      	bne.n	800b8be <MX25LM51245G_PageProgram+0xb0>
 800b8b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b8bc:	e001      	b.n	800b8c2 <MX25LM51245G_PageProgram+0xb4>
 800b8be:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b8c2:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = 0U;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.NbData             = Size;
 800b8cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Configure the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b8d8:	f107 0310 	add.w	r3, r7, #16
 800b8dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8e0:	4619      	mov	r1, r3
 800b8e2:	68f8      	ldr	r0, [r7, #12]
 800b8e4:	f00a fb27 	bl	8015f36 <HAL_OSPI_Command>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d002      	beq.n	800b8f4 <MX25LM51245G_PageProgram+0xe6>
  {
    return MX25LM51245G_ERROR;
 800b8ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b8f2:	e00c      	b.n	800b90e <MX25LM51245G_PageProgram+0x100>
  }

  /* Transmission of the data */
  if (HAL_OSPI_Transmit(Ctx, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b8f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8f8:	6879      	ldr	r1, [r7, #4]
 800b8fa:	68f8      	ldr	r0, [r7, #12]
 800b8fc:	f00a fba8 	bl	8016050 <HAL_OSPI_Transmit>
 800b900:	4603      	mov	r3, r0
 800b902:	2b00      	cmp	r3, #0
 800b904:	d002      	beq.n	800b90c <MX25LM51245G_PageProgram+0xfe>
  {
    return MX25LM51245G_ERROR;
 800b906:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b90a:	e000      	b.n	800b90e <MX25LM51245G_PageProgram+0x100>
  }

  return MX25LM51245G_OK;
 800b90c:	2300      	movs	r3, #0
}
 800b90e:	4618      	mov	r0, r3
 800b910:	3760      	adds	r7, #96	; 0x60
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}

0800b916 <MX25LM51245G_PageProgramDTR>:
  * @param  Size Size of data to write. Range 1 ~ MX25LM51245G_PAGE_SIZE
  * @note   Only OPI mode support DTR transfer rate
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_PageProgramDTR(OSPI_HandleTypeDef *Ctx, uint8_t *pData, uint32_t WriteAddr, uint32_t Size)
{
 800b916:	b580      	push	{r7, lr}
 800b918:	b098      	sub	sp, #96	; 0x60
 800b91a:	af00      	add	r7, sp, #0
 800b91c:	60f8      	str	r0, [r7, #12]
 800b91e:	60b9      	str	r1, [r7, #8]
 800b920:	607a      	str	r2, [r7, #4]
 800b922:	603b      	str	r3, [r7, #0]
  OSPI_RegularCmdTypeDef s_command = {0};
 800b924:	f107 0310 	add.w	r3, r7, #16
 800b928:	2250      	movs	r2, #80	; 0x50
 800b92a:	2100      	movs	r1, #0
 800b92c:	4618      	mov	r0, r3
 800b92e:	f011 ffc7 	bl	801d8c0 <memset>

  /* Initialize the program command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800b932:	2300      	movs	r3, #0
 800b934:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800b936:	2300      	movs	r3, #0
 800b938:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 800b93a:	2304      	movs	r3, #4
 800b93c:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
 800b93e:	2308      	movs	r3, #8
 800b940:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 800b942:	2310      	movs	r3, #16
 800b944:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 800b946:	f241 23ed 	movw	r3, #4845	; 0x12ed
 800b94a:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 800b94c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b950:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 800b952:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b956:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800b958:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800b95c:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Address            = WriteAddr;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800b962:	2300      	movs	r3, #0
 800b964:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 800b966:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b96a:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 800b96c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b970:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = 0U;
 800b972:	2300      	movs	r3, #0
 800b974:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.NbData             = Size;
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800b97a:	2300      	movs	r3, #0
 800b97c:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800b97e:	2300      	movs	r3, #0
 800b980:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Configure the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b982:	f107 0310 	add.w	r3, r7, #16
 800b986:	f241 3288 	movw	r2, #5000	; 0x1388
 800b98a:	4619      	mov	r1, r3
 800b98c:	68f8      	ldr	r0, [r7, #12]
 800b98e:	f00a fad2 	bl	8015f36 <HAL_OSPI_Command>
 800b992:	4603      	mov	r3, r0
 800b994:	2b00      	cmp	r3, #0
 800b996:	d002      	beq.n	800b99e <MX25LM51245G_PageProgramDTR+0x88>
  {
    return MX25LM51245G_ERROR;
 800b998:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b99c:	e00c      	b.n	800b9b8 <MX25LM51245G_PageProgramDTR+0xa2>
  }

  /* Transmission of the data */
  if (HAL_OSPI_Transmit(Ctx, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b99e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9a2:	68b9      	ldr	r1, [r7, #8]
 800b9a4:	68f8      	ldr	r0, [r7, #12]
 800b9a6:	f00a fb53 	bl	8016050 <HAL_OSPI_Transmit>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d002      	beq.n	800b9b6 <MX25LM51245G_PageProgramDTR+0xa0>
  {
    return MX25LM51245G_ERROR;
 800b9b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b9b4:	e000      	b.n	800b9b8 <MX25LM51245G_PageProgramDTR+0xa2>
  }

  return MX25LM51245G_OK;
 800b9b6:	2300      	movs	r3, #0
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	3760      	adds	r7, #96	; 0x60
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}

0800b9c0 <MX25LM51245G_BlockErase>:
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_BlockErase(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate,
                                MX25LM51245G_AddressSize_t AddressSize, uint32_t BlockAddress,
                                MX25LM51245G_Erase_t BlockSize)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b096      	sub	sp, #88	; 0x58
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	4608      	mov	r0, r1
 800b9ca:	4611      	mov	r1, r2
 800b9cc:	461a      	mov	r2, r3
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	70fb      	strb	r3, [r7, #3]
 800b9d2:	460b      	mov	r3, r1
 800b9d4:	70bb      	strb	r3, [r7, #2]
 800b9d6:	4613      	mov	r3, r2
 800b9d8:	707b      	strb	r3, [r7, #1]
  OSPI_RegularCmdTypeDef s_command = {0};
 800b9da:	f107 0308 	add.w	r3, r7, #8
 800b9de:	2250      	movs	r2, #80	; 0x50
 800b9e0:	2100      	movs	r1, #0
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f011 ff6c 	bl	801d8c0 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800b9e8:	78fb      	ldrb	r3, [r7, #3]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d105      	bne.n	800b9fa <MX25LM51245G_BlockErase+0x3a>
 800b9ee:	78bb      	ldrb	r3, [r7, #2]
 800b9f0:	2b01      	cmp	r3, #1
 800b9f2:	d102      	bne.n	800b9fa <MX25LM51245G_BlockErase+0x3a>
  {
    return MX25LM51245G_ERROR;
 800b9f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b9f8:	e079      	b.n	800baee <MX25LM51245G_BlockErase+0x12e>
  }

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 800b9fa:	78fb      	ldrb	r3, [r7, #3]
 800b9fc:	2b01      	cmp	r3, #1
 800b9fe:	d105      	bne.n	800ba0c <MX25LM51245G_BlockErase+0x4c>
 800ba00:	787b      	ldrb	r3, [r7, #1]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d102      	bne.n	800ba0c <MX25LM51245G_BlockErase+0x4c>
  {
    return MX25LM51245G_ERROR;
 800ba06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ba0a:	e070      	b.n	800baee <MX25LM51245G_BlockErase+0x12e>
  }

  /* Initialize the erase command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	60bb      	str	r3, [r7, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800ba10:	2300      	movs	r3, #0
 800ba12:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_OSPI_INSTRUCTION_1_LINE
                                 : HAL_OSPI_INSTRUCTION_8_LINES;
 800ba14:	78fb      	ldrb	r3, [r7, #3]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d101      	bne.n	800ba1e <MX25LM51245G_BlockErase+0x5e>
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	e000      	b.n	800ba20 <MX25LM51245G_BlockErase+0x60>
 800ba1e:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
 800ba20:	617b      	str	r3, [r7, #20]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER)
                                 ? HAL_OSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800ba22:	78bb      	ldrb	r3, [r7, #2]
 800ba24:	2b01      	cmp	r3, #1
 800ba26:	d101      	bne.n	800ba2c <MX25LM51245G_BlockErase+0x6c>
 800ba28:	2308      	movs	r3, #8
 800ba2a:	e000      	b.n	800ba2e <MX25LM51245G_BlockErase+0x6e>
 800ba2c:	2300      	movs	r3, #0
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER)
 800ba2e:	61fb      	str	r3, [r7, #28]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_OSPI_INSTRUCTION_8_BITS
                                 : HAL_OSPI_INSTRUCTION_16_BITS;
 800ba30:	78fb      	ldrb	r3, [r7, #3]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d101      	bne.n	800ba3a <MX25LM51245G_BlockErase+0x7a>
 800ba36:	2300      	movs	r3, #0
 800ba38:	e000      	b.n	800ba3c <MX25LM51245G_BlockErase+0x7c>
 800ba3a:	2310      	movs	r3, #16
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE)
 800ba3c:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 800ba3e:	78fb      	ldrb	r3, [r7, #3]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d102      	bne.n	800ba4a <MX25LM51245G_BlockErase+0x8a>
 800ba44:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba48:	e001      	b.n	800ba4e <MX25LM51245G_BlockErase+0x8e>
 800ba4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba4e:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER)
                                 ? HAL_OSPI_ADDRESS_DTR_ENABLE
                                 : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800ba50:	78bb      	ldrb	r3, [r7, #2]
 800ba52:	2b01      	cmp	r3, #1
 800ba54:	d102      	bne.n	800ba5c <MX25LM51245G_BlockErase+0x9c>
 800ba56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ba5a:	e000      	b.n	800ba5e <MX25LM51245G_BlockErase+0x9e>
 800ba5c:	2300      	movs	r3, #0
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER)
 800ba5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE)
                                 ? HAL_OSPI_ADDRESS_24_BITS
                                 : HAL_OSPI_ADDRESS_32_BITS;
 800ba60:	787b      	ldrb	r3, [r7, #1]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d102      	bne.n	800ba6c <MX25LM51245G_BlockErase+0xac>
 800ba66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ba6a:	e001      	b.n	800ba70 <MX25LM51245G_BlockErase+0xb0>
 800ba6c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE)
 800ba70:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Address            = BlockAddress;
 800ba72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ba74:	623b      	str	r3, [r7, #32]
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800ba76:	2300      	movs	r3, #0
 800ba78:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DummyCycles        = 0U;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800ba82:	2300      	movs	r3, #0
 800ba84:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800ba86:	2300      	movs	r3, #0
 800ba88:	657b      	str	r3, [r7, #84]	; 0x54

  switch (Mode)
 800ba8a:	78fb      	ldrb	r3, [r7, #3]
 800ba8c:	2b01      	cmp	r3, #1
 800ba8e:	d10b      	bne.n	800baa8 <MX25LM51245G_BlockErase+0xe8>
  {
    case MX25LM51245G_OPI_MODE :
      if (BlockSize == MX25LM51245G_ERASE_64K)
 800ba90:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800ba94:	2b01      	cmp	r3, #1
 800ba96:	d103      	bne.n	800baa0 <MX25LM51245G_BlockErase+0xe0>
      {
        s_command.Instruction = MX25LM51245G_OCTA_SECTOR_ERASE_64K_CMD;
 800ba98:	f64d 4323 	movw	r3, #56355	; 0xdc23
 800ba9c:	613b      	str	r3, [r7, #16]
      }
      else
      {
        s_command.Instruction = MX25LM51245G_OCTA_SUBSECTOR_ERASE_4K_CMD;
      }
      break;
 800ba9e:	e017      	b.n	800bad0 <MX25LM51245G_BlockErase+0x110>
        s_command.Instruction = MX25LM51245G_OCTA_SUBSECTOR_ERASE_4K_CMD;
 800baa0:	f242 13de 	movw	r3, #8670	; 0x21de
 800baa4:	613b      	str	r3, [r7, #16]
      break;
 800baa6:	e013      	b.n	800bad0 <MX25LM51245G_BlockErase+0x110>

    case MX25LM51245G_SPI_MODE :
    default:
      if (BlockSize == MX25LM51245G_ERASE_64K)
 800baa8:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800baac:	2b01      	cmp	r3, #1
 800baae:	d107      	bne.n	800bac0 <MX25LM51245G_BlockErase+0x100>
      {
        s_command.Instruction = (AddressSize == MX25LM51245G_3BYTES_SIZE)
                                ? MX25LM51245G_SECTOR_ERASE_64K_CMD
                                : MX25LM51245G_4_BYTE_SECTOR_ERASE_64K_CMD;
 800bab0:	787b      	ldrb	r3, [r7, #1]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d101      	bne.n	800baba <MX25LM51245G_BlockErase+0xfa>
 800bab6:	23d8      	movs	r3, #216	; 0xd8
 800bab8:	e000      	b.n	800babc <MX25LM51245G_BlockErase+0xfc>
 800baba:	23dc      	movs	r3, #220	; 0xdc
        s_command.Instruction = (AddressSize == MX25LM51245G_3BYTES_SIZE)
 800babc:	613b      	str	r3, [r7, #16]
      {
        s_command.Instruction = (AddressSize == MX25LM51245G_3BYTES_SIZE)
                                ? MX25LM51245G_SUBSECTOR_ERASE_4K_CMD
                                : MX25LM51245G_4_BYTE_SUBSECTOR_ERASE_4K_CMD;
      }
      break;
 800babe:	e006      	b.n	800bace <MX25LM51245G_BlockErase+0x10e>
                                : MX25LM51245G_4_BYTE_SUBSECTOR_ERASE_4K_CMD;
 800bac0:	787b      	ldrb	r3, [r7, #1]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d101      	bne.n	800baca <MX25LM51245G_BlockErase+0x10a>
 800bac6:	2320      	movs	r3, #32
 800bac8:	e000      	b.n	800bacc <MX25LM51245G_BlockErase+0x10c>
 800baca:	2321      	movs	r3, #33	; 0x21
        s_command.Instruction = (AddressSize == MX25LM51245G_3BYTES_SIZE)
 800bacc:	613b      	str	r3, [r7, #16]
      break;
 800bace:	bf00      	nop
  }

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800bad0:	f107 0308 	add.w	r3, r7, #8
 800bad4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bad8:	4619      	mov	r1, r3
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	f00a fa2b 	bl	8015f36 <HAL_OSPI_Command>
 800bae0:	4603      	mov	r3, r0
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d002      	beq.n	800baec <MX25LM51245G_BlockErase+0x12c>
  {
    return MX25LM51245G_ERROR;
 800bae6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800baea:	e000      	b.n	800baee <MX25LM51245G_BlockErase+0x12e>
  }

  return MX25LM51245G_OK;
 800baec:	2300      	movs	r3, #0
}
 800baee:	4618      	mov	r0, r3
 800baf0:	3758      	adds	r7, #88	; 0x58
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}

0800baf6 <MX25LM51245G_EnableSTRMemoryMappedMode>:
  * @param  AddressSize Address size
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableSTRMemoryMappedMode(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode,
                                               MX25LM51245G_AddressSize_t AddressSize)
{
 800baf6:	b580      	push	{r7, lr}
 800baf8:	b098      	sub	sp, #96	; 0x60
 800bafa:	af00      	add	r7, sp, #0
 800bafc:	6078      	str	r0, [r7, #4]
 800bafe:	460b      	mov	r3, r1
 800bb00:	70fb      	strb	r3, [r7, #3]
 800bb02:	4613      	mov	r3, r2
 800bb04:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef      s_command = {0};
 800bb06:	f107 0310 	add.w	r3, r7, #16
 800bb0a:	2250      	movs	r2, #80	; 0x50
 800bb0c:	2100      	movs	r1, #0
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f011 fed6 	bl	801d8c0 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 800bb14:	f107 0308 	add.w	r3, r7, #8
 800bb18:	2200      	movs	r2, #0
 800bb1a:	601a      	str	r2, [r3, #0]
 800bb1c:	605a      	str	r2, [r3, #4]

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 800bb1e:	78fb      	ldrb	r3, [r7, #3]
 800bb20:	2b01      	cmp	r3, #1
 800bb22:	d105      	bne.n	800bb30 <MX25LM51245G_EnableSTRMemoryMappedMode+0x3a>
 800bb24:	78bb      	ldrb	r3, [r7, #2]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d102      	bne.n	800bb30 <MX25LM51245G_EnableSTRMemoryMappedMode+0x3a>
  {
    return MX25LM51245G_ERROR;
 800bb2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bb2e:	e088      	b.n	800bc42 <MX25LM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 800bb30:	2301      	movs	r3, #1
 800bb32:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800bb34:	2300      	movs	r3, #0
 800bb36:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_OSPI_INSTRUCTION_1_LINE
                                 : HAL_OSPI_INSTRUCTION_8_LINES;
 800bb38:	78fb      	ldrb	r3, [r7, #3]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d101      	bne.n	800bb42 <MX25LM51245G_EnableSTRMemoryMappedMode+0x4c>
 800bb3e:	2301      	movs	r3, #1
 800bb40:	e000      	b.n	800bb44 <MX25LM51245G_EnableSTRMemoryMappedMode+0x4e>
 800bb42:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
 800bb44:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800bb46:	2300      	movs	r3, #0
 800bb48:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_OSPI_INSTRUCTION_8_BITS
                                 : HAL_OSPI_INSTRUCTION_16_BITS;
 800bb4a:	78fb      	ldrb	r3, [r7, #3]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d101      	bne.n	800bb54 <MX25LM51245G_EnableSTRMemoryMappedMode+0x5e>
 800bb50:	2300      	movs	r3, #0
 800bb52:	e000      	b.n	800bb56 <MX25LM51245G_EnableSTRMemoryMappedMode+0x60>
 800bb54:	2310      	movs	r3, #16
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE)
 800bb56:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
                                 ? ((AddressSize == MX25LM51245G_3BYTES_SIZE)
                                    ? MX25LM51245G_FAST_READ_CMD
                                    : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD)
                                 : MX25LM51245G_OCTA_READ_CMD;
 800bb58:	78fb      	ldrb	r3, [r7, #3]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d106      	bne.n	800bb6c <MX25LM51245G_EnableSTRMemoryMappedMode+0x76>
 800bb5e:	78bb      	ldrb	r3, [r7, #2]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d101      	bne.n	800bb68 <MX25LM51245G_EnableSTRMemoryMappedMode+0x72>
 800bb64:	230b      	movs	r3, #11
 800bb66:	e003      	b.n	800bb70 <MX25LM51245G_EnableSTRMemoryMappedMode+0x7a>
 800bb68:	230c      	movs	r3, #12
 800bb6a:	e001      	b.n	800bb70 <MX25LM51245G_EnableSTRMemoryMappedMode+0x7a>
 800bb6c:	f64e 4313 	movw	r3, #60435	; 0xec13
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
 800bb70:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 800bb72:	78fb      	ldrb	r3, [r7, #3]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d102      	bne.n	800bb7e <MX25LM51245G_EnableSTRMemoryMappedMode+0x88>
 800bb78:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb7c:	e001      	b.n	800bb82 <MX25LM51245G_EnableSTRMemoryMappedMode+0x8c>
 800bb7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb82:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 800bb84:	2300      	movs	r3, #0
 800bb86:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE)
                                 ? HAL_OSPI_ADDRESS_24_BITS
                                 : HAL_OSPI_ADDRESS_32_BITS;
 800bb88:	78bb      	ldrb	r3, [r7, #2]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d102      	bne.n	800bb94 <MX25LM51245G_EnableSTRMemoryMappedMode+0x9e>
 800bb8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bb92:	e001      	b.n	800bb98 <MX25LM51245G_EnableSTRMemoryMappedMode+0xa2>
 800bb94:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE)
 800bb98:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800bb9e:	78fb      	ldrb	r3, [r7, #3]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d102      	bne.n	800bbaa <MX25LM51245G_EnableSTRMemoryMappedMode+0xb4>
 800bba4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bba8:	e001      	b.n	800bbae <MX25LM51245G_EnableSTRMemoryMappedMode+0xb8>
 800bbaa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800bbae:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 800bbb4:	78fb      	ldrb	r3, [r7, #3]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d101      	bne.n	800bbbe <MX25LM51245G_EnableSTRMemoryMappedMode+0xc8>
 800bbba:	2308      	movs	r3, #8
 800bbbc:	e000      	b.n	800bbc0 <MX25LM51245G_EnableSTRMemoryMappedMode+0xca>
 800bbbe:	2306      	movs	r3, #6
 800bbc0:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the read command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800bbca:	f107 0310 	add.w	r3, r7, #16
 800bbce:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbd2:	4619      	mov	r1, r3
 800bbd4:	6878      	ldr	r0, [r7, #4]
 800bbd6:	f00a f9ae 	bl	8015f36 <HAL_OSPI_Command>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d002      	beq.n	800bbe6 <MX25LM51245G_EnableSTRMemoryMappedMode+0xf0>
  {
    return MX25LM51245G_ERROR;
 800bbe0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bbe4:	e02d      	b.n	800bc42 <MX25LM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  /* Initialize the program command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 800bbe6:	2302      	movs	r3, #2
 800bbe8:	613b      	str	r3, [r7, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
                                 ? ((AddressSize == MX25LM51245G_3BYTES_SIZE)
                                    ? MX25LM51245G_PAGE_PROG_CMD
                                    : MX25LM51245G_4_BYTE_PAGE_PROG_CMD)
                                 : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 800bbea:	78fb      	ldrb	r3, [r7, #3]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d106      	bne.n	800bbfe <MX25LM51245G_EnableSTRMemoryMappedMode+0x108>
 800bbf0:	78bb      	ldrb	r3, [r7, #2]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d101      	bne.n	800bbfa <MX25LM51245G_EnableSTRMemoryMappedMode+0x104>
 800bbf6:	2302      	movs	r3, #2
 800bbf8:	e003      	b.n	800bc02 <MX25LM51245G_EnableSTRMemoryMappedMode+0x10c>
 800bbfa:	2312      	movs	r3, #18
 800bbfc:	e001      	b.n	800bc02 <MX25LM51245G_EnableSTRMemoryMappedMode+0x10c>
 800bbfe:	f241 23ed 	movw	r3, #4845	; 0x12ed
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
 800bc02:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles        = 0U;
 800bc04:	2300      	movs	r3, #0
 800bc06:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the write command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800bc08:	f107 0310 	add.w	r3, r7, #16
 800bc0c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc10:	4619      	mov	r1, r3
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f00a f98f 	bl	8015f36 <HAL_OSPI_Command>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d002      	beq.n	800bc24 <MX25LM51245G_EnableSTRMemoryMappedMode+0x12e>
  {
    return MX25LM51245G_ERROR;
 800bc1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc22:	e00e      	b.n	800bc42 <MX25LM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 800bc24:	2300      	movs	r3, #0
 800bc26:	60bb      	str	r3, [r7, #8]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 800bc28:	f107 0308 	add.w	r3, r7, #8
 800bc2c:	4619      	mov	r1, r3
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f00a fbab 	bl	801638a <HAL_OSPI_MemoryMapped>
 800bc34:	4603      	mov	r3, r0
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d002      	beq.n	800bc40 <MX25LM51245G_EnableSTRMemoryMappedMode+0x14a>
  {
    return MX25LM51245G_ERROR;
 800bc3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc3e:	e000      	b.n	800bc42 <MX25LM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  return MX25LM51245G_OK;
 800bc40:	2300      	movs	r3, #0
}
 800bc42:	4618      	mov	r0, r3
 800bc44:	3760      	adds	r7, #96	; 0x60
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}

0800bc4a <MX25LM51245G_EnableDTRMemoryMappedMode>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableDTRMemoryMappedMode(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode)
{
 800bc4a:	b580      	push	{r7, lr}
 800bc4c:	b098      	sub	sp, #96	; 0x60
 800bc4e:	af00      	add	r7, sp, #0
 800bc50:	6078      	str	r0, [r7, #4]
 800bc52:	460b      	mov	r3, r1
 800bc54:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  OSPI_RegularCmdTypeDef      s_command = {0};
 800bc56:	f107 0310 	add.w	r3, r7, #16
 800bc5a:	2250      	movs	r2, #80	; 0x50
 800bc5c:	2100      	movs	r1, #0
 800bc5e:	4618      	mov	r0, r3
 800bc60:	f011 fe2e 	bl	801d8c0 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 800bc64:	f107 0308 	add.w	r3, r7, #8
 800bc68:	2200      	movs	r2, #0
 800bc6a:	601a      	str	r2, [r3, #0]
 800bc6c:	605a      	str	r2, [r3, #4]

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 800bc6e:	2301      	movs	r3, #1
 800bc70:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800bc72:	2300      	movs	r3, #0
 800bc74:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 800bc76:	2304      	movs	r3, #4
 800bc78:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
 800bc7a:	2308      	movs	r3, #8
 800bc7c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 800bc7e:	2310      	movs	r3, #16
 800bc80:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 800bc82:	f64e 6311 	movw	r3, #60945	; 0xee11
 800bc86:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 800bc88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 800bc8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bc92:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800bc94:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800bc98:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 800bc9e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800bca2:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 800bca4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bca8:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 800bcaa:	2306      	movs	r3, #6
 800bcac:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
 800bcae:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800bcb2:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800bcb8:	f107 0310 	add.w	r3, r7, #16
 800bcbc:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcc0:	4619      	mov	r1, r3
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f00a f937 	bl	8015f36 <HAL_OSPI_Command>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d002      	beq.n	800bcd4 <MX25LM51245G_EnableDTRMemoryMappedMode+0x8a>
  {
    return MX25LM51245G_ERROR;
 800bcce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bcd2:	e025      	b.n	800bd20 <MX25LM51245G_EnableDTRMemoryMappedMode+0xd6>
  }

  /* Initialize the program command */
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 800bcd4:	2302      	movs	r3, #2
 800bcd6:	613b      	str	r3, [r7, #16]
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 800bcd8:	f241 23ed 	movw	r3, #4845	; 0x12ed
 800bcdc:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles   = 0U;
 800bcde:	2300      	movs	r3, #0
 800bce0:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode       = HAL_OSPI_DQS_DISABLE;
 800bce2:	2300      	movs	r3, #0
 800bce4:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800bce6:	f107 0310 	add.w	r3, r7, #16
 800bcea:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcee:	4619      	mov	r1, r3
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f00a f920 	bl	8015f36 <HAL_OSPI_Command>
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d002      	beq.n	800bd02 <MX25LM51245G_EnableDTRMemoryMappedMode+0xb8>
  {
    return MX25LM51245G_ERROR;
 800bcfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bd00:	e00e      	b.n	800bd20 <MX25LM51245G_EnableDTRMemoryMappedMode+0xd6>
  }
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 800bd02:	2300      	movs	r3, #0
 800bd04:	60bb      	str	r3, [r7, #8]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 800bd06:	f107 0308 	add.w	r3, r7, #8
 800bd0a:	4619      	mov	r1, r3
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	f00a fb3c 	bl	801638a <HAL_OSPI_MemoryMapped>
 800bd12:	4603      	mov	r3, r0
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d002      	beq.n	800bd1e <MX25LM51245G_EnableDTRMemoryMappedMode+0xd4>
  {
    return MX25LM51245G_ERROR;
 800bd18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bd1c:	e000      	b.n	800bd20 <MX25LM51245G_EnableDTRMemoryMappedMode+0xd6>
  }

  return MX25LM51245G_OK;
 800bd1e:	2300      	movs	r3, #0
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	3760      	adds	r7, #96	; 0x60
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}

0800bd28 <MX25LM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_WriteEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b09c      	sub	sp, #112	; 0x70
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
 800bd30:	460b      	mov	r3, r1
 800bd32:	70fb      	strb	r3, [r7, #3]
 800bd34:	4613      	mov	r3, r2
 800bd36:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef     s_command = {0};
 800bd38:	f107 0320 	add.w	r3, r7, #32
 800bd3c:	2250      	movs	r2, #80	; 0x50
 800bd3e:	2100      	movs	r1, #0
 800bd40:	4618      	mov	r0, r3
 800bd42:	f011 fdbd 	bl	801d8c0 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 800bd46:	f107 030c 	add.w	r3, r7, #12
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	601a      	str	r2, [r3, #0]
 800bd4e:	605a      	str	r2, [r3, #4]
 800bd50:	609a      	str	r2, [r3, #8]
 800bd52:	60da      	str	r2, [r3, #12]
 800bd54:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800bd56:	78fb      	ldrb	r3, [r7, #3]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d105      	bne.n	800bd68 <MX25LM51245G_WriteEnable+0x40>
 800bd5c:	78bb      	ldrb	r3, [r7, #2]
 800bd5e:	2b01      	cmp	r3, #1
 800bd60:	d102      	bne.n	800bd68 <MX25LM51245G_WriteEnable+0x40>
  {
    return MX25LM51245G_ERROR;
 800bd62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bd66:	e0ab      	b.n	800bec0 <MX25LM51245G_WriteEnable+0x198>
  }

  /* Initialize the write enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	623b      	str	r3, [r7, #32]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_OSPI_INSTRUCTION_1_LINE
                                 : HAL_OSPI_INSTRUCTION_8_LINES;
 800bd70:	78fb      	ldrb	r3, [r7, #3]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d101      	bne.n	800bd7a <MX25LM51245G_WriteEnable+0x52>
 800bd76:	2301      	movs	r3, #1
 800bd78:	e000      	b.n	800bd7c <MX25LM51245G_WriteEnable+0x54>
 800bd7a:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
 800bd7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER)
                                 ? HAL_OSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800bd7e:	78bb      	ldrb	r3, [r7, #2]
 800bd80:	2b01      	cmp	r3, #1
 800bd82:	d101      	bne.n	800bd88 <MX25LM51245G_WriteEnable+0x60>
 800bd84:	2308      	movs	r3, #8
 800bd86:	e000      	b.n	800bd8a <MX25LM51245G_WriteEnable+0x62>
 800bd88:	2300      	movs	r3, #0
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER)
 800bd8a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_OSPI_INSTRUCTION_8_BITS
                                 : HAL_OSPI_INSTRUCTION_16_BITS;
 800bd8c:	78fb      	ldrb	r3, [r7, #3]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d101      	bne.n	800bd96 <MX25LM51245G_WriteEnable+0x6e>
 800bd92:	2300      	movs	r3, #0
 800bd94:	e000      	b.n	800bd98 <MX25LM51245G_WriteEnable+0x70>
 800bd96:	2310      	movs	r3, #16
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE)
 800bd98:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
                                 ? MX25LM51245G_WRITE_ENABLE_CMD
                                 : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 800bd9a:	78fb      	ldrb	r3, [r7, #3]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d101      	bne.n	800bda4 <MX25LM51245G_WriteEnable+0x7c>
 800bda0:	2306      	movs	r3, #6
 800bda2:	e001      	b.n	800bda8 <MX25LM51245G_WriteEnable+0x80>
 800bda4:	f240 63f9 	movw	r3, #1785	; 0x6f9
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
 800bda8:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800bdae:	2300      	movs	r3, #0
 800bdb0:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DummyCycles        = 0U;
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	66bb      	str	r3, [r7, #104]	; 0x68
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800bdc2:	f107 0320 	add.w	r3, r7, #32
 800bdc6:	f241 3288 	movw	r2, #5000	; 0x1388
 800bdca:	4619      	mov	r1, r3
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f00a f8b2 	bl	8015f36 <HAL_OSPI_Command>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d002      	beq.n	800bdde <MX25LM51245G_WriteEnable+0xb6>
  {
    return MX25LM51245G_ERROR;
 800bdd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bddc:	e070      	b.n	800bec0 <MX25LM51245G_WriteEnable+0x198>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE)
                             ? MX25LM51245G_READ_STATUS_REG_CMD
                             : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 800bdde:	78fb      	ldrb	r3, [r7, #3]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d101      	bne.n	800bde8 <MX25LM51245G_WriteEnable+0xc0>
 800bde4:	2305      	movs	r3, #5
 800bde6:	e001      	b.n	800bdec <MX25LM51245G_WriteEnable+0xc4>
 800bde8:	f240 53fa 	movw	r3, #1530	; 0x5fa
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE)
 800bdec:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 800bdee:	78fb      	ldrb	r3, [r7, #3]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d101      	bne.n	800bdf8 <MX25LM51245G_WriteEnable+0xd0>
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	e001      	b.n	800bdfc <MX25LM51245G_WriteEnable+0xd4>
 800bdf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bdfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER)
                             ? HAL_OSPI_ADDRESS_DTR_ENABLE
                             : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800bdfe:	78bb      	ldrb	r3, [r7, #2]
 800be00:	2b01      	cmp	r3, #1
 800be02:	d102      	bne.n	800be0a <MX25LM51245G_WriteEnable+0xe2>
 800be04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800be08:	e000      	b.n	800be0c <MX25LM51245G_WriteEnable+0xe4>
 800be0a:	2300      	movs	r3, #0
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER)
 800be0c:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AddressSize    = HAL_OSPI_ADDRESS_32_BITS;
 800be0e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800be12:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Address        = 0U;
 800be14:	2300      	movs	r3, #0
 800be16:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800be18:	78fb      	ldrb	r3, [r7, #3]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d102      	bne.n	800be24 <MX25LM51245G_WriteEnable+0xfc>
 800be1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800be22:	e001      	b.n	800be28 <MX25LM51245G_WriteEnable+0x100>
 800be24:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800be28:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800be2a:	78bb      	ldrb	r3, [r7, #2]
 800be2c:	2b01      	cmp	r3, #1
 800be2e:	d102      	bne.n	800be36 <MX25LM51245G_WriteEnable+0x10e>
 800be30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800be34:	e000      	b.n	800be38 <MX25LM51245G_WriteEnable+0x110>
 800be36:	2300      	movs	r3, #0
 800be38:	663b      	str	r3, [r7, #96]	; 0x60
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE)
                             ? 0U
                             : ((Rate == MX25LM51245G_DTR_TRANSFER)
 800be3a:	78fb      	ldrb	r3, [r7, #3]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d006      	beq.n	800be4e <MX25LM51245G_WriteEnable+0x126>
 800be40:	78bb      	ldrb	r3, [r7, #2]
 800be42:	2b01      	cmp	r3, #1
 800be44:	d101      	bne.n	800be4a <MX25LM51245G_WriteEnable+0x122>
 800be46:	2305      	movs	r3, #5
 800be48:	e002      	b.n	800be50 <MX25LM51245G_WriteEnable+0x128>
 800be4a:	2304      	movs	r3, #4
 800be4c:	e000      	b.n	800be50 <MX25LM51245G_WriteEnable+0x128>
 800be4e:	2300      	movs	r3, #0
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE)
 800be50:	667b      	str	r3, [r7, #100]	; 0x64
                                ? DUMMY_CYCLES_REG_OCTAL_DTR
                                : DUMMY_CYCLES_REG_OCTAL);
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 800be52:	78bb      	ldrb	r3, [r7, #2]
 800be54:	2b01      	cmp	r3, #1
 800be56:	d101      	bne.n	800be5c <MX25LM51245G_WriteEnable+0x134>
 800be58:	2302      	movs	r3, #2
 800be5a:	e000      	b.n	800be5e <MX25LM51245G_WriteEnable+0x136>
 800be5c:	2301      	movs	r3, #1
 800be5e:	65fb      	str	r3, [r7, #92]	; 0x5c
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 800be60:	78bb      	ldrb	r3, [r7, #2]
 800be62:	2b01      	cmp	r3, #1
 800be64:	d102      	bne.n	800be6c <MX25LM51245G_WriteEnable+0x144>
 800be66:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800be6a:	e000      	b.n	800be6e <MX25LM51245G_WriteEnable+0x146>
 800be6c:	2300      	movs	r3, #0
 800be6e:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800be70:	f107 0320 	add.w	r3, r7, #32
 800be74:	f241 3288 	movw	r2, #5000	; 0x1388
 800be78:	4619      	mov	r1, r3
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f00a f85b 	bl	8015f36 <HAL_OSPI_Command>
 800be80:	4603      	mov	r3, r0
 800be82:	2b00      	cmp	r3, #0
 800be84:	d002      	beq.n	800be8c <MX25LM51245G_WriteEnable+0x164>
  {
    return MX25LM51245G_ERROR;
 800be86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800be8a:	e019      	b.n	800bec0 <MX25LM51245G_WriteEnable+0x198>
  }

  s_config.Match           = 2U;
 800be8c:	2302      	movs	r3, #2
 800be8e:	60fb      	str	r3, [r7, #12]
  s_config.Mask            = 2U;
 800be90:	2302      	movs	r3, #2
 800be92:	613b      	str	r3, [r7, #16]
  s_config.MatchMode       = HAL_OSPI_MATCH_MODE_AND;
 800be94:	2300      	movs	r3, #0
 800be96:	617b      	str	r3, [r7, #20]
  s_config.Interval        = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 800be98:	2310      	movs	r3, #16
 800be9a:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 800be9c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bea0:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800bea2:	f107 030c 	add.w	r3, r7, #12
 800bea6:	f241 3288 	movw	r2, #5000	; 0x1388
 800beaa:	4619      	mov	r1, r3
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	f00a f9e5 	bl	801627c <HAL_OSPI_AutoPolling>
 800beb2:	4603      	mov	r3, r0
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d002      	beq.n	800bebe <MX25LM51245G_WriteEnable+0x196>
  {
    return MX25LM51245G_ERROR;
 800beb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bebc:	e000      	b.n	800bec0 <MX25LM51245G_WriteEnable+0x198>
  }

  return MX25LM51245G_OK;
 800bebe:	2300      	movs	r3, #0
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3770      	adds	r7, #112	; 0x70
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}

0800bec8 <MX25LM51245G_ReadStatusRegister>:
  * @param  Value Status register value pointer
  * @retval error status
  */
int32_t MX25LM51245G_ReadStatusRegister(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode,
                                        MX25LM51245G_Transfer_t Rate, uint8_t *Value)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b098      	sub	sp, #96	; 0x60
 800becc:	af00      	add	r7, sp, #0
 800bece:	60f8      	str	r0, [r7, #12]
 800bed0:	607b      	str	r3, [r7, #4]
 800bed2:	460b      	mov	r3, r1
 800bed4:	72fb      	strb	r3, [r7, #11]
 800bed6:	4613      	mov	r3, r2
 800bed8:	72bb      	strb	r3, [r7, #10]
  OSPI_RegularCmdTypeDef s_command = {0};
 800beda:	f107 0310 	add.w	r3, r7, #16
 800bede:	2250      	movs	r2, #80	; 0x50
 800bee0:	2100      	movs	r1, #0
 800bee2:	4618      	mov	r0, r3
 800bee4:	f011 fcec 	bl	801d8c0 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800bee8:	7afb      	ldrb	r3, [r7, #11]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d105      	bne.n	800befa <MX25LM51245G_ReadStatusRegister+0x32>
 800beee:	7abb      	ldrb	r3, [r7, #10]
 800bef0:	2b01      	cmp	r3, #1
 800bef2:	d102      	bne.n	800befa <MX25LM51245G_ReadStatusRegister+0x32>
  {
    return MX25LM51245G_ERROR;
 800bef4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bef8:	e080      	b.n	800bffc <MX25LM51245G_ReadStatusRegister+0x134>
  }

  /* Initialize the reading of status register */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800befa:	2300      	movs	r3, #0
 800befc:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800befe:	2300      	movs	r3, #0
 800bf00:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_OSPI_INSTRUCTION_1_LINE
                                 : HAL_OSPI_INSTRUCTION_8_LINES;
 800bf02:	7afb      	ldrb	r3, [r7, #11]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d101      	bne.n	800bf0c <MX25LM51245G_ReadStatusRegister+0x44>
 800bf08:	2301      	movs	r3, #1
 800bf0a:	e000      	b.n	800bf0e <MX25LM51245G_ReadStatusRegister+0x46>
 800bf0c:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
 800bf0e:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER)
                                 ? HAL_OSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800bf10:	7abb      	ldrb	r3, [r7, #10]
 800bf12:	2b01      	cmp	r3, #1
 800bf14:	d101      	bne.n	800bf1a <MX25LM51245G_ReadStatusRegister+0x52>
 800bf16:	2308      	movs	r3, #8
 800bf18:	e000      	b.n	800bf1c <MX25LM51245G_ReadStatusRegister+0x54>
 800bf1a:	2300      	movs	r3, #0
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER)
 800bf1c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_OSPI_INSTRUCTION_8_BITS
                                 : HAL_OSPI_INSTRUCTION_16_BITS;
 800bf1e:	7afb      	ldrb	r3, [r7, #11]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d101      	bne.n	800bf28 <MX25LM51245G_ReadStatusRegister+0x60>
 800bf24:	2300      	movs	r3, #0
 800bf26:	e000      	b.n	800bf2a <MX25LM51245G_ReadStatusRegister+0x62>
 800bf28:	2310      	movs	r3, #16
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE)
 800bf2a:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
                                 ? MX25LM51245G_READ_STATUS_REG_CMD
                                 : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 800bf2c:	7afb      	ldrb	r3, [r7, #11]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d101      	bne.n	800bf36 <MX25LM51245G_ReadStatusRegister+0x6e>
 800bf32:	2305      	movs	r3, #5
 800bf34:	e001      	b.n	800bf3a <MX25LM51245G_ReadStatusRegister+0x72>
 800bf36:	f240 53fa 	movw	r3, #1530	; 0x5fa
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
 800bf3a:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 800bf3c:	7afb      	ldrb	r3, [r7, #11]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d101      	bne.n	800bf46 <MX25LM51245G_ReadStatusRegister+0x7e>
 800bf42:	2300      	movs	r3, #0
 800bf44:	e001      	b.n	800bf4a <MX25LM51245G_ReadStatusRegister+0x82>
 800bf46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER)
                                 ? HAL_OSPI_ADDRESS_DTR_ENABLE
                                 : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800bf4c:	7abb      	ldrb	r3, [r7, #10]
 800bf4e:	2b01      	cmp	r3, #1
 800bf50:	d102      	bne.n	800bf58 <MX25LM51245G_ReadStatusRegister+0x90>
 800bf52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bf56:	e000      	b.n	800bf5a <MX25LM51245G_ReadStatusRegister+0x92>
 800bf58:	2300      	movs	r3, #0
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER)
 800bf5a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800bf5c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800bf60:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Address            = 0U;
 800bf62:	2300      	movs	r3, #0
 800bf64:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800bf66:	2300      	movs	r3, #0
 800bf68:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800bf6a:	7afb      	ldrb	r3, [r7, #11]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d102      	bne.n	800bf76 <MX25LM51245G_ReadStatusRegister+0xae>
 800bf70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bf74:	e001      	b.n	800bf7a <MX25LM51245G_ReadStatusRegister+0xb2>
 800bf76:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800bf7a:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER)
                                 ? HAL_OSPI_DATA_DTR_ENABLE
                                 : HAL_OSPI_DATA_DTR_DISABLE;
 800bf7c:	7abb      	ldrb	r3, [r7, #10]
 800bf7e:	2b01      	cmp	r3, #1
 800bf80:	d102      	bne.n	800bf88 <MX25LM51245G_ReadStatusRegister+0xc0>
 800bf82:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bf86:	e000      	b.n	800bf8a <MX25LM51245G_ReadStatusRegister+0xc2>
 800bf88:	2300      	movs	r3, #0
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER)
 800bf8a:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE)
                                 ? 0U
                                 : ((Rate == MX25LM51245G_DTR_TRANSFER)
 800bf8c:	7afb      	ldrb	r3, [r7, #11]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d006      	beq.n	800bfa0 <MX25LM51245G_ReadStatusRegister+0xd8>
 800bf92:	7abb      	ldrb	r3, [r7, #10]
 800bf94:	2b01      	cmp	r3, #1
 800bf96:	d101      	bne.n	800bf9c <MX25LM51245G_ReadStatusRegister+0xd4>
 800bf98:	2305      	movs	r3, #5
 800bf9a:	e002      	b.n	800bfa2 <MX25LM51245G_ReadStatusRegister+0xda>
 800bf9c:	2304      	movs	r3, #4
 800bf9e:	e000      	b.n	800bfa2 <MX25LM51245G_ReadStatusRegister+0xda>
 800bfa0:	2300      	movs	r3, #0
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE)
 800bfa2:	657b      	str	r3, [r7, #84]	; 0x54
                                    ? DUMMY_CYCLES_REG_OCTAL_DTR
                                    : DUMMY_CYCLES_REG_OCTAL);
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 800bfa4:	7abb      	ldrb	r3, [r7, #10]
 800bfa6:	2b01      	cmp	r3, #1
 800bfa8:	d101      	bne.n	800bfae <MX25LM51245G_ReadStatusRegister+0xe6>
 800bfaa:	2302      	movs	r3, #2
 800bfac:	e000      	b.n	800bfb0 <MX25LM51245G_ReadStatusRegister+0xe8>
 800bfae:	2301      	movs	r3, #1
 800bfb0:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 800bfb2:	7abb      	ldrb	r3, [r7, #10]
 800bfb4:	2b01      	cmp	r3, #1
 800bfb6:	d102      	bne.n	800bfbe <MX25LM51245G_ReadStatusRegister+0xf6>
 800bfb8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800bfbc:	e000      	b.n	800bfc0 <MX25LM51245G_ReadStatusRegister+0xf8>
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800bfc6:	f107 0310 	add.w	r3, r7, #16
 800bfca:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfce:	4619      	mov	r1, r3
 800bfd0:	68f8      	ldr	r0, [r7, #12]
 800bfd2:	f009 ffb0 	bl	8015f36 <HAL_OSPI_Command>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d002      	beq.n	800bfe2 <MX25LM51245G_ReadStatusRegister+0x11a>
  {
    return MX25LM51245G_ERROR;
 800bfdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bfe0:	e00c      	b.n	800bffc <MX25LM51245G_ReadStatusRegister+0x134>
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(Ctx, Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800bfe2:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfe6:	6879      	ldr	r1, [r7, #4]
 800bfe8:	68f8      	ldr	r0, [r7, #12]
 800bfea:	f00a f8a4 	bl	8016136 <HAL_OSPI_Receive>
 800bfee:	4603      	mov	r3, r0
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d002      	beq.n	800bffa <MX25LM51245G_ReadStatusRegister+0x132>
  {
    return MX25LM51245G_ERROR;
 800bff4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bff8:	e000      	b.n	800bffc <MX25LM51245G_ReadStatusRegister+0x134>
  }

  return MX25LM51245G_OK;
 800bffa:	2300      	movs	r3, #0
}
 800bffc:	4618      	mov	r0, r3
 800bffe:	3760      	adds	r7, #96	; 0x60
 800c000:	46bd      	mov	sp, r7
 800c002:	bd80      	pop	{r7, pc}

0800c004 <MX25LM51245G_WriteCfg2Register>:
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25LM51245G_WriteCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode,
                                       MX25LM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b098      	sub	sp, #96	; 0x60
 800c008:	af00      	add	r7, sp, #0
 800c00a:	60f8      	str	r0, [r7, #12]
 800c00c:	607b      	str	r3, [r7, #4]
 800c00e:	460b      	mov	r3, r1
 800c010:	72fb      	strb	r3, [r7, #11]
 800c012:	4613      	mov	r3, r2
 800c014:	72bb      	strb	r3, [r7, #10]
  OSPI_RegularCmdTypeDef s_command = {0};
 800c016:	f107 0310 	add.w	r3, r7, #16
 800c01a:	2250      	movs	r2, #80	; 0x50
 800c01c:	2100      	movs	r1, #0
 800c01e:	4618      	mov	r0, r3
 800c020:	f011 fc4e 	bl	801d8c0 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800c024:	7afb      	ldrb	r3, [r7, #11]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d105      	bne.n	800c036 <MX25LM51245G_WriteCfg2Register+0x32>
 800c02a:	7abb      	ldrb	r3, [r7, #10]
 800c02c:	2b01      	cmp	r3, #1
 800c02e:	d102      	bne.n	800c036 <MX25LM51245G_WriteCfg2Register+0x32>
  {
    return MX25LM51245G_ERROR;
 800c030:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c034:	e077      	b.n	800c126 <MX25LM51245G_WriteCfg2Register+0x122>
  }

  /* Initialize the writing of configuration register 2 */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800c036:	2300      	movs	r3, #0
 800c038:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800c03a:	2300      	movs	r3, #0
 800c03c:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_OSPI_INSTRUCTION_1_LINE
                                 : HAL_OSPI_INSTRUCTION_8_LINES;
 800c03e:	7afb      	ldrb	r3, [r7, #11]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d101      	bne.n	800c048 <MX25LM51245G_WriteCfg2Register+0x44>
 800c044:	2301      	movs	r3, #1
 800c046:	e000      	b.n	800c04a <MX25LM51245G_WriteCfg2Register+0x46>
 800c048:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
 800c04a:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER)
                                 ? HAL_OSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800c04c:	7abb      	ldrb	r3, [r7, #10]
 800c04e:	2b01      	cmp	r3, #1
 800c050:	d101      	bne.n	800c056 <MX25LM51245G_WriteCfg2Register+0x52>
 800c052:	2308      	movs	r3, #8
 800c054:	e000      	b.n	800c058 <MX25LM51245G_WriteCfg2Register+0x54>
 800c056:	2300      	movs	r3, #0
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER)
 800c058:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_OSPI_INSTRUCTION_8_BITS
                                 : HAL_OSPI_INSTRUCTION_16_BITS;
 800c05a:	7afb      	ldrb	r3, [r7, #11]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d101      	bne.n	800c064 <MX25LM51245G_WriteCfg2Register+0x60>
 800c060:	2300      	movs	r3, #0
 800c062:	e000      	b.n	800c066 <MX25LM51245G_WriteCfg2Register+0x62>
 800c064:	2310      	movs	r3, #16
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE)
 800c066:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
                                 ? MX25LM51245G_WRITE_CFG_REG2_CMD
                                 : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 800c068:	7afb      	ldrb	r3, [r7, #11]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d101      	bne.n	800c072 <MX25LM51245G_WriteCfg2Register+0x6e>
 800c06e:	2372      	movs	r3, #114	; 0x72
 800c070:	e001      	b.n	800c076 <MX25LM51245G_WriteCfg2Register+0x72>
 800c072:	f247 238d 	movw	r3, #29325	; 0x728d
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
 800c076:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 800c078:	7afb      	ldrb	r3, [r7, #11]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d102      	bne.n	800c084 <MX25LM51245G_WriteCfg2Register+0x80>
 800c07e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c082:	e001      	b.n	800c088 <MX25LM51245G_WriteCfg2Register+0x84>
 800c084:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c088:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER)
                                 ? HAL_OSPI_ADDRESS_DTR_ENABLE
                                 : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800c08a:	7abb      	ldrb	r3, [r7, #10]
 800c08c:	2b01      	cmp	r3, #1
 800c08e:	d102      	bne.n	800c096 <MX25LM51245G_WriteCfg2Register+0x92>
 800c090:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c094:	e000      	b.n	800c098 <MX25LM51245G_WriteCfg2Register+0x94>
 800c096:	2300      	movs	r3, #0
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER)
 800c098:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800c09a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800c09e:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Address            = WriteAddr;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800c0a8:	7afb      	ldrb	r3, [r7, #11]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d102      	bne.n	800c0b4 <MX25LM51245G_WriteCfg2Register+0xb0>
 800c0ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c0b2:	e001      	b.n	800c0b8 <MX25LM51245G_WriteCfg2Register+0xb4>
 800c0b4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800c0b8:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER)
                                 ? HAL_OSPI_DATA_DTR_ENABLE
                                 : HAL_OSPI_DATA_DTR_DISABLE;
 800c0ba:	7abb      	ldrb	r3, [r7, #10]
 800c0bc:	2b01      	cmp	r3, #1
 800c0be:	d102      	bne.n	800c0c6 <MX25LM51245G_WriteCfg2Register+0xc2>
 800c0c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c0c4:	e000      	b.n	800c0c8 <MX25LM51245G_WriteCfg2Register+0xc4>
 800c0c6:	2300      	movs	r3, #0
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER)
 800c0c8:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = 0U;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 800c0ce:	7afb      	ldrb	r3, [r7, #11]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d006      	beq.n	800c0e2 <MX25LM51245G_WriteCfg2Register+0xde>
 800c0d4:	7abb      	ldrb	r3, [r7, #10]
 800c0d6:	2b01      	cmp	r3, #1
 800c0d8:	d101      	bne.n	800c0de <MX25LM51245G_WriteCfg2Register+0xda>
 800c0da:	2302      	movs	r3, #2
 800c0dc:	e002      	b.n	800c0e4 <MX25LM51245G_WriteCfg2Register+0xe0>
 800c0de:	2301      	movs	r3, #1
 800c0e0:	e000      	b.n	800c0e4 <MX25LM51245G_WriteCfg2Register+0xe0>
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800c0ee:	f107 0310 	add.w	r3, r7, #16
 800c0f2:	f241 3288 	movw	r2, #5000	; 0x1388
 800c0f6:	4619      	mov	r1, r3
 800c0f8:	68f8      	ldr	r0, [r7, #12]
 800c0fa:	f009 ff1c 	bl	8015f36 <HAL_OSPI_Command>
 800c0fe:	4603      	mov	r3, r0
 800c100:	2b00      	cmp	r3, #0
 800c102:	d002      	beq.n	800c10a <MX25LM51245G_WriteCfg2Register+0x106>
  {
    return MX25LM51245G_ERROR;
 800c104:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c108:	e00d      	b.n	800c126 <MX25LM51245G_WriteCfg2Register+0x122>
  }

  if (HAL_OSPI_Transmit(Ctx, &Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800c10a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c10e:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800c112:	68f8      	ldr	r0, [r7, #12]
 800c114:	f009 ff9c 	bl	8016050 <HAL_OSPI_Transmit>
 800c118:	4603      	mov	r3, r0
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d002      	beq.n	800c124 <MX25LM51245G_WriteCfg2Register+0x120>
  {
    return MX25LM51245G_ERROR;
 800c11e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c122:	e000      	b.n	800c126 <MX25LM51245G_WriteCfg2Register+0x122>
  }

  return MX25LM51245G_OK;
 800c124:	2300      	movs	r3, #0
}
 800c126:	4618      	mov	r0, r3
 800c128:	3760      	adds	r7, #96	; 0x60
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}

0800c12e <MX25LM51245G_ReadCfg2Register>:
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25LM51245G_ReadCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode,
                                      MX25LM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
 800c12e:	b580      	push	{r7, lr}
 800c130:	b098      	sub	sp, #96	; 0x60
 800c132:	af00      	add	r7, sp, #0
 800c134:	60f8      	str	r0, [r7, #12]
 800c136:	607b      	str	r3, [r7, #4]
 800c138:	460b      	mov	r3, r1
 800c13a:	72fb      	strb	r3, [r7, #11]
 800c13c:	4613      	mov	r3, r2
 800c13e:	72bb      	strb	r3, [r7, #10]
  OSPI_RegularCmdTypeDef s_command = {0};
 800c140:	f107 0310 	add.w	r3, r7, #16
 800c144:	2250      	movs	r2, #80	; 0x50
 800c146:	2100      	movs	r1, #0
 800c148:	4618      	mov	r0, r3
 800c14a:	f011 fbb9 	bl	801d8c0 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800c14e:	7afb      	ldrb	r3, [r7, #11]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d105      	bne.n	800c160 <MX25LM51245G_ReadCfg2Register+0x32>
 800c154:	7abb      	ldrb	r3, [r7, #10]
 800c156:	2b01      	cmp	r3, #1
 800c158:	d102      	bne.n	800c160 <MX25LM51245G_ReadCfg2Register+0x32>
  {
    return MX25LM51245G_ERROR;
 800c15a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c15e:	e081      	b.n	800c264 <MX25LM51245G_ReadCfg2Register+0x136>
  }

  /* Initialize the reading of status register */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800c160:	2300      	movs	r3, #0
 800c162:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800c164:	2300      	movs	r3, #0
 800c166:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_OSPI_INSTRUCTION_1_LINE
                                 : HAL_OSPI_INSTRUCTION_8_LINES;
 800c168:	7afb      	ldrb	r3, [r7, #11]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d101      	bne.n	800c172 <MX25LM51245G_ReadCfg2Register+0x44>
 800c16e:	2301      	movs	r3, #1
 800c170:	e000      	b.n	800c174 <MX25LM51245G_ReadCfg2Register+0x46>
 800c172:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
 800c174:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER)
                                 ? HAL_OSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800c176:	7abb      	ldrb	r3, [r7, #10]
 800c178:	2b01      	cmp	r3, #1
 800c17a:	d101      	bne.n	800c180 <MX25LM51245G_ReadCfg2Register+0x52>
 800c17c:	2308      	movs	r3, #8
 800c17e:	e000      	b.n	800c182 <MX25LM51245G_ReadCfg2Register+0x54>
 800c180:	2300      	movs	r3, #0
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER)
 800c182:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_OSPI_INSTRUCTION_8_BITS
                                 : HAL_OSPI_INSTRUCTION_16_BITS;
 800c184:	7afb      	ldrb	r3, [r7, #11]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d101      	bne.n	800c18e <MX25LM51245G_ReadCfg2Register+0x60>
 800c18a:	2300      	movs	r3, #0
 800c18c:	e000      	b.n	800c190 <MX25LM51245G_ReadCfg2Register+0x62>
 800c18e:	2310      	movs	r3, #16
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE)
 800c190:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
                                 ? MX25LM51245G_READ_CFG_REG2_CMD
                                 : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 800c192:	7afb      	ldrb	r3, [r7, #11]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d101      	bne.n	800c19c <MX25LM51245G_ReadCfg2Register+0x6e>
 800c198:	2371      	movs	r3, #113	; 0x71
 800c19a:	e001      	b.n	800c1a0 <MX25LM51245G_ReadCfg2Register+0x72>
 800c19c:	f247 138e 	movw	r3, #29070	; 0x718e
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
 800c1a0:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 800c1a2:	7afb      	ldrb	r3, [r7, #11]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d102      	bne.n	800c1ae <MX25LM51245G_ReadCfg2Register+0x80>
 800c1a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c1ac:	e001      	b.n	800c1b2 <MX25LM51245G_ReadCfg2Register+0x84>
 800c1ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER)
                                 ? HAL_OSPI_ADDRESS_DTR_ENABLE
                                 : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800c1b4:	7abb      	ldrb	r3, [r7, #10]
 800c1b6:	2b01      	cmp	r3, #1
 800c1b8:	d102      	bne.n	800c1c0 <MX25LM51245G_ReadCfg2Register+0x92>
 800c1ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c1be:	e000      	b.n	800c1c2 <MX25LM51245G_ReadCfg2Register+0x94>
 800c1c0:	2300      	movs	r3, #0
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER)
 800c1c2:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800c1c4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800c1c8:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Address            = ReadAddr;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800c1d2:	7afb      	ldrb	r3, [r7, #11]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d102      	bne.n	800c1de <MX25LM51245G_ReadCfg2Register+0xb0>
 800c1d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c1dc:	e001      	b.n	800c1e2 <MX25LM51245G_ReadCfg2Register+0xb4>
 800c1de:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800c1e2:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER)
                                 ? HAL_OSPI_DATA_DTR_ENABLE
                                 : HAL_OSPI_DATA_DTR_DISABLE;
 800c1e4:	7abb      	ldrb	r3, [r7, #10]
 800c1e6:	2b01      	cmp	r3, #1
 800c1e8:	d102      	bne.n	800c1f0 <MX25LM51245G_ReadCfg2Register+0xc2>
 800c1ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c1ee:	e000      	b.n	800c1f2 <MX25LM51245G_ReadCfg2Register+0xc4>
 800c1f0:	2300      	movs	r3, #0
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER)
 800c1f2:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE)
                                 ? 0U
                                 : ((Rate == MX25LM51245G_DTR_TRANSFER)
 800c1f4:	7afb      	ldrb	r3, [r7, #11]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d006      	beq.n	800c208 <MX25LM51245G_ReadCfg2Register+0xda>
 800c1fa:	7abb      	ldrb	r3, [r7, #10]
 800c1fc:	2b01      	cmp	r3, #1
 800c1fe:	d101      	bne.n	800c204 <MX25LM51245G_ReadCfg2Register+0xd6>
 800c200:	2305      	movs	r3, #5
 800c202:	e002      	b.n	800c20a <MX25LM51245G_ReadCfg2Register+0xdc>
 800c204:	2304      	movs	r3, #4
 800c206:	e000      	b.n	800c20a <MX25LM51245G_ReadCfg2Register+0xdc>
 800c208:	2300      	movs	r3, #0
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE)
 800c20a:	657b      	str	r3, [r7, #84]	; 0x54
                                    ? DUMMY_CYCLES_REG_OCTAL_DTR
                                    : DUMMY_CYCLES_REG_OCTAL);
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 800c20c:	7abb      	ldrb	r3, [r7, #10]
 800c20e:	2b01      	cmp	r3, #1
 800c210:	d101      	bne.n	800c216 <MX25LM51245G_ReadCfg2Register+0xe8>
 800c212:	2302      	movs	r3, #2
 800c214:	e000      	b.n	800c218 <MX25LM51245G_ReadCfg2Register+0xea>
 800c216:	2301      	movs	r3, #1
 800c218:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 800c21a:	7abb      	ldrb	r3, [r7, #10]
 800c21c:	2b01      	cmp	r3, #1
 800c21e:	d102      	bne.n	800c226 <MX25LM51245G_ReadCfg2Register+0xf8>
 800c220:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800c224:	e000      	b.n	800c228 <MX25LM51245G_ReadCfg2Register+0xfa>
 800c226:	2300      	movs	r3, #0
 800c228:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800c22a:	2300      	movs	r3, #0
 800c22c:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800c22e:	f107 0310 	add.w	r3, r7, #16
 800c232:	f241 3288 	movw	r2, #5000	; 0x1388
 800c236:	4619      	mov	r1, r3
 800c238:	68f8      	ldr	r0, [r7, #12]
 800c23a:	f009 fe7c 	bl	8015f36 <HAL_OSPI_Command>
 800c23e:	4603      	mov	r3, r0
 800c240:	2b00      	cmp	r3, #0
 800c242:	d002      	beq.n	800c24a <MX25LM51245G_ReadCfg2Register+0x11c>
  {
    return MX25LM51245G_ERROR;
 800c244:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c248:	e00c      	b.n	800c264 <MX25LM51245G_ReadCfg2Register+0x136>
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(Ctx, Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800c24a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c24e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c250:	68f8      	ldr	r0, [r7, #12]
 800c252:	f009 ff70 	bl	8016136 <HAL_OSPI_Receive>
 800c256:	4603      	mov	r3, r0
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d002      	beq.n	800c262 <MX25LM51245G_ReadCfg2Register+0x134>
  {
    return MX25LM51245G_ERROR;
 800c25c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c260:	e000      	b.n	800c264 <MX25LM51245G_ReadCfg2Register+0x136>
  }

  return MX25LM51245G_OK;
 800c262:	2300      	movs	r3, #0
}
 800c264:	4618      	mov	r0, r3
 800c266:	3760      	adds	r7, #96	; 0x60
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}

0800c26c <MX25LM51245G_ReadSecurityRegister>:
  * @param  Value Security register value pointer
  * @retval error status
  */
int32_t MX25LM51245G_ReadSecurityRegister(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode,
                                          MX25LM51245G_Transfer_t Rate, uint8_t *Value)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b098      	sub	sp, #96	; 0x60
 800c270:	af00      	add	r7, sp, #0
 800c272:	60f8      	str	r0, [r7, #12]
 800c274:	607b      	str	r3, [r7, #4]
 800c276:	460b      	mov	r3, r1
 800c278:	72fb      	strb	r3, [r7, #11]
 800c27a:	4613      	mov	r3, r2
 800c27c:	72bb      	strb	r3, [r7, #10]
  OSPI_RegularCmdTypeDef s_command = {0};
 800c27e:	f107 0310 	add.w	r3, r7, #16
 800c282:	2250      	movs	r2, #80	; 0x50
 800c284:	2100      	movs	r1, #0
 800c286:	4618      	mov	r0, r3
 800c288:	f011 fb1a 	bl	801d8c0 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800c28c:	7afb      	ldrb	r3, [r7, #11]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d105      	bne.n	800c29e <MX25LM51245G_ReadSecurityRegister+0x32>
 800c292:	7abb      	ldrb	r3, [r7, #10]
 800c294:	2b01      	cmp	r3, #1
 800c296:	d102      	bne.n	800c29e <MX25LM51245G_ReadSecurityRegister+0x32>
  {
    return MX25LM51245G_ERROR;
 800c298:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c29c:	e080      	b.n	800c3a0 <MX25LM51245G_ReadSecurityRegister+0x134>
  }

  /* Initialize the reading of security register */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_OSPI_INSTRUCTION_1_LINE
                                 : HAL_OSPI_INSTRUCTION_8_LINES;
 800c2a6:	7afb      	ldrb	r3, [r7, #11]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d101      	bne.n	800c2b0 <MX25LM51245G_ReadSecurityRegister+0x44>
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	e000      	b.n	800c2b2 <MX25LM51245G_ReadSecurityRegister+0x46>
 800c2b0:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
 800c2b2:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER)
                                 ? HAL_OSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800c2b4:	7abb      	ldrb	r3, [r7, #10]
 800c2b6:	2b01      	cmp	r3, #1
 800c2b8:	d101      	bne.n	800c2be <MX25LM51245G_ReadSecurityRegister+0x52>
 800c2ba:	2308      	movs	r3, #8
 800c2bc:	e000      	b.n	800c2c0 <MX25LM51245G_ReadSecurityRegister+0x54>
 800c2be:	2300      	movs	r3, #0
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER)
 800c2c0:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_OSPI_INSTRUCTION_8_BITS
                                 : HAL_OSPI_INSTRUCTION_16_BITS;
 800c2c2:	7afb      	ldrb	r3, [r7, #11]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d101      	bne.n	800c2cc <MX25LM51245G_ReadSecurityRegister+0x60>
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	e000      	b.n	800c2ce <MX25LM51245G_ReadSecurityRegister+0x62>
 800c2cc:	2310      	movs	r3, #16
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE)
 800c2ce:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
                                 ? MX25LM51245G_READ_SECURITY_REG_CMD
                                 : MX25LM51245G_OCTA_READ_SECURITY_REG_CMD;
 800c2d0:	7afb      	ldrb	r3, [r7, #11]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d101      	bne.n	800c2da <MX25LM51245G_ReadSecurityRegister+0x6e>
 800c2d6:	232b      	movs	r3, #43	; 0x2b
 800c2d8:	e001      	b.n	800c2de <MX25LM51245G_ReadSecurityRegister+0x72>
 800c2da:	f642 33d4 	movw	r3, #11220	; 0x2bd4
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
 800c2de:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 800c2e0:	7afb      	ldrb	r3, [r7, #11]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d101      	bne.n	800c2ea <MX25LM51245G_ReadSecurityRegister+0x7e>
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	e001      	b.n	800c2ee <MX25LM51245G_ReadSecurityRegister+0x82>
 800c2ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER)
                                 ? HAL_OSPI_ADDRESS_DTR_ENABLE
                                 : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800c2f0:	7abb      	ldrb	r3, [r7, #10]
 800c2f2:	2b01      	cmp	r3, #1
 800c2f4:	d102      	bne.n	800c2fc <MX25LM51245G_ReadSecurityRegister+0x90>
 800c2f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c2fa:	e000      	b.n	800c2fe <MX25LM51245G_ReadSecurityRegister+0x92>
 800c2fc:	2300      	movs	r3, #0
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER)
 800c2fe:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800c300:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800c304:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Address            = 0U;
 800c306:	2300      	movs	r3, #0
 800c308:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800c30a:	2300      	movs	r3, #0
 800c30c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800c30e:	7afb      	ldrb	r3, [r7, #11]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d102      	bne.n	800c31a <MX25LM51245G_ReadSecurityRegister+0xae>
 800c314:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c318:	e001      	b.n	800c31e <MX25LM51245G_ReadSecurityRegister+0xb2>
 800c31a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800c31e:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER)
                                 ? HAL_OSPI_DATA_DTR_ENABLE
                                 : HAL_OSPI_DATA_DTR_DISABLE;
 800c320:	7abb      	ldrb	r3, [r7, #10]
 800c322:	2b01      	cmp	r3, #1
 800c324:	d102      	bne.n	800c32c <MX25LM51245G_ReadSecurityRegister+0xc0>
 800c326:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c32a:	e000      	b.n	800c32e <MX25LM51245G_ReadSecurityRegister+0xc2>
 800c32c:	2300      	movs	r3, #0
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER)
 800c32e:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE)
                                 ? 0U
                                 : ((Rate == MX25LM51245G_DTR_TRANSFER)
 800c330:	7afb      	ldrb	r3, [r7, #11]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d006      	beq.n	800c344 <MX25LM51245G_ReadSecurityRegister+0xd8>
 800c336:	7abb      	ldrb	r3, [r7, #10]
 800c338:	2b01      	cmp	r3, #1
 800c33a:	d101      	bne.n	800c340 <MX25LM51245G_ReadSecurityRegister+0xd4>
 800c33c:	2305      	movs	r3, #5
 800c33e:	e002      	b.n	800c346 <MX25LM51245G_ReadSecurityRegister+0xda>
 800c340:	2304      	movs	r3, #4
 800c342:	e000      	b.n	800c346 <MX25LM51245G_ReadSecurityRegister+0xda>
 800c344:	2300      	movs	r3, #0
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE)
 800c346:	657b      	str	r3, [r7, #84]	; 0x54
                                    ? DUMMY_CYCLES_REG_OCTAL_DTR
                                    : DUMMY_CYCLES_REG_OCTAL);
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 800c348:	7abb      	ldrb	r3, [r7, #10]
 800c34a:	2b01      	cmp	r3, #1
 800c34c:	d101      	bne.n	800c352 <MX25LM51245G_ReadSecurityRegister+0xe6>
 800c34e:	2302      	movs	r3, #2
 800c350:	e000      	b.n	800c354 <MX25LM51245G_ReadSecurityRegister+0xe8>
 800c352:	2301      	movs	r3, #1
 800c354:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 800c356:	7abb      	ldrb	r3, [r7, #10]
 800c358:	2b01      	cmp	r3, #1
 800c35a:	d102      	bne.n	800c362 <MX25LM51245G_ReadSecurityRegister+0xf6>
 800c35c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800c360:	e000      	b.n	800c364 <MX25LM51245G_ReadSecurityRegister+0xf8>
 800c362:	2300      	movs	r3, #0
 800c364:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800c366:	2300      	movs	r3, #0
 800c368:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800c36a:	f107 0310 	add.w	r3, r7, #16
 800c36e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c372:	4619      	mov	r1, r3
 800c374:	68f8      	ldr	r0, [r7, #12]
 800c376:	f009 fdde 	bl	8015f36 <HAL_OSPI_Command>
 800c37a:	4603      	mov	r3, r0
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d002      	beq.n	800c386 <MX25LM51245G_ReadSecurityRegister+0x11a>
  {
    return MX25LM51245G_ERROR;
 800c380:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c384:	e00c      	b.n	800c3a0 <MX25LM51245G_ReadSecurityRegister+0x134>
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(Ctx, Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800c386:	f241 3288 	movw	r2, #5000	; 0x1388
 800c38a:	6879      	ldr	r1, [r7, #4]
 800c38c:	68f8      	ldr	r0, [r7, #12]
 800c38e:	f009 fed2 	bl	8016136 <HAL_OSPI_Receive>
 800c392:	4603      	mov	r3, r0
 800c394:	2b00      	cmp	r3, #0
 800c396:	d002      	beq.n	800c39e <MX25LM51245G_ReadSecurityRegister+0x132>
  {
    return MX25LM51245G_ERROR;
 800c398:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c39c:	e000      	b.n	800c3a0 <MX25LM51245G_ReadSecurityRegister+0x134>
  }

  return MX25LM51245G_OK;
 800c39e:	2300      	movs	r3, #0
}
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	3760      	adds	r7, #96	; 0x60
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bd80      	pop	{r7, pc}

0800c3a8 <MX25LM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b096      	sub	sp, #88	; 0x58
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
 800c3b0:	460b      	mov	r3, r1
 800c3b2:	70fb      	strb	r3, [r7, #3]
 800c3b4:	4613      	mov	r3, r2
 800c3b6:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef s_command = {0};
 800c3b8:	f107 0308 	add.w	r3, r7, #8
 800c3bc:	2250      	movs	r2, #80	; 0x50
 800c3be:	2100      	movs	r1, #0
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f011 fa7d 	bl	801d8c0 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800c3c6:	78fb      	ldrb	r3, [r7, #3]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d105      	bne.n	800c3d8 <MX25LM51245G_ResetEnable+0x30>
 800c3cc:	78bb      	ldrb	r3, [r7, #2]
 800c3ce:	2b01      	cmp	r3, #1
 800c3d0:	d102      	bne.n	800c3d8 <MX25LM51245G_ResetEnable+0x30>
  {
    return MX25LM51245G_ERROR;
 800c3d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c3d6:	e03b      	b.n	800c450 <MX25LM51245G_ResetEnable+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800c3d8:	2300      	movs	r3, #0
 800c3da:	60bb      	str	r3, [r7, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800c3dc:	2300      	movs	r3, #0
 800c3de:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_OSPI_INSTRUCTION_1_LINE
                                 : HAL_OSPI_INSTRUCTION_8_LINES;
 800c3e0:	78fb      	ldrb	r3, [r7, #3]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d101      	bne.n	800c3ea <MX25LM51245G_ResetEnable+0x42>
 800c3e6:	2301      	movs	r3, #1
 800c3e8:	e000      	b.n	800c3ec <MX25LM51245G_ResetEnable+0x44>
 800c3ea:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
 800c3ec:	617b      	str	r3, [r7, #20]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER)
                                 ? HAL_OSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800c3ee:	78bb      	ldrb	r3, [r7, #2]
 800c3f0:	2b01      	cmp	r3, #1
 800c3f2:	d101      	bne.n	800c3f8 <MX25LM51245G_ResetEnable+0x50>
 800c3f4:	2308      	movs	r3, #8
 800c3f6:	e000      	b.n	800c3fa <MX25LM51245G_ResetEnable+0x52>
 800c3f8:	2300      	movs	r3, #0
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER)
 800c3fa:	61fb      	str	r3, [r7, #28]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_OSPI_INSTRUCTION_8_BITS
                                 : HAL_OSPI_INSTRUCTION_16_BITS;
 800c3fc:	78fb      	ldrb	r3, [r7, #3]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d101      	bne.n	800c406 <MX25LM51245G_ResetEnable+0x5e>
 800c402:	2300      	movs	r3, #0
 800c404:	e000      	b.n	800c408 <MX25LM51245G_ResetEnable+0x60>
 800c406:	2310      	movs	r3, #16
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE)
 800c408:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
                                 ? MX25LM51245G_RESET_ENABLE_CMD
                                 : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 800c40a:	78fb      	ldrb	r3, [r7, #3]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d101      	bne.n	800c414 <MX25LM51245G_ResetEnable+0x6c>
 800c410:	2366      	movs	r3, #102	; 0x66
 800c412:	e001      	b.n	800c418 <MX25LM51245G_ResetEnable+0x70>
 800c414:	f246 6399 	movw	r3, #26265	; 0x6699
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
 800c418:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800c41a:	2300      	movs	r3, #0
 800c41c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800c41e:	2300      	movs	r3, #0
 800c420:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 800c422:	2300      	movs	r3, #0
 800c424:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DummyCycles        = 0U;
 800c426:	2300      	movs	r3, #0
 800c428:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800c42a:	2300      	movs	r3, #0
 800c42c:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800c42e:	2300      	movs	r3, #0
 800c430:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800c432:	f107 0308 	add.w	r3, r7, #8
 800c436:	f241 3288 	movw	r2, #5000	; 0x1388
 800c43a:	4619      	mov	r1, r3
 800c43c:	6878      	ldr	r0, [r7, #4]
 800c43e:	f009 fd7a 	bl	8015f36 <HAL_OSPI_Command>
 800c442:	4603      	mov	r3, r0
 800c444:	2b00      	cmp	r3, #0
 800c446:	d002      	beq.n	800c44e <MX25LM51245G_ResetEnable+0xa6>
  {
    return MX25LM51245G_ERROR;
 800c448:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c44c:	e000      	b.n	800c450 <MX25LM51245G_ResetEnable+0xa8>
  }

  return MX25LM51245G_OK;
 800c44e:	2300      	movs	r3, #0
}
 800c450:	4618      	mov	r0, r3
 800c452:	3758      	adds	r7, #88	; 0x58
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}

0800c458 <MX25LM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetMemory(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b096      	sub	sp, #88	; 0x58
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
 800c460:	460b      	mov	r3, r1
 800c462:	70fb      	strb	r3, [r7, #3]
 800c464:	4613      	mov	r3, r2
 800c466:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef s_command = {0};
 800c468:	f107 0308 	add.w	r3, r7, #8
 800c46c:	2250      	movs	r2, #80	; 0x50
 800c46e:	2100      	movs	r1, #0
 800c470:	4618      	mov	r0, r3
 800c472:	f011 fa25 	bl	801d8c0 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800c476:	78fb      	ldrb	r3, [r7, #3]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d105      	bne.n	800c488 <MX25LM51245G_ResetMemory+0x30>
 800c47c:	78bb      	ldrb	r3, [r7, #2]
 800c47e:	2b01      	cmp	r3, #1
 800c480:	d102      	bne.n	800c488 <MX25LM51245G_ResetMemory+0x30>
  {
    return MX25LM51245G_ERROR;
 800c482:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c486:	e03b      	b.n	800c500 <MX25LM51245G_ResetMemory+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800c488:	2300      	movs	r3, #0
 800c48a:	60bb      	str	r3, [r7, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800c48c:	2300      	movs	r3, #0
 800c48e:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_OSPI_INSTRUCTION_1_LINE
                                 : HAL_OSPI_INSTRUCTION_8_LINES;
 800c490:	78fb      	ldrb	r3, [r7, #3]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d101      	bne.n	800c49a <MX25LM51245G_ResetMemory+0x42>
 800c496:	2301      	movs	r3, #1
 800c498:	e000      	b.n	800c49c <MX25LM51245G_ResetMemory+0x44>
 800c49a:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE)
 800c49c:	617b      	str	r3, [r7, #20]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER)
                                 ? HAL_OSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800c49e:	78bb      	ldrb	r3, [r7, #2]
 800c4a0:	2b01      	cmp	r3, #1
 800c4a2:	d101      	bne.n	800c4a8 <MX25LM51245G_ResetMemory+0x50>
 800c4a4:	2308      	movs	r3, #8
 800c4a6:	e000      	b.n	800c4aa <MX25LM51245G_ResetMemory+0x52>
 800c4a8:	2300      	movs	r3, #0
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER)
 800c4aa:	61fb      	str	r3, [r7, #28]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE)
                                 ? HAL_OSPI_INSTRUCTION_8_BITS
                                 : HAL_OSPI_INSTRUCTION_16_BITS;
 800c4ac:	78fb      	ldrb	r3, [r7, #3]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d101      	bne.n	800c4b6 <MX25LM51245G_ResetMemory+0x5e>
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	e000      	b.n	800c4b8 <MX25LM51245G_ResetMemory+0x60>
 800c4b6:	2310      	movs	r3, #16
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE)
 800c4b8:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
                                 ? MX25LM51245G_RESET_MEMORY_CMD
                                 : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 800c4ba:	78fb      	ldrb	r3, [r7, #3]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d101      	bne.n	800c4c4 <MX25LM51245G_ResetMemory+0x6c>
 800c4c0:	2399      	movs	r3, #153	; 0x99
 800c4c2:	e001      	b.n	800c4c8 <MX25LM51245G_ResetMemory+0x70>
 800c4c4:	f649 1366 	movw	r3, #39270	; 0x9966
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE)
 800c4c8:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DummyCycles        = 0U;
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800c4de:	2300      	movs	r3, #0
 800c4e0:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800c4e2:	f107 0308 	add.w	r3, r7, #8
 800c4e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4ea:	4619      	mov	r1, r3
 800c4ec:	6878      	ldr	r0, [r7, #4]
 800c4ee:	f009 fd22 	bl	8015f36 <HAL_OSPI_Command>
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d002      	beq.n	800c4fe <MX25LM51245G_ResetMemory+0xa6>
  {
    return MX25LM51245G_ERROR;
 800c4f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c4fc:	e000      	b.n	800c500 <MX25LM51245G_ResetMemory+0xa8>
  }

  return MX25LM51245G_OK;
 800c4fe:	2300      	movs	r3, #0
}
 800c500:	4618      	mov	r0, r3
 800c502:	3758      	adds	r7, #88	; 0x58
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}

0800c508 <OV5640_RegisterBusIO>:
  * @brief  Register component IO bus
  * @param  Component object pointer
  * @retval Component status
  */
int32_t OV5640_RegisterBusIO(OV5640_Object_t *pObj, OV5640_IO_t *pIO)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b084      	sub	sp, #16
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
 800c510:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d103      	bne.n	800c520 <OV5640_RegisterBusIO+0x18>
  {
    ret = OV5640_ERROR;
 800c518:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c51c:	60fb      	str	r3, [r7, #12]
 800c51e:	e02c      	b.n	800c57a <OV5640_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	681a      	ldr	r2, [r3, #0]
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	685a      	ldr	r2, [r3, #4]
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	891a      	ldrh	r2, [r3, #8]
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	68da      	ldr	r2, [r3, #12]
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	691a      	ldr	r2, [r3, #16]
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	695a      	ldr	r2, [r3, #20]
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = OV5640_ReadRegWrap;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	4a0c      	ldr	r2, [pc, #48]	; (800c584 <OV5640_RegisterBusIO+0x7c>)
 800c554:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = OV5640_WriteRegWrap;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	4a0b      	ldr	r2, [pc, #44]	; (800c588 <OV5640_RegisterBusIO+0x80>)
 800c55a:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	687a      	ldr	r2, [r7, #4]
 800c560:	621a      	str	r2, [r3, #32]

    if (pObj->IO.Init != NULL)
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d004      	beq.n	800c574 <OV5640_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	4798      	blx	r3
 800c570:	60f8      	str	r0, [r7, #12]
 800c572:	e002      	b.n	800c57a <OV5640_RegisterBusIO+0x72>
    }
    else
    {
      ret = OV5640_ERROR;
 800c574:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c578:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800c57a:	68fb      	ldr	r3, [r7, #12]
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	3710      	adds	r7, #16
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}
 800c584:	0800dd87 	.word	0x0800dd87
 800c588:	0800ddb9 	.word	0x0800ddb9

0800c58c <OV5640_Init>:
  * @param  Resolution  Camera resolution
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_Init(OV5640_Object_t *pObj, uint32_t Resolution, uint32_t PixelFormat)
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b088      	sub	sp, #32
 800c590:	af00      	add	r7, sp, #0
 800c592:	60f8      	str	r0, [r7, #12]
 800c594:	60b9      	str	r1, [r7, #8]
 800c596:	607a      	str	r2, [r7, #4]
  uint32_t index;
  int32_t ret = OV5640_OK;
 800c598:	2300      	movs	r3, #0
 800c59a:	61bb      	str	r3, [r7, #24]
    {OV5640_AEC_CTRL1F, 0x14},
    {OV5640_SYSTEM_CTROL0, 0x02},
  };
  uint8_t tmp;

  if (pObj->IsInitialized == 0U)
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d165      	bne.n	800c672 <OV5640_Init+0xe6>
  {
    /* Check if resolution is supported */
    if ((Resolution > OV5640_R800x480) ||
 800c5a6:	68bb      	ldr	r3, [r7, #8]
 800c5a8:	2b04      	cmp	r3, #4
 800c5aa:	d80e      	bhi.n	800c5ca <OV5640_Init+0x3e>
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d00f      	beq.n	800c5d2 <OV5640_Init+0x46>
        ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2b02      	cmp	r3, #2
 800c5b6:	d00c      	beq.n	800c5d2 <OV5640_Init+0x46>
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2b01      	cmp	r3, #1
 800c5bc:	d009      	beq.n	800c5d2 <OV5640_Init+0x46>
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2b07      	cmp	r3, #7
 800c5c2:	d006      	beq.n	800c5d2 <OV5640_Init+0x46>
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2b08      	cmp	r3, #8
 800c5c8:	d003      	beq.n	800c5d2 <OV5640_Init+0x46>
         (PixelFormat != OV5640_JPEG)))
    {
      ret = OV5640_ERROR;
 800c5ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c5ce:	61bb      	str	r3, [r7, #24]
 800c5d0:	e04f      	b.n	800c672 <OV5640_Init+0xe6>
    }
    else
    {
      /* Set common parameters for all resolutions */
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	61fb      	str	r3, [r7, #28]
 800c5d6:	e01f      	b.n	800c618 <OV5640_Init+0x8c>
      {
        if (ret != OV5640_ERROR)
 800c5d8:	69bb      	ldr	r3, [r7, #24]
 800c5da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c5de:	d018      	beq.n	800c612 <OV5640_Init+0x86>
        {
          tmp = (uint8_t)OV5640_Common[index][1];
 800c5e0:	4a26      	ldr	r2, [pc, #152]	; (800c67c <OV5640_Init+0xf0>)
 800c5e2:	69fb      	ldr	r3, [r7, #28]
 800c5e4:	009b      	lsls	r3, r3, #2
 800c5e6:	4413      	add	r3, r2
 800c5e8:	885b      	ldrh	r3, [r3, #2]
 800c5ea:	b2db      	uxtb	r3, r3
 800c5ec:	75fb      	strb	r3, [r7, #23]

          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	f103 0018 	add.w	r0, r3, #24
 800c5f4:	4a21      	ldr	r2, [pc, #132]	; (800c67c <OV5640_Init+0xf0>)
 800c5f6:	69fb      	ldr	r3, [r7, #28]
 800c5f8:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800c5fc:	f107 0217 	add.w	r2, r7, #23
 800c600:	2301      	movs	r3, #1
 800c602:	f001 fc09 	bl	800de18 <ov5640_write_reg>
 800c606:	4603      	mov	r3, r0
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d002      	beq.n	800c612 <OV5640_Init+0x86>
          {
            ret = OV5640_ERROR;
 800c60c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c610:	61bb      	str	r3, [r7, #24]
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 800c612:	69fb      	ldr	r3, [r7, #28]
 800c614:	3301      	adds	r3, #1
 800c616:	61fb      	str	r3, [r7, #28]
 800c618:	69fb      	ldr	r3, [r7, #28]
 800c61a:	2bfd      	cmp	r3, #253	; 0xfd
 800c61c:	d9dc      	bls.n	800c5d8 <OV5640_Init+0x4c>
          }
        }
      }

      if (ret == OV5640_OK)
 800c61e:	69bb      	ldr	r3, [r7, #24]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d126      	bne.n	800c672 <OV5640_Init+0xe6>
      {
        /* Set specific parameters for each resolution */
        if (OV5640_SetResolution(pObj, Resolution) != OV5640_OK)
 800c624:	68b9      	ldr	r1, [r7, #8]
 800c626:	68f8      	ldr	r0, [r7, #12]
 800c628:	f000 f9e0 	bl	800c9ec <OV5640_SetResolution>
 800c62c:	4603      	mov	r3, r0
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d003      	beq.n	800c63a <OV5640_Init+0xae>
        {
          ret = OV5640_ERROR;
 800c632:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c636:	61bb      	str	r3, [r7, #24]
 800c638:	e01b      	b.n	800c672 <OV5640_Init+0xe6>
        }/* Set specific parameters for each pixel format */
        else if (OV5640_SetPixelFormat(pObj, PixelFormat) != OV5640_OK)
 800c63a:	6879      	ldr	r1, [r7, #4]
 800c63c:	68f8      	ldr	r0, [r7, #12]
 800c63e:	f000 f833 	bl	800c6a8 <OV5640_SetPixelFormat>
 800c642:	4603      	mov	r3, r0
 800c644:	2b00      	cmp	r3, #0
 800c646:	d003      	beq.n	800c650 <OV5640_Init+0xc4>
        {
          ret = OV5640_ERROR;
 800c648:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c64c:	61bb      	str	r3, [r7, #24]
 800c64e:	e010      	b.n	800c672 <OV5640_Init+0xe6>
        }/* Set PixelClock, Href and VSync Polarity */
        else if (OV5640_SetPolarities(pObj, OV5640_POLARITY_PCLK_HIGH, OV5640_POLARITY_HREF_HIGH,
 800c650:	2300      	movs	r3, #0
 800c652:	2201      	movs	r2, #1
 800c654:	2101      	movs	r1, #1
 800c656:	68f8      	ldr	r0, [r7, #12]
 800c658:	f000 fb64 	bl	800cd24 <OV5640_SetPolarities>
 800c65c:	4603      	mov	r3, r0
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d003      	beq.n	800c66a <OV5640_Init+0xde>
                                      OV5640_POLARITY_VSYNC_HIGH) != OV5640_OK)
        {
          ret = OV5640_ERROR;
 800c662:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c666:	61bb      	str	r3, [r7, #24]
 800c668:	e003      	b.n	800c672 <OV5640_Init+0xe6>
        }
        else
        {
          pObj->IsInitialized = 1U;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	2201      	movs	r2, #1
 800c66e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }
      }
    }
  }

  return ret;
 800c672:	69bb      	ldr	r3, [r7, #24]
}
 800c674:	4618      	mov	r0, r3
 800c676:	3720      	adds	r7, #32
 800c678:	46bd      	mov	sp, r7
 800c67a:	bd80      	pop	{r7, pc}
 800c67c:	0802277c 	.word	0x0802277c

0800c680 <OV5640_DeInit>:
  * @brief  De-initializes the camera sensor.
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t OV5640_DeInit(OV5640_Object_t *pObj)
{
 800c680:	b480      	push	{r7}
 800c682:	b083      	sub	sp, #12
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
  if (pObj->IsInitialized == 1U)
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c68e:	2b01      	cmp	r3, #1
 800c690:	d103      	bne.n	800c69a <OV5640_DeInit+0x1a>
  {
    /* De-initialize camera sensor interface */
    pObj->IsInitialized = 0U;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2200      	movs	r2, #0
 800c696:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return OV5640_OK;
 800c69a:	2300      	movs	r3, #0
}
 800c69c:	4618      	mov	r0, r3
 800c69e:	370c      	adds	r7, #12
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a6:	4770      	bx	lr

0800c6a8 <OV5640_SetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_SetPixelFormat(OV5640_Object_t *pObj, uint32_t PixelFormat)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b086      	sub	sp, #24
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
 800c6b0:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	617b      	str	r3, [r7, #20]
    {OV5640_FORMAT_CTRL00, 0x30},
    {OV5640_FORMAT_MUX_CTRL, 0x00},
  };

  /* Check if PixelFormat is supported */
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d00f      	beq.n	800c6dc <OV5640_SetPixelFormat+0x34>
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	2b02      	cmp	r3, #2
 800c6c0:	d00c      	beq.n	800c6dc <OV5640_SetPixelFormat+0x34>
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	2b01      	cmp	r3, #1
 800c6c6:	d009      	beq.n	800c6dc <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	2b07      	cmp	r3, #7
 800c6cc:	d006      	beq.n	800c6dc <OV5640_SetPixelFormat+0x34>
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	2b08      	cmp	r3, #8
 800c6d2:	d003      	beq.n	800c6dc <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_JPEG))
  {
    /* Pixel format not supported */
    ret = OV5640_ERROR;
 800c6d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c6d8:	617b      	str	r3, [r7, #20]
 800c6da:	e16a      	b.n	800c9b2 <OV5640_SetPixelFormat+0x30a>
  }
  else
  {
    /* Set specific parameters for each PixelFormat */
    switch (PixelFormat)
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	3b01      	subs	r3, #1
 800c6e0:	2b07      	cmp	r3, #7
 800c6e2:	f200 80c3 	bhi.w	800c86c <OV5640_SetPixelFormat+0x1c4>
 800c6e6:	a201      	add	r2, pc, #4	; (adr r2, 800c6ec <OV5640_SetPixelFormat+0x44>)
 800c6e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6ec:	0800c765 	.word	0x0800c765
 800c6f0:	0800c70d 	.word	0x0800c70d
 800c6f4:	0800c86d 	.word	0x0800c86d
 800c6f8:	0800c86d 	.word	0x0800c86d
 800c6fc:	0800c86d 	.word	0x0800c86d
 800c700:	0800c86d 	.word	0x0800c86d
 800c704:	0800c7bd 	.word	0x0800c7bd
 800c708:	0800c815 	.word	0x0800c815
    {
      case OV5640_YUV422:
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 800c70c:	2300      	movs	r3, #0
 800c70e:	613b      	str	r3, [r7, #16]
 800c710:	e024      	b.n	800c75c <OV5640_SetPixelFormat+0xb4>
        {
          if (ret != OV5640_ERROR)
 800c712:	697b      	ldr	r3, [r7, #20]
 800c714:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c718:	d01d      	beq.n	800c756 <OV5640_SetPixelFormat+0xae>
          {
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 800c71a:	4aa8      	ldr	r2, [pc, #672]	; (800c9bc <OV5640_SetPixelFormat+0x314>)
 800c71c:	693b      	ldr	r3, [r7, #16]
 800c71e:	009b      	lsls	r3, r3, #2
 800c720:	4413      	add	r3, r2
 800c722:	885b      	ldrh	r3, [r3, #2]
 800c724:	b2db      	uxtb	r3, r3
 800c726:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	f103 0018 	add.w	r0, r3, #24
 800c72e:	4aa3      	ldr	r2, [pc, #652]	; (800c9bc <OV5640_SetPixelFormat+0x314>)
 800c730:	693b      	ldr	r3, [r7, #16]
 800c732:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800c736:	f107 020f 	add.w	r2, r7, #15
 800c73a:	2301      	movs	r3, #1
 800c73c:	f001 fb6c 	bl	800de18 <ov5640_write_reg>
 800c740:	4603      	mov	r3, r0
 800c742:	2b00      	cmp	r3, #0
 800c744:	d003      	beq.n	800c74e <OV5640_SetPixelFormat+0xa6>
            {
              ret = OV5640_ERROR;
 800c746:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c74a:	617b      	str	r3, [r7, #20]
 800c74c:	e003      	b.n	800c756 <OV5640_SetPixelFormat+0xae>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 800c74e:	2101      	movs	r1, #1
 800c750:	6878      	ldr	r0, [r7, #4]
 800c752:	f001 fafe 	bl	800dd52 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 800c756:	693b      	ldr	r3, [r7, #16]
 800c758:	3301      	adds	r3, #1
 800c75a:	613b      	str	r3, [r7, #16]
 800c75c:	693b      	ldr	r3, [r7, #16]
 800c75e:	2b01      	cmp	r3, #1
 800c760:	d9d7      	bls.n	800c712 <OV5640_SetPixelFormat+0x6a>
            }
          }
        }
        break;
 800c762:	e0af      	b.n	800c8c4 <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB888:
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 800c764:	2300      	movs	r3, #0
 800c766:	613b      	str	r3, [r7, #16]
 800c768:	e024      	b.n	800c7b4 <OV5640_SetPixelFormat+0x10c>
        {
          if (ret != OV5640_ERROR)
 800c76a:	697b      	ldr	r3, [r7, #20]
 800c76c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c770:	d01d      	beq.n	800c7ae <OV5640_SetPixelFormat+0x106>
          {
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 800c772:	4a93      	ldr	r2, [pc, #588]	; (800c9c0 <OV5640_SetPixelFormat+0x318>)
 800c774:	693b      	ldr	r3, [r7, #16]
 800c776:	009b      	lsls	r3, r3, #2
 800c778:	4413      	add	r3, r2
 800c77a:	885b      	ldrh	r3, [r3, #2]
 800c77c:	b2db      	uxtb	r3, r3
 800c77e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f103 0018 	add.w	r0, r3, #24
 800c786:	4a8e      	ldr	r2, [pc, #568]	; (800c9c0 <OV5640_SetPixelFormat+0x318>)
 800c788:	693b      	ldr	r3, [r7, #16]
 800c78a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800c78e:	f107 020f 	add.w	r2, r7, #15
 800c792:	2301      	movs	r3, #1
 800c794:	f001 fb40 	bl	800de18 <ov5640_write_reg>
 800c798:	4603      	mov	r3, r0
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d003      	beq.n	800c7a6 <OV5640_SetPixelFormat+0xfe>
            {
              ret = OV5640_ERROR;
 800c79e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c7a2:	617b      	str	r3, [r7, #20]
 800c7a4:	e003      	b.n	800c7ae <OV5640_SetPixelFormat+0x106>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 800c7a6:	2101      	movs	r1, #1
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f001 fad2 	bl	800dd52 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 800c7ae:	693b      	ldr	r3, [r7, #16]
 800c7b0:	3301      	adds	r3, #1
 800c7b2:	613b      	str	r3, [r7, #16]
 800c7b4:	693b      	ldr	r3, [r7, #16]
 800c7b6:	2b01      	cmp	r3, #1
 800c7b8:	d9d7      	bls.n	800c76a <OV5640_SetPixelFormat+0xc2>
            }
          }
        }
        break;
 800c7ba:	e083      	b.n	800c8c4 <OV5640_SetPixelFormat+0x21c>

      case OV5640_Y8:
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 800c7bc:	2300      	movs	r3, #0
 800c7be:	613b      	str	r3, [r7, #16]
 800c7c0:	e024      	b.n	800c80c <OV5640_SetPixelFormat+0x164>
        {
          if (ret != OV5640_ERROR)
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c7c8:	d01d      	beq.n	800c806 <OV5640_SetPixelFormat+0x15e>
          {
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 800c7ca:	4a7e      	ldr	r2, [pc, #504]	; (800c9c4 <OV5640_SetPixelFormat+0x31c>)
 800c7cc:	693b      	ldr	r3, [r7, #16]
 800c7ce:	009b      	lsls	r3, r3, #2
 800c7d0:	4413      	add	r3, r2
 800c7d2:	885b      	ldrh	r3, [r3, #2]
 800c7d4:	b2db      	uxtb	r3, r3
 800c7d6:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	f103 0018 	add.w	r0, r3, #24
 800c7de:	4a79      	ldr	r2, [pc, #484]	; (800c9c4 <OV5640_SetPixelFormat+0x31c>)
 800c7e0:	693b      	ldr	r3, [r7, #16]
 800c7e2:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800c7e6:	f107 020f 	add.w	r2, r7, #15
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	f001 fb14 	bl	800de18 <ov5640_write_reg>
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d003      	beq.n	800c7fe <OV5640_SetPixelFormat+0x156>
            {
              ret = OV5640_ERROR;
 800c7f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c7fa:	617b      	str	r3, [r7, #20]
 800c7fc:	e003      	b.n	800c806 <OV5640_SetPixelFormat+0x15e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 800c7fe:	2101      	movs	r1, #1
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f001 faa6 	bl	800dd52 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 800c806:	693b      	ldr	r3, [r7, #16]
 800c808:	3301      	adds	r3, #1
 800c80a:	613b      	str	r3, [r7, #16]
 800c80c:	693b      	ldr	r3, [r7, #16]
 800c80e:	2b01      	cmp	r3, #1
 800c810:	d9d7      	bls.n	800c7c2 <OV5640_SetPixelFormat+0x11a>
            }
          }
        }
        break;
 800c812:	e057      	b.n	800c8c4 <OV5640_SetPixelFormat+0x21c>

      case OV5640_JPEG:
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 800c814:	2300      	movs	r3, #0
 800c816:	613b      	str	r3, [r7, #16]
 800c818:	e024      	b.n	800c864 <OV5640_SetPixelFormat+0x1bc>
        {
          if (ret != OV5640_ERROR)
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c820:	d01d      	beq.n	800c85e <OV5640_SetPixelFormat+0x1b6>
          {
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 800c822:	4a69      	ldr	r2, [pc, #420]	; (800c9c8 <OV5640_SetPixelFormat+0x320>)
 800c824:	693b      	ldr	r3, [r7, #16]
 800c826:	009b      	lsls	r3, r3, #2
 800c828:	4413      	add	r3, r2
 800c82a:	885b      	ldrh	r3, [r3, #2]
 800c82c:	b2db      	uxtb	r3, r3
 800c82e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f103 0018 	add.w	r0, r3, #24
 800c836:	4a64      	ldr	r2, [pc, #400]	; (800c9c8 <OV5640_SetPixelFormat+0x320>)
 800c838:	693b      	ldr	r3, [r7, #16]
 800c83a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800c83e:	f107 020f 	add.w	r2, r7, #15
 800c842:	2301      	movs	r3, #1
 800c844:	f001 fae8 	bl	800de18 <ov5640_write_reg>
 800c848:	4603      	mov	r3, r0
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d003      	beq.n	800c856 <OV5640_SetPixelFormat+0x1ae>
            {
              ret = OV5640_ERROR;
 800c84e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c852:	617b      	str	r3, [r7, #20]
 800c854:	e003      	b.n	800c85e <OV5640_SetPixelFormat+0x1b6>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 800c856:	2101      	movs	r1, #1
 800c858:	6878      	ldr	r0, [r7, #4]
 800c85a:	f001 fa7a 	bl	800dd52 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 800c85e:	693b      	ldr	r3, [r7, #16]
 800c860:	3301      	adds	r3, #1
 800c862:	613b      	str	r3, [r7, #16]
 800c864:	693b      	ldr	r3, [r7, #16]
 800c866:	2b01      	cmp	r3, #1
 800c868:	d9d7      	bls.n	800c81a <OV5640_SetPixelFormat+0x172>
            }
          }
        }
        break;
 800c86a:	e02b      	b.n	800c8c4 <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB565:
      default:
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 800c86c:	2300      	movs	r3, #0
 800c86e:	613b      	str	r3, [r7, #16]
 800c870:	e024      	b.n	800c8bc <OV5640_SetPixelFormat+0x214>
        {
          if (ret != OV5640_ERROR)
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c878:	d01d      	beq.n	800c8b6 <OV5640_SetPixelFormat+0x20e>
          {
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 800c87a:	4a54      	ldr	r2, [pc, #336]	; (800c9cc <OV5640_SetPixelFormat+0x324>)
 800c87c:	693b      	ldr	r3, [r7, #16]
 800c87e:	009b      	lsls	r3, r3, #2
 800c880:	4413      	add	r3, r2
 800c882:	885b      	ldrh	r3, [r3, #2]
 800c884:	b2db      	uxtb	r3, r3
 800c886:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f103 0018 	add.w	r0, r3, #24
 800c88e:	4a4f      	ldr	r2, [pc, #316]	; (800c9cc <OV5640_SetPixelFormat+0x324>)
 800c890:	693b      	ldr	r3, [r7, #16]
 800c892:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800c896:	f107 020f 	add.w	r2, r7, #15
 800c89a:	2301      	movs	r3, #1
 800c89c:	f001 fabc 	bl	800de18 <ov5640_write_reg>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d003      	beq.n	800c8ae <OV5640_SetPixelFormat+0x206>
            {
              ret = OV5640_ERROR;
 800c8a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c8aa:	617b      	str	r3, [r7, #20]
 800c8ac:	e003      	b.n	800c8b6 <OV5640_SetPixelFormat+0x20e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 800c8ae:	2101      	movs	r1, #1
 800c8b0:	6878      	ldr	r0, [r7, #4]
 800c8b2:	f001 fa4e 	bl	800dd52 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 800c8b6:	693b      	ldr	r3, [r7, #16]
 800c8b8:	3301      	adds	r3, #1
 800c8ba:	613b      	str	r3, [r7, #16]
 800c8bc:	693b      	ldr	r3, [r7, #16]
 800c8be:	2b01      	cmp	r3, #1
 800c8c0:	d9d7      	bls.n	800c872 <OV5640_SetPixelFormat+0x1ca>
            }
          }
        }
        break;
 800c8c2:	bf00      	nop

    }

    if (PixelFormat == OV5640_JPEG)
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	2b08      	cmp	r3, #8
 800c8c8:	d173      	bne.n	800c9b2 <OV5640_SetPixelFormat+0x30a>
    {
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	f103 0018 	add.w	r0, r3, #24
 800c8d0:	f107 020f 	add.w	r2, r7, #15
 800c8d4:	2301      	movs	r3, #1
 800c8d6:	f643 0121 	movw	r1, #14369	; 0x3821
 800c8da:	f001 fa86 	bl	800ddea <ov5640_read_reg>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d003      	beq.n	800c8ec <OV5640_SetPixelFormat+0x244>
      {
        ret = OV5640_ERROR;
 800c8e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c8e8:	617b      	str	r3, [r7, #20]
 800c8ea:	e062      	b.n	800c9b2 <OV5640_SetPixelFormat+0x30a>
      }
      else
      {
        tmp |= (1 << 5);
 800c8ec:	7bfb      	ldrb	r3, [r7, #15]
 800c8ee:	f043 0320 	orr.w	r3, r3, #32
 800c8f2:	b2db      	uxtb	r3, r3
 800c8f4:	73fb      	strb	r3, [r7, #15]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	f103 0018 	add.w	r0, r3, #24
 800c8fc:	f107 020f 	add.w	r2, r7, #15
 800c900:	2301      	movs	r3, #1
 800c902:	f643 0121 	movw	r1, #14369	; 0x3821
 800c906:	f001 fa87 	bl	800de18 <ov5640_write_reg>
 800c90a:	4603      	mov	r3, r0
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d003      	beq.n	800c918 <OV5640_SetPixelFormat+0x270>
        {
          ret = OV5640_ERROR;
 800c910:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c914:	617b      	str	r3, [r7, #20]
 800c916:	e04c      	b.n	800c9b2 <OV5640_SetPixelFormat+0x30a>
        }
        else
        {
          if (ov5640_read_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	f103 0018 	add.w	r0, r3, #24
 800c91e:	f107 020f 	add.w	r2, r7, #15
 800c922:	2301      	movs	r3, #1
 800c924:	f243 0102 	movw	r1, #12290	; 0x3002
 800c928:	f001 fa5f 	bl	800ddea <ov5640_read_reg>
 800c92c:	4603      	mov	r3, r0
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d003      	beq.n	800c93a <OV5640_SetPixelFormat+0x292>
          {
            ret = OV5640_ERROR;
 800c932:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c936:	617b      	str	r3, [r7, #20]
 800c938:	e03b      	b.n	800c9b2 <OV5640_SetPixelFormat+0x30a>
          }
          else
          {
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 800c93a:	7bfb      	ldrb	r3, [r7, #15]
 800c93c:	f023 031c 	bic.w	r3, r3, #28
 800c940:	b2db      	uxtb	r3, r3
 800c942:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	f103 0018 	add.w	r0, r3, #24
 800c94a:	f107 020f 	add.w	r2, r7, #15
 800c94e:	2301      	movs	r3, #1
 800c950:	f243 0102 	movw	r1, #12290	; 0x3002
 800c954:	f001 fa60 	bl	800de18 <ov5640_write_reg>
 800c958:	4603      	mov	r3, r0
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d003      	beq.n	800c966 <OV5640_SetPixelFormat+0x2be>
            {
              ret = OV5640_ERROR;
 800c95e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c962:	617b      	str	r3, [r7, #20]
 800c964:	e025      	b.n	800c9b2 <OV5640_SetPixelFormat+0x30a>
            }
            else
            {
              if (ov5640_read_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f103 0018 	add.w	r0, r3, #24
 800c96c:	f107 020f 	add.w	r2, r7, #15
 800c970:	2301      	movs	r3, #1
 800c972:	f243 0106 	movw	r1, #12294	; 0x3006
 800c976:	f001 fa38 	bl	800ddea <ov5640_read_reg>
 800c97a:	4603      	mov	r3, r0
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d003      	beq.n	800c988 <OV5640_SetPixelFormat+0x2e0>
              {
                ret = OV5640_ERROR;
 800c980:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c984:	617b      	str	r3, [r7, #20]
 800c986:	e014      	b.n	800c9b2 <OV5640_SetPixelFormat+0x30a>
              }
              else
              {
                tmp |= ((1 << 5) | (1 << 3));
 800c988:	7bfb      	ldrb	r3, [r7, #15]
 800c98a:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800c98e:	b2db      	uxtb	r3, r3
 800c990:	73fb      	strb	r3, [r7, #15]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f103 0018 	add.w	r0, r3, #24
 800c998:	f107 020f 	add.w	r2, r7, #15
 800c99c:	2301      	movs	r3, #1
 800c99e:	f243 0106 	movw	r1, #12294	; 0x3006
 800c9a2:	f001 fa39 	bl	800de18 <ov5640_write_reg>
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d002      	beq.n	800c9b2 <OV5640_SetPixelFormat+0x30a>
                {
                  ret = OV5640_ERROR;
 800c9ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c9b0:	617b      	str	r3, [r7, #20]
          }
        }
      }
    }
  }
  return ret;
 800c9b2:	697b      	ldr	r3, [r7, #20]
}
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	3718      	adds	r7, #24
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}
 800c9bc:	08022b74 	.word	0x08022b74
 800c9c0:	08022b7c 	.word	0x08022b7c
 800c9c4:	08022b84 	.word	0x08022b84
 800c9c8:	08022b8c 	.word	0x08022b8c
 800c9cc:	08022b94 	.word	0x08022b94

0800c9d0 <OV5640_GetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_GetPixelFormat(OV5640_Object_t *pObj, uint32_t *PixelFormat)
{
 800c9d0:	b480      	push	{r7}
 800c9d2:	b083      	sub	sp, #12
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
 800c9d8:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(PixelFormat);

  return OV5640_ERROR;
 800c9da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800c9de:	4618      	mov	r0, r3
 800c9e0:	370c      	adds	r7, #12
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e8:	4770      	bx	lr
	...

0800c9ec <OV5640_SetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_SetResolution(OV5640_Object_t *pObj, uint32_t Resolution)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b086      	sub	sp, #24
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
 800c9f4:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	617b      	str	r3, [r7, #20]
    {OV5640_TIMING_DVPVO_HIGH, 0x00},
    {OV5640_TIMING_DVPVO_LOW, 0x78},
  };

  /* Check if resolution is supported */
  if (Resolution > OV5640_R800x480)
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	2b04      	cmp	r3, #4
 800c9fe:	d903      	bls.n	800ca08 <OV5640_SetResolution+0x1c>
  {
    ret = OV5640_ERROR;
 800ca00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ca04:	617b      	str	r3, [r7, #20]
 800ca06:	e0d8      	b.n	800cbba <OV5640_SetResolution+0x1ce>
  }
  else
  {
    /* Initialize OV5640 */
    switch (Resolution)
 800ca08:	683b      	ldr	r3, [r7, #0]
 800ca0a:	2b04      	cmp	r3, #4
 800ca0c:	f200 80d1 	bhi.w	800cbb2 <OV5640_SetResolution+0x1c6>
 800ca10:	a201      	add	r2, pc, #4	; (adr r2, 800ca18 <OV5640_SetResolution+0x2c>)
 800ca12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca16:	bf00      	nop
 800ca18:	0800ca2d 	.word	0x0800ca2d
 800ca1c:	0800ca7b 	.word	0x0800ca7b
 800ca20:	0800cac9 	.word	0x0800cac9
 800ca24:	0800cb17 	.word	0x0800cb17
 800ca28:	0800cb65 	.word	0x0800cb65
    {
      case OV5640_R160x120:
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	613b      	str	r3, [r7, #16]
 800ca30:	e01f      	b.n	800ca72 <OV5640_SetResolution+0x86>
        {
          if (ret != OV5640_ERROR)
 800ca32:	697b      	ldr	r3, [r7, #20]
 800ca34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca38:	d018      	beq.n	800ca6c <OV5640_SetResolution+0x80>
          {
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 800ca3a:	4a62      	ldr	r2, [pc, #392]	; (800cbc4 <OV5640_SetResolution+0x1d8>)
 800ca3c:	693b      	ldr	r3, [r7, #16]
 800ca3e:	009b      	lsls	r3, r3, #2
 800ca40:	4413      	add	r3, r2
 800ca42:	885b      	ldrh	r3, [r3, #2]
 800ca44:	b2db      	uxtb	r3, r3
 800ca46:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f103 0018 	add.w	r0, r3, #24
 800ca4e:	4a5d      	ldr	r2, [pc, #372]	; (800cbc4 <OV5640_SetResolution+0x1d8>)
 800ca50:	693b      	ldr	r3, [r7, #16]
 800ca52:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800ca56:	f107 020f 	add.w	r2, r7, #15
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	f001 f9dc 	bl	800de18 <ov5640_write_reg>
 800ca60:	4603      	mov	r3, r0
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d002      	beq.n	800ca6c <OV5640_SetResolution+0x80>
            {
              ret = OV5640_ERROR;
 800ca66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ca6a:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 800ca6c:	693b      	ldr	r3, [r7, #16]
 800ca6e:	3301      	adds	r3, #1
 800ca70:	613b      	str	r3, [r7, #16]
 800ca72:	693b      	ldr	r3, [r7, #16]
 800ca74:	2b03      	cmp	r3, #3
 800ca76:	d9dc      	bls.n	800ca32 <OV5640_SetResolution+0x46>
            }
          }
        }
        break;
 800ca78:	e09f      	b.n	800cbba <OV5640_SetResolution+0x1ce>
      case OV5640_R320x240:
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	613b      	str	r3, [r7, #16]
 800ca7e:	e01f      	b.n	800cac0 <OV5640_SetResolution+0xd4>
        {
          if (ret != OV5640_ERROR)
 800ca80:	697b      	ldr	r3, [r7, #20]
 800ca82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca86:	d018      	beq.n	800caba <OV5640_SetResolution+0xce>
          {
            tmp = (uint8_t)OV5640_QVGA[index][1];
 800ca88:	4a4f      	ldr	r2, [pc, #316]	; (800cbc8 <OV5640_SetResolution+0x1dc>)
 800ca8a:	693b      	ldr	r3, [r7, #16]
 800ca8c:	009b      	lsls	r3, r3, #2
 800ca8e:	4413      	add	r3, r2
 800ca90:	885b      	ldrh	r3, [r3, #2]
 800ca92:	b2db      	uxtb	r3, r3
 800ca94:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	f103 0018 	add.w	r0, r3, #24
 800ca9c:	4a4a      	ldr	r2, [pc, #296]	; (800cbc8 <OV5640_SetResolution+0x1dc>)
 800ca9e:	693b      	ldr	r3, [r7, #16]
 800caa0:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800caa4:	f107 020f 	add.w	r2, r7, #15
 800caa8:	2301      	movs	r3, #1
 800caaa:	f001 f9b5 	bl	800de18 <ov5640_write_reg>
 800caae:	4603      	mov	r3, r0
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d002      	beq.n	800caba <OV5640_SetResolution+0xce>
            {
              ret = OV5640_ERROR;
 800cab4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cab8:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 800caba:	693b      	ldr	r3, [r7, #16]
 800cabc:	3301      	adds	r3, #1
 800cabe:	613b      	str	r3, [r7, #16]
 800cac0:	693b      	ldr	r3, [r7, #16]
 800cac2:	2b03      	cmp	r3, #3
 800cac4:	d9dc      	bls.n	800ca80 <OV5640_SetResolution+0x94>
            }
          }
        }
        break;
 800cac6:	e078      	b.n	800cbba <OV5640_SetResolution+0x1ce>
      case OV5640_R480x272:
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 800cac8:	2300      	movs	r3, #0
 800caca:	613b      	str	r3, [r7, #16]
 800cacc:	e01f      	b.n	800cb0e <OV5640_SetResolution+0x122>
        {
          if (ret != OV5640_ERROR)
 800cace:	697b      	ldr	r3, [r7, #20]
 800cad0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cad4:	d018      	beq.n	800cb08 <OV5640_SetResolution+0x11c>
          {
            tmp = (uint8_t)OV5640_480x272[index][1];
 800cad6:	4a3d      	ldr	r2, [pc, #244]	; (800cbcc <OV5640_SetResolution+0x1e0>)
 800cad8:	693b      	ldr	r3, [r7, #16]
 800cada:	009b      	lsls	r3, r3, #2
 800cadc:	4413      	add	r3, r2
 800cade:	885b      	ldrh	r3, [r3, #2]
 800cae0:	b2db      	uxtb	r3, r3
 800cae2:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f103 0018 	add.w	r0, r3, #24
 800caea:	4a38      	ldr	r2, [pc, #224]	; (800cbcc <OV5640_SetResolution+0x1e0>)
 800caec:	693b      	ldr	r3, [r7, #16]
 800caee:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800caf2:	f107 020f 	add.w	r2, r7, #15
 800caf6:	2301      	movs	r3, #1
 800caf8:	f001 f98e 	bl	800de18 <ov5640_write_reg>
 800cafc:	4603      	mov	r3, r0
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d002      	beq.n	800cb08 <OV5640_SetResolution+0x11c>
            {
              ret = OV5640_ERROR;
 800cb02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cb06:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 800cb08:	693b      	ldr	r3, [r7, #16]
 800cb0a:	3301      	adds	r3, #1
 800cb0c:	613b      	str	r3, [r7, #16]
 800cb0e:	693b      	ldr	r3, [r7, #16]
 800cb10:	2b03      	cmp	r3, #3
 800cb12:	d9dc      	bls.n	800cace <OV5640_SetResolution+0xe2>
            }
          }
        }
        break;
 800cb14:	e051      	b.n	800cbba <OV5640_SetResolution+0x1ce>
      case OV5640_R640x480:
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 800cb16:	2300      	movs	r3, #0
 800cb18:	613b      	str	r3, [r7, #16]
 800cb1a:	e01f      	b.n	800cb5c <OV5640_SetResolution+0x170>
        {
          if (ret != OV5640_ERROR)
 800cb1c:	697b      	ldr	r3, [r7, #20]
 800cb1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb22:	d018      	beq.n	800cb56 <OV5640_SetResolution+0x16a>
          {
            tmp = (uint8_t)OV5640_VGA[index][1];
 800cb24:	4a2a      	ldr	r2, [pc, #168]	; (800cbd0 <OV5640_SetResolution+0x1e4>)
 800cb26:	693b      	ldr	r3, [r7, #16]
 800cb28:	009b      	lsls	r3, r3, #2
 800cb2a:	4413      	add	r3, r2
 800cb2c:	885b      	ldrh	r3, [r3, #2]
 800cb2e:	b2db      	uxtb	r3, r3
 800cb30:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	f103 0018 	add.w	r0, r3, #24
 800cb38:	4a25      	ldr	r2, [pc, #148]	; (800cbd0 <OV5640_SetResolution+0x1e4>)
 800cb3a:	693b      	ldr	r3, [r7, #16]
 800cb3c:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800cb40:	f107 020f 	add.w	r2, r7, #15
 800cb44:	2301      	movs	r3, #1
 800cb46:	f001 f967 	bl	800de18 <ov5640_write_reg>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d002      	beq.n	800cb56 <OV5640_SetResolution+0x16a>
            {
              ret = OV5640_ERROR;
 800cb50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cb54:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 800cb56:	693b      	ldr	r3, [r7, #16]
 800cb58:	3301      	adds	r3, #1
 800cb5a:	613b      	str	r3, [r7, #16]
 800cb5c:	693b      	ldr	r3, [r7, #16]
 800cb5e:	2b03      	cmp	r3, #3
 800cb60:	d9dc      	bls.n	800cb1c <OV5640_SetResolution+0x130>
            }
          }
        }
        break;
 800cb62:	e02a      	b.n	800cbba <OV5640_SetResolution+0x1ce>
      case OV5640_R800x480:
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 800cb64:	2300      	movs	r3, #0
 800cb66:	613b      	str	r3, [r7, #16]
 800cb68:	e01f      	b.n	800cbaa <OV5640_SetResolution+0x1be>
        {
          if (ret != OV5640_ERROR)
 800cb6a:	697b      	ldr	r3, [r7, #20]
 800cb6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb70:	d018      	beq.n	800cba4 <OV5640_SetResolution+0x1b8>
          {
            tmp = (uint8_t)OV5640_WVGA[index][1];
 800cb72:	4a18      	ldr	r2, [pc, #96]	; (800cbd4 <OV5640_SetResolution+0x1e8>)
 800cb74:	693b      	ldr	r3, [r7, #16]
 800cb76:	009b      	lsls	r3, r3, #2
 800cb78:	4413      	add	r3, r2
 800cb7a:	885b      	ldrh	r3, [r3, #2]
 800cb7c:	b2db      	uxtb	r3, r3
 800cb7e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f103 0018 	add.w	r0, r3, #24
 800cb86:	4a13      	ldr	r2, [pc, #76]	; (800cbd4 <OV5640_SetResolution+0x1e8>)
 800cb88:	693b      	ldr	r3, [r7, #16]
 800cb8a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800cb8e:	f107 020f 	add.w	r2, r7, #15
 800cb92:	2301      	movs	r3, #1
 800cb94:	f001 f940 	bl	800de18 <ov5640_write_reg>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d002      	beq.n	800cba4 <OV5640_SetResolution+0x1b8>
            {
              ret = OV5640_ERROR;
 800cb9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cba2:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 800cba4:	693b      	ldr	r3, [r7, #16]
 800cba6:	3301      	adds	r3, #1
 800cba8:	613b      	str	r3, [r7, #16]
 800cbaa:	693b      	ldr	r3, [r7, #16]
 800cbac:	2b03      	cmp	r3, #3
 800cbae:	d9dc      	bls.n	800cb6a <OV5640_SetResolution+0x17e>
            }
          }
        }
        break;
 800cbb0:	e003      	b.n	800cbba <OV5640_SetResolution+0x1ce>
      default:
        ret = OV5640_ERROR;
 800cbb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cbb6:	617b      	str	r3, [r7, #20]
        break;
 800cbb8:	bf00      	nop
    }
  }

  return ret;
 800cbba:	697b      	ldr	r3, [r7, #20]
}
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	3718      	adds	r7, #24
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}
 800cbc4:	08022b9c 	.word	0x08022b9c
 800cbc8:	08022bac 	.word	0x08022bac
 800cbcc:	08022bbc 	.word	0x08022bbc
 800cbd0:	08022bcc 	.word	0x08022bcc
 800cbd4:	08022bdc 	.word	0x08022bdc

0800cbd8 <OV5640_GetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_GetResolution(OV5640_Object_t *pObj, uint32_t *Resolution)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b086      	sub	sp, #24
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
 800cbe0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t x_size;
  uint16_t y_size;
  uint8_t tmp;

  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_HIGH, &tmp, 1) != OV5640_OK)
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	f103 0018 	add.w	r0, r3, #24
 800cbe8:	f107 020f 	add.w	r2, r7, #15
 800cbec:	2301      	movs	r3, #1
 800cbee:	f643 0108 	movw	r1, #14344	; 0x3808
 800cbf2:	f001 f8fa 	bl	800ddea <ov5640_read_reg>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d003      	beq.n	800cc04 <OV5640_GetResolution+0x2c>
  {
    ret = OV5640_ERROR;
 800cbfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cc00:	617b      	str	r3, [r7, #20]
 800cc02:	e08a      	b.n	800cd1a <OV5640_GetResolution+0x142>
  }
  else
  {
    x_size = (uint16_t)tmp << 8U;
 800cc04:	7bfb      	ldrb	r3, [r7, #15]
 800cc06:	b29b      	uxth	r3, r3
 800cc08:	021b      	lsls	r3, r3, #8
 800cc0a:	827b      	strh	r3, [r7, #18]

    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_LOW, &tmp, 1) != OV5640_OK)
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	f103 0018 	add.w	r0, r3, #24
 800cc12:	f107 020f 	add.w	r2, r7, #15
 800cc16:	2301      	movs	r3, #1
 800cc18:	f643 0109 	movw	r1, #14345	; 0x3809
 800cc1c:	f001 f8e5 	bl	800ddea <ov5640_read_reg>
 800cc20:	4603      	mov	r3, r0
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d003      	beq.n	800cc2e <OV5640_GetResolution+0x56>
    {
      ret = OV5640_ERROR;
 800cc26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cc2a:	617b      	str	r3, [r7, #20]
 800cc2c:	e075      	b.n	800cd1a <OV5640_GetResolution+0x142>
    }
    else
    {
      x_size |= tmp;
 800cc2e:	7bfb      	ldrb	r3, [r7, #15]
 800cc30:	b29a      	uxth	r2, r3
 800cc32:	8a7b      	ldrh	r3, [r7, #18]
 800cc34:	4313      	orrs	r3, r2
 800cc36:	827b      	strh	r3, [r7, #18]

      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_HIGH, &tmp, 1) != OV5640_OK)
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	f103 0018 	add.w	r0, r3, #24
 800cc3e:	f107 020f 	add.w	r2, r7, #15
 800cc42:	2301      	movs	r3, #1
 800cc44:	f643 010a 	movw	r1, #14346	; 0x380a
 800cc48:	f001 f8cf 	bl	800ddea <ov5640_read_reg>
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d003      	beq.n	800cc5a <OV5640_GetResolution+0x82>
      {
        ret = OV5640_ERROR;
 800cc52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cc56:	617b      	str	r3, [r7, #20]
 800cc58:	e05f      	b.n	800cd1a <OV5640_GetResolution+0x142>
      }
      else
      {
        y_size = (uint16_t)tmp << 8U;
 800cc5a:	7bfb      	ldrb	r3, [r7, #15]
 800cc5c:	b29b      	uxth	r3, r3
 800cc5e:	021b      	lsls	r3, r3, #8
 800cc60:	823b      	strh	r3, [r7, #16]
        if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_LOW, &tmp, 1) != OV5640_OK)
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	f103 0018 	add.w	r0, r3, #24
 800cc68:	f107 020f 	add.w	r2, r7, #15
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	f643 010b 	movw	r1, #14347	; 0x380b
 800cc72:	f001 f8ba 	bl	800ddea <ov5640_read_reg>
 800cc76:	4603      	mov	r3, r0
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d003      	beq.n	800cc84 <OV5640_GetResolution+0xac>
        {
          ret = OV5640_ERROR;
 800cc7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cc80:	617b      	str	r3, [r7, #20]
 800cc82:	e04a      	b.n	800cd1a <OV5640_GetResolution+0x142>
        }
        else
        {
          y_size |= tmp;
 800cc84:	7bfb      	ldrb	r3, [r7, #15]
 800cc86:	b29a      	uxth	r2, r3
 800cc88:	8a3b      	ldrh	r3, [r7, #16]
 800cc8a:	4313      	orrs	r3, r2
 800cc8c:	823b      	strh	r3, [r7, #16]

          if ((x_size == 800U) && (y_size == 480U))
 800cc8e:	8a7b      	ldrh	r3, [r7, #18]
 800cc90:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800cc94:	d109      	bne.n	800ccaa <OV5640_GetResolution+0xd2>
 800cc96:	8a3b      	ldrh	r3, [r7, #16]
 800cc98:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800cc9c:	d105      	bne.n	800ccaa <OV5640_GetResolution+0xd2>
          {
            *Resolution = OV5640_R800x480;
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	2204      	movs	r2, #4
 800cca2:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 800cca4:	2300      	movs	r3, #0
 800cca6:	617b      	str	r3, [r7, #20]
 800cca8:	e037      	b.n	800cd1a <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 640U) && (y_size == 480U))
 800ccaa:	8a7b      	ldrh	r3, [r7, #18]
 800ccac:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ccb0:	d109      	bne.n	800ccc6 <OV5640_GetResolution+0xee>
 800ccb2:	8a3b      	ldrh	r3, [r7, #16]
 800ccb4:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800ccb8:	d105      	bne.n	800ccc6 <OV5640_GetResolution+0xee>
          {
            *Resolution = OV5640_R640x480;
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	2203      	movs	r2, #3
 800ccbe:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	617b      	str	r3, [r7, #20]
 800ccc4:	e029      	b.n	800cd1a <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 480U) && (y_size == 272U))
 800ccc6:	8a7b      	ldrh	r3, [r7, #18]
 800ccc8:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800cccc:	d109      	bne.n	800cce2 <OV5640_GetResolution+0x10a>
 800ccce:	8a3b      	ldrh	r3, [r7, #16]
 800ccd0:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800ccd4:	d105      	bne.n	800cce2 <OV5640_GetResolution+0x10a>
          {
            *Resolution = OV5640_R480x272;
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	2202      	movs	r2, #2
 800ccda:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 800ccdc:	2300      	movs	r3, #0
 800ccde:	617b      	str	r3, [r7, #20]
 800cce0:	e01b      	b.n	800cd1a <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 320U) && (y_size == 240U))
 800cce2:	8a7b      	ldrh	r3, [r7, #18]
 800cce4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800cce8:	d108      	bne.n	800ccfc <OV5640_GetResolution+0x124>
 800ccea:	8a3b      	ldrh	r3, [r7, #16]
 800ccec:	2bf0      	cmp	r3, #240	; 0xf0
 800ccee:	d105      	bne.n	800ccfc <OV5640_GetResolution+0x124>
          {
            *Resolution = OV5640_R320x240;
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	2201      	movs	r2, #1
 800ccf4:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	617b      	str	r3, [r7, #20]
 800ccfa:	e00e      	b.n	800cd1a <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 160U) && (y_size == 120U))
 800ccfc:	8a7b      	ldrh	r3, [r7, #18]
 800ccfe:	2ba0      	cmp	r3, #160	; 0xa0
 800cd00:	d108      	bne.n	800cd14 <OV5640_GetResolution+0x13c>
 800cd02:	8a3b      	ldrh	r3, [r7, #16]
 800cd04:	2b78      	cmp	r3, #120	; 0x78
 800cd06:	d105      	bne.n	800cd14 <OV5640_GetResolution+0x13c>
          {
            *Resolution = OV5640_R160x120;
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	617b      	str	r3, [r7, #20]
 800cd12:	e002      	b.n	800cd1a <OV5640_GetResolution+0x142>
          }
          else
          {
            ret = OV5640_ERROR;
 800cd14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd18:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
 800cd1a:	697b      	ldr	r3, [r7, #20]
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	3718      	adds	r7, #24
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}

0800cd24 <OV5640_SetPolarities>:
  * @param  VsyncPolarity Polarity of the Vsync
  * @retval Component status
  */
int32_t OV5640_SetPolarities(OV5640_Object_t *pObj, uint32_t PclkPolarity, uint32_t HrefPolarity,
                             uint32_t VsyncPolarity)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b086      	sub	sp, #24
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	60f8      	str	r0, [r7, #12]
 800cd2c:	60b9      	str	r1, [r7, #8]
 800cd2e:	607a      	str	r2, [r7, #4]
 800cd30:	603b      	str	r3, [r7, #0]
  uint8_t tmp;
  int32_t ret = OV5640_OK;
 800cd32:	2300      	movs	r3, #0
 800cd34:	617b      	str	r3, [r7, #20]

  if ((pObj == NULL) || ((PclkPolarity != OV5640_POLARITY_PCLK_LOW) && (PclkPolarity != OV5640_POLARITY_PCLK_HIGH)) ||
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d011      	beq.n	800cd60 <OV5640_SetPolarities+0x3c>
 800cd3c:	68bb      	ldr	r3, [r7, #8]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d002      	beq.n	800cd48 <OV5640_SetPolarities+0x24>
 800cd42:	68bb      	ldr	r3, [r7, #8]
 800cd44:	2b01      	cmp	r3, #1
 800cd46:	d10b      	bne.n	800cd60 <OV5640_SetPolarities+0x3c>
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d002      	beq.n	800cd54 <OV5640_SetPolarities+0x30>
      ((HrefPolarity != OV5640_POLARITY_HREF_LOW) && (HrefPolarity != OV5640_POLARITY_HREF_HIGH)) ||
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	2b01      	cmp	r3, #1
 800cd52:	d105      	bne.n	800cd60 <OV5640_SetPolarities+0x3c>
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	2b01      	cmp	r3, #1
 800cd58:	d006      	beq.n	800cd68 <OV5640_SetPolarities+0x44>
      ((VsyncPolarity != OV5640_POLARITY_VSYNC_LOW) && (VsyncPolarity != OV5640_POLARITY_VSYNC_HIGH)))
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d003      	beq.n	800cd68 <OV5640_SetPolarities+0x44>
  {
    ret = OV5640_ERROR;
 800cd60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd64:	617b      	str	r3, [r7, #20]
 800cd66:	e01e      	b.n	800cda6 <OV5640_SetPolarities+0x82>
  }
  else
  {
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 800cd68:	68bb      	ldr	r3, [r7, #8]
 800cd6a:	b2db      	uxtb	r3, r3
 800cd6c:	015b      	lsls	r3, r3, #5
 800cd6e:	b2da      	uxtb	r2, r3
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	b2db      	uxtb	r3, r3
 800cd74:	005b      	lsls	r3, r3, #1
 800cd76:	b2db      	uxtb	r3, r3
 800cd78:	4313      	orrs	r3, r2
 800cd7a:	b2da      	uxtb	r2, r3
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	b2db      	uxtb	r3, r3
 800cd80:	4313      	orrs	r3, r2
 800cd82:	b2db      	uxtb	r3, r3
 800cd84:	74fb      	strb	r3, [r7, #19]

    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	f103 0018 	add.w	r0, r3, #24
 800cd8c:	f107 0213 	add.w	r2, r7, #19
 800cd90:	2301      	movs	r3, #1
 800cd92:	f244 7140 	movw	r1, #18240	; 0x4740
 800cd96:	f001 f83f 	bl	800de18 <ov5640_write_reg>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d002      	beq.n	800cda6 <OV5640_SetPolarities+0x82>
    {
      ret = OV5640_ERROR;
 800cda0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cda4:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800cda6:	697b      	ldr	r3, [r7, #20]
}
 800cda8:	4618      	mov	r0, r3
 800cdaa:	3718      	adds	r7, #24
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}

0800cdb0 <OV5640_ReadID>:
  * @param  pObj  pointer to component object
  * @param  Id    pointer to component ID
  * @retval Component status
  */
int32_t OV5640_ReadID(OV5640_Object_t *pObj, uint32_t *Id)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b084      	sub	sp, #16
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
 800cdb8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  /* Initialize I2C */
  pObj->IO.Init();
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	4798      	blx	r3

  /* Prepare the camera to be configured */
  tmp = 0x80;
 800cdc0:	2380      	movs	r3, #128	; 0x80
 800cdc2:	72fb      	strb	r3, [r7, #11]
  if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f103 0018 	add.w	r0, r3, #24
 800cdca:	f107 020b 	add.w	r2, r7, #11
 800cdce:	2301      	movs	r3, #1
 800cdd0:	f243 0108 	movw	r1, #12296	; 0x3008
 800cdd4:	f001 f820 	bl	800de18 <ov5640_write_reg>
 800cdd8:	4603      	mov	r3, r0
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d003      	beq.n	800cde6 <OV5640_ReadID+0x36>
  {
    ret = OV5640_ERROR;
 800cdde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cde2:	60fb      	str	r3, [r7, #12]
 800cde4:	e032      	b.n	800ce4c <OV5640_ReadID+0x9c>
  }
  else
  {
    (void)OV5640_Delay(pObj, 500);
 800cde6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800cdea:	6878      	ldr	r0, [r7, #4]
 800cdec:	f000 ffb1 	bl	800dd52 <OV5640_Delay>

    if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_HIGH_BYTE, &tmp, 1) != OV5640_OK)
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	f103 0018 	add.w	r0, r3, #24
 800cdf6:	f107 020b 	add.w	r2, r7, #11
 800cdfa:	2301      	movs	r3, #1
 800cdfc:	f243 010a 	movw	r1, #12298	; 0x300a
 800ce00:	f000 fff3 	bl	800ddea <ov5640_read_reg>
 800ce04:	4603      	mov	r3, r0
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d003      	beq.n	800ce12 <OV5640_ReadID+0x62>
    {
      ret = OV5640_ERROR;
 800ce0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ce0e:	60fb      	str	r3, [r7, #12]
 800ce10:	e01c      	b.n	800ce4c <OV5640_ReadID+0x9c>
    }
    else
    {
      *Id = (uint32_t)tmp << 8U;
 800ce12:	7afb      	ldrb	r3, [r7, #11]
 800ce14:	021a      	lsls	r2, r3, #8
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	601a      	str	r2, [r3, #0]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	f103 0018 	add.w	r0, r3, #24
 800ce20:	f107 020b 	add.w	r2, r7, #11
 800ce24:	2301      	movs	r3, #1
 800ce26:	f243 010b 	movw	r1, #12299	; 0x300b
 800ce2a:	f000 ffde 	bl	800ddea <ov5640_read_reg>
 800ce2e:	4603      	mov	r3, r0
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d003      	beq.n	800ce3c <OV5640_ReadID+0x8c>
      {
        ret = OV5640_ERROR;
 800ce34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ce38:	60fb      	str	r3, [r7, #12]
 800ce3a:	e007      	b.n	800ce4c <OV5640_ReadID+0x9c>
      }
      else
      {
        *Id |= tmp;
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	7afa      	ldrb	r2, [r7, #11]
 800ce42:	431a      	orrs	r2, r3
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	601a      	str	r2, [r3, #0]
        ret = OV5640_OK;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Component status */
  return ret;
 800ce4c:	68fb      	ldr	r3, [r7, #12]
}
 800ce4e:	4618      	mov	r0, r3
 800ce50:	3710      	adds	r7, #16
 800ce52:	46bd      	mov	sp, r7
 800ce54:	bd80      	pop	{r7, pc}

0800ce56 <OV5640_GetCapabilities>:
  * @param  pObj          pointer to component object
  * @param  Capabilities  pointer to component Capabilities
  * @retval Component status
  */
int32_t OV5640_GetCapabilities(OV5640_Object_t *pObj, OV5640_Capabilities_t *Capabilities)
{
 800ce56:	b480      	push	{r7}
 800ce58:	b085      	sub	sp, #20
 800ce5a:	af00      	add	r7, sp, #0
 800ce5c:	6078      	str	r0, [r7, #4]
 800ce5e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d103      	bne.n	800ce6e <OV5640_GetCapabilities+0x18>
  {
    ret = OV5640_ERROR;
 800ce66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ce6a:	60fb      	str	r3, [r7, #12]
 800ce6c:	e01f      	b.n	800ceae <OV5640_GetCapabilities+0x58>
  }
  else
  {
    Capabilities->Config_Brightness    = 1;
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	2201      	movs	r2, #1
 800ce72:	60da      	str	r2, [r3, #12]
    Capabilities->Config_Contrast      = 1;
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	2201      	movs	r2, #1
 800ce78:	615a      	str	r2, [r3, #20]
    Capabilities->Config_HueDegree     = 1;
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	2201      	movs	r2, #1
 800ce7e:	619a      	str	r2, [r3, #24]
    Capabilities->Config_LightMode     = 1;
 800ce80:	683b      	ldr	r3, [r7, #0]
 800ce82:	2201      	movs	r2, #1
 800ce84:	605a      	str	r2, [r3, #4]
    Capabilities->Config_MirrorFlip    = 1;
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	2201      	movs	r2, #1
 800ce8a:	61da      	str	r2, [r3, #28]
    Capabilities->Config_NightMode     = 1;
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	2201      	movs	r2, #1
 800ce90:	625a      	str	r2, [r3, #36]	; 0x24
    Capabilities->Config_Resolution    = 1;
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	2201      	movs	r2, #1
 800ce96:	601a      	str	r2, [r3, #0]
    Capabilities->Config_Saturation    = 1;
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	2201      	movs	r2, #1
 800ce9c:	611a      	str	r2, [r3, #16]
    Capabilities->Config_SpecialEffect = 1;
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	2201      	movs	r2, #1
 800cea2:	609a      	str	r2, [r3, #8]
    Capabilities->Config_Zoom          = 1;
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	2201      	movs	r2, #1
 800cea8:	621a      	str	r2, [r3, #32]

    ret = OV5640_OK;
 800ceaa:	2300      	movs	r3, #0
 800ceac:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800ceae:	68fb      	ldr	r3, [r7, #12]
}
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	3714      	adds	r7, #20
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceba:	4770      	bx	lr

0800cebc <OV5640_SetLightMode>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetLightMode(OV5640_Object_t *pObj, uint32_t LightMode)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b086      	sub	sp, #24
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
 800cec4:	6039      	str	r1, [r7, #0]
    {OV5640_AWB_G_GAIN_LSB, 0x00},
    {OV5640_AWB_B_GAIN_MSB, 0x04},
    {OV5640_AWB_B_GAIN_LSB, 0xF3},
  };

  tmp = 0x00;
 800cec6:	2300      	movs	r3, #0
 800cec8:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_MANUAL_CONTROL, &tmp, 1);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	f103 0018 	add.w	r0, r3, #24
 800ced0:	f107 020f 	add.w	r2, r7, #15
 800ced4:	2301      	movs	r3, #1
 800ced6:	f243 4106 	movw	r1, #13318	; 0x3406
 800ceda:	f000 ff9d 	bl	800de18 <ov5640_write_reg>
 800cede:	6178      	str	r0, [r7, #20]
  if (ret == OV5640_OK)
 800cee0:	697b      	ldr	r3, [r7, #20]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d10c      	bne.n	800cf00 <OV5640_SetLightMode+0x44>
  {
    tmp = 0x46;
 800cee6:	2346      	movs	r3, #70	; 0x46
 800cee8:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL16, &tmp, 1);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f103 0018 	add.w	r0, r3, #24
 800cef0:	f107 020f 	add.w	r2, r7, #15
 800cef4:	2301      	movs	r3, #1
 800cef6:	f245 1190 	movw	r1, #20880	; 0x5190
 800cefa:	f000 ff8d 	bl	800de18 <ov5640_write_reg>
 800cefe:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 800cf00:	697b      	ldr	r3, [r7, #20]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d10c      	bne.n	800cf20 <OV5640_SetLightMode+0x64>
  {
    tmp = 0xF8;
 800cf06:	23f8      	movs	r3, #248	; 0xf8
 800cf08:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL17, &tmp, 1);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f103 0018 	add.w	r0, r3, #24
 800cf10:	f107 020f 	add.w	r2, r7, #15
 800cf14:	2301      	movs	r3, #1
 800cf16:	f245 1191 	movw	r1, #20881	; 0x5191
 800cf1a:	f000 ff7d 	bl	800de18 <ov5640_write_reg>
 800cf1e:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 800cf20:	697b      	ldr	r3, [r7, #20]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d10c      	bne.n	800cf40 <OV5640_SetLightMode+0x84>
  {
    tmp = 0x04;
 800cf26:	2304      	movs	r3, #4
 800cf28:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL18, &tmp, 1);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	f103 0018 	add.w	r0, r3, #24
 800cf30:	f107 020f 	add.w	r2, r7, #15
 800cf34:	2301      	movs	r3, #1
 800cf36:	f245 1192 	movw	r1, #20882	; 0x5192
 800cf3a:	f000 ff6d 	bl	800de18 <ov5640_write_reg>
 800cf3e:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	f040 80db 	bne.w	800d0fe <OV5640_SetLightMode+0x242>
  {
    switch (LightMode)
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	3b01      	subs	r3, #1
 800cf4c:	2b07      	cmp	r3, #7
 800cf4e:	f200 80af 	bhi.w	800d0b0 <OV5640_SetLightMode+0x1f4>
 800cf52:	a201      	add	r2, pc, #4	; (adr r2, 800cf58 <OV5640_SetLightMode+0x9c>)
 800cf54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf58:	0800cf79 	.word	0x0800cf79
 800cf5c:	0800cfc7 	.word	0x0800cfc7
 800cf60:	0800d0b1 	.word	0x0800d0b1
 800cf64:	0800d063 	.word	0x0800d063
 800cf68:	0800d0b1 	.word	0x0800d0b1
 800cf6c:	0800d0b1 	.word	0x0800d0b1
 800cf70:	0800d0b1 	.word	0x0800d0b1
 800cf74:	0800d015 	.word	0x0800d015
    {
      case OV5640_LIGHT_SUNNY:
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 800cf78:	2300      	movs	r3, #0
 800cf7a:	613b      	str	r3, [r7, #16]
 800cf7c:	e01f      	b.n	800cfbe <OV5640_SetLightMode+0x102>
        {
          if (ret != OV5640_ERROR)
 800cf7e:	697b      	ldr	r3, [r7, #20]
 800cf80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cf84:	d018      	beq.n	800cfb8 <OV5640_SetLightMode+0xfc>
          {
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 800cf86:	4a60      	ldr	r2, [pc, #384]	; (800d108 <OV5640_SetLightMode+0x24c>)
 800cf88:	693b      	ldr	r3, [r7, #16]
 800cf8a:	009b      	lsls	r3, r3, #2
 800cf8c:	4413      	add	r3, r2
 800cf8e:	885b      	ldrh	r3, [r3, #2]
 800cf90:	b2db      	uxtb	r3, r3
 800cf92:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	f103 0018 	add.w	r0, r3, #24
 800cf9a:	4a5b      	ldr	r2, [pc, #364]	; (800d108 <OV5640_SetLightMode+0x24c>)
 800cf9c:	693b      	ldr	r3, [r7, #16]
 800cf9e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800cfa2:	f107 020f 	add.w	r2, r7, #15
 800cfa6:	2301      	movs	r3, #1
 800cfa8:	f000 ff36 	bl	800de18 <ov5640_write_reg>
 800cfac:	4603      	mov	r3, r0
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d002      	beq.n	800cfb8 <OV5640_SetLightMode+0xfc>
            {
              ret = OV5640_ERROR;
 800cfb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cfb6:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 800cfb8:	693b      	ldr	r3, [r7, #16]
 800cfba:	3301      	adds	r3, #1
 800cfbc:	613b      	str	r3, [r7, #16]
 800cfbe:	693b      	ldr	r3, [r7, #16]
 800cfc0:	2b06      	cmp	r3, #6
 800cfc2:	d9dc      	bls.n	800cf7e <OV5640_SetLightMode+0xc2>
            }
          }
        }
        break;
 800cfc4:	e09b      	b.n	800d0fe <OV5640_SetLightMode+0x242>
      case OV5640_LIGHT_OFFICE:
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	613b      	str	r3, [r7, #16]
 800cfca:	e01f      	b.n	800d00c <OV5640_SetLightMode+0x150>
        {
          if (ret != OV5640_ERROR)
 800cfcc:	697b      	ldr	r3, [r7, #20]
 800cfce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cfd2:	d018      	beq.n	800d006 <OV5640_SetLightMode+0x14a>
          {
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 800cfd4:	4a4d      	ldr	r2, [pc, #308]	; (800d10c <OV5640_SetLightMode+0x250>)
 800cfd6:	693b      	ldr	r3, [r7, #16]
 800cfd8:	009b      	lsls	r3, r3, #2
 800cfda:	4413      	add	r3, r2
 800cfdc:	885b      	ldrh	r3, [r3, #2]
 800cfde:	b2db      	uxtb	r3, r3
 800cfe0:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	f103 0018 	add.w	r0, r3, #24
 800cfe8:	4a48      	ldr	r2, [pc, #288]	; (800d10c <OV5640_SetLightMode+0x250>)
 800cfea:	693b      	ldr	r3, [r7, #16]
 800cfec:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800cff0:	f107 020f 	add.w	r2, r7, #15
 800cff4:	2301      	movs	r3, #1
 800cff6:	f000 ff0f 	bl	800de18 <ov5640_write_reg>
 800cffa:	4603      	mov	r3, r0
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d002      	beq.n	800d006 <OV5640_SetLightMode+0x14a>
            {
              ret = OV5640_ERROR;
 800d000:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d004:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 800d006:	693b      	ldr	r3, [r7, #16]
 800d008:	3301      	adds	r3, #1
 800d00a:	613b      	str	r3, [r7, #16]
 800d00c:	693b      	ldr	r3, [r7, #16]
 800d00e:	2b06      	cmp	r3, #6
 800d010:	d9dc      	bls.n	800cfcc <OV5640_SetLightMode+0x110>
            }
          }
        }
        break;
 800d012:	e074      	b.n	800d0fe <OV5640_SetLightMode+0x242>
      case OV5640_LIGHT_CLOUDY:
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 800d014:	2300      	movs	r3, #0
 800d016:	613b      	str	r3, [r7, #16]
 800d018:	e01f      	b.n	800d05a <OV5640_SetLightMode+0x19e>
        {
          if (ret != OV5640_ERROR)
 800d01a:	697b      	ldr	r3, [r7, #20]
 800d01c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d020:	d018      	beq.n	800d054 <OV5640_SetLightMode+0x198>
          {
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 800d022:	4a3b      	ldr	r2, [pc, #236]	; (800d110 <OV5640_SetLightMode+0x254>)
 800d024:	693b      	ldr	r3, [r7, #16]
 800d026:	009b      	lsls	r3, r3, #2
 800d028:	4413      	add	r3, r2
 800d02a:	885b      	ldrh	r3, [r3, #2]
 800d02c:	b2db      	uxtb	r3, r3
 800d02e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	f103 0018 	add.w	r0, r3, #24
 800d036:	4a36      	ldr	r2, [pc, #216]	; (800d110 <OV5640_SetLightMode+0x254>)
 800d038:	693b      	ldr	r3, [r7, #16]
 800d03a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800d03e:	f107 020f 	add.w	r2, r7, #15
 800d042:	2301      	movs	r3, #1
 800d044:	f000 fee8 	bl	800de18 <ov5640_write_reg>
 800d048:	4603      	mov	r3, r0
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d002      	beq.n	800d054 <OV5640_SetLightMode+0x198>
            {
              ret = OV5640_ERROR;
 800d04e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d052:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 800d054:	693b      	ldr	r3, [r7, #16]
 800d056:	3301      	adds	r3, #1
 800d058:	613b      	str	r3, [r7, #16]
 800d05a:	693b      	ldr	r3, [r7, #16]
 800d05c:	2b06      	cmp	r3, #6
 800d05e:	d9dc      	bls.n	800d01a <OV5640_SetLightMode+0x15e>
            }
          }
        }
        break;
 800d060:	e04d      	b.n	800d0fe <OV5640_SetLightMode+0x242>
      case OV5640_LIGHT_HOME:
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 800d062:	2300      	movs	r3, #0
 800d064:	613b      	str	r3, [r7, #16]
 800d066:	e01f      	b.n	800d0a8 <OV5640_SetLightMode+0x1ec>
        {
          if (ret != OV5640_ERROR)
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d06e:	d018      	beq.n	800d0a2 <OV5640_SetLightMode+0x1e6>
          {
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 800d070:	4a28      	ldr	r2, [pc, #160]	; (800d114 <OV5640_SetLightMode+0x258>)
 800d072:	693b      	ldr	r3, [r7, #16]
 800d074:	009b      	lsls	r3, r3, #2
 800d076:	4413      	add	r3, r2
 800d078:	885b      	ldrh	r3, [r3, #2]
 800d07a:	b2db      	uxtb	r3, r3
 800d07c:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	f103 0018 	add.w	r0, r3, #24
 800d084:	4a23      	ldr	r2, [pc, #140]	; (800d114 <OV5640_SetLightMode+0x258>)
 800d086:	693b      	ldr	r3, [r7, #16]
 800d088:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800d08c:	f107 020f 	add.w	r2, r7, #15
 800d090:	2301      	movs	r3, #1
 800d092:	f000 fec1 	bl	800de18 <ov5640_write_reg>
 800d096:	4603      	mov	r3, r0
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d002      	beq.n	800d0a2 <OV5640_SetLightMode+0x1e6>
            {
              ret = OV5640_ERROR;
 800d09c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d0a0:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 800d0a2:	693b      	ldr	r3, [r7, #16]
 800d0a4:	3301      	adds	r3, #1
 800d0a6:	613b      	str	r3, [r7, #16]
 800d0a8:	693b      	ldr	r3, [r7, #16]
 800d0aa:	2b06      	cmp	r3, #6
 800d0ac:	d9dc      	bls.n	800d068 <OV5640_SetLightMode+0x1ac>
            }
          }
        }
        break;
 800d0ae:	e026      	b.n	800d0fe <OV5640_SetLightMode+0x242>
      case OV5640_LIGHT_AUTO:
      default :
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	613b      	str	r3, [r7, #16]
 800d0b4:	e01f      	b.n	800d0f6 <OV5640_SetLightMode+0x23a>
        {
          if (ret != OV5640_ERROR)
 800d0b6:	697b      	ldr	r3, [r7, #20]
 800d0b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d0bc:	d018      	beq.n	800d0f0 <OV5640_SetLightMode+0x234>
          {
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 800d0be:	4a16      	ldr	r2, [pc, #88]	; (800d118 <OV5640_SetLightMode+0x25c>)
 800d0c0:	693b      	ldr	r3, [r7, #16]
 800d0c2:	009b      	lsls	r3, r3, #2
 800d0c4:	4413      	add	r3, r2
 800d0c6:	885b      	ldrh	r3, [r3, #2]
 800d0c8:	b2db      	uxtb	r3, r3
 800d0ca:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	f103 0018 	add.w	r0, r3, #24
 800d0d2:	4a11      	ldr	r2, [pc, #68]	; (800d118 <OV5640_SetLightMode+0x25c>)
 800d0d4:	693b      	ldr	r3, [r7, #16]
 800d0d6:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800d0da:	f107 020f 	add.w	r2, r7, #15
 800d0de:	2301      	movs	r3, #1
 800d0e0:	f000 fe9a 	bl	800de18 <ov5640_write_reg>
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d002      	beq.n	800d0f0 <OV5640_SetLightMode+0x234>
            {
              ret = OV5640_ERROR;
 800d0ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d0ee:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 800d0f0:	693b      	ldr	r3, [r7, #16]
 800d0f2:	3301      	adds	r3, #1
 800d0f4:	613b      	str	r3, [r7, #16]
 800d0f6:	693b      	ldr	r3, [r7, #16]
 800d0f8:	2b06      	cmp	r3, #6
 800d0fa:	d9dc      	bls.n	800d0b6 <OV5640_SetLightMode+0x1fa>
            }
          }
        }
        break;
 800d0fc:	bf00      	nop
    }
  }
  return ret;
 800d0fe:	697b      	ldr	r3, [r7, #20]
}
 800d100:	4618      	mov	r0, r3
 800d102:	3718      	adds	r7, #24
 800d104:	46bd      	mov	sp, r7
 800d106:	bd80      	pop	{r7, pc}
 800d108:	08022bec 	.word	0x08022bec
 800d10c:	08022c08 	.word	0x08022c08
 800d110:	08022c24 	.word	0x08022c24
 800d114:	08022c40 	.word	0x08022c40
 800d118:	08022c5c 	.word	0x08022c5c

0800d11c <OV5640_SetColorEffect>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetColorEffect(OV5640_Object_t *pObj, uint32_t Effect)
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b084      	sub	sp, #16
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
 800d124:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  switch (Effect)
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	3b01      	subs	r3, #1
 800d12a:	2b1f      	cmp	r3, #31
 800d12c:	f200 81c0 	bhi.w	800d4b0 <OV5640_SetColorEffect+0x394>
 800d130:	a201      	add	r2, pc, #4	; (adr r2, 800d138 <OV5640_SetColorEffect+0x1c>)
 800d132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d136:	bf00      	nop
 800d138:	0800d1b9 	.word	0x0800d1b9
 800d13c:	0800d243 	.word	0x0800d243
 800d140:	0800d4b1 	.word	0x0800d4b1
 800d144:	0800d2cd 	.word	0x0800d2cd
 800d148:	0800d4b1 	.word	0x0800d4b1
 800d14c:	0800d4b1 	.word	0x0800d4b1
 800d150:	0800d4b1 	.word	0x0800d4b1
 800d154:	0800d357 	.word	0x0800d357
 800d158:	0800d4b1 	.word	0x0800d4b1
 800d15c:	0800d4b1 	.word	0x0800d4b1
 800d160:	0800d4b1 	.word	0x0800d4b1
 800d164:	0800d4b1 	.word	0x0800d4b1
 800d168:	0800d4b1 	.word	0x0800d4b1
 800d16c:	0800d4b1 	.word	0x0800d4b1
 800d170:	0800d4b1 	.word	0x0800d4b1
 800d174:	0800d3e1 	.word	0x0800d3e1
 800d178:	0800d4b1 	.word	0x0800d4b1
 800d17c:	0800d4b1 	.word	0x0800d4b1
 800d180:	0800d4b1 	.word	0x0800d4b1
 800d184:	0800d4b1 	.word	0x0800d4b1
 800d188:	0800d4b1 	.word	0x0800d4b1
 800d18c:	0800d4b1 	.word	0x0800d4b1
 800d190:	0800d4b1 	.word	0x0800d4b1
 800d194:	0800d4b1 	.word	0x0800d4b1
 800d198:	0800d4b1 	.word	0x0800d4b1
 800d19c:	0800d4b1 	.word	0x0800d4b1
 800d1a0:	0800d4b1 	.word	0x0800d4b1
 800d1a4:	0800d4b1 	.word	0x0800d4b1
 800d1a8:	0800d4b1 	.word	0x0800d4b1
 800d1ac:	0800d4b1 	.word	0x0800d4b1
 800d1b0:	0800d4b1 	.word	0x0800d4b1
 800d1b4:	0800d469 	.word	0x0800d469
  {
    case OV5640_COLOR_EFFECT_BLUE:
      tmp = 0xFF;
 800d1b8:	23ff      	movs	r3, #255	; 0xff
 800d1ba:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	f103 0018 	add.w	r0, r3, #24
 800d1c2:	f107 020b 	add.w	r2, r7, #11
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	f245 0101 	movw	r1, #20481	; 0x5001
 800d1cc:	f000 fe24 	bl	800de18 <ov5640_write_reg>
 800d1d0:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d10c      	bne.n	800d1f2 <OV5640_SetColorEffect+0xd6>
      {
        tmp = 0x18;
 800d1d8:	2318      	movs	r3, #24
 800d1da:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f103 0018 	add.w	r0, r3, #24
 800d1e2:	f107 020b 	add.w	r2, r7, #11
 800d1e6:	2301      	movs	r3, #1
 800d1e8:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800d1ec:	f000 fe14 	bl	800de18 <ov5640_write_reg>
 800d1f0:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d10c      	bne.n	800d212 <OV5640_SetColorEffect+0xf6>
      {
        tmp = 0xA0;
 800d1f8:	23a0      	movs	r3, #160	; 0xa0
 800d1fa:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	f103 0018 	add.w	r0, r3, #24
 800d202:	f107 020b 	add.w	r2, r7, #11
 800d206:	2301      	movs	r3, #1
 800d208:	f245 5183 	movw	r1, #21891	; 0x5583
 800d20c:	f000 fe04 	bl	800de18 <ov5640_write_reg>
 800d210:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d10c      	bne.n	800d232 <OV5640_SetColorEffect+0x116>
      {
        tmp = 0x40;
 800d218:	2340      	movs	r3, #64	; 0x40
 800d21a:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	f103 0018 	add.w	r0, r3, #24
 800d222:	f107 020b 	add.w	r2, r7, #11
 800d226:	2301      	movs	r3, #1
 800d228:	f245 5184 	movw	r1, #21892	; 0x5584
 800d22c:	f000 fdf4 	bl	800de18 <ov5640_write_reg>
 800d230:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	2b00      	cmp	r3, #0
 800d236:	f000 815f 	beq.w	800d4f8 <OV5640_SetColorEffect+0x3dc>
      {
        ret = OV5640_ERROR;
 800d23a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d23e:	60fb      	str	r3, [r7, #12]
      }
      break;
 800d240:	e15a      	b.n	800d4f8 <OV5640_SetColorEffect+0x3dc>

    case OV5640_COLOR_EFFECT_RED:
      tmp = 0xFF;
 800d242:	23ff      	movs	r3, #255	; 0xff
 800d244:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	f103 0018 	add.w	r0, r3, #24
 800d24c:	f107 020b 	add.w	r2, r7, #11
 800d250:	2301      	movs	r3, #1
 800d252:	f245 0101 	movw	r1, #20481	; 0x5001
 800d256:	f000 fddf 	bl	800de18 <ov5640_write_reg>
 800d25a:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d10c      	bne.n	800d27c <OV5640_SetColorEffect+0x160>
      {
        tmp = 0x18;
 800d262:	2318      	movs	r3, #24
 800d264:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f103 0018 	add.w	r0, r3, #24
 800d26c:	f107 020b 	add.w	r2, r7, #11
 800d270:	2301      	movs	r3, #1
 800d272:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800d276:	f000 fdcf 	bl	800de18 <ov5640_write_reg>
 800d27a:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d10c      	bne.n	800d29c <OV5640_SetColorEffect+0x180>
      {
        tmp = 0x80;
 800d282:	2380      	movs	r3, #128	; 0x80
 800d284:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	f103 0018 	add.w	r0, r3, #24
 800d28c:	f107 020b 	add.w	r2, r7, #11
 800d290:	2301      	movs	r3, #1
 800d292:	f245 5183 	movw	r1, #21891	; 0x5583
 800d296:	f000 fdbf 	bl	800de18 <ov5640_write_reg>
 800d29a:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d10c      	bne.n	800d2bc <OV5640_SetColorEffect+0x1a0>
      {
        tmp = 0xC0;
 800d2a2:	23c0      	movs	r3, #192	; 0xc0
 800d2a4:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	f103 0018 	add.w	r0, r3, #24
 800d2ac:	f107 020b 	add.w	r2, r7, #11
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	f245 5184 	movw	r1, #21892	; 0x5584
 800d2b6:	f000 fdaf 	bl	800de18 <ov5640_write_reg>
 800d2ba:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	f000 811c 	beq.w	800d4fc <OV5640_SetColorEffect+0x3e0>
      {
        ret = OV5640_ERROR;
 800d2c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d2c8:	60fb      	str	r3, [r7, #12]
      }
      break;
 800d2ca:	e117      	b.n	800d4fc <OV5640_SetColorEffect+0x3e0>

    case OV5640_COLOR_EFFECT_GREEN:
      tmp = 0xFF;
 800d2cc:	23ff      	movs	r3, #255	; 0xff
 800d2ce:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	f103 0018 	add.w	r0, r3, #24
 800d2d6:	f107 020b 	add.w	r2, r7, #11
 800d2da:	2301      	movs	r3, #1
 800d2dc:	f245 0101 	movw	r1, #20481	; 0x5001
 800d2e0:	f000 fd9a 	bl	800de18 <ov5640_write_reg>
 800d2e4:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d10c      	bne.n	800d306 <OV5640_SetColorEffect+0x1ea>
      {
        tmp = 0x18;
 800d2ec:	2318      	movs	r3, #24
 800d2ee:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f103 0018 	add.w	r0, r3, #24
 800d2f6:	f107 020b 	add.w	r2, r7, #11
 800d2fa:	2301      	movs	r3, #1
 800d2fc:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800d300:	f000 fd8a 	bl	800de18 <ov5640_write_reg>
 800d304:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d10c      	bne.n	800d326 <OV5640_SetColorEffect+0x20a>
      {
        tmp = 0x60;
 800d30c:	2360      	movs	r3, #96	; 0x60
 800d30e:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f103 0018 	add.w	r0, r3, #24
 800d316:	f107 020b 	add.w	r2, r7, #11
 800d31a:	2301      	movs	r3, #1
 800d31c:	f245 5183 	movw	r1, #21891	; 0x5583
 800d320:	f000 fd7a 	bl	800de18 <ov5640_write_reg>
 800d324:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d10c      	bne.n	800d346 <OV5640_SetColorEffect+0x22a>
      {
        tmp = 0x60;
 800d32c:	2360      	movs	r3, #96	; 0x60
 800d32e:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	f103 0018 	add.w	r0, r3, #24
 800d336:	f107 020b 	add.w	r2, r7, #11
 800d33a:	2301      	movs	r3, #1
 800d33c:	f245 5184 	movw	r1, #21892	; 0x5584
 800d340:	f000 fd6a 	bl	800de18 <ov5640_write_reg>
 800d344:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	f000 80d9 	beq.w	800d500 <OV5640_SetColorEffect+0x3e4>
      {
        ret = OV5640_ERROR;
 800d34e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d352:	60fb      	str	r3, [r7, #12]
      }
      break;
 800d354:	e0d4      	b.n	800d500 <OV5640_SetColorEffect+0x3e4>

    case OV5640_COLOR_EFFECT_BW:
      tmp = 0xFF;
 800d356:	23ff      	movs	r3, #255	; 0xff
 800d358:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	f103 0018 	add.w	r0, r3, #24
 800d360:	f107 020b 	add.w	r2, r7, #11
 800d364:	2301      	movs	r3, #1
 800d366:	f245 0101 	movw	r1, #20481	; 0x5001
 800d36a:	f000 fd55 	bl	800de18 <ov5640_write_reg>
 800d36e:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d10c      	bne.n	800d390 <OV5640_SetColorEffect+0x274>
      {
        tmp = 0x18;
 800d376:	2318      	movs	r3, #24
 800d378:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	f103 0018 	add.w	r0, r3, #24
 800d380:	f107 020b 	add.w	r2, r7, #11
 800d384:	2301      	movs	r3, #1
 800d386:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800d38a:	f000 fd45 	bl	800de18 <ov5640_write_reg>
 800d38e:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d10c      	bne.n	800d3b0 <OV5640_SetColorEffect+0x294>
      {
        tmp = 0x80;
 800d396:	2380      	movs	r3, #128	; 0x80
 800d398:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	f103 0018 	add.w	r0, r3, #24
 800d3a0:	f107 020b 	add.w	r2, r7, #11
 800d3a4:	2301      	movs	r3, #1
 800d3a6:	f245 5183 	movw	r1, #21891	; 0x5583
 800d3aa:	f000 fd35 	bl	800de18 <ov5640_write_reg>
 800d3ae:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d10c      	bne.n	800d3d0 <OV5640_SetColorEffect+0x2b4>
      {
        tmp = 0x80;
 800d3b6:	2380      	movs	r3, #128	; 0x80
 800d3b8:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	f103 0018 	add.w	r0, r3, #24
 800d3c0:	f107 020b 	add.w	r2, r7, #11
 800d3c4:	2301      	movs	r3, #1
 800d3c6:	f245 5184 	movw	r1, #21892	; 0x5584
 800d3ca:	f000 fd25 	bl	800de18 <ov5640_write_reg>
 800d3ce:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	f000 8096 	beq.w	800d504 <OV5640_SetColorEffect+0x3e8>
      {
        ret = OV5640_ERROR;
 800d3d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d3dc:	60fb      	str	r3, [r7, #12]
      }
      break;
 800d3de:	e091      	b.n	800d504 <OV5640_SetColorEffect+0x3e8>

    case OV5640_COLOR_EFFECT_SEPIA:
      tmp = 0xFF;
 800d3e0:	23ff      	movs	r3, #255	; 0xff
 800d3e2:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	f103 0018 	add.w	r0, r3, #24
 800d3ea:	f107 020b 	add.w	r2, r7, #11
 800d3ee:	2301      	movs	r3, #1
 800d3f0:	f245 0101 	movw	r1, #20481	; 0x5001
 800d3f4:	f000 fd10 	bl	800de18 <ov5640_write_reg>
 800d3f8:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d10c      	bne.n	800d41a <OV5640_SetColorEffect+0x2fe>
      {
        tmp = 0x18;
 800d400:	2318      	movs	r3, #24
 800d402:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	f103 0018 	add.w	r0, r3, #24
 800d40a:	f107 020b 	add.w	r2, r7, #11
 800d40e:	2301      	movs	r3, #1
 800d410:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800d414:	f000 fd00 	bl	800de18 <ov5640_write_reg>
 800d418:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d10c      	bne.n	800d43a <OV5640_SetColorEffect+0x31e>
      {
        tmp = 0x40;
 800d420:	2340      	movs	r3, #64	; 0x40
 800d422:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f103 0018 	add.w	r0, r3, #24
 800d42a:	f107 020b 	add.w	r2, r7, #11
 800d42e:	2301      	movs	r3, #1
 800d430:	f245 5183 	movw	r1, #21891	; 0x5583
 800d434:	f000 fcf0 	bl	800de18 <ov5640_write_reg>
 800d438:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d10c      	bne.n	800d45a <OV5640_SetColorEffect+0x33e>
      {
        tmp = 0xA0;
 800d440:	23a0      	movs	r3, #160	; 0xa0
 800d442:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	f103 0018 	add.w	r0, r3, #24
 800d44a:	f107 020b 	add.w	r2, r7, #11
 800d44e:	2301      	movs	r3, #1
 800d450:	f245 5184 	movw	r1, #21892	; 0x5584
 800d454:	f000 fce0 	bl	800de18 <ov5640_write_reg>
 800d458:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d053      	beq.n	800d508 <OV5640_SetColorEffect+0x3ec>
      {
        ret = OV5640_ERROR;
 800d460:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d464:	60fb      	str	r3, [r7, #12]
      }
      break;
 800d466:	e04f      	b.n	800d508 <OV5640_SetColorEffect+0x3ec>

    case OV5640_COLOR_EFFECT_NEGATIVE:
      tmp = 0xFF;
 800d468:	23ff      	movs	r3, #255	; 0xff
 800d46a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	f103 0018 	add.w	r0, r3, #24
 800d472:	f107 020b 	add.w	r2, r7, #11
 800d476:	2301      	movs	r3, #1
 800d478:	f245 0101 	movw	r1, #20481	; 0x5001
 800d47c:	f000 fccc 	bl	800de18 <ov5640_write_reg>
 800d480:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d10c      	bne.n	800d4a2 <OV5640_SetColorEffect+0x386>
      {
        tmp = 0x40;
 800d488:	2340      	movs	r3, #64	; 0x40
 800d48a:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	f103 0018 	add.w	r0, r3, #24
 800d492:	f107 020b 	add.w	r2, r7, #11
 800d496:	2301      	movs	r3, #1
 800d498:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800d49c:	f000 fcbc 	bl	800de18 <ov5640_write_reg>
 800d4a0:	60f8      	str	r0, [r7, #12]
      }
      if (ret != OV5640_OK)
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d031      	beq.n	800d50c <OV5640_SetColorEffect+0x3f0>
      {
        ret = OV5640_ERROR;
 800d4a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d4ac:	60fb      	str	r3, [r7, #12]
      }
      break;
 800d4ae:	e02d      	b.n	800d50c <OV5640_SetColorEffect+0x3f0>

    case OV5640_COLOR_EFFECT_NONE:
    default :
      tmp = 0x7F;
 800d4b0:	237f      	movs	r3, #127	; 0x7f
 800d4b2:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f103 0018 	add.w	r0, r3, #24
 800d4ba:	f107 020b 	add.w	r2, r7, #11
 800d4be:	2301      	movs	r3, #1
 800d4c0:	f245 0101 	movw	r1, #20481	; 0x5001
 800d4c4:	f000 fca8 	bl	800de18 <ov5640_write_reg>
 800d4c8:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d10c      	bne.n	800d4ea <OV5640_SetColorEffect+0x3ce>
      {
        tmp = 0x00;
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f103 0018 	add.w	r0, r3, #24
 800d4da:	f107 020b 	add.w	r2, r7, #11
 800d4de:	2301      	movs	r3, #1
 800d4e0:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800d4e4:	f000 fc98 	bl	800de18 <ov5640_write_reg>
 800d4e8:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d00f      	beq.n	800d510 <OV5640_SetColorEffect+0x3f4>
      {
        ret = OV5640_ERROR;
 800d4f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d4f4:	60fb      	str	r3, [r7, #12]
      }

      break;
 800d4f6:	e00b      	b.n	800d510 <OV5640_SetColorEffect+0x3f4>
      break;
 800d4f8:	bf00      	nop
 800d4fa:	e00a      	b.n	800d512 <OV5640_SetColorEffect+0x3f6>
      break;
 800d4fc:	bf00      	nop
 800d4fe:	e008      	b.n	800d512 <OV5640_SetColorEffect+0x3f6>
      break;
 800d500:	bf00      	nop
 800d502:	e006      	b.n	800d512 <OV5640_SetColorEffect+0x3f6>
      break;
 800d504:	bf00      	nop
 800d506:	e004      	b.n	800d512 <OV5640_SetColorEffect+0x3f6>
      break;
 800d508:	bf00      	nop
 800d50a:	e002      	b.n	800d512 <OV5640_SetColorEffect+0x3f6>
      break;
 800d50c:	bf00      	nop
 800d50e:	e000      	b.n	800d512 <OV5640_SetColorEffect+0x3f6>
      break;
 800d510:	bf00      	nop
  }

  return ret;
 800d512:	68fb      	ldr	r3, [r7, #12]
}
 800d514:	4618      	mov	r0, r3
 800d516:	3710      	adds	r7, #16
 800d518:	46bd      	mov	sp, r7
 800d51a:	bd80      	pop	{r7, pc}

0800d51c <OV5640_SetBrightness>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetBrightness(OV5640_Object_t *pObj, int32_t Level)
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b088      	sub	sp, #32
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
 800d524:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 800d526:	4a34      	ldr	r2, [pc, #208]	; (800d5f8 <OV5640_SetBrightness+0xdc>)
 800d528:	f107 0310 	add.w	r3, r7, #16
 800d52c:	ca07      	ldmia	r2, {r0, r1, r2}
 800d52e:	c303      	stmia	r3!, {r0, r1}
 800d530:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 800d532:	23ff      	movs	r3, #255	; 0xff
 800d534:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	f103 0018 	add.w	r0, r3, #24
 800d53c:	f107 020f 	add.w	r2, r7, #15
 800d540:	2301      	movs	r3, #1
 800d542:	f245 0101 	movw	r1, #20481	; 0x5001
 800d546:	f000 fc67 	bl	800de18 <ov5640_write_reg>
 800d54a:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 800d54c:	69fb      	ldr	r3, [r7, #28]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d111      	bne.n	800d576 <OV5640_SetBrightness+0x5a>
  {
    tmp = brightness_level[Level + 4];
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	3304      	adds	r3, #4
 800d556:	3320      	adds	r3, #32
 800d558:	443b      	add	r3, r7
 800d55a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800d55e:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL7, &tmp, 1);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	f103 0018 	add.w	r0, r3, #24
 800d566:	f107 020f 	add.w	r2, r7, #15
 800d56a:	2301      	movs	r3, #1
 800d56c:	f245 5187 	movw	r1, #21895	; 0x5587
 800d570:	f000 fc52 	bl	800de18 <ov5640_write_reg>
 800d574:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 800d576:	69fb      	ldr	r3, [r7, #28]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d10c      	bne.n	800d596 <OV5640_SetBrightness+0x7a>
  {
    tmp = 0x04;
 800d57c:	2304      	movs	r3, #4
 800d57e:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f103 0018 	add.w	r0, r3, #24
 800d586:	f107 020f 	add.w	r2, r7, #15
 800d58a:	2301      	movs	r3, #1
 800d58c:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800d590:	f000 fc42 	bl	800de18 <ov5640_write_reg>
 800d594:	61f8      	str	r0, [r7, #28]
  }

  if (ret == OV5640_OK)
 800d596:	69fb      	ldr	r3, [r7, #28]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d127      	bne.n	800d5ec <OV5640_SetBrightness+0xd0>
  {
    if (Level < 0)
 800d59c:	683b      	ldr	r3, [r7, #0]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	da12      	bge.n	800d5c8 <OV5640_SetBrightness+0xac>
    {
      tmp = 0x01;
 800d5a2:	2301      	movs	r3, #1
 800d5a4:	73fb      	strb	r3, [r7, #15]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	f103 0018 	add.w	r0, r3, #24
 800d5ac:	f107 020f 	add.w	r2, r7, #15
 800d5b0:	2301      	movs	r3, #1
 800d5b2:	f245 5188 	movw	r1, #21896	; 0x5588
 800d5b6:	f000 fc2f 	bl	800de18 <ov5640_write_reg>
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d015      	beq.n	800d5ec <OV5640_SetBrightness+0xd0>
      {
        ret = OV5640_ERROR;
 800d5c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d5c4:	61fb      	str	r3, [r7, #28]
 800d5c6:	e011      	b.n	800d5ec <OV5640_SetBrightness+0xd0>
      }
    }
    else
    {
      tmp = 0x09;
 800d5c8:	2309      	movs	r3, #9
 800d5ca:	73fb      	strb	r3, [r7, #15]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	f103 0018 	add.w	r0, r3, #24
 800d5d2:	f107 020f 	add.w	r2, r7, #15
 800d5d6:	2301      	movs	r3, #1
 800d5d8:	f245 5188 	movw	r1, #21896	; 0x5588
 800d5dc:	f000 fc1c 	bl	800de18 <ov5640_write_reg>
 800d5e0:	4603      	mov	r3, r0
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d002      	beq.n	800d5ec <OV5640_SetBrightness+0xd0>
      {
        ret = OV5640_ERROR;
 800d5e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d5ea:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ret;
 800d5ec:	69fb      	ldr	r3, [r7, #28]
}
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	3720      	adds	r7, #32
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bd80      	pop	{r7, pc}
 800d5f6:	bf00      	nop
 800d5f8:	08021958 	.word	0x08021958

0800d5fc <OV5640_SetSaturation>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetSaturation(OV5640_Object_t *pObj, int32_t Level)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b088      	sub	sp, #32
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
 800d604:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 800d606:	4a30      	ldr	r2, [pc, #192]	; (800d6c8 <OV5640_SetSaturation+0xcc>)
 800d608:	f107 0310 	add.w	r3, r7, #16
 800d60c:	ca07      	ldmia	r2, {r0, r1, r2}
 800d60e:	c303      	stmia	r3!, {r0, r1}
 800d610:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 800d612:	23ff      	movs	r3, #255	; 0xff
 800d614:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	f103 0018 	add.w	r0, r3, #24
 800d61c:	f107 020f 	add.w	r2, r7, #15
 800d620:	2301      	movs	r3, #1
 800d622:	f245 0101 	movw	r1, #20481	; 0x5001
 800d626:	f000 fbf7 	bl	800de18 <ov5640_write_reg>
 800d62a:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 800d62c:	69fb      	ldr	r3, [r7, #28]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d111      	bne.n	800d656 <OV5640_SetSaturation+0x5a>
  {
    tmp = saturation_level[Level + 4];
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	3304      	adds	r3, #4
 800d636:	3320      	adds	r3, #32
 800d638:	443b      	add	r3, r7
 800d63a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800d63e:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	f103 0018 	add.w	r0, r3, #24
 800d646:	f107 020f 	add.w	r2, r7, #15
 800d64a:	2301      	movs	r3, #1
 800d64c:	f245 5183 	movw	r1, #21891	; 0x5583
 800d650:	f000 fbe2 	bl	800de18 <ov5640_write_reg>
 800d654:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 800d656:	69fb      	ldr	r3, [r7, #28]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d10a      	bne.n	800d672 <OV5640_SetSaturation+0x76>
  {
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	f103 0018 	add.w	r0, r3, #24
 800d662:	f107 020f 	add.w	r2, r7, #15
 800d666:	2301      	movs	r3, #1
 800d668:	f245 5184 	movw	r1, #21892	; 0x5584
 800d66c:	f000 fbd4 	bl	800de18 <ov5640_write_reg>
 800d670:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 800d672:	69fb      	ldr	r3, [r7, #28]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d10c      	bne.n	800d692 <OV5640_SetSaturation+0x96>
  {
    tmp = 0x02;
 800d678:	2302      	movs	r3, #2
 800d67a:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	f103 0018 	add.w	r0, r3, #24
 800d682:	f107 020f 	add.w	r2, r7, #15
 800d686:	2301      	movs	r3, #1
 800d688:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800d68c:	f000 fbc4 	bl	800de18 <ov5640_write_reg>
 800d690:	61f8      	str	r0, [r7, #28]
  }

  if (ret == OV5640_OK)
 800d692:	69fb      	ldr	r3, [r7, #28]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d10c      	bne.n	800d6b2 <OV5640_SetSaturation+0xb6>
  {
    tmp = 0x41;
 800d698:	2341      	movs	r3, #65	; 0x41
 800d69a:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f103 0018 	add.w	r0, r3, #24
 800d6a2:	f107 020f 	add.w	r2, r7, #15
 800d6a6:	2301      	movs	r3, #1
 800d6a8:	f245 5188 	movw	r1, #21896	; 0x5588
 800d6ac:	f000 fbb4 	bl	800de18 <ov5640_write_reg>
 800d6b0:	61f8      	str	r0, [r7, #28]
  }

  if (ret != OV5640_OK)
 800d6b2:	69fb      	ldr	r3, [r7, #28]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d002      	beq.n	800d6be <OV5640_SetSaturation+0xc2>
  {
    ret = OV5640_ERROR;
 800d6b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d6bc:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 800d6be:	69fb      	ldr	r3, [r7, #28]
}
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	3720      	adds	r7, #32
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}
 800d6c8:	08021964 	.word	0x08021964

0800d6cc <OV5640_SetContrast>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetContrast(OV5640_Object_t *pObj, int32_t Level)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b088      	sub	sp, #32
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
 800d6d4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 800d6d6:	4a30      	ldr	r2, [pc, #192]	; (800d798 <OV5640_SetContrast+0xcc>)
 800d6d8:	f107 0310 	add.w	r3, r7, #16
 800d6dc:	ca07      	ldmia	r2, {r0, r1, r2}
 800d6de:	c303      	stmia	r3!, {r0, r1}
 800d6e0:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 800d6e2:	23ff      	movs	r3, #255	; 0xff
 800d6e4:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	f103 0018 	add.w	r0, r3, #24
 800d6ec:	f107 020f 	add.w	r2, r7, #15
 800d6f0:	2301      	movs	r3, #1
 800d6f2:	f245 0101 	movw	r1, #20481	; 0x5001
 800d6f6:	f000 fb8f 	bl	800de18 <ov5640_write_reg>
 800d6fa:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 800d6fc:	69fb      	ldr	r3, [r7, #28]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d10c      	bne.n	800d71c <OV5640_SetContrast+0x50>
  {
    tmp = 0x04;
 800d702:	2304      	movs	r3, #4
 800d704:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	f103 0018 	add.w	r0, r3, #24
 800d70c:	f107 020f 	add.w	r2, r7, #15
 800d710:	2301      	movs	r3, #1
 800d712:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800d716:	f000 fb7f 	bl	800de18 <ov5640_write_reg>
 800d71a:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 800d71c:	69fb      	ldr	r3, [r7, #28]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d111      	bne.n	800d746 <OV5640_SetContrast+0x7a>
  {
    tmp = contrast_level[Level + 4];
 800d722:	683b      	ldr	r3, [r7, #0]
 800d724:	3304      	adds	r3, #4
 800d726:	3320      	adds	r3, #32
 800d728:	443b      	add	r3, r7
 800d72a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800d72e:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	f103 0018 	add.w	r0, r3, #24
 800d736:	f107 020f 	add.w	r2, r7, #15
 800d73a:	2301      	movs	r3, #1
 800d73c:	f245 5186 	movw	r1, #21894	; 0x5586
 800d740:	f000 fb6a 	bl	800de18 <ov5640_write_reg>
 800d744:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 800d746:	69fb      	ldr	r3, [r7, #28]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d10a      	bne.n	800d762 <OV5640_SetContrast+0x96>
  {
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL5, &tmp, 1);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	f103 0018 	add.w	r0, r3, #24
 800d752:	f107 020f 	add.w	r2, r7, #15
 800d756:	2301      	movs	r3, #1
 800d758:	f245 5185 	movw	r1, #21893	; 0x5585
 800d75c:	f000 fb5c 	bl	800de18 <ov5640_write_reg>
 800d760:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 800d762:	69fb      	ldr	r3, [r7, #28]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d10c      	bne.n	800d782 <OV5640_SetContrast+0xb6>
  {
    tmp = 0x41;
 800d768:	2341      	movs	r3, #65	; 0x41
 800d76a:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	f103 0018 	add.w	r0, r3, #24
 800d772:	f107 020f 	add.w	r2, r7, #15
 800d776:	2301      	movs	r3, #1
 800d778:	f245 5188 	movw	r1, #21896	; 0x5588
 800d77c:	f000 fb4c 	bl	800de18 <ov5640_write_reg>
 800d780:	61f8      	str	r0, [r7, #28]
  }

  if (ret != OV5640_OK)
 800d782:	69fb      	ldr	r3, [r7, #28]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d002      	beq.n	800d78e <OV5640_SetContrast+0xc2>
  {
    ret = OV5640_ERROR;
 800d788:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d78c:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 800d78e:	69fb      	ldr	r3, [r7, #28]
}
 800d790:	4618      	mov	r0, r3
 800d792:	3720      	adds	r7, #32
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}
 800d798:	08021970 	.word	0x08021970

0800d79c <OV5640_SetHueDegree>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetHueDegree(OV5640_Object_t *pObj, int32_t Degree)
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b08e      	sub	sp, #56	; 0x38
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
 800d7a4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 800d7a6:	4a3c      	ldr	r2, [pc, #240]	; (800d898 <OV5640_SetHueDegree+0xfc>)
 800d7a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d7ac:	ca07      	ldmia	r2, {r0, r1, r2}
 800d7ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x6FU
                                     };
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 800d7b2:	4a3a      	ldr	r2, [pc, #232]	; (800d89c <OV5640_SetHueDegree+0x100>)
 800d7b4:	f107 031c 	add.w	r3, r7, #28
 800d7b8:	ca07      	ldmia	r2, {r0, r1, r2}
 800d7ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x40U
                                     };
  const uint8_t hue_degree_ctrl8[] = {0x32U, 0x32U, 0x32U, 0x02U, 0x02U, 0x02U, 0x01U, 0x01U, 0x01U, 0x31U, 0x31U,
 800d7be:	4a38      	ldr	r2, [pc, #224]	; (800d8a0 <OV5640_SetHueDegree+0x104>)
 800d7c0:	f107 0310 	add.w	r3, r7, #16
 800d7c4:	ca07      	ldmia	r2, {r0, r1, r2}
 800d7c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x31U
                                     };
  uint8_t tmp;

  tmp = 0xFF;
 800d7ca:	23ff      	movs	r3, #255	; 0xff
 800d7cc:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	f103 0018 	add.w	r0, r3, #24
 800d7d4:	f107 020f 	add.w	r2, r7, #15
 800d7d8:	2301      	movs	r3, #1
 800d7da:	f245 0101 	movw	r1, #20481	; 0x5001
 800d7de:	f000 fb1b 	bl	800de18 <ov5640_write_reg>
 800d7e2:	6378      	str	r0, [r7, #52]	; 0x34

  if (ret == OV5640_OK)
 800d7e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d10c      	bne.n	800d804 <OV5640_SetHueDegree+0x68>
  {
    tmp = 0x01;
 800d7ea:	2301      	movs	r3, #1
 800d7ec:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	f103 0018 	add.w	r0, r3, #24
 800d7f4:	f107 020f 	add.w	r2, r7, #15
 800d7f8:	2301      	movs	r3, #1
 800d7fa:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800d7fe:	f000 fb0b 	bl	800de18 <ov5640_write_reg>
 800d802:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 800d804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d806:	2b00      	cmp	r3, #0
 800d808:	d111      	bne.n	800d82e <OV5640_SetHueDegree+0x92>
  {
    tmp = hue_degree_ctrl1[Degree + 6];
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	3306      	adds	r3, #6
 800d80e:	3338      	adds	r3, #56	; 0x38
 800d810:	443b      	add	r3, r7
 800d812:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800d816:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL1, &tmp, 1);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	f103 0018 	add.w	r0, r3, #24
 800d81e:	f107 020f 	add.w	r2, r7, #15
 800d822:	2301      	movs	r3, #1
 800d824:	f245 5181 	movw	r1, #21889	; 0x5581
 800d828:	f000 faf6 	bl	800de18 <ov5640_write_reg>
 800d82c:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 800d82e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d830:	2b00      	cmp	r3, #0
 800d832:	d111      	bne.n	800d858 <OV5640_SetHueDegree+0xbc>
  {
    tmp = hue_degree_ctrl2[Degree + 6];
 800d834:	683b      	ldr	r3, [r7, #0]
 800d836:	3306      	adds	r3, #6
 800d838:	3338      	adds	r3, #56	; 0x38
 800d83a:	443b      	add	r3, r7
 800d83c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800d840:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL2, &tmp, 1);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	f103 0018 	add.w	r0, r3, #24
 800d848:	f107 020f 	add.w	r2, r7, #15
 800d84c:	2301      	movs	r3, #1
 800d84e:	f245 5182 	movw	r1, #21890	; 0x5582
 800d852:	f000 fae1 	bl	800de18 <ov5640_write_reg>
 800d856:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 800d858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d111      	bne.n	800d882 <OV5640_SetHueDegree+0xe6>
  {
    tmp = hue_degree_ctrl8[Degree + 6];
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	3306      	adds	r3, #6
 800d862:	3338      	adds	r3, #56	; 0x38
 800d864:	443b      	add	r3, r7
 800d866:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800d86a:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f103 0018 	add.w	r0, r3, #24
 800d872:	f107 020f 	add.w	r2, r7, #15
 800d876:	2301      	movs	r3, #1
 800d878:	f245 5188 	movw	r1, #21896	; 0x5588
 800d87c:	f000 facc 	bl	800de18 <ov5640_write_reg>
 800d880:	6378      	str	r0, [r7, #52]	; 0x34
  }

  if (ret != OV5640_OK)
 800d882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d884:	2b00      	cmp	r3, #0
 800d886:	d002      	beq.n	800d88e <OV5640_SetHueDegree+0xf2>
  {
    ret = OV5640_ERROR;
 800d888:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d88c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  return ret;
 800d88e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d890:	4618      	mov	r0, r3
 800d892:	3738      	adds	r7, #56	; 0x38
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}
 800d898:	0802197c 	.word	0x0802197c
 800d89c:	08021988 	.word	0x08021988
 800d8a0:	08021994 	.word	0x08021994

0800d8a4 <OV5640_MirrorFlipConfig>:
  * @param  pObj  pointer to component object
  * @param  Config To configure mirror, flip, both or none
  * @retval Component status
  */
int32_t OV5640_MirrorFlipConfig(OV5640_Object_t *pObj, uint32_t Config)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b084      	sub	sp, #16
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
 800d8ac:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp3820 = 0;
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	72fb      	strb	r3, [r7, #11]
  uint8_t tmp3821;

  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	f103 0018 	add.w	r0, r3, #24
 800d8b8:	f107 020b 	add.w	r2, r7, #11
 800d8bc:	2301      	movs	r3, #1
 800d8be:	f643 0120 	movw	r1, #14368	; 0x3820
 800d8c2:	f000 fa92 	bl	800ddea <ov5640_read_reg>
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d003      	beq.n	800d8d4 <OV5640_MirrorFlipConfig+0x30>
  {
    ret = OV5640_ERROR;
 800d8cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d8d0:	60fb      	str	r3, [r7, #12]
 800d8d2:	e0cb      	b.n	800da6c <OV5640_MirrorFlipConfig+0x1c8>
  }
  else
  {
    tmp3820 &= 0xF9U;
 800d8d4:	7afb      	ldrb	r3, [r7, #11]
 800d8d6:	f023 0306 	bic.w	r3, r3, #6
 800d8da:	b2db      	uxtb	r3, r3
 800d8dc:	72fb      	strb	r3, [r7, #11]

    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	f103 0018 	add.w	r0, r3, #24
 800d8e4:	f107 020a 	add.w	r2, r7, #10
 800d8e8:	2301      	movs	r3, #1
 800d8ea:	f643 0121 	movw	r1, #14369	; 0x3821
 800d8ee:	f000 fa7c 	bl	800ddea <ov5640_read_reg>
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d003      	beq.n	800d900 <OV5640_MirrorFlipConfig+0x5c>
    {
      ret = OV5640_ERROR;
 800d8f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d8fc:	60fb      	str	r3, [r7, #12]
 800d8fe:	e0b5      	b.n	800da6c <OV5640_MirrorFlipConfig+0x1c8>
    }
    else
    {
      ret = OV5640_OK;
 800d900:	2300      	movs	r3, #0
 800d902:	60fb      	str	r3, [r7, #12]
      tmp3821 &= 0xF9U;
 800d904:	7abb      	ldrb	r3, [r7, #10]
 800d906:	f023 0306 	bic.w	r3, r3, #6
 800d90a:	b2db      	uxtb	r3, r3
 800d90c:	72bb      	strb	r3, [r7, #10]

      switch (Config)
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	2b03      	cmp	r3, #3
 800d912:	d056      	beq.n	800d9c2 <OV5640_MirrorFlipConfig+0x11e>
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	2b03      	cmp	r3, #3
 800d918:	d87f      	bhi.n	800da1a <OV5640_MirrorFlipConfig+0x176>
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	2b01      	cmp	r3, #1
 800d91e:	d029      	beq.n	800d974 <OV5640_MirrorFlipConfig+0xd0>
 800d920:	683b      	ldr	r3, [r7, #0]
 800d922:	2b02      	cmp	r3, #2
 800d924:	d179      	bne.n	800da1a <OV5640_MirrorFlipConfig+0x176>
      {
        case OV5640_MIRROR:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	f103 0018 	add.w	r0, r3, #24
 800d92c:	f107 020b 	add.w	r2, r7, #11
 800d930:	2301      	movs	r3, #1
 800d932:	f643 0120 	movw	r1, #14368	; 0x3820
 800d936:	f000 fa6f 	bl	800de18 <ov5640_write_reg>
 800d93a:	4603      	mov	r3, r0
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d003      	beq.n	800d948 <OV5640_MirrorFlipConfig+0xa4>
          {
            ret = OV5640_ERROR;
 800d940:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d944:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 800d946:	e08a      	b.n	800da5e <OV5640_MirrorFlipConfig+0x1ba>
            tmp3821 |= 0x06U;
 800d948:	7abb      	ldrb	r3, [r7, #10]
 800d94a:	f043 0306 	orr.w	r3, r3, #6
 800d94e:	b2db      	uxtb	r3, r3
 800d950:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	f103 0018 	add.w	r0, r3, #24
 800d958:	f107 020a 	add.w	r2, r7, #10
 800d95c:	2301      	movs	r3, #1
 800d95e:	f643 0121 	movw	r1, #14369	; 0x3821
 800d962:	f000 fa59 	bl	800de18 <ov5640_write_reg>
 800d966:	4603      	mov	r3, r0
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d078      	beq.n	800da5e <OV5640_MirrorFlipConfig+0x1ba>
              ret = OV5640_ERROR;
 800d96c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d970:	60fb      	str	r3, [r7, #12]
          break;
 800d972:	e074      	b.n	800da5e <OV5640_MirrorFlipConfig+0x1ba>
        case OV5640_FLIP:
          tmp3820 |= 0x06U;
 800d974:	7afb      	ldrb	r3, [r7, #11]
 800d976:	f043 0306 	orr.w	r3, r3, #6
 800d97a:	b2db      	uxtb	r3, r3
 800d97c:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	f103 0018 	add.w	r0, r3, #24
 800d984:	f107 020b 	add.w	r2, r7, #11
 800d988:	2301      	movs	r3, #1
 800d98a:	f643 0120 	movw	r1, #14368	; 0x3820
 800d98e:	f000 fa43 	bl	800de18 <ov5640_write_reg>
 800d992:	4603      	mov	r3, r0
 800d994:	2b00      	cmp	r3, #0
 800d996:	d003      	beq.n	800d9a0 <OV5640_MirrorFlipConfig+0xfc>
          {
            ret = OV5640_ERROR;
 800d998:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d99c:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 800d99e:	e060      	b.n	800da62 <OV5640_MirrorFlipConfig+0x1be>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	f103 0018 	add.w	r0, r3, #24
 800d9a6:	f107 020a 	add.w	r2, r7, #10
 800d9aa:	2301      	movs	r3, #1
 800d9ac:	f643 0121 	movw	r1, #14369	; 0x3821
 800d9b0:	f000 fa32 	bl	800de18 <ov5640_write_reg>
 800d9b4:	4603      	mov	r3, r0
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d053      	beq.n	800da62 <OV5640_MirrorFlipConfig+0x1be>
              ret = OV5640_ERROR;
 800d9ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d9be:	60fb      	str	r3, [r7, #12]
          break;
 800d9c0:	e04f      	b.n	800da62 <OV5640_MirrorFlipConfig+0x1be>
        case OV5640_MIRROR_FLIP:
          tmp3820 |= 0x06U;
 800d9c2:	7afb      	ldrb	r3, [r7, #11]
 800d9c4:	f043 0306 	orr.w	r3, r3, #6
 800d9c8:	b2db      	uxtb	r3, r3
 800d9ca:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	f103 0018 	add.w	r0, r3, #24
 800d9d2:	f107 020b 	add.w	r2, r7, #11
 800d9d6:	2301      	movs	r3, #1
 800d9d8:	f643 0120 	movw	r1, #14368	; 0x3820
 800d9dc:	f000 fa1c 	bl	800de18 <ov5640_write_reg>
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d003      	beq.n	800d9ee <OV5640_MirrorFlipConfig+0x14a>
          {
            ret = OV5640_ERROR;
 800d9e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d9ea:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 800d9ec:	e03b      	b.n	800da66 <OV5640_MirrorFlipConfig+0x1c2>
            tmp3821 |= 0x06U;
 800d9ee:	7abb      	ldrb	r3, [r7, #10]
 800d9f0:	f043 0306 	orr.w	r3, r3, #6
 800d9f4:	b2db      	uxtb	r3, r3
 800d9f6:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	f103 0018 	add.w	r0, r3, #24
 800d9fe:	f107 020a 	add.w	r2, r7, #10
 800da02:	2301      	movs	r3, #1
 800da04:	f643 0121 	movw	r1, #14369	; 0x3821
 800da08:	f000 fa06 	bl	800de18 <ov5640_write_reg>
 800da0c:	4603      	mov	r3, r0
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d029      	beq.n	800da66 <OV5640_MirrorFlipConfig+0x1c2>
              ret = OV5640_ERROR;
 800da12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800da16:	60fb      	str	r3, [r7, #12]
          break;
 800da18:	e025      	b.n	800da66 <OV5640_MirrorFlipConfig+0x1c2>

        case OV5640_MIRROR_FLIP_NONE:
        default:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	f103 0018 	add.w	r0, r3, #24
 800da20:	f107 020b 	add.w	r2, r7, #11
 800da24:	2301      	movs	r3, #1
 800da26:	f643 0120 	movw	r1, #14368	; 0x3820
 800da2a:	f000 f9f5 	bl	800de18 <ov5640_write_reg>
 800da2e:	4603      	mov	r3, r0
 800da30:	2b00      	cmp	r3, #0
 800da32:	d003      	beq.n	800da3c <OV5640_MirrorFlipConfig+0x198>
          {
            ret = OV5640_ERROR;
 800da34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800da38:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 800da3a:	e016      	b.n	800da6a <OV5640_MirrorFlipConfig+0x1c6>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	f103 0018 	add.w	r0, r3, #24
 800da42:	f107 020a 	add.w	r2, r7, #10
 800da46:	2301      	movs	r3, #1
 800da48:	f643 0121 	movw	r1, #14369	; 0x3821
 800da4c:	f000 f9e4 	bl	800de18 <ov5640_write_reg>
 800da50:	4603      	mov	r3, r0
 800da52:	2b00      	cmp	r3, #0
 800da54:	d009      	beq.n	800da6a <OV5640_MirrorFlipConfig+0x1c6>
              ret = OV5640_ERROR;
 800da56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800da5a:	60fb      	str	r3, [r7, #12]
          break;
 800da5c:	e005      	b.n	800da6a <OV5640_MirrorFlipConfig+0x1c6>
          break;
 800da5e:	bf00      	nop
 800da60:	e004      	b.n	800da6c <OV5640_MirrorFlipConfig+0x1c8>
          break;
 800da62:	bf00      	nop
 800da64:	e002      	b.n	800da6c <OV5640_MirrorFlipConfig+0x1c8>
          break;
 800da66:	bf00      	nop
 800da68:	e000      	b.n	800da6c <OV5640_MirrorFlipConfig+0x1c8>
          break;
 800da6a:	bf00      	nop
      }
    }
  }

  return ret;
 800da6c:	68fb      	ldr	r3, [r7, #12]
}
 800da6e:	4618      	mov	r0, r3
 800da70:	3710      	adds	r7, #16
 800da72:	46bd      	mov	sp, r7
 800da74:	bd80      	pop	{r7, pc}

0800da76 <OV5640_ZoomConfig>:
  * @param  pObj  pointer to component object
  * @param  Zoom  Zoom to be configured
  * @retval Component status
  */
int32_t OV5640_ZoomConfig(OV5640_Object_t *pObj, uint32_t Zoom)
{
 800da76:	b580      	push	{r7, lr}
 800da78:	b086      	sub	sp, #24
 800da7a:	af00      	add	r7, sp, #0
 800da7c:	6078      	str	r0, [r7, #4]
 800da7e:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 800da80:	2300      	movs	r3, #0
 800da82:	617b      	str	r3, [r7, #20]
  uint32_t res;
  uint32_t zoom;
  uint8_t tmp;

  /* Get camera resolution */
  if (OV5640_GetResolution(pObj, &res) != OV5640_OK)
 800da84:	f107 030c 	add.w	r3, r7, #12
 800da88:	4619      	mov	r1, r3
 800da8a:	6878      	ldr	r0, [r7, #4]
 800da8c:	f7ff f8a4 	bl	800cbd8 <OV5640_GetResolution>
 800da90:	4603      	mov	r3, r0
 800da92:	2b00      	cmp	r3, #0
 800da94:	d003      	beq.n	800da9e <OV5640_ZoomConfig+0x28>
  {
    ret = OV5640_ERROR;
 800da96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800da9a:	617b      	str	r3, [r7, #20]
 800da9c:	e04e      	b.n	800db3c <OV5640_ZoomConfig+0xc6>
  }
  else
  {
    zoom = Zoom;
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	613b      	str	r3, [r7, #16]

    if (zoom == OV5640_ZOOM_x1)
 800daa2:	693b      	ldr	r3, [r7, #16]
 800daa4:	2b44      	cmp	r3, #68	; 0x44
 800daa6:	d112      	bne.n	800dace <OV5640_ZoomConfig+0x58>
    {
      tmp = 0x10;
 800daa8:	2310      	movs	r3, #16
 800daaa:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	f103 0018 	add.w	r0, r3, #24
 800dab2:	f107 020b 	add.w	r2, r7, #11
 800dab6:	2301      	movs	r3, #1
 800dab8:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 800dabc:	f000 f9ac 	bl	800de18 <ov5640_write_reg>
 800dac0:	4603      	mov	r3, r0
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d03a      	beq.n	800db3c <OV5640_ZoomConfig+0xc6>
      {
        ret = OV5640_ERROR;
 800dac6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800daca:	617b      	str	r3, [r7, #20]
 800dacc:	e036      	b.n	800db3c <OV5640_ZoomConfig+0xc6>
      }
    }
    else
    {
      switch (res)
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	2b02      	cmp	r3, #2
 800dad2:	d802      	bhi.n	800dada <OV5640_ZoomConfig+0x64>
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d103      	bne.n	800dae0 <OV5640_ZoomConfig+0x6a>
          break;
        case OV5640_R640x480:
          zoom = zoom >> 2U;
          break;
        default:
          break;
 800dad8:	e00a      	b.n	800daf0 <OV5640_ZoomConfig+0x7a>
      switch (res)
 800dada:	2b03      	cmp	r3, #3
 800dadc:	d004      	beq.n	800dae8 <OV5640_ZoomConfig+0x72>
          break;
 800dade:	e007      	b.n	800daf0 <OV5640_ZoomConfig+0x7a>
          zoom = zoom >> 1U;
 800dae0:	693b      	ldr	r3, [r7, #16]
 800dae2:	085b      	lsrs	r3, r3, #1
 800dae4:	613b      	str	r3, [r7, #16]
          break;
 800dae6:	e003      	b.n	800daf0 <OV5640_ZoomConfig+0x7a>
          zoom = zoom >> 2U;
 800dae8:	693b      	ldr	r3, [r7, #16]
 800daea:	089b      	lsrs	r3, r3, #2
 800daec:	613b      	str	r3, [r7, #16]
          break;
 800daee:	bf00      	nop
      }

      tmp = 0x00;
 800daf0:	2300      	movs	r3, #0
 800daf2:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	f103 0018 	add.w	r0, r3, #24
 800dafa:	f107 020b 	add.w	r2, r7, #11
 800dafe:	2301      	movs	r3, #1
 800db00:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 800db04:	f000 f988 	bl	800de18 <ov5640_write_reg>
 800db08:	4603      	mov	r3, r0
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d003      	beq.n	800db16 <OV5640_ZoomConfig+0xa0>
      {
        ret = OV5640_ERROR;
 800db0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800db12:	617b      	str	r3, [r7, #20]
 800db14:	e012      	b.n	800db3c <OV5640_ZoomConfig+0xc6>
      }
      else
      {
        tmp = (uint8_t)zoom;
 800db16:	693b      	ldr	r3, [r7, #16]
 800db18:	b2db      	uxtb	r3, r3
 800db1a:	72fb      	strb	r3, [r7, #11]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL1, &tmp, 1) != OV5640_OK)
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	f103 0018 	add.w	r0, r3, #24
 800db22:	f107 020b 	add.w	r2, r7, #11
 800db26:	2301      	movs	r3, #1
 800db28:	f245 6101 	movw	r1, #22017	; 0x5601
 800db2c:	f000 f974 	bl	800de18 <ov5640_write_reg>
 800db30:	4603      	mov	r3, r0
 800db32:	2b00      	cmp	r3, #0
 800db34:	d002      	beq.n	800db3c <OV5640_ZoomConfig+0xc6>
        {
          ret = OV5640_ERROR;
 800db36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800db3a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
 800db3c:	697b      	ldr	r3, [r7, #20]
}
 800db3e:	4618      	mov	r0, r3
 800db40:	3718      	adds	r7, #24
 800db42:	46bd      	mov	sp, r7
 800db44:	bd80      	pop	{r7, pc}

0800db46 <OV5640_NightModeConfig>:
  * @param  pObj  pointer to component object
  * @param  Cmd   Enable disable night mode
  * @retval Component status
  */
int32_t OV5640_NightModeConfig(OV5640_Object_t *pObj, uint32_t Cmd)
{
 800db46:	b580      	push	{r7, lr}
 800db48:	b084      	sub	sp, #16
 800db4a:	af00      	add	r7, sp, #0
 800db4c:	6078      	str	r0, [r7, #4]
 800db4e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp = 0;
 800db50:	2300      	movs	r3, #0
 800db52:	72fb      	strb	r3, [r7, #11]

  if (Cmd == NIGHT_MODE_ENABLE)
 800db54:	683b      	ldr	r3, [r7, #0]
 800db56:	2b01      	cmp	r3, #1
 800db58:	f040 80ce 	bne.w	800dcf8 <OV5640_NightModeConfig+0x1b2>
  {
    /* Auto Frame Rate: 15fps ~ 3.75fps night mode for 60/50Hz light environment,
    24Mhz clock input,24Mhz PCLK*/
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL4, &tmp, 1);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	f103 0018 	add.w	r0, r3, #24
 800db62:	f107 020b 	add.w	r2, r7, #11
 800db66:	2301      	movs	r3, #1
 800db68:	f243 0138 	movw	r1, #12344	; 0x3038
 800db6c:	f000 f954 	bl	800de18 <ov5640_write_reg>
 800db70:	60f8      	str	r0, [r7, #12]
    if (ret == OV5640_OK)
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d10a      	bne.n	800db8e <OV5640_NightModeConfig+0x48>
    {
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL5, &tmp, 1);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	f103 0018 	add.w	r0, r3, #24
 800db7e:	f107 020b 	add.w	r2, r7, #11
 800db82:	2301      	movs	r3, #1
 800db84:	f243 0139 	movw	r1, #12345	; 0x3039
 800db88:	f000 f946 	bl	800de18 <ov5640_write_reg>
 800db8c:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d10c      	bne.n	800dbae <OV5640_NightModeConfig+0x68>
    {
      tmp = 0x7C;
 800db94:	237c      	movs	r3, #124	; 0x7c
 800db96:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1);
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	f103 0018 	add.w	r0, r3, #24
 800db9e:	f107 020b 	add.w	r2, r7, #11
 800dba2:	2301      	movs	r3, #1
 800dba4:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 800dba8:	f000 f936 	bl	800de18 <ov5640_write_reg>
 800dbac:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d10c      	bne.n	800dbce <OV5640_NightModeConfig+0x88>
    {
      tmp = 0x01;
 800dbb4:	2301      	movs	r3, #1
 800dbb6:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_HIGH, &tmp, 1);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	f103 0018 	add.w	r0, r3, #24
 800dbbe:	f107 020b 	add.w	r2, r7, #11
 800dbc2:	2301      	movs	r3, #1
 800dbc4:	f643 2108 	movw	r1, #14856	; 0x3a08
 800dbc8:	f000 f926 	bl	800de18 <ov5640_write_reg>
 800dbcc:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d10c      	bne.n	800dbee <OV5640_NightModeConfig+0xa8>
    {
      tmp = 0x27;
 800dbd4:	2327      	movs	r3, #39	; 0x27
 800dbd6:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_LOW, &tmp, 1);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	f103 0018 	add.w	r0, r3, #24
 800dbde:	f107 020b 	add.w	r2, r7, #11
 800dbe2:	2301      	movs	r3, #1
 800dbe4:	f643 2109 	movw	r1, #14857	; 0x3a09
 800dbe8:	f000 f916 	bl	800de18 <ov5640_write_reg>
 800dbec:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d10c      	bne.n	800dc0e <OV5640_NightModeConfig+0xc8>
    {
      tmp = 0x00;
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_HIGH, &tmp, 1);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	f103 0018 	add.w	r0, r3, #24
 800dbfe:	f107 020b 	add.w	r2, r7, #11
 800dc02:	2301      	movs	r3, #1
 800dc04:	f643 210a 	movw	r1, #14858	; 0x3a0a
 800dc08:	f000 f906 	bl	800de18 <ov5640_write_reg>
 800dc0c:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d10c      	bne.n	800dc2e <OV5640_NightModeConfig+0xe8>
    {
      tmp = 0xF6;
 800dc14:	23f6      	movs	r3, #246	; 0xf6
 800dc16:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_LOW, &tmp, 1);
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	f103 0018 	add.w	r0, r3, #24
 800dc1e:	f107 020b 	add.w	r2, r7, #11
 800dc22:	2301      	movs	r3, #1
 800dc24:	f643 210b 	movw	r1, #14859	; 0x3a0b
 800dc28:	f000 f8f6 	bl	800de18 <ov5640_write_reg>
 800dc2c:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d10c      	bne.n	800dc4e <OV5640_NightModeConfig+0x108>
    {
      tmp = 0x04;
 800dc34:	2304      	movs	r3, #4
 800dc36:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0D, &tmp, 1);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f103 0018 	add.w	r0, r3, #24
 800dc3e:	f107 020b 	add.w	r2, r7, #11
 800dc42:	2301      	movs	r3, #1
 800dc44:	f643 210d 	movw	r1, #14861	; 0x3a0d
 800dc48:	f000 f8e6 	bl	800de18 <ov5640_write_reg>
 800dc4c:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d10a      	bne.n	800dc6a <OV5640_NightModeConfig+0x124>
    {
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0E, &tmp, 1);
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	f103 0018 	add.w	r0, r3, #24
 800dc5a:	f107 020b 	add.w	r2, r7, #11
 800dc5e:	2301      	movs	r3, #1
 800dc60:	f643 210e 	movw	r1, #14862	; 0x3a0e
 800dc64:	f000 f8d8 	bl	800de18 <ov5640_write_reg>
 800dc68:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d10c      	bne.n	800dc8a <OV5640_NightModeConfig+0x144>
    {
      tmp = 0x0B;
 800dc70:	230b      	movs	r3, #11
 800dc72:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL02, &tmp, 1);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	f103 0018 	add.w	r0, r3, #24
 800dc7a:	f107 020b 	add.w	r2, r7, #11
 800dc7e:	2301      	movs	r3, #1
 800dc80:	f643 2102 	movw	r1, #14850	; 0x3a02
 800dc84:	f000 f8c8 	bl	800de18 <ov5640_write_reg>
 800dc88:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d10c      	bne.n	800dcaa <OV5640_NightModeConfig+0x164>
    {
      tmp = 0x88;
 800dc90:	2388      	movs	r3, #136	; 0x88
 800dc92:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL03, &tmp, 1);
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	f103 0018 	add.w	r0, r3, #24
 800dc9a:	f107 020b 	add.w	r2, r7, #11
 800dc9e:	2301      	movs	r3, #1
 800dca0:	f643 2103 	movw	r1, #14851	; 0x3a03
 800dca4:	f000 f8b8 	bl	800de18 <ov5640_write_reg>
 800dca8:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d10c      	bne.n	800dcca <OV5640_NightModeConfig+0x184>
    {
      tmp = 0x0B;
 800dcb0:	230b      	movs	r3, #11
 800dcb2:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_HIGH, &tmp, 1);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	f103 0018 	add.w	r0, r3, #24
 800dcba:	f107 020b 	add.w	r2, r7, #11
 800dcbe:	2301      	movs	r3, #1
 800dcc0:	f643 2114 	movw	r1, #14868	; 0x3a14
 800dcc4:	f000 f8a8 	bl	800de18 <ov5640_write_reg>
 800dcc8:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d10c      	bne.n	800dcea <OV5640_NightModeConfig+0x1a4>
    {
      tmp = 0x88;
 800dcd0:	2388      	movs	r3, #136	; 0x88
 800dcd2:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_LOW, &tmp, 1);
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	f103 0018 	add.w	r0, r3, #24
 800dcda:	f107 020b 	add.w	r2, r7, #11
 800dcde:	2301      	movs	r3, #1
 800dce0:	f643 2115 	movw	r1, #14869	; 0x3a15
 800dce4:	f000 f898 	bl	800de18 <ov5640_write_reg>
 800dce8:	60f8      	str	r0, [r7, #12]
    }
    if (ret != OV5640_OK)
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d02b      	beq.n	800dd48 <OV5640_NightModeConfig+0x202>
    {
      ret = OV5640_ERROR;
 800dcf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dcf4:	60fb      	str	r3, [r7, #12]
 800dcf6:	e027      	b.n	800dd48 <OV5640_NightModeConfig+0x202>
    }
  }
  else
  {
    if (ov5640_read_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	f103 0018 	add.w	r0, r3, #24
 800dcfe:	f107 020b 	add.w	r2, r7, #11
 800dd02:	2301      	movs	r3, #1
 800dd04:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 800dd08:	f000 f86f 	bl	800ddea <ov5640_read_reg>
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d003      	beq.n	800dd1a <OV5640_NightModeConfig+0x1d4>
    {
      ret = OV5640_ERROR;
 800dd12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dd16:	60fb      	str	r3, [r7, #12]
 800dd18:	e016      	b.n	800dd48 <OV5640_NightModeConfig+0x202>
    }
    else
    {
      ret = OV5640_OK;
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	60fb      	str	r3, [r7, #12]
      tmp &= 0xFBU;
 800dd1e:	7afb      	ldrb	r3, [r7, #11]
 800dd20:	f023 0304 	bic.w	r3, r3, #4
 800dd24:	b2db      	uxtb	r3, r3
 800dd26:	72fb      	strb	r3, [r7, #11]
      /* Set Bit 2 to 0 */
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	f103 0018 	add.w	r0, r3, #24
 800dd2e:	f107 020b 	add.w	r2, r7, #11
 800dd32:	2301      	movs	r3, #1
 800dd34:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 800dd38:	f000 f86e 	bl	800de18 <ov5640_write_reg>
 800dd3c:	4603      	mov	r3, r0
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d002      	beq.n	800dd48 <OV5640_NightModeConfig+0x202>
      {
        ret = OV5640_ERROR;
 800dd42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dd46:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 800dd48:	68fb      	ldr	r3, [r7, #12]
}
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	3710      	adds	r7, #16
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	bd80      	pop	{r7, pc}

0800dd52 <OV5640_Delay>:
  * @param pObj   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval OV5640_OK
  */
static int32_t OV5640_Delay(OV5640_Object_t *pObj, uint32_t Delay)
{
 800dd52:	b580      	push	{r7, lr}
 800dd54:	b084      	sub	sp, #16
 800dd56:	af00      	add	r7, sp, #0
 800dd58:	6078      	str	r0, [r7, #4]
 800dd5a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	695b      	ldr	r3, [r3, #20]
 800dd60:	4798      	blx	r3
 800dd62:	4603      	mov	r3, r0
 800dd64:	60fb      	str	r3, [r7, #12]
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 800dd66:	bf00      	nop
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	695b      	ldr	r3, [r3, #20]
 800dd6c:	4798      	blx	r3
 800dd6e:	4603      	mov	r3, r0
 800dd70:	461a      	mov	r2, r3
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	1ad3      	subs	r3, r2, r3
 800dd76:	683a      	ldr	r2, [r7, #0]
 800dd78:	429a      	cmp	r2, r3
 800dd7a:	d8f5      	bhi.n	800dd68 <OV5640_Delay+0x16>
  {
  }
  return OV5640_OK;
 800dd7c:	2300      	movs	r3, #0
}
 800dd7e:	4618      	mov	r0, r3
 800dd80:	3710      	adds	r7, #16
 800dd82:	46bd      	mov	sp, r7
 800dd84:	bd80      	pop	{r7, pc}

0800dd86 <OV5640_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_ReadRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800dd86:	b590      	push	{r4, r7, lr}
 800dd88:	b087      	sub	sp, #28
 800dd8a:	af00      	add	r7, sp, #0
 800dd8c:	60f8      	str	r0, [r7, #12]
 800dd8e:	607a      	str	r2, [r7, #4]
 800dd90:	461a      	mov	r2, r3
 800dd92:	460b      	mov	r3, r1
 800dd94:	817b      	strh	r3, [r7, #10]
 800dd96:	4613      	mov	r3, r2
 800dd98:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800dd9e:	697b      	ldr	r3, [r7, #20]
 800dda0:	691c      	ldr	r4, [r3, #16]
 800dda2:	697b      	ldr	r3, [r7, #20]
 800dda4:	8918      	ldrh	r0, [r3, #8]
 800dda6:	893b      	ldrh	r3, [r7, #8]
 800dda8:	8979      	ldrh	r1, [r7, #10]
 800ddaa:	687a      	ldr	r2, [r7, #4]
 800ddac:	47a0      	blx	r4
 800ddae:	4603      	mov	r3, r0
}
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	371c      	adds	r7, #28
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	bd90      	pop	{r4, r7, pc}

0800ddb8 <OV5640_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_WriteRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800ddb8:	b590      	push	{r4, r7, lr}
 800ddba:	b087      	sub	sp, #28
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	60f8      	str	r0, [r7, #12]
 800ddc0:	607a      	str	r2, [r7, #4]
 800ddc2:	461a      	mov	r2, r3
 800ddc4:	460b      	mov	r3, r1
 800ddc6:	817b      	strh	r3, [r7, #10]
 800ddc8:	4613      	mov	r3, r2
 800ddca:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800ddd0:	697b      	ldr	r3, [r7, #20]
 800ddd2:	68dc      	ldr	r4, [r3, #12]
 800ddd4:	697b      	ldr	r3, [r7, #20]
 800ddd6:	8918      	ldrh	r0, [r3, #8]
 800ddd8:	893b      	ldrh	r3, [r7, #8]
 800ddda:	8979      	ldrh	r1, [r7, #10]
 800dddc:	687a      	ldr	r2, [r7, #4]
 800ddde:	47a0      	blx	r4
 800dde0:	4603      	mov	r3, r0
}
 800dde2:	4618      	mov	r0, r3
 800dde4:	371c      	adds	r7, #28
 800dde6:	46bd      	mov	sp, r7
 800dde8:	bd90      	pop	{r4, r7, pc}

0800ddea <ov5640_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read
  * @retval Component status
  */
int32_t ov5640_read_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 800ddea:	b590      	push	{r4, r7, lr}
 800ddec:	b085      	sub	sp, #20
 800ddee:	af00      	add	r7, sp, #0
 800ddf0:	60f8      	str	r0, [r7, #12]
 800ddf2:	607a      	str	r2, [r7, #4]
 800ddf4:	461a      	mov	r2, r3
 800ddf6:	460b      	mov	r3, r1
 800ddf8:	817b      	strh	r3, [r7, #10]
 800ddfa:	4613      	mov	r3, r2
 800ddfc:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	685c      	ldr	r4, [r3, #4]
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	6898      	ldr	r0, [r3, #8]
 800de06:	893b      	ldrh	r3, [r7, #8]
 800de08:	8979      	ldrh	r1, [r7, #10]
 800de0a:	687a      	ldr	r2, [r7, #4]
 800de0c:	47a0      	blx	r4
 800de0e:	4603      	mov	r3, r0
}
 800de10:	4618      	mov	r0, r3
 800de12:	3714      	adds	r7, #20
 800de14:	46bd      	mov	sp, r7
 800de16:	bd90      	pop	{r4, r7, pc}

0800de18 <ov5640_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t ov5640_write_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 800de18:	b590      	push	{r4, r7, lr}
 800de1a:	b085      	sub	sp, #20
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	60f8      	str	r0, [r7, #12]
 800de20:	607a      	str	r2, [r7, #4]
 800de22:	461a      	mov	r2, r3
 800de24:	460b      	mov	r3, r1
 800de26:	817b      	strh	r3, [r7, #10]
 800de28:	4613      	mov	r3, r2
 800de2a:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	681c      	ldr	r4, [r3, #0]
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	6898      	ldr	r0, [r3, #8]
 800de34:	893b      	ldrh	r3, [r7, #8]
 800de36:	8979      	ldrh	r1, [r7, #10]
 800de38:	687a      	ldr	r2, [r7, #4]
 800de3a:	47a0      	blx	r4
 800de3c:	4603      	mov	r3, r0
}
 800de3e:	4618      	mov	r0, r3
 800de40:	3714      	adds	r7, #20
 800de42:	46bd      	mov	sp, r7
 800de44:	bd90      	pop	{r4, r7, pc}
	...

0800de48 <VEML3235_RegisterBusIO>:
  * @param pObj    VEML3235 context object.
  * @param pIO     BSP IO struct.
  * @retval VEML3235 status
  */
int32_t VEML3235_RegisterBusIO(VEML3235_Object_t *pObj, VEML3235_IO_t *pIO)
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b084      	sub	sp, #16
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
 800de50:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d103      	bne.n	800de60 <VEML3235_RegisterBusIO+0x18>
  {
    ret = VEML3235_ERROR;
 800de58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800de5c:	60fb      	str	r3, [r7, #12]
 800de5e:	e034      	b.n	800deca <VEML3235_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init          = pIO->Init;
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	681a      	ldr	r2, [r3, #0]
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit        = pIO->DeInit;
 800de68:	683b      	ldr	r3, [r7, #0]
 800de6a:	685a      	ldr	r2, [r3, #4]
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	605a      	str	r2, [r3, #4]
    pObj->IO.ReadAddress   = pIO->ReadAddress;
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	891a      	ldrh	r2, [r3, #8]
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteAddress  = pIO->WriteAddress;
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	895a      	ldrh	r2, [r3, #10]
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	815a      	strh	r2, [r3, #10]
    pObj->IO.IsReady       = pIO->IsReady;
 800de80:	683b      	ldr	r3, [r7, #0]
 800de82:	68da      	ldr	r2, [r3, #12]
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	60da      	str	r2, [r3, #12]
    pObj->IO.WriteReg      = pIO->WriteReg;
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	691a      	ldr	r2, [r3, #16]
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg       = pIO->ReadReg;
 800de90:	683b      	ldr	r3, [r7, #0]
 800de92:	695a      	ldr	r2, [r3, #20]
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick       = pIO->GetTick;
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	699a      	ldr	r2, [r3, #24]
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.ReadReg  = VEML3235_ReadRegWrap;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	4a0c      	ldr	r2, [pc, #48]	; (800ded4 <VEML3235_RegisterBusIO+0x8c>)
 800dea4:	621a      	str	r2, [r3, #32]
    pObj->Ctx.WriteReg = VEML3235_WriteRegWrap;
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	4a0b      	ldr	r2, [pc, #44]	; (800ded8 <VEML3235_RegisterBusIO+0x90>)
 800deaa:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	687a      	ldr	r2, [r7, #4]
 800deb0:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d004      	beq.n	800dec4 <VEML3235_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	4798      	blx	r3
 800dec0:	60f8      	str	r0, [r7, #12]
 800dec2:	e002      	b.n	800deca <VEML3235_RegisterBusIO+0x82>
    }
    else
    {
      ret = VEML3235_ERROR;
 800dec4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dec8:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800deca:	68fb      	ldr	r3, [r7, #12]
}
 800decc:	4618      	mov	r0, r3
 800dece:	3710      	adds	r7, #16
 800ded0:	46bd      	mov	sp, r7
 800ded2:	bd80      	pop	{r7, pc}
 800ded4:	0800e3c5 	.word	0x0800e3c5
 800ded8:	0800e3f7 	.word	0x0800e3f7

0800dedc <VEML3235_Init>:
  * @brief Initializes the VEML3235 light sensor.
  * @param pObj    VEML3235 context object.
  * @retval VEML3235 status
  */
int32_t VEML3235_Init(VEML3235_Object_t *pObj)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b084      	sub	sp, #16
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
  int32_t ret = VEML3235_OK;
 800dee4:	2300      	movs	r3, #0
 800dee6:	60fb      	str	r3, [r7, #12]
  if (pObj == NULL)
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d102      	bne.n	800def4 <VEML3235_Init+0x18>
  {
    ret = VEML3235_INVALID_PARAM;
 800deee:	f06f 0301 	mvn.w	r3, #1
 800def2:	60fb      	str	r3, [r7, #12]
  }
  if (pObj->IsInitialized == 0U)
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800defa:	2b00      	cmp	r3, #0
 800defc:	d115      	bne.n	800df2a <VEML3235_Init+0x4e>
  {
    if (VEML3235_Pwr_On(pObj) < 0)
 800defe:	6878      	ldr	r0, [r7, #4]
 800df00:	f000 faca 	bl	800e498 <VEML3235_Pwr_On>
 800df04:	4603      	mov	r3, r0
 800df06:	2b00      	cmp	r3, #0
 800df08:	da03      	bge.n	800df12 <VEML3235_Init+0x36>
    {
      ret = VEML3235_ERROR;
 800df0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800df0e:	60fb      	str	r3, [r7, #12]
 800df10:	e00b      	b.n	800df2a <VEML3235_Init+0x4e>
    }
    else
    {
      pObj->IsInitialized = 1;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	2201      	movs	r2, #1
 800df16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
      pObj->IsContinuous = 1;
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	2201      	movs	r2, #1
 800df1e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      pObj->IsStarted = 1;
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	2201      	movs	r2, #1
 800df26:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    }
  }
  return ret;
 800df2a:	68fb      	ldr	r3, [r7, #12]
}
 800df2c:	4618      	mov	r0, r3
 800df2e:	3710      	adds	r7, #16
 800df30:	46bd      	mov	sp, r7
 800df32:	bd80      	pop	{r7, pc}

0800df34 <VEML3235_DeInit>:
  * @brief Deinitializes the VEML3235 light sensor.
  * @param pObj    VEML3235 context object.
  * @retval VEML3235 status
  */
int32_t VEML3235_DeInit(VEML3235_Object_t *pObj)
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b084      	sub	sp, #16
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
  int32_t ret = VEML3235_OK;
 800df3c:	2300      	movs	r3, #0
 800df3e:	60fb      	str	r3, [r7, #12]
  if (pObj == NULL)
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d102      	bne.n	800df4c <VEML3235_DeInit+0x18>
  {
    ret = VEML3235_INVALID_PARAM;
 800df46:	f06f 0301 	mvn.w	r3, #1
 800df4a:	60fb      	str	r3, [r7, #12]
  }
  if (pObj->IsInitialized == 1U)
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df52:	2b01      	cmp	r3, #1
 800df54:	d10d      	bne.n	800df72 <VEML3235_DeInit+0x3e>
  {
    if (VEML3235_Shutdown(pObj) < 0)
 800df56:	6878      	ldr	r0, [r7, #4]
 800df58:	f000 fa66 	bl	800e428 <VEML3235_Shutdown>
 800df5c:	4603      	mov	r3, r0
 800df5e:	2b00      	cmp	r3, #0
 800df60:	da03      	bge.n	800df6a <VEML3235_DeInit+0x36>
    {
      ret = VEML3235_ERROR;
 800df62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800df66:	60fb      	str	r3, [r7, #12]
 800df68:	e003      	b.n	800df72 <VEML3235_DeInit+0x3e>
    }
    else
    {
      pObj->IsInitialized = 0;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	2200      	movs	r2, #0
 800df6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }
  }
  return ret;
 800df72:	68fb      	ldr	r3, [r7, #12]
}
 800df74:	4618      	mov	r0, r3
 800df76:	3710      	adds	r7, #16
 800df78:	46bd      	mov	sp, r7
 800df7a:	bd80      	pop	{r7, pc}

0800df7c <VEML3235_ReadID>:
  * @param pObj    VEML3235 context object.
  * @param pId    Pointer to the device ID.
  * @retval VEML3235 status
  */
int32_t VEML3235_ReadID(VEML3235_Object_t *pObj, uint32_t *pId)
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b084      	sub	sp, #16
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
 800df84:	6039      	str	r1, [r7, #0]
  int32_t ret;
  if (pObj == NULL)
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d103      	bne.n	800df94 <VEML3235_ReadID+0x18>
  {
    ret = VEML3235_INVALID_PARAM;
 800df8c:	f06f 0301 	mvn.w	r3, #1
 800df90:	60fb      	str	r3, [r7, #12]
 800df92:	e011      	b.n	800dfb8 <VEML3235_ReadID+0x3c>
  }
  else if (pObj->IO.IsReady(VEML3235_I2C_READ_ADD, 20) != 0U)
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	68db      	ldr	r3, [r3, #12]
 800df98:	2114      	movs	r1, #20
 800df9a:	2021      	movs	r0, #33	; 0x21
 800df9c:	4798      	blx	r3
 800df9e:	4603      	mov	r3, r0
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d003      	beq.n	800dfac <VEML3235_ReadID+0x30>
  {
    ret = VEML3235_ERROR;
 800dfa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dfa8:	60fb      	str	r3, [r7, #12]
 800dfaa:	e005      	b.n	800dfb8 <VEML3235_ReadID+0x3c>
  }
  else
  {
    /* softowre ID defined */
    *pId = VEML3235_ID;
 800dfac:	683b      	ldr	r3, [r7, #0]
 800dfae:	f243 2235 	movw	r2, #12853	; 0x3235
 800dfb2:	601a      	str	r2, [r3, #0]
    ret = VEML3235_OK;
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800dfb8:	68fb      	ldr	r3, [r7, #12]
}
 800dfba:	4618      	mov	r0, r3
 800dfbc:	3710      	adds	r7, #16
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	bd80      	pop	{r7, pc}

0800dfc2 <VEML3235_GetCapabilities>:
  * @param pObj    VEML3235 context object.
  * @param pCapabilities    Pointer to the VEML3235 capabilities.
  * @retval VEML3235 status
  */
int32_t VEML3235_GetCapabilities(VEML3235_Object_t *pObj, VEML3235_Capabilities_t *pCapabilities)
{
 800dfc2:	b480      	push	{r7}
 800dfc4:	b085      	sub	sp, #20
 800dfc6:	af00      	add	r7, sp, #0
 800dfc8:	6078      	str	r0, [r7, #4]
 800dfca:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj != NULL) && (pCapabilities != NULL))
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d00e      	beq.n	800dff0 <VEML3235_GetCapabilities+0x2e>
 800dfd2:	683b      	ldr	r3, [r7, #0]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d00b      	beq.n	800dff0 <VEML3235_GetCapabilities+0x2e>
  {
    pCapabilities->NumberOfChannels = VEML3235_MAX_CHANNELS;
 800dfd8:	683b      	ldr	r3, [r7, #0]
 800dfda:	2202      	movs	r2, #2
 800dfdc:	701a      	strb	r2, [r3, #0]
    pCapabilities->FlickerDetection = 0U;
 800dfde:	683b      	ldr	r3, [r7, #0]
 800dfe0:	2200      	movs	r2, #0
 800dfe2:	705a      	strb	r2, [r3, #1]
    pCapabilities->Autogain = 0U;
 800dfe4:	683b      	ldr	r3, [r7, #0]
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	709a      	strb	r2, [r3, #2]

    ret = VEML3235_OK;
 800dfea:	2300      	movs	r3, #0
 800dfec:	60fb      	str	r3, [r7, #12]
 800dfee:	e002      	b.n	800dff6 <VEML3235_GetCapabilities+0x34>
  }
  else
  {
    ret = VEML3235_INVALID_PARAM;
 800dff0:	f06f 0301 	mvn.w	r3, #1
 800dff4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800dff6:	68fb      	ldr	r3, [r7, #12]
}
 800dff8:	4618      	mov	r0, r3
 800dffa:	3714      	adds	r7, #20
 800dffc:	46bd      	mov	sp, r7
 800dffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e002:	4770      	bx	lr

0800e004 <VEML3235_SetExposureTime>:
  * @param ExposureTime    New exposure time to be applied.
  * @warning This function must not be called when a capture is ongoing.
  * @retval VEML3235 status
  */
int32_t VEML3235_SetExposureTime(VEML3235_Object_t *pObj, uint32_t ExposureTime)
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b084      	sub	sp, #16
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
 800e00c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t config = 0;
 800e00e:	2300      	movs	r3, #0
 800e010:	817b      	strh	r3, [r7, #10]
  if (pObj == NULL)
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d103      	bne.n	800e020 <VEML3235_SetExposureTime+0x1c>
  {
    ret = VEML3235_INVALID_PARAM;
 800e018:	f06f 0301 	mvn.w	r3, #1
 800e01c:	60fb      	str	r3, [r7, #12]
 800e01e:	e02b      	b.n	800e078 <VEML3235_SetExposureTime+0x74>
  }
  else if (veml3235_read_reg(&pObj->Ctx, VEML3235_REG_ALS_CONF, &config, 2) != 0)
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	f103 001c 	add.w	r0, r3, #28
 800e026:	f107 020a 	add.w	r2, r7, #10
 800e02a:	2302      	movs	r3, #2
 800e02c:	2100      	movs	r1, #0
 800e02e:	f000 fa89 	bl	800e544 <veml3235_read_reg>
 800e032:	4603      	mov	r3, r0
 800e034:	2b00      	cmp	r3, #0
 800e036:	d003      	beq.n	800e040 <VEML3235_SetExposureTime+0x3c>
  {
    ret = VEML3235_ERROR;
 800e038:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e03c:	60fb      	str	r3, [r7, #12]
 800e03e:	e01b      	b.n	800e078 <VEML3235_SetExposureTime+0x74>
  }
  else
  {
    config &= ~VEML3235_CONF_IT_MASK;
 800e040:	897b      	ldrh	r3, [r7, #10]
 800e042:	f423 7370 	bic.w	r3, r3, #960	; 0x3c0
 800e046:	b29b      	uxth	r3, r3
 800e048:	817b      	strh	r3, [r7, #10]
    config |= (uint16_t)ExposureTime;
 800e04a:	683b      	ldr	r3, [r7, #0]
 800e04c:	b29a      	uxth	r2, r3
 800e04e:	897b      	ldrh	r3, [r7, #10]
 800e050:	4313      	orrs	r3, r2
 800e052:	b29b      	uxth	r3, r3
 800e054:	817b      	strh	r3, [r7, #10]
    ret = VEML3235_OK;
 800e056:	2300      	movs	r3, #0
 800e058:	60fb      	str	r3, [r7, #12]
    if (veml3235_write_reg(&pObj->Ctx, VEML3235_REG_ALS_CONF, &config, 2) != 0)
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	f103 001c 	add.w	r0, r3, #28
 800e060:	f107 020a 	add.w	r2, r7, #10
 800e064:	2302      	movs	r3, #2
 800e066:	2100      	movs	r1, #0
 800e068:	f000 fa84 	bl	800e574 <veml3235_write_reg>
 800e06c:	4603      	mov	r3, r0
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d002      	beq.n	800e078 <VEML3235_SetExposureTime+0x74>
    {
      ret = VEML3235_ERROR;
 800e072:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e076:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 800e078:	68fb      	ldr	r3, [r7, #12]
}
 800e07a:	4618      	mov	r0, r3
 800e07c:	3710      	adds	r7, #16
 800e07e:	46bd      	mov	sp, r7
 800e080:	bd80      	pop	{r7, pc}

0800e082 <VEML3235_GetExposureTime>:
  * @param pObj    VEML3235 context object.
  * @param pExposureTime    Pointer to the current exposure time value.
  * @retval VEML3235 status
  */
int32_t VEML3235_GetExposureTime(VEML3235_Object_t *pObj, uint32_t *pExposureTime)
{
 800e082:	b580      	push	{r7, lr}
 800e084:	b084      	sub	sp, #16
 800e086:	af00      	add	r7, sp, #0
 800e088:	6078      	str	r0, [r7, #4]
 800e08a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp = 0;
 800e08c:	2300      	movs	r3, #0
 800e08e:	817b      	strh	r3, [r7, #10]
  if (pObj == NULL)
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d103      	bne.n	800e09e <VEML3235_GetExposureTime+0x1c>
  {
    ret = VEML3235_INVALID_PARAM;
 800e096:	f06f 0301 	mvn.w	r3, #1
 800e09a:	60fb      	str	r3, [r7, #12]
 800e09c:	e016      	b.n	800e0cc <VEML3235_GetExposureTime+0x4a>
  }
  else if (veml3235_read_reg(&pObj->Ctx, VEML3235_REG_ALS_CONF, &tmp, 2) != 0)
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	f103 001c 	add.w	r0, r3, #28
 800e0a4:	f107 020a 	add.w	r2, r7, #10
 800e0a8:	2302      	movs	r3, #2
 800e0aa:	2100      	movs	r1, #0
 800e0ac:	f000 fa4a 	bl	800e544 <veml3235_read_reg>
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d003      	beq.n	800e0be <VEML3235_GetExposureTime+0x3c>
  {
    ret = VEML3235_ERROR ;
 800e0b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e0ba:	60fb      	str	r3, [r7, #12]
 800e0bc:	e006      	b.n	800e0cc <VEML3235_GetExposureTime+0x4a>
  }
  else
  {
    *pExposureTime = (tmp & VEML3235_CONF_IT_MASK);
 800e0be:	897b      	ldrh	r3, [r7, #10]
 800e0c0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	601a      	str	r2, [r3, #0]
    ret = VEML3235_OK;
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800e0cc:	68fb      	ldr	r3, [r7, #12]
}
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	3710      	adds	r7, #16
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bd80      	pop	{r7, pc}

0800e0d6 <VEML3235_SetGain>:
  * @param Channel  Device channel.
  * @param pGain    Pointer to the current gain value.
  * @retval VEML3235 status
  */
int32_t VEML3235_SetGain(VEML3235_Object_t *pObj, uint8_t Channel, uint32_t Gain)
{
 800e0d6:	b580      	push	{r7, lr}
 800e0d8:	b086      	sub	sp, #24
 800e0da:	af00      	add	r7, sp, #0
 800e0dc:	60f8      	str	r0, [r7, #12]
 800e0de:	460b      	mov	r3, r1
 800e0e0:	607a      	str	r2, [r7, #4]
 800e0e2:	72fb      	strb	r3, [r7, #11]
  int32_t ret;
  uint16_t config = 0;
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	827b      	strh	r3, [r7, #18]
  if ((pObj == NULL) || (Channel >= VEML3235_MAX_CHANNELS))
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d002      	beq.n	800e0f4 <VEML3235_SetGain+0x1e>
 800e0ee:	7afb      	ldrb	r3, [r7, #11]
 800e0f0:	2b01      	cmp	r3, #1
 800e0f2:	d903      	bls.n	800e0fc <VEML3235_SetGain+0x26>
  {
    ret = VEML3235_INVALID_PARAM;
 800e0f4:	f06f 0301 	mvn.w	r3, #1
 800e0f8:	617b      	str	r3, [r7, #20]
 800e0fa:	e02b      	b.n	800e154 <VEML3235_SetGain+0x7e>
  }
  else if (veml3235_read_reg(&pObj->Ctx, VEML3235_REG_ALS_CONF, &config, 2) != 0)
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	f103 001c 	add.w	r0, r3, #28
 800e102:	f107 0212 	add.w	r2, r7, #18
 800e106:	2302      	movs	r3, #2
 800e108:	2100      	movs	r1, #0
 800e10a:	f000 fa1b 	bl	800e544 <veml3235_read_reg>
 800e10e:	4603      	mov	r3, r0
 800e110:	2b00      	cmp	r3, #0
 800e112:	d003      	beq.n	800e11c <VEML3235_SetGain+0x46>
  {
    ret = VEML3235_ERROR;
 800e114:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e118:	617b      	str	r3, [r7, #20]
 800e11a:	e01b      	b.n	800e154 <VEML3235_SetGain+0x7e>
  }
  else
  {
    config &= (uint16_t) ~VEML3235_CONF_GAIN_4;
 800e11c:	8a7b      	ldrh	r3, [r7, #18]
 800e11e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800e122:	b29b      	uxth	r3, r3
 800e124:	827b      	strh	r3, [r7, #18]
    config |= (uint16_t)Gain;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	b29a      	uxth	r2, r3
 800e12a:	8a7b      	ldrh	r3, [r7, #18]
 800e12c:	4313      	orrs	r3, r2
 800e12e:	b29b      	uxth	r3, r3
 800e130:	827b      	strh	r3, [r7, #18]
    ret = VEML3235_OK;
 800e132:	2300      	movs	r3, #0
 800e134:	617b      	str	r3, [r7, #20]
    if (veml3235_write_reg(&pObj->Ctx, VEML3235_REG_ALS_CONF, &config, 2) != 0)
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	f103 001c 	add.w	r0, r3, #28
 800e13c:	f107 0212 	add.w	r2, r7, #18
 800e140:	2302      	movs	r3, #2
 800e142:	2100      	movs	r1, #0
 800e144:	f000 fa16 	bl	800e574 <veml3235_write_reg>
 800e148:	4603      	mov	r3, r0
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d002      	beq.n	800e154 <VEML3235_SetGain+0x7e>
    {
      ret = VEML3235_ERROR ;
 800e14e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e152:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 800e154:	697b      	ldr	r3, [r7, #20]
}
 800e156:	4618      	mov	r0, r3
 800e158:	3718      	adds	r7, #24
 800e15a:	46bd      	mov	sp, r7
 800e15c:	bd80      	pop	{r7, pc}

0800e15e <VEML3235_GetGain>:
  * @param Channel    Device channel.
  * @param pGain    Pointer to the current gain value.
  * @retval VEML3235 status
  */
int32_t VEML3235_GetGain(VEML3235_Object_t *pObj, uint8_t Channel, uint32_t *pGain)
{
 800e15e:	b580      	push	{r7, lr}
 800e160:	b086      	sub	sp, #24
 800e162:	af00      	add	r7, sp, #0
 800e164:	60f8      	str	r0, [r7, #12]
 800e166:	460b      	mov	r3, r1
 800e168:	607a      	str	r2, [r7, #4]
 800e16a:	72fb      	strb	r3, [r7, #11]
  int32_t ret;
  uint16_t tmp = 0x00U;
 800e16c:	2300      	movs	r3, #0
 800e16e:	827b      	strh	r3, [r7, #18]

  if ((pObj == NULL) || (Channel >= VEML3235_MAX_CHANNELS))
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d002      	beq.n	800e17c <VEML3235_GetGain+0x1e>
 800e176:	7afb      	ldrb	r3, [r7, #11]
 800e178:	2b01      	cmp	r3, #1
 800e17a:	d903      	bls.n	800e184 <VEML3235_GetGain+0x26>
  {
    ret = VEML3235_INVALID_PARAM;
 800e17c:	f06f 0301 	mvn.w	r3, #1
 800e180:	617b      	str	r3, [r7, #20]
 800e182:	e016      	b.n	800e1b2 <VEML3235_GetGain+0x54>
  }
  else if (veml3235_read_reg(&pObj->Ctx, VEML3235_REG_ALS_CONF, &tmp, 2) != 0)
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	f103 001c 	add.w	r0, r3, #28
 800e18a:	f107 0212 	add.w	r2, r7, #18
 800e18e:	2302      	movs	r3, #2
 800e190:	2100      	movs	r1, #0
 800e192:	f000 f9d7 	bl	800e544 <veml3235_read_reg>
 800e196:	4603      	mov	r3, r0
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d003      	beq.n	800e1a4 <VEML3235_GetGain+0x46>
  {
    ret = VEML3235_ERROR ;
 800e19c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e1a0:	617b      	str	r3, [r7, #20]
 800e1a2:	e006      	b.n	800e1b2 <VEML3235_GetGain+0x54>
  }
  else
  {
    *pGain = ((uint32_t)tmp & VEML3235_GAIN_MASK);
 800e1a4:	8a7b      	ldrh	r3, [r7, #18]
 800e1a6:	f403 52c0 	and.w	r2, r3, #6144	; 0x1800
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	601a      	str	r2, [r3, #0]
    ret = VEML3235_OK;
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800e1b2:	697b      	ldr	r3, [r7, #20]
}
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	3718      	adds	r7, #24
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	bd80      	pop	{r7, pc}

0800e1bc <VEML3235_SetInterMeasurementTime>:
  * @note This should be configured only when using the device in continuous mode.
  * @warning This function must not be called when a capture is ongoing.
  * @retval VEML3235 status
 */
int32_t VEML3235_SetInterMeasurementTime(VEML3235_Object_t *pObj, uint32_t InterMeasurementTime)
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b084      	sub	sp, #16
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
 800e1c4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t als_it;
  uint16_t config;
  if (pObj == NULL)
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d103      	bne.n	800e1d4 <VEML3235_SetInterMeasurementTime+0x18>
  {
    ret = VEML3235_INVALID_PARAM;
 800e1cc:	f06f 0301 	mvn.w	r3, #1
 800e1d0:	60fb      	str	r3, [r7, #12]
 800e1d2:	e030      	b.n	800e236 <VEML3235_SetInterMeasurementTime+0x7a>
  }
  else
  {
    als_it = (uint16_t)(InterMeasurementTime & 0x03U);
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	b29b      	uxth	r3, r3
 800e1d8:	f003 0303 	and.w	r3, r3, #3
 800e1dc:	817b      	strh	r3, [r7, #10]

    /* set the integration Time */
    if (veml3235_read_reg(&pObj->Ctx, VEML3235_REG_ALS_CONF, &config, 2) != 0)
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	f103 001c 	add.w	r0, r3, #28
 800e1e4:	f107 0208 	add.w	r2, r7, #8
 800e1e8:	2302      	movs	r3, #2
 800e1ea:	2100      	movs	r1, #0
 800e1ec:	f000 f9aa 	bl	800e544 <veml3235_read_reg>
 800e1f0:	4603      	mov	r3, r0
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d003      	beq.n	800e1fe <VEML3235_SetInterMeasurementTime+0x42>
    {
      ret = VEML3235_ERROR;
 800e1f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e1fa:	60fb      	str	r3, [r7, #12]
 800e1fc:	e01b      	b.n	800e236 <VEML3235_SetInterMeasurementTime+0x7a>
    }
    else
    {
      config &= ~VEML3235_CONF_IT_MASK;
 800e1fe:	893b      	ldrh	r3, [r7, #8]
 800e200:	f423 7370 	bic.w	r3, r3, #960	; 0x3c0
 800e204:	b29b      	uxth	r3, r3
 800e206:	813b      	strh	r3, [r7, #8]
      config |= (uint16_t)als_it;
 800e208:	893a      	ldrh	r2, [r7, #8]
 800e20a:	897b      	ldrh	r3, [r7, #10]
 800e20c:	4313      	orrs	r3, r2
 800e20e:	b29b      	uxth	r3, r3
 800e210:	813b      	strh	r3, [r7, #8]
      if (veml3235_write_reg(&pObj->Ctx, VEML3235_REG_ALS_CONF, &config, 2) != 0)
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	f103 001c 	add.w	r0, r3, #28
 800e218:	f107 0208 	add.w	r2, r7, #8
 800e21c:	2302      	movs	r3, #2
 800e21e:	2100      	movs	r1, #0
 800e220:	f000 f9a8 	bl	800e574 <veml3235_write_reg>
 800e224:	4603      	mov	r3, r0
 800e226:	2b00      	cmp	r3, #0
 800e228:	d003      	beq.n	800e232 <VEML3235_SetInterMeasurementTime+0x76>
      {
        ret = VEML3235_ERROR;
 800e22a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e22e:	60fb      	str	r3, [r7, #12]
 800e230:	e001      	b.n	800e236 <VEML3235_SetInterMeasurementTime+0x7a>
      }
      else
      {
        ret = VEML3235_OK;
 800e232:	2300      	movs	r3, #0
 800e234:	60fb      	str	r3, [r7, #12]
      }
    }
  }
  return ret;
 800e236:	68fb      	ldr	r3, [r7, #12]
}
 800e238:	4618      	mov	r0, r3
 800e23a:	3710      	adds	r7, #16
 800e23c:	46bd      	mov	sp, r7
 800e23e:	bd80      	pop	{r7, pc}

0800e240 <VEML3235_GetInterMeasurementTime>:
  * @param pObj                     VEML3235 context object.
  * @param pInterMeasurementTime    Pointer to the current inter-measurement time expressed in microseconds.
  * @retval VEML3235 status
  */
int32_t VEML3235_GetInterMeasurementTime(VEML3235_Object_t *pObj, uint32_t *pInterMeasurementTime)
{
 800e240:	b580      	push	{r7, lr}
 800e242:	b086      	sub	sp, #24
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]
 800e248:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint32_t tmp = 0;
 800e24a:	2300      	movs	r3, #0
 800e24c:	60fb      	str	r3, [r7, #12]
  uint32_t als_it = 0;
 800e24e:	2300      	movs	r3, #0
 800e250:	613b      	str	r3, [r7, #16]
  if (pObj == NULL)
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d103      	bne.n	800e260 <VEML3235_GetInterMeasurementTime+0x20>
  {
    ret = VEML3235_INVALID_PARAM;
 800e258:	f06f 0301 	mvn.w	r3, #1
 800e25c:	617b      	str	r3, [r7, #20]
 800e25e:	e014      	b.n	800e28a <VEML3235_GetInterMeasurementTime+0x4a>
  }
  else if (veml3235_read_reg(&pObj->Ctx, VEML3235_REG_ALS_CONF, (uint16_t *)tmp, 2) != 0)
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	f103 001c 	add.w	r0, r3, #28
 800e266:	68fa      	ldr	r2, [r7, #12]
 800e268:	2302      	movs	r3, #2
 800e26a:	2100      	movs	r1, #0
 800e26c:	f000 f96a 	bl	800e544 <veml3235_read_reg>
 800e270:	4603      	mov	r3, r0
 800e272:	2b00      	cmp	r3, #0
 800e274:	d003      	beq.n	800e27e <VEML3235_GetInterMeasurementTime+0x3e>
  {
    ret = VEML3235_ERROR ;
 800e276:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e27a:	617b      	str	r3, [r7, #20]
 800e27c:	e005      	b.n	800e28a <VEML3235_GetInterMeasurementTime+0x4a>
  }
  else
  {
    als_it = (tmp & VEML3235_CONF_IT_MASK);
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	f403 7370 	and.w	r3, r3, #960	; 0x3c0
 800e284:	613b      	str	r3, [r7, #16]
    ret = VEML3235_OK ;
 800e286:	2300      	movs	r3, #0
 800e288:	617b      	str	r3, [r7, #20]
  }

  *pInterMeasurementTime = als_it;
 800e28a:	683b      	ldr	r3, [r7, #0]
 800e28c:	693a      	ldr	r2, [r7, #16]
 800e28e:	601a      	str	r2, [r3, #0]
  return ret;
 800e290:	697b      	ldr	r3, [r7, #20]
}
 800e292:	4618      	mov	r0, r3
 800e294:	3718      	adds	r7, #24
 800e296:	46bd      	mov	sp, r7
 800e298:	bd80      	pop	{r7, pc}

0800e29a <VEML3235_Start>:
  * @param pObj    VEML3235 context object.
  * @param Mode    Measurement mode (continuous)
  * @retval VEML3235 status
  */
int32_t VEML3235_Start(VEML3235_Object_t *pObj, uint32_t Mode)
{
 800e29a:	b580      	push	{r7, lr}
 800e29c:	b084      	sub	sp, #16
 800e29e:	af00      	add	r7, sp, #0
 800e2a0:	6078      	str	r0, [r7, #4]
 800e2a2:	6039      	str	r1, [r7, #0]
  int32_t ret;
  if ((pObj == NULL) || (Mode != VEML3235_MODE_CONTINUOUS))
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d002      	beq.n	800e2b0 <VEML3235_Start+0x16>
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	2b01      	cmp	r3, #1
 800e2ae:	d003      	beq.n	800e2b8 <VEML3235_Start+0x1e>
  {
    ret = VEML3235_INVALID_PARAM;
 800e2b0:	f06f 0301 	mvn.w	r3, #1
 800e2b4:	60fb      	str	r3, [r7, #12]
 800e2b6:	e00a      	b.n	800e2ce <VEML3235_Start+0x34>
  }
  else
  {

    ret = VEML3235_Pwr_On(pObj);
 800e2b8:	6878      	ldr	r0, [r7, #4]
 800e2ba:	f000 f8ed 	bl	800e498 <VEML3235_Pwr_On>
 800e2be:	60f8      	str	r0, [r7, #12]
    if (ret == VEML3235_OK)
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d103      	bne.n	800e2ce <VEML3235_Start+0x34>
    {
      pObj->IsStarted = 1;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	2201      	movs	r2, #1
 800e2ca:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    }

  }
  return ret;
 800e2ce:	68fb      	ldr	r3, [r7, #12]
}
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	3710      	adds	r7, #16
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	bd80      	pop	{r7, pc}

0800e2d8 <VEML3235_Stop>:
  * @brief Stop the measurement on all channels.
  * @param pObj    VEML3235 context object.
  * @retval VEML3235 status
  */
int32_t VEML3235_Stop(VEML3235_Object_t *pObj)
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b084      	sub	sp, #16
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
  int32_t ret;
  if (pObj == NULL)
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d103      	bne.n	800e2ee <VEML3235_Stop+0x16>
  {
    ret = VEML3235_INVALID_PARAM;
 800e2e6:	f06f 0301 	mvn.w	r3, #1
 800e2ea:	60fb      	str	r3, [r7, #12]
 800e2ec:	e00a      	b.n	800e304 <VEML3235_Stop+0x2c>
  }
  else
  {
    ret = VEML3235_Shutdown(pObj);
 800e2ee:	6878      	ldr	r0, [r7, #4]
 800e2f0:	f000 f89a 	bl	800e428 <VEML3235_Shutdown>
 800e2f4:	60f8      	str	r0, [r7, #12]
    if (ret == VEML3235_OK)
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d103      	bne.n	800e304 <VEML3235_Stop+0x2c>
    {
      pObj->IsStarted = 0;
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	2200      	movs	r2, #0
 800e300:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    }
  }
  return ret;
 800e304:	68fb      	ldr	r3, [r7, #12]
}
 800e306:	4618      	mov	r0, r3
 800e308:	3710      	adds	r7, #16
 800e30a:	46bd      	mov	sp, r7
 800e30c:	bd80      	pop	{r7, pc}

0800e30e <VEML3235_StartFlicker>:
  * @brief Stop flicker capture.
  * @param pObj     VEML3235 context object.
  * @retval BSP status
  */
int32_t VEML3235_StartFlicker(VEML3235_Object_t *pObj, uint8_t Channel, uint8_t OutputMode)
{
 800e30e:	b480      	push	{r7}
 800e310:	b083      	sub	sp, #12
 800e312:	af00      	add	r7, sp, #0
 800e314:	6078      	str	r0, [r7, #4]
 800e316:	460b      	mov	r3, r1
 800e318:	70fb      	strb	r3, [r7, #3]
 800e31a:	4613      	mov	r3, r2
 800e31c:	70bb      	strb	r3, [r7, #2]
  (void)(pObj);
  (void)(Channel);
  (void)(OutputMode);

  /* Feature not supported */
  return VEML3235_ERROR;
 800e31e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800e322:	4618      	mov	r0, r3
 800e324:	370c      	adds	r7, #12
 800e326:	46bd      	mov	sp, r7
 800e328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32c:	4770      	bx	lr

0800e32e <VEML3235_StopFlicker>:
  * @brief Stop flicker capture.
  * @param pObj     VEML3235 context object.
  * @retval BSP status
  */
int32_t VEML3235_StopFlicker(VEML3235_Object_t *pObj)
{
 800e32e:	b480      	push	{r7}
 800e330:	b083      	sub	sp, #12
 800e332:	af00      	add	r7, sp, #0
 800e334:	6078      	str	r0, [r7, #4]
  (void)(pObj);

  /* Feature not supported */
  return VEML3235_ERROR;
 800e336:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800e33a:	4618      	mov	r0, r3
 800e33c:	370c      	adds	r7, #12
 800e33e:	46bd      	mov	sp, r7
 800e340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e344:	4770      	bx	lr

0800e346 <VEML3235_GetValues>:
  * @param pValues    Pointer to an array which will be filled with the values of each channel.
  * @note The array size must match the number of channels of the device (4 bytes for 2 channels).
  * @retval VEML3235 status
  */
int32_t VEML3235_GetValues(VEML3235_Object_t *pObj, uint32_t *pValues)
{
 800e346:	b580      	push	{r7, lr}
 800e348:	b084      	sub	sp, #16
 800e34a:	af00      	add	r7, sp, #0
 800e34c:	6078      	str	r0, [r7, #4]
 800e34e:	6039      	str	r1, [r7, #0]
  int32_t ret = VEML3235_OK;
 800e350:	2300      	movs	r3, #0
 800e352:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d103      	bne.n	800e362 <VEML3235_GetValues+0x1c>
  {
    ret = VEML3235_INVALID_PARAM;
 800e35a:	f06f 0301 	mvn.w	r3, #1
 800e35e:	60fb      	str	r3, [r7, #12]
 800e360:	e01d      	b.n	800e39e <VEML3235_GetValues+0x58>
  }
  /* Derogation MISRAC2012-Rule-11.3 */
  else if (veml3235_read_reg(&pObj->Ctx, VEML3235_REG_ALS, (uint16_t *)&pValues[0], 2) != 0)
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	f103 001c 	add.w	r0, r3, #28
 800e368:	2302      	movs	r3, #2
 800e36a:	683a      	ldr	r2, [r7, #0]
 800e36c:	2105      	movs	r1, #5
 800e36e:	f000 f8e9 	bl	800e544 <veml3235_read_reg>
 800e372:	4603      	mov	r3, r0
 800e374:	2b00      	cmp	r3, #0
 800e376:	d003      	beq.n	800e380 <VEML3235_GetValues+0x3a>
  {
    ret = VEML3235_ERROR ;
 800e378:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e37c:	60fb      	str	r3, [r7, #12]
 800e37e:	e00e      	b.n	800e39e <VEML3235_GetValues+0x58>
  }
  /* Derogation MISRAC2012-Rule-11.3 */
  else if (veml3235_read_reg(&pObj->Ctx, VEML3235_REG_WHITE, (uint16_t *)&pValues[1], 2) != 0)
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	f103 001c 	add.w	r0, r3, #28
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	1d1a      	adds	r2, r3, #4
 800e38a:	2302      	movs	r3, #2
 800e38c:	2104      	movs	r1, #4
 800e38e:	f000 f8d9 	bl	800e544 <veml3235_read_reg>
 800e392:	4603      	mov	r3, r0
 800e394:	2b00      	cmp	r3, #0
 800e396:	d002      	beq.n	800e39e <VEML3235_GetValues+0x58>
  {
    ret = VEML3235_ERROR ;
 800e398:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e39c:	60fb      	str	r3, [r7, #12]
  }
  else
  {
    /* nothing to do */
  }
  return ret;
 800e39e:	68fb      	ldr	r3, [r7, #12]
}
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	3710      	adds	r7, #16
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	bd80      	pop	{r7, pc}

0800e3a8 <VEML3235_SetControlMode>:
  * @param Value    Value to be applied.
  * @warning This function must not be called when a capture is ongoing.
  * @retval VEML3235 status
  */
int32_t VEML3235_SetControlMode(VEML3235_Object_t *pObj, uint32_t ControlMode, uint32_t Value)
{
 800e3a8:	b480      	push	{r7}
 800e3aa:	b085      	sub	sp, #20
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	60f8      	str	r0, [r7, #12]
 800e3b0:	60b9      	str	r1, [r7, #8]
 800e3b2:	607a      	str	r2, [r7, #4]
  (void)(pObj);
  (void)(ControlMode);
  (void)(Value);

  /* Feature not supported */
  return VEML3235_ERROR;
 800e3b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	3714      	adds	r7, #20
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c2:	4770      	bx	lr

0800e3c4 <VEML3235_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t VEML3235_ReadRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800e3c4:	b590      	push	{r4, r7, lr}
 800e3c6:	b087      	sub	sp, #28
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	60f8      	str	r0, [r7, #12]
 800e3cc:	607a      	str	r2, [r7, #4]
 800e3ce:	461a      	mov	r2, r3
 800e3d0:	460b      	mov	r3, r1
 800e3d2:	817b      	strh	r3, [r7, #10]
 800e3d4:	4613      	mov	r3, r2
 800e3d6:	813b      	strh	r3, [r7, #8]
  VEML3235_Object_t *pObj = (VEML3235_Object_t *)handle; /* Derogation MISRAC2012-Rule-11.5 */
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.ReadAddress, Reg, pData, Length);
 800e3dc:	697b      	ldr	r3, [r7, #20]
 800e3de:	695c      	ldr	r4, [r3, #20]
 800e3e0:	697b      	ldr	r3, [r7, #20]
 800e3e2:	8918      	ldrh	r0, [r3, #8]
 800e3e4:	893b      	ldrh	r3, [r7, #8]
 800e3e6:	8979      	ldrh	r1, [r7, #10]
 800e3e8:	687a      	ldr	r2, [r7, #4]
 800e3ea:	47a0      	blx	r4
 800e3ec:	4603      	mov	r3, r0
}
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	371c      	adds	r7, #28
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	bd90      	pop	{r4, r7, pc}

0800e3f6 <VEML3235_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t VEML3235_WriteRegWrap(void *handle, uint16_t Reg, uint8_t *Data, uint16_t Length)
{
 800e3f6:	b590      	push	{r4, r7, lr}
 800e3f8:	b087      	sub	sp, #28
 800e3fa:	af00      	add	r7, sp, #0
 800e3fc:	60f8      	str	r0, [r7, #12]
 800e3fe:	607a      	str	r2, [r7, #4]
 800e400:	461a      	mov	r2, r3
 800e402:	460b      	mov	r3, r1
 800e404:	817b      	strh	r3, [r7, #10]
 800e406:	4613      	mov	r3, r2
 800e408:	813b      	strh	r3, [r7, #8]
  VEML3235_Object_t *pObj = (VEML3235_Object_t *)handle; /* Derogation MISRAC2012-Rule-11.5 */
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.WriteAddress, Reg, Data, Length);
 800e40e:	697b      	ldr	r3, [r7, #20]
 800e410:	691c      	ldr	r4, [r3, #16]
 800e412:	697b      	ldr	r3, [r7, #20]
 800e414:	8958      	ldrh	r0, [r3, #10]
 800e416:	893b      	ldrh	r3, [r7, #8]
 800e418:	8979      	ldrh	r1, [r7, #10]
 800e41a:	687a      	ldr	r2, [r7, #4]
 800e41c:	47a0      	blx	r4
 800e41e:	4603      	mov	r3, r0
}
 800e420:	4618      	mov	r0, r3
 800e422:	371c      	adds	r7, #28
 800e424:	46bd      	mov	sp, r7
 800e426:	bd90      	pop	{r4, r7, pc}

0800e428 <VEML3235_Shutdown>:
  * @brief Shutdown the VEML3235.
  * @param pObj  VEML3235 context object.
  * @retval      VEML3235 status
  */
static int32_t VEML3235_Shutdown(VEML3235_Object_t *pObj)
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	b084      	sub	sp, #16
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint16_t config = 0;
 800e430:	2300      	movs	r3, #0
 800e432:	817b      	strh	r3, [r7, #10]
  if (pObj == NULL)
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d103      	bne.n	800e442 <VEML3235_Shutdown+0x1a>
  {
    ret = VEML3235_INVALID_PARAM;
 800e43a:	f06f 0301 	mvn.w	r3, #1
 800e43e:	60fb      	str	r3, [r7, #12]
 800e440:	e025      	b.n	800e48e <VEML3235_Shutdown+0x66>
  }
  else if (veml3235_read_reg(&pObj->Ctx, VEML3235_REG_ALS_CONF, &config, 2) != 0)
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	f103 001c 	add.w	r0, r3, #28
 800e448:	f107 020a 	add.w	r2, r7, #10
 800e44c:	2302      	movs	r3, #2
 800e44e:	2100      	movs	r1, #0
 800e450:	f000 f878 	bl	800e544 <veml3235_read_reg>
 800e454:	4603      	mov	r3, r0
 800e456:	2b00      	cmp	r3, #0
 800e458:	d003      	beq.n	800e462 <VEML3235_Shutdown+0x3a>
  {
    ret = VEML3235_ERROR;
 800e45a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e45e:	60fb      	str	r3, [r7, #12]
 800e460:	e015      	b.n	800e48e <VEML3235_Shutdown+0x66>
  }
  else
  {
    config |= VEML3235_CONF_SHUTDOWN0;
 800e462:	897b      	ldrh	r3, [r7, #10]
 800e464:	f043 0301 	orr.w	r3, r3, #1
 800e468:	b29b      	uxth	r3, r3
 800e46a:	817b      	strh	r3, [r7, #10]
    ret = VEML3235_OK ;
 800e46c:	2300      	movs	r3, #0
 800e46e:	60fb      	str	r3, [r7, #12]
    if (veml3235_write_reg(&pObj->Ctx, VEML3235_REG_ALS_CONF, &config, 2) != 0)
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	f103 001c 	add.w	r0, r3, #28
 800e476:	f107 020a 	add.w	r2, r7, #10
 800e47a:	2302      	movs	r3, #2
 800e47c:	2100      	movs	r1, #0
 800e47e:	f000 f879 	bl	800e574 <veml3235_write_reg>
 800e482:	4603      	mov	r3, r0
 800e484:	2b00      	cmp	r3, #0
 800e486:	d002      	beq.n	800e48e <VEML3235_Shutdown+0x66>
    {
      ret = VEML3235_ERROR;
 800e488:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e48c:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 800e48e:	68fb      	ldr	r3, [r7, #12]
}
 800e490:	4618      	mov	r0, r3
 800e492:	3710      	adds	r7, #16
 800e494:	46bd      	mov	sp, r7
 800e496:	bd80      	pop	{r7, pc}

0800e498 <VEML3235_Pwr_On>:
  * @brief Set Power ON the VEML3235.
  * @param pObj  VEML3235 context object.
  * @retval      VEML3235 status
  */
static int32_t VEML3235_Pwr_On(VEML3235_Object_t *pObj)
{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b084      	sub	sp, #16
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint16_t config = 0;
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	817b      	strh	r3, [r7, #10]
  if (pObj == NULL)
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d103      	bne.n	800e4b2 <VEML3235_Pwr_On+0x1a>
  {
    ret = VEML3235_INVALID_PARAM;
 800e4aa:	f06f 0301 	mvn.w	r3, #1
 800e4ae:	60fb      	str	r3, [r7, #12]
 800e4b0:	e029      	b.n	800e506 <VEML3235_Pwr_On+0x6e>
  }
  else if (veml3235_read_reg(&pObj->Ctx, VEML3235_REG_ALS_CONF, &config, 2) != 0)
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	f103 001c 	add.w	r0, r3, #28
 800e4b8:	f107 020a 	add.w	r2, r7, #10
 800e4bc:	2302      	movs	r3, #2
 800e4be:	2100      	movs	r1, #0
 800e4c0:	f000 f840 	bl	800e544 <veml3235_read_reg>
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d003      	beq.n	800e4d2 <VEML3235_Pwr_On+0x3a>
  {
    ret = VEML3235_ERROR;
 800e4ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e4ce:	60fb      	str	r3, [r7, #12]
 800e4d0:	e019      	b.n	800e506 <VEML3235_Pwr_On+0x6e>
  }
  else
  {
    config &= ~VEML3235_CONF_SHUTDOWN0;
 800e4d2:	897b      	ldrh	r3, [r7, #10]
 800e4d4:	f023 0301 	bic.w	r3, r3, #1
 800e4d8:	b29b      	uxth	r3, r3
 800e4da:	817b      	strh	r3, [r7, #10]
    ret = VEML3235_OK ;
 800e4dc:	2300      	movs	r3, #0
 800e4de:	60fb      	str	r3, [r7, #12]
    if (veml3235_write_reg(&pObj->Ctx, VEML3235_REG_ALS_CONF, &config, 2) != 0)
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	f103 001c 	add.w	r0, r3, #28
 800e4e6:	f107 020a 	add.w	r2, r7, #10
 800e4ea:	2302      	movs	r3, #2
 800e4ec:	2100      	movs	r1, #0
 800e4ee:	f000 f841 	bl	800e574 <veml3235_write_reg>
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d002      	beq.n	800e4fe <VEML3235_Pwr_On+0x66>
    {
      ret = VEML3235_ERROR;
 800e4f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e4fc:	60fb      	str	r3, [r7, #12]
    }

    VEML3235_Delay(pObj, 4);
 800e4fe:	2104      	movs	r1, #4
 800e500:	6878      	ldr	r0, [r7, #4]
 800e502:	f000 f805 	bl	800e510 <VEML3235_Delay>
  }
  return ret;
 800e506:	68fb      	ldr	r3, [r7, #12]
}
 800e508:	4618      	mov	r0, r3
 800e50a:	3710      	adds	r7, #16
 800e50c:	46bd      	mov	sp, r7
 800e50e:	bd80      	pop	{r7, pc}

0800e510 <VEML3235_Delay>:
  * @param pObj  pointer to component object
  * @param Delay specifies the delay time length, in milliseconds
  * @retval Component status
  */
static void VEML3235_Delay(VEML3235_Object_t *pObj, uint32_t Delay)
{
 800e510:	b580      	push	{r7, lr}
 800e512:	b084      	sub	sp, #16
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
 800e518:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	699b      	ldr	r3, [r3, #24]
 800e51e:	4798      	blx	r3
 800e520:	4603      	mov	r3, r0
 800e522:	60fb      	str	r3, [r7, #12]
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 800e524:	bf00      	nop
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	699b      	ldr	r3, [r3, #24]
 800e52a:	4798      	blx	r3
 800e52c:	4603      	mov	r3, r0
 800e52e:	461a      	mov	r2, r3
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	1ad3      	subs	r3, r2, r3
 800e534:	683a      	ldr	r2, [r7, #0]
 800e536:	429a      	cmp	r2, r3
 800e538:	d8f5      	bhi.n	800e526 <VEML3235_Delay+0x16>
  {
  }
}
 800e53a:	bf00      	nop
 800e53c:	bf00      	nop
 800e53e:	3710      	adds	r7, #16
 800e540:	46bd      	mov	sp, r7
 800e542:	bd80      	pop	{r7, pc}

0800e544 <veml3235_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read
  * @retval Component status
  */
int32_t veml3235_read_reg(const veml3235_ctx_t *ctx, uint16_t reg, uint16_t *pdata, uint16_t length)
{
 800e544:	b590      	push	{r4, r7, lr}
 800e546:	b087      	sub	sp, #28
 800e548:	af00      	add	r7, sp, #0
 800e54a:	60f8      	str	r0, [r7, #12]
 800e54c:	607a      	str	r2, [r7, #4]
 800e54e:	461a      	mov	r2, r3
 800e550:	460b      	mov	r3, r1
 800e552:	817b      	strh	r3, [r7, #10]
 800e554:	4613      	mov	r3, r2
 800e556:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->ReadReg(ctx->handle, reg, (uint8_t *)pdata, length);
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	685c      	ldr	r4, [r3, #4]
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	6898      	ldr	r0, [r3, #8]
 800e560:	893b      	ldrh	r3, [r7, #8]
 800e562:	8979      	ldrh	r1, [r7, #10]
 800e564:	687a      	ldr	r2, [r7, #4]
 800e566:	47a0      	blx	r4
 800e568:	6178      	str	r0, [r7, #20]

  return ret;
 800e56a:	697b      	ldr	r3, [r7, #20]
}
 800e56c:	4618      	mov	r0, r3
 800e56e:	371c      	adds	r7, #28
 800e570:	46bd      	mov	sp, r7
 800e572:	bd90      	pop	{r4, r7, pc}

0800e574 <veml3235_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t veml3235_write_reg(const veml3235_ctx_t *ctx, uint16_t reg, const uint16_t *pdata, uint16_t length)
{
 800e574:	b590      	push	{r4, r7, lr}
 800e576:	b087      	sub	sp, #28
 800e578:	af00      	add	r7, sp, #0
 800e57a:	60f8      	str	r0, [r7, #12]
 800e57c:	607a      	str	r2, [r7, #4]
 800e57e:	461a      	mov	r2, r3
 800e580:	460b      	mov	r3, r1
 800e582:	817b      	strh	r3, [r7, #10]
 800e584:	4613      	mov	r3, r2
 800e586:	813b      	strh	r3, [r7, #8]
  uint16_t tmp;
  tmp = ((uint16_t)(*pdata >> 8) & 0x00FFU);
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	881b      	ldrh	r3, [r3, #0]
 800e58c:	0a1b      	lsrs	r3, r3, #8
 800e58e:	b29b      	uxth	r3, r3
 800e590:	82fb      	strh	r3, [r7, #22]
  tmp |= ((uint16_t)(*pdata << 8) & 0xFF00U);
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	881b      	ldrh	r3, [r3, #0]
 800e596:	021b      	lsls	r3, r3, #8
 800e598:	b29a      	uxth	r2, r3
 800e59a:	8afb      	ldrh	r3, [r7, #22]
 800e59c:	4313      	orrs	r3, r2
 800e59e:	b29b      	uxth	r3, r3
 800e5a0:	82fb      	strh	r3, [r7, #22]

  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)&tmp, length);
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	681c      	ldr	r4, [r3, #0]
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	6898      	ldr	r0, [r3, #8]
 800e5aa:	893b      	ldrh	r3, [r7, #8]
 800e5ac:	f107 0216 	add.w	r2, r7, #22
 800e5b0:	8979      	ldrh	r1, [r7, #10]
 800e5b2:	47a0      	blx	r4
 800e5b4:	4603      	mov	r3, r0
}
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	371c      	adds	r7, #28
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	bd90      	pop	{r4, r7, pc}

0800e5be <RdByte>:

uint8_t RdByte(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_value)
{
 800e5be:	b590      	push	{r4, r7, lr}
 800e5c0:	b085      	sub	sp, #20
 800e5c2:	af00      	add	r7, sp, #0
 800e5c4:	60f8      	str	r0, [r7, #12]
 800e5c6:	460b      	mov	r3, r1
 800e5c8:	607a      	str	r2, [r7, #4]
 800e5ca:	817b      	strh	r3, [r7, #10]
  return p_platform->Read(p_platform->address, RegisterAdress, p_value, 1U);
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	689c      	ldr	r4, [r3, #8]
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	8818      	ldrh	r0, [r3, #0]
 800e5d4:	8979      	ldrh	r1, [r7, #10]
 800e5d6:	2301      	movs	r3, #1
 800e5d8:	687a      	ldr	r2, [r7, #4]
 800e5da:	47a0      	blx	r4
 800e5dc:	4603      	mov	r3, r0
 800e5de:	b2db      	uxtb	r3, r3
}
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	3714      	adds	r7, #20
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	bd90      	pop	{r4, r7, pc}

0800e5e8 <WrByte>:

uint8_t WrByte(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t value)
{
 800e5e8:	b590      	push	{r4, r7, lr}
 800e5ea:	b083      	sub	sp, #12
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
 800e5f0:	460b      	mov	r3, r1
 800e5f2:	807b      	strh	r3, [r7, #2]
 800e5f4:	4613      	mov	r3, r2
 800e5f6:	707b      	strb	r3, [r7, #1]
  return p_platform->Write(p_platform->address, RegisterAdress, &value, 1U);
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	685c      	ldr	r4, [r3, #4]
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	8818      	ldrh	r0, [r3, #0]
 800e600:	1c7a      	adds	r2, r7, #1
 800e602:	8879      	ldrh	r1, [r7, #2]
 800e604:	2301      	movs	r3, #1
 800e606:	47a0      	blx	r4
 800e608:	4603      	mov	r3, r0
 800e60a:	b2db      	uxtb	r3, r3
}
 800e60c:	4618      	mov	r0, r3
 800e60e:	370c      	adds	r7, #12
 800e610:	46bd      	mov	sp, r7
 800e612:	bd90      	pop	{r4, r7, pc}

0800e614 <WrMulti>:
uint8_t WrMulti(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 800e614:	b590      	push	{r4, r7, lr}
 800e616:	b085      	sub	sp, #20
 800e618:	af00      	add	r7, sp, #0
 800e61a:	60f8      	str	r0, [r7, #12]
 800e61c:	607a      	str	r2, [r7, #4]
 800e61e:	603b      	str	r3, [r7, #0]
 800e620:	460b      	mov	r3, r1
 800e622:	817b      	strh	r3, [r7, #10]
  return p_platform->Write(p_platform->address, RegisterAdress, p_values, size);
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	685c      	ldr	r4, [r3, #4]
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	8818      	ldrh	r0, [r3, #0]
 800e62c:	683b      	ldr	r3, [r7, #0]
 800e62e:	b29b      	uxth	r3, r3
 800e630:	8979      	ldrh	r1, [r7, #10]
 800e632:	687a      	ldr	r2, [r7, #4]
 800e634:	47a0      	blx	r4
 800e636:	4603      	mov	r3, r0
 800e638:	b2db      	uxtb	r3, r3
}
 800e63a:	4618      	mov	r0, r3
 800e63c:	3714      	adds	r7, #20
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd90      	pop	{r4, r7, pc}

0800e642 <RdMulti>:
uint8_t RdMulti(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 800e642:	b590      	push	{r4, r7, lr}
 800e644:	b085      	sub	sp, #20
 800e646:	af00      	add	r7, sp, #0
 800e648:	60f8      	str	r0, [r7, #12]
 800e64a:	607a      	str	r2, [r7, #4]
 800e64c:	603b      	str	r3, [r7, #0]
 800e64e:	460b      	mov	r3, r1
 800e650:	817b      	strh	r3, [r7, #10]
  return p_platform->Read(p_platform->address, RegisterAdress, p_values, size);
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	689c      	ldr	r4, [r3, #8]
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	8818      	ldrh	r0, [r3, #0]
 800e65a:	683b      	ldr	r3, [r7, #0]
 800e65c:	b29b      	uxth	r3, r3
 800e65e:	8979      	ldrh	r1, [r7, #10]
 800e660:	687a      	ldr	r2, [r7, #4]
 800e662:	47a0      	blx	r4
 800e664:	4603      	mov	r3, r0
 800e666:	b2db      	uxtb	r3, r3
}
 800e668:	4618      	mov	r0, r3
 800e66a:	3714      	adds	r7, #20
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bd90      	pop	{r4, r7, pc}

0800e670 <SwapBuffer>:

void SwapBuffer(
    uint8_t     *buffer,
    uint16_t     size)
{
 800e670:	b480      	push	{r7}
 800e672:	b085      	sub	sp, #20
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]
 800e678:	460b      	mov	r3, r1
 800e67a:	807b      	strh	r3, [r7, #2]
  uint32_t i, tmp;

  /* Example of possible implementation using <string.h> */
  for(i = 0; i < size; i = i + 4)
 800e67c:	2300      	movs	r3, #0
 800e67e:	60fb      	str	r3, [r7, #12]
 800e680:	e021      	b.n	800e6c6 <SwapBuffer+0x56>
  {
    tmp = (
      buffer[i]<<24)
 800e682:	687a      	ldr	r2, [r7, #4]
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	4413      	add	r3, r2
 800e688:	781b      	ldrb	r3, [r3, #0]
 800e68a:	061a      	lsls	r2, r3, #24
    |(buffer[i+1]<<16)
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	3301      	adds	r3, #1
 800e690:	6879      	ldr	r1, [r7, #4]
 800e692:	440b      	add	r3, r1
 800e694:	781b      	ldrb	r3, [r3, #0]
 800e696:	041b      	lsls	r3, r3, #16
 800e698:	431a      	orrs	r2, r3
    |(buffer[i+2]<<8)
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	3302      	adds	r3, #2
 800e69e:	6879      	ldr	r1, [r7, #4]
 800e6a0:	440b      	add	r3, r1
 800e6a2:	781b      	ldrb	r3, [r3, #0]
 800e6a4:	021b      	lsls	r3, r3, #8
 800e6a6:	4313      	orrs	r3, r2
    |(buffer[i+3]);
 800e6a8:	68fa      	ldr	r2, [r7, #12]
 800e6aa:	3203      	adds	r2, #3
 800e6ac:	6879      	ldr	r1, [r7, #4]
 800e6ae:	440a      	add	r2, r1
 800e6b0:	7812      	ldrb	r2, [r2, #0]
 800e6b2:	4313      	orrs	r3, r2
    tmp = (
 800e6b4:	60bb      	str	r3, [r7, #8]

    memcpy(&(buffer[i]), &tmp, 4);
 800e6b6:	687a      	ldr	r2, [r7, #4]
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	4413      	add	r3, r2
 800e6bc:	68ba      	ldr	r2, [r7, #8]
 800e6be:	601a      	str	r2, [r3, #0]
  for(i = 0; i < size; i = i + 4)
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	3304      	adds	r3, #4
 800e6c4:	60fb      	str	r3, [r7, #12]
 800e6c6:	887b      	ldrh	r3, [r7, #2]
 800e6c8:	68fa      	ldr	r2, [r7, #12]
 800e6ca:	429a      	cmp	r2, r3
 800e6cc:	d3d9      	bcc.n	800e682 <SwapBuffer+0x12>
  }
}
 800e6ce:	bf00      	nop
 800e6d0:	bf00      	nop
 800e6d2:	3714      	adds	r7, #20
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6da:	4770      	bx	lr

0800e6dc <WaitMs>:

uint8_t WaitMs(
		VL53L5CX_Platform *p_platform,
		uint32_t TimeMs)
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b084      	sub	sp, #16
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
 800e6e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = p_platform->GetTick();
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	68db      	ldr	r3, [r3, #12]
 800e6ea:	4798      	blx	r3
 800e6ec:	4603      	mov	r3, r0
 800e6ee:	60fb      	str	r3, [r7, #12]

  while ((p_platform->GetTick() - tickstart) < TimeMs);
 800e6f0:	bf00      	nop
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	68db      	ldr	r3, [r3, #12]
 800e6f6:	4798      	blx	r3
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	461a      	mov	r2, r3
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	1ad3      	subs	r3, r2, r3
 800e700:	683a      	ldr	r2, [r7, #0]
 800e702:	429a      	cmp	r2, r3
 800e704:	d8f5      	bhi.n	800e6f2 <WaitMs+0x16>

  return 0;
 800e706:	2300      	movs	r3, #0
}
 800e708:	4618      	mov	r0, r3
 800e70a:	3710      	adds	r7, #16
 800e70c:	46bd      	mov	sp, r7
 800e70e:	bd80      	pop	{r7, pc}

0800e710 <VL53L5CX_RegisterBusIO>:
  * @param pObj    vl53l5cx context object.
  * @param pIO     BSP IO struct.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_RegisterBusIO(VL53L5CX_Object_t *pObj, VL53L5CX_IO_t *pIO)
{
 800e710:	b580      	push	{r7, lr}
 800e712:	b084      	sub	sp, #16
 800e714:	af00      	add	r7, sp, #0
 800e716:	6078      	str	r0, [r7, #4]
 800e718:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pIO == NULL))
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d002      	beq.n	800e726 <VL53L5CX_RegisterBusIO+0x16>
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d103      	bne.n	800e72e <VL53L5CX_RegisterBusIO+0x1e>
  {
    ret = VL53L5CX_INVALID_PARAM;
 800e726:	f06f 0301 	mvn.w	r3, #1
 800e72a:	60fb      	str	r3, [r7, #12]
 800e72c:	e033      	b.n	800e796 <VL53L5CX_RegisterBusIO+0x86>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800e72e:	683b      	ldr	r3, [r7, #0]
 800e730:	681a      	ldr	r2, [r3, #0]
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800e736:	683b      	ldr	r3, [r7, #0]
 800e738:	685a      	ldr	r2, [r3, #4]
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 800e73e:	683b      	ldr	r3, [r7, #0]
 800e740:	891a      	ldrh	r2, [r3, #8]
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800e746:	683b      	ldr	r3, [r7, #0]
 800e748:	68da      	ldr	r2, [r3, #12]
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800e74e:	683b      	ldr	r3, [r7, #0]
 800e750:	691a      	ldr	r2, [r3, #16]
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 800e756:	683b      	ldr	r3, [r7, #0]
 800e758:	695a      	ldr	r2, [r3, #20]
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	615a      	str	r2, [r3, #20]

    /* fill vl53l5cx platform structure */
    pObj->Dev.platform.address = pIO->Address;
 800e75e:	683b      	ldr	r3, [r7, #0]
 800e760:	891a      	ldrh	r2, [r3, #8]
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	831a      	strh	r2, [r3, #24]
    pObj->Dev.platform.Read = pIO->ReadReg;
 800e766:	683b      	ldr	r3, [r7, #0]
 800e768:	691a      	ldr	r2, [r3, #16]
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	621a      	str	r2, [r3, #32]
    pObj->Dev.platform.Write = pIO->WriteReg;
 800e76e:	683b      	ldr	r3, [r7, #0]
 800e770:	68da      	ldr	r2, [r3, #12]
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	61da      	str	r2, [r3, #28]
    pObj->Dev.platform.GetTick = pIO->GetTick;
 800e776:	683b      	ldr	r3, [r7, #0]
 800e778:	695a      	ldr	r2, [r3, #20]
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d004      	beq.n	800e790 <VL53L5CX_RegisterBusIO+0x80>
    {
      ret = pObj->IO.Init();
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	4798      	blx	r3
 800e78c:	60f8      	str	r0, [r7, #12]
 800e78e:	e002      	b.n	800e796 <VL53L5CX_RegisterBusIO+0x86>
    }
    else
    {
      ret = VL53L5CX_ERROR;
 800e790:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e794:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800e796:	68fb      	ldr	r3, [r7, #12]
}
 800e798:	4618      	mov	r0, r3
 800e79a:	3710      	adds	r7, #16
 800e79c:	46bd      	mov	sp, r7
 800e79e:	bd80      	pop	{r7, pc}

0800e7a0 <VL53L5CX_Init>:
  * @brief Initializes the vl53l5cx.
  * @param pObj    vl53l5cx context object.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_Init(VL53L5CX_Object_t *pObj)
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b084      	sub	sp, #16
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d103      	bne.n	800e7b6 <VL53L5CX_Init+0x16>
  {
    ret = VL53L5CX_INVALID_PARAM;
 800e7ae:	f06f 0301 	mvn.w	r3, #1
 800e7b2:	60fb      	str	r3, [r7, #12]
 800e7b4:	e02e      	b.n	800e814 <VL53L5CX_Init+0x74>
  }
  else if (pObj->IsInitialized != 0U)
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	f893 3950 	ldrb.w	r3, [r3, #2384]	; 0x950
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d003      	beq.n	800e7c8 <VL53L5CX_Init+0x28>
  {
    ret =  VL53L5CX_ERROR;
 800e7c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e7c4:	60fb      	str	r3, [r7, #12]
 800e7c6:	e025      	b.n	800e814 <VL53L5CX_Init+0x74>
  }
  else if (vl53l5cx_init(&pObj->Dev) != VL53L5CX_STATUS_OK)
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	3318      	adds	r3, #24
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	f001 f86b 	bl	800f8a8 <vl53l5cx_init>
 800e7d2:	4603      	mov	r3, r0
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d003      	beq.n	800e7e0 <VL53L5CX_Init+0x40>
  {
    ret = VL53L5CX_ERROR;
 800e7d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e7dc:	60fb      	str	r3, [r7, #12]
 800e7de:	e019      	b.n	800e814 <VL53L5CX_Init+0x74>
  }
  else
  {
    pObj->IsRanging = 0U;
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	2200      	movs	r2, #0
 800e7e4:	f883 2951 	strb.w	r2, [r3, #2385]	; 0x951
    pObj->IsBlocking = 0U;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	f883 2952 	strb.w	r2, [r3, #2386]	; 0x952
    pObj->IsContinuous = 0U;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	f883 2953 	strb.w	r2, [r3, #2387]	; 0x953
    pObj->IsAmbientEnabled = 0U;
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	2200      	movs	r2, #0
 800e7fc:	f883 2954 	strb.w	r2, [r3, #2388]	; 0x954
    pObj->IsSignalEnabled = 0U;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2200      	movs	r2, #0
 800e804:	f883 2955 	strb.w	r2, [r3, #2389]	; 0x955
    pObj->IsInitialized = 1U;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	2201      	movs	r2, #1
 800e80c:	f883 2950 	strb.w	r2, [r3, #2384]	; 0x950
    ret = VL53L5CX_OK;
 800e810:	2300      	movs	r3, #0
 800e812:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800e814:	68fb      	ldr	r3, [r7, #12]
}
 800e816:	4618      	mov	r0, r3
 800e818:	3710      	adds	r7, #16
 800e81a:	46bd      	mov	sp, r7
 800e81c:	bd80      	pop	{r7, pc}

0800e81e <VL53L5CX_DeInit>:
  * @brief Deinitializes the vl53l5cx.
  * @param pObj    vl53l5cx context object.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_DeInit(VL53L5CX_Object_t *pObj)
{
 800e81e:	b580      	push	{r7, lr}
 800e820:	b084      	sub	sp, #16
 800e822:	af00      	add	r7, sp, #0
 800e824:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d103      	bne.n	800e834 <VL53L5CX_DeInit+0x16>
  {
    ret = VL53L5CX_INVALID_PARAM;
 800e82c:	f06f 0301 	mvn.w	r3, #1
 800e830:	60fb      	str	r3, [r7, #12]
 800e832:	e018      	b.n	800e866 <VL53L5CX_DeInit+0x48>
  }
  else if (pObj->IsInitialized == 1U)
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	f893 3950 	ldrb.w	r3, [r3, #2384]	; 0x950
 800e83a:	2b01      	cmp	r3, #1
 800e83c:	d110      	bne.n	800e860 <VL53L5CX_DeInit+0x42>
  {
    /* De-initialize the vl53l5cx interface */
    if (pObj->IO.DeInit() != 0)
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	685b      	ldr	r3, [r3, #4]
 800e842:	4798      	blx	r3
 800e844:	4603      	mov	r3, r0
 800e846:	2b00      	cmp	r3, #0
 800e848:	d003      	beq.n	800e852 <VL53L5CX_DeInit+0x34>
    {
      ret = VL53L5CX_ERROR;
 800e84a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e84e:	60fb      	str	r3, [r7, #12]
 800e850:	e009      	b.n	800e866 <VL53L5CX_DeInit+0x48>
    }
    else
    {
      ret = VL53L5CX_OK;
 800e852:	2300      	movs	r3, #0
 800e854:	60fb      	str	r3, [r7, #12]
      pObj->IsInitialized = 0;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	2200      	movs	r2, #0
 800e85a:	f883 2950 	strb.w	r2, [r3, #2384]	; 0x950
 800e85e:	e002      	b.n	800e866 <VL53L5CX_DeInit+0x48>
    }
  }
  else
  {
    /* if device not initialized return error */
    ret = VL53L5CX_ERROR;
 800e860:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e864:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800e866:	68fb      	ldr	r3, [r7, #12]
}
 800e868:	4618      	mov	r0, r3
 800e86a:	3710      	adds	r7, #16
 800e86c:	46bd      	mov	sp, r7
 800e86e:	bd80      	pop	{r7, pc}

0800e870 <VL53L5CX_ReadID>:
  * @param pObj    vl53l5cx context object.
  * @param pId    Pointer to the device ID.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_ReadID(VL53L5CX_Object_t *pObj, uint32_t *pId)
{
 800e870:	b580      	push	{r7, lr}
 800e872:	b084      	sub	sp, #16
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
 800e878:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t device_id = 0;
 800e87a:	2300      	movs	r3, #0
 800e87c:	72bb      	strb	r3, [r7, #10]
  uint8_t revision_id = 0;
 800e87e:	2300      	movs	r3, #0
 800e880:	727b      	strb	r3, [r7, #9]
  uint8_t status = VL53L5CX_STATUS_OK;
 800e882:	2300      	movs	r3, #0
 800e884:	72fb      	strb	r3, [r7, #11]

  if ((pObj == NULL) || (pId == NULL))
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d002      	beq.n	800e892 <VL53L5CX_ReadID+0x22>
 800e88c:	683b      	ldr	r3, [r7, #0]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d103      	bne.n	800e89a <VL53L5CX_ReadID+0x2a>
  {
    ret = VL53L5CX_INVALID_PARAM;
 800e892:	f06f 0301 	mvn.w	r3, #1
 800e896:	60fb      	str	r3, [r7, #12]
 800e898:	e045      	b.n	800e926 <VL53L5CX_ReadID+0xb6>
  }
  else
  {
    status |= WrByte(&pObj->Dev.platform, 0x7fff, 0x00);
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	3318      	adds	r3, #24
 800e89e:	2200      	movs	r2, #0
 800e8a0:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	f7ff fe9f 	bl	800e5e8 <WrByte>
 800e8aa:	4603      	mov	r3, r0
 800e8ac:	461a      	mov	r2, r3
 800e8ae:	7afb      	ldrb	r3, [r7, #11]
 800e8b0:	4313      	orrs	r3, r2
 800e8b2:	72fb      	strb	r3, [r7, #11]
    status |= RdByte(&pObj->Dev.platform, 0, &device_id);
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	3318      	adds	r3, #24
 800e8b8:	f107 020a 	add.w	r2, r7, #10
 800e8bc:	2100      	movs	r1, #0
 800e8be:	4618      	mov	r0, r3
 800e8c0:	f7ff fe7d 	bl	800e5be <RdByte>
 800e8c4:	4603      	mov	r3, r0
 800e8c6:	461a      	mov	r2, r3
 800e8c8:	7afb      	ldrb	r3, [r7, #11]
 800e8ca:	4313      	orrs	r3, r2
 800e8cc:	72fb      	strb	r3, [r7, #11]
    status |= RdByte(&pObj->Dev.platform, 1, &revision_id);
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	3318      	adds	r3, #24
 800e8d2:	f107 0209 	add.w	r2, r7, #9
 800e8d6:	2101      	movs	r1, #1
 800e8d8:	4618      	mov	r0, r3
 800e8da:	f7ff fe70 	bl	800e5be <RdByte>
 800e8de:	4603      	mov	r3, r0
 800e8e0:	461a      	mov	r2, r3
 800e8e2:	7afb      	ldrb	r3, [r7, #11]
 800e8e4:	4313      	orrs	r3, r2
 800e8e6:	72fb      	strb	r3, [r7, #11]
    status |= WrByte(&pObj->Dev.platform, 0x7fff, 0x02);
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	3318      	adds	r3, #24
 800e8ec:	2202      	movs	r2, #2
 800e8ee:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	f7ff fe78 	bl	800e5e8 <WrByte>
 800e8f8:	4603      	mov	r3, r0
 800e8fa:	461a      	mov	r2, r3
 800e8fc:	7afb      	ldrb	r3, [r7, #11]
 800e8fe:	4313      	orrs	r3, r2
 800e900:	72fb      	strb	r3, [r7, #11]

    if (status == 0U)
 800e902:	7afb      	ldrb	r3, [r7, #11]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d108      	bne.n	800e91a <VL53L5CX_ReadID+0xaa>
    {
      *pId = ((uint32_t)device_id << 8) + revision_id;
 800e908:	7abb      	ldrb	r3, [r7, #10]
 800e90a:	021b      	lsls	r3, r3, #8
 800e90c:	7a7a      	ldrb	r2, [r7, #9]
 800e90e:	441a      	add	r2, r3
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	601a      	str	r2, [r3, #0]
      ret = VL53L5CX_OK;
 800e914:	2300      	movs	r3, #0
 800e916:	60fb      	str	r3, [r7, #12]
 800e918:	e005      	b.n	800e926 <VL53L5CX_ReadID+0xb6>
    }
    else
    {
      *pId = 0;
 800e91a:	683b      	ldr	r3, [r7, #0]
 800e91c:	2200      	movs	r2, #0
 800e91e:	601a      	str	r2, [r3, #0]
      ret = VL53L5CX_ERROR;
 800e920:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e924:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800e926:	68fb      	ldr	r3, [r7, #12]
}
 800e928:	4618      	mov	r0, r3
 800e92a:	3710      	adds	r7, #16
 800e92c:	46bd      	mov	sp, r7
 800e92e:	bd80      	pop	{r7, pc}

0800e930 <VL53L5CX_GetCapabilities>:
  * @param pObj    vl53l5cx context object.
  * @param pCap    Pointer to the vl53l5cx capabilities.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_GetCapabilities(VL53L5CX_Object_t *pObj, VL53L5CX_Capabilities_t *pCap)
{
 800e930:	b480      	push	{r7}
 800e932:	b085      	sub	sp, #20
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
 800e938:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d002      	beq.n	800e946 <VL53L5CX_GetCapabilities+0x16>
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d103      	bne.n	800e94e <VL53L5CX_GetCapabilities+0x1e>
  {
    ret = VL53L5CX_INVALID_PARAM;
 800e946:	f06f 0301 	mvn.w	r3, #1
 800e94a:	60fb      	str	r3, [r7, #12]
 800e94c:	e00d      	b.n	800e96a <VL53L5CX_GetCapabilities+0x3a>
  }
  else
  {
    pCap->NumberOfZones = VL53L5CX_RESOLUTION_8X8;
 800e94e:	683b      	ldr	r3, [r7, #0]
 800e950:	2240      	movs	r2, #64	; 0x40
 800e952:	601a      	str	r2, [r3, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L5CX_TARGET_PER_ZONE;
 800e954:	683b      	ldr	r3, [r7, #0]
 800e956:	2201      	movs	r2, #1
 800e958:	605a      	str	r2, [r3, #4]
    pCap->CustomROI = 0;
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	2200      	movs	r2, #0
 800e95e:	609a      	str	r2, [r3, #8]
    pCap->ThresholdDetection = 1;
 800e960:	683b      	ldr	r3, [r7, #0]
 800e962:	2201      	movs	r2, #1
 800e964:	60da      	str	r2, [r3, #12]

    ret = VL53L5CX_OK;
 800e966:	2300      	movs	r3, #0
 800e968:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800e96a:	68fb      	ldr	r3, [r7, #12]
}
 800e96c:	4618      	mov	r0, r3
 800e96e:	3714      	adds	r7, #20
 800e970:	46bd      	mov	sp, r7
 800e972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e976:	4770      	bx	lr

0800e978 <VL53L5CX_ConfigProfile>:
  * @param pObj    vl53l5cx context object.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_ConfigProfile(VL53L5CX_Object_t *pObj, VL53L5CX_ProfileConfig_t *pConfig)
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b086      	sub	sp, #24
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
 800e980:	6039      	str	r1, [r7, #0]
  int32_t ret = VL53L5CX_OK;
 800e982:	2300      	movs	r3, #0
 800e984:	617b      	str	r3, [r7, #20]
  uint8_t resolution;
  uint8_t ranging_mode;
  uint8_t ranging_frequency;
  uint32_t integration_time;

  if ((pObj != NULL) && (pConfig != NULL))
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d01b      	beq.n	800e9c4 <VL53L5CX_ConfigProfile+0x4c>
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d018      	beq.n	800e9c4 <VL53L5CX_ConfigProfile+0x4c>
  {
    profile = pConfig->RangingProfile;
 800e992:	683b      	ldr	r3, [r7, #0]
 800e994:	781b      	ldrb	r3, [r3, #0]
 800e996:	747b      	strb	r3, [r7, #17]
    integration_time = pConfig->TimingBudget;
 800e998:	683b      	ldr	r3, [r7, #0]
 800e99a:	685b      	ldr	r3, [r3, #4]
 800e99c:	60fb      	str	r3, [r7, #12]
    ranging_frequency = (uint8_t)pConfig->Frequency;
 800e99e:	683b      	ldr	r3, [r7, #0]
 800e9a0:	689b      	ldr	r3, [r3, #8]
 800e9a2:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L5CX_INVALID_PARAM;
  }

  switch (profile)
 800e9a4:	7c7b      	ldrb	r3, [r7, #17]
 800e9a6:	3b01      	subs	r3, #1
 800e9a8:	2b03      	cmp	r3, #3
 800e9aa:	d822      	bhi.n	800e9f2 <VL53L5CX_ConfigProfile+0x7a>
 800e9ac:	a201      	add	r2, pc, #4	; (adr r2, 800e9b4 <VL53L5CX_ConfigProfile+0x3c>)
 800e9ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9b2:	bf00      	nop
 800e9b4:	0800e9cb 	.word	0x0800e9cb
 800e9b8:	0800e9d5 	.word	0x0800e9d5
 800e9bc:	0800e9df 	.word	0x0800e9df
 800e9c0:	0800e9e9 	.word	0x0800e9e9
    return VL53L5CX_INVALID_PARAM;
 800e9c4:	f06f 0301 	mvn.w	r3, #1
 800e9c8:	e070      	b.n	800eaac <VL53L5CX_ConfigProfile+0x134>
  {
  case VL53L5CX_PROFILE_4x4_CONTINUOUS:
    resolution = VL53L5CX_RESOLUTION_4X4;
 800e9ca:	2310      	movs	r3, #16
 800e9cc:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L5CX_RANGING_MODE_CONTINUOUS;
 800e9ce:	2301      	movs	r3, #1
 800e9d0:	74bb      	strb	r3, [r7, #18]
    break;
 800e9d2:	e016      	b.n	800ea02 <VL53L5CX_ConfigProfile+0x8a>
  case VL53L5CX_PROFILE_4x4_AUTONOMOUS:
    resolution = VL53L5CX_RESOLUTION_4X4;
 800e9d4:	2310      	movs	r3, #16
 800e9d6:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L5CX_RANGING_MODE_AUTONOMOUS;
 800e9d8:	2303      	movs	r3, #3
 800e9da:	74bb      	strb	r3, [r7, #18]
    break;
 800e9dc:	e011      	b.n	800ea02 <VL53L5CX_ConfigProfile+0x8a>
  case VL53L5CX_PROFILE_8x8_CONTINUOUS:
    resolution = VL53L5CX_RESOLUTION_8X8;
 800e9de:	2340      	movs	r3, #64	; 0x40
 800e9e0:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L5CX_RANGING_MODE_CONTINUOUS;
 800e9e2:	2301      	movs	r3, #1
 800e9e4:	74bb      	strb	r3, [r7, #18]
    break;
 800e9e6:	e00c      	b.n	800ea02 <VL53L5CX_ConfigProfile+0x8a>
  case VL53L5CX_PROFILE_8x8_AUTONOMOUS:
    resolution = VL53L5CX_RESOLUTION_8X8;
 800e9e8:	2340      	movs	r3, #64	; 0x40
 800e9ea:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L5CX_RANGING_MODE_AUTONOMOUS;
 800e9ec:	2303      	movs	r3, #3
 800e9ee:	74bb      	strb	r3, [r7, #18]
    break;
 800e9f0:	e007      	b.n	800ea02 <VL53L5CX_ConfigProfile+0x8a>
  default:
    resolution = 0; /* silence MISRA rule 1.3 warning */
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	74fb      	strb	r3, [r7, #19]
    ranging_mode = 0; /* silence MISRA rule 1.3 warning */
 800e9f6:	2300      	movs	r3, #0
 800e9f8:	74bb      	strb	r3, [r7, #18]
    ret = VL53L5CX_INVALID_PARAM;
 800e9fa:	f06f 0301 	mvn.w	r3, #1
 800e9fe:	617b      	str	r3, [r7, #20]
    break;
 800ea00:	bf00      	nop
  }

  if (ret != VL53L5CX_OK)
 800ea02:	697b      	ldr	r3, [r7, #20]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d001      	beq.n	800ea0c <VL53L5CX_ConfigProfile+0x94>
  {
    return ret;
 800ea08:	697b      	ldr	r3, [r7, #20]
 800ea0a:	e04f      	b.n	800eaac <VL53L5CX_ConfigProfile+0x134>
  }
  else if (vl53l5cx_set_resolution(&pObj->Dev, resolution) != VL53L5CX_STATUS_OK)
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	3318      	adds	r3, #24
 800ea10:	7cfa      	ldrb	r2, [r7, #19]
 800ea12:	4611      	mov	r1, r2
 800ea14:	4618      	mov	r0, r3
 800ea16:	f002 f93a 	bl	8010c8e <vl53l5cx_set_resolution>
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d003      	beq.n	800ea28 <VL53L5CX_ConfigProfile+0xb0>
  {
    ret = VL53L5CX_ERROR;
 800ea20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ea24:	617b      	str	r3, [r7, #20]
 800ea26:	e040      	b.n	800eaaa <VL53L5CX_ConfigProfile+0x132>
  }
  else if (vl53l5cx_set_ranging_mode(&pObj->Dev, ranging_mode) != VL53L5CX_STATUS_OK)
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	3318      	adds	r3, #24
 800ea2c:	7cba      	ldrb	r2, [r7, #18]
 800ea2e:	4611      	mov	r1, r2
 800ea30:	4618      	mov	r0, r3
 800ea32:	f002 fa56 	bl	8010ee2 <vl53l5cx_set_ranging_mode>
 800ea36:	4603      	mov	r3, r0
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d003      	beq.n	800ea44 <VL53L5CX_ConfigProfile+0xcc>
  {
    ret = VL53L5CX_ERROR;
 800ea3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ea40:	617b      	str	r3, [r7, #20]
 800ea42:	e032      	b.n	800eaaa <VL53L5CX_ConfigProfile+0x132>
  }
  else if (vl53l5cx_set_integration_time_ms(&pObj->Dev, integration_time) != VL53L5CX_STATUS_OK)
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	3318      	adds	r3, #24
 800ea48:	68f9      	ldr	r1, [r7, #12]
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	f002 fa14 	bl	8010e78 <vl53l5cx_set_integration_time_ms>
 800ea50:	4603      	mov	r3, r0
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d003      	beq.n	800ea5e <VL53L5CX_ConfigProfile+0xe6>
  {
    ret = VL53L5CX_ERROR;
 800ea56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ea5a:	617b      	str	r3, [r7, #20]
 800ea5c:	e025      	b.n	800eaaa <VL53L5CX_ConfigProfile+0x132>
  }
  else if (vl53l5cx_set_ranging_frequency_hz(&pObj->Dev, ranging_frequency) != VL53L5CX_STATUS_OK)
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	3318      	adds	r3, #24
 800ea62:	7afa      	ldrb	r2, [r7, #11]
 800ea64:	4611      	mov	r1, r2
 800ea66:	4618      	mov	r0, r3
 800ea68:	f002 f9e5 	bl	8010e36 <vl53l5cx_set_ranging_frequency_hz>
 800ea6c:	4603      	mov	r3, r0
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d003      	beq.n	800ea7a <VL53L5CX_ConfigProfile+0x102>
  {
    ret = VL53L5CX_ERROR;
 800ea72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ea76:	617b      	str	r3, [r7, #20]
 800ea78:	e017      	b.n	800eaaa <VL53L5CX_ConfigProfile+0x132>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 800ea7a:	683b      	ldr	r3, [r7, #0]
 800ea7c:	68db      	ldr	r3, [r3, #12]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	bf14      	ite	ne
 800ea82:	2301      	movne	r3, #1
 800ea84:	2300      	moveq	r3, #0
 800ea86:	b2db      	uxtb	r3, r3
 800ea88:	461a      	mov	r2, r3
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	f883 2954 	strb.w	r2, [r3, #2388]	; 0x954
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 800ea90:	683b      	ldr	r3, [r7, #0]
 800ea92:	691b      	ldr	r3, [r3, #16]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	bf14      	ite	ne
 800ea98:	2301      	movne	r3, #1
 800ea9a:	2300      	moveq	r3, #0
 800ea9c:	b2db      	uxtb	r3, r3
 800ea9e:	461a      	mov	r2, r3
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	f883 2955 	strb.w	r2, [r3, #2389]	; 0x955

    ret = VL53L5CX_OK;
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800eaaa:	697b      	ldr	r3, [r7, #20]
}
 800eaac:	4618      	mov	r0, r3
 800eaae:	3718      	adds	r7, #24
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bd80      	pop	{r7, pc}

0800eab4 <VL53L5CX_ConfigROI>:
  * @param pROIConfig    Pointer to the ROI configuration struct.
  * @note This device does not support this function.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_ConfigROI(VL53L5CX_Object_t *pObj, VL53L5CX_ROIConfig_t *pROIConfig)
{
 800eab4:	b480      	push	{r7}
 800eab6:	b083      	sub	sp, #12
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
 800eabc:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pROIConfig);
  return VL53L5CX_NOT_IMPLEMENTED;
 800eabe:	f06f 0303 	mvn.w	r3, #3
}
 800eac2:	4618      	mov	r0, r3
 800eac4:	370c      	adds	r7, #12
 800eac6:	46bd      	mov	sp, r7
 800eac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eacc:	4770      	bx	lr
	...

0800ead0 <VL53L5CX_ConfigIT>:
  * @param pObj    vl53l5cx context object.
  * @param pITConfig    Pointer to the IT configuration struct.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_ConfigIT(VL53L5CX_Object_t *pObj, VL53L5CX_ITConfig_t *pITConfig)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b084      	sub	sp, #16
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
 800ead8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t i;
  uint8_t res; /* current resolution */
  uint8_t status = 0U;
 800eada:	2300      	movs	r3, #0
 800eadc:	72bb      	strb	r3, [r7, #10]
  static VL53L5CX_DetectionThresholds thresholds[VL53L5CX_NB_THRESHOLDS];

  if ((pObj == NULL) || (pITConfig == NULL))
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d002      	beq.n	800eaea <VL53L5CX_ConfigIT+0x1a>
 800eae4:	683b      	ldr	r3, [r7, #0]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d103      	bne.n	800eaf2 <VL53L5CX_ConfigIT+0x22>
  {
    ret = VL53L5CX_INVALID_PARAM;
 800eaea:	f06f 0301 	mvn.w	r3, #1
 800eaee:	60fb      	str	r3, [r7, #12]
 800eaf0:	e09f      	b.n	800ec32 <VL53L5CX_ConfigIT+0x162>
  }
  else if (pITConfig->Criteria == VL53L5CX_IT_DEFAULT)
 800eaf2:	683b      	ldr	r3, [r7, #0]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	2bff      	cmp	r3, #255	; 0xff
 800eaf8:	d113      	bne.n	800eb22 <VL53L5CX_ConfigIT+0x52>
  {
    /* disable thresholds detection */
    status |= vl53l5cx_set_detection_thresholds_enable(&pObj->Dev, 0U);
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	3318      	adds	r3, #24
 800eafe:	2100      	movs	r1, #0
 800eb00:	4618      	mov	r0, r3
 800eb02:	f002 fb99 	bl	8011238 <vl53l5cx_set_detection_thresholds_enable>
 800eb06:	4603      	mov	r3, r0
 800eb08:	461a      	mov	r2, r3
 800eb0a:	7abb      	ldrb	r3, [r7, #10]
 800eb0c:	4313      	orrs	r3, r2
 800eb0e:	72bb      	strb	r3, [r7, #10]
    ret = (status != 0U) ? VL53L5CX_ERROR : VL53L5CX_OK;
 800eb10:	7abb      	ldrb	r3, [r7, #10]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d002      	beq.n	800eb1c <VL53L5CX_ConfigIT+0x4c>
 800eb16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eb1a:	e000      	b.n	800eb1e <VL53L5CX_ConfigIT+0x4e>
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	60fb      	str	r3, [r7, #12]
 800eb20:	e087      	b.n	800ec32 <VL53L5CX_ConfigIT+0x162>
  }
  else
  {
    (void)vl53l5cx_get_resolution(&pObj->Dev, &res);
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	3318      	adds	r3, #24
 800eb26:	f107 0209 	add.w	r2, r7, #9
 800eb2a:	4611      	mov	r1, r2
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	f002 f889 	bl	8010c44 <vl53l5cx_get_resolution>

    /* configure thresholds on each active zone */
    for (i = 0; i < res; i++)
 800eb32:	2300      	movs	r3, #0
 800eb34:	72fb      	strb	r3, [r7, #11]
 800eb36:	e044      	b.n	800ebc2 <VL53L5CX_ConfigIT+0xf2>
    {
      thresholds[i].zone_num = i;
 800eb38:	7afa      	ldrb	r2, [r7, #11]
 800eb3a:	4940      	ldr	r1, [pc, #256]	; (800ec3c <VL53L5CX_ConfigIT+0x16c>)
 800eb3c:	4613      	mov	r3, r2
 800eb3e:	005b      	lsls	r3, r3, #1
 800eb40:	4413      	add	r3, r2
 800eb42:	009b      	lsls	r3, r3, #2
 800eb44:	440b      	add	r3, r1
 800eb46:	330a      	adds	r3, #10
 800eb48:	7afa      	ldrb	r2, [r7, #11]
 800eb4a:	701a      	strb	r2, [r3, #0]
      thresholds[i].measurement = VL53L5CX_DISTANCE_MM;
 800eb4c:	7afa      	ldrb	r2, [r7, #11]
 800eb4e:	493b      	ldr	r1, [pc, #236]	; (800ec3c <VL53L5CX_ConfigIT+0x16c>)
 800eb50:	4613      	mov	r3, r2
 800eb52:	005b      	lsls	r3, r3, #1
 800eb54:	4413      	add	r3, r2
 800eb56:	009b      	lsls	r3, r3, #2
 800eb58:	440b      	add	r3, r1
 800eb5a:	3308      	adds	r3, #8
 800eb5c:	2201      	movs	r2, #1
 800eb5e:	701a      	strb	r2, [r3, #0]
      thresholds[i].type = (uint8_t)pITConfig->Criteria;
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	7afa      	ldrb	r2, [r7, #11]
 800eb66:	b2d8      	uxtb	r0, r3
 800eb68:	4934      	ldr	r1, [pc, #208]	; (800ec3c <VL53L5CX_ConfigIT+0x16c>)
 800eb6a:	4613      	mov	r3, r2
 800eb6c:	005b      	lsls	r3, r3, #1
 800eb6e:	4413      	add	r3, r2
 800eb70:	009b      	lsls	r3, r3, #2
 800eb72:	440b      	add	r3, r1
 800eb74:	3309      	adds	r3, #9
 800eb76:	4602      	mov	r2, r0
 800eb78:	701a      	strb	r2, [r3, #0]
      thresholds[i].mathematic_operation = VL53L5CX_OPERATION_NONE;
 800eb7a:	7afa      	ldrb	r2, [r7, #11]
 800eb7c:	492f      	ldr	r1, [pc, #188]	; (800ec3c <VL53L5CX_ConfigIT+0x16c>)
 800eb7e:	4613      	mov	r3, r2
 800eb80:	005b      	lsls	r3, r3, #1
 800eb82:	4413      	add	r3, r2
 800eb84:	009b      	lsls	r3, r3, #2
 800eb86:	440b      	add	r3, r1
 800eb88:	330b      	adds	r3, #11
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	701a      	strb	r2, [r3, #0]
      thresholds[i].param_low_thresh = (int32_t)pITConfig->LowThreshold;
 800eb8e:	683b      	ldr	r3, [r7, #0]
 800eb90:	685b      	ldr	r3, [r3, #4]
 800eb92:	7afa      	ldrb	r2, [r7, #11]
 800eb94:	4618      	mov	r0, r3
 800eb96:	4929      	ldr	r1, [pc, #164]	; (800ec3c <VL53L5CX_ConfigIT+0x16c>)
 800eb98:	4613      	mov	r3, r2
 800eb9a:	005b      	lsls	r3, r3, #1
 800eb9c:	4413      	add	r3, r2
 800eb9e:	009b      	lsls	r3, r3, #2
 800eba0:	440b      	add	r3, r1
 800eba2:	6018      	str	r0, [r3, #0]
      thresholds[i].param_high_thresh = (int32_t)pITConfig->HighThreshold;
 800eba4:	683b      	ldr	r3, [r7, #0]
 800eba6:	689b      	ldr	r3, [r3, #8]
 800eba8:	7afa      	ldrb	r2, [r7, #11]
 800ebaa:	4618      	mov	r0, r3
 800ebac:	4923      	ldr	r1, [pc, #140]	; (800ec3c <VL53L5CX_ConfigIT+0x16c>)
 800ebae:	4613      	mov	r3, r2
 800ebb0:	005b      	lsls	r3, r3, #1
 800ebb2:	4413      	add	r3, r2
 800ebb4:	009b      	lsls	r3, r3, #2
 800ebb6:	440b      	add	r3, r1
 800ebb8:	3304      	adds	r3, #4
 800ebba:	6018      	str	r0, [r3, #0]
    for (i = 0; i < res; i++)
 800ebbc:	7afb      	ldrb	r3, [r7, #11]
 800ebbe:	3301      	adds	r3, #1
 800ebc0:	72fb      	strb	r3, [r7, #11]
 800ebc2:	7a7b      	ldrb	r3, [r7, #9]
 800ebc4:	7afa      	ldrb	r2, [r7, #11]
 800ebc6:	429a      	cmp	r2, r3
 800ebc8:	d3b6      	bcc.n	800eb38 <VL53L5CX_ConfigIT+0x68>
    }

    /* the last threshold must be clearly indicated */
    thresholds[i].zone_num |= VL53L5CX_LAST_THRESHOLD;
 800ebca:	7afa      	ldrb	r2, [r7, #11]
 800ebcc:	491b      	ldr	r1, [pc, #108]	; (800ec3c <VL53L5CX_ConfigIT+0x16c>)
 800ebce:	4613      	mov	r3, r2
 800ebd0:	005b      	lsls	r3, r3, #1
 800ebd2:	4413      	add	r3, r2
 800ebd4:	009b      	lsls	r3, r3, #2
 800ebd6:	440b      	add	r3, r1
 800ebd8:	330a      	adds	r3, #10
 800ebda:	781b      	ldrb	r3, [r3, #0]
 800ebdc:	7afa      	ldrb	r2, [r7, #11]
 800ebde:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ebe2:	b2d8      	uxtb	r0, r3
 800ebe4:	4915      	ldr	r1, [pc, #84]	; (800ec3c <VL53L5CX_ConfigIT+0x16c>)
 800ebe6:	4613      	mov	r3, r2
 800ebe8:	005b      	lsls	r3, r3, #1
 800ebea:	4413      	add	r3, r2
 800ebec:	009b      	lsls	r3, r3, #2
 800ebee:	440b      	add	r3, r1
 800ebf0:	330a      	adds	r3, #10
 800ebf2:	4602      	mov	r2, r0
 800ebf4:	701a      	strb	r2, [r3, #0]

    /* send array of thresholds to the sensor */
    status |= vl53l5cx_set_detection_thresholds(&pObj->Dev, thresholds);
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	3318      	adds	r3, #24
 800ebfa:	4910      	ldr	r1, [pc, #64]	; (800ec3c <VL53L5CX_ConfigIT+0x16c>)
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	f002 fb61 	bl	80112c4 <vl53l5cx_set_detection_thresholds>
 800ec02:	4603      	mov	r3, r0
 800ec04:	461a      	mov	r2, r3
 800ec06:	7abb      	ldrb	r3, [r7, #10]
 800ec08:	4313      	orrs	r3, r2
 800ec0a:	72bb      	strb	r3, [r7, #10]

    /* enable thresholds detection */
    status |= vl53l5cx_set_detection_thresholds_enable(&pObj->Dev, 1U);
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	3318      	adds	r3, #24
 800ec10:	2101      	movs	r1, #1
 800ec12:	4618      	mov	r0, r3
 800ec14:	f002 fb10 	bl	8011238 <vl53l5cx_set_detection_thresholds_enable>
 800ec18:	4603      	mov	r3, r0
 800ec1a:	461a      	mov	r2, r3
 800ec1c:	7abb      	ldrb	r3, [r7, #10]
 800ec1e:	4313      	orrs	r3, r2
 800ec20:	72bb      	strb	r3, [r7, #10]

    ret = (status != 0U) ? VL53L5CX_ERROR : VL53L5CX_OK;
 800ec22:	7abb      	ldrb	r3, [r7, #10]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d002      	beq.n	800ec2e <VL53L5CX_ConfigIT+0x15e>
 800ec28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ec2c:	e000      	b.n	800ec30 <VL53L5CX_ConfigIT+0x160>
 800ec2e:	2300      	movs	r3, #0
 800ec30:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800ec32:	68fb      	ldr	r3, [r7, #12]
}
 800ec34:	4618      	mov	r0, r3
 800ec36:	3710      	adds	r7, #16
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	bd80      	pop	{r7, pc}
 800ec3c:	20003570 	.word	0x20003570

0800ec40 <VL53L5CX_GetDistance>:
  * @param pObj    vl53l5cx context object.
  * @param pResult    Pointer to the result struct.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_GetDistance(VL53L5CX_Object_t *pObj, VL53L5CX_Result_t *pResult)
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b084      	sub	sp, #16
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
 800ec48:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pResult == NULL))
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d002      	beq.n	800ec56 <VL53L5CX_GetDistance+0x16>
 800ec50:	683b      	ldr	r3, [r7, #0]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d103      	bne.n	800ec5e <VL53L5CX_GetDistance+0x1e>
  {
    ret = VL53L5CX_INVALID_PARAM;
 800ec56:	f06f 0301 	mvn.w	r3, #1
 800ec5a:	60fb      	str	r3, [r7, #12]
 800ec5c:	e019      	b.n	800ec92 <VL53L5CX_GetDistance+0x52>
  }
  else if (pObj->IsRanging == 0U)
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	f893 3951 	ldrb.w	r3, [r3, #2385]	; 0x951
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d103      	bne.n	800ec70 <VL53L5CX_GetDistance+0x30>
  {
    ret = VL53L5CX_ERROR;
 800ec68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ec6c:	60fb      	str	r3, [r7, #12]
 800ec6e:	e010      	b.n	800ec92 <VL53L5CX_GetDistance+0x52>
  }
  else
  {
    if (pObj->IsBlocking == 1U)
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	f893 3952 	ldrb.w	r3, [r3, #2386]	; 0x952
 800ec76:	2b01      	cmp	r3, #1
 800ec78:	d106      	bne.n	800ec88 <VL53L5CX_GetDistance+0x48>
    {
      ret = vl53l5cx_poll_for_measurement(pObj, V53L5CX_POLL_TIMEOUT);
 800ec7a:	f241 3188 	movw	r1, #5000	; 0x1388
 800ec7e:	6878      	ldr	r0, [r7, #4]
 800ec80:	f000 f93a 	bl	800eef8 <vl53l5cx_poll_for_measurement>
 800ec84:	60f8      	str	r0, [r7, #12]
 800ec86:	e004      	b.n	800ec92 <VL53L5CX_GetDistance+0x52>
    }
    else
    {
      ret = vl53l5cx_poll_for_measurement(pObj, 0U);
 800ec88:	2100      	movs	r1, #0
 800ec8a:	6878      	ldr	r0, [r7, #4]
 800ec8c:	f000 f934 	bl	800eef8 <vl53l5cx_poll_for_measurement>
 800ec90:	60f8      	str	r0, [r7, #12]
    }
  }

  /* a new measure is available if no error is returned by the poll function */
  if (ret == VL53L5CX_OK)
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d104      	bne.n	800eca2 <VL53L5CX_GetDistance+0x62>
  {
    ret = vl53l5cx_get_result(pObj, pResult);
 800ec98:	6839      	ldr	r1, [r7, #0]
 800ec9a:	6878      	ldr	r0, [r7, #4]
 800ec9c:	f000 f958 	bl	800ef50 <vl53l5cx_get_result>
 800eca0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800eca2:	68fb      	ldr	r3, [r7, #12]
}
 800eca4:	4618      	mov	r0, r3
 800eca6:	3710      	adds	r7, #16
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	bd80      	pop	{r7, pc}

0800ecac <VL53L5CX_Start>:
  * @param pObj    vl53l5cx context object.
  * @param Mode        The desired @ref RANGING_SENSOR_Mode_t
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_Start(VL53L5CX_Object_t *pObj, uint32_t Mode)
{
 800ecac:	b580      	push	{r7, lr}
 800ecae:	b084      	sub	sp, #16
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	6078      	str	r0, [r7, #4]
 800ecb4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d103      	bne.n	800ecc4 <VL53L5CX_Start+0x18>
  {
    ret = VL53L5CX_INVALID_PARAM;
 800ecbc:	f06f 0301 	mvn.w	r3, #1
 800ecc0:	60fb      	str	r3, [r7, #12]
 800ecc2:	e04c      	b.n	800ed5e <VL53L5CX_Start+0xb2>
  }
  else if (vl53l5cx_start_ranging(&pObj->Dev) == VL53L5CX_STATUS_OK)
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	3318      	adds	r3, #24
 800ecc8:	4618      	mov	r0, r3
 800ecca:	f001 fb51 	bl	8010370 <vl53l5cx_start_ranging>
 800ecce:	4603      	mov	r3, r0
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d141      	bne.n	800ed58 <VL53L5CX_Start+0xac>
  {
    pObj->IsRanging = 1U;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	2201      	movs	r2, #1
 800ecd8:	f883 2951 	strb.w	r2, [r3, #2385]	; 0x951
    ret = VL53L5CX_OK;
 800ecdc:	2300      	movs	r3, #0
 800ecde:	60fb      	str	r3, [r7, #12]

    switch (Mode)
 800ece0:	683b      	ldr	r3, [r7, #0]
 800ece2:	3b01      	subs	r3, #1
 800ece4:	2b03      	cmp	r3, #3
 800ece6:	d82f      	bhi.n	800ed48 <VL53L5CX_Start+0x9c>
 800ece8:	a201      	add	r2, pc, #4	; (adr r2, 800ecf0 <VL53L5CX_Start+0x44>)
 800ecea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecee:	bf00      	nop
 800ecf0:	0800ed01 	.word	0x0800ed01
 800ecf4:	0800ed13 	.word	0x0800ed13
 800ecf8:	0800ed25 	.word	0x0800ed25
 800ecfc:	0800ed37 	.word	0x0800ed37
    {
      case VL53L5CX_MODE_BLOCKING_CONTINUOUS:
        pObj->IsContinuous = 1U;
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	2201      	movs	r2, #1
 800ed04:	f883 2953 	strb.w	r2, [r3, #2387]	; 0x953
        pObj->IsBlocking = 1U;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	2201      	movs	r2, #1
 800ed0c:	f883 2952 	strb.w	r2, [r3, #2386]	; 0x952
        break;
 800ed10:	e025      	b.n	800ed5e <VL53L5CX_Start+0xb2>

      case VL53L5CX_MODE_BLOCKING_ONESHOT:
        pObj->IsContinuous = 0U;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	2200      	movs	r2, #0
 800ed16:	f883 2953 	strb.w	r2, [r3, #2387]	; 0x953
        pObj->IsBlocking = 1U;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	2201      	movs	r2, #1
 800ed1e:	f883 2952 	strb.w	r2, [r3, #2386]	; 0x952
        break;
 800ed22:	e01c      	b.n	800ed5e <VL53L5CX_Start+0xb2>

      case VL53L5CX_MODE_ASYNC_CONTINUOUS:
        pObj->IsContinuous = 1U;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	2201      	movs	r2, #1
 800ed28:	f883 2953 	strb.w	r2, [r3, #2387]	; 0x953
        pObj->IsBlocking = 0U;
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	2200      	movs	r2, #0
 800ed30:	f883 2952 	strb.w	r2, [r3, #2386]	; 0x952
        break;
 800ed34:	e013      	b.n	800ed5e <VL53L5CX_Start+0xb2>

      case VL53L5CX_MODE_ASYNC_ONESHOT:
        pObj->IsContinuous = 0U;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	2200      	movs	r2, #0
 800ed3a:	f883 2953 	strb.w	r2, [r3, #2387]	; 0x953
        pObj->IsBlocking = 0U;
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	2200      	movs	r2, #0
 800ed42:	f883 2952 	strb.w	r2, [r3, #2386]	; 0x952
        break;
 800ed46:	e00a      	b.n	800ed5e <VL53L5CX_Start+0xb2>

      default:
        pObj->IsRanging = 0U;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	f883 2951 	strb.w	r2, [r3, #2385]	; 0x951
        ret = VL53L5CX_INVALID_PARAM;
 800ed50:	f06f 0301 	mvn.w	r3, #1
 800ed54:	60fb      	str	r3, [r7, #12]
        break;
 800ed56:	e002      	b.n	800ed5e <VL53L5CX_Start+0xb2>
    }
  }
  else
  {
    ret = VL53L5CX_ERROR;
 800ed58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ed5c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800ed5e:	68fb      	ldr	r3, [r7, #12]
}
 800ed60:	4618      	mov	r0, r3
 800ed62:	3710      	adds	r7, #16
 800ed64:	46bd      	mov	sp, r7
 800ed66:	bd80      	pop	{r7, pc}

0800ed68 <VL53L5CX_Stop>:
  * @brief Stop ranging.
  * @param pObj    vl53l5cx context object.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_Stop(VL53L5CX_Object_t *pObj)
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b084      	sub	sp, #16
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d103      	bne.n	800ed7e <VL53L5CX_Stop+0x16>
  {
    ret = VL53L5CX_INVALID_PARAM;
 800ed76:	f06f 0301 	mvn.w	r3, #1
 800ed7a:	60fb      	str	r3, [r7, #12]
 800ed7c:	e01a      	b.n	800edb4 <VL53L5CX_Stop+0x4c>
  }
  else if (pObj->IsRanging == 0U)
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	f893 3951 	ldrb.w	r3, [r3, #2385]	; 0x951
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d103      	bne.n	800ed90 <VL53L5CX_Stop+0x28>
  {
    /* ranging not started */
    ret = VL53L5CX_ERROR;
 800ed88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ed8c:	60fb      	str	r3, [r7, #12]
 800ed8e:	e011      	b.n	800edb4 <VL53L5CX_Stop+0x4c>
  }
  else if (vl53l5cx_stop_ranging(&pObj->Dev) == VL53L5CX_STATUS_OK)
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	3318      	adds	r3, #24
 800ed94:	4618      	mov	r0, r3
 800ed96:	f001 fc5f 	bl	8010658 <vl53l5cx_stop_ranging>
 800ed9a:	4603      	mov	r3, r0
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d106      	bne.n	800edae <VL53L5CX_Stop+0x46>
  {
    pObj->IsRanging = 0U;
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	2200      	movs	r2, #0
 800eda4:	f883 2951 	strb.w	r2, [r3, #2385]	; 0x951
    ret = VL53L5CX_OK;
 800eda8:	2300      	movs	r3, #0
 800edaa:	60fb      	str	r3, [r7, #12]
 800edac:	e002      	b.n	800edb4 <VL53L5CX_Stop+0x4c>
  }
  else
  {
    ret = VL53L5CX_ERROR;
 800edae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800edb2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800edb4:	68fb      	ldr	r3, [r7, #12]
}
 800edb6:	4618      	mov	r0, r3
 800edb8:	3710      	adds	r7, #16
 800edba:	46bd      	mov	sp, r7
 800edbc:	bd80      	pop	{r7, pc}

0800edbe <VL53L5CX_SetAddress>:
  * @param pObj    vl53l5cx context object.
  * @param Address     New I2C address.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_SetAddress(VL53L5CX_Object_t *pObj, uint32_t Address)
{
 800edbe:	b580      	push	{r7, lr}
 800edc0:	b084      	sub	sp, #16
 800edc2:	af00      	add	r7, sp, #0
 800edc4:	6078      	str	r0, [r7, #4]
 800edc6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d103      	bne.n	800edd6 <VL53L5CX_SetAddress+0x18>
  {
    ret = VL53L5CX_INVALID_PARAM;
 800edce:	f06f 0301 	mvn.w	r3, #1
 800edd2:	60fb      	str	r3, [r7, #12]
 800edd4:	e016      	b.n	800ee04 <VL53L5CX_SetAddress+0x46>
  }
  else if (vl53l5cx_set_i2c_address(&pObj->Dev, (uint8_t)Address) != VL53L5CX_STATUS_OK)
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	3318      	adds	r3, #24
 800edda:	683a      	ldr	r2, [r7, #0]
 800eddc:	b2d2      	uxtb	r2, r2
 800edde:	b292      	uxth	r2, r2
 800ede0:	4611      	mov	r1, r2
 800ede2:	4618      	mov	r0, r3
 800ede4:	f001 f9cc 	bl	8010180 <vl53l5cx_set_i2c_address>
 800ede8:	4603      	mov	r3, r0
 800edea:	2b00      	cmp	r3, #0
 800edec:	d003      	beq.n	800edf6 <VL53L5CX_SetAddress+0x38>
  {
    ret = VL53L5CX_ERROR;
 800edee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800edf2:	60fb      	str	r3, [r7, #12]
 800edf4:	e006      	b.n	800ee04 <VL53L5CX_SetAddress+0x46>
  }
  else
  {
    pObj->IO.Address = (uint8_t)(Address & 0xFFU);
 800edf6:	683b      	ldr	r3, [r7, #0]
 800edf8:	b2db      	uxtb	r3, r3
 800edfa:	b29a      	uxth	r2, r3
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	811a      	strh	r2, [r3, #8]
    ret = VL53L5CX_OK;
 800ee00:	2300      	movs	r3, #0
 800ee02:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800ee04:	68fb      	ldr	r3, [r7, #12]
}
 800ee06:	4618      	mov	r0, r3
 800ee08:	3710      	adds	r7, #16
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	bd80      	pop	{r7, pc}

0800ee0e <VL53L5CX_GetAddress>:
  * @param pObj    vl53l5cx context object.
  * @param *pAddress     New I2C address.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_GetAddress(VL53L5CX_Object_t *pObj, uint32_t *pAddress)
{
 800ee0e:	b480      	push	{r7}
 800ee10:	b085      	sub	sp, #20
 800ee12:	af00      	add	r7, sp, #0
 800ee14:	6078      	str	r0, [r7, #4]
 800ee16:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pAddress == NULL))
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d002      	beq.n	800ee24 <VL53L5CX_GetAddress+0x16>
 800ee1e:	683b      	ldr	r3, [r7, #0]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d103      	bne.n	800ee2c <VL53L5CX_GetAddress+0x1e>
  {
    ret = VL53L5CX_INVALID_PARAM;
 800ee24:	f06f 0301 	mvn.w	r3, #1
 800ee28:	60fb      	str	r3, [r7, #12]
 800ee2a:	e006      	b.n	800ee3a <VL53L5CX_GetAddress+0x2c>
  }
  else
  {
    *pAddress = pObj->IO.Address;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	891b      	ldrh	r3, [r3, #8]
 800ee30:	461a      	mov	r2, r3
 800ee32:	683b      	ldr	r3, [r7, #0]
 800ee34:	601a      	str	r2, [r3, #0]
    ret = VL53L5CX_OK;
 800ee36:	2300      	movs	r3, #0
 800ee38:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800ee3a:	68fb      	ldr	r3, [r7, #12]
}
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	3714      	adds	r7, #20
 800ee40:	46bd      	mov	sp, r7
 800ee42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee46:	4770      	bx	lr

0800ee48 <VL53L5CX_SetPowerMode>:
  * @param pObj    vl53l5cx context object.
  * @param PowerMode    New power mode to be entered.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_SetPowerMode(VL53L5CX_Object_t *pObj, uint32_t PowerMode)
{
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b084      	sub	sp, #16
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]
 800ee50:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d103      	bne.n	800ee60 <VL53L5CX_SetPowerMode+0x18>
  {
    ret = VL53L5CX_INVALID_PARAM;
 800ee58:	f06f 0301 	mvn.w	r3, #1
 800ee5c:	60fb      	str	r3, [r7, #12]
 800ee5e:	e01a      	b.n	800ee96 <VL53L5CX_SetPowerMode+0x4e>
  }
  else if ((PowerMode != VL53L5CX_POWER_MODE_SLEEP) &&
 800ee60:	683b      	ldr	r3, [r7, #0]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d006      	beq.n	800ee74 <VL53L5CX_SetPowerMode+0x2c>
 800ee66:	683b      	ldr	r3, [r7, #0]
 800ee68:	2b01      	cmp	r3, #1
 800ee6a:	d003      	beq.n	800ee74 <VL53L5CX_SetPowerMode+0x2c>
           (PowerMode != VL53L5CX_POWER_MODE_WAKEUP))
  {
    ret = VL53L5CX_INVALID_PARAM;
 800ee6c:	f06f 0301 	mvn.w	r3, #1
 800ee70:	60fb      	str	r3, [r7, #12]
 800ee72:	e010      	b.n	800ee96 <VL53L5CX_SetPowerMode+0x4e>
  }
  else if (vl53l5cx_set_power_mode(&pObj->Dev, (uint8_t)PowerMode) != VL53L5CX_STATUS_OK)
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	3318      	adds	r3, #24
 800ee78:	683a      	ldr	r2, [r7, #0]
 800ee7a:	b2d2      	uxtb	r2, r2
 800ee7c:	4611      	mov	r1, r2
 800ee7e:	4618      	mov	r0, r3
 800ee80:	f001 f9f7 	bl	8010272 <vl53l5cx_set_power_mode>
 800ee84:	4603      	mov	r3, r0
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d003      	beq.n	800ee92 <VL53L5CX_SetPowerMode+0x4a>
  {
    ret = VL53L5CX_ERROR;
 800ee8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee8e:	60fb      	str	r3, [r7, #12]
 800ee90:	e001      	b.n	800ee96 <VL53L5CX_SetPowerMode+0x4e>
  }
  else
  {
    ret = VL53L5CX_OK;
 800ee92:	2300      	movs	r3, #0
 800ee94:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800ee96:	68fb      	ldr	r3, [r7, #12]
}
 800ee98:	4618      	mov	r0, r3
 800ee9a:	3710      	adds	r7, #16
 800ee9c:	46bd      	mov	sp, r7
 800ee9e:	bd80      	pop	{r7, pc}

0800eea0 <VL53L5CX_GetPowerMode>:
  * @param pObj    vl53l5cx context object.
  * @param *pPowerMode    pointer to variable to be filled with power mode value.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_GetPowerMode(VL53L5CX_Object_t *pObj, uint32_t *pPowerMode)
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b084      	sub	sp, #16
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
 800eea8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t powermode;

  if ((pObj == NULL) || (pPowerMode == NULL))
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d002      	beq.n	800eeb6 <VL53L5CX_GetPowerMode+0x16>
 800eeb0:	683b      	ldr	r3, [r7, #0]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d103      	bne.n	800eebe <VL53L5CX_GetPowerMode+0x1e>
  {
    ret = VL53L5CX_INVALID_PARAM;
 800eeb6:	f06f 0301 	mvn.w	r3, #1
 800eeba:	60fb      	str	r3, [r7, #12]
 800eebc:	e017      	b.n	800eeee <VL53L5CX_GetPowerMode+0x4e>
  }
  else if (vl53l5cx_get_power_mode(&pObj->Dev, &powermode) != VL53L5CX_STATUS_OK)
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	3318      	adds	r3, #24
 800eec2:	f107 020b 	add.w	r2, r7, #11
 800eec6:	4611      	mov	r1, r2
 800eec8:	4618      	mov	r0, r3
 800eeca:	f001 f98f 	bl	80101ec <vl53l5cx_get_power_mode>
 800eece:	4603      	mov	r3, r0
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d006      	beq.n	800eee2 <VL53L5CX_GetPowerMode+0x42>
  {
    *pPowerMode = 0;
 800eed4:	683b      	ldr	r3, [r7, #0]
 800eed6:	2200      	movs	r2, #0
 800eed8:	601a      	str	r2, [r3, #0]
    ret = VL53L5CX_ERROR;
 800eeda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eede:	60fb      	str	r3, [r7, #12]
 800eee0:	e005      	b.n	800eeee <VL53L5CX_GetPowerMode+0x4e>
  }
  else
  {
    *pPowerMode = (uint32_t)powermode;
 800eee2:	7afb      	ldrb	r3, [r7, #11]
 800eee4:	461a      	mov	r2, r3
 800eee6:	683b      	ldr	r3, [r7, #0]
 800eee8:	601a      	str	r2, [r3, #0]
    ret = VL53L5CX_OK;
 800eeea:	2300      	movs	r3, #0
 800eeec:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800eeee:	68fb      	ldr	r3, [r7, #12]
}
 800eef0:	4618      	mov	r0, r3
 800eef2:	3710      	adds	r7, #16
 800eef4:	46bd      	mov	sp, r7
 800eef6:	bd80      	pop	{r7, pc}

0800eef8 <vl53l5cx_poll_for_measurement>:

/** @defgroup VL53L5CX_Private_Functions Private Functions
  * @{
  */
static int32_t vl53l5cx_poll_for_measurement(VL53L5CX_Object_t *pObj, uint32_t Timeout)
{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b086      	sub	sp, #24
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
 800ef00:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 800ef02:	2300      	movs	r3, #0
 800ef04:	73fb      	strb	r3, [r7, #15]

  ret =  VL53L5CX_TIMEOUT;
 800ef06:	f06f 0302 	mvn.w	r3, #2
 800ef0a:	617b      	str	r3, [r7, #20]
  TickStart = pObj->IO.GetTick();
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	695b      	ldr	r3, [r3, #20]
 800ef10:	4798      	blx	r3
 800ef12:	4603      	mov	r3, r0
 800ef14:	613b      	str	r3, [r7, #16]

  do
  {
    (void)vl53l5cx_check_data_ready(&pObj->Dev, &NewDataReady);
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	3318      	adds	r3, #24
 800ef1a:	f107 020f 	add.w	r2, r7, #15
 800ef1e:	4611      	mov	r1, r2
 800ef20:	4618      	mov	r0, r3
 800ef22:	f001 fc69 	bl	80107f8 <vl53l5cx_check_data_ready>

    if (NewDataReady == 1U)
 800ef26:	7bfb      	ldrb	r3, [r7, #15]
 800ef28:	2b01      	cmp	r3, #1
 800ef2a:	d102      	bne.n	800ef32 <vl53l5cx_poll_for_measurement+0x3a>
    {
      ret = VL53L5CX_OK;
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	617b      	str	r3, [r7, #20]
      break;
 800ef30:	e009      	b.n	800ef46 <vl53l5cx_poll_for_measurement+0x4e>
    }
  } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	695b      	ldr	r3, [r3, #20]
 800ef36:	4798      	blx	r3
 800ef38:	4603      	mov	r3, r0
 800ef3a:	461a      	mov	r2, r3
 800ef3c:	693b      	ldr	r3, [r7, #16]
 800ef3e:	1ad3      	subs	r3, r2, r3
 800ef40:	683a      	ldr	r2, [r7, #0]
 800ef42:	429a      	cmp	r2, r3
 800ef44:	d8e7      	bhi.n	800ef16 <vl53l5cx_poll_for_measurement+0x1e>

  return ret;
 800ef46:	697b      	ldr	r3, [r7, #20]
}
 800ef48:	4618      	mov	r0, r3
 800ef4a:	3718      	adds	r7, #24
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	bd80      	pop	{r7, pc}

0800ef50 <vl53l5cx_get_result>:

static int32_t vl53l5cx_get_result(VL53L5CX_Object_t *pObj, VL53L5CX_Result_t *pResult)
{
 800ef50:	b590      	push	{r4, r7, lr}
 800ef52:	b085      	sub	sp, #20
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
 800ef58:	6039      	str	r1, [r7, #0]
  uint8_t i, j;
  uint8_t resolution;
  uint8_t target_status;
  static VL53L5CX_ResultsData data;

  if ((pObj == NULL) || (pResult == NULL))
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d002      	beq.n	800ef66 <vl53l5cx_get_result+0x16>
 800ef60:	683b      	ldr	r3, [r7, #0]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d103      	bne.n	800ef6e <vl53l5cx_get_result+0x1e>
  {
    ret = VL53L5CX_INVALID_PARAM;
 800ef66:	f06f 0301 	mvn.w	r3, #1
 800ef6a:	60fb      	str	r3, [r7, #12]
 800ef6c:	e0cf      	b.n	800f10e <vl53l5cx_get_result+0x1be>
  }
  else if (vl53l5cx_get_resolution(&pObj->Dev, &resolution) != VL53L5CX_STATUS_OK)
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	3318      	adds	r3, #24
 800ef72:	f107 0208 	add.w	r2, r7, #8
 800ef76:	4611      	mov	r1, r2
 800ef78:	4618      	mov	r0, r3
 800ef7a:	f001 fe63 	bl	8010c44 <vl53l5cx_get_resolution>
 800ef7e:	4603      	mov	r3, r0
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d003      	beq.n	800ef8c <vl53l5cx_get_result+0x3c>
  {
    ret = VL53L5CX_ERROR;
 800ef84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ef88:	60fb      	str	r3, [r7, #12]
 800ef8a:	e0c0      	b.n	800f10e <vl53l5cx_get_result+0x1be>
  }
  else if (vl53l5cx_get_ranging_data(&pObj->Dev, &data) != VL53L5CX_STATUS_OK)
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	3318      	adds	r3, #24
 800ef90:	4961      	ldr	r1, [pc, #388]	; (800f118 <vl53l5cx_get_result+0x1c8>)
 800ef92:	4618      	mov	r0, r3
 800ef94:	f001 fc80 	bl	8010898 <vl53l5cx_get_ranging_data>
 800ef98:	4603      	mov	r3, r0
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d003      	beq.n	800efa6 <vl53l5cx_get_result+0x56>
  {
    ret = VL53L5CX_ERROR;
 800ef9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800efa2:	60fb      	str	r3, [r7, #12]
 800efa4:	e0b3      	b.n	800f10e <vl53l5cx_get_result+0x1be>
  }
  else
  {
    pResult->NumberOfZones = resolution;
 800efa6:	7a3b      	ldrb	r3, [r7, #8]
 800efa8:	461a      	mov	r2, r3
 800efaa:	683b      	ldr	r3, [r7, #0]
 800efac:	601a      	str	r2, [r3, #0]

    for (i = 0; i < resolution; i++)
 800efae:	2300      	movs	r3, #0
 800efb0:	72fb      	strb	r3, [r7, #11]
 800efb2:	e0a5      	b.n	800f100 <vl53l5cx_get_result+0x1b0>
    {
      pResult->ZoneResult[i].NumberOfTargets = data.nb_target_detected[i];
 800efb4:	7afb      	ldrb	r3, [r7, #11]
 800efb6:	7afa      	ldrb	r2, [r7, #11]
 800efb8:	4957      	ldr	r1, [pc, #348]	; (800f118 <vl53l5cx_get_result+0x1c8>)
 800efba:	440b      	add	r3, r1
 800efbc:	f893 0104 	ldrb.w	r0, [r3, #260]	; 0x104
 800efc0:	6839      	ldr	r1, [r7, #0]
 800efc2:	4613      	mov	r3, r2
 800efc4:	009b      	lsls	r3, r3, #2
 800efc6:	4413      	add	r3, r2
 800efc8:	009b      	lsls	r3, r3, #2
 800efca:	440b      	add	r3, r1
 800efcc:	3304      	adds	r3, #4
 800efce:	4602      	mov	r2, r0
 800efd0:	701a      	strb	r2, [r3, #0]

      for (j = 0; j < data.nb_target_detected[i]; j++)
 800efd2:	2300      	movs	r3, #0
 800efd4:	72bb      	strb	r3, [r7, #10]
 800efd6:	e087      	b.n	800f0e8 <vl53l5cx_get_result+0x198>
      {
        pResult->ZoneResult[i].Distance[j] = (uint32_t)data.distance_mm[(VL53L5CX_NB_TARGET_PER_ZONE * i) + j];
 800efd8:	7afa      	ldrb	r2, [r7, #11]
 800efda:	7abb      	ldrb	r3, [r7, #10]
 800efdc:	4413      	add	r3, r2
 800efde:	4a4e      	ldr	r2, [pc, #312]	; (800f118 <vl53l5cx_get_result+0x1c8>)
 800efe0:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800efe4:	005b      	lsls	r3, r3, #1
 800efe6:	4413      	add	r3, r2
 800efe8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800efec:	7afa      	ldrb	r2, [r7, #11]
 800efee:	7ab8      	ldrb	r0, [r7, #10]
 800eff0:	461c      	mov	r4, r3
 800eff2:	6839      	ldr	r1, [r7, #0]
 800eff4:	4613      	mov	r3, r2
 800eff6:	009b      	lsls	r3, r3, #2
 800eff8:	4413      	add	r3, r2
 800effa:	4403      	add	r3, r0
 800effc:	009b      	lsls	r3, r3, #2
 800effe:	440b      	add	r3, r1
 800f000:	609c      	str	r4, [r3, #8]

        /* return Ambient value if ambient rate output is enabled */
        if (pObj->IsAmbientEnabled == 1U)
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	f893 3954 	ldrb.w	r3, [r3, #2388]	; 0x954
 800f008:	2b01      	cmp	r3, #1
 800f00a:	d116      	bne.n	800f03a <vl53l5cx_get_result+0xea>
        {
          /* apply ambient value to all targets in a given zone */
          pResult->ZoneResult[i].Ambient[j] = (float_t)data.ambient_per_spad[i];
 800f00c:	7afb      	ldrb	r3, [r7, #11]
 800f00e:	4a42      	ldr	r2, [pc, #264]	; (800f118 <vl53l5cx_get_result+0x1c8>)
 800f010:	009b      	lsls	r3, r3, #2
 800f012:	4413      	add	r3, r2
 800f014:	685b      	ldr	r3, [r3, #4]
 800f016:	7afa      	ldrb	r2, [r7, #11]
 800f018:	7ab8      	ldrb	r0, [r7, #10]
 800f01a:	ee07 3a90 	vmov	s15, r3
 800f01e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f022:	6839      	ldr	r1, [r7, #0]
 800f024:	4613      	mov	r3, r2
 800f026:	009b      	lsls	r3, r3, #2
 800f028:	4413      	add	r3, r2
 800f02a:	4403      	add	r3, r0
 800f02c:	3302      	adds	r3, #2
 800f02e:	009b      	lsls	r3, r3, #2
 800f030:	440b      	add	r3, r1
 800f032:	3308      	adds	r3, #8
 800f034:	edc3 7a00 	vstr	s15, [r3]
 800f038:	e00d      	b.n	800f056 <vl53l5cx_get_result+0x106>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 800f03a:	7afa      	ldrb	r2, [r7, #11]
 800f03c:	7ab8      	ldrb	r0, [r7, #10]
 800f03e:	6839      	ldr	r1, [r7, #0]
 800f040:	4613      	mov	r3, r2
 800f042:	009b      	lsls	r3, r3, #2
 800f044:	4413      	add	r3, r2
 800f046:	4403      	add	r3, r0
 800f048:	3302      	adds	r3, #2
 800f04a:	009b      	lsls	r3, r3, #2
 800f04c:	440b      	add	r3, r1
 800f04e:	3308      	adds	r3, #8
 800f050:	f04f 0200 	mov.w	r2, #0
 800f054:	601a      	str	r2, [r3, #0]
        }

        /* return Signal value if signal rate output is enabled */
        if (pObj->IsSignalEnabled == 1U)
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	f893 3955 	ldrb.w	r3, [r3, #2389]	; 0x955
 800f05c:	2b01      	cmp	r3, #1
 800f05e:	d119      	bne.n	800f094 <vl53l5cx_get_result+0x144>
        {
          pResult->ZoneResult[i].Signal[j] =
            (float_t)data.signal_per_spad[(VL53L5CX_NB_TARGET_PER_ZONE * i) + j];
 800f060:	7afa      	ldrb	r2, [r7, #11]
 800f062:	7abb      	ldrb	r3, [r7, #10]
 800f064:	4413      	add	r3, r2
 800f066:	4a2c      	ldr	r2, [pc, #176]	; (800f118 <vl53l5cx_get_result+0x1c8>)
 800f068:	3350      	adds	r3, #80	; 0x50
 800f06a:	009b      	lsls	r3, r3, #2
 800f06c:	4413      	add	r3, r2
 800f06e:	685b      	ldr	r3, [r3, #4]
          pResult->ZoneResult[i].Signal[j] =
 800f070:	7afa      	ldrb	r2, [r7, #11]
 800f072:	7ab8      	ldrb	r0, [r7, #10]
            (float_t)data.signal_per_spad[(VL53L5CX_NB_TARGET_PER_ZONE * i) + j];
 800f074:	ee07 3a90 	vmov	s15, r3
 800f078:	eef8 7a67 	vcvt.f32.u32	s15, s15
          pResult->ZoneResult[i].Signal[j] =
 800f07c:	6839      	ldr	r1, [r7, #0]
 800f07e:	4613      	mov	r3, r2
 800f080:	009b      	lsls	r3, r3, #2
 800f082:	4413      	add	r3, r2
 800f084:	4403      	add	r3, r0
 800f086:	3304      	adds	r3, #4
 800f088:	009b      	lsls	r3, r3, #2
 800f08a:	440b      	add	r3, r1
 800f08c:	3304      	adds	r3, #4
 800f08e:	edc3 7a00 	vstr	s15, [r3]
 800f092:	e00d      	b.n	800f0b0 <vl53l5cx_get_result+0x160>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 800f094:	7afa      	ldrb	r2, [r7, #11]
 800f096:	7ab8      	ldrb	r0, [r7, #10]
 800f098:	6839      	ldr	r1, [r7, #0]
 800f09a:	4613      	mov	r3, r2
 800f09c:	009b      	lsls	r3, r3, #2
 800f09e:	4413      	add	r3, r2
 800f0a0:	4403      	add	r3, r0
 800f0a2:	3304      	adds	r3, #4
 800f0a4:	009b      	lsls	r3, r3, #2
 800f0a6:	440b      	add	r3, r1
 800f0a8:	3304      	adds	r3, #4
 800f0aa:	f04f 0200 	mov.w	r2, #0
 800f0ae:	601a      	str	r2, [r3, #0]
        }

        target_status = data.target_status[(VL53L5CX_NB_TARGET_PER_ZONE * i) + j];
 800f0b0:	7afa      	ldrb	r2, [r7, #11]
 800f0b2:	7abb      	ldrb	r3, [r7, #10]
 800f0b4:	4413      	add	r3, r2
 800f0b6:	4a18      	ldr	r2, [pc, #96]	; (800f118 <vl53l5cx_get_result+0x1c8>)
 800f0b8:	4413      	add	r3, r2
 800f0ba:	f893 3304 	ldrb.w	r3, [r3, #772]	; 0x304
 800f0be:	727b      	strb	r3, [r7, #9]
        pResult->ZoneResult[i].Status[j] = vl53l5cx_map_target_status(target_status);
 800f0c0:	7a7b      	ldrb	r3, [r7, #9]
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	f000 f82a 	bl	800f11c <vl53l5cx_map_target_status>
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	7afa      	ldrb	r2, [r7, #11]
 800f0cc:	7ab8      	ldrb	r0, [r7, #10]
 800f0ce:	461c      	mov	r4, r3
 800f0d0:	6839      	ldr	r1, [r7, #0]
 800f0d2:	4613      	mov	r3, r2
 800f0d4:	009b      	lsls	r3, r3, #2
 800f0d6:	4413      	add	r3, r2
 800f0d8:	4403      	add	r3, r0
 800f0da:	3302      	adds	r3, #2
 800f0dc:	009b      	lsls	r3, r3, #2
 800f0de:	440b      	add	r3, r1
 800f0e0:	605c      	str	r4, [r3, #4]
      for (j = 0; j < data.nb_target_detected[i]; j++)
 800f0e2:	7abb      	ldrb	r3, [r7, #10]
 800f0e4:	3301      	adds	r3, #1
 800f0e6:	72bb      	strb	r3, [r7, #10]
 800f0e8:	7afb      	ldrb	r3, [r7, #11]
 800f0ea:	4a0b      	ldr	r2, [pc, #44]	; (800f118 <vl53l5cx_get_result+0x1c8>)
 800f0ec:	4413      	add	r3, r2
 800f0ee:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f0f2:	7aba      	ldrb	r2, [r7, #10]
 800f0f4:	429a      	cmp	r2, r3
 800f0f6:	f4ff af6f 	bcc.w	800efd8 <vl53l5cx_get_result+0x88>
    for (i = 0; i < resolution; i++)
 800f0fa:	7afb      	ldrb	r3, [r7, #11]
 800f0fc:	3301      	adds	r3, #1
 800f0fe:	72fb      	strb	r3, [r7, #11]
 800f100:	7a3b      	ldrb	r3, [r7, #8]
 800f102:	7afa      	ldrb	r2, [r7, #11]
 800f104:	429a      	cmp	r2, r3
 800f106:	f4ff af55 	bcc.w	800efb4 <vl53l5cx_get_result+0x64>
      }
    }

    ret = VL53L5CX_OK;
 800f10a:	2300      	movs	r3, #0
 800f10c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800f10e:	68fb      	ldr	r3, [r7, #12]
}
 800f110:	4618      	mov	r0, r3
 800f112:	3714      	adds	r7, #20
 800f114:	46bd      	mov	sp, r7
 800f116:	bd90      	pop	{r4, r7, pc}
 800f118:	20003870 	.word	0x20003870

0800f11c <vl53l5cx_map_target_status>:

static uint8_t vl53l5cx_map_target_status(uint8_t status)
{
 800f11c:	b480      	push	{r7}
 800f11e:	b085      	sub	sp, #20
 800f120:	af00      	add	r7, sp, #0
 800f122:	4603      	mov	r3, r0
 800f124:	71fb      	strb	r3, [r7, #7]
  uint8_t ret;

  if ((status == 5U) || (status == 9U))
 800f126:	79fb      	ldrb	r3, [r7, #7]
 800f128:	2b05      	cmp	r3, #5
 800f12a:	d002      	beq.n	800f132 <vl53l5cx_map_target_status+0x16>
 800f12c:	79fb      	ldrb	r3, [r7, #7]
 800f12e:	2b09      	cmp	r3, #9
 800f130:	d102      	bne.n	800f138 <vl53l5cx_map_target_status+0x1c>
  {
    ret = 0U; /* ranging is OK */
 800f132:	2300      	movs	r3, #0
 800f134:	73fb      	strb	r3, [r7, #15]
 800f136:	e007      	b.n	800f148 <vl53l5cx_map_target_status+0x2c>
  }
  else if (status == 0U)
 800f138:	79fb      	ldrb	r3, [r7, #7]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d102      	bne.n	800f144 <vl53l5cx_map_target_status+0x28>
  {
    ret = 255U; /* no update */
 800f13e:	23ff      	movs	r3, #255	; 0xff
 800f140:	73fb      	strb	r3, [r7, #15]
 800f142:	e001      	b.n	800f148 <vl53l5cx_map_target_status+0x2c>
  }
  else
  {
    ret = status; /* return device status otherwise */
 800f144:	79fb      	ldrb	r3, [r7, #7]
 800f146:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f148:	7bfb      	ldrb	r3, [r7, #15]
}
 800f14a:	4618      	mov	r0, r3
 800f14c:	3714      	adds	r7, #20
 800f14e:	46bd      	mov	sp, r7
 800f150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f154:	4770      	bx	lr

0800f156 <_vl53l5cx_poll_for_answer>:
		uint8_t					size,
		uint8_t					pos,
		uint16_t				address,
		uint8_t					mask,
		uint8_t					expected_value)
{
 800f156:	b580      	push	{r7, lr}
 800f158:	b084      	sub	sp, #16
 800f15a:	af00      	add	r7, sp, #0
 800f15c:	6078      	str	r0, [r7, #4]
 800f15e:	4608      	mov	r0, r1
 800f160:	4611      	mov	r1, r2
 800f162:	461a      	mov	r2, r3
 800f164:	4603      	mov	r3, r0
 800f166:	70fb      	strb	r3, [r7, #3]
 800f168:	460b      	mov	r3, r1
 800f16a:	70bb      	strb	r3, [r7, #2]
 800f16c:	4613      	mov	r3, r2
 800f16e:	803b      	strh	r3, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 800f170:	2300      	movs	r3, #0
 800f172:	73fb      	strb	r3, [r7, #15]
	uint8_t timeout = 0;
 800f174:	2300      	movs	r3, #0
 800f176:	73bb      	strb	r3, [r7, #14]

	do {
		status |= RdMulti(&(p_dev->platform), address,
 800f178:	6878      	ldr	r0, [r7, #4]
				p_dev->temp_buffer, size);
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
		status |= RdMulti(&(p_dev->platform), address,
 800f180:	78fb      	ldrb	r3, [r7, #3]
 800f182:	8839      	ldrh	r1, [r7, #0]
 800f184:	f7ff fa5d 	bl	800e642 <RdMulti>
 800f188:	4603      	mov	r3, r0
 800f18a:	461a      	mov	r2, r3
 800f18c:	7bfb      	ldrb	r3, [r7, #15]
 800f18e:	4313      	orrs	r3, r2
 800f190:	73fb      	strb	r3, [r7, #15]
		status |= WaitMs(&(p_dev->platform), 10);
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	210a      	movs	r1, #10
 800f196:	4618      	mov	r0, r3
 800f198:	f7ff faa0 	bl	800e6dc <WaitMs>
 800f19c:	4603      	mov	r3, r0
 800f19e:	461a      	mov	r2, r3
 800f1a0:	7bfb      	ldrb	r3, [r7, #15]
 800f1a2:	4313      	orrs	r3, r2
 800f1a4:	73fb      	strb	r3, [r7, #15]

		if(timeout >= (uint8_t)200)	/* 2s timeout */
 800f1a6:	7bbb      	ldrb	r3, [r7, #14]
 800f1a8:	2bc7      	cmp	r3, #199	; 0xc7
 800f1aa:	d904      	bls.n	800f1b6 <_vl53l5cx_poll_for_answer+0x60>
		{
			status |= (uint8_t)VL53L5CX_STATUS_TIMEOUT_ERROR;
 800f1ac:	7bfb      	ldrb	r3, [r7, #15]
 800f1ae:	f043 0301 	orr.w	r3, r3, #1
 800f1b2:	73fb      	strb	r3, [r7, #15]
			break;
 800f1b4:	e01a      	b.n	800f1ec <_vl53l5cx_poll_for_answer+0x96>
		}else if((size >= (uint8_t)4) 
 800f1b6:	78fb      	ldrb	r3, [r7, #3]
 800f1b8:	2b03      	cmp	r3, #3
 800f1ba:	d909      	bls.n	800f1d0 <_vl53l5cx_poll_for_answer+0x7a>
                         && (p_dev->temp_buffer[2] >= (uint8_t)0x7f))
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	f893 3512 	ldrb.w	r3, [r3, #1298]	; 0x512
 800f1c2:	2b7e      	cmp	r3, #126	; 0x7e
 800f1c4:	d904      	bls.n	800f1d0 <_vl53l5cx_poll_for_answer+0x7a>
		{
			status |= VL53L5CX_MCU_ERROR;
 800f1c6:	7bfb      	ldrb	r3, [r7, #15]
 800f1c8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800f1cc:	73fb      	strb	r3, [r7, #15]
			break;
 800f1ce:	e00d      	b.n	800f1ec <_vl53l5cx_poll_for_answer+0x96>
		}
		else
		{
			timeout++;
 800f1d0:	7bbb      	ldrb	r3, [r7, #14]
 800f1d2:	3301      	adds	r3, #1
 800f1d4:	73bb      	strb	r3, [r7, #14]
		}
	}while ((p_dev->temp_buffer[pos] & mask) != expected_value);
 800f1d6:	78bb      	ldrb	r3, [r7, #2]
 800f1d8:	687a      	ldr	r2, [r7, #4]
 800f1da:	4413      	add	r3, r2
 800f1dc:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 800f1e0:	7e3b      	ldrb	r3, [r7, #24]
 800f1e2:	4013      	ands	r3, r2
 800f1e4:	b2db      	uxtb	r3, r3
 800f1e6:	7f3a      	ldrb	r2, [r7, #28]
 800f1e8:	429a      	cmp	r2, r3
 800f1ea:	d1c5      	bne.n	800f178 <_vl53l5cx_poll_for_answer+0x22>

	return status;
 800f1ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	3710      	adds	r7, #16
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	bd80      	pop	{r7, pc}

0800f1f6 <_vl53l5cx_poll_for_mcu_boot>:
 * Inner function, not available outside this file. This function is used to
 * wait for the MCU to boot.
 */
static uint8_t _vl53l5cx_poll_for_mcu_boot(
              VL53L5CX_Configuration      *p_dev)
{
 800f1f6:	b580      	push	{r7, lr}
 800f1f8:	b084      	sub	sp, #16
 800f1fa:	af00      	add	r7, sp, #0
 800f1fc:	6078      	str	r0, [r7, #4]
   uint8_t go2_status0, go2_status1, status = VL53L5CX_STATUS_OK;
 800f1fe:	2300      	movs	r3, #0
 800f200:	73fb      	strb	r3, [r7, #15]
   uint16_t timeout = 0;
 800f202:	2300      	movs	r3, #0
 800f204:	81bb      	strh	r3, [r7, #12]

   do {
		status |= RdByte(&(p_dev->platform), 0x06, &go2_status0);
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	f107 020b 	add.w	r2, r7, #11
 800f20c:	2106      	movs	r1, #6
 800f20e:	4618      	mov	r0, r3
 800f210:	f7ff f9d5 	bl	800e5be <RdByte>
 800f214:	4603      	mov	r3, r0
 800f216:	461a      	mov	r2, r3
 800f218:	7bfb      	ldrb	r3, [r7, #15]
 800f21a:	4313      	orrs	r3, r2
 800f21c:	73fb      	strb	r3, [r7, #15]
		if((go2_status0 & (uint8_t)0x80) != (uint8_t)0){
 800f21e:	7afb      	ldrb	r3, [r7, #11]
 800f220:	b25b      	sxtb	r3, r3
 800f222:	2b00      	cmp	r3, #0
 800f224:	da10      	bge.n	800f248 <_vl53l5cx_poll_for_mcu_boot+0x52>
			status |= RdByte(&(p_dev->platform), 0x07, &go2_status1);
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	f107 020a 	add.w	r2, r7, #10
 800f22c:	2107      	movs	r1, #7
 800f22e:	4618      	mov	r0, r3
 800f230:	f7ff f9c5 	bl	800e5be <RdByte>
 800f234:	4603      	mov	r3, r0
 800f236:	461a      	mov	r2, r3
 800f238:	7bfb      	ldrb	r3, [r7, #15]
 800f23a:	4313      	orrs	r3, r2
 800f23c:	73fb      	strb	r3, [r7, #15]
			status |= go2_status1;
 800f23e:	7aba      	ldrb	r2, [r7, #10]
 800f240:	7bfb      	ldrb	r3, [r7, #15]
 800f242:	4313      	orrs	r3, r2
 800f244:	73fb      	strb	r3, [r7, #15]
			break;
 800f246:	e012      	b.n	800f26e <_vl53l5cx_poll_for_mcu_boot+0x78>
		}
		(void)WaitMs(&(p_dev->platform), 1);
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	2101      	movs	r1, #1
 800f24c:	4618      	mov	r0, r3
 800f24e:	f7ff fa45 	bl	800e6dc <WaitMs>
		timeout++;
 800f252:	89bb      	ldrh	r3, [r7, #12]
 800f254:	3301      	adds	r3, #1
 800f256:	81bb      	strh	r3, [r7, #12]

		if((go2_status0 & (uint8_t)0x1) != (uint8_t)0){
 800f258:	7afb      	ldrb	r3, [r7, #11]
 800f25a:	f003 0301 	and.w	r3, r3, #1
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d104      	bne.n	800f26c <_vl53l5cx_poll_for_mcu_boot+0x76>
			break;
		}

	}while (timeout < (uint16_t)500);
 800f262:	89bb      	ldrh	r3, [r7, #12]
 800f264:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800f268:	d3cd      	bcc.n	800f206 <_vl53l5cx_poll_for_mcu_boot+0x10>
 800f26a:	e000      	b.n	800f26e <_vl53l5cx_poll_for_mcu_boot+0x78>
			break;
 800f26c:	bf00      	nop

   return status;
 800f26e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f270:	4618      	mov	r0, r3
 800f272:	3710      	adds	r7, #16
 800f274:	46bd      	mov	sp, r7
 800f276:	bd80      	pop	{r7, pc}

0800f278 <_vl53l5cx_send_offset_data>:
 */

static uint8_t _vl53l5cx_send_offset_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t						resolution)
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	b0ea      	sub	sp, #424	; 0x1a8
 800f27c:	af02      	add	r7, sp, #8
 800f27e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800f282:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800f286:	6018      	str	r0, [r3, #0]
 800f288:	460a      	mov	r2, r1
 800f28a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800f28e:	f2a3 139d 	subw	r3, r3, #413	; 0x19d
 800f292:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 800f294:	2300      	movs	r3, #0
 800f296:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
	uint32_t signal_grid[64];
	int16_t range_grid[64];
	uint8_t dss_4x4[] = {0x0F, 0x04, 0x04, 0x00, 0x08, 0x10, 0x10, 0x07};
 800f29a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800f29e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800f2a2:	4ad9      	ldr	r2, [pc, #868]	; (800f608 <_vl53l5cx_send_offset_data+0x390>)
 800f2a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f2a8:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0F, 0x03, 0x01, 0x01, 0xE4};
 800f2ac:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800f2b0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800f2b4:	4ad5      	ldr	r2, [pc, #852]	; (800f60c <_vl53l5cx_send_offset_data+0x394>)
 800f2b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f2ba:	e883 0003 	stmia.w	r3, {r0, r1}
	int8_t i, j;
	uint16_t k;

	(void)memcpy(p_dev->temp_buffer,
 800f2be:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800f2c2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	f503 60a2 	add.w	r0, r3, #1296	; 0x510
               p_dev->offset_data, VL53L5CX_OFFSET_BUFFER_SIZE);
 800f2cc:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800f2d0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	3320      	adds	r3, #32
	(void)memcpy(p_dev->temp_buffer,
 800f2d8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800f2dc:	4619      	mov	r1, r3
 800f2de:	f00e fb36 	bl	801d94e <memcpy>

	/* Data extrapolation is required for 4X4 offset */
	if(resolution == (uint8_t)VL53L5CX_RESOLUTION_4X4){
 800f2e2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800f2e6:	f2a3 139d 	subw	r3, r3, #413	; 0x19d
 800f2ea:	781b      	ldrb	r3, [r3, #0]
 800f2ec:	2b10      	cmp	r3, #16
 800f2ee:	f040 8122 	bne.w	800f536 <_vl53l5cx_send_offset_data+0x2be>
		(void)memcpy(&(p_dev->temp_buffer[0x10]), dss_4x4, sizeof(dss_4x4));
 800f2f2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800f2f6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	f503 62a4 	add.w	r2, r3, #1312	; 0x520
 800f300:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800f304:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800f308:	cb03      	ldmia	r3!, {r0, r1}
 800f30a:	6010      	str	r0, [r2, #0]
 800f30c:	6051      	str	r1, [r2, #4]
		SwapBuffer(p_dev->temp_buffer, VL53L5CX_OFFSET_BUFFER_SIZE);
 800f30e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800f312:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 800f31c:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 800f320:	4618      	mov	r0, r3
 800f322:	f7ff f9a5 	bl	800e670 <SwapBuffer>
		(void)memcpy(signal_grid,&(p_dev->temp_buffer[0x3C]),
 800f326:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800f32a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	f203 514c 	addw	r1, r3, #1356	; 0x54c
 800f334:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800f338:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f33c:	4618      	mov	r0, r3
 800f33e:	f00e fb06 	bl	801d94e <memcpy>
			sizeof(signal_grid));
		(void)memcpy(range_grid,&(p_dev->temp_buffer[0x140]),
 800f342:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800f346:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	f503 61ca 	add.w	r1, r3, #1616	; 0x650
 800f350:	f107 0318 	add.w	r3, r7, #24
 800f354:	2280      	movs	r2, #128	; 0x80
 800f356:	4618      	mov	r0, r3
 800f358:	f00e faf9 	bl	801d94e <memcpy>
			sizeof(range_grid));

		for (j = 0; j < (int8_t)4; j++)
 800f35c:	2300      	movs	r3, #0
 800f35e:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 800f362:	e0ac      	b.n	800f4be <_vl53l5cx_send_offset_data+0x246>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 800f364:	2300      	movs	r3, #0
 800f366:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
 800f36a:	e09c      	b.n	800f4a6 <_vl53l5cx_send_offset_data+0x22e>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+ (int8_t)0]
 800f36c:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 800f370:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 800f374:	00db      	lsls	r3, r3, #3
 800f376:	4413      	add	r3, r2
 800f378:	005a      	lsls	r2, r3, #1
 800f37a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800f37e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f382:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+(int8_t)1]
 800f386:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 800f38a:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 800f38e:	00db      	lsls	r3, r3, #3
 800f390:	440b      	add	r3, r1
 800f392:	005b      	lsls	r3, r3, #1
 800f394:	1c59      	adds	r1, r3, #1
 800f396:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800f39a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f39e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f3a2:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)8]
 800f3a4:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 800f3a8:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 800f3ac:	00db      	lsls	r3, r3, #3
 800f3ae:	440b      	add	r3, r1
 800f3b0:	3304      	adds	r3, #4
 800f3b2:	0059      	lsls	r1, r3, #1
 800f3b4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800f3b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f3bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f3c0:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)9])
 800f3c2:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 800f3c6:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 800f3ca:	00db      	lsls	r3, r3, #3
 800f3cc:	440b      	add	r3, r1
 800f3ce:	005b      	lsls	r3, r3, #1
 800f3d0:	f103 0109 	add.w	r1, r3, #9
 800f3d4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800f3d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f3dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f3e0:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 800f3e2:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 800f3e6:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 800f3ea:	0092      	lsls	r2, r2, #2
 800f3ec:	440a      	add	r2, r1
                                  /(uint32_t)4;
 800f3ee:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 800f3f0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800f3f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f3f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				range_grid[i+(4*j)] =
				(range_grid[(2*i)+(16*j)]
 800f3fc:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 800f400:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 800f404:	00db      	lsls	r3, r3, #3
 800f406:	4413      	add	r3, r2
 800f408:	005a      	lsls	r2, r3, #1
 800f40a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800f40e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800f412:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800f416:	4619      	mov	r1, r3
				+ range_grid[(2*i)+(16*j)+1]
 800f418:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 800f41c:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 800f420:	00db      	lsls	r3, r3, #3
 800f422:	4413      	add	r3, r2
 800f424:	005b      	lsls	r3, r3, #1
 800f426:	1c5a      	adds	r2, r3, #1
 800f428:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800f42c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800f430:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800f434:	440b      	add	r3, r1
				+ range_grid[(2*i)+(16*j)+8]
 800f436:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 800f43a:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 800f43e:	00d2      	lsls	r2, r2, #3
 800f440:	440a      	add	r2, r1
 800f442:	3204      	adds	r2, #4
 800f444:	0051      	lsls	r1, r2, #1
 800f446:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 800f44a:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 800f44e:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 800f452:	4413      	add	r3, r2
				+ range_grid[(2*i)+(16*j)+9])
 800f454:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 800f458:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 800f45c:	00d2      	lsls	r2, r2, #3
 800f45e:	440a      	add	r2, r1
 800f460:	0052      	lsls	r2, r2, #1
 800f462:	f102 0109 	add.w	r1, r2, #9
 800f466:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 800f46a:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 800f46e:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 800f472:	4413      	add	r3, r2
                                  /(int16_t)4;
 800f474:	2b00      	cmp	r3, #0
 800f476:	da00      	bge.n	800f47a <_vl53l5cx_send_offset_data+0x202>
 800f478:	3303      	adds	r3, #3
 800f47a:	109b      	asrs	r3, r3, #2
 800f47c:	4619      	mov	r1, r3
				range_grid[i+(4*j)] =
 800f47e:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 800f482:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 800f486:	009b      	lsls	r3, r3, #2
 800f488:	441a      	add	r2, r3
 800f48a:	b209      	sxth	r1, r1
 800f48c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800f490:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800f494:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (i = 0; i < (int8_t)4 ; i++)
 800f498:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 800f49c:	b2db      	uxtb	r3, r3
 800f49e:	3301      	adds	r3, #1
 800f4a0:	b2db      	uxtb	r3, r3
 800f4a2:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
 800f4a6:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 800f4aa:	2b03      	cmp	r3, #3
 800f4ac:	f77f af5e 	ble.w	800f36c <_vl53l5cx_send_offset_data+0xf4>
		for (j = 0; j < (int8_t)4; j++)
 800f4b0:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 800f4b4:	b2db      	uxtb	r3, r3
 800f4b6:	3301      	adds	r3, #1
 800f4b8:	b2db      	uxtb	r3, r3
 800f4ba:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 800f4be:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 800f4c2:	2b03      	cmp	r3, #3
 800f4c4:	f77f af4e 	ble.w	800f364 <_vl53l5cx_send_offset_data+0xec>
			}
		}
	    (void)memset(&range_grid[0x10], 0, (uint16_t)96);
 800f4c8:	f107 0318 	add.w	r3, r7, #24
 800f4cc:	3320      	adds	r3, #32
 800f4ce:	2260      	movs	r2, #96	; 0x60
 800f4d0:	2100      	movs	r1, #0
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	f00e f9f4 	bl	801d8c0 <memset>
	    (void)memset(&signal_grid[0x10], 0, (uint16_t)192);
 800f4d8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800f4dc:	3340      	adds	r3, #64	; 0x40
 800f4de:	22c0      	movs	r2, #192	; 0xc0
 800f4e0:	2100      	movs	r1, #0
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	f00e f9ec 	bl	801d8c0 <memset>
            (void)memcpy(&(p_dev->temp_buffer[0x3C]),
 800f4e8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800f4ec:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 800f4f6:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800f4fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f4fe:	4618      	mov	r0, r3
 800f500:	f00e fa25 	bl	801d94e <memcpy>
		signal_grid, sizeof(signal_grid));
            (void)memcpy(&(p_dev->temp_buffer[0x140]),
 800f504:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800f508:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 800f512:	f107 0118 	add.w	r1, r7, #24
 800f516:	2280      	movs	r2, #128	; 0x80
 800f518:	4618      	mov	r0, r3
 800f51a:	f00e fa18 	bl	801d94e <memcpy>
		range_grid, sizeof(range_grid));
            SwapBuffer(p_dev->temp_buffer, VL53L5CX_OFFSET_BUFFER_SIZE);
 800f51e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800f522:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 800f52c:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 800f530:	4618      	mov	r0, r3
 800f532:	f7ff f89d 	bl	800e670 <SwapBuffer>
	}

	for(k = 0; k < (VL53L5CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 800f536:	2300      	movs	r3, #0
 800f538:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c
 800f53c:	e01b      	b.n	800f576 <_vl53l5cx_send_offset_data+0x2fe>
	{
		p_dev->temp_buffer[k] = p_dev->temp_buffer[k + (uint16_t)8];
 800f53e:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 800f542:	f103 0208 	add.w	r2, r3, #8
 800f546:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 800f54a:	f507 71d0 	add.w	r1, r7, #416	; 0x1a0
 800f54e:	f5a1 71ce 	sub.w	r1, r1, #412	; 0x19c
 800f552:	6809      	ldr	r1, [r1, #0]
 800f554:	440a      	add	r2, r1
 800f556:	f892 1510 	ldrb.w	r1, [r2, #1296]	; 0x510
 800f55a:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 800f55e:	f5a2 72ce 	sub.w	r2, r2, #412	; 0x19c
 800f562:	6812      	ldr	r2, [r2, #0]
 800f564:	4413      	add	r3, r2
 800f566:	460a      	mov	r2, r1
 800f568:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
	for(k = 0; k < (VL53L5CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 800f56c:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 800f570:	3301      	adds	r3, #1
 800f572:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c
 800f576:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 800f57a:	f5b3 7ff2 	cmp.w	r3, #484	; 0x1e4
 800f57e:	d3de      	bcc.n	800f53e <_vl53l5cx_send_offset_data+0x2c6>
	}

	(void)memcpy(&(p_dev->temp_buffer[0x1E0]), footer, 8);
 800f580:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800f584:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	f503 62de 	add.w	r2, r3, #1776	; 0x6f0
 800f58e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800f592:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800f596:	cb03      	ldmia	r3!, {r0, r1}
 800f598:	6010      	str	r0, [r2, #0]
 800f59a:	6051      	str	r1, [r2, #4]
	status |= WrMulti(&(p_dev->platform), 0x2e18, p_dev->temp_buffer,
 800f59c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800f5a0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800f5a4:	6818      	ldr	r0, [r3, #0]
 800f5a6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800f5aa:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 800f5b4:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
 800f5b8:	f642 6118 	movw	r1, #11800	; 0x2e18
 800f5bc:	f7ff f82a 	bl	800e614 <WrMulti>
 800f5c0:	4603      	mov	r3, r0
 800f5c2:	461a      	mov	r2, r3
 800f5c4:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 800f5c8:	4313      	orrs	r3, r2
 800f5ca:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
		VL53L5CX_OFFSET_BUFFER_SIZE);
	status |=_vl53l5cx_poll_for_answer(p_dev, 4, 1,
 800f5ce:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800f5d2:	f5a3 70ce 	sub.w	r0, r3, #412	; 0x19c
 800f5d6:	2303      	movs	r3, #3
 800f5d8:	9301      	str	r3, [sp, #4]
 800f5da:	23ff      	movs	r3, #255	; 0xff
 800f5dc:	9300      	str	r3, [sp, #0]
 800f5de:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800f5e2:	2201      	movs	r2, #1
 800f5e4:	2104      	movs	r1, #4
 800f5e6:	6800      	ldr	r0, [r0, #0]
 800f5e8:	f7ff fdb5 	bl	800f156 <_vl53l5cx_poll_for_answer>
 800f5ec:	4603      	mov	r3, r0
 800f5ee:	461a      	mov	r2, r3
 800f5f0:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 800f5f4:	4313      	orrs	r3, r2
 800f5f6:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
		VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 800f5fa:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
}
 800f5fe:	4618      	mov	r0, r3
 800f600:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 800f604:	46bd      	mov	sp, r7
 800f606:	bd80      	pop	{r7, pc}
 800f608:	080219a0 	.word	0x080219a0
 800f60c:	080219a8 	.word	0x080219a8

0800f610 <_vl53l5cx_send_xtalk_data>:
 */

static uint8_t _vl53l5cx_send_xtalk_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				resolution)
{
 800f610:	b580      	push	{r7, lr}
 800f612:	b0ca      	sub	sp, #296	; 0x128
 800f614:	af02      	add	r7, sp, #8
 800f616:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800f61a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800f61e:	6018      	str	r0, [r3, #0]
 800f620:	460a      	mov	r2, r1
 800f622:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800f626:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 800f62a:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 800f62c:	2300      	movs	r3, #0
 800f62e:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
	uint8_t res4x4[] = {0x0F, 0x04, 0x04, 0x17, 0x08, 0x10, 0x10, 0x07};
 800f632:	4a9a      	ldr	r2, [pc, #616]	; (800f89c <_vl53l5cx_send_xtalk_data+0x28c>)
 800f634:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800f638:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f63c:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t dss_4x4[] = {0x00, 0x78, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08};
 800f640:	4a97      	ldr	r2, [pc, #604]	; (800f8a0 <_vl53l5cx_send_xtalk_data+0x290>)
 800f642:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800f646:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f64a:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t profile_4x4[] = {0xA0, 0xFC, 0x01, 0x00};
 800f64e:	4b95      	ldr	r3, [pc, #596]	; (800f8a4 <_vl53l5cx_send_xtalk_data+0x294>)
 800f650:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	uint32_t signal_grid[64];
	int8_t i, j;

	(void)memcpy(p_dev->temp_buffer, &(p_dev->xtalk_data[0]),
 800f654:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800f658:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	f503 60a2 	add.w	r0, r3, #1296	; 0x510
 800f662:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800f666:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f670:	f44f 7242 	mov.w	r2, #776	; 0x308
 800f674:	4619      	mov	r1, r3
 800f676:	f00e f96a 	bl	801d94e <memcpy>
		VL53L5CX_XTALK_BUFFER_SIZE);

	/* Data extrapolation is required for 4X4 Xtalk */
	if(resolution == (uint8_t)VL53L5CX_RESOLUTION_4X4)
 800f67a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800f67e:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 800f682:	781b      	ldrb	r3, [r3, #0]
 800f684:	2b10      	cmp	r3, #16
 800f686:	f040 80d2 	bne.w	800f82e <_vl53l5cx_send_xtalk_data+0x21e>
	{
		(void)memcpy(&(p_dev->temp_buffer[0x8]),
 800f68a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800f68e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 800f698:	461a      	mov	r2, r3
 800f69a:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800f69e:	cb03      	ldmia	r3!, {r0, r1}
 800f6a0:	6010      	str	r0, [r2, #0]
 800f6a2:	6051      	str	r1, [r2, #4]
			res4x4, sizeof(res4x4));
		(void)memcpy(&(p_dev->temp_buffer[0x020]),
 800f6a4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800f6a8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 800f6b2:	461a      	mov	r2, r3
 800f6b4:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800f6b8:	cb03      	ldmia	r3!, {r0, r1}
 800f6ba:	6010      	str	r0, [r2, #0]
 800f6bc:	6051      	str	r1, [r2, #4]
			dss_4x4, sizeof(dss_4x4));

		SwapBuffer(p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 800f6be:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800f6c2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 800f6cc:	f44f 7142 	mov.w	r1, #776	; 0x308
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	f7fe ffcd 	bl	800e670 <SwapBuffer>
		(void)memcpy(signal_grid, &(p_dev->temp_buffer[0x34]),
 800f6d6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800f6da:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	f203 5144 	addw	r1, r3, #1348	; 0x544
 800f6e4:	f107 0308 	add.w	r3, r7, #8
 800f6e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	f00e f92e 	bl	801d94e <memcpy>
			sizeof(signal_grid));

		for (j = 0; j < (int8_t)4; j++)
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800f6f8:	e05d      	b.n	800f7b6 <_vl53l5cx_send_xtalk_data+0x1a6>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 800f700:	e04e      	b.n	800f7a0 <_vl53l5cx_send_xtalk_data+0x190>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+0]
 800f702:	f997 211f 	ldrsb.w	r2, [r7, #287]	; 0x11f
 800f706:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 800f70a:	00db      	lsls	r3, r3, #3
 800f70c:	4413      	add	r3, r2
 800f70e:	005a      	lsls	r2, r3, #1
 800f710:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800f714:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800f718:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+1]
 800f71c:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 800f720:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 800f724:	00db      	lsls	r3, r3, #3
 800f726:	440b      	add	r3, r1
 800f728:	005b      	lsls	r3, r3, #1
 800f72a:	1c59      	adds	r1, r3, #1
 800f72c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800f730:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800f734:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f738:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+8]
 800f73a:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 800f73e:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 800f742:	00db      	lsls	r3, r3, #3
 800f744:	440b      	add	r3, r1
 800f746:	3304      	adds	r3, #4
 800f748:	0059      	lsls	r1, r3, #1
 800f74a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800f74e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800f752:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f756:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 800f758:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 800f75c:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 800f760:	00db      	lsls	r3, r3, #3
 800f762:	440b      	add	r3, r1
 800f764:	005b      	lsls	r3, r3, #1
 800f766:	f103 0109 	add.w	r1, r3, #9
 800f76a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800f76e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800f772:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f776:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 800f778:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 800f77c:	f997 211e 	ldrsb.w	r2, [r7, #286]	; 0x11e
 800f780:	0092      	lsls	r2, r2, #2
 800f782:	440a      	add	r2, r1
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 800f784:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 800f786:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800f78a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800f78e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0; i < (int8_t)4 ; i++)
 800f792:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800f796:	b2db      	uxtb	r3, r3
 800f798:	3301      	adds	r3, #1
 800f79a:	b2db      	uxtb	r3, r3
 800f79c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 800f7a0:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800f7a4:	2b03      	cmp	r3, #3
 800f7a6:	ddac      	ble.n	800f702 <_vl53l5cx_send_xtalk_data+0xf2>
		for (j = 0; j < (int8_t)4; j++)
 800f7a8:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 800f7ac:	b2db      	uxtb	r3, r3
 800f7ae:	3301      	adds	r3, #1
 800f7b0:	b2db      	uxtb	r3, r3
 800f7b2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800f7b6:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 800f7ba:	2b03      	cmp	r3, #3
 800f7bc:	dd9d      	ble.n	800f6fa <_vl53l5cx_send_xtalk_data+0xea>
			}
		}
	    (void)memset(&signal_grid[0x10], 0, (uint32_t)192);
 800f7be:	f107 0308 	add.w	r3, r7, #8
 800f7c2:	3340      	adds	r3, #64	; 0x40
 800f7c4:	22c0      	movs	r2, #192	; 0xc0
 800f7c6:	2100      	movs	r1, #0
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	f00e f879 	bl	801d8c0 <memset>
	    (void)memcpy(&(p_dev->temp_buffer[0x34]),
 800f7ce:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800f7d2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	f203 5344 	addw	r3, r3, #1348	; 0x544
 800f7dc:	f107 0108 	add.w	r1, r7, #8
 800f7e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	f00e f8b2 	bl	801d94e <memcpy>
                  signal_grid, sizeof(signal_grid));
	    SwapBuffer(p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 800f7ea:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800f7ee:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 800f7f8:	f44f 7142 	mov.w	r1, #776	; 0x308
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	f7fe ff37 	bl	800e670 <SwapBuffer>
	    (void)memcpy(&(p_dev->temp_buffer[0x134]),
 800f802:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800f806:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	f203 6344 	addw	r3, r3, #1604	; 0x644
 800f810:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800f814:	601a      	str	r2, [r3, #0]
	    profile_4x4, sizeof(profile_4x4));
	    (void)memset(&(p_dev->temp_buffer[0x078]),0 ,
 800f816:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800f81a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 800f824:	2204      	movs	r2, #4
 800f826:	2100      	movs	r1, #0
 800f828:	4618      	mov	r0, r3
 800f82a:	f00e f849 	bl	801d8c0 <memset>
                         (uint32_t)4*sizeof(uint8_t));
	}

	status |= WrMulti(&(p_dev->platform), 0x2cf8,
 800f82e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800f832:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800f836:	6818      	ldr	r0, [r3, #0]
			p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 800f838:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800f83c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
	status |= WrMulti(&(p_dev->platform), 0x2cf8,
 800f846:	f44f 7342 	mov.w	r3, #776	; 0x308
 800f84a:	f642 41f8 	movw	r1, #11512	; 0x2cf8
 800f84e:	f7fe fee1 	bl	800e614 <WrMulti>
 800f852:	4603      	mov	r3, r0
 800f854:	461a      	mov	r2, r3
 800f856:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 800f85a:	4313      	orrs	r3, r2
 800f85c:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
	status |=_vl53l5cx_poll_for_answer(p_dev, 4, 1,
 800f860:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800f864:	f5a3 708e 	sub.w	r0, r3, #284	; 0x11c
 800f868:	2303      	movs	r3, #3
 800f86a:	9301      	str	r3, [sp, #4]
 800f86c:	23ff      	movs	r3, #255	; 0xff
 800f86e:	9300      	str	r3, [sp, #0]
 800f870:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800f874:	2201      	movs	r2, #1
 800f876:	2104      	movs	r1, #4
 800f878:	6800      	ldr	r0, [r0, #0]
 800f87a:	f7ff fc6c 	bl	800f156 <_vl53l5cx_poll_for_answer>
 800f87e:	4603      	mov	r3, r0
 800f880:	461a      	mov	r2, r3
 800f882:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 800f886:	4313      	orrs	r3, r2
 800f888:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 800f88c:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
}
 800f890:	4618      	mov	r0, r3
 800f892:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800f896:	46bd      	mov	sp, r7
 800f898:	bd80      	pop	{r7, pc}
 800f89a:	bf00      	nop
 800f89c:	080219b0 	.word	0x080219b0
 800f8a0:	080219b8 	.word	0x080219b8
 800f8a4:	0001fca0 	.word	0x0001fca0

0800f8a8 <vl53l5cx_init>:
	return status;
}

uint8_t vl53l5cx_init(
		VL53L5CX_Configuration		*p_dev)
{
 800f8a8:	b580      	push	{r7, lr}
 800f8aa:	b08a      	sub	sp, #40	; 0x28
 800f8ac:	af04      	add	r7, sp, #16
 800f8ae:	6078      	str	r0, [r7, #4]
	uint8_t tmp, status = VL53L5CX_STATUS_OK;
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	75fb      	strb	r3, [r7, #23]
	uint8_t pipe_ctrl[] = {VL53L5CX_NB_TARGET_PER_ZONE, 0x00, 0x01, 0x00};
 800f8b4:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800f8b8:	613b      	str	r3, [r7, #16]
	uint32_t single_range = 0x01;
 800f8ba:	2301      	movs	r3, #1
 800f8bc:	60fb      	str	r3, [r7, #12]

	p_dev->default_xtalk = (uint8_t*)VL53L5CX_DEFAULT_XTALK;
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	4a80      	ldr	r2, [pc, #512]	; (800fac4 <vl53l5cx_init+0x21c>)
 800f8c2:	61da      	str	r2, [r3, #28]
	p_dev->default_configuration = (uint8_t*)VL53L5CX_DEFAULT_CONFIGURATION;
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	4a80      	ldr	r2, [pc, #512]	; (800fac8 <vl53l5cx_init+0x220>)
 800f8c8:	619a      	str	r2, [r3, #24]
	p_dev->is_auto_stop_enabled = (uint8_t)0x0;
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	2200      	movs	r2, #0
 800f8ce:	f883 2934 	strb.w	r2, [r3, #2356]	; 0x934

	/* SW reboot sequence */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	2200      	movs	r2, #0
 800f8d6:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800f8da:	4618      	mov	r0, r3
 800f8dc:	f7fe fe84 	bl	800e5e8 <WrByte>
 800f8e0:	4603      	mov	r3, r0
 800f8e2:	461a      	mov	r2, r3
 800f8e4:	7dfb      	ldrb	r3, [r7, #23]
 800f8e6:	4313      	orrs	r3, r2
 800f8e8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0009, 0x04);
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	2204      	movs	r2, #4
 800f8ee:	2109      	movs	r1, #9
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	f7fe fe79 	bl	800e5e8 <WrByte>
 800f8f6:	4603      	mov	r3, r0
 800f8f8:	461a      	mov	r2, r3
 800f8fa:	7dfb      	ldrb	r3, [r7, #23]
 800f8fc:	4313      	orrs	r3, r2
 800f8fe:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	2240      	movs	r2, #64	; 0x40
 800f904:	210f      	movs	r1, #15
 800f906:	4618      	mov	r0, r3
 800f908:	f7fe fe6e 	bl	800e5e8 <WrByte>
 800f90c:	4603      	mov	r3, r0
 800f90e:	461a      	mov	r2, r3
 800f910:	7dfb      	ldrb	r3, [r7, #23]
 800f912:	4313      	orrs	r3, r2
 800f914:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x03);
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	2203      	movs	r2, #3
 800f91a:	210a      	movs	r1, #10
 800f91c:	4618      	mov	r0, r3
 800f91e:	f7fe fe63 	bl	800e5e8 <WrByte>
 800f922:	4603      	mov	r3, r0
 800f924:	461a      	mov	r2, r3
 800f926:	7dfb      	ldrb	r3, [r7, #23]
 800f928:	4313      	orrs	r3, r2
 800f92a:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7FFF, &tmp);
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	f107 0216 	add.w	r2, r7, #22
 800f932:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800f936:	4618      	mov	r0, r3
 800f938:	f7fe fe41 	bl	800e5be <RdByte>
 800f93c:	4603      	mov	r3, r0
 800f93e:	461a      	mov	r2, r3
 800f940:	7dfb      	ldrb	r3, [r7, #23]
 800f942:	4313      	orrs	r3, r2
 800f944:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x01);
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	2201      	movs	r2, #1
 800f94a:	210c      	movs	r1, #12
 800f94c:	4618      	mov	r0, r3
 800f94e:	f7fe fe4b 	bl	800e5e8 <WrByte>
 800f952:	4603      	mov	r3, r0
 800f954:	461a      	mov	r2, r3
 800f956:	7dfb      	ldrb	r3, [r7, #23]
 800f958:	4313      	orrs	r3, r2
 800f95a:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x0101, 0x00);
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	2200      	movs	r2, #0
 800f960:	f240 1101 	movw	r1, #257	; 0x101
 800f964:	4618      	mov	r0, r3
 800f966:	f7fe fe3f 	bl	800e5e8 <WrByte>
 800f96a:	4603      	mov	r3, r0
 800f96c:	461a      	mov	r2, r3
 800f96e:	7dfb      	ldrb	r3, [r7, #23]
 800f970:	4313      	orrs	r3, r2
 800f972:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0102, 0x00);
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	2200      	movs	r2, #0
 800f978:	f44f 7181 	mov.w	r1, #258	; 0x102
 800f97c:	4618      	mov	r0, r3
 800f97e:	f7fe fe33 	bl	800e5e8 <WrByte>
 800f982:	4603      	mov	r3, r0
 800f984:	461a      	mov	r2, r3
 800f986:	7dfb      	ldrb	r3, [r7, #23]
 800f988:	4313      	orrs	r3, r2
 800f98a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	2201      	movs	r2, #1
 800f990:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800f994:	4618      	mov	r0, r3
 800f996:	f7fe fe27 	bl	800e5e8 <WrByte>
 800f99a:	4603      	mov	r3, r0
 800f99c:	461a      	mov	r2, r3
 800f99e:	7dfb      	ldrb	r3, [r7, #23]
 800f9a0:	4313      	orrs	r3, r2
 800f9a2:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	2201      	movs	r2, #1
 800f9a8:	f244 0102 	movw	r1, #16386	; 0x4002
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	f7fe fe1b 	bl	800e5e8 <WrByte>
 800f9b2:	4603      	mov	r3, r0
 800f9b4:	461a      	mov	r2, r3
 800f9b6:	7dfb      	ldrb	r3, [r7, #23]
 800f9b8:	4313      	orrs	r3, r2
 800f9ba:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	2200      	movs	r2, #0
 800f9c0:	f244 0102 	movw	r1, #16386	; 0x4002
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	f7fe fe0f 	bl	800e5e8 <WrByte>
 800f9ca:	4603      	mov	r3, r0
 800f9cc:	461a      	mov	r2, r3
 800f9ce:	7dfb      	ldrb	r3, [r7, #23]
 800f9d0:	4313      	orrs	r3, r2
 800f9d2:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	2203      	movs	r2, #3
 800f9d8:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800f9dc:	4618      	mov	r0, r3
 800f9de:	f7fe fe03 	bl	800e5e8 <WrByte>
 800f9e2:	4603      	mov	r3, r0
 800f9e4:	461a      	mov	r2, r3
 800f9e6:	7dfb      	ldrb	r3, [r7, #23]
 800f9e8:	4313      	orrs	r3, r2
 800f9ea:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0103, 0x01);
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	2201      	movs	r2, #1
 800f9f0:	f240 1103 	movw	r1, #259	; 0x103
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	f7fe fdf7 	bl	800e5e8 <WrByte>
 800f9fa:	4603      	mov	r3, r0
 800f9fc:	461a      	mov	r2, r3
 800f9fe:	7dfb      	ldrb	r3, [r7, #23]
 800fa00:	4313      	orrs	r3, r2
 800fa02:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x00);
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	2200      	movs	r2, #0
 800fa08:	210c      	movs	r1, #12
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	f7fe fdec 	bl	800e5e8 <WrByte>
 800fa10:	4603      	mov	r3, r0
 800fa12:	461a      	mov	r2, r3
 800fa14:	7dfb      	ldrb	r3, [r7, #23]
 800fa16:	4313      	orrs	r3, r2
 800fa18:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x43);
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	2243      	movs	r2, #67	; 0x43
 800fa1e:	210f      	movs	r1, #15
 800fa20:	4618      	mov	r0, r3
 800fa22:	f7fe fde1 	bl	800e5e8 <WrByte>
 800fa26:	4603      	mov	r3, r0
 800fa28:	461a      	mov	r2, r3
 800fa2a:	7dfb      	ldrb	r3, [r7, #23]
 800fa2c:	4313      	orrs	r3, r2
 800fa2e:	75fb      	strb	r3, [r7, #23]
	status |= WaitMs(&(p_dev->platform), 1);
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	2101      	movs	r1, #1
 800fa34:	4618      	mov	r0, r3
 800fa36:	f7fe fe51 	bl	800e6dc <WaitMs>
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	461a      	mov	r2, r3
 800fa3e:	7dfb      	ldrb	r3, [r7, #23]
 800fa40:	4313      	orrs	r3, r2
 800fa42:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	2240      	movs	r2, #64	; 0x40
 800fa48:	210f      	movs	r1, #15
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	f7fe fdcc 	bl	800e5e8 <WrByte>
 800fa50:	4603      	mov	r3, r0
 800fa52:	461a      	mov	r2, r3
 800fa54:	7dfb      	ldrb	r3, [r7, #23]
 800fa56:	4313      	orrs	r3, r2
 800fa58:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x01);
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	2201      	movs	r2, #1
 800fa5e:	210a      	movs	r1, #10
 800fa60:	4618      	mov	r0, r3
 800fa62:	f7fe fdc1 	bl	800e5e8 <WrByte>
 800fa66:	4603      	mov	r3, r0
 800fa68:	461a      	mov	r2, r3
 800fa6a:	7dfb      	ldrb	r3, [r7, #23]
 800fa6c:	4313      	orrs	r3, r2
 800fa6e:	75fb      	strb	r3, [r7, #23]
	status |= WaitMs(&(p_dev->platform), 100);
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	2164      	movs	r1, #100	; 0x64
 800fa74:	4618      	mov	r0, r3
 800fa76:	f7fe fe31 	bl	800e6dc <WaitMs>
 800fa7a:	4603      	mov	r3, r0
 800fa7c:	461a      	mov	r2, r3
 800fa7e:	7dfb      	ldrb	r3, [r7, #23]
 800fa80:	4313      	orrs	r3, r2
 800fa82:	75fb      	strb	r3, [r7, #23]

	/* Wait for sensor booted (several ms required to get sensor ready ) */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	2200      	movs	r2, #0
 800fa88:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	f7fe fdab 	bl	800e5e8 <WrByte>
 800fa92:	4603      	mov	r3, r0
 800fa94:	461a      	mov	r2, r3
 800fa96:	7dfb      	ldrb	r3, [r7, #23]
 800fa98:	4313      	orrs	r3, r2
 800fa9a:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x06, 0xff, 1);
 800fa9c:	2301      	movs	r3, #1
 800fa9e:	9301      	str	r3, [sp, #4]
 800faa0:	23ff      	movs	r3, #255	; 0xff
 800faa2:	9300      	str	r3, [sp, #0]
 800faa4:	2306      	movs	r3, #6
 800faa6:	2200      	movs	r2, #0
 800faa8:	2101      	movs	r1, #1
 800faaa:	6878      	ldr	r0, [r7, #4]
 800faac:	f7ff fb53 	bl	800f156 <_vl53l5cx_poll_for_answer>
 800fab0:	4603      	mov	r3, r0
 800fab2:	461a      	mov	r2, r3
 800fab4:	7dfb      	ldrb	r3, [r7, #23]
 800fab6:	4313      	orrs	r3, r2
 800fab8:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 800faba:	7dfb      	ldrb	r3, [r7, #23]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	f040 8354 	bne.w	801016a <vl53l5cx_init+0x8c2>
 800fac2:	e003      	b.n	800facc <vl53l5cx_init+0x224>
 800fac4:	08038044 	.word	0x08038044
 800fac8:	08037c78 	.word	0x08037c78
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x000E, 0x01);
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	2201      	movs	r2, #1
 800fad0:	210e      	movs	r1, #14
 800fad2:	4618      	mov	r0, r3
 800fad4:	f7fe fd88 	bl	800e5e8 <WrByte>
 800fad8:	4603      	mov	r3, r0
 800fada:	461a      	mov	r2, r3
 800fadc:	7dfb      	ldrb	r3, [r7, #23]
 800fade:	4313      	orrs	r3, r2
 800fae0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	2202      	movs	r2, #2
 800fae6:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800faea:	4618      	mov	r0, r3
 800faec:	f7fe fd7c 	bl	800e5e8 <WrByte>
 800faf0:	4603      	mov	r3, r0
 800faf2:	461a      	mov	r2, r3
 800faf4:	7dfb      	ldrb	r3, [r7, #23]
 800faf6:	4313      	orrs	r3, r2
 800faf8:	75fb      	strb	r3, [r7, #23]

	/* Enable FW access */
	status |= WrByte(&(p_dev->platform), 0x03, 0x0D);
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	220d      	movs	r2, #13
 800fafe:	2103      	movs	r1, #3
 800fb00:	4618      	mov	r0, r3
 800fb02:	f7fe fd71 	bl	800e5e8 <WrByte>
 800fb06:	4603      	mov	r3, r0
 800fb08:	461a      	mov	r2, r3
 800fb0a:	7dfb      	ldrb	r3, [r7, #23]
 800fb0c:	4313      	orrs	r3, r2
 800fb0e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	2201      	movs	r2, #1
 800fb14:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800fb18:	4618      	mov	r0, r3
 800fb1a:	f7fe fd65 	bl	800e5e8 <WrByte>
 800fb1e:	4603      	mov	r3, r0
 800fb20:	461a      	mov	r2, r3
 800fb22:	7dfb      	ldrb	r3, [r7, #23]
 800fb24:	4313      	orrs	r3, r2
 800fb26:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 800fb28:	2310      	movs	r3, #16
 800fb2a:	9301      	str	r3, [sp, #4]
 800fb2c:	2310      	movs	r3, #16
 800fb2e:	9300      	str	r3, [sp, #0]
 800fb30:	2321      	movs	r3, #33	; 0x21
 800fb32:	2200      	movs	r2, #0
 800fb34:	2101      	movs	r1, #1
 800fb36:	6878      	ldr	r0, [r7, #4]
 800fb38:	f7ff fb0d 	bl	800f156 <_vl53l5cx_poll_for_answer>
 800fb3c:	4603      	mov	r3, r0
 800fb3e:	461a      	mov	r2, r3
 800fb40:	7dfb      	ldrb	r3, [r7, #23]
 800fb42:	4313      	orrs	r3, r2
 800fb44:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	2200      	movs	r2, #0
 800fb4a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800fb4e:	4618      	mov	r0, r3
 800fb50:	f7fe fd4a 	bl	800e5e8 <WrByte>
 800fb54:	4603      	mov	r3, r0
 800fb56:	461a      	mov	r2, r3
 800fb58:	7dfb      	ldrb	r3, [r7, #23]
 800fb5a:	4313      	orrs	r3, r2
 800fb5c:	75fb      	strb	r3, [r7, #23]

	/* Enable host access to GO1 */
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	f107 0216 	add.w	r2, r7, #22
 800fb64:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800fb68:	4618      	mov	r0, r3
 800fb6a:	f7fe fd28 	bl	800e5be <RdByte>
 800fb6e:	4603      	mov	r3, r0
 800fb70:	461a      	mov	r2, r3
 800fb72:	7dfb      	ldrb	r3, [r7, #23]
 800fb74:	4313      	orrs	r3, r2
 800fb76:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	2201      	movs	r2, #1
 800fb7c:	210c      	movs	r1, #12
 800fb7e:	4618      	mov	r0, r3
 800fb80:	f7fe fd32 	bl	800e5e8 <WrByte>
 800fb84:	4603      	mov	r3, r0
 800fb86:	461a      	mov	r2, r3
 800fb88:	7dfb      	ldrb	r3, [r7, #23]
 800fb8a:	4313      	orrs	r3, r2
 800fb8c:	75fb      	strb	r3, [r7, #23]

	/* Power ON status */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	2200      	movs	r2, #0
 800fb92:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800fb96:	4618      	mov	r0, r3
 800fb98:	f7fe fd26 	bl	800e5e8 <WrByte>
 800fb9c:	4603      	mov	r3, r0
 800fb9e:	461a      	mov	r2, r3
 800fba0:	7dfb      	ldrb	r3, [r7, #23]
 800fba2:	4313      	orrs	r3, r2
 800fba4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x101, 0x00);
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	2200      	movs	r2, #0
 800fbaa:	f240 1101 	movw	r1, #257	; 0x101
 800fbae:	4618      	mov	r0, r3
 800fbb0:	f7fe fd1a 	bl	800e5e8 <WrByte>
 800fbb4:	4603      	mov	r3, r0
 800fbb6:	461a      	mov	r2, r3
 800fbb8:	7dfb      	ldrb	r3, [r7, #23]
 800fbba:	4313      	orrs	r3, r2
 800fbbc:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x102, 0x00);
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	f44f 7181 	mov.w	r1, #258	; 0x102
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	f7fe fd0e 	bl	800e5e8 <WrByte>
 800fbcc:	4603      	mov	r3, r0
 800fbce:	461a      	mov	r2, r3
 800fbd0:	7dfb      	ldrb	r3, [r7, #23]
 800fbd2:	4313      	orrs	r3, r2
 800fbd4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	2201      	movs	r2, #1
 800fbda:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800fbde:	4618      	mov	r0, r3
 800fbe0:	f7fe fd02 	bl	800e5e8 <WrByte>
 800fbe4:	4603      	mov	r3, r0
 800fbe6:	461a      	mov	r2, r3
 800fbe8:	7dfb      	ldrb	r3, [r7, #23]
 800fbea:	4313      	orrs	r3, r2
 800fbec:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	2201      	movs	r2, #1
 800fbf2:	f244 0102 	movw	r1, #16386	; 0x4002
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	f7fe fcf6 	bl	800e5e8 <WrByte>
 800fbfc:	4603      	mov	r3, r0
 800fbfe:	461a      	mov	r2, r3
 800fc00:	7dfb      	ldrb	r3, [r7, #23]
 800fc02:	4313      	orrs	r3, r2
 800fc04:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	2200      	movs	r2, #0
 800fc0a:	f244 0102 	movw	r1, #16386	; 0x4002
 800fc0e:	4618      	mov	r0, r3
 800fc10:	f7fe fcea 	bl	800e5e8 <WrByte>
 800fc14:	4603      	mov	r3, r0
 800fc16:	461a      	mov	r2, r3
 800fc18:	7dfb      	ldrb	r3, [r7, #23]
 800fc1a:	4313      	orrs	r3, r2
 800fc1c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	2203      	movs	r2, #3
 800fc22:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800fc26:	4618      	mov	r0, r3
 800fc28:	f7fe fcde 	bl	800e5e8 <WrByte>
 800fc2c:	4603      	mov	r3, r0
 800fc2e:	461a      	mov	r2, r3
 800fc30:	7dfb      	ldrb	r3, [r7, #23]
 800fc32:	4313      	orrs	r3, r2
 800fc34:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x103, 0x01);
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	2201      	movs	r2, #1
 800fc3a:	f240 1103 	movw	r1, #259	; 0x103
 800fc3e:	4618      	mov	r0, r3
 800fc40:	f7fe fcd2 	bl	800e5e8 <WrByte>
 800fc44:	4603      	mov	r3, r0
 800fc46:	461a      	mov	r2, r3
 800fc48:	7dfb      	ldrb	r3, [r7, #23]
 800fc4a:	4313      	orrs	r3, r2
 800fc4c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x400F, 0x00);
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	2200      	movs	r2, #0
 800fc52:	f244 010f 	movw	r1, #16399	; 0x400f
 800fc56:	4618      	mov	r0, r3
 800fc58:	f7fe fcc6 	bl	800e5e8 <WrByte>
 800fc5c:	4603      	mov	r3, r0
 800fc5e:	461a      	mov	r2, r3
 800fc60:	7dfb      	ldrb	r3, [r7, #23]
 800fc62:	4313      	orrs	r3, r2
 800fc64:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x43);
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	2243      	movs	r2, #67	; 0x43
 800fc6a:	f240 211a 	movw	r1, #538	; 0x21a
 800fc6e:	4618      	mov	r0, r3
 800fc70:	f7fe fcba 	bl	800e5e8 <WrByte>
 800fc74:	4603      	mov	r3, r0
 800fc76:	461a      	mov	r2, r3
 800fc78:	7dfb      	ldrb	r3, [r7, #23]
 800fc7a:	4313      	orrs	r3, r2
 800fc7c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x03);
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	2203      	movs	r2, #3
 800fc82:	f240 211a 	movw	r1, #538	; 0x21a
 800fc86:	4618      	mov	r0, r3
 800fc88:	f7fe fcae 	bl	800e5e8 <WrByte>
 800fc8c:	4603      	mov	r3, r0
 800fc8e:	461a      	mov	r2, r3
 800fc90:	7dfb      	ldrb	r3, [r7, #23]
 800fc92:	4313      	orrs	r3, r2
 800fc94:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x01);
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	2201      	movs	r2, #1
 800fc9a:	f240 211a 	movw	r1, #538	; 0x21a
 800fc9e:	4618      	mov	r0, r3
 800fca0:	f7fe fca2 	bl	800e5e8 <WrByte>
 800fca4:	4603      	mov	r3, r0
 800fca6:	461a      	mov	r2, r3
 800fca8:	7dfb      	ldrb	r3, [r7, #23]
 800fcaa:	4313      	orrs	r3, r2
 800fcac:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x00);
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	f240 211a 	movw	r1, #538	; 0x21a
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	f7fe fc96 	bl	800e5e8 <WrByte>
 800fcbc:	4603      	mov	r3, r0
 800fcbe:	461a      	mov	r2, r3
 800fcc0:	7dfb      	ldrb	r3, [r7, #23]
 800fcc2:	4313      	orrs	r3, r2
 800fcc4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x219, 0x00);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	2200      	movs	r2, #0
 800fcca:	f240 2119 	movw	r1, #537	; 0x219
 800fcce:	4618      	mov	r0, r3
 800fcd0:	f7fe fc8a 	bl	800e5e8 <WrByte>
 800fcd4:	4603      	mov	r3, r0
 800fcd6:	461a      	mov	r2, r3
 800fcd8:	7dfb      	ldrb	r3, [r7, #23]
 800fcda:	4313      	orrs	r3, r2
 800fcdc:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21B, 0x00);
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	2200      	movs	r2, #0
 800fce2:	f240 211b 	movw	r1, #539	; 0x21b
 800fce6:	4618      	mov	r0, r3
 800fce8:	f7fe fc7e 	bl	800e5e8 <WrByte>
 800fcec:	4603      	mov	r3, r0
 800fcee:	461a      	mov	r2, r3
 800fcf0:	7dfb      	ldrb	r3, [r7, #23]
 800fcf2:	4313      	orrs	r3, r2
 800fcf4:	75fb      	strb	r3, [r7, #23]

	/* Wake up MCU */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	2200      	movs	r2, #0
 800fcfa:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800fcfe:	4618      	mov	r0, r3
 800fd00:	f7fe fc72 	bl	800e5e8 <WrByte>
 800fd04:	4603      	mov	r3, r0
 800fd06:	461a      	mov	r2, r3
 800fd08:	7dfb      	ldrb	r3, [r7, #23]
 800fd0a:	4313      	orrs	r3, r2
 800fd0c:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	f107 0216 	add.w	r2, r7, #22
 800fd14:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800fd18:	4618      	mov	r0, r3
 800fd1a:	f7fe fc50 	bl	800e5be <RdByte>
 800fd1e:	4603      	mov	r3, r0
 800fd20:	461a      	mov	r2, r3
 800fd22:	7dfb      	ldrb	r3, [r7, #23]
 800fd24:	4313      	orrs	r3, r2
 800fd26:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x00);
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	2200      	movs	r2, #0
 800fd2c:	210c      	movs	r1, #12
 800fd2e:	4618      	mov	r0, r3
 800fd30:	f7fe fc5a 	bl	800e5e8 <WrByte>
 800fd34:	4603      	mov	r3, r0
 800fd36:	461a      	mov	r2, r3
 800fd38:	7dfb      	ldrb	r3, [r7, #23]
 800fd3a:	4313      	orrs	r3, r2
 800fd3c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	2201      	movs	r2, #1
 800fd42:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800fd46:	4618      	mov	r0, r3
 800fd48:	f7fe fc4e 	bl	800e5e8 <WrByte>
 800fd4c:	4603      	mov	r3, r0
 800fd4e:	461a      	mov	r2, r3
 800fd50:	7dfb      	ldrb	r3, [r7, #23]
 800fd52:	4313      	orrs	r3, r2
 800fd54:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x20, 0x07);
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	2207      	movs	r2, #7
 800fd5a:	2120      	movs	r1, #32
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	f7fe fc43 	bl	800e5e8 <WrByte>
 800fd62:	4603      	mov	r3, r0
 800fd64:	461a      	mov	r2, r3
 800fd66:	7dfb      	ldrb	r3, [r7, #23]
 800fd68:	4313      	orrs	r3, r2
 800fd6a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x20, 0x06);
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	2206      	movs	r2, #6
 800fd70:	2120      	movs	r1, #32
 800fd72:	4618      	mov	r0, r3
 800fd74:	f7fe fc38 	bl	800e5e8 <WrByte>
 800fd78:	4603      	mov	r3, r0
 800fd7a:	461a      	mov	r2, r3
 800fd7c:	7dfb      	ldrb	r3, [r7, #23]
 800fd7e:	4313      	orrs	r3, r2
 800fd80:	75fb      	strb	r3, [r7, #23]

	/* Download FW into VL53L5 */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x09);
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	2209      	movs	r2, #9
 800fd86:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	f7fe fc2c 	bl	800e5e8 <WrByte>
 800fd90:	4603      	mov	r3, r0
 800fd92:	461a      	mov	r2, r3
 800fd94:	7dfb      	ldrb	r3, [r7, #23]
 800fd96:	4313      	orrs	r3, r2
 800fd98:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 800fd9a:	6878      	ldr	r0, [r7, #4]
 800fd9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fda0:	4ae1      	ldr	r2, [pc, #900]	; (8010128 <vl53l5cx_init+0x880>)
 800fda2:	2100      	movs	r1, #0
 800fda4:	f7fe fc36 	bl	800e614 <WrMulti>
 800fda8:	4603      	mov	r3, r0
 800fdaa:	461a      	mov	r2, r3
 800fdac:	7dfb      	ldrb	r3, [r7, #23]
 800fdae:	4313      	orrs	r3, r2
 800fdb0:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L5CX_FIRMWARE[0],0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0a);
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	220a      	movs	r2, #10
 800fdb6:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800fdba:	4618      	mov	r0, r3
 800fdbc:	f7fe fc14 	bl	800e5e8 <WrByte>
 800fdc0:	4603      	mov	r3, r0
 800fdc2:	461a      	mov	r2, r3
 800fdc4:	7dfb      	ldrb	r3, [r7, #23]
 800fdc6:	4313      	orrs	r3, r2
 800fdc8:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 800fdca:	6878      	ldr	r0, [r7, #4]
 800fdcc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fdd0:	4ad6      	ldr	r2, [pc, #856]	; (801012c <vl53l5cx_init+0x884>)
 800fdd2:	2100      	movs	r1, #0
 800fdd4:	f7fe fc1e 	bl	800e614 <WrMulti>
 800fdd8:	4603      	mov	r3, r0
 800fdda:	461a      	mov	r2, r3
 800fddc:	7dfb      	ldrb	r3, [r7, #23]
 800fdde:	4313      	orrs	r3, r2
 800fde0:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L5CX_FIRMWARE[0x8000],0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0b);
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	220b      	movs	r2, #11
 800fde6:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800fdea:	4618      	mov	r0, r3
 800fdec:	f7fe fbfc 	bl	800e5e8 <WrByte>
 800fdf0:	4603      	mov	r3, r0
 800fdf2:	461a      	mov	r2, r3
 800fdf4:	7dfb      	ldrb	r3, [r7, #23]
 800fdf6:	4313      	orrs	r3, r2
 800fdf8:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 800fdfa:	6878      	ldr	r0, [r7, #4]
 800fdfc:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800fe00:	4acb      	ldr	r2, [pc, #812]	; (8010130 <vl53l5cx_init+0x888>)
 800fe02:	2100      	movs	r1, #0
 800fe04:	f7fe fc06 	bl	800e614 <WrMulti>
 800fe08:	4603      	mov	r3, r0
 800fe0a:	461a      	mov	r2, r3
 800fe0c:	7dfb      	ldrb	r3, [r7, #23]
 800fe0e:	4313      	orrs	r3, r2
 800fe10:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L5CX_FIRMWARE[0x10000],0x5000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	2201      	movs	r2, #1
 800fe16:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	f7fe fbe4 	bl	800e5e8 <WrByte>
 800fe20:	4603      	mov	r3, r0
 800fe22:	461a      	mov	r2, r3
 800fe24:	7dfb      	ldrb	r3, [r7, #23]
 800fe26:	4313      	orrs	r3, r2
 800fe28:	75fb      	strb	r3, [r7, #23]

	/* Check if FW correctly downloaded */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	2202      	movs	r2, #2
 800fe2e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800fe32:	4618      	mov	r0, r3
 800fe34:	f7fe fbd8 	bl	800e5e8 <WrByte>
 800fe38:	4603      	mov	r3, r0
 800fe3a:	461a      	mov	r2, r3
 800fe3c:	7dfb      	ldrb	r3, [r7, #23]
 800fe3e:	4313      	orrs	r3, r2
 800fe40:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x03, 0x0D);
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	220d      	movs	r2, #13
 800fe46:	2103      	movs	r1, #3
 800fe48:	4618      	mov	r0, r3
 800fe4a:	f7fe fbcd 	bl	800e5e8 <WrByte>
 800fe4e:	4603      	mov	r3, r0
 800fe50:	461a      	mov	r2, r3
 800fe52:	7dfb      	ldrb	r3, [r7, #23]
 800fe54:	4313      	orrs	r3, r2
 800fe56:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	2201      	movs	r2, #1
 800fe5c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800fe60:	4618      	mov	r0, r3
 800fe62:	f7fe fbc1 	bl	800e5e8 <WrByte>
 800fe66:	4603      	mov	r3, r0
 800fe68:	461a      	mov	r2, r3
 800fe6a:	7dfb      	ldrb	r3, [r7, #23]
 800fe6c:	4313      	orrs	r3, r2
 800fe6e:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 800fe70:	2310      	movs	r3, #16
 800fe72:	9301      	str	r3, [sp, #4]
 800fe74:	2310      	movs	r3, #16
 800fe76:	9300      	str	r3, [sp, #0]
 800fe78:	2321      	movs	r3, #33	; 0x21
 800fe7a:	2200      	movs	r2, #0
 800fe7c:	2101      	movs	r1, #1
 800fe7e:	6878      	ldr	r0, [r7, #4]
 800fe80:	f7ff f969 	bl	800f156 <_vl53l5cx_poll_for_answer>
 800fe84:	4603      	mov	r3, r0
 800fe86:	461a      	mov	r2, r3
 800fe88:	7dfb      	ldrb	r3, [r7, #23]
 800fe8a:	4313      	orrs	r3, r2
 800fe8c:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 800fe8e:	7dfb      	ldrb	r3, [r7, #23]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	f040 816c 	bne.w	801016e <vl53l5cx_init+0x8c6>
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	2200      	movs	r2, #0
 800fe9a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800fe9e:	4618      	mov	r0, r3
 800fea0:	f7fe fba2 	bl	800e5e8 <WrByte>
 800fea4:	4603      	mov	r3, r0
 800fea6:	461a      	mov	r2, r3
 800fea8:	7dfb      	ldrb	r3, [r7, #23]
 800feaa:	4313      	orrs	r3, r2
 800feac:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	f107 0216 	add.w	r2, r7, #22
 800feb4:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800feb8:	4618      	mov	r0, r3
 800feba:	f7fe fb80 	bl	800e5be <RdByte>
 800febe:	4603      	mov	r3, r0
 800fec0:	461a      	mov	r2, r3
 800fec2:	7dfb      	ldrb	r3, [r7, #23]
 800fec4:	4313      	orrs	r3, r2
 800fec6:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	2201      	movs	r2, #1
 800fecc:	210c      	movs	r1, #12
 800fece:	4618      	mov	r0, r3
 800fed0:	f7fe fb8a 	bl	800e5e8 <WrByte>
 800fed4:	4603      	mov	r3, r0
 800fed6:	461a      	mov	r2, r3
 800fed8:	7dfb      	ldrb	r3, [r7, #23]
 800feda:	4313      	orrs	r3, r2
 800fedc:	75fb      	strb	r3, [r7, #23]

	/* Reset MCU and wait boot */
	status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	2200      	movs	r2, #0
 800fee2:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800fee6:	4618      	mov	r0, r3
 800fee8:	f7fe fb7e 	bl	800e5e8 <WrByte>
 800feec:	4603      	mov	r3, r0
 800feee:	461a      	mov	r2, r3
 800fef0:	7dfb      	ldrb	r3, [r7, #23]
 800fef2:	4313      	orrs	r3, r2
 800fef4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x114, 0x00);
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	2200      	movs	r2, #0
 800fefa:	f44f 718a 	mov.w	r1, #276	; 0x114
 800fefe:	4618      	mov	r0, r3
 800ff00:	f7fe fb72 	bl	800e5e8 <WrByte>
 800ff04:	4603      	mov	r3, r0
 800ff06:	461a      	mov	r2, r3
 800ff08:	7dfb      	ldrb	r3, [r7, #23]
 800ff0a:	4313      	orrs	r3, r2
 800ff0c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x115, 0x00);
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	2200      	movs	r2, #0
 800ff12:	f240 1115 	movw	r1, #277	; 0x115
 800ff16:	4618      	mov	r0, r3
 800ff18:	f7fe fb66 	bl	800e5e8 <WrByte>
 800ff1c:	4603      	mov	r3, r0
 800ff1e:	461a      	mov	r2, r3
 800ff20:	7dfb      	ldrb	r3, [r7, #23]
 800ff22:	4313      	orrs	r3, r2
 800ff24:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x116, 0x42);
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	2242      	movs	r2, #66	; 0x42
 800ff2a:	f44f 718b 	mov.w	r1, #278	; 0x116
 800ff2e:	4618      	mov	r0, r3
 800ff30:	f7fe fb5a 	bl	800e5e8 <WrByte>
 800ff34:	4603      	mov	r3, r0
 800ff36:	461a      	mov	r2, r3
 800ff38:	7dfb      	ldrb	r3, [r7, #23]
 800ff3a:	4313      	orrs	r3, r2
 800ff3c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x117, 0x00);
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	2200      	movs	r2, #0
 800ff42:	f240 1117 	movw	r1, #279	; 0x117
 800ff46:	4618      	mov	r0, r3
 800ff48:	f7fe fb4e 	bl	800e5e8 <WrByte>
 800ff4c:	4603      	mov	r3, r0
 800ff4e:	461a      	mov	r2, r3
 800ff50:	7dfb      	ldrb	r3, [r7, #23]
 800ff52:	4313      	orrs	r3, r2
 800ff54:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x00);
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	2200      	movs	r2, #0
 800ff5a:	210b      	movs	r1, #11
 800ff5c:	4618      	mov	r0, r3
 800ff5e:	f7fe fb43 	bl	800e5e8 <WrByte>
 800ff62:	4603      	mov	r3, r0
 800ff64:	461a      	mov	r2, r3
 800ff66:	7dfb      	ldrb	r3, [r7, #23]
 800ff68:	4313      	orrs	r3, r2
 800ff6a:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	f107 0216 	add.w	r2, r7, #22
 800ff72:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800ff76:	4618      	mov	r0, r3
 800ff78:	f7fe fb21 	bl	800e5be <RdByte>
 800ff7c:	4603      	mov	r3, r0
 800ff7e:	461a      	mov	r2, r3
 800ff80:	7dfb      	ldrb	r3, [r7, #23]
 800ff82:	4313      	orrs	r3, r2
 800ff84:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x00);
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	2200      	movs	r2, #0
 800ff8a:	210c      	movs	r1, #12
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	f7fe fb2b 	bl	800e5e8 <WrByte>
 800ff92:	4603      	mov	r3, r0
 800ff94:	461a      	mov	r2, r3
 800ff96:	7dfb      	ldrb	r3, [r7, #23]
 800ff98:	4313      	orrs	r3, r2
 800ff9a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x01);
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	2201      	movs	r2, #1
 800ffa0:	210b      	movs	r1, #11
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f7fe fb20 	bl	800e5e8 <WrByte>
 800ffa8:	4603      	mov	r3, r0
 800ffaa:	461a      	mov	r2, r3
 800ffac:	7dfb      	ldrb	r3, [r7, #23]
 800ffae:	4313      	orrs	r3, r2
 800ffb0:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_mcu_boot(p_dev);
 800ffb2:	6878      	ldr	r0, [r7, #4]
 800ffb4:	f7ff f91f 	bl	800f1f6 <_vl53l5cx_poll_for_mcu_boot>
 800ffb8:	4603      	mov	r3, r0
 800ffba:	461a      	mov	r2, r3
 800ffbc:	7dfb      	ldrb	r3, [r7, #23]
 800ffbe:	4313      	orrs	r3, r2
 800ffc0:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 800ffc2:	7dfb      	ldrb	r3, [r7, #23]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	f040 80d4 	bne.w	8010172 <vl53l5cx_init+0x8ca>
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	2202      	movs	r2, #2
 800ffce:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800ffd2:	4618      	mov	r0, r3
 800ffd4:	f7fe fb08 	bl	800e5e8 <WrByte>
 800ffd8:	4603      	mov	r3, r0
 800ffda:	461a      	mov	r2, r3
 800ffdc:	7dfb      	ldrb	r3, [r7, #23]
 800ffde:	4313      	orrs	r3, r2
 800ffe0:	75fb      	strb	r3, [r7, #23]

	/* Get offset NVM data and store them into the offset buffer */
	status |= WrMulti(&(p_dev->platform), 0x2fd8,
 800ffe2:	6878      	ldr	r0, [r7, #4]
 800ffe4:	2328      	movs	r3, #40	; 0x28
 800ffe6:	4a53      	ldr	r2, [pc, #332]	; (8010134 <vl53l5cx_init+0x88c>)
 800ffe8:	f642 71d8 	movw	r1, #12248	; 0x2fd8
 800ffec:	f7fe fb12 	bl	800e614 <WrMulti>
 800fff0:	4603      	mov	r3, r0
 800fff2:	461a      	mov	r2, r3
 800fff4:	7dfb      	ldrb	r3, [r7, #23]
 800fff6:	4313      	orrs	r3, r2
 800fff8:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)VL53L5CX_GET_NVM_CMD, sizeof(VL53L5CX_GET_NVM_CMD));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 0,
 800fffa:	2302      	movs	r3, #2
 800fffc:	9301      	str	r3, [sp, #4]
 800fffe:	23ff      	movs	r3, #255	; 0xff
 8010000:	9300      	str	r3, [sp, #0]
 8010002:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8010006:	2200      	movs	r2, #0
 8010008:	2104      	movs	r1, #4
 801000a:	6878      	ldr	r0, [r7, #4]
 801000c:	f7ff f8a3 	bl	800f156 <_vl53l5cx_poll_for_answer>
 8010010:	4603      	mov	r3, r0
 8010012:	461a      	mov	r2, r3
 8010014:	7dfb      	ldrb	r3, [r7, #23]
 8010016:	4313      	orrs	r3, r2
 8010018:	75fb      	strb	r3, [r7, #23]
		VL53L5CX_UI_CMD_STATUS, 0xff, 2);
	status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 801001a:	6878      	ldr	r0, [r7, #4]
		p_dev->temp_buffer, VL53L5CX_NVM_DATA_SIZE);
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
	status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8010022:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 8010026:	f642 4104 	movw	r1, #11268	; 0x2c04
 801002a:	f7fe fb0a 	bl	800e642 <RdMulti>
 801002e:	4603      	mov	r3, r0
 8010030:	461a      	mov	r2, r3
 8010032:	7dfb      	ldrb	r3, [r7, #23]
 8010034:	4313      	orrs	r3, r2
 8010036:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(p_dev->offset_data, p_dev->temp_buffer,
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	f103 0020 	add.w	r0, r3, #32
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8010044:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8010048:	4619      	mov	r1, r3
 801004a:	f00d fc80 	bl	801d94e <memcpy>
		VL53L5CX_OFFSET_BUFFER_SIZE);
	status |= _vl53l5cx_send_offset_data(p_dev, VL53L5CX_RESOLUTION_4X4);
 801004e:	2110      	movs	r1, #16
 8010050:	6878      	ldr	r0, [r7, #4]
 8010052:	f7ff f911 	bl	800f278 <_vl53l5cx_send_offset_data>
 8010056:	4603      	mov	r3, r0
 8010058:	461a      	mov	r2, r3
 801005a:	7dfb      	ldrb	r3, [r7, #23]
 801005c:	4313      	orrs	r3, r2
 801005e:	75fb      	strb	r3, [r7, #23]

	/* Set default Xtalk shape. Send Xtalk to sensor */
	(void)memcpy(p_dev->xtalk_data, (uint8_t*)VL53L5CX_DEFAULT_XTALK,
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8010066:	4a34      	ldr	r2, [pc, #208]	; (8010138 <vl53l5cx_init+0x890>)
 8010068:	4618      	mov	r0, r3
 801006a:	4611      	mov	r1, r2
 801006c:	f44f 7342 	mov.w	r3, #776	; 0x308
 8010070:	461a      	mov	r2, r3
 8010072:	f00d fc6c 	bl	801d94e <memcpy>
		VL53L5CX_XTALK_BUFFER_SIZE);
	status |= _vl53l5cx_send_xtalk_data(p_dev, VL53L5CX_RESOLUTION_4X4);
 8010076:	2110      	movs	r1, #16
 8010078:	6878      	ldr	r0, [r7, #4]
 801007a:	f7ff fac9 	bl	800f610 <_vl53l5cx_send_xtalk_data>
 801007e:	4603      	mov	r3, r0
 8010080:	461a      	mov	r2, r3
 8010082:	7dfb      	ldrb	r3, [r7, #23]
 8010084:	4313      	orrs	r3, r2
 8010086:	75fb      	strb	r3, [r7, #23]

	/* Send default configuration to VL53L5CX firmware */
	status |= WrMulti(&(p_dev->platform), 0x2c34,
 8010088:	6878      	ldr	r0, [r7, #4]
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	699a      	ldr	r2, [r3, #24]
 801008e:	f44f 7373 	mov.w	r3, #972	; 0x3cc
 8010092:	f642 4134 	movw	r1, #11316	; 0x2c34
 8010096:	f7fe fabd 	bl	800e614 <WrMulti>
 801009a:	4603      	mov	r3, r0
 801009c:	461a      	mov	r2, r3
 801009e:	7dfb      	ldrb	r3, [r7, #23]
 80100a0:	4313      	orrs	r3, r2
 80100a2:	75fb      	strb	r3, [r7, #23]
		p_dev->default_configuration,
		sizeof(VL53L5CX_DEFAULT_CONFIGURATION));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 80100a4:	2303      	movs	r3, #3
 80100a6:	9301      	str	r3, [sp, #4]
 80100a8:	23ff      	movs	r3, #255	; 0xff
 80100aa:	9300      	str	r3, [sp, #0]
 80100ac:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80100b0:	2201      	movs	r2, #1
 80100b2:	2104      	movs	r1, #4
 80100b4:	6878      	ldr	r0, [r7, #4]
 80100b6:	f7ff f84e 	bl	800f156 <_vl53l5cx_poll_for_answer>
 80100ba:	4603      	mov	r3, r0
 80100bc:	461a      	mov	r2, r3
 80100be:	7dfb      	ldrb	r3, [r7, #23]
 80100c0:	4313      	orrs	r3, r2
 80100c2:	75fb      	strb	r3, [r7, #23]
		VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&pipe_ctrl,
 80100c4:	f107 0110 	add.w	r1, r7, #16
 80100c8:	2304      	movs	r3, #4
 80100ca:	f64d 3280 	movw	r2, #56192	; 0xdb80
 80100ce:	6878      	ldr	r0, [r7, #4]
 80100d0:	f000 ffe8 	bl	80110a4 <vl53l5cx_dci_write_data>
 80100d4:	4603      	mov	r3, r0
 80100d6:	461a      	mov	r2, r3
 80100d8:	7dfb      	ldrb	r3, [r7, #23]
 80100da:	4313      	orrs	r3, r2
 80100dc:	75fb      	strb	r3, [r7, #23]
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
		VL53L5CX_DCI_FW_NB_TARGET, 16,
	(uint8_t*)&tmp, 1, 0x0C);
#endif

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 80100de:	f107 010c 	add.w	r1, r7, #12
 80100e2:	2304      	movs	r3, #4
 80100e4:	f64d 1264 	movw	r2, #55652	; 0xd964
 80100e8:	6878      	ldr	r0, [r7, #4]
 80100ea:	f000 ffdb 	bl	80110a4 <vl53l5cx_dci_write_data>
 80100ee:	4603      	mov	r3, r0
 80100f0:	461a      	mov	r2, r3
 80100f2:	7dfb      	ldrb	r3, [r7, #23]
 80100f4:	4313      	orrs	r3, r2
 80100f6:	75fb      	strb	r3, [r7, #23]
			VL53L5CX_DCI_SINGLE_RANGE,
			(uint16_t)sizeof(single_range));

	tmp = (uint8_t)1;
 80100f8:	2301      	movs	r3, #1
 80100fa:	75bb      	strb	r3, [r7, #22]
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8010102:	2326      	movs	r3, #38	; 0x26
 8010104:	9302      	str	r3, [sp, #8]
 8010106:	2301      	movs	r3, #1
 8010108:	9301      	str	r3, [sp, #4]
 801010a:	f107 0316 	add.w	r3, r7, #22
 801010e:	9300      	str	r3, [sp, #0]
 8010110:	2328      	movs	r3, #40	; 0x28
 8010112:	f24e 1208 	movw	r2, #57608	; 0xe108
 8010116:	6878      	ldr	r0, [r7, #4]
 8010118:	f001 f862 	bl	80111e0 <vl53l5cx_dci_replace_data>
 801011c:	4603      	mov	r3, r0
 801011e:	461a      	mov	r2, r3
 8010120:	7dfb      	ldrb	r3, [r7, #23]
 8010122:	4313      	orrs	r3, r2
 8010124:	e00a      	b.n	801013c <vl53l5cx_init+0x894>
 8010126:	bf00      	nop
 8010128:	08022c78 	.word	0x08022c78
 801012c:	0802ac78 	.word	0x0802ac78
 8010130:	08032c78 	.word	0x08032c78
 8010134:	0803834c 	.word	0x0803834c
 8010138:	08038044 	.word	0x08038044
 801013c:	75fb      	strb	r3, [r7, #23]
			VL53L5CX_GLARE_FILTER, 40, (uint8_t*)&tmp, 1, 0x26);
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8010144:	2325      	movs	r3, #37	; 0x25
 8010146:	9302      	str	r3, [sp, #8]
 8010148:	2301      	movs	r3, #1
 801014a:	9301      	str	r3, [sp, #4]
 801014c:	f107 0316 	add.w	r3, r7, #22
 8010150:	9300      	str	r3, [sp, #0]
 8010152:	2328      	movs	r3, #40	; 0x28
 8010154:	f24e 1208 	movw	r2, #57608	; 0xe108
 8010158:	6878      	ldr	r0, [r7, #4]
 801015a:	f001 f841 	bl	80111e0 <vl53l5cx_dci_replace_data>
 801015e:	4603      	mov	r3, r0
 8010160:	461a      	mov	r2, r3
 8010162:	7dfb      	ldrb	r3, [r7, #23]
 8010164:	4313      	orrs	r3, r2
 8010166:	75fb      	strb	r3, [r7, #23]
 8010168:	e004      	b.n	8010174 <vl53l5cx_init+0x8cc>
		goto exit;
 801016a:	bf00      	nop
 801016c:	e002      	b.n	8010174 <vl53l5cx_init+0x8cc>
		goto exit;
 801016e:	bf00      	nop
 8010170:	e000      	b.n	8010174 <vl53l5cx_init+0x8cc>
		goto exit;
 8010172:	bf00      	nop
			VL53L5CX_GLARE_FILTER, 40, (uint8_t*)&tmp, 1, 0x25);

exit:
	return status;
 8010174:	7dfb      	ldrb	r3, [r7, #23]
}
 8010176:	4618      	mov	r0, r3
 8010178:	3718      	adds	r7, #24
 801017a:	46bd      	mov	sp, r7
 801017c:	bd80      	pop	{r7, pc}
 801017e:	bf00      	nop

08010180 <vl53l5cx_set_i2c_address>:

uint8_t vl53l5cx_set_i2c_address(
		VL53L5CX_Configuration		*p_dev,
		uint16_t		        i2c_address)
{
 8010180:	b580      	push	{r7, lr}
 8010182:	b084      	sub	sp, #16
 8010184:	af00      	add	r7, sp, #0
 8010186:	6078      	str	r0, [r7, #4]
 8010188:	460b      	mov	r3, r1
 801018a:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L5CX_STATUS_OK;
 801018c:	2300      	movs	r3, #0
 801018e:	73fb      	strb	r3, [r7, #15]

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	2200      	movs	r2, #0
 8010194:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8010198:	4618      	mov	r0, r3
 801019a:	f7fe fa25 	bl	800e5e8 <WrByte>
 801019e:	4603      	mov	r3, r0
 80101a0:	461a      	mov	r2, r3
 80101a2:	7bfb      	ldrb	r3, [r7, #15]
 80101a4:	4313      	orrs	r3, r2
 80101a6:	73fb      	strb	r3, [r7, #15]
	status |= WrByte(&(p_dev->platform), 0x4, (uint8_t)(i2c_address >> 1));
 80101a8:	6878      	ldr	r0, [r7, #4]
 80101aa:	887b      	ldrh	r3, [r7, #2]
 80101ac:	085b      	lsrs	r3, r3, #1
 80101ae:	b29b      	uxth	r3, r3
 80101b0:	b2db      	uxtb	r3, r3
 80101b2:	461a      	mov	r2, r3
 80101b4:	2104      	movs	r1, #4
 80101b6:	f7fe fa17 	bl	800e5e8 <WrByte>
 80101ba:	4603      	mov	r3, r0
 80101bc:	461a      	mov	r2, r3
 80101be:	7bfb      	ldrb	r3, [r7, #15]
 80101c0:	4313      	orrs	r3, r2
 80101c2:	73fb      	strb	r3, [r7, #15]
	p_dev->platform.address = i2c_address;
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	887a      	ldrh	r2, [r7, #2]
 80101c8:	801a      	strh	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	2202      	movs	r2, #2
 80101ce:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80101d2:	4618      	mov	r0, r3
 80101d4:	f7fe fa08 	bl	800e5e8 <WrByte>
 80101d8:	4603      	mov	r3, r0
 80101da:	461a      	mov	r2, r3
 80101dc:	7bfb      	ldrb	r3, [r7, #15]
 80101de:	4313      	orrs	r3, r2
 80101e0:	73fb      	strb	r3, [r7, #15]

	return status;
 80101e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80101e4:	4618      	mov	r0, r3
 80101e6:	3710      	adds	r7, #16
 80101e8:	46bd      	mov	sp, r7
 80101ea:	bd80      	pop	{r7, pc}

080101ec <vl53l5cx_get_power_mode>:

uint8_t vl53l5cx_get_power_mode(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_power_mode)
{
 80101ec:	b580      	push	{r7, lr}
 80101ee:	b084      	sub	sp, #16
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	6078      	str	r0, [r7, #4]
 80101f4:	6039      	str	r1, [r7, #0]
	uint8_t tmp, status = VL53L5CX_STATUS_OK;
 80101f6:	2300      	movs	r3, #0
 80101f8:	73fb      	strb	r3, [r7, #15]

	status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	2200      	movs	r2, #0
 80101fe:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8010202:	4618      	mov	r0, r3
 8010204:	f7fe f9f0 	bl	800e5e8 <WrByte>
 8010208:	4603      	mov	r3, r0
 801020a:	461a      	mov	r2, r3
 801020c:	7bfb      	ldrb	r3, [r7, #15]
 801020e:	4313      	orrs	r3, r2
 8010210:	73fb      	strb	r3, [r7, #15]
	status |= RdByte(&(p_dev->platform), 0x009, &tmp);
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	f107 020e 	add.w	r2, r7, #14
 8010218:	2109      	movs	r1, #9
 801021a:	4618      	mov	r0, r3
 801021c:	f7fe f9cf 	bl	800e5be <RdByte>
 8010220:	4603      	mov	r3, r0
 8010222:	461a      	mov	r2, r3
 8010224:	7bfb      	ldrb	r3, [r7, #15]
 8010226:	4313      	orrs	r3, r2
 8010228:	73fb      	strb	r3, [r7, #15]

	switch(tmp)
 801022a:	7bbb      	ldrb	r3, [r7, #14]
 801022c:	2b02      	cmp	r3, #2
 801022e:	d005      	beq.n	801023c <vl53l5cx_get_power_mode+0x50>
 8010230:	2b04      	cmp	r3, #4
 8010232:	d107      	bne.n	8010244 <vl53l5cx_get_power_mode+0x58>
	{
		case 0x4:
			*p_power_mode = VL53L5CX_POWER_MODE_WAKEUP;
 8010234:	683b      	ldr	r3, [r7, #0]
 8010236:	2201      	movs	r2, #1
 8010238:	701a      	strb	r2, [r3, #0]
			break;
 801023a:	e009      	b.n	8010250 <vl53l5cx_get_power_mode+0x64>
		case 0x2:
			*p_power_mode = VL53L5CX_POWER_MODE_SLEEP;
 801023c:	683b      	ldr	r3, [r7, #0]
 801023e:	2200      	movs	r2, #0
 8010240:	701a      	strb	r2, [r3, #0]

			break;
 8010242:	e005      	b.n	8010250 <vl53l5cx_get_power_mode+0x64>
		default:
			*p_power_mode = 0;
 8010244:	683b      	ldr	r3, [r7, #0]
 8010246:	2200      	movs	r2, #0
 8010248:	701a      	strb	r2, [r3, #0]
			status = VL53L5CX_STATUS_ERROR;
 801024a:	23ff      	movs	r3, #255	; 0xff
 801024c:	73fb      	strb	r3, [r7, #15]
			break;
 801024e:	bf00      	nop
	}

	status |= WrByte(&(p_dev->platform), 0x7FFF, 0x02);
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	2202      	movs	r2, #2
 8010254:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8010258:	4618      	mov	r0, r3
 801025a:	f7fe f9c5 	bl	800e5e8 <WrByte>
 801025e:	4603      	mov	r3, r0
 8010260:	461a      	mov	r2, r3
 8010262:	7bfb      	ldrb	r3, [r7, #15]
 8010264:	4313      	orrs	r3, r2
 8010266:	73fb      	strb	r3, [r7, #15]

	return status;
 8010268:	7bfb      	ldrb	r3, [r7, #15]
}
 801026a:	4618      	mov	r0, r3
 801026c:	3710      	adds	r7, #16
 801026e:	46bd      	mov	sp, r7
 8010270:	bd80      	pop	{r7, pc}

08010272 <vl53l5cx_set_power_mode>:

uint8_t vl53l5cx_set_power_mode(
		VL53L5CX_Configuration		*p_dev,
		uint8_t			        power_mode)
{
 8010272:	b580      	push	{r7, lr}
 8010274:	b086      	sub	sp, #24
 8010276:	af02      	add	r7, sp, #8
 8010278:	6078      	str	r0, [r7, #4]
 801027a:	460b      	mov	r3, r1
 801027c:	70fb      	strb	r3, [r7, #3]
	uint8_t current_power_mode, status = VL53L5CX_STATUS_OK;
 801027e:	2300      	movs	r3, #0
 8010280:	73fb      	strb	r3, [r7, #15]

	status |= vl53l5cx_get_power_mode(p_dev, &current_power_mode);
 8010282:	f107 030e 	add.w	r3, r7, #14
 8010286:	4619      	mov	r1, r3
 8010288:	6878      	ldr	r0, [r7, #4]
 801028a:	f7ff ffaf 	bl	80101ec <vl53l5cx_get_power_mode>
 801028e:	4603      	mov	r3, r0
 8010290:	461a      	mov	r2, r3
 8010292:	7bfb      	ldrb	r3, [r7, #15]
 8010294:	4313      	orrs	r3, r2
 8010296:	73fb      	strb	r3, [r7, #15]
	if(power_mode != current_power_mode)
 8010298:	7bbb      	ldrb	r3, [r7, #14]
 801029a:	78fa      	ldrb	r2, [r7, #3]
 801029c:	429a      	cmp	r2, r3
 801029e:	d061      	beq.n	8010364 <vl53l5cx_set_power_mode+0xf2>
	{
	switch(power_mode)
 80102a0:	78fb      	ldrb	r3, [r7, #3]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d028      	beq.n	80102f8 <vl53l5cx_set_power_mode+0x86>
 80102a6:	2b01      	cmp	r3, #1
 80102a8:	d14d      	bne.n	8010346 <vl53l5cx_set_power_mode+0xd4>
	{
		case VL53L5CX_POWER_MODE_WAKEUP:
			status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	2200      	movs	r2, #0
 80102ae:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80102b2:	4618      	mov	r0, r3
 80102b4:	f7fe f998 	bl	800e5e8 <WrByte>
 80102b8:	4603      	mov	r3, r0
 80102ba:	461a      	mov	r2, r3
 80102bc:	7bfb      	ldrb	r3, [r7, #15]
 80102be:	4313      	orrs	r3, r2
 80102c0:	73fb      	strb	r3, [r7, #15]
			status |= WrByte(&(p_dev->platform), 0x09, 0x04);
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	2204      	movs	r2, #4
 80102c6:	2109      	movs	r1, #9
 80102c8:	4618      	mov	r0, r3
 80102ca:	f7fe f98d 	bl	800e5e8 <WrByte>
 80102ce:	4603      	mov	r3, r0
 80102d0:	461a      	mov	r2, r3
 80102d2:	7bfb      	ldrb	r3, [r7, #15]
 80102d4:	4313      	orrs	r3, r2
 80102d6:	73fb      	strb	r3, [r7, #15]
			status |= _vl53l5cx_poll_for_answer(
 80102d8:	2301      	movs	r3, #1
 80102da:	9301      	str	r3, [sp, #4]
 80102dc:	2301      	movs	r3, #1
 80102de:	9300      	str	r3, [sp, #0]
 80102e0:	2306      	movs	r3, #6
 80102e2:	2200      	movs	r2, #0
 80102e4:	2101      	movs	r1, #1
 80102e6:	6878      	ldr	r0, [r7, #4]
 80102e8:	f7fe ff35 	bl	800f156 <_vl53l5cx_poll_for_answer>
 80102ec:	4603      	mov	r3, r0
 80102ee:	461a      	mov	r2, r3
 80102f0:	7bfb      	ldrb	r3, [r7, #15]
 80102f2:	4313      	orrs	r3, r2
 80102f4:	73fb      	strb	r3, [r7, #15]
						p_dev, 1, 0, 0x06, 0x01, 1);
			break;
 80102f6:	e029      	b.n	801034c <vl53l5cx_set_power_mode+0xda>

		case VL53L5CX_POWER_MODE_SLEEP:
			status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	2200      	movs	r2, #0
 80102fc:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8010300:	4618      	mov	r0, r3
 8010302:	f7fe f971 	bl	800e5e8 <WrByte>
 8010306:	4603      	mov	r3, r0
 8010308:	461a      	mov	r2, r3
 801030a:	7bfb      	ldrb	r3, [r7, #15]
 801030c:	4313      	orrs	r3, r2
 801030e:	73fb      	strb	r3, [r7, #15]
			status |= WrByte(&(p_dev->platform), 0x09, 0x02);
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	2202      	movs	r2, #2
 8010314:	2109      	movs	r1, #9
 8010316:	4618      	mov	r0, r3
 8010318:	f7fe f966 	bl	800e5e8 <WrByte>
 801031c:	4603      	mov	r3, r0
 801031e:	461a      	mov	r2, r3
 8010320:	7bfb      	ldrb	r3, [r7, #15]
 8010322:	4313      	orrs	r3, r2
 8010324:	73fb      	strb	r3, [r7, #15]
			status |= _vl53l5cx_poll_for_answer(
 8010326:	2300      	movs	r3, #0
 8010328:	9301      	str	r3, [sp, #4]
 801032a:	2301      	movs	r3, #1
 801032c:	9300      	str	r3, [sp, #0]
 801032e:	2306      	movs	r3, #6
 8010330:	2200      	movs	r2, #0
 8010332:	2101      	movs	r1, #1
 8010334:	6878      	ldr	r0, [r7, #4]
 8010336:	f7fe ff0e 	bl	800f156 <_vl53l5cx_poll_for_answer>
 801033a:	4603      	mov	r3, r0
 801033c:	461a      	mov	r2, r3
 801033e:	7bfb      	ldrb	r3, [r7, #15]
 8010340:	4313      	orrs	r3, r2
 8010342:	73fb      	strb	r3, [r7, #15]
						p_dev, 1, 0, 0x06, 0x01, 0);
			break;
 8010344:	e002      	b.n	801034c <vl53l5cx_set_power_mode+0xda>

		default:
			status = VL53L5CX_STATUS_ERROR;
 8010346:	23ff      	movs	r3, #255	; 0xff
 8010348:	73fb      	strb	r3, [r7, #15]
			break;
 801034a:	bf00      	nop
		}
		status |= WrByte(&(p_dev->platform), 0x7FFF, 0x02);
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	2202      	movs	r2, #2
 8010350:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8010354:	4618      	mov	r0, r3
 8010356:	f7fe f947 	bl	800e5e8 <WrByte>
 801035a:	4603      	mov	r3, r0
 801035c:	461a      	mov	r2, r3
 801035e:	7bfb      	ldrb	r3, [r7, #15]
 8010360:	4313      	orrs	r3, r2
 8010362:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8010364:	7bfb      	ldrb	r3, [r7, #15]
}
 8010366:	4618      	mov	r0, r3
 8010368:	3710      	adds	r7, #16
 801036a:	46bd      	mov	sp, r7
 801036c:	bd80      	pop	{r7, pc}
	...

08010370 <vl53l5cx_start_ranging>:

uint8_t vl53l5cx_start_ranging(
		VL53L5CX_Configuration		*p_dev)
{
 8010370:	b5b0      	push	{r4, r5, r7, lr}
 8010372:	b09c      	sub	sp, #112	; 0x70
 8010374:	af02      	add	r7, sp, #8
 8010376:	6078      	str	r0, [r7, #4]
	uint8_t resolution, status = VL53L5CX_STATUS_OK;
 8010378:	2300      	movs	r3, #0
 801037a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint16_t tmp;
	uint32_t i;
	uint32_t header_config[2] = {0, 0};
 801037e:	2300      	movs	r3, #0
 8010380:	653b      	str	r3, [r7, #80]	; 0x50
 8010382:	2300      	movs	r3, #0
 8010384:	657b      	str	r3, [r7, #84]	; 0x54

	union Block_header *bh_ptr;
	uint8_t cmd[] = {0x00, 0x03, 0x00, 0x00};
 8010386:	f44f 7340 	mov.w	r3, #768	; 0x300
 801038a:	64fb      	str	r3, [r7, #76]	; 0x4c

	status |= vl53l5cx_get_resolution(p_dev, &resolution);
 801038c:	f107 035b 	add.w	r3, r7, #91	; 0x5b
 8010390:	4619      	mov	r1, r3
 8010392:	6878      	ldr	r0, [r7, #4]
 8010394:	f000 fc56 	bl	8010c44 <vl53l5cx_get_resolution>
 8010398:	4603      	mov	r3, r0
 801039a:	461a      	mov	r2, r3
 801039c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80103a0:	4313      	orrs	r3, r2
 80103a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	p_dev->data_read_size = 0;
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	2200      	movs	r2, #0
 80103aa:	615a      	str	r2, [r3, #20]
	p_dev->streamcount = 255;
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	22ff      	movs	r2, #255	; 0xff
 80103b0:	741a      	strb	r2, [r3, #16]

	/* Enable mandatory output (meta and common data) */
	uint32_t output_bh_enable[] = {
 80103b2:	4ba7      	ldr	r3, [pc, #668]	; (8010650 <vl53l5cx_start_ranging+0x2e0>)
 80103b4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80103b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80103ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00000000U,
		0x00000000U,
		0xC0000000U};

	/* Send addresses of possible output */
	uint32_t output[] ={VL53L5CX_START_BH,
 80103be:	4ba5      	ldr	r3, [pc, #660]	; (8010654 <vl53l5cx_start_ranging+0x2e4>)
 80103c0:	f107 040c 	add.w	r4, r7, #12
 80103c4:	461d      	mov	r5, r3
 80103c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80103c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80103ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80103cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80103ce:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80103d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		VL53L5CX_TARGET_STATUS_BH,
		VL53L5CX_MOTION_DETECT_BH};

	/* Enable selected outputs in the 'platform.h' file */
#ifndef VL53L5CX_DISABLE_AMBIENT_PER_SPAD
	output_bh_enable[0] += (uint32_t)8;
 80103d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103d8:	3308      	adds	r3, #8
 80103da:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L5CX_DISABLE_NB_SPADS_ENABLED
	output_bh_enable[0] += (uint32_t)16;
#endif
#ifndef VL53L5CX_DISABLE_NB_TARGET_DETECTED
	output_bh_enable[0] += (uint32_t)32;
 80103dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103de:	3320      	adds	r3, #32
 80103e0:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L5CX_DISABLE_SIGNAL_PER_SPAD
	output_bh_enable[0] += (uint32_t)64;
 80103e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103e4:	3340      	adds	r3, #64	; 0x40
 80103e6:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L5CX_DISABLE_RANGE_SIGMA_MM
	output_bh_enable[0] += (uint32_t)128;
#endif
#ifndef VL53L5CX_DISABLE_DISTANCE_MM
	output_bh_enable[0] += (uint32_t)256;
 80103e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103ea:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80103ee:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L5CX_DISABLE_REFLECTANCE_PERCENT
	output_bh_enable[0] += (uint32_t)512;
 80103f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103f2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80103f6:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L5CX_DISABLE_TARGET_STATUS
	output_bh_enable[0] += (uint32_t)1024;
 80103f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80103fe:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L5CX_DISABLE_MOTION_INDICATOR
	output_bh_enable[0] += (uint32_t)2048;
 8010400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010406:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

	/* Update data size */
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 8010408:	2300      	movs	r3, #0
 801040a:	663b      	str	r3, [r7, #96]	; 0x60
 801040c:	e073      	b.n	80104f6 <vl53l5cx_start_ranging+0x186>
	{
		if ((output[i] == (uint8_t)0) 
 801040e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010410:	009b      	lsls	r3, r3, #2
 8010412:	3368      	adds	r3, #104	; 0x68
 8010414:	443b      	add	r3, r7
 8010416:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d067      	beq.n	80104ee <vl53l5cx_start_ranging+0x17e>
                    || ((output_bh_enable[i/(uint32_t)32]
 801041e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010420:	095b      	lsrs	r3, r3, #5
 8010422:	009b      	lsls	r3, r3, #2
 8010424:	3368      	adds	r3, #104	; 0x68
 8010426:	443b      	add	r3, r7
 8010428:	f853 2c2c 	ldr.w	r2, [r3, #-44]
                         &((uint32_t)1 << (i%(uint32_t)32))) == (uint32_t)0))
 801042c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801042e:	f003 031f 	and.w	r3, r3, #31
 8010432:	fa22 f303 	lsr.w	r3, r2, r3
 8010436:	f003 0301 	and.w	r3, r3, #1
                    || ((output_bh_enable[i/(uint32_t)32]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d057      	beq.n	80104ee <vl53l5cx_start_ranging+0x17e>
		{
			continue;
		}

		bh_ptr = (union Block_header *)&(output[i]);
 801043e:	f107 020c 	add.w	r2, r7, #12
 8010442:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010444:	009b      	lsls	r3, r3, #2
 8010446:	4413      	add	r3, r2
 8010448:	65fb      	str	r3, [r7, #92]	; 0x5c
		if (((uint8_t)bh_ptr->type >= (uint8_t)0x1) 
 801044a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801044c:	781b      	ldrb	r3, [r3, #0]
 801044e:	f003 030f 	and.w	r3, r3, #15
 8010452:	b2db      	uxtb	r3, r3
 8010454:	2b00      	cmp	r3, #0
 8010456:	d03a      	beq.n	80104ce <vl53l5cx_start_ranging+0x15e>
                    && ((uint8_t)bh_ptr->type < (uint8_t)0x0d))
 8010458:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801045a:	781b      	ldrb	r3, [r3, #0]
 801045c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8010460:	b2db      	uxtb	r3, r3
 8010462:	2b0c      	cmp	r3, #12
 8010464:	d833      	bhi.n	80104ce <vl53l5cx_start_ranging+0x15e>
		{
			if ((bh_ptr->idx >= (uint16_t)0x54d0) 
 8010466:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010468:	885b      	ldrh	r3, [r3, #2]
 801046a:	f245 42cf 	movw	r2, #21711	; 0x54cf
 801046e:	4293      	cmp	r3, r2
 8010470:	d910      	bls.n	8010494 <vl53l5cx_start_ranging+0x124>
                            && (bh_ptr->idx < (uint16_t)(0x54d0 + 960)))
 8010472:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010474:	885b      	ldrh	r3, [r3, #2]
 8010476:	f645 028f 	movw	r2, #22671	; 0x588f
 801047a:	4293      	cmp	r3, r2
 801047c:	d80a      	bhi.n	8010494 <vl53l5cx_start_ranging+0x124>
			{
				bh_ptr->size = resolution;
 801047e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8010482:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010486:	b299      	uxth	r1, r3
 8010488:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801048a:	8813      	ldrh	r3, [r2, #0]
 801048c:	f361 130f 	bfi	r3, r1, #4, #12
 8010490:	8013      	strh	r3, [r2, #0]
 8010492:	e009      	b.n	80104a8 <vl53l5cx_start_ranging+0x138>
			}
			else
			{
				bh_ptr->size = (uint16_t)((uint16_t)resolution
 8010494:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8010498:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801049c:	b299      	uxth	r1, r3
 801049e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80104a0:	8813      	ldrh	r3, [r2, #0]
 80104a2:	f361 130f 	bfi	r3, r1, #4, #12
 80104a6:	8013      	strh	r3, [r2, #0]
                                  * (uint16_t)VL53L5CX_NB_TARGET_PER_ZONE);
			}
			p_dev->data_read_size += bh_ptr->type * bh_ptr->size;
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	695b      	ldr	r3, [r3, #20]
 80104ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80104ae:	7812      	ldrb	r2, [r2, #0]
 80104b0:	f3c2 0203 	ubfx	r2, r2, #0, #4
 80104b4:	b2d2      	uxtb	r2, r2
 80104b6:	4611      	mov	r1, r2
 80104b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80104ba:	8812      	ldrh	r2, [r2, #0]
 80104bc:	f3c2 120b 	ubfx	r2, r2, #4, #12
 80104c0:	b292      	uxth	r2, r2
 80104c2:	fb01 f202 	mul.w	r2, r1, r2
 80104c6:	441a      	add	r2, r3
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	615a      	str	r2, [r3, #20]
 80104cc:	e009      	b.n	80104e2 <vl53l5cx_start_ranging+0x172>
		}
		else
		{
			p_dev->data_read_size += bh_ptr->size;
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	695b      	ldr	r3, [r3, #20]
 80104d2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80104d4:	8812      	ldrh	r2, [r2, #0]
 80104d6:	f3c2 120b 	ubfx	r2, r2, #4, #12
 80104da:	b292      	uxth	r2, r2
 80104dc:	441a      	add	r2, r3
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	615a      	str	r2, [r3, #20]
		}
		p_dev->data_read_size += (uint32_t)4;
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	695b      	ldr	r3, [r3, #20]
 80104e6:	1d1a      	adds	r2, r3, #4
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	615a      	str	r2, [r3, #20]
 80104ec:	e000      	b.n	80104f0 <vl53l5cx_start_ranging+0x180>
			continue;
 80104ee:	bf00      	nop
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 80104f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80104f2:	3301      	adds	r3, #1
 80104f4:	663b      	str	r3, [r7, #96]	; 0x60
 80104f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80104f8:	2b0b      	cmp	r3, #11
 80104fa:	d988      	bls.n	801040e <vl53l5cx_start_ranging+0x9e>
	}
	p_dev->data_read_size += (uint32_t)24;
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	695b      	ldr	r3, [r3, #20]
 8010500:	f103 0218 	add.w	r2, r3, #24
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	615a      	str	r2, [r3, #20]

	status |= vl53l5cx_dci_write_data(p_dev,
 8010508:	f107 010c 	add.w	r1, r7, #12
 801050c:	2330      	movs	r3, #48	; 0x30
 801050e:	f64d 1280 	movw	r2, #55680	; 0xd980
 8010512:	6878      	ldr	r0, [r7, #4]
 8010514:	f000 fdc6 	bl	80110a4 <vl53l5cx_dci_write_data>
 8010518:	4603      	mov	r3, r0
 801051a:	461a      	mov	r2, r3
 801051c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010520:	4313      	orrs	r3, r2
 8010522:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			(uint8_t*)&(output), VL53L5CX_DCI_OUTPUT_LIST,
			(uint16_t)sizeof(output));

	header_config[0] = p_dev->data_read_size;
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	695b      	ldr	r3, [r3, #20]
 801052a:	653b      	str	r3, [r7, #80]	; 0x50
	header_config[1] = i + (uint32_t)1;
 801052c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801052e:	3301      	adds	r3, #1
 8010530:	657b      	str	r3, [r7, #84]	; 0x54

	status |= vl53l5cx_dci_write_data(p_dev,
 8010532:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8010536:	2308      	movs	r3, #8
 8010538:	f64d 1268 	movw	r2, #55656	; 0xd968
 801053c:	6878      	ldr	r0, [r7, #4]
 801053e:	f000 fdb1 	bl	80110a4 <vl53l5cx_dci_write_data>
 8010542:	4603      	mov	r3, r0
 8010544:	461a      	mov	r2, r3
 8010546:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801054a:	4313      	orrs	r3, r2
 801054c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			(uint8_t*)&(header_config), VL53L5CX_DCI_OUTPUT_CONFIG,
			(uint16_t)sizeof(header_config));

	status |= vl53l5cx_dci_write_data(p_dev,
 8010550:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8010554:	2310      	movs	r3, #16
 8010556:	f64d 1270 	movw	r2, #55664	; 0xd970
 801055a:	6878      	ldr	r0, [r7, #4]
 801055c:	f000 fda2 	bl	80110a4 <vl53l5cx_dci_write_data>
 8010560:	4603      	mov	r3, r0
 8010562:	461a      	mov	r2, r3
 8010564:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010568:	4313      	orrs	r3, r2
 801056a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			(uint8_t*)&(output_bh_enable), VL53L5CX_DCI_OUTPUT_ENABLES,
			(uint16_t)sizeof(output_bh_enable));

	/* Start xshut bypass (interrupt mode) */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	2200      	movs	r2, #0
 8010572:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8010576:	4618      	mov	r0, r3
 8010578:	f7fe f836 	bl	800e5e8 <WrByte>
 801057c:	4603      	mov	r3, r0
 801057e:	461a      	mov	r2, r3
 8010580:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010584:	4313      	orrs	r3, r2
 8010586:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	status |= WrByte(&(p_dev->platform), 0x09, 0x05);
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	2205      	movs	r2, #5
 801058e:	2109      	movs	r1, #9
 8010590:	4618      	mov	r0, r3
 8010592:	f7fe f829 	bl	800e5e8 <WrByte>
 8010596:	4603      	mov	r3, r0
 8010598:	461a      	mov	r2, r3
 801059a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801059e:	4313      	orrs	r3, r2
 80105a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	2202      	movs	r2, #2
 80105a8:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80105ac:	4618      	mov	r0, r3
 80105ae:	f7fe f81b 	bl	800e5e8 <WrByte>
 80105b2:	4603      	mov	r3, r0
 80105b4:	461a      	mov	r2, r3
 80105b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80105ba:	4313      	orrs	r3, r2
 80105bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	/* Start ranging session */
	status |= WrMulti(&(p_dev->platform), VL53L5CX_UI_CMD_END -
 80105c0:	6878      	ldr	r0, [r7, #4]
 80105c2:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80105c6:	2304      	movs	r3, #4
 80105c8:	f642 71fc 	movw	r1, #12284	; 0x2ffc
 80105cc:	f7fe f822 	bl	800e614 <WrMulti>
 80105d0:	4603      	mov	r3, r0
 80105d2:	461a      	mov	r2, r3
 80105d4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80105d8:	4313      	orrs	r3, r2
 80105da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			(uint16_t)(4 - 1), (uint8_t*)cmd, sizeof(cmd));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 80105de:	2303      	movs	r3, #3
 80105e0:	9301      	str	r3, [sp, #4]
 80105e2:	23ff      	movs	r3, #255	; 0xff
 80105e4:	9300      	str	r3, [sp, #0]
 80105e6:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80105ea:	2201      	movs	r2, #1
 80105ec:	2104      	movs	r1, #4
 80105ee:	6878      	ldr	r0, [r7, #4]
 80105f0:	f7fe fdb1 	bl	800f156 <_vl53l5cx_poll_for_answer>
 80105f4:	4603      	mov	r3, r0
 80105f6:	461a      	mov	r2, r3
 80105f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80105fc:	4313      	orrs	r3, r2
 80105fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	/* Read ui range data content and compare if data size is the correct one */
	status |= vl53l5cx_dci_read_data(p_dev,
			(uint8_t*)p_dev->temp_buffer, 0x5440, 12);
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
	status |= vl53l5cx_dci_read_data(p_dev,
 8010608:	230c      	movs	r3, #12
 801060a:	f245 4240 	movw	r2, #21568	; 0x5440
 801060e:	6878      	ldr	r0, [r7, #4]
 8010610:	f000 fcbe 	bl	8010f90 <vl53l5cx_dci_read_data>
 8010614:	4603      	mov	r3, r0
 8010616:	461a      	mov	r2, r3
 8010618:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801061c:	4313      	orrs	r3, r2
 801061e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	(void)memcpy(&tmp, &(p_dev->temp_buffer[0x8]), sizeof(tmp));
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8010628:	881b      	ldrh	r3, [r3, #0]
 801062a:	b29b      	uxth	r3, r3
 801062c:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	if(tmp != p_dev->data_read_size)
 8010630:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8010634:	461a      	mov	r2, r3
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	695b      	ldr	r3, [r3, #20]
 801063a:	429a      	cmp	r2, r3
 801063c:	d002      	beq.n	8010644 <vl53l5cx_start_ranging+0x2d4>
	{
		status |= VL53L5CX_STATUS_ERROR;
 801063e:	23ff      	movs	r3, #255	; 0xff
 8010640:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	}

	return status;
 8010644:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8010648:	4618      	mov	r0, r3
 801064a:	3768      	adds	r7, #104	; 0x68
 801064c:	46bd      	mov	sp, r7
 801064e:	bdb0      	pop	{r4, r5, r7, pc}
 8010650:	080219c0 	.word	0x080219c0
 8010654:	080219d0 	.word	0x080219d0

08010658 <vl53l5cx_stop_ranging>:

uint8_t vl53l5cx_stop_ranging(
		VL53L5CX_Configuration		*p_dev)
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b086      	sub	sp, #24
 801065c:	af00      	add	r7, sp, #0
 801065e:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0, status = VL53L5CX_STATUS_OK;
 8010660:	2300      	movs	r3, #0
 8010662:	74fb      	strb	r3, [r7, #19]
 8010664:	2300      	movs	r3, #0
 8010666:	75fb      	strb	r3, [r7, #23]
	uint16_t timeout = 0;
 8010668:	2300      	movs	r3, #0
 801066a:	82bb      	strh	r3, [r7, #20]
	uint32_t auto_stop_flag = 0;
 801066c:	2300      	movs	r3, #0
 801066e:	60fb      	str	r3, [r7, #12]

	status |= RdMulti(&(p_dev->platform),
 8010670:	6878      	ldr	r0, [r7, #4]
 8010672:	f107 020c 	add.w	r2, r7, #12
 8010676:	2304      	movs	r3, #4
 8010678:	f642 71fc 	movw	r1, #12284	; 0x2ffc
 801067c:	f7fd ffe1 	bl	800e642 <RdMulti>
 8010680:	4603      	mov	r3, r0
 8010682:	461a      	mov	r2, r3
 8010684:	7dfb      	ldrb	r3, [r7, #23]
 8010686:	4313      	orrs	r3, r2
 8010688:	75fb      	strb	r3, [r7, #23]
                          0x2FFC, (uint8_t*)&auto_stop_flag, 4);
	if((auto_stop_flag != (uint32_t)0x4FF)
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	f240 42ff 	movw	r2, #1279	; 0x4ff
 8010690:	4293      	cmp	r3, r2
 8010692:	d04d      	beq.n	8010730 <vl53l5cx_stop_ranging+0xd8>
		&& (p_dev->is_auto_stop_enabled == (uint8_t)1))
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	f893 3934 	ldrb.w	r3, [r3, #2356]	; 0x934
 801069a:	2b01      	cmp	r3, #1
 801069c:	d148      	bne.n	8010730 <vl53l5cx_stop_ranging+0xd8>
	{
		status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	2200      	movs	r2, #0
 80106a2:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80106a6:	4618      	mov	r0, r3
 80106a8:	f7fd ff9e 	bl	800e5e8 <WrByte>
 80106ac:	4603      	mov	r3, r0
 80106ae:	461a      	mov	r2, r3
 80106b0:	7dfb      	ldrb	r3, [r7, #23]
 80106b2:	4313      	orrs	r3, r2
 80106b4:	75fb      	strb	r3, [r7, #23]

		/* Provoke MCU stop */
		status |= WrByte(&(p_dev->platform), 0x15, 0x16);
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	2216      	movs	r2, #22
 80106ba:	2115      	movs	r1, #21
 80106bc:	4618      	mov	r0, r3
 80106be:	f7fd ff93 	bl	800e5e8 <WrByte>
 80106c2:	4603      	mov	r3, r0
 80106c4:	461a      	mov	r2, r3
 80106c6:	7dfb      	ldrb	r3, [r7, #23]
 80106c8:	4313      	orrs	r3, r2
 80106ca:	75fb      	strb	r3, [r7, #23]
		status |= WrByte(&(p_dev->platform), 0x14, 0x01);
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	2201      	movs	r2, #1
 80106d0:	2114      	movs	r1, #20
 80106d2:	4618      	mov	r0, r3
 80106d4:	f7fd ff88 	bl	800e5e8 <WrByte>
 80106d8:	4603      	mov	r3, r0
 80106da:	461a      	mov	r2, r3
 80106dc:	7dfb      	ldrb	r3, [r7, #23]
 80106de:	4313      	orrs	r3, r2
 80106e0:	75fb      	strb	r3, [r7, #23]

		/* Poll for G02 status 0 MCU stop */
		while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 80106e2:	e021      	b.n	8010728 <vl53l5cx_stop_ranging+0xd0>
		{
			status |= RdByte(&(p_dev->platform), 0x6, &tmp);
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	f107 0213 	add.w	r2, r7, #19
 80106ea:	2106      	movs	r1, #6
 80106ec:	4618      	mov	r0, r3
 80106ee:	f7fd ff66 	bl	800e5be <RdByte>
 80106f2:	4603      	mov	r3, r0
 80106f4:	461a      	mov	r2, r3
 80106f6:	7dfb      	ldrb	r3, [r7, #23]
 80106f8:	4313      	orrs	r3, r2
 80106fa:	75fb      	strb	r3, [r7, #23]
			status |= WaitMs(&(p_dev->platform), 10);
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	210a      	movs	r1, #10
 8010700:	4618      	mov	r0, r3
 8010702:	f7fd ffeb 	bl	800e6dc <WaitMs>
 8010706:	4603      	mov	r3, r0
 8010708:	461a      	mov	r2, r3
 801070a:	7dfb      	ldrb	r3, [r7, #23]
 801070c:	4313      	orrs	r3, r2
 801070e:	75fb      	strb	r3, [r7, #23]
			timeout++;	/* Timeout reached after 5 seconds */
 8010710:	8abb      	ldrh	r3, [r7, #20]
 8010712:	3301      	adds	r3, #1
 8010714:	82bb      	strh	r3, [r7, #20]

			if(timeout > (uint16_t)500)
 8010716:	8abb      	ldrh	r3, [r7, #20]
 8010718:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 801071c:	d904      	bls.n	8010728 <vl53l5cx_stop_ranging+0xd0>
			{
				status |= tmp;
 801071e:	7cfa      	ldrb	r2, [r7, #19]
 8010720:	7dfb      	ldrb	r3, [r7, #23]
 8010722:	4313      	orrs	r3, r2
 8010724:	75fb      	strb	r3, [r7, #23]
				break;
 8010726:	e003      	b.n	8010730 <vl53l5cx_stop_ranging+0xd8>
		while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 8010728:	7cfb      	ldrb	r3, [r7, #19]
 801072a:	b25b      	sxtb	r3, r3
 801072c:	2b00      	cmp	r3, #0
 801072e:	dad9      	bge.n	80106e4 <vl53l5cx_stop_ranging+0x8c>
			}
		}
	}

	/* Check GO2 status 1 if status is still OK */
	status |= RdByte(&(p_dev->platform), 0x6, &tmp);
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	f107 0213 	add.w	r2, r7, #19
 8010736:	2106      	movs	r1, #6
 8010738:	4618      	mov	r0, r3
 801073a:	f7fd ff40 	bl	800e5be <RdByte>
 801073e:	4603      	mov	r3, r0
 8010740:	461a      	mov	r2, r3
 8010742:	7dfb      	ldrb	r3, [r7, #23]
 8010744:	4313      	orrs	r3, r2
 8010746:	75fb      	strb	r3, [r7, #23]
	if((tmp & (uint8_t)0x80) != (uint8_t)0){
 8010748:	7cfb      	ldrb	r3, [r7, #19]
 801074a:	b25b      	sxtb	r3, r3
 801074c:	2b00      	cmp	r3, #0
 801074e:	da15      	bge.n	801077c <vl53l5cx_stop_ranging+0x124>
		status |= RdByte(&(p_dev->platform), 0x7, &tmp);
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	f107 0213 	add.w	r2, r7, #19
 8010756:	2107      	movs	r1, #7
 8010758:	4618      	mov	r0, r3
 801075a:	f7fd ff30 	bl	800e5be <RdByte>
 801075e:	4603      	mov	r3, r0
 8010760:	461a      	mov	r2, r3
 8010762:	7dfb      	ldrb	r3, [r7, #23]
 8010764:	4313      	orrs	r3, r2
 8010766:	75fb      	strb	r3, [r7, #23]
		if((tmp != (uint8_t)0x84) && (tmp != (uint8_t)0x85)){
 8010768:	7cfb      	ldrb	r3, [r7, #19]
 801076a:	2b84      	cmp	r3, #132	; 0x84
 801076c:	d006      	beq.n	801077c <vl53l5cx_stop_ranging+0x124>
 801076e:	7cfb      	ldrb	r3, [r7, #19]
 8010770:	2b85      	cmp	r3, #133	; 0x85
 8010772:	d003      	beq.n	801077c <vl53l5cx_stop_ranging+0x124>
		   status |= tmp;
 8010774:	7cfa      	ldrb	r2, [r7, #19]
 8010776:	7dfb      	ldrb	r3, [r7, #23]
 8010778:	4313      	orrs	r3, r2
 801077a:	75fb      	strb	r3, [r7, #23]
		}
	}

	/* Undo MCU stop */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	2200      	movs	r2, #0
 8010780:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8010784:	4618      	mov	r0, r3
 8010786:	f7fd ff2f 	bl	800e5e8 <WrByte>
 801078a:	4603      	mov	r3, r0
 801078c:	461a      	mov	r2, r3
 801078e:	7dfb      	ldrb	r3, [r7, #23]
 8010790:	4313      	orrs	r3, r2
 8010792:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x14, 0x00);
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	2200      	movs	r2, #0
 8010798:	2114      	movs	r1, #20
 801079a:	4618      	mov	r0, r3
 801079c:	f7fd ff24 	bl	800e5e8 <WrByte>
 80107a0:	4603      	mov	r3, r0
 80107a2:	461a      	mov	r2, r3
 80107a4:	7dfb      	ldrb	r3, [r7, #23]
 80107a6:	4313      	orrs	r3, r2
 80107a8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x15, 0x00);
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	2200      	movs	r2, #0
 80107ae:	2115      	movs	r1, #21
 80107b0:	4618      	mov	r0, r3
 80107b2:	f7fd ff19 	bl	800e5e8 <WrByte>
 80107b6:	4603      	mov	r3, r0
 80107b8:	461a      	mov	r2, r3
 80107ba:	7dfb      	ldrb	r3, [r7, #23]
 80107bc:	4313      	orrs	r3, r2
 80107be:	75fb      	strb	r3, [r7, #23]

	/* Stop xshut bypass */
	status |= WrByte(&(p_dev->platform), 0x09, 0x04);
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	2204      	movs	r2, #4
 80107c4:	2109      	movs	r1, #9
 80107c6:	4618      	mov	r0, r3
 80107c8:	f7fd ff0e 	bl	800e5e8 <WrByte>
 80107cc:	4603      	mov	r3, r0
 80107ce:	461a      	mov	r2, r3
 80107d0:	7dfb      	ldrb	r3, [r7, #23]
 80107d2:	4313      	orrs	r3, r2
 80107d4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	2202      	movs	r2, #2
 80107da:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80107de:	4618      	mov	r0, r3
 80107e0:	f7fd ff02 	bl	800e5e8 <WrByte>
 80107e4:	4603      	mov	r3, r0
 80107e6:	461a      	mov	r2, r3
 80107e8:	7dfb      	ldrb	r3, [r7, #23]
 80107ea:	4313      	orrs	r3, r2
 80107ec:	75fb      	strb	r3, [r7, #23]

	return status;
 80107ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80107f0:	4618      	mov	r0, r3
 80107f2:	3718      	adds	r7, #24
 80107f4:	46bd      	mov	sp, r7
 80107f6:	bd80      	pop	{r7, pc}

080107f8 <vl53l5cx_check_data_ready>:

uint8_t vl53l5cx_check_data_ready(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_isReady)
{
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b084      	sub	sp, #16
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
 8010800:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8010802:	2300      	movs	r3, #0
 8010804:	73fb      	strb	r3, [r7, #15]

	status |= RdMulti(&(p_dev->platform), 0x0, p_dev->temp_buffer, 4);
 8010806:	6878      	ldr	r0, [r7, #4]
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 801080e:	2304      	movs	r3, #4
 8010810:	2100      	movs	r1, #0
 8010812:	f7fd ff16 	bl	800e642 <RdMulti>
 8010816:	4603      	mov	r3, r0
 8010818:	461a      	mov	r2, r3
 801081a:	7bfb      	ldrb	r3, [r7, #15]
 801081c:	4313      	orrs	r3, r2
 801081e:	73fb      	strb	r3, [r7, #15]

	if((p_dev->temp_buffer[0] != p_dev->streamcount)
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	7c1b      	ldrb	r3, [r3, #16]
 801082a:	429a      	cmp	r2, r3
 801082c:	d020      	beq.n	8010870 <vl53l5cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[0] != (uint8_t)255)
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 8010834:	2bff      	cmp	r3, #255	; 0xff
 8010836:	d01b      	beq.n	8010870 <vl53l5cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[1] == (uint8_t)0x5)
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	f893 3511 	ldrb.w	r3, [r3, #1297]	; 0x511
 801083e:	2b05      	cmp	r3, #5
 8010840:	d116      	bne.n	8010870 <vl53l5cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[2] & (uint8_t)0x5) == (uint8_t)0x5)
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	f893 3512 	ldrb.w	r3, [r3, #1298]	; 0x512
 8010848:	f003 0305 	and.w	r3, r3, #5
 801084c:	2b05      	cmp	r3, #5
 801084e:	d10f      	bne.n	8010870 <vl53l5cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[3] & (uint8_t)0x10) ==(uint8_t)0x10)
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	f893 3513 	ldrb.w	r3, [r3, #1299]	; 0x513
 8010856:	f003 0310 	and.w	r3, r3, #16
 801085a:	2b00      	cmp	r3, #0
 801085c:	d008      	beq.n	8010870 <vl53l5cx_check_data_ready+0x78>
			)
	{
		*p_isReady = (uint8_t)1;
 801085e:	683b      	ldr	r3, [r7, #0]
 8010860:	2201      	movs	r2, #1
 8010862:	701a      	strb	r2, [r3, #0]
		 p_dev->streamcount = p_dev->temp_buffer[0];
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	741a      	strb	r2, [r3, #16]
 801086e:	e00e      	b.n	801088e <vl53l5cx_check_data_ready+0x96>
	}
	else
	{
        if ((p_dev->temp_buffer[3] & (uint8_t)0x80) != (uint8_t)0)
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	f893 3513 	ldrb.w	r3, [r3, #1299]	; 0x513
 8010876:	b25b      	sxtb	r3, r3
 8010878:	2b00      	cmp	r3, #0
 801087a:	da05      	bge.n	8010888 <vl53l5cx_check_data_ready+0x90>
        {
        	status |= p_dev->temp_buffer[2];	/* Return GO2 error status */
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	f893 2512 	ldrb.w	r2, [r3, #1298]	; 0x512
 8010882:	7bfb      	ldrb	r3, [r7, #15]
 8010884:	4313      	orrs	r3, r2
 8010886:	73fb      	strb	r3, [r7, #15]
        }

		*p_isReady = 0;
 8010888:	683b      	ldr	r3, [r7, #0]
 801088a:	2200      	movs	r2, #0
 801088c:	701a      	strb	r2, [r3, #0]
	}

	return status;
 801088e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010890:	4618      	mov	r0, r3
 8010892:	3710      	adds	r7, #16
 8010894:	46bd      	mov	sp, r7
 8010896:	bd80      	pop	{r7, pc}

08010898 <vl53l5cx_get_ranging_data>:

uint8_t vl53l5cx_get_ranging_data(
		VL53L5CX_Configuration		*p_dev,
		VL53L5CX_ResultsData		*p_results)
{
 8010898:	b580      	push	{r7, lr}
 801089a:	b088      	sub	sp, #32
 801089c:	af00      	add	r7, sp, #0
 801089e:	6078      	str	r0, [r7, #4]
 80108a0:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 80108a2:	2300      	movs	r3, #0
 80108a4:	77fb      	strb	r3, [r7, #31]
	union Block_header *bh_ptr;
	uint16_t header_id, footer_id;
	uint32_t i, j, msize;

	status |= RdMulti(&(p_dev->platform), 0x0,
 80108a6:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, p_dev->data_read_size);
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
	status |= RdMulti(&(p_dev->platform), 0x0,
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	695b      	ldr	r3, [r3, #20]
 80108b2:	2100      	movs	r1, #0
 80108b4:	f7fd fec5 	bl	800e642 <RdMulti>
 80108b8:	4603      	mov	r3, r0
 80108ba:	461a      	mov	r2, r3
 80108bc:	7ffb      	ldrb	r3, [r7, #31]
 80108be:	4313      	orrs	r3, r2
 80108c0:	77fb      	strb	r3, [r7, #31]
	p_dev->streamcount = p_dev->temp_buffer[0];
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	741a      	strb	r2, [r3, #16]
	SwapBuffer(p_dev->temp_buffer, (uint16_t)p_dev->data_read_size);
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	695b      	ldr	r3, [r3, #20]
 80108d6:	b29b      	uxth	r3, r3
 80108d8:	4619      	mov	r1, r3
 80108da:	4610      	mov	r0, r2
 80108dc:	f7fd fec8 	bl	800e670 <SwapBuffer>

	/* Start conversion at position 16 to avoid headers */
	for (i = (uint32_t)16; i 
 80108e0:	2310      	movs	r3, #16
 80108e2:	61bb      	str	r3, [r7, #24]
 80108e4:	e0db      	b.n	8010a9e <vl53l5cx_get_ranging_data+0x206>
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
	{
		bh_ptr = (union Block_header *)&(p_dev->temp_buffer[i]);
 80108e6:	69bb      	ldr	r3, [r7, #24]
 80108e8:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80108ec:	687a      	ldr	r2, [r7, #4]
 80108ee:	4413      	add	r3, r2
 80108f0:	60bb      	str	r3, [r7, #8]
		if ((bh_ptr->type > (uint32_t)0x1) 
 80108f2:	68bb      	ldr	r3, [r7, #8]
 80108f4:	781b      	ldrb	r3, [r3, #0]
 80108f6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80108fa:	b2db      	uxtb	r3, r3
 80108fc:	2b01      	cmp	r3, #1
 80108fe:	d915      	bls.n	801092c <vl53l5cx_get_ranging_data+0x94>
                    && (bh_ptr->type < (uint32_t)0xd))
 8010900:	68bb      	ldr	r3, [r7, #8]
 8010902:	781b      	ldrb	r3, [r3, #0]
 8010904:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8010908:	b2db      	uxtb	r3, r3
 801090a:	2b0c      	cmp	r3, #12
 801090c:	d80e      	bhi.n	801092c <vl53l5cx_get_ranging_data+0x94>
		{
			msize = bh_ptr->type * bh_ptr->size;
 801090e:	68bb      	ldr	r3, [r7, #8]
 8010910:	781b      	ldrb	r3, [r3, #0]
 8010912:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8010916:	b2db      	uxtb	r3, r3
 8010918:	461a      	mov	r2, r3
 801091a:	68bb      	ldr	r3, [r7, #8]
 801091c:	881b      	ldrh	r3, [r3, #0]
 801091e:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8010922:	b29b      	uxth	r3, r3
 8010924:	fb02 f303 	mul.w	r3, r2, r3
 8010928:	613b      	str	r3, [r7, #16]
 801092a:	e005      	b.n	8010938 <vl53l5cx_get_ranging_data+0xa0>
		}
		else
		{
			msize = bh_ptr->size;
 801092c:	68bb      	ldr	r3, [r7, #8]
 801092e:	881b      	ldrh	r3, [r3, #0]
 8010930:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8010934:	b29b      	uxth	r3, r3
 8010936:	613b      	str	r3, [r7, #16]
		}

		switch(bh_ptr->idx){
 8010938:	68bb      	ldr	r3, [r7, #8]
 801093a:	885b      	ldrh	r3, [r3, #2]
 801093c:	f24e 0284 	movw	r2, #57476	; 0xe084
 8010940:	4293      	cmp	r3, r2
 8010942:	f000 8088 	beq.w	8010a56 <vl53l5cx_get_ranging_data+0x1be>
 8010946:	f24e 0284 	movw	r2, #57476	; 0xe084
 801094a:	4293      	cmp	r3, r2
 801094c:	f300 809f 	bgt.w	8010a8e <vl53l5cx_get_ranging_data+0x1f6>
 8010950:	f24e 0244 	movw	r2, #57412	; 0xe044
 8010954:	4293      	cmp	r3, r2
 8010956:	d070      	beq.n	8010a3a <vl53l5cx_get_ranging_data+0x1a2>
 8010958:	f24e 0244 	movw	r2, #57412	; 0xe044
 801095c:	4293      	cmp	r3, r2
 801095e:	f300 8096 	bgt.w	8010a8e <vl53l5cx_get_ranging_data+0x1f6>
 8010962:	f64d 7244 	movw	r2, #57156	; 0xdf44
 8010966:	4293      	cmp	r3, r2
 8010968:	d059      	beq.n	8010a1e <vl53l5cx_get_ranging_data+0x186>
 801096a:	f64d 7244 	movw	r2, #57156	; 0xdf44
 801096e:	4293      	cmp	r3, r2
 8010970:	f300 808d 	bgt.w	8010a8e <vl53l5cx_get_ranging_data+0x1f6>
 8010974:	f64d 32c4 	movw	r2, #56260	; 0xdbc4
 8010978:	4293      	cmp	r3, r2
 801097a:	d042      	beq.n	8010a02 <vl53l5cx_get_ranging_data+0x16a>
 801097c:	f64d 32c4 	movw	r2, #56260	; 0xdbc4
 8010980:	4293      	cmp	r3, r2
 8010982:	f300 8084 	bgt.w	8010a8e <vl53l5cx_get_ranging_data+0x1f6>
 8010986:	f64d 3284 	movw	r2, #56196	; 0xdb84
 801098a:	4293      	cmp	r3, r2
 801098c:	d02b      	beq.n	80109e6 <vl53l5cx_get_ranging_data+0x14e>
 801098e:	f64d 3284 	movw	r2, #56196	; 0xdb84
 8010992:	4293      	cmp	r3, r2
 8010994:	dc7b      	bgt.n	8010a8e <vl53l5cx_get_ranging_data+0x1f6>
 8010996:	f64d 0258 	movw	r2, #55384	; 0xd858
 801099a:	4293      	cmp	r3, r2
 801099c:	d069      	beq.n	8010a72 <vl53l5cx_get_ranging_data+0x1da>
 801099e:	f64d 0258 	movw	r2, #55384	; 0xd858
 80109a2:	4293      	cmp	r3, r2
 80109a4:	dc73      	bgt.n	8010a8e <vl53l5cx_get_ranging_data+0x1f6>
 80109a6:	f245 42b4 	movw	r2, #21684	; 0x54b4
 80109aa:	4293      	cmp	r3, r2
 80109ac:	d004      	beq.n	80109b8 <vl53l5cx_get_ranging_data+0x120>
 80109ae:	f245 42d0 	movw	r2, #21712	; 0x54d0
 80109b2:	4293      	cmp	r3, r2
 80109b4:	d00a      	beq.n	80109cc <vl53l5cx_get_ranging_data+0x134>
				(void)memcpy(&p_results->motion_indicator,
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
				break;
#endif
			default:
				break;
 80109b6:	e06a      	b.n	8010a8e <vl53l5cx_get_ranging_data+0x1f6>
						(int8_t)p_dev->temp_buffer[i + (uint32_t)12];
 80109b8:	69bb      	ldr	r3, [r7, #24]
 80109ba:	330c      	adds	r3, #12
 80109bc:	687a      	ldr	r2, [r7, #4]
 80109be:	4413      	add	r3, r2
 80109c0:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 80109c4:	b25a      	sxtb	r2, r3
				p_results->silicon_temp_degc =
 80109c6:	683b      	ldr	r3, [r7, #0]
 80109c8:	701a      	strb	r2, [r3, #0]
				break;
 80109ca:	e061      	b.n	8010a90 <vl53l5cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->ambient_per_spad,
 80109cc:	683b      	ldr	r3, [r7, #0]
 80109ce:	1d18      	adds	r0, r3, #4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80109d0:	69bb      	ldr	r3, [r7, #24]
 80109d2:	3304      	adds	r3, #4
 80109d4:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80109d8:	687a      	ldr	r2, [r7, #4]
 80109da:	4413      	add	r3, r2
				(void)memcpy(p_results->ambient_per_spad,
 80109dc:	693a      	ldr	r2, [r7, #16]
 80109de:	4619      	mov	r1, r3
 80109e0:	f00c ffb5 	bl	801d94e <memcpy>
				break;
 80109e4:	e054      	b.n	8010a90 <vl53l5cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->nb_target_detected,
 80109e6:	683b      	ldr	r3, [r7, #0]
 80109e8:	f503 7082 	add.w	r0, r3, #260	; 0x104
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80109ec:	69bb      	ldr	r3, [r7, #24]
 80109ee:	3304      	adds	r3, #4
 80109f0:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80109f4:	687a      	ldr	r2, [r7, #4]
 80109f6:	4413      	add	r3, r2
				(void)memcpy(p_results->nb_target_detected,
 80109f8:	693a      	ldr	r2, [r7, #16]
 80109fa:	4619      	mov	r1, r3
 80109fc:	f00c ffa7 	bl	801d94e <memcpy>
				break;
 8010a00:	e046      	b.n	8010a90 <vl53l5cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->signal_per_spad,
 8010a02:	683b      	ldr	r3, [r7, #0]
 8010a04:	f503 70a2 	add.w	r0, r3, #324	; 0x144
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8010a08:	69bb      	ldr	r3, [r7, #24]
 8010a0a:	3304      	adds	r3, #4
 8010a0c:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8010a10:	687a      	ldr	r2, [r7, #4]
 8010a12:	4413      	add	r3, r2
				(void)memcpy(p_results->signal_per_spad,
 8010a14:	693a      	ldr	r2, [r7, #16]
 8010a16:	4619      	mov	r1, r3
 8010a18:	f00c ff99 	bl	801d94e <memcpy>
				break;
 8010a1c:	e038      	b.n	8010a90 <vl53l5cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->distance_mm,
 8010a1e:	683b      	ldr	r3, [r7, #0]
 8010a20:	f503 7011 	add.w	r0, r3, #580	; 0x244
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8010a24:	69bb      	ldr	r3, [r7, #24]
 8010a26:	3304      	adds	r3, #4
 8010a28:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8010a2c:	687a      	ldr	r2, [r7, #4]
 8010a2e:	4413      	add	r3, r2
				(void)memcpy(p_results->distance_mm,
 8010a30:	693a      	ldr	r2, [r7, #16]
 8010a32:	4619      	mov	r1, r3
 8010a34:	f00c ff8b 	bl	801d94e <memcpy>
				break;
 8010a38:	e02a      	b.n	8010a90 <vl53l5cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->reflectance,
 8010a3a:	683b      	ldr	r3, [r7, #0]
 8010a3c:	f503 7031 	add.w	r0, r3, #708	; 0x2c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8010a40:	69bb      	ldr	r3, [r7, #24]
 8010a42:	3304      	adds	r3, #4
 8010a44:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8010a48:	687a      	ldr	r2, [r7, #4]
 8010a4a:	4413      	add	r3, r2
				(void)memcpy(p_results->reflectance,
 8010a4c:	693a      	ldr	r2, [r7, #16]
 8010a4e:	4619      	mov	r1, r3
 8010a50:	f00c ff7d 	bl	801d94e <memcpy>
				break;
 8010a54:	e01c      	b.n	8010a90 <vl53l5cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->target_status,
 8010a56:	683b      	ldr	r3, [r7, #0]
 8010a58:	f503 7041 	add.w	r0, r3, #772	; 0x304
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8010a5c:	69bb      	ldr	r3, [r7, #24]
 8010a5e:	3304      	adds	r3, #4
 8010a60:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8010a64:	687a      	ldr	r2, [r7, #4]
 8010a66:	4413      	add	r3, r2
				(void)memcpy(p_results->target_status,
 8010a68:	693a      	ldr	r2, [r7, #16]
 8010a6a:	4619      	mov	r1, r3
 8010a6c:	f00c ff6f 	bl	801d94e <memcpy>
				break;
 8010a70:	e00e      	b.n	8010a90 <vl53l5cx_get_ranging_data+0x1f8>
				(void)memcpy(&p_results->motion_indicator,
 8010a72:	683b      	ldr	r3, [r7, #0]
 8010a74:	f503 7051 	add.w	r0, r3, #836	; 0x344
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8010a78:	69bb      	ldr	r3, [r7, #24]
 8010a7a:	3304      	adds	r3, #4
 8010a7c:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8010a80:	687a      	ldr	r2, [r7, #4]
 8010a82:	4413      	add	r3, r2
				(void)memcpy(&p_results->motion_indicator,
 8010a84:	693a      	ldr	r2, [r7, #16]
 8010a86:	4619      	mov	r1, r3
 8010a88:	f00c ff61 	bl	801d94e <memcpy>
				break;
 8010a8c:	e000      	b.n	8010a90 <vl53l5cx_get_ranging_data+0x1f8>
				break;
 8010a8e:	bf00      	nop
		}
		i += msize;
 8010a90:	69ba      	ldr	r2, [r7, #24]
 8010a92:	693b      	ldr	r3, [r7, #16]
 8010a94:	4413      	add	r3, r2
 8010a96:	61bb      	str	r3, [r7, #24]
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
 8010a98:	69bb      	ldr	r3, [r7, #24]
 8010a9a:	3304      	adds	r3, #4
 8010a9c:	61bb      	str	r3, [r7, #24]
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	695b      	ldr	r3, [r3, #20]
 8010aa2:	69ba      	ldr	r2, [r7, #24]
 8010aa4:	429a      	cmp	r2, r3
 8010aa6:	f4ff af1e 	bcc.w	80108e6 <vl53l5cx_get_ranging_data+0x4e>

#ifndef VL53L5CX_USE_RAW_FORMAT

	/* Convert data into their real format */
#ifndef VL53L5CX_DISABLE_AMBIENT_PER_SPAD
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 8010aaa:	2300      	movs	r3, #0
 8010aac:	61bb      	str	r3, [r7, #24]
 8010aae:	e00d      	b.n	8010acc <vl53l5cx_get_ranging_data+0x234>
	{
		p_results->ambient_per_spad[i] /= (uint32_t)2048;
 8010ab0:	683a      	ldr	r2, [r7, #0]
 8010ab2:	69bb      	ldr	r3, [r7, #24]
 8010ab4:	009b      	lsls	r3, r3, #2
 8010ab6:	4413      	add	r3, r2
 8010ab8:	685b      	ldr	r3, [r3, #4]
 8010aba:	0ada      	lsrs	r2, r3, #11
 8010abc:	6839      	ldr	r1, [r7, #0]
 8010abe:	69bb      	ldr	r3, [r7, #24]
 8010ac0:	009b      	lsls	r3, r3, #2
 8010ac2:	440b      	add	r3, r1
 8010ac4:	605a      	str	r2, [r3, #4]
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 8010ac6:	69bb      	ldr	r3, [r7, #24]
 8010ac8:	3301      	adds	r3, #1
 8010aca:	61bb      	str	r3, [r7, #24]
 8010acc:	69bb      	ldr	r3, [r7, #24]
 8010ace:	2b3f      	cmp	r3, #63	; 0x3f
 8010ad0:	d9ee      	bls.n	8010ab0 <vl53l5cx_get_ranging_data+0x218>
	}
#endif

	for(i = 0; i < (uint32_t)(VL53L5CX_RESOLUTION_8X8
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	61bb      	str	r3, [r7, #24]
 8010ad6:	e045      	b.n	8010b64 <vl53l5cx_get_ranging_data+0x2cc>
			*VL53L5CX_NB_TARGET_PER_ZONE); i++)
	{
#ifndef VL53L5CX_DISABLE_DISTANCE_MM
		p_results->distance_mm[i] /= 4;
 8010ad8:	683a      	ldr	r2, [r7, #0]
 8010ada:	69bb      	ldr	r3, [r7, #24]
 8010adc:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8010ae0:	005b      	lsls	r3, r3, #1
 8010ae2:	4413      	add	r3, r2
 8010ae4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	da00      	bge.n	8010aee <vl53l5cx_get_ranging_data+0x256>
 8010aec:	3303      	adds	r3, #3
 8010aee:	109b      	asrs	r3, r3, #2
 8010af0:	b219      	sxth	r1, r3
 8010af2:	683a      	ldr	r2, [r7, #0]
 8010af4:	69bb      	ldr	r3, [r7, #24]
 8010af6:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8010afa:	005b      	lsls	r3, r3, #1
 8010afc:	4413      	add	r3, r2
 8010afe:	460a      	mov	r2, r1
 8010b00:	809a      	strh	r2, [r3, #4]
		if(p_results->distance_mm[i] < 0)
 8010b02:	683a      	ldr	r2, [r7, #0]
 8010b04:	69bb      	ldr	r3, [r7, #24]
 8010b06:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8010b0a:	005b      	lsls	r3, r3, #1
 8010b0c:	4413      	add	r3, r2
 8010b0e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	da07      	bge.n	8010b26 <vl53l5cx_get_ranging_data+0x28e>
		{
			p_results->distance_mm[i] = 0;
 8010b16:	683a      	ldr	r2, [r7, #0]
 8010b18:	69bb      	ldr	r3, [r7, #24]
 8010b1a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8010b1e:	005b      	lsls	r3, r3, #1
 8010b20:	4413      	add	r3, r2
 8010b22:	2200      	movs	r2, #0
 8010b24:	809a      	strh	r2, [r3, #4]
		}
#endif
#ifndef VL53L5CX_DISABLE_REFLECTANCE_PERCENT
		p_results->reflectance[i] /= (uint8_t)2;
 8010b26:	683a      	ldr	r2, [r7, #0]
 8010b28:	69bb      	ldr	r3, [r7, #24]
 8010b2a:	4413      	add	r3, r2
 8010b2c:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8010b30:	781b      	ldrb	r3, [r3, #0]
 8010b32:	085b      	lsrs	r3, r3, #1
 8010b34:	b2d9      	uxtb	r1, r3
 8010b36:	683a      	ldr	r2, [r7, #0]
 8010b38:	69bb      	ldr	r3, [r7, #24]
 8010b3a:	4413      	add	r3, r2
 8010b3c:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8010b40:	460a      	mov	r2, r1
 8010b42:	701a      	strb	r2, [r3, #0]
#endif
#ifndef VL53L5CX_DISABLE_RANGE_SIGMA_MM
		p_results->range_sigma_mm[i] /= (uint16_t)128;
#endif
#ifndef VL53L5CX_DISABLE_SIGNAL_PER_SPAD
		p_results->signal_per_spad[i] /= (uint32_t)2048;
 8010b44:	683a      	ldr	r2, [r7, #0]
 8010b46:	69bb      	ldr	r3, [r7, #24]
 8010b48:	3350      	adds	r3, #80	; 0x50
 8010b4a:	009b      	lsls	r3, r3, #2
 8010b4c:	4413      	add	r3, r2
 8010b4e:	685b      	ldr	r3, [r3, #4]
 8010b50:	0ada      	lsrs	r2, r3, #11
 8010b52:	6839      	ldr	r1, [r7, #0]
 8010b54:	69bb      	ldr	r3, [r7, #24]
 8010b56:	3350      	adds	r3, #80	; 0x50
 8010b58:	009b      	lsls	r3, r3, #2
 8010b5a:	440b      	add	r3, r1
 8010b5c:	605a      	str	r2, [r3, #4]
			*VL53L5CX_NB_TARGET_PER_ZONE); i++)
 8010b5e:	69bb      	ldr	r3, [r7, #24]
 8010b60:	3301      	adds	r3, #1
 8010b62:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < (uint32_t)(VL53L5CX_RESOLUTION_8X8
 8010b64:	69bb      	ldr	r3, [r7, #24]
 8010b66:	2b3f      	cmp	r3, #63	; 0x3f
 8010b68:	d9b6      	bls.n	8010ad8 <vl53l5cx_get_ranging_data+0x240>
#endif
	}

	/* Set target status to 255 if no target is detected for this zone */
#ifndef VL53L5CX_DISABLE_NB_TARGET_DETECTED
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	61bb      	str	r3, [r7, #24]
 8010b6e:	e01b      	b.n	8010ba8 <vl53l5cx_get_ranging_data+0x310>
	{
		if(p_results->nb_target_detected[i] == (uint8_t)0){
 8010b70:	683a      	ldr	r2, [r7, #0]
 8010b72:	69bb      	ldr	r3, [r7, #24]
 8010b74:	4413      	add	r3, r2
 8010b76:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8010b7a:	781b      	ldrb	r3, [r3, #0]
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d110      	bne.n	8010ba2 <vl53l5cx_get_ranging_data+0x30a>
			for(j = 0; j < (uint32_t)
 8010b80:	2300      	movs	r3, #0
 8010b82:	617b      	str	r3, [r7, #20]
 8010b84:	e00a      	b.n	8010b9c <vl53l5cx_get_ranging_data+0x304>
				VL53L5CX_NB_TARGET_PER_ZONE; j++)
			{
#ifndef VL53L5CX_DISABLE_TARGET_STATUS
				p_results->target_status
				[((uint32_t)VL53L5CX_NB_TARGET_PER_ZONE
					*(uint32_t)i) + j]=(uint8_t)255;
 8010b86:	69ba      	ldr	r2, [r7, #24]
 8010b88:	697b      	ldr	r3, [r7, #20]
 8010b8a:	4413      	add	r3, r2
 8010b8c:	683a      	ldr	r2, [r7, #0]
 8010b8e:	4413      	add	r3, r2
 8010b90:	22ff      	movs	r2, #255	; 0xff
 8010b92:	f883 2304 	strb.w	r2, [r3, #772]	; 0x304
				VL53L5CX_NB_TARGET_PER_ZONE; j++)
 8010b96:	697b      	ldr	r3, [r7, #20]
 8010b98:	3301      	adds	r3, #1
 8010b9a:	617b      	str	r3, [r7, #20]
			for(j = 0; j < (uint32_t)
 8010b9c:	697b      	ldr	r3, [r7, #20]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d0f1      	beq.n	8010b86 <vl53l5cx_get_ranging_data+0x2ee>
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 8010ba2:	69bb      	ldr	r3, [r7, #24]
 8010ba4:	3301      	adds	r3, #1
 8010ba6:	61bb      	str	r3, [r7, #24]
 8010ba8:	69bb      	ldr	r3, [r7, #24]
 8010baa:	2b3f      	cmp	r3, #63	; 0x3f
 8010bac:	d9e0      	bls.n	8010b70 <vl53l5cx_get_ranging_data+0x2d8>
		}
	}
#endif

#ifndef VL53L5CX_DISABLE_MOTION_INDICATOR
	for(i = 0; i < (uint32_t)32; i++)
 8010bae:	2300      	movs	r3, #0
 8010bb0:	61bb      	str	r3, [r7, #24]
 8010bb2:	e012      	b.n	8010bda <vl53l5cx_get_ranging_data+0x342>
	{
		p_results->motion_indicator.motion[i] /= (uint32_t)65535;
 8010bb4:	683a      	ldr	r2, [r7, #0]
 8010bb6:	69bb      	ldr	r3, [r7, #24]
 8010bb8:	33d2      	adds	r3, #210	; 0xd2
 8010bba:	009b      	lsls	r3, r3, #2
 8010bbc:	4413      	add	r3, r2
 8010bbe:	689b      	ldr	r3, [r3, #8]
 8010bc0:	4a1f      	ldr	r2, [pc, #124]	; (8010c40 <vl53l5cx_get_ranging_data+0x3a8>)
 8010bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8010bc6:	0bda      	lsrs	r2, r3, #15
 8010bc8:	6839      	ldr	r1, [r7, #0]
 8010bca:	69bb      	ldr	r3, [r7, #24]
 8010bcc:	33d2      	adds	r3, #210	; 0xd2
 8010bce:	009b      	lsls	r3, r3, #2
 8010bd0:	440b      	add	r3, r1
 8010bd2:	609a      	str	r2, [r3, #8]
	for(i = 0; i < (uint32_t)32; i++)
 8010bd4:	69bb      	ldr	r3, [r7, #24]
 8010bd6:	3301      	adds	r3, #1
 8010bd8:	61bb      	str	r3, [r7, #24]
 8010bda:	69bb      	ldr	r3, [r7, #24]
 8010bdc:	2b1f      	cmp	r3, #31
 8010bde:	d9e9      	bls.n	8010bb4 <vl53l5cx_get_ranging_data+0x31c>

#endif

	/* Check if footer id and header id are matching. This allows to detect
	 * corrupted frames */
	header_id = ((uint16_t)(p_dev->temp_buffer[0x8])<<8) & 0xFF00U;
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	f893 3518 	ldrb.w	r3, [r3, #1304]	; 0x518
 8010be6:	b29b      	uxth	r3, r3
 8010be8:	021b      	lsls	r3, r3, #8
 8010bea:	81fb      	strh	r3, [r7, #14]
	header_id |= ((uint16_t)(p_dev->temp_buffer[0x9])) & 0x00FFU;
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	f893 3519 	ldrb.w	r3, [r3, #1305]	; 0x519
 8010bf2:	b29a      	uxth	r2, r3
 8010bf4:	89fb      	ldrh	r3, [r7, #14]
 8010bf6:	4313      	orrs	r3, r2
 8010bf8:	81fb      	strh	r3, [r7, #14]

	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	695b      	ldr	r3, [r3, #20]
		- (uint32_t)4]) << 8) & 0xFF00U;
 8010bfe:	3b04      	subs	r3, #4
	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8010c00:	687a      	ldr	r2, [r7, #4]
 8010c02:	4413      	add	r3, r2
 8010c04:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 8010c08:	b29b      	uxth	r3, r3
 8010c0a:	021b      	lsls	r3, r3, #8
 8010c0c:	81bb      	strh	r3, [r7, #12]
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	695b      	ldr	r3, [r3, #20]
		- (uint32_t)3])) & 0xFFU;
 8010c12:	3b03      	subs	r3, #3
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8010c14:	687a      	ldr	r2, [r7, #4]
 8010c16:	4413      	add	r3, r2
 8010c18:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 8010c1c:	b29a      	uxth	r2, r3
 8010c1e:	89bb      	ldrh	r3, [r7, #12]
 8010c20:	4313      	orrs	r3, r2
 8010c22:	81bb      	strh	r3, [r7, #12]

	if(header_id != footer_id)
 8010c24:	89fa      	ldrh	r2, [r7, #14]
 8010c26:	89bb      	ldrh	r3, [r7, #12]
 8010c28:	429a      	cmp	r2, r3
 8010c2a:	d003      	beq.n	8010c34 <vl53l5cx_get_ranging_data+0x39c>
	{
		status |= VL53L5CX_STATUS_CORRUPTED_FRAME;
 8010c2c:	7ffb      	ldrb	r3, [r7, #31]
 8010c2e:	f043 0302 	orr.w	r3, r3, #2
 8010c32:	77fb      	strb	r3, [r7, #31]
	}

	return status;
 8010c34:	7ffb      	ldrb	r3, [r7, #31]
}
 8010c36:	4618      	mov	r0, r3
 8010c38:	3720      	adds	r7, #32
 8010c3a:	46bd      	mov	sp, r7
 8010c3c:	bd80      	pop	{r7, pc}
 8010c3e:	bf00      	nop
 8010c40:	80008001 	.word	0x80008001

08010c44 <vl53l5cx_get_resolution>:

uint8_t vl53l5cx_get_resolution(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_resolution)
{
 8010c44:	b580      	push	{r7, lr}
 8010c46:	b084      	sub	sp, #16
 8010c48:	af00      	add	r7, sp, #0
 8010c4a:	6078      	str	r0, [r7, #4]
 8010c4c:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8010c4e:	2300      	movs	r3, #0
 8010c50:	73fb      	strb	r3, [r7, #15]

	status |= vl53l5cx_dci_read_data(p_dev, p_dev->temp_buffer,
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8010c58:	2308      	movs	r3, #8
 8010c5a:	f245 4250 	movw	r2, #21584	; 0x5450
 8010c5e:	6878      	ldr	r0, [r7, #4]
 8010c60:	f000 f996 	bl	8010f90 <vl53l5cx_dci_read_data>
 8010c64:	4603      	mov	r3, r0
 8010c66:	461a      	mov	r2, r3
 8010c68:	7bfb      	ldrb	r3, [r7, #15]
 8010c6a:	4313      	orrs	r3, r2
 8010c6c:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_ZONE_CONFIG, 8);
	*p_resolution = p_dev->temp_buffer[0x00]*p_dev->temp_buffer[0x01];
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	f893 3511 	ldrb.w	r3, [r3, #1297]	; 0x511
 8010c7a:	fb12 f303 	smulbb	r3, r2, r3
 8010c7e:	b2da      	uxtb	r2, r3
 8010c80:	683b      	ldr	r3, [r7, #0]
 8010c82:	701a      	strb	r2, [r3, #0]

	return status;
 8010c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c86:	4618      	mov	r0, r3
 8010c88:	3710      	adds	r7, #16
 8010c8a:	46bd      	mov	sp, r7
 8010c8c:	bd80      	pop	{r7, pc}

08010c8e <vl53l5cx_set_resolution>:


uint8_t vl53l5cx_set_resolution(
		VL53L5CX_Configuration 		 *p_dev,
		uint8_t				resolution)
{
 8010c8e:	b580      	push	{r7, lr}
 8010c90:	b084      	sub	sp, #16
 8010c92:	af00      	add	r7, sp, #0
 8010c94:	6078      	str	r0, [r7, #4]
 8010c96:	460b      	mov	r3, r1
 8010c98:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 8010c9a:	2300      	movs	r3, #0
 8010c9c:	73fb      	strb	r3, [r7, #15]

	switch(resolution){
 8010c9e:	78fb      	ldrb	r3, [r7, #3]
 8010ca0:	2b10      	cmp	r3, #16
 8010ca2:	d002      	beq.n	8010caa <vl53l5cx_set_resolution+0x1c>
 8010ca4:	2b40      	cmp	r3, #64	; 0x40
 8010ca6:	d055      	beq.n	8010d54 <vl53l5cx_set_resolution+0xc6>
 8010ca8:	e0a9      	b.n	8010dfe <vl53l5cx_set_resolution+0x170>
		case VL53L5CX_RESOLUTION_4X4:
			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l5cx_dci_read_data(p_dev,
 8010cb0:	2310      	movs	r3, #16
 8010cb2:	f64a 5238 	movw	r2, #44344	; 0xad38
 8010cb6:	6878      	ldr	r0, [r7, #4]
 8010cb8:	f000 f96a 	bl	8010f90 <vl53l5cx_dci_read_data>
 8010cbc:	4603      	mov	r3, r0
 8010cbe:	461a      	mov	r2, r3
 8010cc0:	7bfb      	ldrb	r3, [r7, #15]
 8010cc2:	4313      	orrs	r3, r2
 8010cc4:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 64;
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	2240      	movs	r2, #64	; 0x40
 8010cca:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
			p_dev->temp_buffer[0x06] = 64;
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	2240      	movs	r2, #64	; 0x40
 8010cd2:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516
			p_dev->temp_buffer[0x09] = 4;
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	2204      	movs	r2, #4
 8010cda:	f883 2519 	strb.w	r2, [r3, #1305]	; 0x519
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l5cx_dci_write_data(p_dev,
 8010ce4:	2310      	movs	r3, #16
 8010ce6:	f64a 5238 	movw	r2, #44344	; 0xad38
 8010cea:	6878      	ldr	r0, [r7, #4]
 8010cec:	f000 f9da 	bl	80110a4 <vl53l5cx_dci_write_data>
 8010cf0:	4603      	mov	r3, r0
 8010cf2:	461a      	mov	r2, r3
 8010cf4:	7bfb      	ldrb	r3, [r7, #15]
 8010cf6:	4313      	orrs	r3, r2
 8010cf8:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_DSS_CONFIG, 16);

			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l5cx_dci_read_data(p_dev,
 8010d00:	2308      	movs	r3, #8
 8010d02:	f245 4250 	movw	r2, #21584	; 0x5450
 8010d06:	6878      	ldr	r0, [r7, #4]
 8010d08:	f000 f942 	bl	8010f90 <vl53l5cx_dci_read_data>
 8010d0c:	4603      	mov	r3, r0
 8010d0e:	461a      	mov	r2, r3
 8010d10:	7bfb      	ldrb	r3, [r7, #15]
 8010d12:	4313      	orrs	r3, r2
 8010d14:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 4;
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	2204      	movs	r2, #4
 8010d1a:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
			p_dev->temp_buffer[0x01] = 4;
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	2204      	movs	r2, #4
 8010d22:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
			p_dev->temp_buffer[0x04] = 8;
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	2208      	movs	r2, #8
 8010d2a:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
			p_dev->temp_buffer[0x05] = 8;
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	2208      	movs	r2, #8
 8010d32:	f883 2515 	strb.w	r2, [r3, #1301]	; 0x515
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l5cx_dci_write_data(p_dev,
 8010d3c:	2308      	movs	r3, #8
 8010d3e:	f245 4250 	movw	r2, #21584	; 0x5450
 8010d42:	6878      	ldr	r0, [r7, #4]
 8010d44:	f000 f9ae 	bl	80110a4 <vl53l5cx_dci_write_data>
 8010d48:	4603      	mov	r3, r0
 8010d4a:	461a      	mov	r2, r3
 8010d4c:	7bfb      	ldrb	r3, [r7, #15]
 8010d4e:	4313      	orrs	r3, r2
 8010d50:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_ZONE_CONFIG, 8);
			break;
 8010d52:	e057      	b.n	8010e04 <vl53l5cx_set_resolution+0x176>

		case VL53L5CX_RESOLUTION_8X8:
			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l5cx_dci_read_data(p_dev,
 8010d5a:	2310      	movs	r3, #16
 8010d5c:	f64a 5238 	movw	r2, #44344	; 0xad38
 8010d60:	6878      	ldr	r0, [r7, #4]
 8010d62:	f000 f915 	bl	8010f90 <vl53l5cx_dci_read_data>
 8010d66:	4603      	mov	r3, r0
 8010d68:	461a      	mov	r2, r3
 8010d6a:	7bfb      	ldrb	r3, [r7, #15]
 8010d6c:	4313      	orrs	r3, r2
 8010d6e:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 16;
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	2210      	movs	r2, #16
 8010d74:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
			p_dev->temp_buffer[0x06] = 16;
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	2210      	movs	r2, #16
 8010d7c:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516
			p_dev->temp_buffer[0x09] = 1;
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	2201      	movs	r2, #1
 8010d84:	f883 2519 	strb.w	r2, [r3, #1305]	; 0x519
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l5cx_dci_write_data(p_dev,
 8010d8e:	2310      	movs	r3, #16
 8010d90:	f64a 5238 	movw	r2, #44344	; 0xad38
 8010d94:	6878      	ldr	r0, [r7, #4]
 8010d96:	f000 f985 	bl	80110a4 <vl53l5cx_dci_write_data>
 8010d9a:	4603      	mov	r3, r0
 8010d9c:	461a      	mov	r2, r3
 8010d9e:	7bfb      	ldrb	r3, [r7, #15]
 8010da0:	4313      	orrs	r3, r2
 8010da2:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_DSS_CONFIG, 16);

			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l5cx_dci_read_data(p_dev,
 8010daa:	2308      	movs	r3, #8
 8010dac:	f245 4250 	movw	r2, #21584	; 0x5450
 8010db0:	6878      	ldr	r0, [r7, #4]
 8010db2:	f000 f8ed 	bl	8010f90 <vl53l5cx_dci_read_data>
 8010db6:	4603      	mov	r3, r0
 8010db8:	461a      	mov	r2, r3
 8010dba:	7bfb      	ldrb	r3, [r7, #15]
 8010dbc:	4313      	orrs	r3, r2
 8010dbe:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 8;
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	2208      	movs	r2, #8
 8010dc4:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
			p_dev->temp_buffer[0x01] = 8;
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	2208      	movs	r2, #8
 8010dcc:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
			p_dev->temp_buffer[0x04] = 4;
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	2204      	movs	r2, #4
 8010dd4:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
			p_dev->temp_buffer[0x05] = 4;
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	2204      	movs	r2, #4
 8010ddc:	f883 2515 	strb.w	r2, [r3, #1301]	; 0x515
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l5cx_dci_write_data(p_dev,
 8010de6:	2308      	movs	r3, #8
 8010de8:	f245 4250 	movw	r2, #21584	; 0x5450
 8010dec:	6878      	ldr	r0, [r7, #4]
 8010dee:	f000 f959 	bl	80110a4 <vl53l5cx_dci_write_data>
 8010df2:	4603      	mov	r3, r0
 8010df4:	461a      	mov	r2, r3
 8010df6:	7bfb      	ldrb	r3, [r7, #15]
 8010df8:	4313      	orrs	r3, r2
 8010dfa:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_ZONE_CONFIG, 8);

			break;
 8010dfc:	e002      	b.n	8010e04 <vl53l5cx_set_resolution+0x176>

		default:
			status = VL53L5CX_STATUS_INVALID_PARAM;
 8010dfe:	237f      	movs	r3, #127	; 0x7f
 8010e00:	73fb      	strb	r3, [r7, #15]
			break;
 8010e02:	bf00      	nop
		}

	status |= _vl53l5cx_send_offset_data(p_dev, resolution);
 8010e04:	78fb      	ldrb	r3, [r7, #3]
 8010e06:	4619      	mov	r1, r3
 8010e08:	6878      	ldr	r0, [r7, #4]
 8010e0a:	f7fe fa35 	bl	800f278 <_vl53l5cx_send_offset_data>
 8010e0e:	4603      	mov	r3, r0
 8010e10:	461a      	mov	r2, r3
 8010e12:	7bfb      	ldrb	r3, [r7, #15]
 8010e14:	4313      	orrs	r3, r2
 8010e16:	73fb      	strb	r3, [r7, #15]
	status |= _vl53l5cx_send_xtalk_data(p_dev, resolution);
 8010e18:	78fb      	ldrb	r3, [r7, #3]
 8010e1a:	4619      	mov	r1, r3
 8010e1c:	6878      	ldr	r0, [r7, #4]
 8010e1e:	f7fe fbf7 	bl	800f610 <_vl53l5cx_send_xtalk_data>
 8010e22:	4603      	mov	r3, r0
 8010e24:	461a      	mov	r2, r3
 8010e26:	7bfb      	ldrb	r3, [r7, #15]
 8010e28:	4313      	orrs	r3, r2
 8010e2a:	73fb      	strb	r3, [r7, #15]

	return status;
 8010e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e2e:	4618      	mov	r0, r3
 8010e30:	3710      	adds	r7, #16
 8010e32:	46bd      	mov	sp, r7
 8010e34:	bd80      	pop	{r7, pc}

08010e36 <vl53l5cx_set_ranging_frequency_hz>:
}

uint8_t vl53l5cx_set_ranging_frequency_hz(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				frequency_hz)
{
 8010e36:	b580      	push	{r7, lr}
 8010e38:	b088      	sub	sp, #32
 8010e3a:	af04      	add	r7, sp, #16
 8010e3c:	6078      	str	r0, [r7, #4]
 8010e3e:	460b      	mov	r3, r1
 8010e40:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 8010e42:	2300      	movs	r3, #0
 8010e44:	73fb      	strb	r3, [r7, #15]

	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8010e4c:	2301      	movs	r3, #1
 8010e4e:	9302      	str	r3, [sp, #8]
 8010e50:	2301      	movs	r3, #1
 8010e52:	9301      	str	r3, [sp, #4]
 8010e54:	1cfb      	adds	r3, r7, #3
 8010e56:	9300      	str	r3, [sp, #0]
 8010e58:	2304      	movs	r3, #4
 8010e5a:	f245 4258 	movw	r2, #21592	; 0x5458
 8010e5e:	6878      	ldr	r0, [r7, #4]
 8010e60:	f000 f9be 	bl	80111e0 <vl53l5cx_dci_replace_data>
 8010e64:	4603      	mov	r3, r0
 8010e66:	461a      	mov	r2, r3
 8010e68:	7bfb      	ldrb	r3, [r7, #15]
 8010e6a:	4313      	orrs	r3, r2
 8010e6c:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_FREQ_HZ, 4,
					(uint8_t*)&frequency_hz, 1, 0x01);

	return status;
 8010e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e70:	4618      	mov	r0, r3
 8010e72:	3710      	adds	r7, #16
 8010e74:	46bd      	mov	sp, r7
 8010e76:	bd80      	pop	{r7, pc}

08010e78 <vl53l5cx_set_integration_time_ms>:
}

uint8_t vl53l5cx_set_integration_time_ms(
		VL53L5CX_Configuration		*p_dev,
		uint32_t			integration_time_ms)
{
 8010e78:	b580      	push	{r7, lr}
 8010e7a:	b088      	sub	sp, #32
 8010e7c:	af04      	add	r7, sp, #16
 8010e7e:	6078      	str	r0, [r7, #4]
 8010e80:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8010e82:	2300      	movs	r3, #0
 8010e84:	73fb      	strb	r3, [r7, #15]
        uint32_t integration = integration_time_ms;
 8010e86:	683b      	ldr	r3, [r7, #0]
 8010e88:	60bb      	str	r3, [r7, #8]

	/* Integration time must be between 2ms and 1000ms */
	if((integration < (uint32_t)2)
 8010e8a:	68bb      	ldr	r3, [r7, #8]
 8010e8c:	2b01      	cmp	r3, #1
 8010e8e:	d903      	bls.n	8010e98 <vl53l5cx_set_integration_time_ms+0x20>
           || (integration > (uint32_t)1000))
 8010e90:	68bb      	ldr	r3, [r7, #8]
 8010e92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010e96:	d904      	bls.n	8010ea2 <vl53l5cx_set_integration_time_ms+0x2a>
	{
		status |= VL53L5CX_STATUS_INVALID_PARAM;
 8010e98:	7bfb      	ldrb	r3, [r7, #15]
 8010e9a:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
 8010e9e:	73fb      	strb	r3, [r7, #15]
 8010ea0:	e01a      	b.n	8010ed8 <vl53l5cx_set_integration_time_ms+0x60>
	}else
	{
		integration *= (uint32_t)1000;
 8010ea2:	68bb      	ldr	r3, [r7, #8]
 8010ea4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010ea8:	fb02 f303 	mul.w	r3, r2, r3
 8010eac:	60bb      	str	r3, [r7, #8]

		status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8010eb4:	2300      	movs	r3, #0
 8010eb6:	9302      	str	r3, [sp, #8]
 8010eb8:	2304      	movs	r3, #4
 8010eba:	9301      	str	r3, [sp, #4]
 8010ebc:	f107 0308 	add.w	r3, r7, #8
 8010ec0:	9300      	str	r3, [sp, #0]
 8010ec2:	2314      	movs	r3, #20
 8010ec4:	f245 425c 	movw	r2, #21596	; 0x545c
 8010ec8:	6878      	ldr	r0, [r7, #4]
 8010eca:	f000 f989 	bl	80111e0 <vl53l5cx_dci_replace_data>
 8010ece:	4603      	mov	r3, r0
 8010ed0:	461a      	mov	r2, r3
 8010ed2:	7bfb      	ldrb	r3, [r7, #15]
 8010ed4:	4313      	orrs	r3, r2
 8010ed6:	73fb      	strb	r3, [r7, #15]
				VL53L5CX_DCI_INT_TIME, 20,
				(uint8_t*)&integration, 4, 0x00);
	}

	return status;
 8010ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010eda:	4618      	mov	r0, r3
 8010edc:	3710      	adds	r7, #16
 8010ede:	46bd      	mov	sp, r7
 8010ee0:	bd80      	pop	{r7, pc}

08010ee2 <vl53l5cx_set_ranging_mode>:
}

uint8_t vl53l5cx_set_ranging_mode(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				ranging_mode)
{
 8010ee2:	b580      	push	{r7, lr}
 8010ee4:	b084      	sub	sp, #16
 8010ee6:	af00      	add	r7, sp, #0
 8010ee8:	6078      	str	r0, [r7, #4]
 8010eea:	460b      	mov	r3, r1
 8010eec:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 8010eee:	2300      	movs	r3, #0
 8010ef0:	73fb      	strb	r3, [r7, #15]
	uint32_t single_range = 0x00;
 8010ef2:	2300      	movs	r3, #0
 8010ef4:	60bb      	str	r3, [r7, #8]

	status |= vl53l5cx_dci_read_data(p_dev, p_dev->temp_buffer,
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8010efc:	2308      	movs	r3, #8
 8010efe:	f64a 5230 	movw	r2, #44336	; 0xad30
 8010f02:	6878      	ldr	r0, [r7, #4]
 8010f04:	f000 f844 	bl	8010f90 <vl53l5cx_dci_read_data>
 8010f08:	4603      	mov	r3, r0
 8010f0a:	461a      	mov	r2, r3
 8010f0c:	7bfb      	ldrb	r3, [r7, #15]
 8010f0e:	4313      	orrs	r3, r2
 8010f10:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_RANGING_MODE, 8);

	switch(ranging_mode)
 8010f12:	78fb      	ldrb	r3, [r7, #3]
 8010f14:	2b01      	cmp	r3, #1
 8010f16:	d002      	beq.n	8010f1e <vl53l5cx_set_ranging_mode+0x3c>
 8010f18:	2b03      	cmp	r3, #3
 8010f1a:	d00b      	beq.n	8010f34 <vl53l5cx_set_ranging_mode+0x52>
 8010f1c:	e015      	b.n	8010f4a <vl53l5cx_set_ranging_mode+0x68>
	{
		case VL53L5CX_RANGING_MODE_CONTINUOUS:
			p_dev->temp_buffer[0x01] = 0x1;
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	2201      	movs	r2, #1
 8010f22:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
			p_dev->temp_buffer[0x03] = 0x3;
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	2203      	movs	r2, #3
 8010f2a:	f883 2513 	strb.w	r2, [r3, #1299]	; 0x513
			single_range = 0x00;
 8010f2e:	2300      	movs	r3, #0
 8010f30:	60bb      	str	r3, [r7, #8]
			break;
 8010f32:	e00d      	b.n	8010f50 <vl53l5cx_set_ranging_mode+0x6e>

		case VL53L5CX_RANGING_MODE_AUTONOMOUS:
			p_dev->temp_buffer[0x01] = 0x3;
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	2203      	movs	r2, #3
 8010f38:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
			p_dev->temp_buffer[0x03] = 0x2;
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	2202      	movs	r2, #2
 8010f40:	f883 2513 	strb.w	r2, [r3, #1299]	; 0x513
			single_range = 0x01;
 8010f44:	2301      	movs	r3, #1
 8010f46:	60bb      	str	r3, [r7, #8]
			break;
 8010f48:	e002      	b.n	8010f50 <vl53l5cx_set_ranging_mode+0x6e>

		default:
			status = VL53L5CX_STATUS_INVALID_PARAM;
 8010f4a:	237f      	movs	r3, #127	; 0x7f
 8010f4c:	73fb      	strb	r3, [r7, #15]
			break;
 8010f4e:	bf00      	nop
	}

	status |= vl53l5cx_dci_write_data(p_dev, p_dev->temp_buffer,
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8010f56:	2308      	movs	r3, #8
 8010f58:	f64a 5230 	movw	r2, #44336	; 0xad30
 8010f5c:	6878      	ldr	r0, [r7, #4]
 8010f5e:	f000 f8a1 	bl	80110a4 <vl53l5cx_dci_write_data>
 8010f62:	4603      	mov	r3, r0
 8010f64:	461a      	mov	r2, r3
 8010f66:	7bfb      	ldrb	r3, [r7, #15]
 8010f68:	4313      	orrs	r3, r2
 8010f6a:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_RANGING_MODE, (uint16_t)8);

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 8010f6c:	f107 0108 	add.w	r1, r7, #8
 8010f70:	2304      	movs	r3, #4
 8010f72:	f64d 1264 	movw	r2, #55652	; 0xd964
 8010f76:	6878      	ldr	r0, [r7, #4]
 8010f78:	f000 f894 	bl	80110a4 <vl53l5cx_dci_write_data>
 8010f7c:	4603      	mov	r3, r0
 8010f7e:	461a      	mov	r2, r3
 8010f80:	7bfb      	ldrb	r3, [r7, #15]
 8010f82:	4313      	orrs	r3, r2
 8010f84:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_SINGLE_RANGE, 
                        (uint16_t)sizeof(single_range));

	return status;
 8010f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f88:	4618      	mov	r0, r3
 8010f8a:	3710      	adds	r7, #16
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	bd80      	pop	{r7, pc}

08010f90 <vl53l5cx_dci_read_data>:
uint8_t vl53l5cx_dci_read_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8010f90:	b580      	push	{r7, lr}
 8010f92:	b08c      	sub	sp, #48	; 0x30
 8010f94:	af02      	add	r7, sp, #8
 8010f96:	60f8      	str	r0, [r7, #12]
 8010f98:	60b9      	str	r1, [r7, #8]
 8010f9a:	607a      	str	r2, [r7, #4]
 8010f9c:	807b      	strh	r3, [r7, #2]
	int16_t i;
	uint8_t status = VL53L5CX_STATUS_OK;
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        uint32_t rd_size = (uint32_t) data_size + (uint32_t)12;
 8010fa4:	887b      	ldrh	r3, [r7, #2]
 8010fa6:	330c      	adds	r3, #12
 8010fa8:	623b      	str	r3, [r7, #32]
	uint8_t cmd[] = {0x00, 0x00, 0x00, 0x00,
 8010faa:	4a3d      	ldr	r2, [pc, #244]	; (80110a0 <vl53l5cx_dci_read_data+0x110>)
 8010fac:	f107 0314 	add.w	r3, r7, #20
 8010fb0:	ca07      	ldmia	r2, {r0, r1, r2}
 8010fb2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x00, 0x00, 0x00, 0x0f,
			0x00, 0x02, 0x00, 0x08};

	/* Check if tmp buffer is large enough */
	if((data_size + (uint16_t)12)>(uint16_t)VL53L5CX_TEMPORARY_BUFFER_SIZE)
 8010fb6:	887b      	ldrh	r3, [r7, #2]
 8010fb8:	f5b3 6f83 	cmp.w	r3, #1048	; 0x418
 8010fbc:	d903      	bls.n	8010fc6 <vl53l5cx_dci_read_data+0x36>
	{
		status |= VL53L5CX_STATUS_ERROR;
 8010fbe:	23ff      	movs	r3, #255	; 0xff
 8010fc0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8010fc4:	e065      	b.n	8011092 <vl53l5cx_dci_read_data+0x102>
	}
	else
	{
		cmd[0] = (uint8_t)(index >> 8);	
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	0a1b      	lsrs	r3, r3, #8
 8010fca:	b2db      	uxtb	r3, r3
 8010fcc:	753b      	strb	r3, [r7, #20]
		cmd[1] = (uint8_t)(index & (uint32_t)0xff);			
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	b2db      	uxtb	r3, r3
 8010fd2:	757b      	strb	r3, [r7, #21]
		cmd[2] = (uint8_t)((data_size & (uint16_t)0xff0) >> 4);
 8010fd4:	887b      	ldrh	r3, [r7, #2]
 8010fd6:	111b      	asrs	r3, r3, #4
 8010fd8:	b2db      	uxtb	r3, r3
 8010fda:	75bb      	strb	r3, [r7, #22]
		cmd[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8010fdc:	887b      	ldrh	r3, [r7, #2]
 8010fde:	b2db      	uxtb	r3, r3
 8010fe0:	011b      	lsls	r3, r3, #4
 8010fe2:	b2db      	uxtb	r3, r3
 8010fe4:	75fb      	strb	r3, [r7, #23]

	/* Request data reading from FW */
		status |= WrMulti(&(p_dev->platform),
 8010fe6:	68f8      	ldr	r0, [r7, #12]
 8010fe8:	f107 0214 	add.w	r2, r7, #20
 8010fec:	230c      	movs	r3, #12
 8010fee:	f642 71f4 	movw	r1, #12276	; 0x2ff4
 8010ff2:	f7fd fb0f 	bl	800e614 <WrMulti>
 8010ff6:	4603      	mov	r3, r0
 8010ff8:	461a      	mov	r2, r3
 8010ffa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8010ffe:	4313      	orrs	r3, r2
 8011000:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			(VL53L5CX_UI_CMD_END-(uint16_t)11),cmd, sizeof(cmd));
		status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8011004:	2303      	movs	r3, #3
 8011006:	9301      	str	r3, [sp, #4]
 8011008:	23ff      	movs	r3, #255	; 0xff
 801100a:	9300      	str	r3, [sp, #0]
 801100c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8011010:	2201      	movs	r2, #1
 8011012:	2104      	movs	r1, #4
 8011014:	68f8      	ldr	r0, [r7, #12]
 8011016:	f7fe f89e 	bl	800f156 <_vl53l5cx_poll_for_answer>
 801101a:	4603      	mov	r3, r0
 801101c:	461a      	mov	r2, r3
 801101e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8011022:	4313      	orrs	r3, r2
 8011024:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			VL53L5CX_UI_CMD_STATUS,
			0xff, 0x03);

	/* Read new data sent (4 bytes header + data_size + 8 bytes footer) */
		status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8011028:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer, rd_size);
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
		status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8011030:	6a3b      	ldr	r3, [r7, #32]
 8011032:	f642 4104 	movw	r1, #11268	; 0x2c04
 8011036:	f7fd fb04 	bl	800e642 <RdMulti>
 801103a:	4603      	mov	r3, r0
 801103c:	461a      	mov	r2, r3
 801103e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8011042:	4313      	orrs	r3, r2
 8011044:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		SwapBuffer(p_dev->temp_buffer, data_size + (uint16_t)12);
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 801104e:	887b      	ldrh	r3, [r7, #2]
 8011050:	330c      	adds	r3, #12
 8011052:	b29b      	uxth	r3, r3
 8011054:	4619      	mov	r1, r3
 8011056:	4610      	mov	r0, r2
 8011058:	f7fd fb0a 	bl	800e670 <SwapBuffer>

	/* Copy data from FW into input structure (-4 bytes to remove header) */
		for(i = 0 ; i < (int16_t)data_size;i++){
 801105c:	2300      	movs	r3, #0
 801105e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8011060:	e011      	b.n	8011086 <vl53l5cx_dci_read_data+0xf6>
			data[i] = p_dev->temp_buffer[i + 4];
 8011062:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8011066:	1d1a      	adds	r2, r3, #4
 8011068:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801106c:	68b9      	ldr	r1, [r7, #8]
 801106e:	440b      	add	r3, r1
 8011070:	68f9      	ldr	r1, [r7, #12]
 8011072:	440a      	add	r2, r1
 8011074:	f892 2510 	ldrb.w	r2, [r2, #1296]	; 0x510
 8011078:	701a      	strb	r2, [r3, #0]
		for(i = 0 ; i < (int16_t)data_size;i++){
 801107a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801107e:	b29b      	uxth	r3, r3
 8011080:	3301      	adds	r3, #1
 8011082:	b29b      	uxth	r3, r3
 8011084:	84fb      	strh	r3, [r7, #38]	; 0x26
 8011086:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801108a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801108e:	429a      	cmp	r2, r3
 8011090:	dbe7      	blt.n	8011062 <vl53l5cx_dci_read_data+0xd2>
		}
	}

	return status;
 8011092:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
}
 8011096:	4618      	mov	r0, r3
 8011098:	3728      	adds	r7, #40	; 0x28
 801109a:	46bd      	mov	sp, r7
 801109c:	bd80      	pop	{r7, pc}
 801109e:	bf00      	nop
 80110a0:	08021a00 	.word	0x08021a00

080110a4 <vl53l5cx_dci_write_data>:
uint8_t vl53l5cx_dci_write_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 80110a4:	b580      	push	{r7, lr}
 80110a6:	b08c      	sub	sp, #48	; 0x30
 80110a8:	af02      	add	r7, sp, #8
 80110aa:	60f8      	str	r0, [r7, #12]
 80110ac:	60b9      	str	r1, [r7, #8]
 80110ae:	607a      	str	r2, [r7, #4]
 80110b0:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L5CX_STATUS_OK;
 80110b2:	2300      	movs	r3, #0
 80110b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int16_t i;

	uint8_t headers[] = {0x00, 0x00, 0x00, 0x00};
 80110b8:	2300      	movs	r3, #0
 80110ba:	61fb      	str	r3, [r7, #28]
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 80110bc:	2300      	movs	r3, #0
 80110be:	753b      	strb	r3, [r7, #20]
 80110c0:	2300      	movs	r3, #0
 80110c2:	757b      	strb	r3, [r7, #21]
 80110c4:	2300      	movs	r3, #0
 80110c6:	75bb      	strb	r3, [r7, #22]
 80110c8:	230f      	movs	r3, #15
 80110ca:	75fb      	strb	r3, [r7, #23]
 80110cc:	2305      	movs	r3, #5
 80110ce:	763b      	strb	r3, [r7, #24]
 80110d0:	2301      	movs	r3, #1
 80110d2:	767b      	strb	r3, [r7, #25]
			(uint8_t)((data_size + (uint16_t)8) >> 8), 
 80110d4:	887b      	ldrh	r3, [r7, #2]
 80110d6:	3308      	adds	r3, #8
 80110d8:	121b      	asrs	r3, r3, #8
 80110da:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 80110dc:	76bb      	strb	r3, [r7, #26]
			(uint8_t)((data_size + (uint16_t)8) & (uint8_t)0xFF)};
 80110de:	887b      	ldrh	r3, [r7, #2]
 80110e0:	b2db      	uxtb	r3, r3
 80110e2:	3308      	adds	r3, #8
 80110e4:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 80110e6:	76fb      	strb	r3, [r7, #27]

	uint16_t address = (uint16_t)VL53L5CX_UI_CMD_END - 
 80110e8:	887b      	ldrh	r3, [r7, #2]
 80110ea:	f5c3 533f 	rsb	r3, r3, #12224	; 0x2fc0
 80110ee:	3334      	adds	r3, #52	; 0x34
 80110f0:	847b      	strh	r3, [r7, #34]	; 0x22
		(data_size + (uint16_t)12) + (uint16_t)1;

	/* Check if cmd buffer is large enough */
	if((data_size + (uint16_t)12) 
 80110f2:	887b      	ldrh	r3, [r7, #2]
 80110f4:	f5b3 6f83 	cmp.w	r3, #1048	; 0x418
 80110f8:	d903      	bls.n	8011102 <vl53l5cx_dci_write_data+0x5e>
           > (uint16_t)VL53L5CX_TEMPORARY_BUFFER_SIZE)
	{
		status |= VL53L5CX_STATUS_ERROR;
 80110fa:	23ff      	movs	r3, #255	; 0xff
 80110fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011100:	e068      	b.n	80111d4 <vl53l5cx_dci_write_data+0x130>
	}
	else
	{
		headers[0] = (uint8_t)(index >> 8);
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	0a1b      	lsrs	r3, r3, #8
 8011106:	b2db      	uxtb	r3, r3
 8011108:	773b      	strb	r3, [r7, #28]
		headers[1] = (uint8_t)(index & (uint32_t)0xff);
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	b2db      	uxtb	r3, r3
 801110e:	777b      	strb	r3, [r7, #29]
		headers[2] = (uint8_t)(((data_size & (uint16_t)0xff0) >> 4));
 8011110:	887b      	ldrh	r3, [r7, #2]
 8011112:	111b      	asrs	r3, r3, #4
 8011114:	b2db      	uxtb	r3, r3
 8011116:	77bb      	strb	r3, [r7, #30]
		headers[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8011118:	887b      	ldrh	r3, [r7, #2]
 801111a:	b2db      	uxtb	r3, r3
 801111c:	011b      	lsls	r3, r3, #4
 801111e:	b2db      	uxtb	r3, r3
 8011120:	77fb      	strb	r3, [r7, #31]

	/* Copy data from structure to FW format (+4 bytes to add header) */
		SwapBuffer(data, data_size);
 8011122:	887b      	ldrh	r3, [r7, #2]
 8011124:	4619      	mov	r1, r3
 8011126:	68b8      	ldr	r0, [r7, #8]
 8011128:	f7fd faa2 	bl	800e670 <SwapBuffer>
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 801112c:	887b      	ldrh	r3, [r7, #2]
 801112e:	3b01      	subs	r3, #1
 8011130:	b29b      	uxth	r3, r3
 8011132:	84bb      	strh	r3, [r7, #36]	; 0x24
 8011134:	e012      	b.n	801115c <vl53l5cx_dci_write_data+0xb8>
		{
			p_dev->temp_buffer[i + 4] = data[i];
 8011136:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801113a:	68ba      	ldr	r2, [r7, #8]
 801113c:	441a      	add	r2, r3
 801113e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8011142:	3304      	adds	r3, #4
 8011144:	7811      	ldrb	r1, [r2, #0]
 8011146:	68fa      	ldr	r2, [r7, #12]
 8011148:	4413      	add	r3, r2
 801114a:	460a      	mov	r2, r1
 801114c:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8011150:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8011154:	b29b      	uxth	r3, r3
 8011156:	3b01      	subs	r3, #1
 8011158:	b29b      	uxth	r3, r3
 801115a:	84bb      	strh	r3, [r7, #36]	; 0x24
 801115c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8011160:	2b00      	cmp	r3, #0
 8011162:	dae8      	bge.n	8011136 <vl53l5cx_dci_write_data+0x92>
		}

	/* Add headers and footer */
		(void)memcpy(&p_dev->temp_buffer[0], headers, sizeof(headers));
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 801116a:	69fa      	ldr	r2, [r7, #28]
 801116c:	601a      	str	r2, [r3, #0]
		(void)memcpy(&p_dev->temp_buffer[data_size + (uint16_t)4],
 801116e:	887b      	ldrh	r3, [r7, #2]
 8011170:	3304      	adds	r3, #4
 8011172:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8011176:	68fa      	ldr	r2, [r7, #12]
 8011178:	4413      	add	r3, r2
 801117a:	461a      	mov	r2, r3
 801117c:	f107 0314 	add.w	r3, r7, #20
 8011180:	cb03      	ldmia	r3!, {r0, r1}
 8011182:	6010      	str	r0, [r2, #0]
 8011184:	6051      	str	r1, [r2, #4]
			footer, sizeof(footer));

	/* Send data to FW */
		status |= WrMulti(&(p_dev->platform),address,
 8011186:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer,
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
			(uint32_t)((uint32_t)data_size + (uint32_t)12));
 801118e:	887b      	ldrh	r3, [r7, #2]
		status |= WrMulti(&(p_dev->platform),address,
 8011190:	330c      	adds	r3, #12
 8011192:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8011194:	f7fd fa3e 	bl	800e614 <WrMulti>
 8011198:	4603      	mov	r3, r0
 801119a:	461a      	mov	r2, r3
 801119c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80111a0:	4313      	orrs	r3, r2
 80111a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 80111a6:	2303      	movs	r3, #3
 80111a8:	9301      	str	r3, [sp, #4]
 80111aa:	23ff      	movs	r3, #255	; 0xff
 80111ac:	9300      	str	r3, [sp, #0]
 80111ae:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80111b2:	2201      	movs	r2, #1
 80111b4:	2104      	movs	r1, #4
 80111b6:	68f8      	ldr	r0, [r7, #12]
 80111b8:	f7fd ffcd 	bl	800f156 <_vl53l5cx_poll_for_answer>
 80111bc:	4603      	mov	r3, r0
 80111be:	461a      	mov	r2, r3
 80111c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80111c4:	4313      	orrs	r3, r2
 80111c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

		SwapBuffer(data, data_size);
 80111ca:	887b      	ldrh	r3, [r7, #2]
 80111cc:	4619      	mov	r1, r3
 80111ce:	68b8      	ldr	r0, [r7, #8]
 80111d0:	f7fd fa4e 	bl	800e670 <SwapBuffer>
	}

	return status;
 80111d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80111d8:	4618      	mov	r0, r3
 80111da:	3728      	adds	r7, #40	; 0x28
 80111dc:	46bd      	mov	sp, r7
 80111de:	bd80      	pop	{r7, pc}

080111e0 <vl53l5cx_dci_replace_data>:
		uint32_t			index,
		uint16_t			data_size,
		uint8_t				*new_data,
		uint16_t			new_data_size,
		uint16_t			new_data_pos)
{
 80111e0:	b580      	push	{r7, lr}
 80111e2:	b086      	sub	sp, #24
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	60f8      	str	r0, [r7, #12]
 80111e8:	60b9      	str	r1, [r7, #8]
 80111ea:	607a      	str	r2, [r7, #4]
 80111ec:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L5CX_STATUS_OK;
 80111ee:	2300      	movs	r3, #0
 80111f0:	75fb      	strb	r3, [r7, #23]

	status |= vl53l5cx_dci_read_data(p_dev, data, index, data_size);
 80111f2:	887b      	ldrh	r3, [r7, #2]
 80111f4:	687a      	ldr	r2, [r7, #4]
 80111f6:	68b9      	ldr	r1, [r7, #8]
 80111f8:	68f8      	ldr	r0, [r7, #12]
 80111fa:	f7ff fec9 	bl	8010f90 <vl53l5cx_dci_read_data>
 80111fe:	4603      	mov	r3, r0
 8011200:	461a      	mov	r2, r3
 8011202:	7dfb      	ldrb	r3, [r7, #23]
 8011204:	4313      	orrs	r3, r2
 8011206:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(&(data[new_data_pos]), new_data, new_data_size);
 8011208:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801120a:	68ba      	ldr	r2, [r7, #8]
 801120c:	4413      	add	r3, r2
 801120e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011210:	6a39      	ldr	r1, [r7, #32]
 8011212:	4618      	mov	r0, r3
 8011214:	f00c fb9b 	bl	801d94e <memcpy>
	status |= vl53l5cx_dci_write_data(p_dev, data, index, data_size);
 8011218:	887b      	ldrh	r3, [r7, #2]
 801121a:	687a      	ldr	r2, [r7, #4]
 801121c:	68b9      	ldr	r1, [r7, #8]
 801121e:	68f8      	ldr	r0, [r7, #12]
 8011220:	f7ff ff40 	bl	80110a4 <vl53l5cx_dci_write_data>
 8011224:	4603      	mov	r3, r0
 8011226:	461a      	mov	r2, r3
 8011228:	7dfb      	ldrb	r3, [r7, #23]
 801122a:	4313      	orrs	r3, r2
 801122c:	75fb      	strb	r3, [r7, #23]

	return status;
 801122e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011230:	4618      	mov	r0, r3
 8011232:	3718      	adds	r7, #24
 8011234:	46bd      	mov	sp, r7
 8011236:	bd80      	pop	{r7, pc}

08011238 <vl53l5cx_set_detection_thresholds_enable>:
}

uint8_t vl53l5cx_set_detection_thresholds_enable(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				enabled)
{
 8011238:	b580      	push	{r7, lr}
 801123a:	b088      	sub	sp, #32
 801123c:	af04      	add	r7, sp, #16
 801123e:	6078      	str	r0, [r7, #4]
 8011240:	460b      	mov	r3, r1
 8011242:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp, status = VL53L5CX_STATUS_OK;
 8011244:	2300      	movs	r3, #0
 8011246:	73fb      	strb	r3, [r7, #15]
	uint8_t grp_global_config[] = {0x01, 0x00, 0x01, 0x00};
 8011248:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 801124c:	60bb      	str	r3, [r7, #8]

	if(enabled == (uint8_t)1)
 801124e:	78fb      	ldrb	r3, [r7, #3]
 8011250:	2b01      	cmp	r3, #1
 8011252:	d104      	bne.n	801125e <vl53l5cx_set_detection_thresholds_enable+0x26>
	{
		grp_global_config[0x01] = 0x01;
 8011254:	2301      	movs	r3, #1
 8011256:	727b      	strb	r3, [r7, #9]
		tmp = 0x04;
 8011258:	2304      	movs	r3, #4
 801125a:	73bb      	strb	r3, [r7, #14]
 801125c:	e003      	b.n	8011266 <vl53l5cx_set_detection_thresholds_enable+0x2e>
	}
	else
	{
		grp_global_config[0x01] = 0x00;
 801125e:	2300      	movs	r3, #0
 8011260:	727b      	strb	r3, [r7, #9]
		tmp = 0x0C;
 8011262:	230c      	movs	r3, #12
 8011264:	73bb      	strb	r3, [r7, #14]
	}

	/* Set global interrupt config */
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 801126c:	2300      	movs	r3, #0
 801126e:	9302      	str	r3, [sp, #8]
 8011270:	2304      	movs	r3, #4
 8011272:	9301      	str	r3, [sp, #4]
 8011274:	f107 0308 	add.w	r3, r7, #8
 8011278:	9300      	str	r3, [sp, #0]
 801127a:	2308      	movs	r3, #8
 801127c:	f24b 62e0 	movw	r2, #46816	; 0xb6e0
 8011280:	6878      	ldr	r0, [r7, #4]
 8011282:	f7ff ffad 	bl	80111e0 <vl53l5cx_dci_replace_data>
 8011286:	4603      	mov	r3, r0
 8011288:	461a      	mov	r2, r3
 801128a:	7bfb      	ldrb	r3, [r7, #15]
 801128c:	4313      	orrs	r3, r2
 801128e:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_DET_THRESH_GLOBAL_CONFIG, 8,
			(uint8_t*)&grp_global_config, 4, 0x00);

	/* Update interrupt config */
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8011296:	2311      	movs	r3, #17
 8011298:	9302      	str	r3, [sp, #8]
 801129a:	2301      	movs	r3, #1
 801129c:	9301      	str	r3, [sp, #4]
 801129e:	f107 030e 	add.w	r3, r7, #14
 80112a2:	9300      	str	r3, [sp, #0]
 80112a4:	2314      	movs	r3, #20
 80112a6:	f245 4288 	movw	r2, #21640	; 0x5488
 80112aa:	6878      	ldr	r0, [r7, #4]
 80112ac:	f7ff ff98 	bl	80111e0 <vl53l5cx_dci_replace_data>
 80112b0:	4603      	mov	r3, r0
 80112b2:	461a      	mov	r2, r3
 80112b4:	7bfb      	ldrb	r3, [r7, #15]
 80112b6:	4313      	orrs	r3, r2
 80112b8:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_DET_THRESH_CONFIG, 20,
			(uint8_t*)&tmp, 1, 0x11);

	return status;
 80112ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80112bc:	4618      	mov	r0, r3
 80112be:	3710      	adds	r7, #16
 80112c0:	46bd      	mov	sp, r7
 80112c2:	bd80      	pop	{r7, pc}

080112c4 <vl53l5cx_set_detection_thresholds>:
}

uint8_t vl53l5cx_set_detection_thresholds(
		VL53L5CX_Configuration			*p_dev,
		VL53L5CX_DetectionThresholds	*p_thresholds)
{
 80112c4:	b580      	push	{r7, lr}
 80112c6:	b086      	sub	sp, #24
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	6078      	str	r0, [r7, #4]
 80112cc:	6039      	str	r1, [r7, #0]
	uint8_t i, status = VL53L5CX_STATUS_OK;
 80112ce:	2300      	movs	r3, #0
 80112d0:	75bb      	strb	r3, [r7, #22]
	uint8_t grp_valid_target_cfg[] = {0x05, 0x05, 0x05, 0x05,
 80112d2:	4aab      	ldr	r2, [pc, #684]	; (8011580 <vl53l5cx_set_detection_thresholds+0x2bc>)
 80112d4:	f107 030c 	add.w	r3, r7, #12
 80112d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80112dc:	e883 0003 	stmia.w	r3, {r0, r1}
					0x05, 0x05, 0x05, 0x05};

	for(i = 0; i < (uint8_t) VL53L5CX_NB_THRESHOLDS; i++)
 80112e0:	2300      	movs	r3, #0
 80112e2:	75fb      	strb	r3, [r7, #23]
 80112e4:	e128      	b.n	8011538 <vl53l5cx_set_detection_thresholds+0x274>
	{
		switch(p_thresholds[i].measurement)
 80112e6:	7dfa      	ldrb	r2, [r7, #23]
 80112e8:	4613      	mov	r3, r2
 80112ea:	005b      	lsls	r3, r3, #1
 80112ec:	4413      	add	r3, r2
 80112ee:	009b      	lsls	r3, r3, #2
 80112f0:	461a      	mov	r2, r3
 80112f2:	683b      	ldr	r3, [r7, #0]
 80112f4:	4413      	add	r3, r2
 80112f6:	7a1b      	ldrb	r3, [r3, #8]
 80112f8:	3b01      	subs	r3, #1
 80112fa:	2b12      	cmp	r3, #18
 80112fc:	f200 8118 	bhi.w	8011530 <vl53l5cx_set_detection_thresholds+0x26c>
 8011300:	a201      	add	r2, pc, #4	; (adr r2, 8011308 <vl53l5cx_set_detection_thresholds+0x44>)
 8011302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011306:	bf00      	nop
 8011308:	08011355 	.word	0x08011355
 801130c:	080113a3 	.word	0x080113a3
 8011310:	08011531 	.word	0x08011531
 8011314:	080113f1 	.word	0x080113f1
 8011318:	08011531 	.word	0x08011531
 801131c:	08011531 	.word	0x08011531
 8011320:	08011531 	.word	0x08011531
 8011324:	0801143f 	.word	0x0801143f
 8011328:	08011531 	.word	0x08011531
 801132c:	08011531 	.word	0x08011531
 8011330:	08011531 	.word	0x08011531
 8011334:	08011531 	.word	0x08011531
 8011338:	0801148d 	.word	0x0801148d
 801133c:	08011531 	.word	0x08011531
 8011340:	08011531 	.word	0x08011531
 8011344:	08011531 	.word	0x08011531
 8011348:	08011531 	.word	0x08011531
 801134c:	08011531 	.word	0x08011531
 8011350:	080114db 	.word	0x080114db
		{
			case VL53L5CX_DISTANCE_MM:
				p_thresholds[i].param_low_thresh  *= 4;
 8011354:	7dfa      	ldrb	r2, [r7, #23]
 8011356:	4613      	mov	r3, r2
 8011358:	005b      	lsls	r3, r3, #1
 801135a:	4413      	add	r3, r2
 801135c:	009b      	lsls	r3, r3, #2
 801135e:	461a      	mov	r2, r3
 8011360:	683b      	ldr	r3, [r7, #0]
 8011362:	4413      	add	r3, r2
 8011364:	6819      	ldr	r1, [r3, #0]
 8011366:	7dfa      	ldrb	r2, [r7, #23]
 8011368:	4613      	mov	r3, r2
 801136a:	005b      	lsls	r3, r3, #1
 801136c:	4413      	add	r3, r2
 801136e:	009b      	lsls	r3, r3, #2
 8011370:	461a      	mov	r2, r3
 8011372:	683b      	ldr	r3, [r7, #0]
 8011374:	4413      	add	r3, r2
 8011376:	008a      	lsls	r2, r1, #2
 8011378:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 4;
 801137a:	7dfa      	ldrb	r2, [r7, #23]
 801137c:	4613      	mov	r3, r2
 801137e:	005b      	lsls	r3, r3, #1
 8011380:	4413      	add	r3, r2
 8011382:	009b      	lsls	r3, r3, #2
 8011384:	461a      	mov	r2, r3
 8011386:	683b      	ldr	r3, [r7, #0]
 8011388:	4413      	add	r3, r2
 801138a:	6859      	ldr	r1, [r3, #4]
 801138c:	7dfa      	ldrb	r2, [r7, #23]
 801138e:	4613      	mov	r3, r2
 8011390:	005b      	lsls	r3, r3, #1
 8011392:	4413      	add	r3, r2
 8011394:	009b      	lsls	r3, r3, #2
 8011396:	461a      	mov	r2, r3
 8011398:	683b      	ldr	r3, [r7, #0]
 801139a:	4413      	add	r3, r2
 801139c:	008a      	lsls	r2, r1, #2
 801139e:	605a      	str	r2, [r3, #4]
				break;
 80113a0:	e0c7      	b.n	8011532 <vl53l5cx_set_detection_thresholds+0x26e>
			case VL53L5CX_SIGNAL_PER_SPAD_KCPS:
				p_thresholds[i].param_low_thresh  *= 2048;
 80113a2:	7dfa      	ldrb	r2, [r7, #23]
 80113a4:	4613      	mov	r3, r2
 80113a6:	005b      	lsls	r3, r3, #1
 80113a8:	4413      	add	r3, r2
 80113aa:	009b      	lsls	r3, r3, #2
 80113ac:	461a      	mov	r2, r3
 80113ae:	683b      	ldr	r3, [r7, #0]
 80113b0:	4413      	add	r3, r2
 80113b2:	6819      	ldr	r1, [r3, #0]
 80113b4:	7dfa      	ldrb	r2, [r7, #23]
 80113b6:	4613      	mov	r3, r2
 80113b8:	005b      	lsls	r3, r3, #1
 80113ba:	4413      	add	r3, r2
 80113bc:	009b      	lsls	r3, r3, #2
 80113be:	461a      	mov	r2, r3
 80113c0:	683b      	ldr	r3, [r7, #0]
 80113c2:	4413      	add	r3, r2
 80113c4:	02ca      	lsls	r2, r1, #11
 80113c6:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 2048;
 80113c8:	7dfa      	ldrb	r2, [r7, #23]
 80113ca:	4613      	mov	r3, r2
 80113cc:	005b      	lsls	r3, r3, #1
 80113ce:	4413      	add	r3, r2
 80113d0:	009b      	lsls	r3, r3, #2
 80113d2:	461a      	mov	r2, r3
 80113d4:	683b      	ldr	r3, [r7, #0]
 80113d6:	4413      	add	r3, r2
 80113d8:	6859      	ldr	r1, [r3, #4]
 80113da:	7dfa      	ldrb	r2, [r7, #23]
 80113dc:	4613      	mov	r3, r2
 80113de:	005b      	lsls	r3, r3, #1
 80113e0:	4413      	add	r3, r2
 80113e2:	009b      	lsls	r3, r3, #2
 80113e4:	461a      	mov	r2, r3
 80113e6:	683b      	ldr	r3, [r7, #0]
 80113e8:	4413      	add	r3, r2
 80113ea:	02ca      	lsls	r2, r1, #11
 80113ec:	605a      	str	r2, [r3, #4]
				break;
 80113ee:	e0a0      	b.n	8011532 <vl53l5cx_set_detection_thresholds+0x26e>
			case VL53L5CX_RANGE_SIGMA_MM:
				p_thresholds[i].param_low_thresh  *= 128;
 80113f0:	7dfa      	ldrb	r2, [r7, #23]
 80113f2:	4613      	mov	r3, r2
 80113f4:	005b      	lsls	r3, r3, #1
 80113f6:	4413      	add	r3, r2
 80113f8:	009b      	lsls	r3, r3, #2
 80113fa:	461a      	mov	r2, r3
 80113fc:	683b      	ldr	r3, [r7, #0]
 80113fe:	4413      	add	r3, r2
 8011400:	6819      	ldr	r1, [r3, #0]
 8011402:	7dfa      	ldrb	r2, [r7, #23]
 8011404:	4613      	mov	r3, r2
 8011406:	005b      	lsls	r3, r3, #1
 8011408:	4413      	add	r3, r2
 801140a:	009b      	lsls	r3, r3, #2
 801140c:	461a      	mov	r2, r3
 801140e:	683b      	ldr	r3, [r7, #0]
 8011410:	4413      	add	r3, r2
 8011412:	01ca      	lsls	r2, r1, #7
 8011414:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 128;
 8011416:	7dfa      	ldrb	r2, [r7, #23]
 8011418:	4613      	mov	r3, r2
 801141a:	005b      	lsls	r3, r3, #1
 801141c:	4413      	add	r3, r2
 801141e:	009b      	lsls	r3, r3, #2
 8011420:	461a      	mov	r2, r3
 8011422:	683b      	ldr	r3, [r7, #0]
 8011424:	4413      	add	r3, r2
 8011426:	6859      	ldr	r1, [r3, #4]
 8011428:	7dfa      	ldrb	r2, [r7, #23]
 801142a:	4613      	mov	r3, r2
 801142c:	005b      	lsls	r3, r3, #1
 801142e:	4413      	add	r3, r2
 8011430:	009b      	lsls	r3, r3, #2
 8011432:	461a      	mov	r2, r3
 8011434:	683b      	ldr	r3, [r7, #0]
 8011436:	4413      	add	r3, r2
 8011438:	01ca      	lsls	r2, r1, #7
 801143a:	605a      	str	r2, [r3, #4]
				break;
 801143c:	e079      	b.n	8011532 <vl53l5cx_set_detection_thresholds+0x26e>
			case VL53L5CX_AMBIENT_PER_SPAD_KCPS:
				p_thresholds[i].param_low_thresh  *= 2048;
 801143e:	7dfa      	ldrb	r2, [r7, #23]
 8011440:	4613      	mov	r3, r2
 8011442:	005b      	lsls	r3, r3, #1
 8011444:	4413      	add	r3, r2
 8011446:	009b      	lsls	r3, r3, #2
 8011448:	461a      	mov	r2, r3
 801144a:	683b      	ldr	r3, [r7, #0]
 801144c:	4413      	add	r3, r2
 801144e:	6819      	ldr	r1, [r3, #0]
 8011450:	7dfa      	ldrb	r2, [r7, #23]
 8011452:	4613      	mov	r3, r2
 8011454:	005b      	lsls	r3, r3, #1
 8011456:	4413      	add	r3, r2
 8011458:	009b      	lsls	r3, r3, #2
 801145a:	461a      	mov	r2, r3
 801145c:	683b      	ldr	r3, [r7, #0]
 801145e:	4413      	add	r3, r2
 8011460:	02ca      	lsls	r2, r1, #11
 8011462:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 2048;
 8011464:	7dfa      	ldrb	r2, [r7, #23]
 8011466:	4613      	mov	r3, r2
 8011468:	005b      	lsls	r3, r3, #1
 801146a:	4413      	add	r3, r2
 801146c:	009b      	lsls	r3, r3, #2
 801146e:	461a      	mov	r2, r3
 8011470:	683b      	ldr	r3, [r7, #0]
 8011472:	4413      	add	r3, r2
 8011474:	6859      	ldr	r1, [r3, #4]
 8011476:	7dfa      	ldrb	r2, [r7, #23]
 8011478:	4613      	mov	r3, r2
 801147a:	005b      	lsls	r3, r3, #1
 801147c:	4413      	add	r3, r2
 801147e:	009b      	lsls	r3, r3, #2
 8011480:	461a      	mov	r2, r3
 8011482:	683b      	ldr	r3, [r7, #0]
 8011484:	4413      	add	r3, r2
 8011486:	02ca      	lsls	r2, r1, #11
 8011488:	605a      	str	r2, [r3, #4]
				break;
 801148a:	e052      	b.n	8011532 <vl53l5cx_set_detection_thresholds+0x26e>
			case VL53L5CX_NB_SPADS_ENABLED:
				p_thresholds[i].param_low_thresh  *= 256;
 801148c:	7dfa      	ldrb	r2, [r7, #23]
 801148e:	4613      	mov	r3, r2
 8011490:	005b      	lsls	r3, r3, #1
 8011492:	4413      	add	r3, r2
 8011494:	009b      	lsls	r3, r3, #2
 8011496:	461a      	mov	r2, r3
 8011498:	683b      	ldr	r3, [r7, #0]
 801149a:	4413      	add	r3, r2
 801149c:	6819      	ldr	r1, [r3, #0]
 801149e:	7dfa      	ldrb	r2, [r7, #23]
 80114a0:	4613      	mov	r3, r2
 80114a2:	005b      	lsls	r3, r3, #1
 80114a4:	4413      	add	r3, r2
 80114a6:	009b      	lsls	r3, r3, #2
 80114a8:	461a      	mov	r2, r3
 80114aa:	683b      	ldr	r3, [r7, #0]
 80114ac:	4413      	add	r3, r2
 80114ae:	020a      	lsls	r2, r1, #8
 80114b0:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 256;
 80114b2:	7dfa      	ldrb	r2, [r7, #23]
 80114b4:	4613      	mov	r3, r2
 80114b6:	005b      	lsls	r3, r3, #1
 80114b8:	4413      	add	r3, r2
 80114ba:	009b      	lsls	r3, r3, #2
 80114bc:	461a      	mov	r2, r3
 80114be:	683b      	ldr	r3, [r7, #0]
 80114c0:	4413      	add	r3, r2
 80114c2:	6859      	ldr	r1, [r3, #4]
 80114c4:	7dfa      	ldrb	r2, [r7, #23]
 80114c6:	4613      	mov	r3, r2
 80114c8:	005b      	lsls	r3, r3, #1
 80114ca:	4413      	add	r3, r2
 80114cc:	009b      	lsls	r3, r3, #2
 80114ce:	461a      	mov	r2, r3
 80114d0:	683b      	ldr	r3, [r7, #0]
 80114d2:	4413      	add	r3, r2
 80114d4:	020a      	lsls	r2, r1, #8
 80114d6:	605a      	str	r2, [r3, #4]
				break;
 80114d8:	e02b      	b.n	8011532 <vl53l5cx_set_detection_thresholds+0x26e>
			case VL53L5CX_MOTION_INDICATOR:
				p_thresholds[i].param_low_thresh  *= 65535;
 80114da:	7dfa      	ldrb	r2, [r7, #23]
 80114dc:	4613      	mov	r3, r2
 80114de:	005b      	lsls	r3, r3, #1
 80114e0:	4413      	add	r3, r2
 80114e2:	009b      	lsls	r3, r3, #2
 80114e4:	461a      	mov	r2, r3
 80114e6:	683b      	ldr	r3, [r7, #0]
 80114e8:	4413      	add	r3, r2
 80114ea:	681a      	ldr	r2, [r3, #0]
 80114ec:	7df9      	ldrb	r1, [r7, #23]
 80114ee:	460b      	mov	r3, r1
 80114f0:	005b      	lsls	r3, r3, #1
 80114f2:	440b      	add	r3, r1
 80114f4:	009b      	lsls	r3, r3, #2
 80114f6:	4619      	mov	r1, r3
 80114f8:	683b      	ldr	r3, [r7, #0]
 80114fa:	4419      	add	r1, r3
 80114fc:	4613      	mov	r3, r2
 80114fe:	041b      	lsls	r3, r3, #16
 8011500:	1a9b      	subs	r3, r3, r2
 8011502:	600b      	str	r3, [r1, #0]
				p_thresholds[i].param_high_thresh *= 65535;
 8011504:	7dfa      	ldrb	r2, [r7, #23]
 8011506:	4613      	mov	r3, r2
 8011508:	005b      	lsls	r3, r3, #1
 801150a:	4413      	add	r3, r2
 801150c:	009b      	lsls	r3, r3, #2
 801150e:	461a      	mov	r2, r3
 8011510:	683b      	ldr	r3, [r7, #0]
 8011512:	4413      	add	r3, r2
 8011514:	685a      	ldr	r2, [r3, #4]
 8011516:	7df9      	ldrb	r1, [r7, #23]
 8011518:	460b      	mov	r3, r1
 801151a:	005b      	lsls	r3, r3, #1
 801151c:	440b      	add	r3, r1
 801151e:	009b      	lsls	r3, r3, #2
 8011520:	4619      	mov	r1, r3
 8011522:	683b      	ldr	r3, [r7, #0]
 8011524:	4419      	add	r1, r3
 8011526:	4613      	mov	r3, r2
 8011528:	041b      	lsls	r3, r3, #16
 801152a:	1a9b      	subs	r3, r3, r2
 801152c:	604b      	str	r3, [r1, #4]
				break;
 801152e:	e000      	b.n	8011532 <vl53l5cx_set_detection_thresholds+0x26e>
			default:
				break;
 8011530:	bf00      	nop
	for(i = 0; i < (uint8_t) VL53L5CX_NB_THRESHOLDS; i++)
 8011532:	7dfb      	ldrb	r3, [r7, #23]
 8011534:	3301      	adds	r3, #1
 8011536:	75fb      	strb	r3, [r7, #23]
 8011538:	7dfb      	ldrb	r3, [r7, #23]
 801153a:	2b3f      	cmp	r3, #63	; 0x3f
 801153c:	f67f aed3 	bls.w	80112e6 <vl53l5cx_set_detection_thresholds+0x22>
		}
	}

	/* Set valid target list */
	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)grp_valid_target_cfg,
 8011540:	f107 010c 	add.w	r1, r7, #12
 8011544:	2308      	movs	r3, #8
 8011546:	f64b 12f0 	movw	r2, #47600	; 0xb9f0
 801154a:	6878      	ldr	r0, [r7, #4]
 801154c:	f7ff fdaa 	bl	80110a4 <vl53l5cx_dci_write_data>
 8011550:	4603      	mov	r3, r0
 8011552:	461a      	mov	r2, r3
 8011554:	7dbb      	ldrb	r3, [r7, #22]
 8011556:	4313      	orrs	r3, r2
 8011558:	75bb      	strb	r3, [r7, #22]
			VL53L5CX_DCI_DET_THRESH_VALID_STATUS, 
			(uint16_t)sizeof(grp_valid_target_cfg));

	/* Set thresholds configuration */
	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)p_thresholds,
 801155a:	f44f 7340 	mov.w	r3, #768	; 0x300
 801155e:	f24b 62e8 	movw	r2, #46824	; 0xb6e8
 8011562:	6839      	ldr	r1, [r7, #0]
 8011564:	6878      	ldr	r0, [r7, #4]
 8011566:	f7ff fd9d 	bl	80110a4 <vl53l5cx_dci_write_data>
 801156a:	4603      	mov	r3, r0
 801156c:	461a      	mov	r2, r3
 801156e:	7dbb      	ldrb	r3, [r7, #22]
 8011570:	4313      	orrs	r3, r2
 8011572:	75bb      	strb	r3, [r7, #22]
			VL53L5CX_DCI_DET_THRESH_START, 
			(uint16_t)(VL53L5CX_NB_THRESHOLDS
			*sizeof(VL53L5CX_DetectionThresholds)));

	return status;
 8011574:	7dbb      	ldrb	r3, [r7, #22]
}
 8011576:	4618      	mov	r0, r3
 8011578:	3718      	adds	r7, #24
 801157a:	46bd      	mov	sp, r7
 801157c:	bd80      	pop	{r7, pc}
 801157e:	bf00      	nop
 8011580:	08021a0c 	.word	0x08021a0c

08011584 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8011584:	b480      	push	{r7}
 8011586:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8011588:	4b18      	ldr	r3, [pc, #96]	; (80115ec <SystemInit+0x68>)
 801158a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801158e:	4a17      	ldr	r2, [pc, #92]	; (80115ec <SystemInit+0x68>)
 8011590:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011594:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8011598:	4b15      	ldr	r3, [pc, #84]	; (80115f0 <SystemInit+0x6c>)
 801159a:	2201      	movs	r2, #1
 801159c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 801159e:	4b14      	ldr	r3, [pc, #80]	; (80115f0 <SystemInit+0x6c>)
 80115a0:	2200      	movs	r2, #0
 80115a2:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80115a4:	4b12      	ldr	r3, [pc, #72]	; (80115f0 <SystemInit+0x6c>)
 80115a6:	2200      	movs	r2, #0
 80115a8:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80115aa:	4b11      	ldr	r3, [pc, #68]	; (80115f0 <SystemInit+0x6c>)
 80115ac:	2200      	movs	r2, #0
 80115ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80115b0:	4b0f      	ldr	r3, [pc, #60]	; (80115f0 <SystemInit+0x6c>)
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	4a0e      	ldr	r2, [pc, #56]	; (80115f0 <SystemInit+0x6c>)
 80115b6:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80115ba:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80115be:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80115c0:	4b0b      	ldr	r3, [pc, #44]	; (80115f0 <SystemInit+0x6c>)
 80115c2:	2200      	movs	r2, #0
 80115c4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80115c6:	4b0a      	ldr	r3, [pc, #40]	; (80115f0 <SystemInit+0x6c>)
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	4a09      	ldr	r2, [pc, #36]	; (80115f0 <SystemInit+0x6c>)
 80115cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80115d0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80115d2:	4b07      	ldr	r3, [pc, #28]	; (80115f0 <SystemInit+0x6c>)
 80115d4:	2200      	movs	r2, #0
 80115d6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80115d8:	4b04      	ldr	r3, [pc, #16]	; (80115ec <SystemInit+0x68>)
 80115da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80115de:	609a      	str	r2, [r3, #8]
  #endif
}
 80115e0:	bf00      	nop
 80115e2:	46bd      	mov	sp, r7
 80115e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e8:	4770      	bx	lr
 80115ea:	bf00      	nop
 80115ec:	e000ed00 	.word	0xe000ed00
 80115f0:	46020c00 	.word	0x46020c00

080115f4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80115f4:	b580      	push	{r7, lr}
 80115f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80115f8:	4b11      	ldr	r3, [pc, #68]	; (8011640 <HAL_Init+0x4c>)
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	4a10      	ldr	r2, [pc, #64]	; (8011640 <HAL_Init+0x4c>)
 80115fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011602:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8011604:	2003      	movs	r0, #3
 8011606:	f000 f991 	bl	801192c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 801160a:	f006 fbbb 	bl	8017d84 <HAL_RCC_GetSysClockFreq>
 801160e:	4602      	mov	r2, r0
 8011610:	4b0c      	ldr	r3, [pc, #48]	; (8011644 <HAL_Init+0x50>)
 8011612:	6a1b      	ldr	r3, [r3, #32]
 8011614:	f003 030f 	and.w	r3, r3, #15
 8011618:	490b      	ldr	r1, [pc, #44]	; (8011648 <HAL_Init+0x54>)
 801161a:	5ccb      	ldrb	r3, [r1, r3]
 801161c:	fa22 f303 	lsr.w	r3, r2, r3
 8011620:	4a0a      	ldr	r2, [pc, #40]	; (801164c <HAL_Init+0x58>)
 8011622:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8011624:	200f      	movs	r0, #15
 8011626:	f000 f813 	bl	8011650 <HAL_InitTick>
 801162a:	4603      	mov	r3, r0
 801162c:	2b00      	cmp	r3, #0
 801162e:	d001      	beq.n	8011634 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8011630:	2301      	movs	r3, #1
 8011632:	e002      	b.n	801163a <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8011634:	f00a fa32 	bl	801ba9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8011638:	2300      	movs	r3, #0
}
 801163a:	4618      	mov	r0, r3
 801163c:	bd80      	pop	{r7, pc}
 801163e:	bf00      	nop
 8011640:	40022000 	.word	0x40022000
 8011644:	46020c00 	.word	0x46020c00
 8011648:	08038374 	.word	0x08038374
 801164c:	20000200 	.word	0x20000200

08011650 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8011650:	b580      	push	{r7, lr}
 8011652:	b082      	sub	sp, #8
 8011654:	af00      	add	r7, sp, #0
 8011656:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8011658:	4b15      	ldr	r3, [pc, #84]	; (80116b0 <HAL_InitTick+0x60>)
 801165a:	781b      	ldrb	r3, [r3, #0]
 801165c:	2b00      	cmp	r3, #0
 801165e:	d101      	bne.n	8011664 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8011660:	2301      	movs	r3, #1
 8011662:	e021      	b.n	80116a8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8011664:	4b13      	ldr	r3, [pc, #76]	; (80116b4 <HAL_InitTick+0x64>)
 8011666:	681a      	ldr	r2, [r3, #0]
 8011668:	4b11      	ldr	r3, [pc, #68]	; (80116b0 <HAL_InitTick+0x60>)
 801166a:	781b      	ldrb	r3, [r3, #0]
 801166c:	4619      	mov	r1, r3
 801166e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011672:	fbb3 f3f1 	udiv	r3, r3, r1
 8011676:	fbb2 f3f3 	udiv	r3, r2, r3
 801167a:	4618      	mov	r0, r3
 801167c:	f000 f997 	bl	80119ae <HAL_SYSTICK_Config>
 8011680:	4603      	mov	r3, r0
 8011682:	2b00      	cmp	r3, #0
 8011684:	d001      	beq.n	801168a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8011686:	2301      	movs	r3, #1
 8011688:	e00e      	b.n	80116a8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	2b0f      	cmp	r3, #15
 801168e:	d80a      	bhi.n	80116a6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8011690:	2200      	movs	r2, #0
 8011692:	6879      	ldr	r1, [r7, #4]
 8011694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011698:	f000 f953 	bl	8011942 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 801169c:	4a06      	ldr	r2, [pc, #24]	; (80116b8 <HAL_InitTick+0x68>)
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80116a2:	2300      	movs	r3, #0
 80116a4:	e000      	b.n	80116a8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80116a6:	2301      	movs	r3, #1
}
 80116a8:	4618      	mov	r0, r3
 80116aa:	3708      	adds	r7, #8
 80116ac:	46bd      	mov	sp, r7
 80116ae:	bd80      	pop	{r7, pc}
 80116b0:	20000208 	.word	0x20000208
 80116b4:	20000200 	.word	0x20000200
 80116b8:	20000204 	.word	0x20000204

080116bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80116bc:	b480      	push	{r7}
 80116be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80116c0:	4b06      	ldr	r3, [pc, #24]	; (80116dc <HAL_IncTick+0x20>)
 80116c2:	781b      	ldrb	r3, [r3, #0]
 80116c4:	461a      	mov	r2, r3
 80116c6:	4b06      	ldr	r3, [pc, #24]	; (80116e0 <HAL_IncTick+0x24>)
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	4413      	add	r3, r2
 80116cc:	4a04      	ldr	r2, [pc, #16]	; (80116e0 <HAL_IncTick+0x24>)
 80116ce:	6013      	str	r3, [r2, #0]
}
 80116d0:	bf00      	nop
 80116d2:	46bd      	mov	sp, r7
 80116d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d8:	4770      	bx	lr
 80116da:	bf00      	nop
 80116dc:	20000208 	.word	0x20000208
 80116e0:	20003c40 	.word	0x20003c40

080116e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80116e4:	b480      	push	{r7}
 80116e6:	af00      	add	r7, sp, #0
  return uwTick;
 80116e8:	4b03      	ldr	r3, [pc, #12]	; (80116f8 <HAL_GetTick+0x14>)
 80116ea:	681b      	ldr	r3, [r3, #0]
}
 80116ec:	4618      	mov	r0, r3
 80116ee:	46bd      	mov	sp, r7
 80116f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116f4:	4770      	bx	lr
 80116f6:	bf00      	nop
 80116f8:	20003c40 	.word	0x20003c40

080116fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80116fc:	b580      	push	{r7, lr}
 80116fe:	b084      	sub	sp, #16
 8011700:	af00      	add	r7, sp, #0
 8011702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8011704:	f7ff ffee 	bl	80116e4 <HAL_GetTick>
 8011708:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011714:	d005      	beq.n	8011722 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8011716:	4b0a      	ldr	r3, [pc, #40]	; (8011740 <HAL_Delay+0x44>)
 8011718:	781b      	ldrb	r3, [r3, #0]
 801171a:	461a      	mov	r2, r3
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	4413      	add	r3, r2
 8011720:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8011722:	bf00      	nop
 8011724:	f7ff ffde 	bl	80116e4 <HAL_GetTick>
 8011728:	4602      	mov	r2, r0
 801172a:	68bb      	ldr	r3, [r7, #8]
 801172c:	1ad3      	subs	r3, r2, r3
 801172e:	68fa      	ldr	r2, [r7, #12]
 8011730:	429a      	cmp	r2, r3
 8011732:	d8f7      	bhi.n	8011724 <HAL_Delay+0x28>
  {
  }
}
 8011734:	bf00      	nop
 8011736:	bf00      	nop
 8011738:	3710      	adds	r7, #16
 801173a:	46bd      	mov	sp, r7
 801173c:	bd80      	pop	{r7, pc}
 801173e:	bf00      	nop
 8011740:	20000208 	.word	0x20000208

08011744 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011744:	b480      	push	{r7}
 8011746:	b085      	sub	sp, #20
 8011748:	af00      	add	r7, sp, #0
 801174a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	f003 0307 	and.w	r3, r3, #7
 8011752:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8011754:	4b0c      	ldr	r3, [pc, #48]	; (8011788 <__NVIC_SetPriorityGrouping+0x44>)
 8011756:	68db      	ldr	r3, [r3, #12]
 8011758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801175a:	68ba      	ldr	r2, [r7, #8]
 801175c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8011760:	4013      	ands	r3, r2
 8011762:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8011768:	68bb      	ldr	r3, [r7, #8]
 801176a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801176c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8011770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8011776:	4a04      	ldr	r2, [pc, #16]	; (8011788 <__NVIC_SetPriorityGrouping+0x44>)
 8011778:	68bb      	ldr	r3, [r7, #8]
 801177a:	60d3      	str	r3, [r2, #12]
}
 801177c:	bf00      	nop
 801177e:	3714      	adds	r7, #20
 8011780:	46bd      	mov	sp, r7
 8011782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011786:	4770      	bx	lr
 8011788:	e000ed00 	.word	0xe000ed00

0801178c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 801178c:	b480      	push	{r7}
 801178e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8011790:	4b04      	ldr	r3, [pc, #16]	; (80117a4 <__NVIC_GetPriorityGrouping+0x18>)
 8011792:	68db      	ldr	r3, [r3, #12]
 8011794:	0a1b      	lsrs	r3, r3, #8
 8011796:	f003 0307 	and.w	r3, r3, #7
}
 801179a:	4618      	mov	r0, r3
 801179c:	46bd      	mov	sp, r7
 801179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117a2:	4770      	bx	lr
 80117a4:	e000ed00 	.word	0xe000ed00

080117a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80117a8:	b480      	push	{r7}
 80117aa:	b083      	sub	sp, #12
 80117ac:	af00      	add	r7, sp, #0
 80117ae:	4603      	mov	r3, r0
 80117b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80117b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	db0b      	blt.n	80117d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80117ba:	79fb      	ldrb	r3, [r7, #7]
 80117bc:	f003 021f 	and.w	r2, r3, #31
 80117c0:	4907      	ldr	r1, [pc, #28]	; (80117e0 <__NVIC_EnableIRQ+0x38>)
 80117c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80117c6:	095b      	lsrs	r3, r3, #5
 80117c8:	2001      	movs	r0, #1
 80117ca:	fa00 f202 	lsl.w	r2, r0, r2
 80117ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80117d2:	bf00      	nop
 80117d4:	370c      	adds	r7, #12
 80117d6:	46bd      	mov	sp, r7
 80117d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117dc:	4770      	bx	lr
 80117de:	bf00      	nop
 80117e0:	e000e100 	.word	0xe000e100

080117e4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80117e4:	b480      	push	{r7}
 80117e6:	b083      	sub	sp, #12
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	4603      	mov	r3, r0
 80117ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80117ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	db12      	blt.n	801181c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80117f6:	79fb      	ldrb	r3, [r7, #7]
 80117f8:	f003 021f 	and.w	r2, r3, #31
 80117fc:	490a      	ldr	r1, [pc, #40]	; (8011828 <__NVIC_DisableIRQ+0x44>)
 80117fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011802:	095b      	lsrs	r3, r3, #5
 8011804:	2001      	movs	r0, #1
 8011806:	fa00 f202 	lsl.w	r2, r0, r2
 801180a:	3320      	adds	r3, #32
 801180c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8011810:	f3bf 8f4f 	dsb	sy
}
 8011814:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011816:	f3bf 8f6f 	isb	sy
}
 801181a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 801181c:	bf00      	nop
 801181e:	370c      	adds	r7, #12
 8011820:	46bd      	mov	sp, r7
 8011822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011826:	4770      	bx	lr
 8011828:	e000e100 	.word	0xe000e100

0801182c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801182c:	b480      	push	{r7}
 801182e:	b083      	sub	sp, #12
 8011830:	af00      	add	r7, sp, #0
 8011832:	4603      	mov	r3, r0
 8011834:	6039      	str	r1, [r7, #0]
 8011836:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801183c:	2b00      	cmp	r3, #0
 801183e:	db0a      	blt.n	8011856 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011840:	683b      	ldr	r3, [r7, #0]
 8011842:	b2da      	uxtb	r2, r3
 8011844:	490c      	ldr	r1, [pc, #48]	; (8011878 <__NVIC_SetPriority+0x4c>)
 8011846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801184a:	0112      	lsls	r2, r2, #4
 801184c:	b2d2      	uxtb	r2, r2
 801184e:	440b      	add	r3, r1
 8011850:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8011854:	e00a      	b.n	801186c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011856:	683b      	ldr	r3, [r7, #0]
 8011858:	b2da      	uxtb	r2, r3
 801185a:	4908      	ldr	r1, [pc, #32]	; (801187c <__NVIC_SetPriority+0x50>)
 801185c:	79fb      	ldrb	r3, [r7, #7]
 801185e:	f003 030f 	and.w	r3, r3, #15
 8011862:	3b04      	subs	r3, #4
 8011864:	0112      	lsls	r2, r2, #4
 8011866:	b2d2      	uxtb	r2, r2
 8011868:	440b      	add	r3, r1
 801186a:	761a      	strb	r2, [r3, #24]
}
 801186c:	bf00      	nop
 801186e:	370c      	adds	r7, #12
 8011870:	46bd      	mov	sp, r7
 8011872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011876:	4770      	bx	lr
 8011878:	e000e100 	.word	0xe000e100
 801187c:	e000ed00 	.word	0xe000ed00

08011880 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8011880:	b480      	push	{r7}
 8011882:	b089      	sub	sp, #36	; 0x24
 8011884:	af00      	add	r7, sp, #0
 8011886:	60f8      	str	r0, [r7, #12]
 8011888:	60b9      	str	r1, [r7, #8]
 801188a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801188c:	68fb      	ldr	r3, [r7, #12]
 801188e:	f003 0307 	and.w	r3, r3, #7
 8011892:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8011894:	69fb      	ldr	r3, [r7, #28]
 8011896:	f1c3 0307 	rsb	r3, r3, #7
 801189a:	2b04      	cmp	r3, #4
 801189c:	bf28      	it	cs
 801189e:	2304      	movcs	r3, #4
 80118a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80118a2:	69fb      	ldr	r3, [r7, #28]
 80118a4:	3304      	adds	r3, #4
 80118a6:	2b06      	cmp	r3, #6
 80118a8:	d902      	bls.n	80118b0 <NVIC_EncodePriority+0x30>
 80118aa:	69fb      	ldr	r3, [r7, #28]
 80118ac:	3b03      	subs	r3, #3
 80118ae:	e000      	b.n	80118b2 <NVIC_EncodePriority+0x32>
 80118b0:	2300      	movs	r3, #0
 80118b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80118b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80118b8:	69bb      	ldr	r3, [r7, #24]
 80118ba:	fa02 f303 	lsl.w	r3, r2, r3
 80118be:	43da      	mvns	r2, r3
 80118c0:	68bb      	ldr	r3, [r7, #8]
 80118c2:	401a      	ands	r2, r3
 80118c4:	697b      	ldr	r3, [r7, #20]
 80118c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80118c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80118cc:	697b      	ldr	r3, [r7, #20]
 80118ce:	fa01 f303 	lsl.w	r3, r1, r3
 80118d2:	43d9      	mvns	r1, r3
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80118d8:	4313      	orrs	r3, r2
         );
}
 80118da:	4618      	mov	r0, r3
 80118dc:	3724      	adds	r7, #36	; 0x24
 80118de:	46bd      	mov	sp, r7
 80118e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e4:	4770      	bx	lr
	...

080118e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80118e8:	b580      	push	{r7, lr}
 80118ea:	b082      	sub	sp, #8
 80118ec:	af00      	add	r7, sp, #0
 80118ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	3b01      	subs	r3, #1
 80118f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80118f8:	d301      	bcc.n	80118fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80118fa:	2301      	movs	r3, #1
 80118fc:	e00f      	b.n	801191e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80118fe:	4a0a      	ldr	r2, [pc, #40]	; (8011928 <SysTick_Config+0x40>)
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	3b01      	subs	r3, #1
 8011904:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8011906:	210f      	movs	r1, #15
 8011908:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801190c:	f7ff ff8e 	bl	801182c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8011910:	4b05      	ldr	r3, [pc, #20]	; (8011928 <SysTick_Config+0x40>)
 8011912:	2200      	movs	r2, #0
 8011914:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8011916:	4b04      	ldr	r3, [pc, #16]	; (8011928 <SysTick_Config+0x40>)
 8011918:	2207      	movs	r2, #7
 801191a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801191c:	2300      	movs	r3, #0
}
 801191e:	4618      	mov	r0, r3
 8011920:	3708      	adds	r7, #8
 8011922:	46bd      	mov	sp, r7
 8011924:	bd80      	pop	{r7, pc}
 8011926:	bf00      	nop
 8011928:	e000e010 	.word	0xe000e010

0801192c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801192c:	b580      	push	{r7, lr}
 801192e:	b082      	sub	sp, #8
 8011930:	af00      	add	r7, sp, #0
 8011932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8011934:	6878      	ldr	r0, [r7, #4]
 8011936:	f7ff ff05 	bl	8011744 <__NVIC_SetPriorityGrouping>
}
 801193a:	bf00      	nop
 801193c:	3708      	adds	r7, #8
 801193e:	46bd      	mov	sp, r7
 8011940:	bd80      	pop	{r7, pc}

08011942 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8011942:	b580      	push	{r7, lr}
 8011944:	b086      	sub	sp, #24
 8011946:	af00      	add	r7, sp, #0
 8011948:	4603      	mov	r3, r0
 801194a:	60b9      	str	r1, [r7, #8]
 801194c:	607a      	str	r2, [r7, #4]
 801194e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8011950:	f7ff ff1c 	bl	801178c <__NVIC_GetPriorityGrouping>
 8011954:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8011956:	687a      	ldr	r2, [r7, #4]
 8011958:	68b9      	ldr	r1, [r7, #8]
 801195a:	6978      	ldr	r0, [r7, #20]
 801195c:	f7ff ff90 	bl	8011880 <NVIC_EncodePriority>
 8011960:	4602      	mov	r2, r0
 8011962:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011966:	4611      	mov	r1, r2
 8011968:	4618      	mov	r0, r3
 801196a:	f7ff ff5f 	bl	801182c <__NVIC_SetPriority>
}
 801196e:	bf00      	nop
 8011970:	3718      	adds	r7, #24
 8011972:	46bd      	mov	sp, r7
 8011974:	bd80      	pop	{r7, pc}

08011976 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8011976:	b580      	push	{r7, lr}
 8011978:	b082      	sub	sp, #8
 801197a:	af00      	add	r7, sp, #0
 801197c:	4603      	mov	r3, r0
 801197e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8011980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011984:	4618      	mov	r0, r3
 8011986:	f7ff ff0f 	bl	80117a8 <__NVIC_EnableIRQ>
}
 801198a:	bf00      	nop
 801198c:	3708      	adds	r7, #8
 801198e:	46bd      	mov	sp, r7
 8011990:	bd80      	pop	{r7, pc}

08011992 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8011992:	b580      	push	{r7, lr}
 8011994:	b082      	sub	sp, #8
 8011996:	af00      	add	r7, sp, #0
 8011998:	4603      	mov	r3, r0
 801199a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 801199c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80119a0:	4618      	mov	r0, r3
 80119a2:	f7ff ff1f 	bl	80117e4 <__NVIC_DisableIRQ>
}
 80119a6:	bf00      	nop
 80119a8:	3708      	adds	r7, #8
 80119aa:	46bd      	mov	sp, r7
 80119ac:	bd80      	pop	{r7, pc}

080119ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80119ae:	b580      	push	{r7, lr}
 80119b0:	b082      	sub	sp, #8
 80119b2:	af00      	add	r7, sp, #0
 80119b4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80119b6:	6878      	ldr	r0, [r7, #4]
 80119b8:	f7ff ff96 	bl	80118e8 <SysTick_Config>
 80119bc:	4603      	mov	r3, r0
}
 80119be:	4618      	mov	r0, r3
 80119c0:	3708      	adds	r7, #8
 80119c2:	46bd      	mov	sp, r7
 80119c4:	bd80      	pop	{r7, pc}
	...

080119c8 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80119c8:	b580      	push	{r7, lr}
 80119ca:	b082      	sub	sp, #8
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d101      	bne.n	80119da <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80119d6:	2301      	movs	r3, #1
 80119d8:	e069      	b.n	8011aae <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80119e0:	b2db      	uxtb	r3, r3
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d102      	bne.n	80119ec <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80119e6:	6878      	ldr	r0, [r7, #4]
 80119e8:	f000 f87f 	bl	8011aea <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	2202      	movs	r2, #2
 80119f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	699b      	ldr	r3, [r3, #24]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d002      	beq.n	8011a02 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	2200      	movs	r2, #0
 8011a00:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	6819      	ldr	r1, [r3, #0]
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	681a      	ldr	r2, [r3, #0]
 8011a0c:	4b2a      	ldr	r3, [pc, #168]	; (8011ab8 <HAL_DCMI_Init+0xf0>)
 8011a0e:	400b      	ands	r3, r1
 8011a10:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	6819      	ldr	r1, [r3, #0]
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	685a      	ldr	r2, [r3, #4]
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	695b      	ldr	r3, [r3, #20]
 8011a20:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8011a26:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	691b      	ldr	r3, [r3, #16]
 8011a2c:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8011a32:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	699b      	ldr	r3, [r3, #24]
 8011a38:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8011a3e:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a44:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8011a4a:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a50:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8011a56:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	430a      	orrs	r2, r1
 8011a5e:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	685b      	ldr	r3, [r3, #4]
 8011a64:	2b10      	cmp	r3, #16
 8011a66:	d112      	bne.n	8011a8e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	7f1b      	ldrb	r3, [r3, #28]
 8011a6c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	7f5b      	ldrb	r3, [r3, #29]
 8011a72:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8011a74:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	7f9b      	ldrb	r3, [r3, #30]
 8011a7a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8011a7c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	7fdb      	ldrb	r3, [r3, #31]
 8011a84:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8011a8a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8011a8c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	68da      	ldr	r2, [r3, #12]
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	f042 021e 	orr.w	r2, r2, #30
 8011a9c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	2200      	movs	r2, #0
 8011aa2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	2201      	movs	r2, #1
 8011aa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8011aac:	2300      	movs	r3, #0
}
 8011aae:	4618      	mov	r0, r3
 8011ab0:	3708      	adds	r7, #8
 8011ab2:	46bd      	mov	sp, r7
 8011ab4:	bd80      	pop	{r7, pc}
 8011ab6:	bf00      	nop
 8011ab8:	ffe0f007 	.word	0xffe0f007

08011abc <HAL_DCMI_DeInit>:
  *                the configuration information for DCMI.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DCMI_DeInit(DCMI_HandleTypeDef *hdcmi)
{
 8011abc:	b580      	push	{r7, lr}
 8011abe:	b082      	sub	sp, #8
 8011ac0:	af00      	add	r7, sp, #0
 8011ac2:	6078      	str	r0, [r7, #4]
  }
  /* De-Initialize the low level hardware (MSP) */
  hdcmi->MspDeInitCallback(hdcmi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_DCMI_MspDeInit(hdcmi);
 8011ac4:	6878      	ldr	r0, [r7, #4]
 8011ac6:	f000 f81a 	bl	8011afe <HAL_DCMI_MspDeInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	2200      	movs	r2, #0
 8011ace:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State = HAL_DCMI_STATE_RESET;
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	2200      	movs	r2, #0
 8011ad4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	2200      	movs	r2, #0
 8011adc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8011ae0:	2300      	movs	r3, #0
}
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	3708      	adds	r7, #8
 8011ae6:	46bd      	mov	sp, r7
 8011ae8:	bd80      	pop	{r7, pc}

08011aea <HAL_DCMI_MspInit>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_MspInit(DCMI_HandleTypeDef *hdcmi)
{
 8011aea:	b480      	push	{r7}
 8011aec:	b083      	sub	sp, #12
 8011aee:	af00      	add	r7, sp, #0
 8011af0:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_MspInit could be implemented in the user file
   */
}
 8011af2:	bf00      	nop
 8011af4:	370c      	adds	r7, #12
 8011af6:	46bd      	mov	sp, r7
 8011af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011afc:	4770      	bx	lr

08011afe <HAL_DCMI_MspDeInit>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_MspDeInit(DCMI_HandleTypeDef *hdcmi)
{
 8011afe:	b480      	push	{r7}
 8011b00:	b083      	sub	sp, #12
 8011b02:	af00      	add	r7, sp, #0
 8011b04:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_MspDeInit could be implemented in the user file
   */
}
 8011b06:	bf00      	nop
 8011b08:	370c      	adds	r7, #12
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b10:	4770      	bx	lr
	...

08011b14 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8011b14:	b580      	push	{r7, lr}
 8011b16:	b08a      	sub	sp, #40	; 0x28
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	60f8      	str	r0, [r7, #12]
 8011b1c:	60b9      	str	r1, [r7, #8]
 8011b1e:	607a      	str	r2, [r7, #4]
 8011b20:	603b      	str	r3, [r7, #0]
  uint32_t tmp_length = Length;
 8011b22:	683b      	ldr	r3, [r7, #0]
 8011b24:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8011b26:	2300      	movs	r3, #0
 8011b28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011b32:	2b01      	cmp	r3, #1
 8011b34:	d101      	bne.n	8011b3a <HAL_DCMI_Start_DMA+0x26>
 8011b36:	2302      	movs	r3, #2
 8011b38:	e189      	b.n	8011e4e <HAL_DCMI_Start_DMA+0x33a>
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	2201      	movs	r2, #1
 8011b3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	2202      	movs	r2, #2
 8011b46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	681a      	ldr	r2, [r3, #0]
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011b58:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	681a      	ldr	r2, [r3, #0]
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	f022 0202 	bic.w	r2, r2, #2
 8011b68:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8011b6a:	68fb      	ldr	r3, [r7, #12]
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	6819      	ldr	r1, [r3, #0]
 8011b70:	68fb      	ldr	r3, [r7, #12]
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	68ba      	ldr	r2, [r7, #8]
 8011b76:	430a      	orrs	r2, r1
 8011b78:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011b7e:	4a99      	ldr	r2, [pc, #612]	; (8011de4 <HAL_DCMI_Start_DMA+0x2d0>)
 8011b80:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011b86:	4a98      	ldr	r2, [pc, #608]	; (8011de8 <HAL_DCMI_Start_DMA+0x2d4>)
 8011b88:	669a      	str	r2, [r3, #104]	; 0x68

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011b8e:	2200      	movs	r2, #0
 8011b90:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	2200      	movs	r2, #0
 8011b96:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	2200      	movs	r2, #0
 8011b9c:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	2200      	movs	r2, #0
 8011ba2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	2200      	movs	r2, #0
 8011ba8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Length should be converted to number of bytes */
  tmp_length = tmp_length * 4U;
 8011baa:	6a3b      	ldr	r3, [r7, #32]
 8011bac:	009b      	lsls	r3, r3, #2
 8011bae:	623b      	str	r3, [r7, #32]

  if (tmp_length <= 0xFFFFU)
 8011bb0:	6a3b      	ldr	r3, [r7, #32]
 8011bb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011bb6:	d24c      	bcs.n	8011c52 <HAL_DCMI_Start_DMA+0x13e>
  {
    /* Continuoues Mode */
    /* Enable the DMA Stream */
    if ((hdcmi->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d037      	beq.n	8011c36 <HAL_DCMI_Start_DMA+0x122>
    {
      if ((hdcmi->DMA_Handle->LinkedListQueue != 0U) && (hdcmi->DMA_Handle->LinkedListQueue->Head != 0U))
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011bca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d023      	beq.n	8011c18 <HAL_DCMI_Start_DMA+0x104>
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011bd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d01d      	beq.n	8011c18 <HAL_DCMI_Start_DMA+0x104>
      {
        /* Set Source , Destination , Length for DMA Xfer */

        /* Set DMA data size           */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = tmp_length;
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011be0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	6a3a      	ldr	r2, [r7, #32]
 8011be6:	609a      	str	r2, [r3, #8]
        /* Set DMA source address      */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
            (uint32_t)&hdcmi->Instance->DR;
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	f103 0228 	add.w	r2, r3, #40	; 0x28
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011bf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	60da      	str	r2, [r3, #12]
        /* Set DMA destination address */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011bfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	687a      	ldr	r2, [r7, #4]
 8011c04:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hdcmi->DMA_Handle);
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	f000 ff72 	bl	8012af4 <HAL_DMAEx_List_Start_IT>
 8011c10:	4603      	mov	r3, r0
 8011c12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011c16:	e0f9      	b.n	8011e0c <HAL_DCMI_Start_DMA+0x2f8>
      }
      else
      {
        /* Set Error Code */
        hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	2240      	movs	r2, #64	; 0x40
 8011c1c:	64da      	str	r2, [r3, #76]	; 0x4c
        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	2201      	movs	r2, #1
 8011c22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        /* Release Lock */
        __HAL_UNLOCK(hdcmi);
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	2200      	movs	r2, #0
 8011c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        /* Return function status */
        status = HAL_ERROR;
 8011c2e:	2301      	movs	r3, #1
 8011c30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011c34:	e0ea      	b.n	8011e0c <HAL_DCMI_Start_DMA+0x2f8>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, tmp_length);
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	3328      	adds	r3, #40	; 0x28
 8011c40:	4619      	mov	r1, r3
 8011c42:	6a3b      	ldr	r3, [r7, #32]
 8011c44:	687a      	ldr	r2, [r7, #4]
 8011c46:	f000 fa9c 	bl	8012182 <HAL_DMA_Start_IT>
 8011c4a:	4603      	mov	r3, r0
 8011c4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011c50:	e0dc      	b.n	8011e0c <HAL_DCMI_Start_DMA+0x2f8>
  {
    /* Double buffering is used through 2 Nodes
       Calculate the elementary size to be transferred by each node */

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	2201      	movs	r2, #1
 8011c56:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = tmp_length;
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	6a3a      	ldr	r2, [r7, #32]
 8011c5c:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	687a      	ldr	r2, [r7, #4]
 8011c62:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8011c64:	e009      	b.n	8011c7a <HAL_DCMI_Start_DMA+0x166>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011c6a:	085a      	lsrs	r2, r3, #1
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c74:	005a      	lsls	r2, r3, #1
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011c7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011c82:	d2f0      	bcs.n	8011c66 <HAL_DCMI_Start_DMA+0x152>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 1U);
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c88:	1e5a      	subs	r2, r3, #1
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	641a      	str	r2, [r3, #64]	; 0x40

    if ((hdcmi->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	f000 80a3 	beq.w	8011dec <HAL_DCMI_Start_DMA+0x2d8>
    {
      if ((hdcmi->DMA_Handle->LinkedListQueue != 0U) && (hdcmi->DMA_Handle->LinkedListQueue->Head != 0U))
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011caa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	f000 808a 	beq.w	8011dc6 <HAL_DCMI_Start_DMA+0x2b2>
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011cb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	f000 8083 	beq.w	8011dc6 <HAL_DCMI_Start_DMA+0x2b2>
      {
        /* Update first node */

        /* Set DMA Data size */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hdcmi->XferSize ;
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	68fa      	ldr	r2, [r7, #12]
 8011cca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8011ccc:	609a      	str	r2, [r3, #8]

        /* Set DMA Source address */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
            (uint32_t)&hdcmi->Instance->DR;
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	f103 0228 	add.w	r2, r3, #40	; 0x28
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	60da      	str	r2, [r3, #12]

        /* Set DMA Destination address */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011ce4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	687a      	ldr	r2, [r7, #4]
 8011cea:	611a      	str	r2, [r3, #16]

        /* Get CLLR offset */
        cllr_offset = (hdcmi->DMA_Handle->LinkedListQueue->Head->NodeInfo & NODE_CLLR_IDX) >> 8U;
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	6a1b      	ldr	r3, [r3, #32]
 8011cf6:	0a1b      	lsrs	r3, r3, #8
 8011cf8:	f003 0307 	and.w	r3, r3, #7
 8011cfc:	61fb      	str	r3, [r7, #28]

        /* Update second node */
        if (hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset] != 0U)
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011d02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	69fa      	ldr	r2, [r7, #28]
 8011d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d04b      	beq.n	8011da8 <HAL_DCMI_Start_DMA+0x294>
        {
          tmp1 = (uint32_t)hdcmi->DMA_Handle->LinkedListQueue->Head ;
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011d14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	61bb      	str	r3, [r7, #24]
          tmp2 = hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset];
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011d1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	69fa      	ldr	r2, [r7, #28]
 8011d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d28:	617b      	str	r3, [r7, #20]
          /* Update second node */

          /* Set DMA Data size */
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 8011d2a:	69bb      	ldr	r3, [r7, #24]
 8011d2c:	0c1b      	lsrs	r3, r3, #16
 8011d2e:	041b      	lsls	r3, r3, #16
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hdcmi->XferSize;
 8011d30:	6979      	ldr	r1, [r7, #20]
 8011d32:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8011d36:	400a      	ands	r2, r1
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 8011d38:	4313      	orrs	r3, r2
 8011d3a:	461a      	mov	r2, r3
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hdcmi->XferSize;
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d40:	6093      	str	r3, [r2, #8]

          /* Set DMA Source address */
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
                                   (uint32_t)&hdcmi->Instance->DR;
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	f103 0028 	add.w	r0, r3, #40	; 0x28
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 8011d4a:	69bb      	ldr	r3, [r7, #24]
 8011d4c:	0c1b      	lsrs	r3, r3, #16
 8011d4e:	041b      	lsls	r3, r3, #16
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
 8011d50:	6979      	ldr	r1, [r7, #20]
 8011d52:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8011d56:	400a      	ands	r2, r1
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 8011d58:	4313      	orrs	r3, r2
                                   (uint32_t)&hdcmi->Instance->DR;
 8011d5a:	4602      	mov	r2, r0
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
 8011d5c:	60da      	str	r2, [r3, #12]

          /* Set DMA Destination address */
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = \
                                   (uint32_t)pData + hdcmi->XferSize;
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 8011d62:	69bb      	ldr	r3, [r7, #24]
 8011d64:	0c1b      	lsrs	r3, r3, #16
 8011d66:	041b      	lsls	r3, r3, #16
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = \
 8011d68:	6978      	ldr	r0, [r7, #20]
 8011d6a:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8011d6e:	4002      	ands	r2, r0
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 8011d70:	4313      	orrs	r3, r2
 8011d72:	461a      	mov	r2, r3
                                   (uint32_t)pData + hdcmi->XferSize;
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	440b      	add	r3, r1
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = \
 8011d78:	6113      	str	r3, [r2, #16]

          if (HAL_DMAEx_List_Start_IT(hdcmi->DMA_Handle) != HAL_OK)
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011d7e:	4618      	mov	r0, r3
 8011d80:	f000 feb8 	bl	8012af4 <HAL_DMAEx_List_Start_IT>
 8011d84:	4603      	mov	r3, r0
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d03f      	beq.n	8011e0a <HAL_DCMI_Start_DMA+0x2f6>
          {
            /* Set Error Code */
            hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	2240      	movs	r2, #64	; 0x40
 8011d8e:	64da      	str	r2, [r3, #76]	; 0x4c
            /* Change DCMI state */
            hdcmi->State = HAL_DCMI_STATE_READY;
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	2201      	movs	r2, #1
 8011d94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            /* Release Lock */
            __HAL_UNLOCK(hdcmi);
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	2200      	movs	r2, #0
 8011d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            /* Return function status */
            status = HAL_ERROR;
 8011da0:	2301      	movs	r3, #1
 8011da2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset] != 0U)
 8011da6:	e030      	b.n	8011e0a <HAL_DCMI_Start_DMA+0x2f6>
          }
        }
        else
        {
          /* Set Error Code */
          hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	2240      	movs	r2, #64	; 0x40
 8011dac:	64da      	str	r2, [r3, #76]	; 0x4c
          /* Change DCMI state */
          hdcmi->State = HAL_DCMI_STATE_READY;
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	2201      	movs	r2, #1
 8011db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          /* Release Lock */
          __HAL_UNLOCK(hdcmi);
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	2200      	movs	r2, #0
 8011dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          /* Return function status */
          status = HAL_ERROR;
 8011dbe:	2301      	movs	r3, #1
 8011dc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset] != 0U)
 8011dc4:	e021      	b.n	8011e0a <HAL_DCMI_Start_DMA+0x2f6>
        }
      }
      else
      {
        /* Set Error Code */
        hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	2240      	movs	r2, #64	; 0x40
 8011dca:	64da      	str	r2, [r3, #76]	; 0x4c
        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	2201      	movs	r2, #1
 8011dd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        /* Release Lock */
        __HAL_UNLOCK(hdcmi);
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	2200      	movs	r2, #0
 8011dd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        /* Return function status */
        status = HAL_ERROR;
 8011ddc:	2301      	movs	r3, #1
 8011dde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011de2:	e013      	b.n	8011e0c <HAL_DCMI_Start_DMA+0x2f8>
 8011de4:	0801203d 	.word	0x0801203d
 8011de8:	08012149 	.word	0x08012149
      }
    }
    else
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	2240      	movs	r2, #64	; 0x40
 8011df0:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	2201      	movs	r2, #1
 8011df6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	2200      	movs	r2, #0
 8011dfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      status = HAL_ERROR;
 8011e02:	2301      	movs	r3, #1
 8011e04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011e08:	e000      	b.n	8011e0c <HAL_DCMI_Start_DMA+0x2f8>
        if (hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset] != 0U)
 8011e0a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8011e0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d10c      	bne.n	8011e2e <HAL_DCMI_Start_DMA+0x31a>
  {
    /* Enable Capture */
    hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	681a      	ldr	r2, [r3, #0]
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	f042 0201 	orr.w	r2, r2, #1
 8011e22:	601a      	str	r2, [r3, #0]

    /* Release Lock */
    __HAL_UNLOCK(hdcmi);
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	2200      	movs	r2, #0
 8011e28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8011e2c:	e00d      	b.n	8011e4a <HAL_DCMI_Start_DMA+0x336>
  }
  else
  {
    /* Set Error Code */
    hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	2240      	movs	r2, #64	; 0x40
 8011e32:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_READY;
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	2201      	movs	r2, #1
 8011e38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* Release Lock */
    __HAL_UNLOCK(hdcmi);
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	2200      	movs	r2, #0
 8011e40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    /* Return function status */
    status = HAL_ERROR;
 8011e44:	2301      	movs	r3, #1
 8011e46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Return function status */
  return status;
 8011e4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8011e4e:	4618      	mov	r0, r3
 8011e50:	3728      	adds	r7, #40	; 0x28
 8011e52:	46bd      	mov	sp, r7
 8011e54:	bd80      	pop	{r7, pc}
 8011e56:	bf00      	nop

08011e58 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 8011e58:	b580      	push	{r7, lr}
 8011e5a:	b084      	sub	sp, #16
 8011e5c:	af00      	add	r7, sp, #0
 8011e5e:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8011e60:	4b2b      	ldr	r3, [pc, #172]	; (8011f10 <HAL_DCMI_Stop+0xb8>)
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	4a2b      	ldr	r2, [pc, #172]	; (8011f14 <HAL_DCMI_Stop+0xbc>)
 8011e66:	fba2 2303 	umull	r2, r3, r2, r3
 8011e6a:	0a5b      	lsrs	r3, r3, #9
 8011e6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011e70:	fb02 f303 	mul.w	r3, r2, r3
 8011e74:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8011e76:	2300      	movs	r3, #0
 8011e78:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011e80:	2b01      	cmp	r3, #1
 8011e82:	d101      	bne.n	8011e88 <HAL_DCMI_Stop+0x30>
 8011e84:	2302      	movs	r3, #2
 8011e86:	e03f      	b.n	8011f08 <HAL_DCMI_Stop+0xb0>
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	2201      	movs	r2, #1
 8011e8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	2202      	movs	r2, #2
 8011e94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	681a      	ldr	r2, [r3, #0]
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	f022 0201 	bic.w	r2, r2, #1
 8011ea6:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	3b01      	subs	r3, #1
 8011eac:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d108      	bne.n	8011ec6 <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011eb8:	f043 0220 	orr.w	r2, r3, #32
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 8011ec0:	2303      	movs	r3, #3
 8011ec2:	72fb      	strb	r3, [r7, #11]
      break;
 8011ec4:	e006      	b.n	8011ed4 <HAL_DCMI_Stop+0x7c>
    }
  } while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	f003 0301 	and.w	r3, r3, #1
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d1e9      	bne.n	8011ea8 <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	681a      	ldr	r2, [r3, #0]
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8011ee2:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011ee8:	4618      	mov	r0, r3
 8011eea:	f000 f9aa 	bl	8012242 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	2201      	movs	r2, #1
 8011efa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	2200      	movs	r2, #0
 8011f02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 8011f06:	7afb      	ldrb	r3, [r7, #11]
}
 8011f08:	4618      	mov	r0, r3
 8011f0a:	3710      	adds	r7, #16
 8011f0c:	46bd      	mov	sp, r7
 8011f0e:	bd80      	pop	{r7, pc}
 8011f10:	20000200 	.word	0x20000200
 8011f14:	10624dd3 	.word	0x10624dd3

08011f18 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8011f18:	b580      	push	{r7, lr}
 8011f1a:	b084      	sub	sp, #16
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	691b      	ldr	r3, [r3, #16]
 8011f26:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	f003 0304 	and.w	r3, r3, #4
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d01e      	beq.n	8011f70 <HAL_DCMI_IRQHandler+0x58>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	2204      	movs	r2, #4
 8011f38:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011f3e:	f043 0202 	orr.w	r2, r3, #2
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	2204      	movs	r2, #4
 8011f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011f52:	4a39      	ldr	r2, [pc, #228]	; (8012038 <HAL_DCMI_IRQHandler+0x120>)
 8011f54:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	f000 f9ed 	bl	801233a <HAL_DMA_Abort_IT>
 8011f60:	4603      	mov	r3, r0
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d004      	beq.n	8011f70 <HAL_DCMI_IRQHandler+0x58>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	f000 f8ec 	bl	8012148 <DCMI_DMAError>
    }
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	f003 0302 	and.w	r3, r3, #2
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d01e      	beq.n	8011fb8 <HAL_DCMI_IRQHandler+0xa0>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	2202      	movs	r2, #2
 8011f80:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011f86:	f043 0201 	orr.w	r2, r3, #1
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	2204      	movs	r2, #4
 8011f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011f9a:	4a27      	ldr	r2, [pc, #156]	; (8012038 <HAL_DCMI_IRQHandler+0x120>)
 8011f9c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011fa2:	4618      	mov	r0, r3
 8011fa4:	f000 f9c9 	bl	801233a <HAL_DMA_Abort_IT>
 8011fa8:	4603      	mov	r3, r0
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d004      	beq.n	8011fb8 <HAL_DCMI_IRQHandler+0xa0>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011fb2:	4618      	mov	r0, r3
 8011fb4:	f000 f8c8 	bl	8012148 <DCMI_DMAError>
    }
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	f003 0310 	and.w	r3, r3, #16
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d006      	beq.n	8011fd0 <HAL_DCMI_IRQHandler+0xb8>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	2210      	movs	r2, #16
 8011fc8:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8011fca:	6878      	ldr	r0, [r7, #4]
 8011fcc:	f7f1 f848 	bl	8003060 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	f003 0308 	and.w	r3, r3, #8
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d006      	beq.n	8011fe8 <HAL_DCMI_IRQHandler+0xd0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	2208      	movs	r2, #8
 8011fe0:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8011fe2:	6878      	ldr	r0, [r7, #4]
 8011fe4:	f7f1 f852 	bl	800308c <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8011fe8:	68fb      	ldr	r3, [r7, #12]
 8011fea:	f003 0301 	and.w	r3, r3, #1
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d01d      	beq.n	801202e <HAL_DCMI_IRQHandler+0x116>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	f003 0302 	and.w	r3, r3, #2
 8011ffc:	2b02      	cmp	r3, #2
 8011ffe:	d107      	bne.n	8012010 <HAL_DCMI_IRQHandler+0xf8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	68da      	ldr	r2, [r3, #12]
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	f022 021e 	bic.w	r2, r2, #30
 801200e:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	68da      	ldr	r2, [r3, #12]
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	f022 0201 	bic.w	r2, r2, #1
 801201e:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	2201      	movs	r2, #1
 8012026:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8012028:	6878      	ldr	r0, [r7, #4]
 801202a:	f7f1 f824 	bl	8003076 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 801202e:	bf00      	nop
 8012030:	3710      	adds	r7, #16
 8012032:	46bd      	mov	sp, r7
 8012034:	bd80      	pop	{r7, pc}
 8012036:	bf00      	nop
 8012038:	08012149 	.word	0x08012149

0801203c <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 801203c:	b480      	push	{r7}
 801203e:	b08b      	sub	sp, #44	; 0x2c
 8012040:	af00      	add	r7, sp, #0
 8012042:	6078      	str	r0, [r7, #4]

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012048:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t transfernumber;
  uint32_t transfercount;
  uint32_t transfersize ;

  /* Update Nodes destinations */
  if (hdcmi->XferSize != 0U)
 801204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801204c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801204e:	2b00      	cmp	r3, #0
 8012050:	d061      	beq.n	8012116 <DCMI_DMAXferCplt+0xda>
  {
    pbuff          = hdcmi->pBuffPtr;
 8012052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012056:	623b      	str	r3, [r7, #32]
    transfernumber = hdcmi->XferTransferNumber;
 8012058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801205c:	61fb      	str	r3, [r7, #28]
    transfercount  = hdcmi->XferCount;
 801205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012062:	61bb      	str	r3, [r7, #24]
    transfersize   = hdcmi->XferSize;
 8012064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012068:	617b      	str	r3, [r7, #20]

    tmp1 = hdcmi->DMA_Handle->Instance->CLLR & DMA_CLLR_LA;
 801206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801206c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801206e:	681b      	ldr	r3, [r3, #0]
 8012070:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8012072:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8012076:	4013      	ands	r3, r2
 8012078:	613b      	str	r3, [r7, #16]
    tmp2 = hdcmi->DMA_Handle->Instance->CLBAR & DMA_CLBAR_LBA;
 801207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801207c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	0c1b      	lsrs	r3, r3, #16
 8012084:	041b      	lsls	r3, r3, #16
 8012086:	60fb      	str	r3, [r7, #12]
    pnode = (DMA_NodeTypeDef *)(uint32_t)(tmp1 | tmp2);
 8012088:	693a      	ldr	r2, [r7, #16]
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	4313      	orrs	r3, r2
 801208e:	60bb      	str	r3, [r7, #8]

    if (hdcmi->XferCount > 1U)
 8012090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012094:	2b01      	cmp	r3, #1
 8012096:	d910      	bls.n	80120ba <DCMI_DMAXferCplt+0x7e>
    {
      pnode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pbuff + ((transfernumber - transfercount + 2U) * transfersize);
 8012098:	69fa      	ldr	r2, [r7, #28]
 801209a:	69bb      	ldr	r3, [r7, #24]
 801209c:	1ad3      	subs	r3, r2, r3
 801209e:	3302      	adds	r3, #2
 80120a0:	697a      	ldr	r2, [r7, #20]
 80120a2:	fb03 f202 	mul.w	r2, r3, r2
 80120a6:	6a3b      	ldr	r3, [r7, #32]
 80120a8:	441a      	add	r2, r3
 80120aa:	68bb      	ldr	r3, [r7, #8]
 80120ac:	611a      	str	r2, [r3, #16]
      hdcmi->XferCount--;
 80120ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120b2:	1e5a      	subs	r2, r3, #1
 80120b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120b6:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
    }
  }
}
 80120b8:	e040      	b.n	801213c <DCMI_DMAXferCplt+0x100>
    else if (hdcmi->XferCount == 1U)
 80120ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120be:	2b01      	cmp	r3, #1
 80120c0:	d109      	bne.n	80120d6 <DCMI_DMAXferCplt+0x9a>
      pnode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = hdcmi->pBuffPtr;
 80120c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80120c6:	68bb      	ldr	r3, [r7, #8]
 80120c8:	611a      	str	r2, [r3, #16]
      hdcmi->XferCount--;
 80120ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120ce:	1e5a      	subs	r2, r3, #1
 80120d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120d2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80120d4:	e032      	b.n	801213c <DCMI_DMAXferCplt+0x100>
      pnode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = hdcmi->pBuffPtr + hdcmi->XferSize;
 80120d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80120da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80120de:	441a      	add	r2, r3
 80120e0:	68bb      	ldr	r3, [r7, #8]
 80120e2:	611a      	str	r2, [r3, #16]
      if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_CONTINUOUS)
 80120e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	f003 0302 	and.w	r3, r3, #2
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d104      	bne.n	80120fc <DCMI_DMAXferCplt+0xc0>
        hdcmi->XferCount = hdcmi->XferTransferNumber ;
 80120f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80120f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120f8:	639a      	str	r2, [r3, #56]	; 0x38
 80120fa:	e003      	b.n	8012104 <DCMI_DMAXferCplt+0xc8>
        hdcmi->State = HAL_DCMI_STATE_READY;
 80120fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120fe:	2201      	movs	r2, #1
 8012100:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8012104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	68da      	ldr	r2, [r3, #12]
 801210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801210c:	681b      	ldr	r3, [r3, #0]
 801210e:	f042 0201 	orr.w	r2, r2, #1
 8012112:	60da      	str	r2, [r3, #12]
}
 8012114:	e012      	b.n	801213c <DCMI_DMAXferCplt+0x100>
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8012116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	68da      	ldr	r2, [r3, #12]
 801211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	f042 0201 	orr.w	r2, r2, #1
 8012124:	60da      	str	r2, [r3, #12]
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8012126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	f003 0302 	and.w	r3, r3, #2
 8012130:	2b02      	cmp	r3, #2
 8012132:	d103      	bne.n	801213c <DCMI_DMAXferCplt+0x100>
      hdcmi->State = HAL_DCMI_STATE_READY;
 8012134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012136:	2201      	movs	r2, #1
 8012138:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 801213c:	bf00      	nop
 801213e:	372c      	adds	r7, #44	; 0x2c
 8012140:	46bd      	mov	sp, r7
 8012142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012146:	4770      	bx	lr

08012148 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8012148:	b580      	push	{r7, lr}
 801214a:	b084      	sub	sp, #16
 801214c:	af00      	add	r7, sp, #0
 801214e:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012154:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_ULE)
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801215a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801215c:	2b02      	cmp	r3, #2
 801215e:	d009      	beq.n	8012174 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	2201      	movs	r2, #1
 8012164:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801216c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8012174:	68f8      	ldr	r0, [r7, #12]
 8012176:	f7f0 ff94 	bl	80030a2 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 801217a:	bf00      	nop
 801217c:	3710      	adds	r7, #16
 801217e:	46bd      	mov	sp, r7
 8012180:	bd80      	pop	{r7, pc}

08012182 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8012182:	b580      	push	{r7, lr}
 8012184:	b084      	sub	sp, #16
 8012186:	af00      	add	r7, sp, #0
 8012188:	60f8      	str	r0, [r7, #12]
 801218a:	60b9      	str	r1, [r7, #8]
 801218c:	607a      	str	r2, [r7, #4]
 801218e:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	2b00      	cmp	r3, #0
 8012194:	d101      	bne.n	801219a <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8012196:	2301      	movs	r3, #1
 8012198:	e04f      	b.n	801223a <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80121a0:	2b01      	cmp	r3, #1
 80121a2:	d101      	bne.n	80121a8 <HAL_DMA_Start_IT+0x26>
 80121a4:	2302      	movs	r3, #2
 80121a6:	e048      	b.n	801223a <HAL_DMA_Start_IT+0xb8>
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	2201      	movs	r2, #1
 80121ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80121b6:	b2db      	uxtb	r3, r3
 80121b8:	2b01      	cmp	r3, #1
 80121ba:	d136      	bne.n	801222a <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	2202      	movs	r2, #2
 80121c0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	2200      	movs	r2, #0
 80121c8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 80121ca:	683b      	ldr	r3, [r7, #0]
 80121cc:	687a      	ldr	r2, [r7, #4]
 80121ce:	68b9      	ldr	r1, [r7, #8]
 80121d0:	68f8      	ldr	r0, [r7, #12]
 80121d2:	f000 fa57 	bl	8012684 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	695a      	ldr	r2, [r3, #20]
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 80121e4:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d007      	beq.n	80121fe <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	695a      	ldr	r2, [r3, #20]
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80121fc:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012202:	2b00      	cmp	r3, #0
 8012204:	d007      	beq.n	8012216 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	695a      	ldr	r2, [r3, #20]
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8012214:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	695a      	ldr	r2, [r3, #20]
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	f042 0201 	orr.w	r2, r2, #1
 8012224:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8012226:	2300      	movs	r3, #0
 8012228:	e007      	b.n	801223a <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 801222a:	68fb      	ldr	r3, [r7, #12]
 801222c:	2240      	movs	r2, #64	; 0x40
 801222e:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	2200      	movs	r2, #0
 8012234:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 8012238:	2301      	movs	r3, #1
}
 801223a:	4618      	mov	r0, r3
 801223c:	3710      	adds	r7, #16
 801223e:	46bd      	mov	sp, r7
 8012240:	bd80      	pop	{r7, pc}

08012242 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8012242:	b580      	push	{r7, lr}
 8012244:	b084      	sub	sp, #16
 8012246:	af00      	add	r7, sp, #0
 8012248:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 801224a:	f7ff fa4b 	bl	80116e4 <HAL_GetTick>
 801224e:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	2b00      	cmp	r3, #0
 8012254:	d101      	bne.n	801225a <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8012256:	2301      	movs	r3, #1
 8012258:	e06b      	b.n	8012332 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8012260:	b2db      	uxtb	r3, r3
 8012262:	2b02      	cmp	r3, #2
 8012264:	d008      	beq.n	8012278 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	2220      	movs	r2, #32
 801226a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	2200      	movs	r2, #0
 8012270:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8012274:	2301      	movs	r3, #1
 8012276:	e05c      	b.n	8012332 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	695a      	ldr	r2, [r3, #20]
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	f042 0204 	orr.w	r2, r2, #4
 8012286:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	2205      	movs	r2, #5
 801228c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8012290:	e020      	b.n	80122d4 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8012292:	f7ff fa27 	bl	80116e4 <HAL_GetTick>
 8012296:	4602      	mov	r2, r0
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	1ad3      	subs	r3, r2, r3
 801229c:	2b05      	cmp	r3, #5
 801229e:	d919      	bls.n	80122d4 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80122a4:	f043 0210 	orr.w	r2, r3, #16
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	2203      	movs	r2, #3
 80122b0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80122b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d003      	beq.n	80122c8 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80122c4:	2201      	movs	r2, #1
 80122c6:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	2200      	movs	r2, #0
 80122cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 80122d0:	2301      	movs	r3, #1
 80122d2:	e02e      	b.n	8012332 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	691b      	ldr	r3, [r3, #16]
 80122da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d0d7      	beq.n	8012292 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	695a      	ldr	r2, [r3, #20]
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	f042 0202 	orr.w	r2, r2, #2
 80122f0:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	2204      	movs	r2, #4
 80122f6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8012302:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	2201      	movs	r2, #1
 8012308:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012314:	2b00      	cmp	r3, #0
 8012316:	d007      	beq.n	8012328 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801231c:	2201      	movs	r2, #1
 801231e:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	2200      	movs	r2, #0
 8012326:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	2200      	movs	r2, #0
 801232c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8012330:	2300      	movs	r3, #0
}
 8012332:	4618      	mov	r0, r3
 8012334:	3710      	adds	r7, #16
 8012336:	46bd      	mov	sp, r7
 8012338:	bd80      	pop	{r7, pc}

0801233a <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 801233a:	b480      	push	{r7}
 801233c:	b083      	sub	sp, #12
 801233e:	af00      	add	r7, sp, #0
 8012340:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	2b00      	cmp	r3, #0
 8012346:	d101      	bne.n	801234c <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8012348:	2301      	movs	r3, #1
 801234a:	e019      	b.n	8012380 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8012352:	b2db      	uxtb	r3, r3
 8012354:	2b02      	cmp	r3, #2
 8012356:	d004      	beq.n	8012362 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	2220      	movs	r2, #32
 801235c:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 801235e:	2301      	movs	r3, #1
 8012360:	e00e      	b.n	8012380 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	2204      	movs	r2, #4
 8012366:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	695b      	ldr	r3, [r3, #20]
 8012370:	687a      	ldr	r2, [r7, #4]
 8012372:	6812      	ldr	r2, [r2, #0]
 8012374:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012378:	f043 0304 	orr.w	r3, r3, #4
 801237c:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 801237e:	2300      	movs	r3, #0
}
 8012380:	4618      	mov	r0, r3
 8012382:	370c      	adds	r7, #12
 8012384:	46bd      	mov	sp, r7
 8012386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801238a:	4770      	bx	lr

0801238c <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 801238c:	b580      	push	{r7, lr}
 801238e:	b086      	sub	sp, #24
 8012390:	af00      	add	r7, sp, #0
 8012392:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801239c:	f023 030f 	bic.w	r3, r3, #15
 80123a0:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80123aa:	3b50      	subs	r3, #80	; 0x50
 80123ac:	09db      	lsrs	r3, r3, #7
 80123ae:	f003 031f 	and.w	r3, r3, #31
 80123b2:	2201      	movs	r2, #1
 80123b4:	fa02 f303 	lsl.w	r3, r2, r3
 80123b8:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80123ba:	697b      	ldr	r3, [r7, #20]
 80123bc:	68db      	ldr	r3, [r3, #12]
 80123be:	693a      	ldr	r2, [r7, #16]
 80123c0:	4013      	ands	r3, r2
 80123c2:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	f000 8156 	beq.w	8012678 <HAL_DMA_IRQHandler+0x2ec>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	691b      	ldr	r3, [r3, #16]
 80123d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d011      	beq.n	80123fe <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	695b      	ldr	r3, [r3, #20]
 80123e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d00a      	beq.n	80123fe <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80123f0:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80123f6:	f043 0201 	orr.w	r2, r3, #1
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	691b      	ldr	r3, [r3, #16]
 8012404:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012408:	2b00      	cmp	r3, #0
 801240a:	d011      	beq.n	8012430 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	695b      	ldr	r3, [r3, #20]
 8012412:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012416:	2b00      	cmp	r3, #0
 8012418:	d00a      	beq.n	8012430 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012422:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012428:	f043 0202 	orr.w	r2, r3, #2
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	691b      	ldr	r3, [r3, #16]
 8012436:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801243a:	2b00      	cmp	r3, #0
 801243c:	d011      	beq.n	8012462 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	695b      	ldr	r3, [r3, #20]
 8012444:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8012448:	2b00      	cmp	r3, #0
 801244a:	d00a      	beq.n	8012462 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012454:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801245a:	f043 0204 	orr.w	r2, r3, #4
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	691b      	ldr	r3, [r3, #16]
 8012468:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801246c:	2b00      	cmp	r3, #0
 801246e:	d011      	beq.n	8012494 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	695b      	ldr	r3, [r3, #20]
 8012476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801247a:	2b00      	cmp	r3, #0
 801247c:	d00a      	beq.n	8012494 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8012486:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801248c:	f043 0208 	orr.w	r2, r3, #8
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	691b      	ldr	r3, [r3, #16]
 801249a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d013      	beq.n	80124ca <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	695b      	ldr	r3, [r3, #20]
 80124a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d00c      	beq.n	80124ca <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80124b8:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d003      	beq.n	80124ca <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80124c6:	6878      	ldr	r0, [r7, #4]
 80124c8:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	691b      	ldr	r3, [r3, #16]
 80124d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d05a      	beq.n	801258e <HAL_DMA_IRQHandler+0x202>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	695b      	ldr	r3, [r3, #20]
 80124de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d053      	beq.n	801258e <HAL_DMA_IRQHandler+0x202>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80124ee:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80124f6:	b2db      	uxtb	r3, r3
 80124f8:	2b04      	cmp	r3, #4
 80124fa:	d13c      	bne.n	8012576 <HAL_DMA_IRQHandler+0x1ea>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	695a      	ldr	r2, [r3, #20]
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801250a:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	695a      	ldr	r2, [r3, #20]
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	f042 0202 	orr.w	r2, r2, #2
 801251a:	615a      	str	r2, [r3, #20]

        /* Wait one clock cycle to ensure that the reset of DMA channel is done before checking the enable bit */
        __NOP();
 801251c:	bf00      	nop

        if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	695b      	ldr	r3, [r3, #20]
 8012524:	f003 0301 	and.w	r3, r3, #1
 8012528:	2b00      	cmp	r3, #0
 801252a:	d004      	beq.n	8012536 <HAL_DMA_IRQHandler+0x1aa>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_ERROR;
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	2203      	movs	r2, #3
 8012530:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8012534:	e003      	b.n	801253e <HAL_DMA_IRQHandler+0x1b2>
        }
        else
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	2201      	movs	r2, #1
 801253a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012546:	2b00      	cmp	r3, #0
 8012548:	d007      	beq.n	801255a <HAL_DMA_IRQHandler+0x1ce>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801254e:	2201      	movs	r2, #1
 8012550:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	2200      	movs	r2, #0
 8012558:	649a      	str	r2, [r3, #72]	; 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	2200      	movs	r2, #0
 801255e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012566:	2b00      	cmp	r3, #0
 8012568:	f000 8088 	beq.w	801267c <HAL_DMA_IRQHandler+0x2f0>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012570:	6878      	ldr	r0, [r7, #4]
 8012572:	4798      	blx	r3
        }

        return;
 8012574:	e082      	b.n	801267c <HAL_DMA_IRQHandler+0x2f0>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	2205      	movs	r2, #5
 801257a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012582:	2b00      	cmp	r3, #0
 8012584:	d003      	beq.n	801258e <HAL_DMA_IRQHandler+0x202>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801258a:	6878      	ldr	r0, [r7, #4]
 801258c:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	691b      	ldr	r3, [r3, #16]
 8012594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012598:	2b00      	cmp	r3, #0
 801259a:	d039      	beq.n	8012610 <HAL_DMA_IRQHandler+0x284>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	695b      	ldr	r3, [r3, #20]
 80125a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d032      	beq.n	8012610 <HAL_DMA_IRQHandler+0x284>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80125ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d012      	beq.n	80125dc <HAL_DMA_IRQHandler+0x250>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d116      	bne.n	80125ee <HAL_DMA_IRQHandler+0x262>
        {
          if (hdma->Instance->CBR1 == 0U)
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d111      	bne.n	80125ee <HAL_DMA_IRQHandler+0x262>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	2201      	movs	r2, #1
 80125ce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80125d6:	2201      	movs	r2, #1
 80125d8:	731a      	strb	r2, [r3, #12]
 80125da:	e008      	b.n	80125ee <HAL_DMA_IRQHandler+0x262>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d103      	bne.n	80125ee <HAL_DMA_IRQHandler+0x262>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	2201      	movs	r2, #1
 80125ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	681b      	ldr	r3, [r3, #0]
 80125f2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80125f6:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	2200      	movs	r2, #0
 80125fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012604:	2b00      	cmp	r3, #0
 8012606:	d003      	beq.n	8012610 <HAL_DMA_IRQHandler+0x284>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801260c:	6878      	ldr	r0, [r7, #4]
 801260e:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012614:	2b00      	cmp	r3, #0
 8012616:	d032      	beq.n	801267e <HAL_DMA_IRQHandler+0x2f2>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	695a      	ldr	r2, [r3, #20]
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	f042 0202 	orr.w	r2, r2, #2
 8012626:	615a      	str	r2, [r3, #20]

    /* Wait one clock cycle to ensure that the reset of DMA channel is done before checking the enable bit */
    __NOP();
 8012628:	bf00      	nop

    if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	695b      	ldr	r3, [r3, #20]
 8012630:	f003 0301 	and.w	r3, r3, #1
 8012634:	2b00      	cmp	r3, #0
 8012636:	d004      	beq.n	8012642 <HAL_DMA_IRQHandler+0x2b6>
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	2203      	movs	r2, #3
 801263c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8012640:	e003      	b.n	801264a <HAL_DMA_IRQHandler+0x2be>
    }
    else
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_READY;
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	2201      	movs	r2, #1
 8012646:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    }

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801264e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012652:	2b00      	cmp	r3, #0
 8012654:	d003      	beq.n	801265e <HAL_DMA_IRQHandler+0x2d2>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801265a:	2201      	movs	r2, #1
 801265c:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	2200      	movs	r2, #0
 8012662:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801266a:	2b00      	cmp	r3, #0
 801266c:	d007      	beq.n	801267e <HAL_DMA_IRQHandler+0x2f2>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012672:	6878      	ldr	r0, [r7, #4]
 8012674:	4798      	blx	r3
 8012676:	e002      	b.n	801267e <HAL_DMA_IRQHandler+0x2f2>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8012678:	bf00      	nop
 801267a:	e000      	b.n	801267e <HAL_DMA_IRQHandler+0x2f2>
        return;
 801267c:	bf00      	nop
    }
  }
}
 801267e:	3718      	adds	r7, #24
 8012680:	46bd      	mov	sp, r7
 8012682:	bd80      	pop	{r7, pc}

08012684 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8012684:	b480      	push	{r7}
 8012686:	b085      	sub	sp, #20
 8012688:	af00      	add	r7, sp, #0
 801268a:	60f8      	str	r0, [r7, #12]
 801268c:	60b9      	str	r1, [r7, #8]
 801268e:	607a      	str	r2, [r7, #4]
 8012690:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012698:	0c1b      	lsrs	r3, r3, #16
 801269a:	041b      	lsls	r3, r3, #16
 801269c:	683a      	ldr	r2, [r7, #0]
 801269e:	b291      	uxth	r1, r2
 80126a0:	68fa      	ldr	r2, [r7, #12]
 80126a2:	6812      	ldr	r2, [r2, #0]
 80126a4:	430b      	orrs	r3, r1
 80126a6:	6493      	str	r3, [r2, #72]	; 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80126b0:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	681b      	ldr	r3, [r3, #0]
 80126b6:	68ba      	ldr	r2, [r7, #8]
 80126b8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	687a      	ldr	r2, [r7, #4]
 80126c0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80126c2:	bf00      	nop
 80126c4:	3714      	adds	r7, #20
 80126c6:	46bd      	mov	sp, r7
 80126c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126cc:	4770      	bx	lr
	...

080126d0 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 80126d0:	b580      	push	{r7, lr}
 80126d2:	b084      	sub	sp, #16
 80126d4:	af00      	add	r7, sp, #0
 80126d6:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80126d8:	f7ff f804 	bl	80116e4 <HAL_GetTick>
 80126dc:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d101      	bne.n	80126e8 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 80126e4:	2301      	movs	r3, #1
 80126e6:	e0db      	b.n	80128a0 <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	4a6e      	ldr	r2, [pc, #440]	; (80128a8 <HAL_DMAEx_List_Init+0x1d8>)
 80126ee:	4293      	cmp	r3, r2
 80126f0:	f000 809f 	beq.w	8012832 <HAL_DMAEx_List_Init+0x162>
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	4a6c      	ldr	r2, [pc, #432]	; (80128ac <HAL_DMAEx_List_Init+0x1dc>)
 80126fa:	4293      	cmp	r3, r2
 80126fc:	f000 8099 	beq.w	8012832 <HAL_DMAEx_List_Init+0x162>
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	4a6a      	ldr	r2, [pc, #424]	; (80128b0 <HAL_DMAEx_List_Init+0x1e0>)
 8012706:	4293      	cmp	r3, r2
 8012708:	f000 8093 	beq.w	8012832 <HAL_DMAEx_List_Init+0x162>
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	4a68      	ldr	r2, [pc, #416]	; (80128b4 <HAL_DMAEx_List_Init+0x1e4>)
 8012712:	4293      	cmp	r3, r2
 8012714:	f000 808d 	beq.w	8012832 <HAL_DMAEx_List_Init+0x162>
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	4a66      	ldr	r2, [pc, #408]	; (80128b8 <HAL_DMAEx_List_Init+0x1e8>)
 801271e:	4293      	cmp	r3, r2
 8012720:	f000 8087 	beq.w	8012832 <HAL_DMAEx_List_Init+0x162>
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	681b      	ldr	r3, [r3, #0]
 8012728:	4a64      	ldr	r2, [pc, #400]	; (80128bc <HAL_DMAEx_List_Init+0x1ec>)
 801272a:	4293      	cmp	r3, r2
 801272c:	f000 8081 	beq.w	8012832 <HAL_DMAEx_List_Init+0x162>
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	4a62      	ldr	r2, [pc, #392]	; (80128c0 <HAL_DMAEx_List_Init+0x1f0>)
 8012736:	4293      	cmp	r3, r2
 8012738:	d07b      	beq.n	8012832 <HAL_DMAEx_List_Init+0x162>
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	681b      	ldr	r3, [r3, #0]
 801273e:	4a61      	ldr	r2, [pc, #388]	; (80128c4 <HAL_DMAEx_List_Init+0x1f4>)
 8012740:	4293      	cmp	r3, r2
 8012742:	d076      	beq.n	8012832 <HAL_DMAEx_List_Init+0x162>
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	681b      	ldr	r3, [r3, #0]
 8012748:	4a5f      	ldr	r2, [pc, #380]	; (80128c8 <HAL_DMAEx_List_Init+0x1f8>)
 801274a:	4293      	cmp	r3, r2
 801274c:	d071      	beq.n	8012832 <HAL_DMAEx_List_Init+0x162>
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	4a5e      	ldr	r2, [pc, #376]	; (80128cc <HAL_DMAEx_List_Init+0x1fc>)
 8012754:	4293      	cmp	r3, r2
 8012756:	d06c      	beq.n	8012832 <HAL_DMAEx_List_Init+0x162>
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	681b      	ldr	r3, [r3, #0]
 801275c:	4a5c      	ldr	r2, [pc, #368]	; (80128d0 <HAL_DMAEx_List_Init+0x200>)
 801275e:	4293      	cmp	r3, r2
 8012760:	d067      	beq.n	8012832 <HAL_DMAEx_List_Init+0x162>
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	4a5b      	ldr	r2, [pc, #364]	; (80128d4 <HAL_DMAEx_List_Init+0x204>)
 8012768:	4293      	cmp	r3, r2
 801276a:	d062      	beq.n	8012832 <HAL_DMAEx_List_Init+0x162>
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	4a59      	ldr	r2, [pc, #356]	; (80128d8 <HAL_DMAEx_List_Init+0x208>)
 8012772:	4293      	cmp	r3, r2
 8012774:	d05d      	beq.n	8012832 <HAL_DMAEx_List_Init+0x162>
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	4a58      	ldr	r2, [pc, #352]	; (80128dc <HAL_DMAEx_List_Init+0x20c>)
 801277c:	4293      	cmp	r3, r2
 801277e:	d058      	beq.n	8012832 <HAL_DMAEx_List_Init+0x162>
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	4a56      	ldr	r2, [pc, #344]	; (80128e0 <HAL_DMAEx_List_Init+0x210>)
 8012786:	4293      	cmp	r3, r2
 8012788:	d053      	beq.n	8012832 <HAL_DMAEx_List_Init+0x162>
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	4a55      	ldr	r2, [pc, #340]	; (80128e4 <HAL_DMAEx_List_Init+0x214>)
 8012790:	4293      	cmp	r3, r2
 8012792:	d04e      	beq.n	8012832 <HAL_DMAEx_List_Init+0x162>
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	4a53      	ldr	r2, [pc, #332]	; (80128e8 <HAL_DMAEx_List_Init+0x218>)
 801279a:	4293      	cmp	r3, r2
 801279c:	d049      	beq.n	8012832 <HAL_DMAEx_List_Init+0x162>
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	4a52      	ldr	r2, [pc, #328]	; (80128ec <HAL_DMAEx_List_Init+0x21c>)
 80127a4:	4293      	cmp	r3, r2
 80127a6:	d044      	beq.n	8012832 <HAL_DMAEx_List_Init+0x162>
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	4a50      	ldr	r2, [pc, #320]	; (80128f0 <HAL_DMAEx_List_Init+0x220>)
 80127ae:	4293      	cmp	r3, r2
 80127b0:	d03f      	beq.n	8012832 <HAL_DMAEx_List_Init+0x162>
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	4a4f      	ldr	r2, [pc, #316]	; (80128f4 <HAL_DMAEx_List_Init+0x224>)
 80127b8:	4293      	cmp	r3, r2
 80127ba:	d03a      	beq.n	8012832 <HAL_DMAEx_List_Init+0x162>
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	4a4d      	ldr	r2, [pc, #308]	; (80128f8 <HAL_DMAEx_List_Init+0x228>)
 80127c2:	4293      	cmp	r3, r2
 80127c4:	d035      	beq.n	8012832 <HAL_DMAEx_List_Init+0x162>
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	4a4c      	ldr	r2, [pc, #304]	; (80128fc <HAL_DMAEx_List_Init+0x22c>)
 80127cc:	4293      	cmp	r3, r2
 80127ce:	d030      	beq.n	8012832 <HAL_DMAEx_List_Init+0x162>
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	4a4a      	ldr	r2, [pc, #296]	; (8012900 <HAL_DMAEx_List_Init+0x230>)
 80127d6:	4293      	cmp	r3, r2
 80127d8:	d02b      	beq.n	8012832 <HAL_DMAEx_List_Init+0x162>
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	4a49      	ldr	r2, [pc, #292]	; (8012904 <HAL_DMAEx_List_Init+0x234>)
 80127e0:	4293      	cmp	r3, r2
 80127e2:	d026      	beq.n	8012832 <HAL_DMAEx_List_Init+0x162>
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	4a47      	ldr	r2, [pc, #284]	; (8012908 <HAL_DMAEx_List_Init+0x238>)
 80127ea:	4293      	cmp	r3, r2
 80127ec:	d021      	beq.n	8012832 <HAL_DMAEx_List_Init+0x162>
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	4a46      	ldr	r2, [pc, #280]	; (801290c <HAL_DMAEx_List_Init+0x23c>)
 80127f4:	4293      	cmp	r3, r2
 80127f6:	d01c      	beq.n	8012832 <HAL_DMAEx_List_Init+0x162>
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	4a44      	ldr	r2, [pc, #272]	; (8012910 <HAL_DMAEx_List_Init+0x240>)
 80127fe:	4293      	cmp	r3, r2
 8012800:	d017      	beq.n	8012832 <HAL_DMAEx_List_Init+0x162>
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	4a43      	ldr	r2, [pc, #268]	; (8012914 <HAL_DMAEx_List_Init+0x244>)
 8012808:	4293      	cmp	r3, r2
 801280a:	d012      	beq.n	8012832 <HAL_DMAEx_List_Init+0x162>
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	4a41      	ldr	r2, [pc, #260]	; (8012918 <HAL_DMAEx_List_Init+0x248>)
 8012812:	4293      	cmp	r3, r2
 8012814:	d00d      	beq.n	8012832 <HAL_DMAEx_List_Init+0x162>
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	4a40      	ldr	r2, [pc, #256]	; (801291c <HAL_DMAEx_List_Init+0x24c>)
 801281c:	4293      	cmp	r3, r2
 801281e:	d008      	beq.n	8012832 <HAL_DMAEx_List_Init+0x162>
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	4a3e      	ldr	r2, [pc, #248]	; (8012920 <HAL_DMAEx_List_Init+0x250>)
 8012826:	4293      	cmp	r3, r2
 8012828:	d003      	beq.n	8012832 <HAL_DMAEx_List_Init+0x162>
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	4a3d      	ldr	r2, [pc, #244]	; (8012924 <HAL_DMAEx_List_Init+0x254>)
 8012830:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	2200      	movs	r2, #0
 8012836:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	2202      	movs	r2, #2
 801283e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	695a      	ldr	r2, [r3, #20]
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	f042 0206 	orr.w	r2, r2, #6
 8012850:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8012852:	e00f      	b.n	8012874 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8012854:	f7fe ff46 	bl	80116e4 <HAL_GetTick>
 8012858:	4602      	mov	r2, r0
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	1ad3      	subs	r3, r2, r3
 801285e:	2b05      	cmp	r3, #5
 8012860:	d908      	bls.n	8012874 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	2210      	movs	r2, #16
 8012866:	659a      	str	r2, [r3, #88]	; 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	2203      	movs	r2, #3
 801286c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 8012870:	2301      	movs	r3, #1
 8012872:	e015      	b.n	80128a0 <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	695b      	ldr	r3, [r3, #20]
 801287a:	f003 0301 	and.w	r3, r3, #1
 801287e:	2b00      	cmp	r3, #0
 8012880:	d1e8      	bne.n	8012854 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8012882:	6878      	ldr	r0, [r7, #4]
 8012884:	f000 fc62 	bl	801314c <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	2200      	movs	r2, #0
 8012894:	659a      	str	r2, [r3, #88]	; 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	2201      	movs	r2, #1
 801289a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 801289e:	2300      	movs	r3, #0
}
 80128a0:	4618      	mov	r0, r3
 80128a2:	3710      	adds	r7, #16
 80128a4:	46bd      	mov	sp, r7
 80128a6:	bd80      	pop	{r7, pc}
 80128a8:	40020050 	.word	0x40020050
 80128ac:	50020050 	.word	0x50020050
 80128b0:	400200d0 	.word	0x400200d0
 80128b4:	500200d0 	.word	0x500200d0
 80128b8:	40020150 	.word	0x40020150
 80128bc:	50020150 	.word	0x50020150
 80128c0:	400201d0 	.word	0x400201d0
 80128c4:	500201d0 	.word	0x500201d0
 80128c8:	40020250 	.word	0x40020250
 80128cc:	50020250 	.word	0x50020250
 80128d0:	400202d0 	.word	0x400202d0
 80128d4:	500202d0 	.word	0x500202d0
 80128d8:	40020350 	.word	0x40020350
 80128dc:	50020350 	.word	0x50020350
 80128e0:	400203d0 	.word	0x400203d0
 80128e4:	500203d0 	.word	0x500203d0
 80128e8:	40020450 	.word	0x40020450
 80128ec:	50020450 	.word	0x50020450
 80128f0:	400204d0 	.word	0x400204d0
 80128f4:	500204d0 	.word	0x500204d0
 80128f8:	40020550 	.word	0x40020550
 80128fc:	50020550 	.word	0x50020550
 8012900:	400205d0 	.word	0x400205d0
 8012904:	500205d0 	.word	0x500205d0
 8012908:	40020650 	.word	0x40020650
 801290c:	50020650 	.word	0x50020650
 8012910:	400206d0 	.word	0x400206d0
 8012914:	500206d0 	.word	0x500206d0
 8012918:	40020750 	.word	0x40020750
 801291c:	50020750 	.word	0x50020750
 8012920:	400207d0 	.word	0x400207d0
 8012924:	500207d0 	.word	0x500207d0

08012928 <HAL_DMAEx_List_DeInit>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_DeInit(DMA_HandleTypeDef *const hdma)
{
 8012928:	b580      	push	{r7, lr}
 801292a:	b084      	sub	sp, #16
 801292c:	af00      	add	r7, sp, #0
 801292e:	6078      	str	r0, [r7, #4]
  /* Get DMA instance */
  DMA_TypeDef *p_dma_instance;


  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8012930:	f7fe fed8 	bl	80116e4 <HAL_GetTick>
 8012934:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	2b00      	cmp	r3, #0
 801293a:	d101      	bne.n	8012940 <HAL_DMAEx_List_DeInit+0x18>
  {
    return HAL_ERROR;
 801293c:	2301      	movs	r3, #1
 801293e:	e0c5      	b.n	8012acc <HAL_DMAEx_List_DeInit+0x1a4>
  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));


  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8012948:	f023 030f 	bic.w	r3, r3, #15
 801294c:	60bb      	str	r3, [r7, #8]


  /* Disable the selected DMA Channel */
  __HAL_DMA_DISABLE(hdma);
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	695a      	ldr	r2, [r3, #20]
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	f042 0206 	orr.w	r2, r2, #6
 801295c:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 801295e:	e00f      	b.n	8012980 <HAL_DMAEx_List_DeInit+0x58>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8012960:	f7fe fec0 	bl	80116e4 <HAL_GetTick>
 8012964:	4602      	mov	r2, r0
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	1ad3      	subs	r3, r2, r3
 801296a:	2b05      	cmp	r3, #5
 801296c:	d908      	bls.n	8012980 <HAL_DMAEx_List_DeInit+0x58>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	2210      	movs	r2, #16
 8012972:	659a      	str	r2, [r3, #88]	; 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	2203      	movs	r2, #3
 8012978:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 801297c:	2301      	movs	r3, #1
 801297e:	e0a5      	b.n	8012acc <HAL_DMAEx_List_DeInit+0x1a4>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	695b      	ldr	r3, [r3, #20]
 8012986:	f003 0301 	and.w	r3, r3, #1
 801298a:	2b00      	cmp	r3, #0
 801298c:	d1e8      	bne.n	8012960 <HAL_DMAEx_List_DeInit+0x38>
    }
  }

  /* Reset DMA Channel registers */
  hdma->Instance->CCR   = 0U;
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	2200      	movs	r2, #0
 8012994:	615a      	str	r2, [r3, #20]
  hdma->Instance->CLBAR = 0U;
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	2200      	movs	r2, #0
 801299c:	601a      	str	r2, [r3, #0]
  hdma->Instance->CTR1  = 0U;
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	2200      	movs	r2, #0
 80129a4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->Instance->CTR2  = 0U;
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	2200      	movs	r2, #0
 80129ac:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->Instance->CBR1  = 0U;
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	2200      	movs	r2, #0
 80129b4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->Instance->CSAR  = 0U;
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	2200      	movs	r2, #0
 80129bc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->Instance->CDAR  = 0U;
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	2200      	movs	r2, #0
 80129c4:	651a      	str	r2, [r3, #80]	; 0x50
  hdma->Instance->CLLR  = 0U;
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	2200      	movs	r2, #0
 80129cc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Reset 2D Addressing registers */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	4a40      	ldr	r2, [pc, #256]	; (8012ad4 <HAL_DMAEx_List_DeInit+0x1ac>)
 80129d4:	4293      	cmp	r3, r2
 80129d6:	d022      	beq.n	8012a1e <HAL_DMAEx_List_DeInit+0xf6>
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	4a3e      	ldr	r2, [pc, #248]	; (8012ad8 <HAL_DMAEx_List_DeInit+0x1b0>)
 80129de:	4293      	cmp	r3, r2
 80129e0:	d01d      	beq.n	8012a1e <HAL_DMAEx_List_DeInit+0xf6>
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	4a3d      	ldr	r2, [pc, #244]	; (8012adc <HAL_DMAEx_List_DeInit+0x1b4>)
 80129e8:	4293      	cmp	r3, r2
 80129ea:	d018      	beq.n	8012a1e <HAL_DMAEx_List_DeInit+0xf6>
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	4a3b      	ldr	r2, [pc, #236]	; (8012ae0 <HAL_DMAEx_List_DeInit+0x1b8>)
 80129f2:	4293      	cmp	r3, r2
 80129f4:	d013      	beq.n	8012a1e <HAL_DMAEx_List_DeInit+0xf6>
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	4a3a      	ldr	r2, [pc, #232]	; (8012ae4 <HAL_DMAEx_List_DeInit+0x1bc>)
 80129fc:	4293      	cmp	r3, r2
 80129fe:	d00e      	beq.n	8012a1e <HAL_DMAEx_List_DeInit+0xf6>
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	4a38      	ldr	r2, [pc, #224]	; (8012ae8 <HAL_DMAEx_List_DeInit+0x1c0>)
 8012a06:	4293      	cmp	r3, r2
 8012a08:	d009      	beq.n	8012a1e <HAL_DMAEx_List_DeInit+0xf6>
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	4a37      	ldr	r2, [pc, #220]	; (8012aec <HAL_DMAEx_List_DeInit+0x1c4>)
 8012a10:	4293      	cmp	r3, r2
 8012a12:	d004      	beq.n	8012a1e <HAL_DMAEx_List_DeInit+0xf6>
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	4a35      	ldr	r2, [pc, #212]	; (8012af0 <HAL_DMAEx_List_DeInit+0x1c8>)
 8012a1a:	4293      	cmp	r3, r2
 8012a1c:	d101      	bne.n	8012a22 <HAL_DMAEx_List_DeInit+0xfa>
 8012a1e:	2301      	movs	r3, #1
 8012a20:	e000      	b.n	8012a24 <HAL_DMAEx_List_DeInit+0xfc>
 8012a22:	2300      	movs	r3, #0
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d007      	beq.n	8012a38 <HAL_DMAEx_List_DeInit+0x110>
  {
    hdma->Instance->CTR3 = 0U;
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	2200      	movs	r2, #0
 8012a2e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->Instance->CBR2 = 0U;
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	2200      	movs	r2, #0
 8012a36:	659a      	str	r2, [r3, #88]	; 0x58
  }


  /* Clear privilege attribute */
  CLEAR_BIT(p_dma_instance->PRIVCFGR, (1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU)));
 8012a38:	68bb      	ldr	r3, [r7, #8]
 8012a3a:	685a      	ldr	r2, [r3, #4]
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012a44:	3b50      	subs	r3, #80	; 0x50
 8012a46:	09db      	lsrs	r3, r3, #7
 8012a48:	f003 031f 	and.w	r3, r3, #31
 8012a4c:	2101      	movs	r1, #1
 8012a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8012a52:	43db      	mvns	r3, r3
 8012a54:	401a      	ands	r2, r3
 8012a56:	68bb      	ldr	r3, [r7, #8]
 8012a58:	605a      	str	r2, [r3, #4]
  /* Clear secure attribute */
  CLEAR_BIT(p_dma_instance->SECCFGR, (1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU)));
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8012a62:	60da      	str	r2, [r3, #12]
                              DMA_FLAG_TO));

  /* Clean all callbacks */
  hdma->XferCpltCallback     = NULL;
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	2200      	movs	r2, #0
 8012a68:	661a      	str	r2, [r3, #96]	; 0x60
  hdma->XferHalfCpltCallback = NULL;
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	2200      	movs	r2, #0
 8012a6e:	665a      	str	r2, [r3, #100]	; 0x64
  hdma->XferErrorCallback    = NULL;
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	2200      	movs	r2, #0
 8012a74:	669a      	str	r2, [r3, #104]	; 0x68
  hdma->XferAbortCallback    = NULL;
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	2200      	movs	r2, #0
 8012a7a:	66da      	str	r2, [r3, #108]	; 0x6c
  hdma->XferSuspendCallback  = NULL;
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	2200      	movs	r2, #0
 8012a80:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check the linked-list queue */
  if (hdma->LinkedListQueue != NULL)
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d00a      	beq.n	8012aa0 <HAL_DMAEx_List_DeInit+0x178>
  {
    /* Update the queue state and error code */
    hdma->LinkedListQueue->State     = HAL_DMA_QUEUE_STATE_READY;
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a8e:	2201      	movs	r2, #1
 8012a90:	731a      	strb	r2, [r3, #12]
    hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a96:	2200      	movs	r2, #0
 8012a98:	611a      	str	r2, [r3, #16]

    /* Clean DMA queue */
    hdma->LinkedListQueue = NULL;
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	2200      	movs	r2, #0
 8012a9e:	675a      	str	r2, [r3, #116]	; 0x74
  }

  /* Clean DMA parent */
  if (hdma->Parent != NULL)
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d002      	beq.n	8012aae <HAL_DMAEx_List_DeInit+0x186>
  {
    hdma->Parent = NULL;
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	2200      	movs	r2, #0
 8012aac:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Update DMA channel operation mode */
  hdma->Mode = DMA_NORMAL;
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	2200      	movs	r2, #0
 8012ab2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	2200      	movs	r2, #0
 8012ab8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_RESET;
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	2200      	movs	r2, #0
 8012abe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	2200      	movs	r2, #0
 8012ac6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8012aca:	2300      	movs	r3, #0
}
 8012acc:	4618      	mov	r0, r3
 8012ace:	3710      	adds	r7, #16
 8012ad0:	46bd      	mov	sp, r7
 8012ad2:	bd80      	pop	{r7, pc}
 8012ad4:	40020650 	.word	0x40020650
 8012ad8:	50020650 	.word	0x50020650
 8012adc:	400206d0 	.word	0x400206d0
 8012ae0:	500206d0 	.word	0x500206d0
 8012ae4:	40020750 	.word	0x40020750
 8012ae8:	50020750 	.word	0x50020750
 8012aec:	400207d0 	.word	0x400207d0
 8012af0:	500207d0 	.word	0x500207d0

08012af4 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8012af4:	b580      	push	{r7, lr}
 8012af6:	b086      	sub	sp, #24
 8012af8:	af00      	add	r7, sp, #0
 8012afa:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d003      	beq.n	8012b0a <HAL_DMAEx_List_Start_IT+0x16>
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d101      	bne.n	8012b0e <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8012b0a:	2301      	movs	r3, #1
 8012b0c:	e082      	b.n	8012c14 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8012b14:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	695b      	ldr	r3, [r3, #20]
 8012b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012b20:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8012b22:	7dfb      	ldrb	r3, [r7, #23]
 8012b24:	2b01      	cmp	r3, #1
 8012b26:	d005      	beq.n	8012b34 <HAL_DMAEx_List_Start_IT+0x40>
 8012b28:	7dfb      	ldrb	r3, [r7, #23]
 8012b2a:	2b02      	cmp	r3, #2
 8012b2c:	d16a      	bne.n	8012c04 <HAL_DMAEx_List_Start_IT+0x110>
 8012b2e:	693b      	ldr	r3, [r7, #16]
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d067      	beq.n	8012c04 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8012b3a:	b2db      	uxtb	r3, r3
 8012b3c:	2b01      	cmp	r3, #1
 8012b3e:	d157      	bne.n	8012bf0 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8012b46:	2b01      	cmp	r3, #1
 8012b48:	d101      	bne.n	8012b4e <HAL_DMAEx_List_Start_IT+0x5a>
 8012b4a:	2302      	movs	r3, #2
 8012b4c:	e062      	b.n	8012c14 <HAL_DMAEx_List_Start_IT+0x120>
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	2201      	movs	r2, #1
 8012b52:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	2202      	movs	r2, #2
 8012b5a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012b62:	2202      	movs	r2, #2
 8012b64:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	2200      	movs	r2, #0
 8012b6a:	659a      	str	r2, [r3, #88]	; 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012b70:	2200      	movs	r2, #0
 8012b72:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	695a      	ldr	r2, [r3, #20]
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 8012b82:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d007      	beq.n	8012b9c <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	695a      	ldr	r2, [r3, #20]
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012b9a:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d007      	beq.n	8012bb4 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	695a      	ldr	r2, [r3, #20]
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	681b      	ldr	r3, [r3, #0]
 8012bae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8012bb2:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	f107 010c 	add.w	r1, r7, #12
 8012bbe:	2200      	movs	r2, #0
 8012bc0:	4618      	mov	r0, r3
 8012bc2:	f000 fdd9 	bl	8013778 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012bca:	681b      	ldr	r3, [r3, #0]
 8012bcc:	4619      	mov	r1, r3
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	681a      	ldr	r2, [r3, #0]
 8012bd2:	0c0b      	lsrs	r3, r1, #16
 8012bd4:	041b      	lsls	r3, r3, #16
 8012bd6:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	461a      	mov	r2, r3
 8012be0:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8012be4:	4013      	ands	r3, r2
 8012be6:	68f9      	ldr	r1, [r7, #12]
 8012be8:	687a      	ldr	r2, [r7, #4]
 8012bea:	6812      	ldr	r2, [r2, #0]
 8012bec:	430b      	orrs	r3, r1
 8012bee:	67d3      	str	r3, [r2, #124]	; 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	695a      	ldr	r2, [r3, #20]
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	681b      	ldr	r3, [r3, #0]
 8012bfa:	f042 0201 	orr.w	r2, r2, #1
 8012bfe:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8012c00:	2300      	movs	r3, #0
 8012c02:	e007      	b.n	8012c14 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	2240      	movs	r2, #64	; 0x40
 8012c08:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	2200      	movs	r2, #0
 8012c0e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 8012c12:	2301      	movs	r3, #1
}
 8012c14:	4618      	mov	r0, r3
 8012c16:	3718      	adds	r7, #24
 8012c18:	46bd      	mov	sp, r7
 8012c1a:	bd80      	pop	{r7, pc}

08012c1c <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8012c1c:	b580      	push	{r7, lr}
 8012c1e:	b082      	sub	sp, #8
 8012c20:	af00      	add	r7, sp, #0
 8012c22:	6078      	str	r0, [r7, #4]
 8012c24:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d002      	beq.n	8012c32 <HAL_DMAEx_List_BuildNode+0x16>
 8012c2c:	683b      	ldr	r3, [r7, #0]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d101      	bne.n	8012c36 <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 8012c32:	2301      	movs	r3, #1
 8012c34:	e004      	b.n	8012c40 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 8012c36:	6839      	ldr	r1, [r7, #0]
 8012c38:	6878      	ldr	r0, [r7, #4]
 8012c3a:	f000 fbdf 	bl	80133fc <DMA_List_BuildNode>

  return HAL_OK;
 8012c3e:	2300      	movs	r3, #0
}
 8012c40:	4618      	mov	r0, r3
 8012c42:	3708      	adds	r7, #8
 8012c44:	46bd      	mov	sp, r7
 8012c46:	bd80      	pop	{r7, pc}

08012c48 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 8012c48:	b580      	push	{r7, lr}
 8012c4a:	b08c      	sub	sp, #48	; 0x30
 8012c4c:	af00      	add	r7, sp, #0
 8012c4e:	60f8      	str	r0, [r7, #12]
 8012c50:	60b9      	str	r1, [r7, #8]
 8012c52:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d002      	beq.n	8012c60 <HAL_DMAEx_List_InsertNode+0x18>
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d101      	bne.n	8012c64 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 8012c60:	2301      	movs	r3, #1
 8012c62:	e0b6      	b.n	8012dd2 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	695b      	ldr	r3, [r3, #20]
 8012c68:	2b01      	cmp	r3, #1
 8012c6a:	d104      	bne.n	8012c76 <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	2204      	movs	r2, #4
 8012c70:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8012c72:	2301      	movs	r3, #1
 8012c74:	e0ad      	b.n	8012dd2 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 8012c76:	68fb      	ldr	r3, [r7, #12]
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	687a      	ldr	r2, [r7, #4]
 8012c7c:	68b9      	ldr	r1, [r7, #8]
 8012c7e:	4618      	mov	r0, r3
 8012c80:	f000 fd0e 	bl	80136a0 <DMA_List_CheckNodesBaseAddresses>
 8012c84:	4603      	mov	r3, r0
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d004      	beq.n	8012c94 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	2205      	movs	r2, #5
 8012c8e:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8012c90:	2301      	movs	r3, #1
 8012c92:	e09e      	b.n	8012dd2 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	687a      	ldr	r2, [r7, #4]
 8012c9a:	68b9      	ldr	r1, [r7, #8]
 8012c9c:	4618      	mov	r0, r3
 8012c9e:	f000 fd2f 	bl	8013700 <DMA_List_CheckNodesTypes>
 8012ca2:	4603      	mov	r3, r0
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d004      	beq.n	8012cb2 <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8012ca8:	68fb      	ldr	r3, [r7, #12]
 8012caa:	2204      	movs	r2, #4
 8012cac:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8012cae:	2301      	movs	r3, #1
 8012cb0:	e08f      	b.n	8012dd2 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	2202      	movs	r2, #2
 8012cb6:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	2200      	movs	r2, #0
 8012cbc:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8012cbe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012cc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012cc6:	4619      	mov	r1, r3
 8012cc8:	6878      	ldr	r0, [r7, #4]
 8012cca:	f000 fd55 	bl	8013778 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d11a      	bne.n	8012d0c <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 8012cd6:	68bb      	ldr	r3, [r7, #8]
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d106      	bne.n	8012cea <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	687a      	ldr	r2, [r7, #4]
 8012ce0:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	2201      	movs	r2, #1
 8012ce6:	609a      	str	r2, [r3, #8]
 8012ce8:	e06c      	b.n	8012dc4 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	68ba      	ldr	r2, [r7, #8]
 8012cee:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8012cf0:	687a      	ldr	r2, [r7, #4]
 8012cf2:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8012cf6:	4013      	ands	r3, r2
 8012cf8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012cfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012cfc:	4319      	orrs	r1, r3
 8012cfe:	68bb      	ldr	r3, [r7, #8]
 8012d00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 8012d04:	68fb      	ldr	r3, [r7, #12]
 8012d06:	2202      	movs	r2, #2
 8012d08:	609a      	str	r2, [r3, #8]
 8012d0a:	e05b      	b.n	8012dc4 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 8012d0c:	68bb      	ldr	r3, [r7, #8]
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d10f      	bne.n	8012d32 <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	461a      	mov	r2, r3
 8012d18:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8012d1c:	4013      	ands	r3, r2
 8012d1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012d20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012d22:	4319      	orrs	r1, r3
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	687a      	ldr	r2, [r7, #4]
 8012d2e:	601a      	str	r2, [r3, #0]
 8012d30:	e043      	b.n	8012dba <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 8012d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d34:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 8012d36:	f107 0314 	add.w	r3, r7, #20
 8012d3a:	461a      	mov	r2, r3
 8012d3c:	68b9      	ldr	r1, [r7, #8]
 8012d3e:	68f8      	ldr	r0, [r7, #12]
 8012d40:	f000 fd4a 	bl	80137d8 <DMA_List_FindNode>
 8012d44:	4603      	mov	r3, r0
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d132      	bne.n	8012db0 <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 8012d4a:	69fa      	ldr	r2, [r7, #28]
 8012d4c:	68fb      	ldr	r3, [r7, #12]
 8012d4e:	689b      	ldr	r3, [r3, #8]
 8012d50:	429a      	cmp	r2, r3
 8012d52:	d11a      	bne.n	8012d8a <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	685b      	ldr	r3, [r3, #4]
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d00b      	beq.n	8012d74 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8012d5c:	68fb      	ldr	r3, [r7, #12]
 8012d5e:	685b      	ldr	r3, [r3, #4]
 8012d60:	461a      	mov	r2, r3
 8012d62:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8012d66:	4013      	ands	r3, r2
 8012d68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012d6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012d6c:	4319      	orrs	r1, r3
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8012d74:	687a      	ldr	r2, [r7, #4]
 8012d76:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8012d7a:	4013      	ands	r3, r2
 8012d7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012d7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012d80:	4319      	orrs	r1, r3
 8012d82:	68bb      	ldr	r3, [r7, #8]
 8012d84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8012d88:	e017      	b.n	8012dba <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 8012d8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012d8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012d8e:	68bb      	ldr	r3, [r7, #8]
 8012d90:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8012d9a:	687a      	ldr	r2, [r7, #4]
 8012d9c:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8012da0:	4013      	ands	r3, r2
 8012da2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012da4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012da6:	4319      	orrs	r1, r3
 8012da8:	68bb      	ldr	r3, [r7, #8]
 8012daa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8012dae:	e004      	b.n	8012dba <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8012db0:	68fb      	ldr	r3, [r7, #12]
 8012db2:	2206      	movs	r2, #6
 8012db4:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 8012db6:	2301      	movs	r3, #1
 8012db8:	e00b      	b.n	8012dd2 <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 8012dba:	68fb      	ldr	r3, [r7, #12]
 8012dbc:	689b      	ldr	r3, [r3, #8]
 8012dbe:	1c5a      	adds	r2, r3, #1
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8012dc4:	68fb      	ldr	r3, [r7, #12]
 8012dc6:	2200      	movs	r2, #0
 8012dc8:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	2201      	movs	r2, #1
 8012dce:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 8012dd0:	2300      	movs	r3, #0
}
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	3730      	adds	r7, #48	; 0x30
 8012dd6:	46bd      	mov	sp, r7
 8012dd8:	bd80      	pop	{r7, pc}

08012dda <HAL_DMAEx_List_InsertNode_Tail>:
  *                     configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode_Tail(DMA_QListTypeDef *const pQList,
                                                 DMA_NodeTypeDef *const pNewNode)
{
 8012dda:	b580      	push	{r7, lr}
 8012ddc:	b08a      	sub	sp, #40	; 0x28
 8012dde:	af00      	add	r7, sp, #0
 8012de0:	6078      	str	r0, [r7, #4]
 8012de2:	6039      	str	r1, [r7, #0]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d002      	beq.n	8012df0 <HAL_DMAEx_List_InsertNode_Tail+0x16>
 8012dea:	683b      	ldr	r3, [r7, #0]
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d101      	bne.n	8012df4 <HAL_DMAEx_List_InsertNode_Tail+0x1a>
  {
    return HAL_ERROR;
 8012df0:	2301      	movs	r3, #1
 8012df2:	e066      	b.n	8012ec2 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	695b      	ldr	r3, [r3, #20]
 8012df8:	2b01      	cmp	r3, #1
 8012dfa:	d104      	bne.n	8012e06 <HAL_DMAEx_List_InsertNode_Tail+0x2c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	2204      	movs	r2, #4
 8012e00:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8012e02:	2301      	movs	r3, #1
 8012e04:	e05d      	b.n	8012ec2 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pNewNode, NULL) != 0U)
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	2200      	movs	r2, #0
 8012e0c:	6839      	ldr	r1, [r7, #0]
 8012e0e:	4618      	mov	r0, r3
 8012e10:	f000 fc46 	bl	80136a0 <DMA_List_CheckNodesBaseAddresses>
 8012e14:	4603      	mov	r3, r0
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d004      	beq.n	8012e24 <HAL_DMAEx_List_InsertNode_Tail+0x4a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	2205      	movs	r2, #5
 8012e1e:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8012e20:	2301      	movs	r3, #1
 8012e22:	e04e      	b.n	8012ec2 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pNewNode, NULL) != 0U)
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	2200      	movs	r2, #0
 8012e2a:	6839      	ldr	r1, [r7, #0]
 8012e2c:	4618      	mov	r0, r3
 8012e2e:	f000 fc67 	bl	8013700 <DMA_List_CheckNodesTypes>
 8012e32:	4603      	mov	r3, r0
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d004      	beq.n	8012e42 <HAL_DMAEx_List_InsertNode_Tail+0x68>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	2204      	movs	r2, #4
 8012e3c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8012e3e:	2301      	movs	r3, #1
 8012e40:	e03f      	b.n	8012ec2 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Empty queue */
  if (pQList->Head == NULL)
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d103      	bne.n	8012e52 <HAL_DMAEx_List_InsertNode_Tail+0x78>
  {
    pQList->Head = pNewNode;
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	683a      	ldr	r2, [r7, #0]
 8012e4e:	601a      	str	r2, [r3, #0]
 8012e50:	e02b      	b.n	8012eaa <HAL_DMAEx_List_InsertNode_Tail+0xd0>
  }
  /* Not empty queue */
  else
  {
    /* Get CLLR register mask and offset */
    DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8012e52:	f107 0220 	add.w	r2, r7, #32
 8012e56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012e5a:	4619      	mov	r1, r3
 8012e5c:	6838      	ldr	r0, [r7, #0]
 8012e5e:	f000 fc8b 	bl	8013778 <DMA_List_GetCLLRNodeInfo>

    /* Find node and get its position in selected queue */
    node_info.cllr_offset = cllr_offset;
 8012e62:	6a3b      	ldr	r3, [r7, #32]
 8012e64:	60fb      	str	r3, [r7, #12]
    (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8012e66:	f107 030c 	add.w	r3, r7, #12
 8012e6a:	461a      	mov	r2, r3
 8012e6c:	2100      	movs	r1, #0
 8012e6e:	6878      	ldr	r0, [r7, #4]
 8012e70:	f000 fcb2 	bl	80137d8 <DMA_List_FindNode>

    /* Check if queue is circular */
    if (pQList->FirstCircularNode != NULL)
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	685b      	ldr	r3, [r3, #4]
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d00b      	beq.n	8012e94 <HAL_DMAEx_List_InsertNode_Tail+0xba>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	685b      	ldr	r3, [r3, #4]
 8012e80:	461a      	mov	r2, r3
 8012e82:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8012e86:	4013      	ands	r3, r2
 8012e88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012e8a:	6a3a      	ldr	r2, [r7, #32]
 8012e8c:	4319      	orrs	r1, r3
 8012e8e:	683b      	ldr	r3, [r7, #0]
 8012e90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8012e94:	683a      	ldr	r2, [r7, #0]
 8012e96:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8012e9a:	4013      	ands	r3, r2
 8012e9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 8012e9e:	69ba      	ldr	r2, [r7, #24]
 8012ea0:	4610      	mov	r0, r2
 8012ea2:	6a3a      	ldr	r2, [r7, #32]
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8012ea4:	430b      	orrs	r3, r1
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 8012ea6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  /* Increment queue node number */
  pQList->NodeNumber++;
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	689b      	ldr	r3, [r3, #8]
 8012eae:	1c5a      	adds	r2, r3, #1
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	609a      	str	r2, [r3, #8]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	2200      	movs	r2, #0
 8012eb8:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	2201      	movs	r2, #1
 8012ebe:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8012ec0:	2300      	movs	r3, #0
}
 8012ec2:	4618      	mov	r0, r3
 8012ec4:	3728      	adds	r7, #40	; 0x28
 8012ec6:	46bd      	mov	sp, r7
 8012ec8:	bd80      	pop	{r7, pc}

08012eca <HAL_DMAEx_List_ResetQ>:
  * @brief  Reset the linked-list queue and unlink queue nodes.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_ResetQ(DMA_QListTypeDef *const pQList)
{
 8012eca:	b580      	push	{r7, lr}
 8012ecc:	b088      	sub	sp, #32
 8012ece:	af00      	add	r7, sp, #0
 8012ed0:	6078      	str	r0, [r7, #4]
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d101      	bne.n	8012edc <HAL_DMAEx_List_ResetQ+0x12>
  {
    return HAL_ERROR;
 8012ed8:	2301      	movs	r3, #1
 8012eda:	e03c      	b.n	8012f56 <HAL_DMAEx_List_ResetQ+0x8c>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	7b1b      	ldrb	r3, [r3, #12]
 8012ee0:	b2db      	uxtb	r3, r3
 8012ee2:	2b02      	cmp	r3, #2
 8012ee4:	d104      	bne.n	8012ef0 <HAL_DMAEx_List_ResetQ+0x26>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	2201      	movs	r2, #1
 8012eea:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8012eec:	2301      	movs	r3, #1
 8012eee:	e032      	b.n	8012f56 <HAL_DMAEx_List_ResetQ+0x8c>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	695b      	ldr	r3, [r3, #20]
 8012ef4:	2b01      	cmp	r3, #1
 8012ef6:	d104      	bne.n	8012f02 <HAL_DMAEx_List_ResetQ+0x38>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	2204      	movs	r2, #4
 8012efc:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8012efe:	2301      	movs	r3, #1
 8012f00:	e029      	b.n	8012f56 <HAL_DMAEx_List_ResetQ+0x8c>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	2202      	movs	r2, #2
 8012f06:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	2200      	movs	r2, #0
 8012f0c:	611a      	str	r2, [r3, #16]

  /* Check the queue */
  if (pQList->Head != NULL)
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d00f      	beq.n	8012f36 <HAL_DMAEx_List_ResetQ+0x6c>
  {
    /* Get CLLR register mask and offset */
    DMA_List_GetCLLRNodeInfo(pQList->Head, NULL, &cllr_offset);
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	681b      	ldr	r3, [r3, #0]
 8012f1a:	f107 021c 	add.w	r2, r7, #28
 8012f1e:	2100      	movs	r1, #0
 8012f20:	4618      	mov	r0, r3
 8012f22:	f000 fc29 	bl	8013778 <DMA_List_GetCLLRNodeInfo>

    /* Reset selected queue nodes */
    node_info.cllr_offset = cllr_offset;
 8012f26:	69fb      	ldr	r3, [r7, #28]
 8012f28:	60bb      	str	r3, [r7, #8]
    DMA_List_ResetQueueNodes(pQList, &node_info);
 8012f2a:	f107 0308 	add.w	r3, r7, #8
 8012f2e:	4619      	mov	r1, r3
 8012f30:	6878      	ldr	r0, [r7, #4]
 8012f32:	f000 fcf0 	bl	8013916 <DMA_List_ResetQueueNodes>
  }

  /* Reset head node address */
  pQList->Head = NULL;
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	2200      	movs	r2, #0
 8012f3a:	601a      	str	r2, [r3, #0]

  /* Reset node number */
  pQList->NodeNumber = 0U;
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	2200      	movs	r2, #0
 8012f40:	609a      	str	r2, [r3, #8]

  /* Reset first circular node */
  pQList->FirstCircularNode = NULL;
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	2200      	movs	r2, #0
 8012f46:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	2200      	movs	r2, #0
 8012f4c:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_RESET;
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	2200      	movs	r2, #0
 8012f52:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 8012f54:	2300      	movs	r3, #0
}
 8012f56:	4618      	mov	r0, r3
 8012f58:	3720      	adds	r7, #32
 8012f5a:	46bd      	mov	sp, r7
 8012f5c:	bd80      	pop	{r7, pc}

08012f5e <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 8012f5e:	b580      	push	{r7, lr}
 8012f60:	b08a      	sub	sp, #40	; 0x28
 8012f62:	af00      	add	r7, sp, #0
 8012f64:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d101      	bne.n	8012f70 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8012f6c:	2301      	movs	r3, #1
 8012f6e:	e052      	b.n	8013016 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d104      	bne.n	8012f82 <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	2202      	movs	r2, #2
 8012f7c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8012f7e:	2301      	movs	r3, #1
 8012f80:	e049      	b.n	8013016 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	685b      	ldr	r3, [r3, #4]
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d00c      	beq.n	8012fa4 <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	685a      	ldr	r2, [r3, #4]
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	429a      	cmp	r2, r3
 8012f94:	d101      	bne.n	8012f9a <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 8012f96:	2300      	movs	r3, #0
 8012f98:	e03d      	b.n	8013016 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	2204      	movs	r2, #4
 8012f9e:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8012fa0:	2301      	movs	r3, #1
 8012fa2:	e038      	b.n	8013016 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	695b      	ldr	r3, [r3, #20]
 8012fa8:	2b01      	cmp	r3, #1
 8012faa:	d104      	bne.n	8012fb6 <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	2204      	movs	r2, #4
 8012fb0:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8012fb2:	2301      	movs	r3, #1
 8012fb4:	e02f      	b.n	8013016 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	2202      	movs	r2, #2
 8012fba:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	2200      	movs	r2, #0
 8012fc0:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	f107 0220 	add.w	r2, r7, #32
 8012fca:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8012fce:	4618      	mov	r0, r3
 8012fd0:	f000 fbd2 	bl	8013778 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 8012fd4:	6a3b      	ldr	r3, [r7, #32]
 8012fd6:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8012fd8:	f107 030c 	add.w	r3, r7, #12
 8012fdc:	461a      	mov	r2, r3
 8012fde:	2100      	movs	r1, #0
 8012fe0:	6878      	ldr	r0, [r7, #4]
 8012fe2:	f000 fbf9 	bl	80137d8 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	461a      	mov	r2, r3
 8012fec:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8012ff0:	4013      	ands	r3, r2
 8012ff2:	6a79      	ldr	r1, [r7, #36]	; 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8012ff4:	69ba      	ldr	r2, [r7, #24]
 8012ff6:	4610      	mov	r0, r2
 8012ff8:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8012ffa:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8012ffc:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	681a      	ldr	r2, [r3, #0]
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	2200      	movs	r2, #0
 801300c:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	2201      	movs	r2, #1
 8013012:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8013014:	2300      	movs	r3, #0
}
 8013016:	4618      	mov	r0, r3
 8013018:	3728      	adds	r7, #40	; 0x28
 801301a:	46bd      	mov	sp, r7
 801301c:	bd80      	pop	{r7, pc}
	...

08013020 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8013020:	b480      	push	{r7}
 8013022:	b085      	sub	sp, #20
 8013024:	af00      	add	r7, sp, #0
 8013026:	6078      	str	r0, [r7, #4]
 8013028:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	2b00      	cmp	r3, #0
 801302e:	d002      	beq.n	8013036 <HAL_DMAEx_List_LinkQ+0x16>
 8013030:	683b      	ldr	r3, [r7, #0]
 8013032:	2b00      	cmp	r3, #0
 8013034:	d101      	bne.n	801303a <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8013036:	2301      	movs	r3, #1
 8013038:	e072      	b.n	8013120 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8013040:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8013048:	b2db      	uxtb	r3, r3
 801304a:	2b02      	cmp	r3, #2
 801304c:	d002      	beq.n	8013054 <HAL_DMAEx_List_LinkQ+0x34>
 801304e:	7bfb      	ldrb	r3, [r7, #15]
 8013050:	2b05      	cmp	r3, #5
 8013052:	d108      	bne.n	8013066 <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	2240      	movs	r2, #64	; 0x40
 8013058:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	2200      	movs	r2, #0
 801305e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8013062:	2301      	movs	r3, #1
 8013064:	e05c      	b.n	8013120 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8013066:	683b      	ldr	r3, [r7, #0]
 8013068:	7b1b      	ldrb	r3, [r3, #12]
 801306a:	b2db      	uxtb	r3, r3
 801306c:	2b02      	cmp	r3, #2
 801306e:	d104      	bne.n	801307a <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8013070:	683b      	ldr	r3, [r7, #0]
 8013072:	2201      	movs	r2, #1
 8013074:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8013076:	2301      	movs	r3, #1
 8013078:	e052      	b.n	8013120 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	4a2b      	ldr	r2, [pc, #172]	; (801312c <HAL_DMAEx_List_LinkQ+0x10c>)
 8013080:	4293      	cmp	r3, r2
 8013082:	d022      	beq.n	80130ca <HAL_DMAEx_List_LinkQ+0xaa>
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	681b      	ldr	r3, [r3, #0]
 8013088:	4a29      	ldr	r2, [pc, #164]	; (8013130 <HAL_DMAEx_List_LinkQ+0x110>)
 801308a:	4293      	cmp	r3, r2
 801308c:	d01d      	beq.n	80130ca <HAL_DMAEx_List_LinkQ+0xaa>
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	4a28      	ldr	r2, [pc, #160]	; (8013134 <HAL_DMAEx_List_LinkQ+0x114>)
 8013094:	4293      	cmp	r3, r2
 8013096:	d018      	beq.n	80130ca <HAL_DMAEx_List_LinkQ+0xaa>
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	4a26      	ldr	r2, [pc, #152]	; (8013138 <HAL_DMAEx_List_LinkQ+0x118>)
 801309e:	4293      	cmp	r3, r2
 80130a0:	d013      	beq.n	80130ca <HAL_DMAEx_List_LinkQ+0xaa>
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	4a25      	ldr	r2, [pc, #148]	; (801313c <HAL_DMAEx_List_LinkQ+0x11c>)
 80130a8:	4293      	cmp	r3, r2
 80130aa:	d00e      	beq.n	80130ca <HAL_DMAEx_List_LinkQ+0xaa>
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	681b      	ldr	r3, [r3, #0]
 80130b0:	4a23      	ldr	r2, [pc, #140]	; (8013140 <HAL_DMAEx_List_LinkQ+0x120>)
 80130b2:	4293      	cmp	r3, r2
 80130b4:	d009      	beq.n	80130ca <HAL_DMAEx_List_LinkQ+0xaa>
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	4a22      	ldr	r2, [pc, #136]	; (8013144 <HAL_DMAEx_List_LinkQ+0x124>)
 80130bc:	4293      	cmp	r3, r2
 80130be:	d004      	beq.n	80130ca <HAL_DMAEx_List_LinkQ+0xaa>
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	681b      	ldr	r3, [r3, #0]
 80130c4:	4a20      	ldr	r2, [pc, #128]	; (8013148 <HAL_DMAEx_List_LinkQ+0x128>)
 80130c6:	4293      	cmp	r3, r2
 80130c8:	d101      	bne.n	80130ce <HAL_DMAEx_List_LinkQ+0xae>
 80130ca:	2301      	movs	r3, #1
 80130cc:	e000      	b.n	80130d0 <HAL_DMAEx_List_LinkQ+0xb0>
 80130ce:	2300      	movs	r3, #0
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d10b      	bne.n	80130ec <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 80130d4:	683b      	ldr	r3, [r7, #0]
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	6a1b      	ldr	r3, [r3, #32]
 80130da:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d004      	beq.n	80130ec <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 80130e2:	683b      	ldr	r3, [r7, #0]
 80130e4:	2203      	movs	r2, #3
 80130e6:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80130e8:	2301      	movs	r3, #1
 80130ea:	e019      	b.n	8013120 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80130f0:	2b81      	cmp	r3, #129	; 0x81
 80130f2:	d108      	bne.n	8013106 <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 80130f4:	683b      	ldr	r3, [r7, #0]
 80130f6:	685b      	ldr	r3, [r3, #4]
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d10d      	bne.n	8013118 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80130fc:	683b      	ldr	r3, [r7, #0]
 80130fe:	2204      	movs	r2, #4
 8013100:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8013102:	2301      	movs	r3, #1
 8013104:	e00c      	b.n	8013120 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8013106:	683b      	ldr	r3, [r7, #0]
 8013108:	685b      	ldr	r3, [r3, #4]
 801310a:	2b00      	cmp	r3, #0
 801310c:	d004      	beq.n	8013118 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 801310e:	683b      	ldr	r3, [r7, #0]
 8013110:	2204      	movs	r2, #4
 8013112:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8013114:	2301      	movs	r3, #1
 8013116:	e003      	b.n	8013120 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	683a      	ldr	r2, [r7, #0]
 801311c:	675a      	str	r2, [r3, #116]	; 0x74

  return HAL_OK;
 801311e:	2300      	movs	r3, #0
}
 8013120:	4618      	mov	r0, r3
 8013122:	3714      	adds	r7, #20
 8013124:	46bd      	mov	sp, r7
 8013126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801312a:	4770      	bx	lr
 801312c:	40020650 	.word	0x40020650
 8013130:	50020650 	.word	0x50020650
 8013134:	400206d0 	.word	0x400206d0
 8013138:	500206d0 	.word	0x500206d0
 801313c:	40020750 	.word	0x40020750
 8013140:	50020750 	.word	0x50020750
 8013144:	400207d0 	.word	0x400207d0
 8013148:	500207d0 	.word	0x500207d0

0801314c <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 801314c:	b480      	push	{r7}
 801314e:	b085      	sub	sp, #20
 8013150:	af00      	add	r7, sp, #0
 8013152:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801315c:	4313      	orrs	r3, r2
 801315e:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	4a85      	ldr	r2, [pc, #532]	; (801337c <DMA_List_Init+0x230>)
 8013166:	4293      	cmp	r3, r2
 8013168:	f000 80a0 	beq.w	80132ac <DMA_List_Init+0x160>
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	4a83      	ldr	r2, [pc, #524]	; (8013380 <DMA_List_Init+0x234>)
 8013172:	4293      	cmp	r3, r2
 8013174:	f000 809a 	beq.w	80132ac <DMA_List_Init+0x160>
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	4a81      	ldr	r2, [pc, #516]	; (8013384 <DMA_List_Init+0x238>)
 801317e:	4293      	cmp	r3, r2
 8013180:	f000 8094 	beq.w	80132ac <DMA_List_Init+0x160>
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	4a7f      	ldr	r2, [pc, #508]	; (8013388 <DMA_List_Init+0x23c>)
 801318a:	4293      	cmp	r3, r2
 801318c:	f000 808e 	beq.w	80132ac <DMA_List_Init+0x160>
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	4a7d      	ldr	r2, [pc, #500]	; (801338c <DMA_List_Init+0x240>)
 8013196:	4293      	cmp	r3, r2
 8013198:	f000 8088 	beq.w	80132ac <DMA_List_Init+0x160>
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	4a7b      	ldr	r2, [pc, #492]	; (8013390 <DMA_List_Init+0x244>)
 80131a2:	4293      	cmp	r3, r2
 80131a4:	f000 8082 	beq.w	80132ac <DMA_List_Init+0x160>
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	681b      	ldr	r3, [r3, #0]
 80131ac:	4a79      	ldr	r2, [pc, #484]	; (8013394 <DMA_List_Init+0x248>)
 80131ae:	4293      	cmp	r3, r2
 80131b0:	d07c      	beq.n	80132ac <DMA_List_Init+0x160>
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	4a78      	ldr	r2, [pc, #480]	; (8013398 <DMA_List_Init+0x24c>)
 80131b8:	4293      	cmp	r3, r2
 80131ba:	d077      	beq.n	80132ac <DMA_List_Init+0x160>
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	4a76      	ldr	r2, [pc, #472]	; (801339c <DMA_List_Init+0x250>)
 80131c2:	4293      	cmp	r3, r2
 80131c4:	d072      	beq.n	80132ac <DMA_List_Init+0x160>
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	4a75      	ldr	r2, [pc, #468]	; (80133a0 <DMA_List_Init+0x254>)
 80131cc:	4293      	cmp	r3, r2
 80131ce:	d06d      	beq.n	80132ac <DMA_List_Init+0x160>
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	681b      	ldr	r3, [r3, #0]
 80131d4:	4a73      	ldr	r2, [pc, #460]	; (80133a4 <DMA_List_Init+0x258>)
 80131d6:	4293      	cmp	r3, r2
 80131d8:	d068      	beq.n	80132ac <DMA_List_Init+0x160>
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	4a72      	ldr	r2, [pc, #456]	; (80133a8 <DMA_List_Init+0x25c>)
 80131e0:	4293      	cmp	r3, r2
 80131e2:	d063      	beq.n	80132ac <DMA_List_Init+0x160>
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	4a70      	ldr	r2, [pc, #448]	; (80133ac <DMA_List_Init+0x260>)
 80131ea:	4293      	cmp	r3, r2
 80131ec:	d05e      	beq.n	80132ac <DMA_List_Init+0x160>
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	4a6f      	ldr	r2, [pc, #444]	; (80133b0 <DMA_List_Init+0x264>)
 80131f4:	4293      	cmp	r3, r2
 80131f6:	d059      	beq.n	80132ac <DMA_List_Init+0x160>
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	4a6d      	ldr	r2, [pc, #436]	; (80133b4 <DMA_List_Init+0x268>)
 80131fe:	4293      	cmp	r3, r2
 8013200:	d054      	beq.n	80132ac <DMA_List_Init+0x160>
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	681b      	ldr	r3, [r3, #0]
 8013206:	4a6c      	ldr	r2, [pc, #432]	; (80133b8 <DMA_List_Init+0x26c>)
 8013208:	4293      	cmp	r3, r2
 801320a:	d04f      	beq.n	80132ac <DMA_List_Init+0x160>
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	681b      	ldr	r3, [r3, #0]
 8013210:	4a6a      	ldr	r2, [pc, #424]	; (80133bc <DMA_List_Init+0x270>)
 8013212:	4293      	cmp	r3, r2
 8013214:	d04a      	beq.n	80132ac <DMA_List_Init+0x160>
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	681b      	ldr	r3, [r3, #0]
 801321a:	4a69      	ldr	r2, [pc, #420]	; (80133c0 <DMA_List_Init+0x274>)
 801321c:	4293      	cmp	r3, r2
 801321e:	d045      	beq.n	80132ac <DMA_List_Init+0x160>
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	4a67      	ldr	r2, [pc, #412]	; (80133c4 <DMA_List_Init+0x278>)
 8013226:	4293      	cmp	r3, r2
 8013228:	d040      	beq.n	80132ac <DMA_List_Init+0x160>
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	4a66      	ldr	r2, [pc, #408]	; (80133c8 <DMA_List_Init+0x27c>)
 8013230:	4293      	cmp	r3, r2
 8013232:	d03b      	beq.n	80132ac <DMA_List_Init+0x160>
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	4a64      	ldr	r2, [pc, #400]	; (80133cc <DMA_List_Init+0x280>)
 801323a:	4293      	cmp	r3, r2
 801323c:	d036      	beq.n	80132ac <DMA_List_Init+0x160>
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	4a63      	ldr	r2, [pc, #396]	; (80133d0 <DMA_List_Init+0x284>)
 8013244:	4293      	cmp	r3, r2
 8013246:	d031      	beq.n	80132ac <DMA_List_Init+0x160>
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	4a61      	ldr	r2, [pc, #388]	; (80133d4 <DMA_List_Init+0x288>)
 801324e:	4293      	cmp	r3, r2
 8013250:	d02c      	beq.n	80132ac <DMA_List_Init+0x160>
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	4a60      	ldr	r2, [pc, #384]	; (80133d8 <DMA_List_Init+0x28c>)
 8013258:	4293      	cmp	r3, r2
 801325a:	d027      	beq.n	80132ac <DMA_List_Init+0x160>
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	4a5e      	ldr	r2, [pc, #376]	; (80133dc <DMA_List_Init+0x290>)
 8013262:	4293      	cmp	r3, r2
 8013264:	d022      	beq.n	80132ac <DMA_List_Init+0x160>
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	4a5d      	ldr	r2, [pc, #372]	; (80133e0 <DMA_List_Init+0x294>)
 801326c:	4293      	cmp	r3, r2
 801326e:	d01d      	beq.n	80132ac <DMA_List_Init+0x160>
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	4a5b      	ldr	r2, [pc, #364]	; (80133e4 <DMA_List_Init+0x298>)
 8013276:	4293      	cmp	r3, r2
 8013278:	d018      	beq.n	80132ac <DMA_List_Init+0x160>
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	4a5a      	ldr	r2, [pc, #360]	; (80133e8 <DMA_List_Init+0x29c>)
 8013280:	4293      	cmp	r3, r2
 8013282:	d013      	beq.n	80132ac <DMA_List_Init+0x160>
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	4a58      	ldr	r2, [pc, #352]	; (80133ec <DMA_List_Init+0x2a0>)
 801328a:	4293      	cmp	r3, r2
 801328c:	d00e      	beq.n	80132ac <DMA_List_Init+0x160>
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	4a57      	ldr	r2, [pc, #348]	; (80133f0 <DMA_List_Init+0x2a4>)
 8013294:	4293      	cmp	r3, r2
 8013296:	d009      	beq.n	80132ac <DMA_List_Init+0x160>
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	4a55      	ldr	r2, [pc, #340]	; (80133f4 <DMA_List_Init+0x2a8>)
 801329e:	4293      	cmp	r3, r2
 80132a0:	d004      	beq.n	80132ac <DMA_List_Init+0x160>
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	4a54      	ldr	r2, [pc, #336]	; (80133f8 <DMA_List_Init+0x2ac>)
 80132a8:	4293      	cmp	r3, r2
 80132aa:	d101      	bne.n	80132b0 <DMA_List_Init+0x164>
 80132ac:	2301      	movs	r3, #1
 80132ae:	e000      	b.n	80132b2 <DMA_List_Init+0x166>
 80132b0:	2300      	movs	r3, #0
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d004      	beq.n	80132c0 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132ba:	68fa      	ldr	r2, [r7, #12]
 80132bc:	4313      	orrs	r3, r2
 80132be:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	695b      	ldr	r3, [r3, #20]
 80132c6:	f423 0143 	bic.w	r1, r3, #12779520	; 0xc30000
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	68fa      	ldr	r2, [r7, #12]
 80132d0:	430a      	orrs	r2, r1
 80132d2:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	681b      	ldr	r3, [r3, #0]
 80132d8:	2200      	movs	r2, #0
 80132da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	681b      	ldr	r3, [r3, #0]
 80132e0:	687a      	ldr	r2, [r7, #4]
 80132e2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80132e4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	681b      	ldr	r3, [r3, #0]
 80132ea:	2200      	movs	r2, #0
 80132ec:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	2200      	movs	r2, #0
 80132f4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	2200      	movs	r2, #0
 80132fc:	651a      	str	r2, [r3, #80]	; 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	4a36      	ldr	r2, [pc, #216]	; (80133dc <DMA_List_Init+0x290>)
 8013304:	4293      	cmp	r3, r2
 8013306:	d022      	beq.n	801334e <DMA_List_Init+0x202>
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	681b      	ldr	r3, [r3, #0]
 801330c:	4a34      	ldr	r2, [pc, #208]	; (80133e0 <DMA_List_Init+0x294>)
 801330e:	4293      	cmp	r3, r2
 8013310:	d01d      	beq.n	801334e <DMA_List_Init+0x202>
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	681b      	ldr	r3, [r3, #0]
 8013316:	4a33      	ldr	r2, [pc, #204]	; (80133e4 <DMA_List_Init+0x298>)
 8013318:	4293      	cmp	r3, r2
 801331a:	d018      	beq.n	801334e <DMA_List_Init+0x202>
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	4a31      	ldr	r2, [pc, #196]	; (80133e8 <DMA_List_Init+0x29c>)
 8013322:	4293      	cmp	r3, r2
 8013324:	d013      	beq.n	801334e <DMA_List_Init+0x202>
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	4a30      	ldr	r2, [pc, #192]	; (80133ec <DMA_List_Init+0x2a0>)
 801332c:	4293      	cmp	r3, r2
 801332e:	d00e      	beq.n	801334e <DMA_List_Init+0x202>
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	681b      	ldr	r3, [r3, #0]
 8013334:	4a2e      	ldr	r2, [pc, #184]	; (80133f0 <DMA_List_Init+0x2a4>)
 8013336:	4293      	cmp	r3, r2
 8013338:	d009      	beq.n	801334e <DMA_List_Init+0x202>
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	4a2d      	ldr	r2, [pc, #180]	; (80133f4 <DMA_List_Init+0x2a8>)
 8013340:	4293      	cmp	r3, r2
 8013342:	d004      	beq.n	801334e <DMA_List_Init+0x202>
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	681b      	ldr	r3, [r3, #0]
 8013348:	4a2b      	ldr	r2, [pc, #172]	; (80133f8 <DMA_List_Init+0x2ac>)
 801334a:	4293      	cmp	r3, r2
 801334c:	d101      	bne.n	8013352 <DMA_List_Init+0x206>
 801334e:	2301      	movs	r3, #1
 8013350:	e000      	b.n	8013354 <DMA_List_Init+0x208>
 8013352:	2300      	movs	r3, #0
 8013354:	2b00      	cmp	r3, #0
 8013356:	d007      	beq.n	8013368 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	2200      	movs	r2, #0
 801335e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	681b      	ldr	r3, [r3, #0]
 8013364:	2200      	movs	r2, #0
 8013366:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	2200      	movs	r2, #0
 801336e:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8013370:	bf00      	nop
 8013372:	3714      	adds	r7, #20
 8013374:	46bd      	mov	sp, r7
 8013376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801337a:	4770      	bx	lr
 801337c:	40020050 	.word	0x40020050
 8013380:	50020050 	.word	0x50020050
 8013384:	400200d0 	.word	0x400200d0
 8013388:	500200d0 	.word	0x500200d0
 801338c:	40020150 	.word	0x40020150
 8013390:	50020150 	.word	0x50020150
 8013394:	400201d0 	.word	0x400201d0
 8013398:	500201d0 	.word	0x500201d0
 801339c:	40020250 	.word	0x40020250
 80133a0:	50020250 	.word	0x50020250
 80133a4:	400202d0 	.word	0x400202d0
 80133a8:	500202d0 	.word	0x500202d0
 80133ac:	40020350 	.word	0x40020350
 80133b0:	50020350 	.word	0x50020350
 80133b4:	400203d0 	.word	0x400203d0
 80133b8:	500203d0 	.word	0x500203d0
 80133bc:	40020450 	.word	0x40020450
 80133c0:	50020450 	.word	0x50020450
 80133c4:	400204d0 	.word	0x400204d0
 80133c8:	500204d0 	.word	0x500204d0
 80133cc:	40020550 	.word	0x40020550
 80133d0:	50020550 	.word	0x50020550
 80133d4:	400205d0 	.word	0x400205d0
 80133d8:	500205d0 	.word	0x500205d0
 80133dc:	40020650 	.word	0x40020650
 80133e0:	50020650 	.word	0x50020650
 80133e4:	400206d0 	.word	0x400206d0
 80133e8:	500206d0 	.word	0x500206d0
 80133ec:	40020750 	.word	0x40020750
 80133f0:	50020750 	.word	0x50020750
 80133f4:	400207d0 	.word	0x400207d0
 80133f8:	500207d0 	.word	0x500207d0

080133fc <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 80133fc:	b480      	push	{r7}
 80133fe:	b085      	sub	sp, #20
 8013400:	af00      	add	r7, sp, #0
 8013402:	6078      	str	r0, [r7, #4]
 8013404:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 801340e:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8013414:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 801341a:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8013420:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8013422:	683b      	ldr	r3, [r7, #0]
 8013424:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	681b      	ldr	r3, [r3, #0]
 801342a:	f003 0320 	and.w	r3, r3, #32
 801342e:	2b00      	cmp	r3, #0
 8013430:	d017      	beq.n	8013462 <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8013432:	683b      	ldr	r3, [r7, #0]
 8013434:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801343e:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013444:	3b01      	subs	r3, #1
 8013446:	051b      	lsls	r3, r3, #20
 8013448:	f003 737c 	and.w	r3, r3, #66060288	; 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 801344c:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013452:	3b01      	subs	r3, #1
 8013454:	011b      	lsls	r3, r3, #4
 8013456:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 801345a:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 801345c:	431a      	orrs	r2, r3
 801345e:	683b      	ldr	r3, [r7, #0]
 8013460:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	6b1a      	ldr	r2, [r3, #48]	; 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	6859      	ldr	r1, [r3, #4]
 801346a:	f240 237f 	movw	r3, #639	; 0x27f
 801346e:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8013470:	431a      	orrs	r2, r3
 8013472:	683b      	ldr	r3, [r7, #0]
 8013474:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	68db      	ldr	r3, [r3, #12]
 801347a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801347e:	d10c      	bne.n	801349a <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	681b      	ldr	r3, [r3, #0]
 8013484:	f003 0320 	and.w	r3, r3, #32
 8013488:	2b00      	cmp	r3, #0
 801348a:	d011      	beq.n	80134b0 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 801348c:	683b      	ldr	r3, [r7, #0]
 801348e:	685b      	ldr	r3, [r3, #4]
 8013490:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8013494:	683b      	ldr	r3, [r7, #0]
 8013496:	605a      	str	r2, [r3, #4]
 8013498:	e00a      	b.n	80134b0 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	68db      	ldr	r3, [r3, #12]
 801349e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80134a2:	d105      	bne.n	80134b0 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 80134a4:	683b      	ldr	r3, [r7, #0]
 80134a6:	685b      	ldr	r3, [r3, #4]
 80134a8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80134ac:	683b      	ldr	r3, [r7, #0]
 80134ae:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d00f      	beq.n	80134d8 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 80134b8:	683b      	ldr	r3, [r7, #0]
 80134ba:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80134c4:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80134ca:	041b      	lsls	r3, r3, #16
 80134cc:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 80134d0:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 80134d2:	431a      	orrs	r2, r3
 80134d4:	683b      	ldr	r3, [r7, #0]
 80134d6:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80134dc:	b29a      	uxth	r2, r3
 80134de:	683b      	ldr	r3, [r7, #0]
 80134e0:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	681b      	ldr	r3, [r3, #0]
 80134e6:	f003 0302 	and.w	r3, r3, #2
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d04e      	beq.n	801358c <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 80134ee:	683b      	ldr	r3, [r7, #0]
 80134f0:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80134f6:	3b01      	subs	r3, #1
 80134f8:	0419      	lsls	r1, r3, #16
 80134fa:	4b67      	ldr	r3, [pc, #412]	; (8013698 <DMA_List_BuildNode+0x29c>)
 80134fc:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 80134fe:	431a      	orrs	r2, r3
 8013500:	683b      	ldr	r3, [r7, #0]
 8013502:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013508:	2b00      	cmp	r3, #0
 801350a:	da06      	bge.n	801351a <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 801350c:	683b      	ldr	r3, [r7, #0]
 801350e:	689b      	ldr	r3, [r3, #8]
 8013510:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8013514:	683b      	ldr	r3, [r7, #0]
 8013516:	609a      	str	r2, [r3, #8]
 8013518:	e005      	b.n	8013526 <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 801351a:	683b      	ldr	r3, [r7, #0]
 801351c:	689b      	ldr	r3, [r3, #8]
 801351e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8013522:	683b      	ldr	r3, [r7, #0]
 8013524:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801352a:	2b00      	cmp	r3, #0
 801352c:	da06      	bge.n	801353c <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 801352e:	683b      	ldr	r3, [r7, #0]
 8013530:	689b      	ldr	r3, [r3, #8]
 8013532:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8013536:	683b      	ldr	r3, [r7, #0]
 8013538:	609a      	str	r2, [r3, #8]
 801353a:	e005      	b.n	8013548 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 801353c:	683b      	ldr	r3, [r7, #0]
 801353e:	689b      	ldr	r3, [r3, #8]
 8013540:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8013544:	683b      	ldr	r3, [r7, #0]
 8013546:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801354c:	2b00      	cmp	r3, #0
 801354e:	da06      	bge.n	801355e <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8013550:	683b      	ldr	r3, [r7, #0]
 8013552:	689b      	ldr	r3, [r3, #8]
 8013554:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8013558:	683b      	ldr	r3, [r7, #0]
 801355a:	609a      	str	r2, [r3, #8]
 801355c:	e005      	b.n	801356a <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 801355e:	683b      	ldr	r3, [r7, #0]
 8013560:	689b      	ldr	r3, [r3, #8]
 8013562:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8013566:	683b      	ldr	r3, [r7, #0]
 8013568:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801356e:	2b00      	cmp	r3, #0
 8013570:	da06      	bge.n	8013580 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8013572:	683b      	ldr	r3, [r7, #0]
 8013574:	689b      	ldr	r3, [r3, #8]
 8013576:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801357a:	683b      	ldr	r3, [r7, #0]
 801357c:	609a      	str	r2, [r3, #8]
 801357e:	e005      	b.n	801358c <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8013580:	683b      	ldr	r3, [r7, #0]
 8013582:	689b      	ldr	r3, [r3, #8]
 8013584:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8013588:	683b      	ldr	r3, [r7, #0]
 801358a:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8013590:	683b      	ldr	r3, [r7, #0]
 8013592:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013598:	683b      	ldr	r3, [r7, #0]
 801359a:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	f003 0302 	and.w	r3, r3, #2
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d059      	beq.n	801365c <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	da09      	bge.n	80135c4 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80135b4:	425b      	negs	r3, r3
 80135b6:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	f3c3 020c 	ubfx	r2, r3, #0, #13
 80135be:	683b      	ldr	r3, [r7, #0]
 80135c0:	615a      	str	r2, [r3, #20]
 80135c2:	e005      	b.n	80135d0 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80135c8:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 80135cc:	683b      	ldr	r3, [r7, #0]
 80135ce:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	da0d      	bge.n	80135f4 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80135dc:	425b      	negs	r3, r3
 80135de:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 80135e0:	683b      	ldr	r3, [r7, #0]
 80135e2:	695a      	ldr	r2, [r3, #20]
 80135e4:	68fb      	ldr	r3, [r7, #12]
 80135e6:	0419      	lsls	r1, r3, #16
 80135e8:	4b2c      	ldr	r3, [pc, #176]	; (801369c <DMA_List_BuildNode+0x2a0>)
 80135ea:	400b      	ands	r3, r1
 80135ec:	431a      	orrs	r2, r3
 80135ee:	683b      	ldr	r3, [r7, #0]
 80135f0:	615a      	str	r2, [r3, #20]
 80135f2:	e009      	b.n	8013608 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 80135f4:	683b      	ldr	r3, [r7, #0]
 80135f6:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80135fc:	0419      	lsls	r1, r3, #16
 80135fe:	4b27      	ldr	r3, [pc, #156]	; (801369c <DMA_List_BuildNode+0x2a0>)
 8013600:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8013602:	431a      	orrs	r2, r3
 8013604:	683b      	ldr	r3, [r7, #0]
 8013606:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801360c:	2b00      	cmp	r3, #0
 801360e:	da08      	bge.n	8013622 <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013614:	425b      	negs	r3, r3
 8013616:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8013618:	68fb      	ldr	r3, [r7, #12]
 801361a:	b29a      	uxth	r2, r3
 801361c:	683b      	ldr	r3, [r7, #0]
 801361e:	619a      	str	r2, [r3, #24]
 8013620:	e004      	b.n	801362c <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013626:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8013628:	683b      	ldr	r3, [r7, #0]
 801362a:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013630:	2b00      	cmp	r3, #0
 8013632:	da0b      	bge.n	801364c <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013638:	425b      	negs	r3, r3
 801363a:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 801363c:	683b      	ldr	r3, [r7, #0]
 801363e:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8013644:	431a      	orrs	r2, r3
 8013646:	683b      	ldr	r3, [r7, #0]
 8013648:	619a      	str	r2, [r3, #24]
 801364a:	e007      	b.n	801365c <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 801364c:	683b      	ldr	r3, [r7, #0]
 801364e:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013654:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8013656:	431a      	orrs	r2, r3
 8013658:	683b      	ldr	r3, [r7, #0]
 801365a:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	681a      	ldr	r2, [r3, #0]
 8013660:	683b      	ldr	r3, [r7, #0]
 8013662:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	681b      	ldr	r3, [r3, #0]
 8013668:	f003 0302 	and.w	r3, r3, #2
 801366c:	2b00      	cmp	r3, #0
 801366e:	d006      	beq.n	801367e <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8013670:	683b      	ldr	r3, [r7, #0]
 8013672:	6a1b      	ldr	r3, [r3, #32]
 8013674:	f443 62e0 	orr.w	r2, r3, #1792	; 0x700
 8013678:	683b      	ldr	r3, [r7, #0]
 801367a:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 801367c:	e005      	b.n	801368a <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 801367e:	683b      	ldr	r3, [r7, #0]
 8013680:	6a1b      	ldr	r3, [r3, #32]
 8013682:	f443 62a0 	orr.w	r2, r3, #1280	; 0x500
 8013686:	683b      	ldr	r3, [r7, #0]
 8013688:	621a      	str	r2, [r3, #32]
}
 801368a:	bf00      	nop
 801368c:	3714      	adds	r7, #20
 801368e:	46bd      	mov	sp, r7
 8013690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013694:	4770      	bx	lr
 8013696:	bf00      	nop
 8013698:	07ff0000 	.word	0x07ff0000
 801369c:	1fff0000 	.word	0x1fff0000

080136a0 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 80136a0:	b480      	push	{r7}
 80136a2:	b087      	sub	sp, #28
 80136a4:	af00      	add	r7, sp, #0
 80136a6:	60f8      	str	r0, [r7, #12]
 80136a8:	60b9      	str	r1, [r7, #8]
 80136aa:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 80136ac:	68fa      	ldr	r2, [r7, #12]
 80136ae:	68bb      	ldr	r3, [r7, #8]
 80136b0:	431a      	orrs	r2, r3
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	4313      	orrs	r3, r2
 80136b6:	0c1b      	lsrs	r3, r3, #16
 80136b8:	041b      	lsls	r3, r3, #16
 80136ba:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 80136bc:	2300      	movs	r3, #0
 80136be:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d002      	beq.n	80136cc <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 80136c6:	68fb      	ldr	r3, [r7, #12]
 80136c8:	617b      	str	r3, [r7, #20]
 80136ca:	e00a      	b.n	80136e2 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 80136cc:	68bb      	ldr	r3, [r7, #8]
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d002      	beq.n	80136d8 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 80136d2:	68bb      	ldr	r3, [r7, #8]
 80136d4:	617b      	str	r3, [r7, #20]
 80136d6:	e004      	b.n	80136e2 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d001      	beq.n	80136e2 <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 80136e2:	697b      	ldr	r3, [r7, #20]
 80136e4:	0c1b      	lsrs	r3, r3, #16
 80136e6:	041b      	lsls	r3, r3, #16
 80136e8:	693a      	ldr	r2, [r7, #16]
 80136ea:	429a      	cmp	r2, r3
 80136ec:	d001      	beq.n	80136f2 <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 80136ee:	2301      	movs	r3, #1
 80136f0:	e000      	b.n	80136f4 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 80136f2:	2300      	movs	r3, #0
}
 80136f4:	4618      	mov	r0, r3
 80136f6:	371c      	adds	r7, #28
 80136f8:	46bd      	mov	sp, r7
 80136fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136fe:	4770      	bx	lr

08013700 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8013700:	b480      	push	{r7}
 8013702:	b087      	sub	sp, #28
 8013704:	af00      	add	r7, sp, #0
 8013706:	60f8      	str	r0, [r7, #12]
 8013708:	60b9      	str	r1, [r7, #8]
 801370a:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 801370c:	2300      	movs	r3, #0
 801370e:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	2b00      	cmp	r3, #0
 8013714:	d004      	beq.n	8013720 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	6a1b      	ldr	r3, [r3, #32]
 801371a:	b2db      	uxtb	r3, r3
 801371c:	617b      	str	r3, [r7, #20]
 801371e:	e00e      	b.n	801373e <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8013720:	68bb      	ldr	r3, [r7, #8]
 8013722:	2b00      	cmp	r3, #0
 8013724:	d004      	beq.n	8013730 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8013726:	68bb      	ldr	r3, [r7, #8]
 8013728:	6a1b      	ldr	r3, [r3, #32]
 801372a:	b2db      	uxtb	r3, r3
 801372c:	617b      	str	r3, [r7, #20]
 801372e:	e006      	b.n	801373e <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	2b00      	cmp	r3, #0
 8013734:	d003      	beq.n	801373e <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	6a1b      	ldr	r3, [r3, #32]
 801373a:	b2db      	uxtb	r3, r3
 801373c:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 801373e:	68bb      	ldr	r3, [r7, #8]
 8013740:	2b00      	cmp	r3, #0
 8013742:	d007      	beq.n	8013754 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8013744:	68bb      	ldr	r3, [r7, #8]
 8013746:	6a1b      	ldr	r3, [r3, #32]
 8013748:	b2db      	uxtb	r3, r3
 801374a:	697a      	ldr	r2, [r7, #20]
 801374c:	429a      	cmp	r2, r3
 801374e:	d001      	beq.n	8013754 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8013750:	2302      	movs	r3, #2
 8013752:	e00b      	b.n	801376c <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	2b00      	cmp	r3, #0
 8013758:	d007      	beq.n	801376a <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	6a1b      	ldr	r3, [r3, #32]
 801375e:	b2db      	uxtb	r3, r3
 8013760:	697a      	ldr	r2, [r7, #20]
 8013762:	429a      	cmp	r2, r3
 8013764:	d001      	beq.n	801376a <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8013766:	2303      	movs	r3, #3
 8013768:	e000      	b.n	801376c <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 801376a:	2300      	movs	r3, #0
}
 801376c:	4618      	mov	r0, r3
 801376e:	371c      	adds	r7, #28
 8013770:	46bd      	mov	sp, r7
 8013772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013776:	4770      	bx	lr

08013778 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8013778:	b480      	push	{r7}
 801377a:	b085      	sub	sp, #20
 801377c:	af00      	add	r7, sp, #0
 801377e:	60f8      	str	r0, [r7, #12]
 8013780:	60b9      	str	r1, [r7, #8]
 8013782:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8013784:	68fb      	ldr	r3, [r7, #12]
 8013786:	6a1b      	ldr	r3, [r3, #32]
 8013788:	f003 0302 	and.w	r3, r3, #2
 801378c:	2b00      	cmp	r3, #0
 801378e:	d00c      	beq.n	80137aa <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8013790:	68bb      	ldr	r3, [r7, #8]
 8013792:	2b00      	cmp	r3, #0
 8013794:	d002      	beq.n	801379c <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8013796:	68bb      	ldr	r3, [r7, #8]
 8013798:	4a0d      	ldr	r2, [pc, #52]	; (80137d0 <DMA_List_GetCLLRNodeInfo+0x58>)
 801379a:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d00f      	beq.n	80137c2 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	2207      	movs	r2, #7
 80137a6:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 80137a8:	e00b      	b.n	80137c2 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 80137aa:	68bb      	ldr	r3, [r7, #8]
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d002      	beq.n	80137b6 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 80137b0:	68bb      	ldr	r3, [r7, #8]
 80137b2:	4a08      	ldr	r2, [pc, #32]	; (80137d4 <DMA_List_GetCLLRNodeInfo+0x5c>)
 80137b4:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d002      	beq.n	80137c2 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	2205      	movs	r2, #5
 80137c0:	601a      	str	r2, [r3, #0]
}
 80137c2:	bf00      	nop
 80137c4:	3714      	adds	r7, #20
 80137c6:	46bd      	mov	sp, r7
 80137c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137cc:	4770      	bx	lr
 80137ce:	bf00      	nop
 80137d0:	fe010000 	.word	0xfe010000
 80137d4:	f8010000 	.word	0xf8010000

080137d8 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 80137d8:	b480      	push	{r7}
 80137da:	b089      	sub	sp, #36	; 0x24
 80137dc:	af00      	add	r7, sp, #0
 80137de:	60f8      	str	r0, [r7, #12]
 80137e0:	60b9      	str	r1, [r7, #8]
 80137e2:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 80137e4:	2300      	movs	r3, #0
 80137e6:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 80137e8:	2300      	movs	r3, #0
 80137ea:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 80137ec:	2300      	movs	r3, #0
 80137ee:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	681b      	ldr	r3, [r3, #0]
 80137f4:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 80137f6:	68bb      	ldr	r3, [r7, #8]
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d142      	bne.n	8013882 <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 80137fc:	e01d      	b.n	801383a <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 80137fe:	69fb      	ldr	r3, [r7, #28]
 8013800:	2b00      	cmp	r3, #0
 8013802:	d107      	bne.n	8013814 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8013804:	68fb      	ldr	r3, [r7, #12]
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	461a      	mov	r2, r3
 801380a:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 801380e:	4013      	ands	r3, r2
 8013810:	61bb      	str	r3, [r7, #24]
 8013812:	e00f      	b.n	8013834 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8013814:	69bb      	ldr	r3, [r7, #24]
 8013816:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	681b      	ldr	r3, [r3, #0]
 801381c:	0c1b      	lsrs	r3, r3, #16
 801381e:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8013820:	69ba      	ldr	r2, [r7, #24]
 8013822:	4413      	add	r3, r2
 8013824:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8013826:	693b      	ldr	r3, [r7, #16]
 8013828:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 801382c:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8013830:	4013      	ands	r3, r2
 8013832:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8013834:	69fb      	ldr	r3, [r7, #28]
 8013836:	3301      	adds	r3, #1
 8013838:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	689b      	ldr	r3, [r3, #8]
 801383e:	69fa      	ldr	r2, [r7, #28]
 8013840:	429a      	cmp	r2, r3
 8013842:	d3dc      	bcc.n	80137fe <DMA_List_FindNode+0x26>
 8013844:	e029      	b.n	801389a <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8013846:	69fb      	ldr	r3, [r7, #28]
 8013848:	2b00      	cmp	r3, #0
 801384a:	d107      	bne.n	801385c <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	461a      	mov	r2, r3
 8013852:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8013856:	4013      	ands	r3, r2
 8013858:	61bb      	str	r3, [r7, #24]
 801385a:	e00f      	b.n	801387c <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 801385c:	69bb      	ldr	r3, [r7, #24]
 801385e:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	0c1b      	lsrs	r3, r3, #16
 8013866:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8013868:	69ba      	ldr	r2, [r7, #24]
 801386a:	4413      	add	r3, r2
 801386c:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 801386e:	693b      	ldr	r3, [r7, #16]
 8013870:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8013874:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8013878:	4013      	ands	r3, r2
 801387a:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 801387c:	69fb      	ldr	r3, [r7, #28]
 801387e:	3301      	adds	r3, #1
 8013880:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	689b      	ldr	r3, [r3, #8]
 8013886:	69fa      	ldr	r2, [r7, #28]
 8013888:	429a      	cmp	r2, r3
 801388a:	d206      	bcs.n	801389a <DMA_List_FindNode+0xc2>
 801388c:	68ba      	ldr	r2, [r7, #8]
 801388e:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8013892:	4013      	ands	r3, r2
 8013894:	69ba      	ldr	r2, [r7, #24]
 8013896:	429a      	cmp	r2, r3
 8013898:	d1d5      	bne.n	8013846 <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 801389a:	68bb      	ldr	r3, [r7, #8]
 801389c:	2b00      	cmp	r3, #0
 801389e:	d008      	beq.n	80138b2 <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 80138a0:	68ba      	ldr	r2, [r7, #8]
 80138a2:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80138a6:	4013      	ands	r3, r2
 80138a8:	69ba      	ldr	r2, [r7, #24]
 80138aa:	429a      	cmp	r2, r3
 80138ac:	d001      	beq.n	80138b2 <DMA_List_FindNode+0xda>
    {
      return 1U;
 80138ae:	2301      	movs	r3, #1
 80138b0:	e02b      	b.n	801390a <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	69fa      	ldr	r2, [r7, #28]
 80138b6:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	681b      	ldr	r3, [r3, #0]
 80138bc:	0c1b      	lsrs	r3, r3, #16
 80138be:	041b      	lsls	r3, r3, #16
 80138c0:	697a      	ldr	r2, [r7, #20]
 80138c2:	431a      	orrs	r2, r3
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	681b      	ldr	r3, [r3, #0]
 80138cc:	0c1b      	lsrs	r3, r3, #16
 80138ce:	041b      	lsls	r3, r3, #16
 80138d0:	69ba      	ldr	r2, [r7, #24]
 80138d2:	431a      	orrs	r2, r3
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	68db      	ldr	r3, [r3, #12]
 80138dc:	461a      	mov	r2, r3
 80138de:	693b      	ldr	r3, [r7, #16]
 80138e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d00f      	beq.n	8013908 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	68db      	ldr	r3, [r3, #12]
 80138ec:	461a      	mov	r2, r3
 80138ee:	693b      	ldr	r3, [r7, #16]
 80138f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80138f4:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80138f8:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	681b      	ldr	r3, [r3, #0]
 80138fe:	0c1b      	lsrs	r3, r3, #16
 8013900:	041b      	lsls	r3, r3, #16
 8013902:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8013908:	2300      	movs	r3, #0
}
 801390a:	4618      	mov	r0, r3
 801390c:	3724      	adds	r7, #36	; 0x24
 801390e:	46bd      	mov	sp, r7
 8013910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013914:	4770      	bx	lr

08013916 <DMA_List_ResetQueueNodes>:
  * @param  NodeInfo : Pointer to a DMA_NodeInQInfoTypeDef structure that contains node linked to queue information.
  * @retval None.
  */
static void DMA_List_ResetQueueNodes(DMA_QListTypeDef const *const pQList,
                                     DMA_NodeInQInfoTypeDef const *const NodeInfo)
{
 8013916:	b480      	push	{r7}
 8013918:	b087      	sub	sp, #28
 801391a:	af00      	add	r7, sp, #0
 801391c:	6078      	str	r0, [r7, #4]
 801391e:	6039      	str	r1, [r7, #0]
  uint32_t node_idx = 0U;
 8013920:	2300      	movs	r3, #0
 8013922:	617b      	str	r3, [r7, #20]
  uint32_t currentnode_address  = 0U;
 8013924:	2300      	movs	r3, #0
 8013926:	613b      	str	r3, [r7, #16]
  uint32_t previousnode_address;
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8013928:	683b      	ldr	r3, [r7, #0]
 801392a:	681b      	ldr	r3, [r3, #0]
 801392c:	60bb      	str	r3, [r7, #8]

  /* Check that previous node is linked to the selected queue */
  while (node_idx < pQList->NodeNumber)
 801392e:	e031      	b.n	8013994 <DMA_List_ResetQueueNodes+0x7e>
  {
    /* Get head node address */
    if (node_idx == 0U)
 8013930:	697b      	ldr	r3, [r7, #20]
 8013932:	2b00      	cmp	r3, #0
 8013934:	d110      	bne.n	8013958 <DMA_List_ResetQueueNodes+0x42>
    {
      previousnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	461a      	mov	r2, r3
 801393c:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8013940:	4013      	ands	r3, r2
 8013942:	60fb      	str	r3, [r7, #12]
      currentnode_address  = (pQList->Head->LinkRegisters[cllr_offset] & DMA_CLLR_LA);
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	68ba      	ldr	r2, [r7, #8]
 801394a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801394e:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8013952:	4013      	ands	r3, r2
 8013954:	613b      	str	r3, [r7, #16]
 8013956:	e00f      	b.n	8013978 <DMA_List_ResetQueueNodes+0x62>
    }
    /* Calculate nodes addresses */
    else
    {
      previousnode_address = currentnode_address;
 8013958:	693b      	ldr	r3, [r7, #16]
 801395a:	60fb      	str	r3, [r7, #12]
      currentnode_address =
        ((DMA_NodeTypeDef *)(currentnode_address +
                             ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	0c1b      	lsrs	r3, r3, #16
 8013962:	041b      	lsls	r3, r3, #16
        ((DMA_NodeTypeDef *)(currentnode_address +
 8013964:	693a      	ldr	r2, [r7, #16]
 8013966:	4413      	add	r3, r2
 8013968:	461a      	mov	r2, r3
                             ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 801396a:	68bb      	ldr	r3, [r7, #8]
 801396c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
      currentnode_address =
 8013970:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8013974:	4013      	ands	r3, r2
 8013976:	613b      	str	r3, [r7, #16]
    }

    /* Reset node */
    ((DMA_NodeTypeDef *)(previousnode_address +
                         ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] = 0U;
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	0c1b      	lsrs	r3, r3, #16
 801397e:	041b      	lsls	r3, r3, #16
    ((DMA_NodeTypeDef *)(previousnode_address +
 8013980:	68fa      	ldr	r2, [r7, #12]
 8013982:	4413      	add	r3, r2
 8013984:	4619      	mov	r1, r3
                         ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] = 0U;
 8013986:	68bb      	ldr	r3, [r7, #8]
 8013988:	2200      	movs	r2, #0
 801398a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    /* Increment node index */
    node_idx++;
 801398e:	697b      	ldr	r3, [r7, #20]
 8013990:	3301      	adds	r3, #1
 8013992:	617b      	str	r3, [r7, #20]
  while (node_idx < pQList->NodeNumber)
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	689b      	ldr	r3, [r3, #8]
 8013998:	697a      	ldr	r2, [r7, #20]
 801399a:	429a      	cmp	r2, r3
 801399c:	d3c8      	bcc.n	8013930 <DMA_List_ResetQueueNodes+0x1a>
  }
}
 801399e:	bf00      	nop
 80139a0:	bf00      	nop
 80139a2:	371c      	adds	r7, #28
 80139a4:	46bd      	mov	sp, r7
 80139a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139aa:	4770      	bx	lr

080139ac <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 80139ac:	b480      	push	{r7}
 80139ae:	b087      	sub	sp, #28
 80139b0:	af00      	add	r7, sp, #0
 80139b2:	60f8      	str	r0, [r7, #12]
 80139b4:	460b      	mov	r3, r1
 80139b6:	607a      	str	r2, [r7, #4]
 80139b8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80139ba:	2300      	movs	r3, #0
 80139bc:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80139be:	7afb      	ldrb	r3, [r7, #11]
 80139c0:	2b02      	cmp	r3, #2
 80139c2:	d011      	beq.n	80139e8 <HAL_EXTI_RegisterCallback+0x3c>
 80139c4:	2b02      	cmp	r3, #2
 80139c6:	dc13      	bgt.n	80139f0 <HAL_EXTI_RegisterCallback+0x44>
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d002      	beq.n	80139d2 <HAL_EXTI_RegisterCallback+0x26>
 80139cc:	2b01      	cmp	r3, #1
 80139ce:	d007      	beq.n	80139e0 <HAL_EXTI_RegisterCallback+0x34>
 80139d0:	e00e      	b.n	80139f0 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80139d2:	68fb      	ldr	r3, [r7, #12]
 80139d4:	687a      	ldr	r2, [r7, #4]
 80139d6:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	687a      	ldr	r2, [r7, #4]
 80139dc:	609a      	str	r2, [r3, #8]
      break;
 80139de:	e00a      	b.n	80139f6 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	687a      	ldr	r2, [r7, #4]
 80139e4:	605a      	str	r2, [r3, #4]
      break;
 80139e6:	e006      	b.n	80139f6 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 80139e8:	68fb      	ldr	r3, [r7, #12]
 80139ea:	687a      	ldr	r2, [r7, #4]
 80139ec:	609a      	str	r2, [r3, #8]
      break;
 80139ee:	e002      	b.n	80139f6 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 80139f0:	2301      	movs	r3, #1
 80139f2:	75fb      	strb	r3, [r7, #23]
      break;
 80139f4:	bf00      	nop
  }

  return status;
 80139f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80139f8:	4618      	mov	r0, r3
 80139fa:	371c      	adds	r7, #28
 80139fc:	46bd      	mov	sp, r7
 80139fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a02:	4770      	bx	lr

08013a04 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8013a04:	b480      	push	{r7}
 8013a06:	b083      	sub	sp, #12
 8013a08:	af00      	add	r7, sp, #0
 8013a0a:	6078      	str	r0, [r7, #4]
 8013a0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d101      	bne.n	8013a18 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8013a14:	2301      	movs	r3, #1
 8013a16:	e003      	b.n	8013a20 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	683a      	ldr	r2, [r7, #0]
 8013a1c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8013a1e:	2300      	movs	r3, #0
  }
}
 8013a20:	4618      	mov	r0, r3
 8013a22:	370c      	adds	r7, #12
 8013a24:	46bd      	mov	sp, r7
 8013a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a2a:	4770      	bx	lr

08013a2c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8013a2c:	b580      	push	{r7, lr}
 8013a2e:	b086      	sub	sp, #24
 8013a30:	af00      	add	r7, sp, #0
 8013a32:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	0c1b      	lsrs	r3, r3, #16
 8013a3a:	f003 0301 	and.w	r3, r3, #1
 8013a3e:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	681b      	ldr	r3, [r3, #0]
 8013a44:	f003 031f 	and.w	r3, r3, #31
 8013a48:	2201      	movs	r2, #1
 8013a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8013a4e:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8013a50:	697b      	ldr	r3, [r7, #20]
 8013a52:	015a      	lsls	r2, r3, #5
 8013a54:	4b17      	ldr	r3, [pc, #92]	; (8013ab4 <HAL_EXTI_IRQHandler+0x88>)
 8013a56:	4413      	add	r3, r2
 8013a58:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	693a      	ldr	r2, [r7, #16]
 8013a60:	4013      	ands	r3, r2
 8013a62:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8013a64:	68bb      	ldr	r3, [r7, #8]
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d009      	beq.n	8013a7e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8013a6a:	68fb      	ldr	r3, [r7, #12]
 8013a6c:	693a      	ldr	r2, [r7, #16]
 8013a6e:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	685b      	ldr	r3, [r3, #4]
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d002      	beq.n	8013a7e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	685b      	ldr	r3, [r3, #4]
 8013a7c:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8013a7e:	697b      	ldr	r3, [r7, #20]
 8013a80:	015a      	lsls	r2, r3, #5
 8013a82:	4b0d      	ldr	r3, [pc, #52]	; (8013ab8 <HAL_EXTI_IRQHandler+0x8c>)
 8013a84:	4413      	add	r3, r2
 8013a86:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	681b      	ldr	r3, [r3, #0]
 8013a8c:	693a      	ldr	r2, [r7, #16]
 8013a8e:	4013      	ands	r3, r2
 8013a90:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8013a92:	68bb      	ldr	r3, [r7, #8]
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d009      	beq.n	8013aac <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	693a      	ldr	r2, [r7, #16]
 8013a9c:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	689b      	ldr	r3, [r3, #8]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d002      	beq.n	8013aac <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	689b      	ldr	r3, [r3, #8]
 8013aaa:	4798      	blx	r3
    }
  }
}
 8013aac:	bf00      	nop
 8013aae:	3718      	adds	r7, #24
 8013ab0:	46bd      	mov	sp, r7
 8013ab2:	bd80      	pop	{r7, pc}
 8013ab4:	4602200c 	.word	0x4602200c
 8013ab8:	46022010 	.word	0x46022010

08013abc <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8013abc:	b480      	push	{r7}
 8013abe:	b089      	sub	sp, #36	; 0x24
 8013ac0:	af00      	add	r7, sp, #0
 8013ac2:	6078      	str	r0, [r7, #4]
 8013ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8013ac6:	2300      	movs	r3, #0
 8013ac8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8013ace:	e1ba      	b.n	8013e46 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8013ad0:	683b      	ldr	r3, [r7, #0]
 8013ad2:	681a      	ldr	r2, [r3, #0]
 8013ad4:	2101      	movs	r1, #1
 8013ad6:	697b      	ldr	r3, [r7, #20]
 8013ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8013adc:	4013      	ands	r3, r2
 8013ade:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8013ae0:	697b      	ldr	r3, [r7, #20]
 8013ae2:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	f000 81aa 	beq.w	8013e40 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	4a55      	ldr	r2, [pc, #340]	; (8013c44 <HAL_GPIO_Init+0x188>)
 8013af0:	4293      	cmp	r3, r2
 8013af2:	d15d      	bne.n	8013bb0 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8013afa:	2201      	movs	r2, #1
 8013afc:	697b      	ldr	r3, [r7, #20]
 8013afe:	fa02 f303 	lsl.w	r3, r2, r3
 8013b02:	43db      	mvns	r3, r3
 8013b04:	69fa      	ldr	r2, [r7, #28]
 8013b06:	4013      	ands	r3, r2
 8013b08:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8013b0a:	683b      	ldr	r3, [r7, #0]
 8013b0c:	685b      	ldr	r3, [r3, #4]
 8013b0e:	f003 0201 	and.w	r2, r3, #1
 8013b12:	697b      	ldr	r3, [r7, #20]
 8013b14:	fa02 f303 	lsl.w	r3, r2, r3
 8013b18:	69fa      	ldr	r2, [r7, #28]
 8013b1a:	4313      	orrs	r3, r2
 8013b1c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	69fa      	ldr	r2, [r7, #28]
 8013b22:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8013b24:	4a48      	ldr	r2, [pc, #288]	; (8013c48 <HAL_GPIO_Init+0x18c>)
 8013b26:	697b      	ldr	r3, [r7, #20]
 8013b28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013b2c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8013b2e:	4a46      	ldr	r2, [pc, #280]	; (8013c48 <HAL_GPIO_Init+0x18c>)
 8013b30:	697b      	ldr	r3, [r7, #20]
 8013b32:	00db      	lsls	r3, r3, #3
 8013b34:	4413      	add	r3, r2
 8013b36:	685b      	ldr	r3, [r3, #4]
 8013b38:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8013b3a:	69bb      	ldr	r3, [r7, #24]
 8013b3c:	08da      	lsrs	r2, r3, #3
 8013b3e:	693b      	ldr	r3, [r7, #16]
 8013b40:	3208      	adds	r2, #8
 8013b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b46:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8013b48:	69bb      	ldr	r3, [r7, #24]
 8013b4a:	f003 0307 	and.w	r3, r3, #7
 8013b4e:	009b      	lsls	r3, r3, #2
 8013b50:	220f      	movs	r2, #15
 8013b52:	fa02 f303 	lsl.w	r3, r2, r3
 8013b56:	43db      	mvns	r3, r3
 8013b58:	69fa      	ldr	r2, [r7, #28]
 8013b5a:	4013      	ands	r3, r2
 8013b5c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8013b5e:	69bb      	ldr	r3, [r7, #24]
 8013b60:	f003 0307 	and.w	r3, r3, #7
 8013b64:	009b      	lsls	r3, r3, #2
 8013b66:	220b      	movs	r2, #11
 8013b68:	fa02 f303 	lsl.w	r3, r2, r3
 8013b6c:	69fa      	ldr	r2, [r7, #28]
 8013b6e:	4313      	orrs	r3, r2
 8013b70:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8013b72:	69bb      	ldr	r3, [r7, #24]
 8013b74:	08da      	lsrs	r2, r3, #3
 8013b76:	693b      	ldr	r3, [r7, #16]
 8013b78:	3208      	adds	r2, #8
 8013b7a:	69f9      	ldr	r1, [r7, #28]
 8013b7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8013b80:	693b      	ldr	r3, [r7, #16]
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8013b86:	69bb      	ldr	r3, [r7, #24]
 8013b88:	005b      	lsls	r3, r3, #1
 8013b8a:	2203      	movs	r2, #3
 8013b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8013b90:	43db      	mvns	r3, r3
 8013b92:	69fa      	ldr	r2, [r7, #28]
 8013b94:	4013      	ands	r3, r2
 8013b96:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8013b98:	69bb      	ldr	r3, [r7, #24]
 8013b9a:	005b      	lsls	r3, r3, #1
 8013b9c:	2202      	movs	r2, #2
 8013b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8013ba2:	69fa      	ldr	r2, [r7, #28]
 8013ba4:	4313      	orrs	r3, r2
 8013ba6:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8013ba8:	693b      	ldr	r3, [r7, #16]
 8013baa:	69fa      	ldr	r2, [r7, #28]
 8013bac:	601a      	str	r2, [r3, #0]
 8013bae:	e067      	b.n	8013c80 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8013bb0:	683b      	ldr	r3, [r7, #0]
 8013bb2:	685b      	ldr	r3, [r3, #4]
 8013bb4:	2b02      	cmp	r3, #2
 8013bb6:	d003      	beq.n	8013bc0 <HAL_GPIO_Init+0x104>
 8013bb8:	683b      	ldr	r3, [r7, #0]
 8013bba:	685b      	ldr	r3, [r3, #4]
 8013bbc:	2b12      	cmp	r3, #18
 8013bbe:	d145      	bne.n	8013c4c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8013bc0:	697b      	ldr	r3, [r7, #20]
 8013bc2:	08da      	lsrs	r2, r3, #3
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	3208      	adds	r2, #8
 8013bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013bcc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8013bce:	697b      	ldr	r3, [r7, #20]
 8013bd0:	f003 0307 	and.w	r3, r3, #7
 8013bd4:	009b      	lsls	r3, r3, #2
 8013bd6:	220f      	movs	r2, #15
 8013bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8013bdc:	43db      	mvns	r3, r3
 8013bde:	69fa      	ldr	r2, [r7, #28]
 8013be0:	4013      	ands	r3, r2
 8013be2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8013be4:	683b      	ldr	r3, [r7, #0]
 8013be6:	691b      	ldr	r3, [r3, #16]
 8013be8:	f003 020f 	and.w	r2, r3, #15
 8013bec:	697b      	ldr	r3, [r7, #20]
 8013bee:	f003 0307 	and.w	r3, r3, #7
 8013bf2:	009b      	lsls	r3, r3, #2
 8013bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8013bf8:	69fa      	ldr	r2, [r7, #28]
 8013bfa:	4313      	orrs	r3, r2
 8013bfc:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8013bfe:	697b      	ldr	r3, [r7, #20]
 8013c00:	08da      	lsrs	r2, r3, #3
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	3208      	adds	r2, #8
 8013c06:	69f9      	ldr	r1, [r7, #28]
 8013c08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8013c0c:	693b      	ldr	r3, [r7, #16]
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8013c12:	69bb      	ldr	r3, [r7, #24]
 8013c14:	005b      	lsls	r3, r3, #1
 8013c16:	2203      	movs	r2, #3
 8013c18:	fa02 f303 	lsl.w	r3, r2, r3
 8013c1c:	43db      	mvns	r3, r3
 8013c1e:	69fa      	ldr	r2, [r7, #28]
 8013c20:	4013      	ands	r3, r2
 8013c22:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8013c24:	683b      	ldr	r3, [r7, #0]
 8013c26:	685b      	ldr	r3, [r3, #4]
 8013c28:	f003 0203 	and.w	r2, r3, #3
 8013c2c:	69bb      	ldr	r3, [r7, #24]
 8013c2e:	005b      	lsls	r3, r3, #1
 8013c30:	fa02 f303 	lsl.w	r3, r2, r3
 8013c34:	69fa      	ldr	r2, [r7, #28]
 8013c36:	4313      	orrs	r3, r2
 8013c38:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8013c3a:	693b      	ldr	r3, [r7, #16]
 8013c3c:	69fa      	ldr	r2, [r7, #28]
 8013c3e:	601a      	str	r2, [r3, #0]
 8013c40:	e01e      	b.n	8013c80 <HAL_GPIO_Init+0x1c4>
 8013c42:	bf00      	nop
 8013c44:	46020000 	.word	0x46020000
 8013c48:	080383cc 	.word	0x080383cc
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8013c4c:	693b      	ldr	r3, [r7, #16]
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8013c52:	69bb      	ldr	r3, [r7, #24]
 8013c54:	005b      	lsls	r3, r3, #1
 8013c56:	2203      	movs	r2, #3
 8013c58:	fa02 f303 	lsl.w	r3, r2, r3
 8013c5c:	43db      	mvns	r3, r3
 8013c5e:	69fa      	ldr	r2, [r7, #28]
 8013c60:	4013      	ands	r3, r2
 8013c62:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8013c64:	683b      	ldr	r3, [r7, #0]
 8013c66:	685b      	ldr	r3, [r3, #4]
 8013c68:	f003 0203 	and.w	r2, r3, #3
 8013c6c:	69bb      	ldr	r3, [r7, #24]
 8013c6e:	005b      	lsls	r3, r3, #1
 8013c70:	fa02 f303 	lsl.w	r3, r2, r3
 8013c74:	69fa      	ldr	r2, [r7, #28]
 8013c76:	4313      	orrs	r3, r2
 8013c78:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8013c7a:	693b      	ldr	r3, [r7, #16]
 8013c7c:	69fa      	ldr	r2, [r7, #28]
 8013c7e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8013c80:	683b      	ldr	r3, [r7, #0]
 8013c82:	685b      	ldr	r3, [r3, #4]
 8013c84:	2b01      	cmp	r3, #1
 8013c86:	d00b      	beq.n	8013ca0 <HAL_GPIO_Init+0x1e4>
 8013c88:	683b      	ldr	r3, [r7, #0]
 8013c8a:	685b      	ldr	r3, [r3, #4]
 8013c8c:	2b02      	cmp	r3, #2
 8013c8e:	d007      	beq.n	8013ca0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8013c90:	683b      	ldr	r3, [r7, #0]
 8013c92:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8013c94:	2b11      	cmp	r3, #17
 8013c96:	d003      	beq.n	8013ca0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8013c98:	683b      	ldr	r3, [r7, #0]
 8013c9a:	685b      	ldr	r3, [r3, #4]
 8013c9c:	2b12      	cmp	r3, #18
 8013c9e:	d130      	bne.n	8013d02 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8013ca0:	693b      	ldr	r3, [r7, #16]
 8013ca2:	689b      	ldr	r3, [r3, #8]
 8013ca4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8013ca6:	69bb      	ldr	r3, [r7, #24]
 8013ca8:	005b      	lsls	r3, r3, #1
 8013caa:	2203      	movs	r2, #3
 8013cac:	fa02 f303 	lsl.w	r3, r2, r3
 8013cb0:	43db      	mvns	r3, r3
 8013cb2:	69fa      	ldr	r2, [r7, #28]
 8013cb4:	4013      	ands	r3, r2
 8013cb6:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8013cb8:	683b      	ldr	r3, [r7, #0]
 8013cba:	68da      	ldr	r2, [r3, #12]
 8013cbc:	69bb      	ldr	r3, [r7, #24]
 8013cbe:	005b      	lsls	r3, r3, #1
 8013cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8013cc4:	69fa      	ldr	r2, [r7, #28]
 8013cc6:	4313      	orrs	r3, r2
 8013cc8:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8013cca:	693b      	ldr	r3, [r7, #16]
 8013ccc:	69fa      	ldr	r2, [r7, #28]
 8013cce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8013cd0:	693b      	ldr	r3, [r7, #16]
 8013cd2:	685b      	ldr	r3, [r3, #4]
 8013cd4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8013cd6:	2201      	movs	r2, #1
 8013cd8:	69bb      	ldr	r3, [r7, #24]
 8013cda:	fa02 f303 	lsl.w	r3, r2, r3
 8013cde:	43db      	mvns	r3, r3
 8013ce0:	69fa      	ldr	r2, [r7, #28]
 8013ce2:	4013      	ands	r3, r2
 8013ce4:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8013ce6:	683b      	ldr	r3, [r7, #0]
 8013ce8:	685b      	ldr	r3, [r3, #4]
 8013cea:	091b      	lsrs	r3, r3, #4
 8013cec:	f003 0201 	and.w	r2, r3, #1
 8013cf0:	69bb      	ldr	r3, [r7, #24]
 8013cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8013cf6:	69fa      	ldr	r2, [r7, #28]
 8013cf8:	4313      	orrs	r3, r2
 8013cfa:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8013cfc:	693b      	ldr	r3, [r7, #16]
 8013cfe:	69fa      	ldr	r2, [r7, #28]
 8013d00:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8013d02:	683b      	ldr	r3, [r7, #0]
 8013d04:	685b      	ldr	r3, [r3, #4]
 8013d06:	2b03      	cmp	r3, #3
 8013d08:	d017      	beq.n	8013d3a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8013d0a:	693b      	ldr	r3, [r7, #16]
 8013d0c:	68db      	ldr	r3, [r3, #12]
 8013d0e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8013d10:	69bb      	ldr	r3, [r7, #24]
 8013d12:	005b      	lsls	r3, r3, #1
 8013d14:	2203      	movs	r2, #3
 8013d16:	fa02 f303 	lsl.w	r3, r2, r3
 8013d1a:	43db      	mvns	r3, r3
 8013d1c:	69fa      	ldr	r2, [r7, #28]
 8013d1e:	4013      	ands	r3, r2
 8013d20:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8013d22:	683b      	ldr	r3, [r7, #0]
 8013d24:	689a      	ldr	r2, [r3, #8]
 8013d26:	69bb      	ldr	r3, [r7, #24]
 8013d28:	005b      	lsls	r3, r3, #1
 8013d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8013d2e:	69fa      	ldr	r2, [r7, #28]
 8013d30:	4313      	orrs	r3, r2
 8013d32:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8013d34:	693b      	ldr	r3, [r7, #16]
 8013d36:	69fa      	ldr	r2, [r7, #28]
 8013d38:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8013d3a:	683b      	ldr	r3, [r7, #0]
 8013d3c:	685b      	ldr	r3, [r3, #4]
 8013d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d07c      	beq.n	8013e40 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8013d46:	4a47      	ldr	r2, [pc, #284]	; (8013e64 <HAL_GPIO_Init+0x3a8>)
 8013d48:	697b      	ldr	r3, [r7, #20]
 8013d4a:	089b      	lsrs	r3, r3, #2
 8013d4c:	3318      	adds	r3, #24
 8013d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013d52:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8013d54:	697b      	ldr	r3, [r7, #20]
 8013d56:	f003 0303 	and.w	r3, r3, #3
 8013d5a:	00db      	lsls	r3, r3, #3
 8013d5c:	220f      	movs	r2, #15
 8013d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8013d62:	43db      	mvns	r3, r3
 8013d64:	69fa      	ldr	r2, [r7, #28]
 8013d66:	4013      	ands	r3, r2
 8013d68:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	0a9a      	lsrs	r2, r3, #10
 8013d6e:	4b3e      	ldr	r3, [pc, #248]	; (8013e68 <HAL_GPIO_Init+0x3ac>)
 8013d70:	4013      	ands	r3, r2
 8013d72:	697a      	ldr	r2, [r7, #20]
 8013d74:	f002 0203 	and.w	r2, r2, #3
 8013d78:	00d2      	lsls	r2, r2, #3
 8013d7a:	4093      	lsls	r3, r2
 8013d7c:	69fa      	ldr	r2, [r7, #28]
 8013d7e:	4313      	orrs	r3, r2
 8013d80:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8013d82:	4938      	ldr	r1, [pc, #224]	; (8013e64 <HAL_GPIO_Init+0x3a8>)
 8013d84:	697b      	ldr	r3, [r7, #20]
 8013d86:	089b      	lsrs	r3, r3, #2
 8013d88:	3318      	adds	r3, #24
 8013d8a:	69fa      	ldr	r2, [r7, #28]
 8013d8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8013d90:	4b34      	ldr	r3, [pc, #208]	; (8013e64 <HAL_GPIO_Init+0x3a8>)
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8013d96:	68fb      	ldr	r3, [r7, #12]
 8013d98:	43db      	mvns	r3, r3
 8013d9a:	69fa      	ldr	r2, [r7, #28]
 8013d9c:	4013      	ands	r3, r2
 8013d9e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8013da0:	683b      	ldr	r3, [r7, #0]
 8013da2:	685b      	ldr	r3, [r3, #4]
 8013da4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d003      	beq.n	8013db4 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8013dac:	69fa      	ldr	r2, [r7, #28]
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	4313      	orrs	r3, r2
 8013db2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8013db4:	4a2b      	ldr	r2, [pc, #172]	; (8013e64 <HAL_GPIO_Init+0x3a8>)
 8013db6:	69fb      	ldr	r3, [r7, #28]
 8013db8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8013dba:	4b2a      	ldr	r3, [pc, #168]	; (8013e64 <HAL_GPIO_Init+0x3a8>)
 8013dbc:	685b      	ldr	r3, [r3, #4]
 8013dbe:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	43db      	mvns	r3, r3
 8013dc4:	69fa      	ldr	r2, [r7, #28]
 8013dc6:	4013      	ands	r3, r2
 8013dc8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8013dca:	683b      	ldr	r3, [r7, #0]
 8013dcc:	685b      	ldr	r3, [r3, #4]
 8013dce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d003      	beq.n	8013dde <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8013dd6:	69fa      	ldr	r2, [r7, #28]
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	4313      	orrs	r3, r2
 8013ddc:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8013dde:	4a21      	ldr	r2, [pc, #132]	; (8013e64 <HAL_GPIO_Init+0x3a8>)
 8013de0:	69fb      	ldr	r3, [r7, #28]
 8013de2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8013de4:	4b1f      	ldr	r3, [pc, #124]	; (8013e64 <HAL_GPIO_Init+0x3a8>)
 8013de6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013dea:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	43db      	mvns	r3, r3
 8013df0:	69fa      	ldr	r2, [r7, #28]
 8013df2:	4013      	ands	r3, r2
 8013df4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8013df6:	683b      	ldr	r3, [r7, #0]
 8013df8:	685b      	ldr	r3, [r3, #4]
 8013dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d003      	beq.n	8013e0a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8013e02:	69fa      	ldr	r2, [r7, #28]
 8013e04:	68fb      	ldr	r3, [r7, #12]
 8013e06:	4313      	orrs	r3, r2
 8013e08:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8013e0a:	4a16      	ldr	r2, [pc, #88]	; (8013e64 <HAL_GPIO_Init+0x3a8>)
 8013e0c:	69fb      	ldr	r3, [r7, #28]
 8013e0e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8013e12:	4b14      	ldr	r3, [pc, #80]	; (8013e64 <HAL_GPIO_Init+0x3a8>)
 8013e14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013e18:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8013e1a:	68fb      	ldr	r3, [r7, #12]
 8013e1c:	43db      	mvns	r3, r3
 8013e1e:	69fa      	ldr	r2, [r7, #28]
 8013e20:	4013      	ands	r3, r2
 8013e22:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8013e24:	683b      	ldr	r3, [r7, #0]
 8013e26:	685b      	ldr	r3, [r3, #4]
 8013e28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d003      	beq.n	8013e38 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8013e30:	69fa      	ldr	r2, [r7, #28]
 8013e32:	68fb      	ldr	r3, [r7, #12]
 8013e34:	4313      	orrs	r3, r2
 8013e36:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8013e38:	4a0a      	ldr	r2, [pc, #40]	; (8013e64 <HAL_GPIO_Init+0x3a8>)
 8013e3a:	69fb      	ldr	r3, [r7, #28]
 8013e3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8013e40:	697b      	ldr	r3, [r7, #20]
 8013e42:	3301      	adds	r3, #1
 8013e44:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8013e46:	683b      	ldr	r3, [r7, #0]
 8013e48:	681a      	ldr	r2, [r3, #0]
 8013e4a:	697b      	ldr	r3, [r7, #20]
 8013e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	f47f ae3d 	bne.w	8013ad0 <HAL_GPIO_Init+0x14>
  }
}
 8013e56:	bf00      	nop
 8013e58:	bf00      	nop
 8013e5a:	3724      	adds	r7, #36	; 0x24
 8013e5c:	46bd      	mov	sp, r7
 8013e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e62:	4770      	bx	lr
 8013e64:	46022000 	.word	0x46022000
 8013e68:	002f7f7f 	.word	0x002f7f7f

08013e6c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8013e6c:	b480      	push	{r7}
 8013e6e:	b089      	sub	sp, #36	; 0x24
 8013e70:	af00      	add	r7, sp, #0
 8013e72:	6078      	str	r0, [r7, #4]
 8013e74:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8013e76:	2300      	movs	r3, #0
 8013e78:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8013e7e:	e0bc      	b.n	8013ffa <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8013e80:	2201      	movs	r2, #1
 8013e82:	69bb      	ldr	r3, [r7, #24]
 8013e84:	fa02 f303 	lsl.w	r3, r2, r3
 8013e88:	683a      	ldr	r2, [r7, #0]
 8013e8a:	4013      	ands	r3, r2
 8013e8c:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 8013e8e:	69bb      	ldr	r3, [r7, #24]
 8013e90:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 8013e92:	693b      	ldr	r3, [r7, #16]
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	f000 80ad 	beq.w	8013ff4 <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	4a5e      	ldr	r2, [pc, #376]	; (8014018 <HAL_GPIO_DeInit+0x1ac>)
 8013e9e:	4293      	cmp	r3, r2
 8013ea0:	d115      	bne.n	8013ece <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 8013ea2:	4a5e      	ldr	r2, [pc, #376]	; (801401c <HAL_GPIO_DeInit+0x1b0>)
 8013ea4:	69fb      	ldr	r3, [r7, #28]
 8013ea6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013eaa:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8013eac:	4a5b      	ldr	r2, [pc, #364]	; (801401c <HAL_GPIO_DeInit+0x1b0>)
 8013eae:	69bb      	ldr	r3, [r7, #24]
 8013eb0:	00db      	lsls	r3, r3, #3
 8013eb2:	4413      	add	r3, r2
 8013eb4:	685b      	ldr	r3, [r3, #4]
 8013eb6:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 8013eb8:	4b57      	ldr	r3, [pc, #348]	; (8014018 <HAL_GPIO_DeInit+0x1ac>)
 8013eba:	681a      	ldr	r2, [r3, #0]
 8013ebc:	2101      	movs	r1, #1
 8013ebe:	69fb      	ldr	r3, [r7, #28]
 8013ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8013ec4:	43db      	mvns	r3, r3
 8013ec6:	4954      	ldr	r1, [pc, #336]	; (8014018 <HAL_GPIO_DeInit+0x1ac>)
 8013ec8:	4013      	ands	r3, r2
 8013eca:	600b      	str	r3, [r1, #0]
 8013ecc:	e053      	b.n	8013f76 <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 8013ece:	4a54      	ldr	r2, [pc, #336]	; (8014020 <HAL_GPIO_DeInit+0x1b4>)
 8013ed0:	69bb      	ldr	r3, [r7, #24]
 8013ed2:	089b      	lsrs	r3, r3, #2
 8013ed4:	3318      	adds	r3, #24
 8013ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013eda:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8013edc:	69bb      	ldr	r3, [r7, #24]
 8013ede:	f003 0303 	and.w	r3, r3, #3
 8013ee2:	00db      	lsls	r3, r3, #3
 8013ee4:	220f      	movs	r2, #15
 8013ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8013eea:	68fa      	ldr	r2, [r7, #12]
 8013eec:	4013      	ands	r3, r2
 8013eee:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	0a9a      	lsrs	r2, r3, #10
 8013ef4:	4b4b      	ldr	r3, [pc, #300]	; (8014024 <HAL_GPIO_DeInit+0x1b8>)
 8013ef6:	4013      	ands	r3, r2
 8013ef8:	69ba      	ldr	r2, [r7, #24]
 8013efa:	f002 0203 	and.w	r2, r2, #3
 8013efe:	00d2      	lsls	r2, r2, #3
 8013f00:	4093      	lsls	r3, r2
 8013f02:	68fa      	ldr	r2, [r7, #12]
 8013f04:	429a      	cmp	r2, r3
 8013f06:	d136      	bne.n	8013f76 <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 8013f08:	4b45      	ldr	r3, [pc, #276]	; (8014020 <HAL_GPIO_DeInit+0x1b4>)
 8013f0a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8013f0e:	693b      	ldr	r3, [r7, #16]
 8013f10:	43db      	mvns	r3, r3
 8013f12:	4943      	ldr	r1, [pc, #268]	; (8014020 <HAL_GPIO_DeInit+0x1b4>)
 8013f14:	4013      	ands	r3, r2
 8013f16:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
          EXTI->EMR1 &= ~(iocurrent);
 8013f1a:	4b41      	ldr	r3, [pc, #260]	; (8014020 <HAL_GPIO_DeInit+0x1b4>)
 8013f1c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8013f20:	693b      	ldr	r3, [r7, #16]
 8013f22:	43db      	mvns	r3, r3
 8013f24:	493e      	ldr	r1, [pc, #248]	; (8014020 <HAL_GPIO_DeInit+0x1b4>)
 8013f26:	4013      	ands	r3, r2
 8013f28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 8013f2c:	4b3c      	ldr	r3, [pc, #240]	; (8014020 <HAL_GPIO_DeInit+0x1b4>)
 8013f2e:	681a      	ldr	r2, [r3, #0]
 8013f30:	693b      	ldr	r3, [r7, #16]
 8013f32:	43db      	mvns	r3, r3
 8013f34:	493a      	ldr	r1, [pc, #232]	; (8014020 <HAL_GPIO_DeInit+0x1b4>)
 8013f36:	4013      	ands	r3, r2
 8013f38:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 8013f3a:	4b39      	ldr	r3, [pc, #228]	; (8014020 <HAL_GPIO_DeInit+0x1b4>)
 8013f3c:	685a      	ldr	r2, [r3, #4]
 8013f3e:	693b      	ldr	r3, [r7, #16]
 8013f40:	43db      	mvns	r3, r3
 8013f42:	4937      	ldr	r1, [pc, #220]	; (8014020 <HAL_GPIO_DeInit+0x1b4>)
 8013f44:	4013      	ands	r3, r2
 8013f46:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 8013f48:	69bb      	ldr	r3, [r7, #24]
 8013f4a:	f003 0303 	and.w	r3, r3, #3
 8013f4e:	00db      	lsls	r3, r3, #3
 8013f50:	220f      	movs	r2, #15
 8013f52:	fa02 f303 	lsl.w	r3, r2, r3
 8013f56:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 8013f58:	4a31      	ldr	r2, [pc, #196]	; (8014020 <HAL_GPIO_DeInit+0x1b4>)
 8013f5a:	69bb      	ldr	r3, [r7, #24]
 8013f5c:	089b      	lsrs	r3, r3, #2
 8013f5e:	3318      	adds	r3, #24
 8013f60:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	43da      	mvns	r2, r3
 8013f68:	482d      	ldr	r0, [pc, #180]	; (8014020 <HAL_GPIO_DeInit+0x1b4>)
 8013f6a:	69bb      	ldr	r3, [r7, #24]
 8013f6c:	089b      	lsrs	r3, r3, #2
 8013f6e:	400a      	ands	r2, r1
 8013f70:	3318      	adds	r3, #24
 8013f72:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * 2U));
 8013f76:	697b      	ldr	r3, [r7, #20]
 8013f78:	681a      	ldr	r2, [r3, #0]
 8013f7a:	69fb      	ldr	r3, [r7, #28]
 8013f7c:	005b      	lsls	r3, r3, #1
 8013f7e:	2103      	movs	r1, #3
 8013f80:	fa01 f303 	lsl.w	r3, r1, r3
 8013f84:	431a      	orrs	r2, r3
 8013f86:	697b      	ldr	r3, [r7, #20]
 8013f88:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * 4U));
 8013f8a:	69fb      	ldr	r3, [r7, #28]
 8013f8c:	08da      	lsrs	r2, r3, #3
 8013f8e:	697b      	ldr	r3, [r7, #20]
 8013f90:	3208      	adds	r2, #8
 8013f92:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013f96:	69fb      	ldr	r3, [r7, #28]
 8013f98:	f003 0307 	and.w	r3, r3, #7
 8013f9c:	009b      	lsls	r3, r3, #2
 8013f9e:	220f      	movs	r2, #15
 8013fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8013fa4:	43db      	mvns	r3, r3
 8013fa6:	69fa      	ldr	r2, [r7, #28]
 8013fa8:	08d2      	lsrs	r2, r2, #3
 8013faa:	4019      	ands	r1, r3
 8013fac:	697b      	ldr	r3, [r7, #20]
 8013fae:	3208      	adds	r2, #8
 8013fb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8013fb4:	697b      	ldr	r3, [r7, #20]
 8013fb6:	689a      	ldr	r2, [r3, #8]
 8013fb8:	69fb      	ldr	r3, [r7, #28]
 8013fba:	005b      	lsls	r3, r3, #1
 8013fbc:	2103      	movs	r1, #3
 8013fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8013fc2:	43db      	mvns	r3, r3
 8013fc4:	401a      	ands	r2, r3
 8013fc6:	697b      	ldr	r3, [r7, #20]
 8013fc8:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 8013fca:	697b      	ldr	r3, [r7, #20]
 8013fcc:	685a      	ldr	r2, [r3, #4]
 8013fce:	2101      	movs	r1, #1
 8013fd0:	69fb      	ldr	r3, [r7, #28]
 8013fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8013fd6:	43db      	mvns	r3, r3
 8013fd8:	401a      	ands	r2, r3
 8013fda:	697b      	ldr	r3, [r7, #20]
 8013fdc:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8013fde:	697b      	ldr	r3, [r7, #20]
 8013fe0:	68da      	ldr	r2, [r3, #12]
 8013fe2:	69fb      	ldr	r3, [r7, #28]
 8013fe4:	005b      	lsls	r3, r3, #1
 8013fe6:	2103      	movs	r1, #3
 8013fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8013fec:	43db      	mvns	r3, r3
 8013fee:	401a      	ands	r2, r3
 8013ff0:	697b      	ldr	r3, [r7, #20]
 8013ff2:	60da      	str	r2, [r3, #12]
    }

    position++;
 8013ff4:	69bb      	ldr	r3, [r7, #24]
 8013ff6:	3301      	adds	r3, #1
 8013ff8:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 8013ffa:	683a      	ldr	r2, [r7, #0]
 8013ffc:	69bb      	ldr	r3, [r7, #24]
 8013ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8014002:	2b00      	cmp	r3, #0
 8014004:	f47f af3c 	bne.w	8013e80 <HAL_GPIO_DeInit+0x14>
  }
}
 8014008:	bf00      	nop
 801400a:	bf00      	nop
 801400c:	3724      	adds	r7, #36	; 0x24
 801400e:	46bd      	mov	sp, r7
 8014010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014014:	4770      	bx	lr
 8014016:	bf00      	nop
 8014018:	46020000 	.word	0x46020000
 801401c:	080383cc 	.word	0x080383cc
 8014020:	46022000 	.word	0x46022000
 8014024:	002f7f7f 	.word	0x002f7f7f

08014028 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8014028:	b480      	push	{r7}
 801402a:	b085      	sub	sp, #20
 801402c:	af00      	add	r7, sp, #0
 801402e:	6078      	str	r0, [r7, #4]
 8014030:	460b      	mov	r3, r1
 8014032:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	691a      	ldr	r2, [r3, #16]
 8014038:	887b      	ldrh	r3, [r7, #2]
 801403a:	4013      	ands	r3, r2
 801403c:	2b00      	cmp	r3, #0
 801403e:	d002      	beq.n	8014046 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8014040:	2301      	movs	r3, #1
 8014042:	73fb      	strb	r3, [r7, #15]
 8014044:	e001      	b.n	801404a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8014046:	2300      	movs	r3, #0
 8014048:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 801404a:	7bfb      	ldrb	r3, [r7, #15]
}
 801404c:	4618      	mov	r0, r3
 801404e:	3714      	adds	r7, #20
 8014050:	46bd      	mov	sp, r7
 8014052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014056:	4770      	bx	lr

08014058 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8014058:	b480      	push	{r7}
 801405a:	b083      	sub	sp, #12
 801405c:	af00      	add	r7, sp, #0
 801405e:	6078      	str	r0, [r7, #4]
 8014060:	460b      	mov	r3, r1
 8014062:	807b      	strh	r3, [r7, #2]
 8014064:	4613      	mov	r3, r2
 8014066:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8014068:	787b      	ldrb	r3, [r7, #1]
 801406a:	2b00      	cmp	r3, #0
 801406c:	d003      	beq.n	8014076 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 801406e:	887a      	ldrh	r2, [r7, #2]
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8014074:	e002      	b.n	801407c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8014076:	887a      	ldrh	r2, [r7, #2]
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	629a      	str	r2, [r3, #40]	; 0x28
}
 801407c:	bf00      	nop
 801407e:	370c      	adds	r7, #12
 8014080:	46bd      	mov	sp, r7
 8014082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014086:	4770      	bx	lr

08014088 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8014088:	b480      	push	{r7}
 801408a:	b085      	sub	sp, #20
 801408c:	af00      	add	r7, sp, #0
 801408e:	6078      	str	r0, [r7, #4]
 8014090:	460b      	mov	r3, r1
 8014092:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	695b      	ldr	r3, [r3, #20]
 8014098:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 801409a:	887a      	ldrh	r2, [r7, #2]
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	4013      	ands	r3, r2
 80140a0:	041a      	lsls	r2, r3, #16
 80140a2:	68fb      	ldr	r3, [r7, #12]
 80140a4:	43d9      	mvns	r1, r3
 80140a6:	887b      	ldrh	r3, [r7, #2]
 80140a8:	400b      	ands	r3, r1
 80140aa:	431a      	orrs	r2, r3
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	619a      	str	r2, [r3, #24]
}
 80140b0:	bf00      	nop
 80140b2:	3714      	adds	r7, #20
 80140b4:	46bd      	mov	sp, r7
 80140b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140ba:	4770      	bx	lr

080140bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80140bc:	b580      	push	{r7, lr}
 80140be:	b082      	sub	sp, #8
 80140c0:	af00      	add	r7, sp, #0
 80140c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d101      	bne.n	80140ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80140ca:	2301      	movs	r3, #1
 80140cc:	e08d      	b.n	80141ea <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80140d4:	b2db      	uxtb	r3, r3
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d106      	bne.n	80140e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	2200      	movs	r2, #0
 80140de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80140e2:	6878      	ldr	r0, [r7, #4]
 80140e4:	f000 f8b4 	bl	8014250 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	2224      	movs	r2, #36	; 0x24
 80140ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	681a      	ldr	r2, [r3, #0]
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	681b      	ldr	r3, [r3, #0]
 80140fa:	f022 0201 	bic.w	r2, r2, #1
 80140fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	685a      	ldr	r2, [r3, #4]
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	681b      	ldr	r3, [r3, #0]
 8014108:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801410c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	681b      	ldr	r3, [r3, #0]
 8014112:	689a      	ldr	r2, [r3, #8]
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	681b      	ldr	r3, [r3, #0]
 8014118:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801411c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	68db      	ldr	r3, [r3, #12]
 8014122:	2b01      	cmp	r3, #1
 8014124:	d107      	bne.n	8014136 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	689a      	ldr	r2, [r3, #8]
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	681b      	ldr	r3, [r3, #0]
 801412e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8014132:	609a      	str	r2, [r3, #8]
 8014134:	e006      	b.n	8014144 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	689a      	ldr	r2, [r3, #8]
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	681b      	ldr	r3, [r3, #0]
 801413e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8014142:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	68db      	ldr	r3, [r3, #12]
 8014148:	2b02      	cmp	r3, #2
 801414a:	d108      	bne.n	801415e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	681b      	ldr	r3, [r3, #0]
 8014150:	685a      	ldr	r2, [r3, #4]
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	681b      	ldr	r3, [r3, #0]
 8014156:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801415a:	605a      	str	r2, [r3, #4]
 801415c:	e007      	b.n	801416e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	681b      	ldr	r3, [r3, #0]
 8014162:	685a      	ldr	r2, [r3, #4]
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	681b      	ldr	r3, [r3, #0]
 8014168:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801416c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	681b      	ldr	r3, [r3, #0]
 8014172:	685b      	ldr	r3, [r3, #4]
 8014174:	687a      	ldr	r2, [r7, #4]
 8014176:	6812      	ldr	r2, [r2, #0]
 8014178:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801417c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014180:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	68da      	ldr	r2, [r3, #12]
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8014190:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	691a      	ldr	r2, [r3, #16]
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	695b      	ldr	r3, [r3, #20]
 801419a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	699b      	ldr	r3, [r3, #24]
 80141a2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	430a      	orrs	r2, r1
 80141aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	69d9      	ldr	r1, [r3, #28]
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	6a1a      	ldr	r2, [r3, #32]
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	430a      	orrs	r2, r1
 80141ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	681b      	ldr	r3, [r3, #0]
 80141c0:	681a      	ldr	r2, [r3, #0]
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	681b      	ldr	r3, [r3, #0]
 80141c6:	f042 0201 	orr.w	r2, r2, #1
 80141ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	2200      	movs	r2, #0
 80141d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	2220      	movs	r2, #32
 80141d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	2200      	movs	r2, #0
 80141de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	2200      	movs	r2, #0
 80141e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80141e8:	2300      	movs	r3, #0
}
 80141ea:	4618      	mov	r0, r3
 80141ec:	3708      	adds	r7, #8
 80141ee:	46bd      	mov	sp, r7
 80141f0:	bd80      	pop	{r7, pc}

080141f2 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80141f2:	b580      	push	{r7, lr}
 80141f4:	b082      	sub	sp, #8
 80141f6:	af00      	add	r7, sp, #0
 80141f8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d101      	bne.n	8014204 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8014200:	2301      	movs	r3, #1
 8014202:	e021      	b.n	8014248 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	2224      	movs	r2, #36	; 0x24
 8014208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	681b      	ldr	r3, [r3, #0]
 8014210:	681a      	ldr	r2, [r3, #0]
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	681b      	ldr	r3, [r3, #0]
 8014216:	f022 0201 	bic.w	r2, r2, #1
 801421a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 801421c:	6878      	ldr	r0, [r7, #4]
 801421e:	f000 f821 	bl	8014264 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	2200      	movs	r2, #0
 8014226:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	2200      	movs	r2, #0
 801422c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	2200      	movs	r2, #0
 8014234:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	2200      	movs	r2, #0
 801423a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	2200      	movs	r2, #0
 8014242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8014246:	2300      	movs	r3, #0
}
 8014248:	4618      	mov	r0, r3
 801424a:	3708      	adds	r7, #8
 801424c:	46bd      	mov	sp, r7
 801424e:	bd80      	pop	{r7, pc}

08014250 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8014250:	b480      	push	{r7}
 8014252:	b083      	sub	sp, #12
 8014254:	af00      	add	r7, sp, #0
 8014256:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8014258:	bf00      	nop
 801425a:	370c      	adds	r7, #12
 801425c:	46bd      	mov	sp, r7
 801425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014262:	4770      	bx	lr

08014264 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8014264:	b480      	push	{r7}
 8014266:	b083      	sub	sp, #12
 8014268:	af00      	add	r7, sp, #0
 801426a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 801426c:	bf00      	nop
 801426e:	370c      	adds	r7, #12
 8014270:	46bd      	mov	sp, r7
 8014272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014276:	4770      	bx	lr

08014278 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014278:	b580      	push	{r7, lr}
 801427a:	b088      	sub	sp, #32
 801427c:	af02      	add	r7, sp, #8
 801427e:	60f8      	str	r0, [r7, #12]
 8014280:	4608      	mov	r0, r1
 8014282:	4611      	mov	r1, r2
 8014284:	461a      	mov	r2, r3
 8014286:	4603      	mov	r3, r0
 8014288:	817b      	strh	r3, [r7, #10]
 801428a:	460b      	mov	r3, r1
 801428c:	813b      	strh	r3, [r7, #8]
 801428e:	4613      	mov	r3, r2
 8014290:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8014292:	68fb      	ldr	r3, [r7, #12]
 8014294:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8014298:	b2db      	uxtb	r3, r3
 801429a:	2b20      	cmp	r3, #32
 801429c:	f040 80f9 	bne.w	8014492 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80142a0:	6a3b      	ldr	r3, [r7, #32]
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d002      	beq.n	80142ac <HAL_I2C_Mem_Write+0x34>
 80142a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d105      	bne.n	80142b8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80142b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80142b4:	2301      	movs	r3, #1
 80142b6:	e0ed      	b.n	8014494 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80142b8:	68fb      	ldr	r3, [r7, #12]
 80142ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80142be:	2b01      	cmp	r3, #1
 80142c0:	d101      	bne.n	80142c6 <HAL_I2C_Mem_Write+0x4e>
 80142c2:	2302      	movs	r3, #2
 80142c4:	e0e6      	b.n	8014494 <HAL_I2C_Mem_Write+0x21c>
 80142c6:	68fb      	ldr	r3, [r7, #12]
 80142c8:	2201      	movs	r2, #1
 80142ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80142ce:	f7fd fa09 	bl	80116e4 <HAL_GetTick>
 80142d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80142d4:	697b      	ldr	r3, [r7, #20]
 80142d6:	9300      	str	r3, [sp, #0]
 80142d8:	2319      	movs	r3, #25
 80142da:	2201      	movs	r2, #1
 80142dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80142e0:	68f8      	ldr	r0, [r7, #12]
 80142e2:	f000 fbe7 	bl	8014ab4 <I2C_WaitOnFlagUntilTimeout>
 80142e6:	4603      	mov	r3, r0
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d001      	beq.n	80142f0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80142ec:	2301      	movs	r3, #1
 80142ee:	e0d1      	b.n	8014494 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80142f0:	68fb      	ldr	r3, [r7, #12]
 80142f2:	2221      	movs	r2, #33	; 0x21
 80142f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80142f8:	68fb      	ldr	r3, [r7, #12]
 80142fa:	2240      	movs	r2, #64	; 0x40
 80142fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8014300:	68fb      	ldr	r3, [r7, #12]
 8014302:	2200      	movs	r2, #0
 8014304:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8014306:	68fb      	ldr	r3, [r7, #12]
 8014308:	6a3a      	ldr	r2, [r7, #32]
 801430a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 801430c:	68fb      	ldr	r3, [r7, #12]
 801430e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014310:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8014312:	68fb      	ldr	r3, [r7, #12]
 8014314:	2200      	movs	r2, #0
 8014316:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8014318:	88f8      	ldrh	r0, [r7, #6]
 801431a:	893a      	ldrh	r2, [r7, #8]
 801431c:	8979      	ldrh	r1, [r7, #10]
 801431e:	697b      	ldr	r3, [r7, #20]
 8014320:	9301      	str	r3, [sp, #4]
 8014322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014324:	9300      	str	r3, [sp, #0]
 8014326:	4603      	mov	r3, r0
 8014328:	68f8      	ldr	r0, [r7, #12]
 801432a:	f000 faf7 	bl	801491c <I2C_RequestMemoryWrite>
 801432e:	4603      	mov	r3, r0
 8014330:	2b00      	cmp	r3, #0
 8014332:	d005      	beq.n	8014340 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	2200      	movs	r2, #0
 8014338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 801433c:	2301      	movs	r3, #1
 801433e:	e0a9      	b.n	8014494 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014340:	68fb      	ldr	r3, [r7, #12]
 8014342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014344:	b29b      	uxth	r3, r3
 8014346:	2bff      	cmp	r3, #255	; 0xff
 8014348:	d90e      	bls.n	8014368 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801434a:	68fb      	ldr	r3, [r7, #12]
 801434c:	22ff      	movs	r2, #255	; 0xff
 801434e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014354:	b2da      	uxtb	r2, r3
 8014356:	8979      	ldrh	r1, [r7, #10]
 8014358:	2300      	movs	r3, #0
 801435a:	9300      	str	r3, [sp, #0]
 801435c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8014360:	68f8      	ldr	r0, [r7, #12]
 8014362:	f000 fd61 	bl	8014e28 <I2C_TransferConfig>
 8014366:	e00f      	b.n	8014388 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8014368:	68fb      	ldr	r3, [r7, #12]
 801436a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801436c:	b29a      	uxth	r2, r3
 801436e:	68fb      	ldr	r3, [r7, #12]
 8014370:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8014372:	68fb      	ldr	r3, [r7, #12]
 8014374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014376:	b2da      	uxtb	r2, r3
 8014378:	8979      	ldrh	r1, [r7, #10]
 801437a:	2300      	movs	r3, #0
 801437c:	9300      	str	r3, [sp, #0]
 801437e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8014382:	68f8      	ldr	r0, [r7, #12]
 8014384:	f000 fd50 	bl	8014e28 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8014388:	697a      	ldr	r2, [r7, #20]
 801438a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801438c:	68f8      	ldr	r0, [r7, #12]
 801438e:	f000 fbe0 	bl	8014b52 <I2C_WaitOnTXISFlagUntilTimeout>
 8014392:	4603      	mov	r3, r0
 8014394:	2b00      	cmp	r3, #0
 8014396:	d001      	beq.n	801439c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8014398:	2301      	movs	r3, #1
 801439a:	e07b      	b.n	8014494 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801439c:	68fb      	ldr	r3, [r7, #12]
 801439e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143a0:	781a      	ldrb	r2, [r3, #0]
 80143a2:	68fb      	ldr	r3, [r7, #12]
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80143a8:	68fb      	ldr	r3, [r7, #12]
 80143aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143ac:	1c5a      	adds	r2, r3, #1
 80143ae:	68fb      	ldr	r3, [r7, #12]
 80143b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80143b2:	68fb      	ldr	r3, [r7, #12]
 80143b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80143b6:	b29b      	uxth	r3, r3
 80143b8:	3b01      	subs	r3, #1
 80143ba:	b29a      	uxth	r2, r3
 80143bc:	68fb      	ldr	r3, [r7, #12]
 80143be:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80143c0:	68fb      	ldr	r3, [r7, #12]
 80143c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80143c4:	3b01      	subs	r3, #1
 80143c6:	b29a      	uxth	r2, r3
 80143c8:	68fb      	ldr	r3, [r7, #12]
 80143ca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80143cc:	68fb      	ldr	r3, [r7, #12]
 80143ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80143d0:	b29b      	uxth	r3, r3
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d034      	beq.n	8014440 <HAL_I2C_Mem_Write+0x1c8>
 80143d6:	68fb      	ldr	r3, [r7, #12]
 80143d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d130      	bne.n	8014440 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80143de:	697b      	ldr	r3, [r7, #20]
 80143e0:	9300      	str	r3, [sp, #0]
 80143e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143e4:	2200      	movs	r2, #0
 80143e6:	2180      	movs	r1, #128	; 0x80
 80143e8:	68f8      	ldr	r0, [r7, #12]
 80143ea:	f000 fb63 	bl	8014ab4 <I2C_WaitOnFlagUntilTimeout>
 80143ee:	4603      	mov	r3, r0
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	d001      	beq.n	80143f8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80143f4:	2301      	movs	r3, #1
 80143f6:	e04d      	b.n	8014494 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80143f8:	68fb      	ldr	r3, [r7, #12]
 80143fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80143fc:	b29b      	uxth	r3, r3
 80143fe:	2bff      	cmp	r3, #255	; 0xff
 8014400:	d90e      	bls.n	8014420 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8014402:	68fb      	ldr	r3, [r7, #12]
 8014404:	22ff      	movs	r2, #255	; 0xff
 8014406:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801440c:	b2da      	uxtb	r2, r3
 801440e:	8979      	ldrh	r1, [r7, #10]
 8014410:	2300      	movs	r3, #0
 8014412:	9300      	str	r3, [sp, #0]
 8014414:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8014418:	68f8      	ldr	r0, [r7, #12]
 801441a:	f000 fd05 	bl	8014e28 <I2C_TransferConfig>
 801441e:	e00f      	b.n	8014440 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8014420:	68fb      	ldr	r3, [r7, #12]
 8014422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014424:	b29a      	uxth	r2, r3
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801442a:	68fb      	ldr	r3, [r7, #12]
 801442c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801442e:	b2da      	uxtb	r2, r3
 8014430:	8979      	ldrh	r1, [r7, #10]
 8014432:	2300      	movs	r3, #0
 8014434:	9300      	str	r3, [sp, #0]
 8014436:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801443a:	68f8      	ldr	r0, [r7, #12]
 801443c:	f000 fcf4 	bl	8014e28 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014444:	b29b      	uxth	r3, r3
 8014446:	2b00      	cmp	r3, #0
 8014448:	d19e      	bne.n	8014388 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801444a:	697a      	ldr	r2, [r7, #20]
 801444c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801444e:	68f8      	ldr	r0, [r7, #12]
 8014450:	f000 fbc6 	bl	8014be0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8014454:	4603      	mov	r3, r0
 8014456:	2b00      	cmp	r3, #0
 8014458:	d001      	beq.n	801445e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 801445a:	2301      	movs	r3, #1
 801445c:	e01a      	b.n	8014494 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801445e:	68fb      	ldr	r3, [r7, #12]
 8014460:	681b      	ldr	r3, [r3, #0]
 8014462:	2220      	movs	r2, #32
 8014464:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8014466:	68fb      	ldr	r3, [r7, #12]
 8014468:	681b      	ldr	r3, [r3, #0]
 801446a:	6859      	ldr	r1, [r3, #4]
 801446c:	68fb      	ldr	r3, [r7, #12]
 801446e:	681a      	ldr	r2, [r3, #0]
 8014470:	4b0a      	ldr	r3, [pc, #40]	; (801449c <HAL_I2C_Mem_Write+0x224>)
 8014472:	400b      	ands	r3, r1
 8014474:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8014476:	68fb      	ldr	r3, [r7, #12]
 8014478:	2220      	movs	r2, #32
 801447a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801447e:	68fb      	ldr	r3, [r7, #12]
 8014480:	2200      	movs	r2, #0
 8014482:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8014486:	68fb      	ldr	r3, [r7, #12]
 8014488:	2200      	movs	r2, #0
 801448a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801448e:	2300      	movs	r3, #0
 8014490:	e000      	b.n	8014494 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8014492:	2302      	movs	r3, #2
  }
}
 8014494:	4618      	mov	r0, r3
 8014496:	3718      	adds	r7, #24
 8014498:	46bd      	mov	sp, r7
 801449a:	bd80      	pop	{r7, pc}
 801449c:	fe00e800 	.word	0xfe00e800

080144a0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80144a0:	b580      	push	{r7, lr}
 80144a2:	b088      	sub	sp, #32
 80144a4:	af02      	add	r7, sp, #8
 80144a6:	60f8      	str	r0, [r7, #12]
 80144a8:	4608      	mov	r0, r1
 80144aa:	4611      	mov	r1, r2
 80144ac:	461a      	mov	r2, r3
 80144ae:	4603      	mov	r3, r0
 80144b0:	817b      	strh	r3, [r7, #10]
 80144b2:	460b      	mov	r3, r1
 80144b4:	813b      	strh	r3, [r7, #8]
 80144b6:	4613      	mov	r3, r2
 80144b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80144ba:	68fb      	ldr	r3, [r7, #12]
 80144bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80144c0:	b2db      	uxtb	r3, r3
 80144c2:	2b20      	cmp	r3, #32
 80144c4:	f040 80fd 	bne.w	80146c2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80144c8:	6a3b      	ldr	r3, [r7, #32]
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d002      	beq.n	80144d4 <HAL_I2C_Mem_Read+0x34>
 80144ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d105      	bne.n	80144e0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80144d4:	68fb      	ldr	r3, [r7, #12]
 80144d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80144da:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80144dc:	2301      	movs	r3, #1
 80144de:	e0f1      	b.n	80146c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80144e0:	68fb      	ldr	r3, [r7, #12]
 80144e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80144e6:	2b01      	cmp	r3, #1
 80144e8:	d101      	bne.n	80144ee <HAL_I2C_Mem_Read+0x4e>
 80144ea:	2302      	movs	r3, #2
 80144ec:	e0ea      	b.n	80146c4 <HAL_I2C_Mem_Read+0x224>
 80144ee:	68fb      	ldr	r3, [r7, #12]
 80144f0:	2201      	movs	r2, #1
 80144f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80144f6:	f7fd f8f5 	bl	80116e4 <HAL_GetTick>
 80144fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80144fc:	697b      	ldr	r3, [r7, #20]
 80144fe:	9300      	str	r3, [sp, #0]
 8014500:	2319      	movs	r3, #25
 8014502:	2201      	movs	r2, #1
 8014504:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8014508:	68f8      	ldr	r0, [r7, #12]
 801450a:	f000 fad3 	bl	8014ab4 <I2C_WaitOnFlagUntilTimeout>
 801450e:	4603      	mov	r3, r0
 8014510:	2b00      	cmp	r3, #0
 8014512:	d001      	beq.n	8014518 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8014514:	2301      	movs	r3, #1
 8014516:	e0d5      	b.n	80146c4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8014518:	68fb      	ldr	r3, [r7, #12]
 801451a:	2222      	movs	r2, #34	; 0x22
 801451c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8014520:	68fb      	ldr	r3, [r7, #12]
 8014522:	2240      	movs	r2, #64	; 0x40
 8014524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8014528:	68fb      	ldr	r3, [r7, #12]
 801452a:	2200      	movs	r2, #0
 801452c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801452e:	68fb      	ldr	r3, [r7, #12]
 8014530:	6a3a      	ldr	r2, [r7, #32]
 8014532:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8014534:	68fb      	ldr	r3, [r7, #12]
 8014536:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014538:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 801453a:	68fb      	ldr	r3, [r7, #12]
 801453c:	2200      	movs	r2, #0
 801453e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8014540:	88f8      	ldrh	r0, [r7, #6]
 8014542:	893a      	ldrh	r2, [r7, #8]
 8014544:	8979      	ldrh	r1, [r7, #10]
 8014546:	697b      	ldr	r3, [r7, #20]
 8014548:	9301      	str	r3, [sp, #4]
 801454a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801454c:	9300      	str	r3, [sp, #0]
 801454e:	4603      	mov	r3, r0
 8014550:	68f8      	ldr	r0, [r7, #12]
 8014552:	f000 fa37 	bl	80149c4 <I2C_RequestMemoryRead>
 8014556:	4603      	mov	r3, r0
 8014558:	2b00      	cmp	r3, #0
 801455a:	d005      	beq.n	8014568 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801455c:	68fb      	ldr	r3, [r7, #12]
 801455e:	2200      	movs	r2, #0
 8014560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8014564:	2301      	movs	r3, #1
 8014566:	e0ad      	b.n	80146c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014568:	68fb      	ldr	r3, [r7, #12]
 801456a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801456c:	b29b      	uxth	r3, r3
 801456e:	2bff      	cmp	r3, #255	; 0xff
 8014570:	d90e      	bls.n	8014590 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8014572:	68fb      	ldr	r3, [r7, #12]
 8014574:	22ff      	movs	r2, #255	; 0xff
 8014576:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8014578:	68fb      	ldr	r3, [r7, #12]
 801457a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801457c:	b2da      	uxtb	r2, r3
 801457e:	8979      	ldrh	r1, [r7, #10]
 8014580:	4b52      	ldr	r3, [pc, #328]	; (80146cc <HAL_I2C_Mem_Read+0x22c>)
 8014582:	9300      	str	r3, [sp, #0]
 8014584:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8014588:	68f8      	ldr	r0, [r7, #12]
 801458a:	f000 fc4d 	bl	8014e28 <I2C_TransferConfig>
 801458e:	e00f      	b.n	80145b0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8014590:	68fb      	ldr	r3, [r7, #12]
 8014592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014594:	b29a      	uxth	r2, r3
 8014596:	68fb      	ldr	r3, [r7, #12]
 8014598:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801459a:	68fb      	ldr	r3, [r7, #12]
 801459c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801459e:	b2da      	uxtb	r2, r3
 80145a0:	8979      	ldrh	r1, [r7, #10]
 80145a2:	4b4a      	ldr	r3, [pc, #296]	; (80146cc <HAL_I2C_Mem_Read+0x22c>)
 80145a4:	9300      	str	r3, [sp, #0]
 80145a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80145aa:	68f8      	ldr	r0, [r7, #12]
 80145ac:	f000 fc3c 	bl	8014e28 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80145b0:	697b      	ldr	r3, [r7, #20]
 80145b2:	9300      	str	r3, [sp, #0]
 80145b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145b6:	2200      	movs	r2, #0
 80145b8:	2104      	movs	r1, #4
 80145ba:	68f8      	ldr	r0, [r7, #12]
 80145bc:	f000 fa7a 	bl	8014ab4 <I2C_WaitOnFlagUntilTimeout>
 80145c0:	4603      	mov	r3, r0
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d001      	beq.n	80145ca <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80145c6:	2301      	movs	r3, #1
 80145c8:	e07c      	b.n	80146c4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80145ca:	68fb      	ldr	r3, [r7, #12]
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80145d0:	68fb      	ldr	r3, [r7, #12]
 80145d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145d4:	b2d2      	uxtb	r2, r2
 80145d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80145d8:	68fb      	ldr	r3, [r7, #12]
 80145da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145dc:	1c5a      	adds	r2, r3, #1
 80145de:	68fb      	ldr	r3, [r7, #12]
 80145e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80145e2:	68fb      	ldr	r3, [r7, #12]
 80145e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80145e6:	3b01      	subs	r3, #1
 80145e8:	b29a      	uxth	r2, r3
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80145ee:	68fb      	ldr	r3, [r7, #12]
 80145f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80145f2:	b29b      	uxth	r3, r3
 80145f4:	3b01      	subs	r3, #1
 80145f6:	b29a      	uxth	r2, r3
 80145f8:	68fb      	ldr	r3, [r7, #12]
 80145fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80145fc:	68fb      	ldr	r3, [r7, #12]
 80145fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014600:	b29b      	uxth	r3, r3
 8014602:	2b00      	cmp	r3, #0
 8014604:	d034      	beq.n	8014670 <HAL_I2C_Mem_Read+0x1d0>
 8014606:	68fb      	ldr	r3, [r7, #12]
 8014608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801460a:	2b00      	cmp	r3, #0
 801460c:	d130      	bne.n	8014670 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801460e:	697b      	ldr	r3, [r7, #20]
 8014610:	9300      	str	r3, [sp, #0]
 8014612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014614:	2200      	movs	r2, #0
 8014616:	2180      	movs	r1, #128	; 0x80
 8014618:	68f8      	ldr	r0, [r7, #12]
 801461a:	f000 fa4b 	bl	8014ab4 <I2C_WaitOnFlagUntilTimeout>
 801461e:	4603      	mov	r3, r0
 8014620:	2b00      	cmp	r3, #0
 8014622:	d001      	beq.n	8014628 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8014624:	2301      	movs	r3, #1
 8014626:	e04d      	b.n	80146c4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014628:	68fb      	ldr	r3, [r7, #12]
 801462a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801462c:	b29b      	uxth	r3, r3
 801462e:	2bff      	cmp	r3, #255	; 0xff
 8014630:	d90e      	bls.n	8014650 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8014632:	68fb      	ldr	r3, [r7, #12]
 8014634:	22ff      	movs	r2, #255	; 0xff
 8014636:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8014638:	68fb      	ldr	r3, [r7, #12]
 801463a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801463c:	b2da      	uxtb	r2, r3
 801463e:	8979      	ldrh	r1, [r7, #10]
 8014640:	2300      	movs	r3, #0
 8014642:	9300      	str	r3, [sp, #0]
 8014644:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8014648:	68f8      	ldr	r0, [r7, #12]
 801464a:	f000 fbed 	bl	8014e28 <I2C_TransferConfig>
 801464e:	e00f      	b.n	8014670 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8014650:	68fb      	ldr	r3, [r7, #12]
 8014652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014654:	b29a      	uxth	r2, r3
 8014656:	68fb      	ldr	r3, [r7, #12]
 8014658:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801465a:	68fb      	ldr	r3, [r7, #12]
 801465c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801465e:	b2da      	uxtb	r2, r3
 8014660:	8979      	ldrh	r1, [r7, #10]
 8014662:	2300      	movs	r3, #0
 8014664:	9300      	str	r3, [sp, #0]
 8014666:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801466a:	68f8      	ldr	r0, [r7, #12]
 801466c:	f000 fbdc 	bl	8014e28 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8014670:	68fb      	ldr	r3, [r7, #12]
 8014672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014674:	b29b      	uxth	r3, r3
 8014676:	2b00      	cmp	r3, #0
 8014678:	d19a      	bne.n	80145b0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801467a:	697a      	ldr	r2, [r7, #20]
 801467c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801467e:	68f8      	ldr	r0, [r7, #12]
 8014680:	f000 faae 	bl	8014be0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8014684:	4603      	mov	r3, r0
 8014686:	2b00      	cmp	r3, #0
 8014688:	d001      	beq.n	801468e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 801468a:	2301      	movs	r3, #1
 801468c:	e01a      	b.n	80146c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801468e:	68fb      	ldr	r3, [r7, #12]
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	2220      	movs	r2, #32
 8014694:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8014696:	68fb      	ldr	r3, [r7, #12]
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	6859      	ldr	r1, [r3, #4]
 801469c:	68fb      	ldr	r3, [r7, #12]
 801469e:	681a      	ldr	r2, [r3, #0]
 80146a0:	4b0b      	ldr	r3, [pc, #44]	; (80146d0 <HAL_I2C_Mem_Read+0x230>)
 80146a2:	400b      	ands	r3, r1
 80146a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80146a6:	68fb      	ldr	r3, [r7, #12]
 80146a8:	2220      	movs	r2, #32
 80146aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80146ae:	68fb      	ldr	r3, [r7, #12]
 80146b0:	2200      	movs	r2, #0
 80146b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80146b6:	68fb      	ldr	r3, [r7, #12]
 80146b8:	2200      	movs	r2, #0
 80146ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80146be:	2300      	movs	r3, #0
 80146c0:	e000      	b.n	80146c4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80146c2:	2302      	movs	r3, #2
  }
}
 80146c4:	4618      	mov	r0, r3
 80146c6:	3718      	adds	r7, #24
 80146c8:	46bd      	mov	sp, r7
 80146ca:	bd80      	pop	{r7, pc}
 80146cc:	80002400 	.word	0x80002400
 80146d0:	fe00e800 	.word	0xfe00e800

080146d4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80146d4:	b580      	push	{r7, lr}
 80146d6:	b08a      	sub	sp, #40	; 0x28
 80146d8:	af02      	add	r7, sp, #8
 80146da:	60f8      	str	r0, [r7, #12]
 80146dc:	607a      	str	r2, [r7, #4]
 80146de:	603b      	str	r3, [r7, #0]
 80146e0:	460b      	mov	r3, r1
 80146e2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80146e4:	2300      	movs	r3, #0
 80146e6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80146e8:	68fb      	ldr	r3, [r7, #12]
 80146ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80146ee:	b2db      	uxtb	r3, r3
 80146f0:	2b20      	cmp	r3, #32
 80146f2:	f040 80f3 	bne.w	80148dc <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80146f6:	68fb      	ldr	r3, [r7, #12]
 80146f8:	681b      	ldr	r3, [r3, #0]
 80146fa:	699b      	ldr	r3, [r3, #24]
 80146fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014700:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014704:	d101      	bne.n	801470a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8014706:	2302      	movs	r3, #2
 8014708:	e0e9      	b.n	80148de <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801470a:	68fb      	ldr	r3, [r7, #12]
 801470c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014710:	2b01      	cmp	r3, #1
 8014712:	d101      	bne.n	8014718 <HAL_I2C_IsDeviceReady+0x44>
 8014714:	2302      	movs	r3, #2
 8014716:	e0e2      	b.n	80148de <HAL_I2C_IsDeviceReady+0x20a>
 8014718:	68fb      	ldr	r3, [r7, #12]
 801471a:	2201      	movs	r2, #1
 801471c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8014720:	68fb      	ldr	r3, [r7, #12]
 8014722:	2224      	movs	r2, #36	; 0x24
 8014724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8014728:	68fb      	ldr	r3, [r7, #12]
 801472a:	2200      	movs	r2, #0
 801472c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 801472e:	68fb      	ldr	r3, [r7, #12]
 8014730:	68db      	ldr	r3, [r3, #12]
 8014732:	2b01      	cmp	r3, #1
 8014734:	d107      	bne.n	8014746 <HAL_I2C_IsDeviceReady+0x72>
 8014736:	897b      	ldrh	r3, [r7, #10]
 8014738:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801473c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8014740:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014744:	e006      	b.n	8014754 <HAL_I2C_IsDeviceReady+0x80>
 8014746:	897b      	ldrh	r3, [r7, #10]
 8014748:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801474c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8014750:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8014754:	68fa      	ldr	r2, [r7, #12]
 8014756:	6812      	ldr	r2, [r2, #0]
 8014758:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 801475a:	f7fc ffc3 	bl	80116e4 <HAL_GetTick>
 801475e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8014760:	68fb      	ldr	r3, [r7, #12]
 8014762:	681b      	ldr	r3, [r3, #0]
 8014764:	699b      	ldr	r3, [r3, #24]
 8014766:	f003 0320 	and.w	r3, r3, #32
 801476a:	2b20      	cmp	r3, #32
 801476c:	bf0c      	ite	eq
 801476e:	2301      	moveq	r3, #1
 8014770:	2300      	movne	r3, #0
 8014772:	b2db      	uxtb	r3, r3
 8014774:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8014776:	68fb      	ldr	r3, [r7, #12]
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	699b      	ldr	r3, [r3, #24]
 801477c:	f003 0310 	and.w	r3, r3, #16
 8014780:	2b10      	cmp	r3, #16
 8014782:	bf0c      	ite	eq
 8014784:	2301      	moveq	r3, #1
 8014786:	2300      	movne	r3, #0
 8014788:	b2db      	uxtb	r3, r3
 801478a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 801478c:	e034      	b.n	80147f8 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 801478e:	683b      	ldr	r3, [r7, #0]
 8014790:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014794:	d01a      	beq.n	80147cc <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8014796:	f7fc ffa5 	bl	80116e4 <HAL_GetTick>
 801479a:	4602      	mov	r2, r0
 801479c:	69bb      	ldr	r3, [r7, #24]
 801479e:	1ad3      	subs	r3, r2, r3
 80147a0:	683a      	ldr	r2, [r7, #0]
 80147a2:	429a      	cmp	r2, r3
 80147a4:	d302      	bcc.n	80147ac <HAL_I2C_IsDeviceReady+0xd8>
 80147a6:	683b      	ldr	r3, [r7, #0]
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d10f      	bne.n	80147cc <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80147ac:	68fb      	ldr	r3, [r7, #12]
 80147ae:	2220      	movs	r2, #32
 80147b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80147b4:	68fb      	ldr	r3, [r7, #12]
 80147b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80147b8:	f043 0220 	orr.w	r2, r3, #32
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80147c0:	68fb      	ldr	r3, [r7, #12]
 80147c2:	2200      	movs	r2, #0
 80147c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80147c8:	2301      	movs	r3, #1
 80147ca:	e088      	b.n	80148de <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80147cc:	68fb      	ldr	r3, [r7, #12]
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	699b      	ldr	r3, [r3, #24]
 80147d2:	f003 0320 	and.w	r3, r3, #32
 80147d6:	2b20      	cmp	r3, #32
 80147d8:	bf0c      	ite	eq
 80147da:	2301      	moveq	r3, #1
 80147dc:	2300      	movne	r3, #0
 80147de:	b2db      	uxtb	r3, r3
 80147e0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80147e2:	68fb      	ldr	r3, [r7, #12]
 80147e4:	681b      	ldr	r3, [r3, #0]
 80147e6:	699b      	ldr	r3, [r3, #24]
 80147e8:	f003 0310 	and.w	r3, r3, #16
 80147ec:	2b10      	cmp	r3, #16
 80147ee:	bf0c      	ite	eq
 80147f0:	2301      	moveq	r3, #1
 80147f2:	2300      	movne	r3, #0
 80147f4:	b2db      	uxtb	r3, r3
 80147f6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80147f8:	7ffb      	ldrb	r3, [r7, #31]
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	d102      	bne.n	8014804 <HAL_I2C_IsDeviceReady+0x130>
 80147fe:	7fbb      	ldrb	r3, [r7, #30]
 8014800:	2b00      	cmp	r3, #0
 8014802:	d0c4      	beq.n	801478e <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8014804:	68fb      	ldr	r3, [r7, #12]
 8014806:	681b      	ldr	r3, [r3, #0]
 8014808:	699b      	ldr	r3, [r3, #24]
 801480a:	f003 0310 	and.w	r3, r3, #16
 801480e:	2b10      	cmp	r3, #16
 8014810:	d01a      	beq.n	8014848 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8014812:	69bb      	ldr	r3, [r7, #24]
 8014814:	9300      	str	r3, [sp, #0]
 8014816:	683b      	ldr	r3, [r7, #0]
 8014818:	2200      	movs	r2, #0
 801481a:	2120      	movs	r1, #32
 801481c:	68f8      	ldr	r0, [r7, #12]
 801481e:	f000 f949 	bl	8014ab4 <I2C_WaitOnFlagUntilTimeout>
 8014822:	4603      	mov	r3, r0
 8014824:	2b00      	cmp	r3, #0
 8014826:	d001      	beq.n	801482c <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8014828:	2301      	movs	r3, #1
 801482a:	e058      	b.n	80148de <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801482c:	68fb      	ldr	r3, [r7, #12]
 801482e:	681b      	ldr	r3, [r3, #0]
 8014830:	2220      	movs	r2, #32
 8014832:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	2220      	movs	r2, #32
 8014838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	2200      	movs	r2, #0
 8014840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8014844:	2300      	movs	r3, #0
 8014846:	e04a      	b.n	80148de <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8014848:	69bb      	ldr	r3, [r7, #24]
 801484a:	9300      	str	r3, [sp, #0]
 801484c:	683b      	ldr	r3, [r7, #0]
 801484e:	2200      	movs	r2, #0
 8014850:	2120      	movs	r1, #32
 8014852:	68f8      	ldr	r0, [r7, #12]
 8014854:	f000 f92e 	bl	8014ab4 <I2C_WaitOnFlagUntilTimeout>
 8014858:	4603      	mov	r3, r0
 801485a:	2b00      	cmp	r3, #0
 801485c:	d001      	beq.n	8014862 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 801485e:	2301      	movs	r3, #1
 8014860:	e03d      	b.n	80148de <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014862:	68fb      	ldr	r3, [r7, #12]
 8014864:	681b      	ldr	r3, [r3, #0]
 8014866:	2210      	movs	r2, #16
 8014868:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801486a:	68fb      	ldr	r3, [r7, #12]
 801486c:	681b      	ldr	r3, [r3, #0]
 801486e:	2220      	movs	r2, #32
 8014870:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8014872:	697b      	ldr	r3, [r7, #20]
 8014874:	687a      	ldr	r2, [r7, #4]
 8014876:	429a      	cmp	r2, r3
 8014878:	d118      	bne.n	80148ac <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801487a:	68fb      	ldr	r3, [r7, #12]
 801487c:	681b      	ldr	r3, [r3, #0]
 801487e:	685a      	ldr	r2, [r3, #4]
 8014880:	68fb      	ldr	r3, [r7, #12]
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8014888:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 801488a:	69bb      	ldr	r3, [r7, #24]
 801488c:	9300      	str	r3, [sp, #0]
 801488e:	683b      	ldr	r3, [r7, #0]
 8014890:	2200      	movs	r2, #0
 8014892:	2120      	movs	r1, #32
 8014894:	68f8      	ldr	r0, [r7, #12]
 8014896:	f000 f90d 	bl	8014ab4 <I2C_WaitOnFlagUntilTimeout>
 801489a:	4603      	mov	r3, r0
 801489c:	2b00      	cmp	r3, #0
 801489e:	d001      	beq.n	80148a4 <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 80148a0:	2301      	movs	r3, #1
 80148a2:	e01c      	b.n	80148de <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80148a4:	68fb      	ldr	r3, [r7, #12]
 80148a6:	681b      	ldr	r3, [r3, #0]
 80148a8:	2220      	movs	r2, #32
 80148aa:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80148ac:	697b      	ldr	r3, [r7, #20]
 80148ae:	3301      	adds	r3, #1
 80148b0:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80148b2:	697b      	ldr	r3, [r7, #20]
 80148b4:	687a      	ldr	r2, [r7, #4]
 80148b6:	429a      	cmp	r2, r3
 80148b8:	f63f af39 	bhi.w	801472e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80148bc:	68fb      	ldr	r3, [r7, #12]
 80148be:	2220      	movs	r2, #32
 80148c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80148c8:	f043 0220 	orr.w	r2, r3, #32
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	2200      	movs	r2, #0
 80148d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80148d8:	2301      	movs	r3, #1
 80148da:	e000      	b.n	80148de <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 80148dc:	2302      	movs	r3, #2
  }
}
 80148de:	4618      	mov	r0, r3
 80148e0:	3720      	adds	r7, #32
 80148e2:	46bd      	mov	sp, r7
 80148e4:	bd80      	pop	{r7, pc}

080148e6 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 80148e6:	b480      	push	{r7}
 80148e8:	b083      	sub	sp, #12
 80148ea:	af00      	add	r7, sp, #0
 80148ec:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80148f4:	b2db      	uxtb	r3, r3
}
 80148f6:	4618      	mov	r0, r3
 80148f8:	370c      	adds	r7, #12
 80148fa:	46bd      	mov	sp, r7
 80148fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014900:	4770      	bx	lr

08014902 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8014902:	b480      	push	{r7}
 8014904:	b083      	sub	sp, #12
 8014906:	af00      	add	r7, sp, #0
 8014908:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 801490e:	4618      	mov	r0, r3
 8014910:	370c      	adds	r7, #12
 8014912:	46bd      	mov	sp, r7
 8014914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014918:	4770      	bx	lr
	...

0801491c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 801491c:	b580      	push	{r7, lr}
 801491e:	b086      	sub	sp, #24
 8014920:	af02      	add	r7, sp, #8
 8014922:	60f8      	str	r0, [r7, #12]
 8014924:	4608      	mov	r0, r1
 8014926:	4611      	mov	r1, r2
 8014928:	461a      	mov	r2, r3
 801492a:	4603      	mov	r3, r0
 801492c:	817b      	strh	r3, [r7, #10]
 801492e:	460b      	mov	r3, r1
 8014930:	813b      	strh	r3, [r7, #8]
 8014932:	4613      	mov	r3, r2
 8014934:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8014936:	88fb      	ldrh	r3, [r7, #6]
 8014938:	b2da      	uxtb	r2, r3
 801493a:	8979      	ldrh	r1, [r7, #10]
 801493c:	4b20      	ldr	r3, [pc, #128]	; (80149c0 <I2C_RequestMemoryWrite+0xa4>)
 801493e:	9300      	str	r3, [sp, #0]
 8014940:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8014944:	68f8      	ldr	r0, [r7, #12]
 8014946:	f000 fa6f 	bl	8014e28 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801494a:	69fa      	ldr	r2, [r7, #28]
 801494c:	69b9      	ldr	r1, [r7, #24]
 801494e:	68f8      	ldr	r0, [r7, #12]
 8014950:	f000 f8ff 	bl	8014b52 <I2C_WaitOnTXISFlagUntilTimeout>
 8014954:	4603      	mov	r3, r0
 8014956:	2b00      	cmp	r3, #0
 8014958:	d001      	beq.n	801495e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 801495a:	2301      	movs	r3, #1
 801495c:	e02c      	b.n	80149b8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801495e:	88fb      	ldrh	r3, [r7, #6]
 8014960:	2b01      	cmp	r3, #1
 8014962:	d105      	bne.n	8014970 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8014964:	893b      	ldrh	r3, [r7, #8]
 8014966:	b2da      	uxtb	r2, r3
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	681b      	ldr	r3, [r3, #0]
 801496c:	629a      	str	r2, [r3, #40]	; 0x28
 801496e:	e015      	b.n	801499c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8014970:	893b      	ldrh	r3, [r7, #8]
 8014972:	0a1b      	lsrs	r3, r3, #8
 8014974:	b29b      	uxth	r3, r3
 8014976:	b2da      	uxtb	r2, r3
 8014978:	68fb      	ldr	r3, [r7, #12]
 801497a:	681b      	ldr	r3, [r3, #0]
 801497c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801497e:	69fa      	ldr	r2, [r7, #28]
 8014980:	69b9      	ldr	r1, [r7, #24]
 8014982:	68f8      	ldr	r0, [r7, #12]
 8014984:	f000 f8e5 	bl	8014b52 <I2C_WaitOnTXISFlagUntilTimeout>
 8014988:	4603      	mov	r3, r0
 801498a:	2b00      	cmp	r3, #0
 801498c:	d001      	beq.n	8014992 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 801498e:	2301      	movs	r3, #1
 8014990:	e012      	b.n	80149b8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8014992:	893b      	ldrh	r3, [r7, #8]
 8014994:	b2da      	uxtb	r2, r3
 8014996:	68fb      	ldr	r3, [r7, #12]
 8014998:	681b      	ldr	r3, [r3, #0]
 801499a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 801499c:	69fb      	ldr	r3, [r7, #28]
 801499e:	9300      	str	r3, [sp, #0]
 80149a0:	69bb      	ldr	r3, [r7, #24]
 80149a2:	2200      	movs	r2, #0
 80149a4:	2180      	movs	r1, #128	; 0x80
 80149a6:	68f8      	ldr	r0, [r7, #12]
 80149a8:	f000 f884 	bl	8014ab4 <I2C_WaitOnFlagUntilTimeout>
 80149ac:	4603      	mov	r3, r0
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d001      	beq.n	80149b6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80149b2:	2301      	movs	r3, #1
 80149b4:	e000      	b.n	80149b8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80149b6:	2300      	movs	r3, #0
}
 80149b8:	4618      	mov	r0, r3
 80149ba:	3710      	adds	r7, #16
 80149bc:	46bd      	mov	sp, r7
 80149be:	bd80      	pop	{r7, pc}
 80149c0:	80002000 	.word	0x80002000

080149c4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80149c4:	b580      	push	{r7, lr}
 80149c6:	b086      	sub	sp, #24
 80149c8:	af02      	add	r7, sp, #8
 80149ca:	60f8      	str	r0, [r7, #12]
 80149cc:	4608      	mov	r0, r1
 80149ce:	4611      	mov	r1, r2
 80149d0:	461a      	mov	r2, r3
 80149d2:	4603      	mov	r3, r0
 80149d4:	817b      	strh	r3, [r7, #10]
 80149d6:	460b      	mov	r3, r1
 80149d8:	813b      	strh	r3, [r7, #8]
 80149da:	4613      	mov	r3, r2
 80149dc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80149de:	88fb      	ldrh	r3, [r7, #6]
 80149e0:	b2da      	uxtb	r2, r3
 80149e2:	8979      	ldrh	r1, [r7, #10]
 80149e4:	4b20      	ldr	r3, [pc, #128]	; (8014a68 <I2C_RequestMemoryRead+0xa4>)
 80149e6:	9300      	str	r3, [sp, #0]
 80149e8:	2300      	movs	r3, #0
 80149ea:	68f8      	ldr	r0, [r7, #12]
 80149ec:	f000 fa1c 	bl	8014e28 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80149f0:	69fa      	ldr	r2, [r7, #28]
 80149f2:	69b9      	ldr	r1, [r7, #24]
 80149f4:	68f8      	ldr	r0, [r7, #12]
 80149f6:	f000 f8ac 	bl	8014b52 <I2C_WaitOnTXISFlagUntilTimeout>
 80149fa:	4603      	mov	r3, r0
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d001      	beq.n	8014a04 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8014a00:	2301      	movs	r3, #1
 8014a02:	e02c      	b.n	8014a5e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8014a04:	88fb      	ldrh	r3, [r7, #6]
 8014a06:	2b01      	cmp	r3, #1
 8014a08:	d105      	bne.n	8014a16 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8014a0a:	893b      	ldrh	r3, [r7, #8]
 8014a0c:	b2da      	uxtb	r2, r3
 8014a0e:	68fb      	ldr	r3, [r7, #12]
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	629a      	str	r2, [r3, #40]	; 0x28
 8014a14:	e015      	b.n	8014a42 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8014a16:	893b      	ldrh	r3, [r7, #8]
 8014a18:	0a1b      	lsrs	r3, r3, #8
 8014a1a:	b29b      	uxth	r3, r3
 8014a1c:	b2da      	uxtb	r2, r3
 8014a1e:	68fb      	ldr	r3, [r7, #12]
 8014a20:	681b      	ldr	r3, [r3, #0]
 8014a22:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8014a24:	69fa      	ldr	r2, [r7, #28]
 8014a26:	69b9      	ldr	r1, [r7, #24]
 8014a28:	68f8      	ldr	r0, [r7, #12]
 8014a2a:	f000 f892 	bl	8014b52 <I2C_WaitOnTXISFlagUntilTimeout>
 8014a2e:	4603      	mov	r3, r0
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	d001      	beq.n	8014a38 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8014a34:	2301      	movs	r3, #1
 8014a36:	e012      	b.n	8014a5e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8014a38:	893b      	ldrh	r3, [r7, #8]
 8014a3a:	b2da      	uxtb	r2, r3
 8014a3c:	68fb      	ldr	r3, [r7, #12]
 8014a3e:	681b      	ldr	r3, [r3, #0]
 8014a40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8014a42:	69fb      	ldr	r3, [r7, #28]
 8014a44:	9300      	str	r3, [sp, #0]
 8014a46:	69bb      	ldr	r3, [r7, #24]
 8014a48:	2200      	movs	r2, #0
 8014a4a:	2140      	movs	r1, #64	; 0x40
 8014a4c:	68f8      	ldr	r0, [r7, #12]
 8014a4e:	f000 f831 	bl	8014ab4 <I2C_WaitOnFlagUntilTimeout>
 8014a52:	4603      	mov	r3, r0
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d001      	beq.n	8014a5c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8014a58:	2301      	movs	r3, #1
 8014a5a:	e000      	b.n	8014a5e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8014a5c:	2300      	movs	r3, #0
}
 8014a5e:	4618      	mov	r0, r3
 8014a60:	3710      	adds	r7, #16
 8014a62:	46bd      	mov	sp, r7
 8014a64:	bd80      	pop	{r7, pc}
 8014a66:	bf00      	nop
 8014a68:	80002000 	.word	0x80002000

08014a6c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8014a6c:	b480      	push	{r7}
 8014a6e:	b083      	sub	sp, #12
 8014a70:	af00      	add	r7, sp, #0
 8014a72:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	681b      	ldr	r3, [r3, #0]
 8014a78:	699b      	ldr	r3, [r3, #24]
 8014a7a:	f003 0302 	and.w	r3, r3, #2
 8014a7e:	2b02      	cmp	r3, #2
 8014a80:	d103      	bne.n	8014a8a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	681b      	ldr	r3, [r3, #0]
 8014a86:	2200      	movs	r2, #0
 8014a88:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	681b      	ldr	r3, [r3, #0]
 8014a8e:	699b      	ldr	r3, [r3, #24]
 8014a90:	f003 0301 	and.w	r3, r3, #1
 8014a94:	2b01      	cmp	r3, #1
 8014a96:	d007      	beq.n	8014aa8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	681b      	ldr	r3, [r3, #0]
 8014a9c:	699a      	ldr	r2, [r3, #24]
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	681b      	ldr	r3, [r3, #0]
 8014aa2:	f042 0201 	orr.w	r2, r2, #1
 8014aa6:	619a      	str	r2, [r3, #24]
  }
}
 8014aa8:	bf00      	nop
 8014aaa:	370c      	adds	r7, #12
 8014aac:	46bd      	mov	sp, r7
 8014aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ab2:	4770      	bx	lr

08014ab4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8014ab4:	b580      	push	{r7, lr}
 8014ab6:	b084      	sub	sp, #16
 8014ab8:	af00      	add	r7, sp, #0
 8014aba:	60f8      	str	r0, [r7, #12]
 8014abc:	60b9      	str	r1, [r7, #8]
 8014abe:	603b      	str	r3, [r7, #0]
 8014ac0:	4613      	mov	r3, r2
 8014ac2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8014ac4:	e031      	b.n	8014b2a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014ac6:	683b      	ldr	r3, [r7, #0]
 8014ac8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014acc:	d02d      	beq.n	8014b2a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014ace:	f7fc fe09 	bl	80116e4 <HAL_GetTick>
 8014ad2:	4602      	mov	r2, r0
 8014ad4:	69bb      	ldr	r3, [r7, #24]
 8014ad6:	1ad3      	subs	r3, r2, r3
 8014ad8:	683a      	ldr	r2, [r7, #0]
 8014ada:	429a      	cmp	r2, r3
 8014adc:	d302      	bcc.n	8014ae4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8014ade:	683b      	ldr	r3, [r7, #0]
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d122      	bne.n	8014b2a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8014ae4:	68fb      	ldr	r3, [r7, #12]
 8014ae6:	681b      	ldr	r3, [r3, #0]
 8014ae8:	699a      	ldr	r2, [r3, #24]
 8014aea:	68bb      	ldr	r3, [r7, #8]
 8014aec:	4013      	ands	r3, r2
 8014aee:	68ba      	ldr	r2, [r7, #8]
 8014af0:	429a      	cmp	r2, r3
 8014af2:	bf0c      	ite	eq
 8014af4:	2301      	moveq	r3, #1
 8014af6:	2300      	movne	r3, #0
 8014af8:	b2db      	uxtb	r3, r3
 8014afa:	461a      	mov	r2, r3
 8014afc:	79fb      	ldrb	r3, [r7, #7]
 8014afe:	429a      	cmp	r2, r3
 8014b00:	d113      	bne.n	8014b2a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8014b02:	68fb      	ldr	r3, [r7, #12]
 8014b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014b06:	f043 0220 	orr.w	r2, r3, #32
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8014b0e:	68fb      	ldr	r3, [r7, #12]
 8014b10:	2220      	movs	r2, #32
 8014b12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8014b16:	68fb      	ldr	r3, [r7, #12]
 8014b18:	2200      	movs	r2, #0
 8014b1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8014b1e:	68fb      	ldr	r3, [r7, #12]
 8014b20:	2200      	movs	r2, #0
 8014b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8014b26:	2301      	movs	r3, #1
 8014b28:	e00f      	b.n	8014b4a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8014b2a:	68fb      	ldr	r3, [r7, #12]
 8014b2c:	681b      	ldr	r3, [r3, #0]
 8014b2e:	699a      	ldr	r2, [r3, #24]
 8014b30:	68bb      	ldr	r3, [r7, #8]
 8014b32:	4013      	ands	r3, r2
 8014b34:	68ba      	ldr	r2, [r7, #8]
 8014b36:	429a      	cmp	r2, r3
 8014b38:	bf0c      	ite	eq
 8014b3a:	2301      	moveq	r3, #1
 8014b3c:	2300      	movne	r3, #0
 8014b3e:	b2db      	uxtb	r3, r3
 8014b40:	461a      	mov	r2, r3
 8014b42:	79fb      	ldrb	r3, [r7, #7]
 8014b44:	429a      	cmp	r2, r3
 8014b46:	d0be      	beq.n	8014ac6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8014b48:	2300      	movs	r3, #0
}
 8014b4a:	4618      	mov	r0, r3
 8014b4c:	3710      	adds	r7, #16
 8014b4e:	46bd      	mov	sp, r7
 8014b50:	bd80      	pop	{r7, pc}

08014b52 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8014b52:	b580      	push	{r7, lr}
 8014b54:	b084      	sub	sp, #16
 8014b56:	af00      	add	r7, sp, #0
 8014b58:	60f8      	str	r0, [r7, #12]
 8014b5a:	60b9      	str	r1, [r7, #8]
 8014b5c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8014b5e:	e033      	b.n	8014bc8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8014b60:	687a      	ldr	r2, [r7, #4]
 8014b62:	68b9      	ldr	r1, [r7, #8]
 8014b64:	68f8      	ldr	r0, [r7, #12]
 8014b66:	f000 f87f 	bl	8014c68 <I2C_IsErrorOccurred>
 8014b6a:	4603      	mov	r3, r0
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	d001      	beq.n	8014b74 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8014b70:	2301      	movs	r3, #1
 8014b72:	e031      	b.n	8014bd8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014b74:	68bb      	ldr	r3, [r7, #8]
 8014b76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014b7a:	d025      	beq.n	8014bc8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014b7c:	f7fc fdb2 	bl	80116e4 <HAL_GetTick>
 8014b80:	4602      	mov	r2, r0
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	1ad3      	subs	r3, r2, r3
 8014b86:	68ba      	ldr	r2, [r7, #8]
 8014b88:	429a      	cmp	r2, r3
 8014b8a:	d302      	bcc.n	8014b92 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8014b8c:	68bb      	ldr	r3, [r7, #8]
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	d11a      	bne.n	8014bc8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8014b92:	68fb      	ldr	r3, [r7, #12]
 8014b94:	681b      	ldr	r3, [r3, #0]
 8014b96:	699b      	ldr	r3, [r3, #24]
 8014b98:	f003 0302 	and.w	r3, r3, #2
 8014b9c:	2b02      	cmp	r3, #2
 8014b9e:	d013      	beq.n	8014bc8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8014ba0:	68fb      	ldr	r3, [r7, #12]
 8014ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014ba4:	f043 0220 	orr.w	r2, r3, #32
 8014ba8:	68fb      	ldr	r3, [r7, #12]
 8014baa:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	2220      	movs	r2, #32
 8014bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8014bb4:	68fb      	ldr	r3, [r7, #12]
 8014bb6:	2200      	movs	r2, #0
 8014bb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8014bbc:	68fb      	ldr	r3, [r7, #12]
 8014bbe:	2200      	movs	r2, #0
 8014bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8014bc4:	2301      	movs	r3, #1
 8014bc6:	e007      	b.n	8014bd8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8014bc8:	68fb      	ldr	r3, [r7, #12]
 8014bca:	681b      	ldr	r3, [r3, #0]
 8014bcc:	699b      	ldr	r3, [r3, #24]
 8014bce:	f003 0302 	and.w	r3, r3, #2
 8014bd2:	2b02      	cmp	r3, #2
 8014bd4:	d1c4      	bne.n	8014b60 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8014bd6:	2300      	movs	r3, #0
}
 8014bd8:	4618      	mov	r0, r3
 8014bda:	3710      	adds	r7, #16
 8014bdc:	46bd      	mov	sp, r7
 8014bde:	bd80      	pop	{r7, pc}

08014be0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8014be0:	b580      	push	{r7, lr}
 8014be2:	b084      	sub	sp, #16
 8014be4:	af00      	add	r7, sp, #0
 8014be6:	60f8      	str	r0, [r7, #12]
 8014be8:	60b9      	str	r1, [r7, #8]
 8014bea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8014bec:	e02f      	b.n	8014c4e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8014bee:	687a      	ldr	r2, [r7, #4]
 8014bf0:	68b9      	ldr	r1, [r7, #8]
 8014bf2:	68f8      	ldr	r0, [r7, #12]
 8014bf4:	f000 f838 	bl	8014c68 <I2C_IsErrorOccurred>
 8014bf8:	4603      	mov	r3, r0
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	d001      	beq.n	8014c02 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8014bfe:	2301      	movs	r3, #1
 8014c00:	e02d      	b.n	8014c5e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014c02:	f7fc fd6f 	bl	80116e4 <HAL_GetTick>
 8014c06:	4602      	mov	r2, r0
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	1ad3      	subs	r3, r2, r3
 8014c0c:	68ba      	ldr	r2, [r7, #8]
 8014c0e:	429a      	cmp	r2, r3
 8014c10:	d302      	bcc.n	8014c18 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8014c12:	68bb      	ldr	r3, [r7, #8]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d11a      	bne.n	8014c4e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	681b      	ldr	r3, [r3, #0]
 8014c1c:	699b      	ldr	r3, [r3, #24]
 8014c1e:	f003 0320 	and.w	r3, r3, #32
 8014c22:	2b20      	cmp	r3, #32
 8014c24:	d013      	beq.n	8014c4e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014c2a:	f043 0220 	orr.w	r2, r3, #32
 8014c2e:	68fb      	ldr	r3, [r7, #12]
 8014c30:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	2220      	movs	r2, #32
 8014c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8014c3a:	68fb      	ldr	r3, [r7, #12]
 8014c3c:	2200      	movs	r2, #0
 8014c3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8014c42:	68fb      	ldr	r3, [r7, #12]
 8014c44:	2200      	movs	r2, #0
 8014c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8014c4a:	2301      	movs	r3, #1
 8014c4c:	e007      	b.n	8014c5e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8014c4e:	68fb      	ldr	r3, [r7, #12]
 8014c50:	681b      	ldr	r3, [r3, #0]
 8014c52:	699b      	ldr	r3, [r3, #24]
 8014c54:	f003 0320 	and.w	r3, r3, #32
 8014c58:	2b20      	cmp	r3, #32
 8014c5a:	d1c8      	bne.n	8014bee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8014c5c:	2300      	movs	r3, #0
}
 8014c5e:	4618      	mov	r0, r3
 8014c60:	3710      	adds	r7, #16
 8014c62:	46bd      	mov	sp, r7
 8014c64:	bd80      	pop	{r7, pc}
	...

08014c68 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8014c68:	b580      	push	{r7, lr}
 8014c6a:	b08a      	sub	sp, #40	; 0x28
 8014c6c:	af00      	add	r7, sp, #0
 8014c6e:	60f8      	str	r0, [r7, #12]
 8014c70:	60b9      	str	r1, [r7, #8]
 8014c72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014c74:	2300      	movs	r3, #0
 8014c76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8014c7a:	68fb      	ldr	r3, [r7, #12]
 8014c7c:	681b      	ldr	r3, [r3, #0]
 8014c7e:	699b      	ldr	r3, [r3, #24]
 8014c80:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8014c82:	2300      	movs	r3, #0
 8014c84:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8014c8a:	69bb      	ldr	r3, [r7, #24]
 8014c8c:	f003 0310 	and.w	r3, r3, #16
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d068      	beq.n	8014d66 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	681b      	ldr	r3, [r3, #0]
 8014c98:	2210      	movs	r2, #16
 8014c9a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8014c9c:	e049      	b.n	8014d32 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8014c9e:	68bb      	ldr	r3, [r7, #8]
 8014ca0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014ca4:	d045      	beq.n	8014d32 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8014ca6:	f7fc fd1d 	bl	80116e4 <HAL_GetTick>
 8014caa:	4602      	mov	r2, r0
 8014cac:	69fb      	ldr	r3, [r7, #28]
 8014cae:	1ad3      	subs	r3, r2, r3
 8014cb0:	68ba      	ldr	r2, [r7, #8]
 8014cb2:	429a      	cmp	r2, r3
 8014cb4:	d302      	bcc.n	8014cbc <I2C_IsErrorOccurred+0x54>
 8014cb6:	68bb      	ldr	r3, [r7, #8]
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d13a      	bne.n	8014d32 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8014cbc:	68fb      	ldr	r3, [r7, #12]
 8014cbe:	681b      	ldr	r3, [r3, #0]
 8014cc0:	685b      	ldr	r3, [r3, #4]
 8014cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014cc6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014cce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8014cd0:	68fb      	ldr	r3, [r7, #12]
 8014cd2:	681b      	ldr	r3, [r3, #0]
 8014cd4:	699b      	ldr	r3, [r3, #24]
 8014cd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014cda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014cde:	d121      	bne.n	8014d24 <I2C_IsErrorOccurred+0xbc>
 8014ce0:	697b      	ldr	r3, [r7, #20]
 8014ce2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014ce6:	d01d      	beq.n	8014d24 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8014ce8:	7cfb      	ldrb	r3, [r7, #19]
 8014cea:	2b20      	cmp	r3, #32
 8014cec:	d01a      	beq.n	8014d24 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	681b      	ldr	r3, [r3, #0]
 8014cf2:	685a      	ldr	r2, [r3, #4]
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	681b      	ldr	r3, [r3, #0]
 8014cf8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8014cfc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8014cfe:	f7fc fcf1 	bl	80116e4 <HAL_GetTick>
 8014d02:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8014d04:	e00e      	b.n	8014d24 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8014d06:	f7fc fced 	bl	80116e4 <HAL_GetTick>
 8014d0a:	4602      	mov	r2, r0
 8014d0c:	69fb      	ldr	r3, [r7, #28]
 8014d0e:	1ad3      	subs	r3, r2, r3
 8014d10:	2b19      	cmp	r3, #25
 8014d12:	d907      	bls.n	8014d24 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8014d14:	6a3b      	ldr	r3, [r7, #32]
 8014d16:	f043 0320 	orr.w	r3, r3, #32
 8014d1a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8014d1c:	2301      	movs	r3, #1
 8014d1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8014d22:	e006      	b.n	8014d32 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8014d24:	68fb      	ldr	r3, [r7, #12]
 8014d26:	681b      	ldr	r3, [r3, #0]
 8014d28:	699b      	ldr	r3, [r3, #24]
 8014d2a:	f003 0320 	and.w	r3, r3, #32
 8014d2e:	2b20      	cmp	r3, #32
 8014d30:	d1e9      	bne.n	8014d06 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	681b      	ldr	r3, [r3, #0]
 8014d36:	699b      	ldr	r3, [r3, #24]
 8014d38:	f003 0320 	and.w	r3, r3, #32
 8014d3c:	2b20      	cmp	r3, #32
 8014d3e:	d003      	beq.n	8014d48 <I2C_IsErrorOccurred+0xe0>
 8014d40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d0aa      	beq.n	8014c9e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8014d48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	d103      	bne.n	8014d58 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8014d50:	68fb      	ldr	r3, [r7, #12]
 8014d52:	681b      	ldr	r3, [r3, #0]
 8014d54:	2220      	movs	r2, #32
 8014d56:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8014d58:	6a3b      	ldr	r3, [r7, #32]
 8014d5a:	f043 0304 	orr.w	r3, r3, #4
 8014d5e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8014d60:	2301      	movs	r3, #1
 8014d62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8014d66:	68fb      	ldr	r3, [r7, #12]
 8014d68:	681b      	ldr	r3, [r3, #0]
 8014d6a:	699b      	ldr	r3, [r3, #24]
 8014d6c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8014d6e:	69bb      	ldr	r3, [r7, #24]
 8014d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d00b      	beq.n	8014d90 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8014d78:	6a3b      	ldr	r3, [r7, #32]
 8014d7a:	f043 0301 	orr.w	r3, r3, #1
 8014d7e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8014d80:	68fb      	ldr	r3, [r7, #12]
 8014d82:	681b      	ldr	r3, [r3, #0]
 8014d84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014d88:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8014d8a:	2301      	movs	r3, #1
 8014d8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8014d90:	69bb      	ldr	r3, [r7, #24]
 8014d92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d00b      	beq.n	8014db2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8014d9a:	6a3b      	ldr	r3, [r7, #32]
 8014d9c:	f043 0308 	orr.w	r3, r3, #8
 8014da0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8014da2:	68fb      	ldr	r3, [r7, #12]
 8014da4:	681b      	ldr	r3, [r3, #0]
 8014da6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014daa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8014dac:	2301      	movs	r3, #1
 8014dae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8014db2:	69bb      	ldr	r3, [r7, #24]
 8014db4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d00b      	beq.n	8014dd4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8014dbc:	6a3b      	ldr	r3, [r7, #32]
 8014dbe:	f043 0302 	orr.w	r3, r3, #2
 8014dc2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8014dc4:	68fb      	ldr	r3, [r7, #12]
 8014dc6:	681b      	ldr	r3, [r3, #0]
 8014dc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014dcc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8014dce:	2301      	movs	r3, #1
 8014dd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8014dd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	d01c      	beq.n	8014e16 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8014ddc:	68f8      	ldr	r0, [r7, #12]
 8014dde:	f7ff fe45 	bl	8014a6c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8014de2:	68fb      	ldr	r3, [r7, #12]
 8014de4:	681b      	ldr	r3, [r3, #0]
 8014de6:	6859      	ldr	r1, [r3, #4]
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	681a      	ldr	r2, [r3, #0]
 8014dec:	4b0d      	ldr	r3, [pc, #52]	; (8014e24 <I2C_IsErrorOccurred+0x1bc>)
 8014dee:	400b      	ands	r3, r1
 8014df0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8014df2:	68fb      	ldr	r3, [r7, #12]
 8014df4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014df6:	6a3b      	ldr	r3, [r7, #32]
 8014df8:	431a      	orrs	r2, r3
 8014dfa:	68fb      	ldr	r3, [r7, #12]
 8014dfc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8014dfe:	68fb      	ldr	r3, [r7, #12]
 8014e00:	2220      	movs	r2, #32
 8014e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8014e06:	68fb      	ldr	r3, [r7, #12]
 8014e08:	2200      	movs	r2, #0
 8014e0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8014e0e:	68fb      	ldr	r3, [r7, #12]
 8014e10:	2200      	movs	r2, #0
 8014e12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8014e16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8014e1a:	4618      	mov	r0, r3
 8014e1c:	3728      	adds	r7, #40	; 0x28
 8014e1e:	46bd      	mov	sp, r7
 8014e20:	bd80      	pop	{r7, pc}
 8014e22:	bf00      	nop
 8014e24:	fe00e800 	.word	0xfe00e800

08014e28 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8014e28:	b480      	push	{r7}
 8014e2a:	b087      	sub	sp, #28
 8014e2c:	af00      	add	r7, sp, #0
 8014e2e:	60f8      	str	r0, [r7, #12]
 8014e30:	607b      	str	r3, [r7, #4]
 8014e32:	460b      	mov	r3, r1
 8014e34:	817b      	strh	r3, [r7, #10]
 8014e36:	4613      	mov	r3, r2
 8014e38:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8014e3a:	897b      	ldrh	r3, [r7, #10]
 8014e3c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8014e40:	7a7b      	ldrb	r3, [r7, #9]
 8014e42:	041b      	lsls	r3, r3, #16
 8014e44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8014e48:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8014e4e:	6a3b      	ldr	r3, [r7, #32]
 8014e50:	4313      	orrs	r3, r2
 8014e52:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014e56:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8014e58:	68fb      	ldr	r3, [r7, #12]
 8014e5a:	681b      	ldr	r3, [r3, #0]
 8014e5c:	685a      	ldr	r2, [r3, #4]
 8014e5e:	6a3b      	ldr	r3, [r7, #32]
 8014e60:	0d5b      	lsrs	r3, r3, #21
 8014e62:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8014e66:	4b08      	ldr	r3, [pc, #32]	; (8014e88 <I2C_TransferConfig+0x60>)
 8014e68:	430b      	orrs	r3, r1
 8014e6a:	43db      	mvns	r3, r3
 8014e6c:	ea02 0103 	and.w	r1, r2, r3
 8014e70:	68fb      	ldr	r3, [r7, #12]
 8014e72:	681b      	ldr	r3, [r3, #0]
 8014e74:	697a      	ldr	r2, [r7, #20]
 8014e76:	430a      	orrs	r2, r1
 8014e78:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8014e7a:	bf00      	nop
 8014e7c:	371c      	adds	r7, #28
 8014e7e:	46bd      	mov	sp, r7
 8014e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e84:	4770      	bx	lr
 8014e86:	bf00      	nop
 8014e88:	03ff63ff 	.word	0x03ff63ff

08014e8c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8014e8c:	b480      	push	{r7}
 8014e8e:	b083      	sub	sp, #12
 8014e90:	af00      	add	r7, sp, #0
 8014e92:	6078      	str	r0, [r7, #4]
 8014e94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8014e9c:	b2db      	uxtb	r3, r3
 8014e9e:	2b20      	cmp	r3, #32
 8014ea0:	d138      	bne.n	8014f14 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014ea8:	2b01      	cmp	r3, #1
 8014eaa:	d101      	bne.n	8014eb0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8014eac:	2302      	movs	r3, #2
 8014eae:	e032      	b.n	8014f16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	2201      	movs	r2, #1
 8014eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	2224      	movs	r2, #36	; 0x24
 8014ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	681b      	ldr	r3, [r3, #0]
 8014ec4:	681a      	ldr	r2, [r3, #0]
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	681b      	ldr	r3, [r3, #0]
 8014eca:	f022 0201 	bic.w	r2, r2, #1
 8014ece:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	681b      	ldr	r3, [r3, #0]
 8014ed4:	681a      	ldr	r2, [r3, #0]
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	681b      	ldr	r3, [r3, #0]
 8014eda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8014ede:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	681b      	ldr	r3, [r3, #0]
 8014ee4:	6819      	ldr	r1, [r3, #0]
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	681b      	ldr	r3, [r3, #0]
 8014eea:	683a      	ldr	r2, [r7, #0]
 8014eec:	430a      	orrs	r2, r1
 8014eee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	681b      	ldr	r3, [r3, #0]
 8014ef4:	681a      	ldr	r2, [r3, #0]
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	681b      	ldr	r3, [r3, #0]
 8014efa:	f042 0201 	orr.w	r2, r2, #1
 8014efe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	2220      	movs	r2, #32
 8014f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	2200      	movs	r2, #0
 8014f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8014f10:	2300      	movs	r3, #0
 8014f12:	e000      	b.n	8014f16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8014f14:	2302      	movs	r3, #2
  }
}
 8014f16:	4618      	mov	r0, r3
 8014f18:	370c      	adds	r7, #12
 8014f1a:	46bd      	mov	sp, r7
 8014f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f20:	4770      	bx	lr

08014f22 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8014f22:	b480      	push	{r7}
 8014f24:	b085      	sub	sp, #20
 8014f26:	af00      	add	r7, sp, #0
 8014f28:	6078      	str	r0, [r7, #4]
 8014f2a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8014f32:	b2db      	uxtb	r3, r3
 8014f34:	2b20      	cmp	r3, #32
 8014f36:	d139      	bne.n	8014fac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014f3e:	2b01      	cmp	r3, #1
 8014f40:	d101      	bne.n	8014f46 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8014f42:	2302      	movs	r3, #2
 8014f44:	e033      	b.n	8014fae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	2201      	movs	r2, #1
 8014f4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	2224      	movs	r2, #36	; 0x24
 8014f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	681b      	ldr	r3, [r3, #0]
 8014f5a:	681a      	ldr	r2, [r3, #0]
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	681b      	ldr	r3, [r3, #0]
 8014f60:	f022 0201 	bic.w	r2, r2, #1
 8014f64:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	681b      	ldr	r3, [r3, #0]
 8014f6a:	681b      	ldr	r3, [r3, #0]
 8014f6c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8014f6e:	68fb      	ldr	r3, [r7, #12]
 8014f70:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8014f74:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8014f76:	683b      	ldr	r3, [r7, #0]
 8014f78:	021b      	lsls	r3, r3, #8
 8014f7a:	68fa      	ldr	r2, [r7, #12]
 8014f7c:	4313      	orrs	r3, r2
 8014f7e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	681b      	ldr	r3, [r3, #0]
 8014f84:	68fa      	ldr	r2, [r7, #12]
 8014f86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	681b      	ldr	r3, [r3, #0]
 8014f8c:	681a      	ldr	r2, [r3, #0]
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	681b      	ldr	r3, [r3, #0]
 8014f92:	f042 0201 	orr.w	r2, r2, #1
 8014f96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	2220      	movs	r2, #32
 8014f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	2200      	movs	r2, #0
 8014fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8014fa8:	2300      	movs	r3, #0
 8014faa:	e000      	b.n	8014fae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8014fac:	2302      	movs	r3, #2
  }
}
 8014fae:	4618      	mov	r0, r3
 8014fb0:	3714      	adds	r7, #20
 8014fb2:	46bd      	mov	sp, r7
 8014fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fb8:	4770      	bx	lr
	...

08014fbc <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8014fbc:	b480      	push	{r7}
 8014fbe:	b085      	sub	sp, #20
 8014fc0:	af00      	add	r7, sp, #0
 8014fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014fc4:	2300      	movs	r3, #0
 8014fc6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8014fc8:	4b0b      	ldr	r3, [pc, #44]	; (8014ff8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8014fca:	681b      	ldr	r3, [r3, #0]
 8014fcc:	f003 0301 	and.w	r3, r3, #1
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d002      	beq.n	8014fda <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8014fd4:	2301      	movs	r3, #1
 8014fd6:	73fb      	strb	r3, [r7, #15]
 8014fd8:	e007      	b.n	8014fea <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8014fda:	4b07      	ldr	r3, [pc, #28]	; (8014ff8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8014fdc:	681b      	ldr	r3, [r3, #0]
 8014fde:	f023 0204 	bic.w	r2, r3, #4
 8014fe2:	4905      	ldr	r1, [pc, #20]	; (8014ff8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	4313      	orrs	r3, r2
 8014fe8:	600b      	str	r3, [r1, #0]
  }

  return status;
 8014fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8014fec:	4618      	mov	r0, r3
 8014fee:	3714      	adds	r7, #20
 8014ff0:	46bd      	mov	sp, r7
 8014ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ff6:	4770      	bx	lr
 8014ff8:	40030400 	.word	0x40030400

08014ffc <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8014ffc:	b480      	push	{r7}
 8014ffe:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8015000:	4b05      	ldr	r3, [pc, #20]	; (8015018 <HAL_ICACHE_Enable+0x1c>)
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	4a04      	ldr	r2, [pc, #16]	; (8015018 <HAL_ICACHE_Enable+0x1c>)
 8015006:	f043 0301 	orr.w	r3, r3, #1
 801500a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 801500c:	2300      	movs	r3, #0
}
 801500e:	4618      	mov	r0, r3
 8015010:	46bd      	mov	sp, r7
 8015012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015016:	4770      	bx	lr
 8015018:	40030400 	.word	0x40030400

0801501c <HAL_MDF_Init>:
  *         in the MDF_InitTypeDef structure and initialize the associated handle.
  * @param  hmdf MDF handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_MDF_Init(MDF_HandleTypeDef *hmdf)
{
 801501c:	b580      	push	{r7, lr}
 801501e:	b084      	sub	sp, #16
 8015020:	af00      	add	r7, sp, #0
 8015022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015024:	2300      	movs	r3, #0
 8015026:	73fb      	strb	r3, [r7, #15]

  /* Check MDF handle */
  if (hmdf == NULL)
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	2b00      	cmp	r3, #0
 801502c:	d102      	bne.n	8015034 <HAL_MDF_Init+0x18>
  {
    status = HAL_ERROR;
 801502e:	2301      	movs	r3, #1
 8015030:	73fb      	strb	r3, [r7, #15]
 8015032:	e141      	b.n	80152b8 <HAL_MDF_Init+0x29c>
    assert_param(IS_MDF_ALL_INSTANCE(hmdf->Instance));
    assert_param(IS_MDF_FILTER_BITSTREAM(hmdf->Init.FilterBistream));
    assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.SerialInterface.Activation));

    /* Check that instance has not been already initialized */
    if (a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] != NULL)
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	681b      	ldr	r3, [r3, #0]
 8015038:	4618      	mov	r0, r3
 801503a:	f000 fc43 	bl	80158c4 <MDF_GetHandleNumberFromInstance>
 801503e:	4603      	mov	r3, r0
 8015040:	4a86      	ldr	r2, [pc, #536]	; (801525c <HAL_MDF_Init+0x240>)
 8015042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015046:	2b00      	cmp	r3, #0
 8015048:	d002      	beq.n	8015050 <HAL_MDF_Init+0x34>
    {
      status = HAL_ERROR;
 801504a:	2301      	movs	r3, #1
 801504c:	73fb      	strb	r3, [r7, #15]
 801504e:	e133      	b.n	80152b8 <HAL_MDF_Init+0x29c>
        hmdf->MspInitCallback = HAL_MDF_MspInit;
      }
      hmdf->MspInitCallback(hmdf);
#else /* USE_HAL_MDF_REGISTER_CALLBACKS */
      /* Call MDF MSP init function */
      HAL_MDF_MspInit(hmdf);
 8015050:	6878      	ldr	r0, [r7, #4]
 8015052:	f000 fa3b 	bl	80154cc <HAL_MDF_MspInit>
#endif /* USE_HAL_MDF_REGISTER_CALLBACKS */

      /* Configure common parameters only for first MDF or ADF instance */
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 8015056:	4b82      	ldr	r3, [pc, #520]	; (8015260 <HAL_MDF_Init+0x244>)
 8015058:	681b      	ldr	r3, [r3, #0]
 801505a:	2b00      	cmp	r3, #0
 801505c:	d11d      	bne.n	801509a <HAL_MDF_Init+0x7e>
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	681b      	ldr	r3, [r3, #0]
 8015062:	4a80      	ldr	r2, [pc, #512]	; (8015264 <HAL_MDF_Init+0x248>)
 8015064:	4293      	cmp	r3, r2
 8015066:	d023      	beq.n	80150b0 <HAL_MDF_Init+0x94>
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	681b      	ldr	r3, [r3, #0]
 801506c:	4a7e      	ldr	r2, [pc, #504]	; (8015268 <HAL_MDF_Init+0x24c>)
 801506e:	4293      	cmp	r3, r2
 8015070:	d01e      	beq.n	80150b0 <HAL_MDF_Init+0x94>
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	681b      	ldr	r3, [r3, #0]
 8015076:	4a7d      	ldr	r2, [pc, #500]	; (801526c <HAL_MDF_Init+0x250>)
 8015078:	4293      	cmp	r3, r2
 801507a:	d019      	beq.n	80150b0 <HAL_MDF_Init+0x94>
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	681b      	ldr	r3, [r3, #0]
 8015080:	4a7b      	ldr	r2, [pc, #492]	; (8015270 <HAL_MDF_Init+0x254>)
 8015082:	4293      	cmp	r3, r2
 8015084:	d014      	beq.n	80150b0 <HAL_MDF_Init+0x94>
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	681b      	ldr	r3, [r3, #0]
 801508a:	4a7a      	ldr	r2, [pc, #488]	; (8015274 <HAL_MDF_Init+0x258>)
 801508c:	4293      	cmp	r3, r2
 801508e:	d00f      	beq.n	80150b0 <HAL_MDF_Init+0x94>
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	681b      	ldr	r3, [r3, #0]
 8015094:	4a78      	ldr	r2, [pc, #480]	; (8015278 <HAL_MDF_Init+0x25c>)
 8015096:	4293      	cmp	r3, r2
 8015098:	d00a      	beq.n	80150b0 <HAL_MDF_Init+0x94>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 801509a:	4b78      	ldr	r3, [pc, #480]	; (801527c <HAL_MDF_Init+0x260>)
 801509c:	681b      	ldr	r3, [r3, #0]
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 801509e:	2b00      	cmp	r3, #0
 80150a0:	f040 8090 	bne.w	80151c4 <HAL_MDF_Init+0x1a8>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	681b      	ldr	r3, [r3, #0]
 80150a8:	4a75      	ldr	r2, [pc, #468]	; (8015280 <HAL_MDF_Init+0x264>)
 80150aa:	4293      	cmp	r3, r2
 80150ac:	f040 808a 	bne.w	80151c4 <HAL_MDF_Init+0x1a8>
      {
        MDF_TypeDef *mdfBase;
        /* Get MDF base according instance */
        mdfBase = (IS_ADF_INSTANCE(hmdf->Instance)) ? ADF1 : MDF1;
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	681b      	ldr	r3, [r3, #0]
 80150b4:	4a72      	ldr	r2, [pc, #456]	; (8015280 <HAL_MDF_Init+0x264>)
 80150b6:	4293      	cmp	r3, r2
 80150b8:	d101      	bne.n	80150be <HAL_MDF_Init+0xa2>
 80150ba:	4b72      	ldr	r3, [pc, #456]	; (8015284 <HAL_MDF_Init+0x268>)
 80150bc:	e000      	b.n	80150c0 <HAL_MDF_Init+0xa4>
 80150be:	4b72      	ldr	r3, [pc, #456]	; (8015288 <HAL_MDF_Init+0x26c>)
 80150c0:	60bb      	str	r3, [r7, #8]

        /* Check clock generator status */
        if ((mdfBase->CKGCR & MDF_CKGCR_CCKACTIVE) != 0U)
 80150c2:	68bb      	ldr	r3, [r7, #8]
 80150c4:	685b      	ldr	r3, [r3, #4]
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	da02      	bge.n	80150d0 <HAL_MDF_Init+0xb4>
        {
          status = HAL_ERROR;
 80150ca:	2301      	movs	r3, #1
 80150cc:	73fb      	strb	r3, [r7, #15]
 80150ce:	e079      	b.n	80151c4 <HAL_MDF_Init+0x1a8>
        }
        else
        {
          /* Configure number of interleaved filters for MDF instance */
          if (IS_MDF_INSTANCE(hmdf->Instance))
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	4a63      	ldr	r2, [pc, #396]	; (8015264 <HAL_MDF_Init+0x248>)
 80150d6:	4293      	cmp	r3, r2
 80150d8:	d018      	beq.n	801510c <HAL_MDF_Init+0xf0>
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	681b      	ldr	r3, [r3, #0]
 80150de:	4a62      	ldr	r2, [pc, #392]	; (8015268 <HAL_MDF_Init+0x24c>)
 80150e0:	4293      	cmp	r3, r2
 80150e2:	d013      	beq.n	801510c <HAL_MDF_Init+0xf0>
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	681b      	ldr	r3, [r3, #0]
 80150e8:	4a60      	ldr	r2, [pc, #384]	; (801526c <HAL_MDF_Init+0x250>)
 80150ea:	4293      	cmp	r3, r2
 80150ec:	d00e      	beq.n	801510c <HAL_MDF_Init+0xf0>
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	681b      	ldr	r3, [r3, #0]
 80150f2:	4a5f      	ldr	r2, [pc, #380]	; (8015270 <HAL_MDF_Init+0x254>)
 80150f4:	4293      	cmp	r3, r2
 80150f6:	d009      	beq.n	801510c <HAL_MDF_Init+0xf0>
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	681b      	ldr	r3, [r3, #0]
 80150fc:	4a5d      	ldr	r2, [pc, #372]	; (8015274 <HAL_MDF_Init+0x258>)
 80150fe:	4293      	cmp	r3, r2
 8015100:	d004      	beq.n	801510c <HAL_MDF_Init+0xf0>
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	681b      	ldr	r3, [r3, #0]
 8015106:	4a5c      	ldr	r2, [pc, #368]	; (8015278 <HAL_MDF_Init+0x25c>)
 8015108:	4293      	cmp	r3, r2
 801510a:	d10d      	bne.n	8015128 <HAL_MDF_Init+0x10c>
          {
            assert_param(IS_MDF_INTERLEAVED_FILTERS(hmdf->Init.CommonParam.InterleavedFilters));
            mdfBase->GCR &= ~(MDF_GCR_ILVNB);
 801510c:	68bb      	ldr	r3, [r7, #8]
 801510e:	681b      	ldr	r3, [r3, #0]
 8015110:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8015114:	68bb      	ldr	r3, [r7, #8]
 8015116:	601a      	str	r2, [r3, #0]
            mdfBase->GCR |= (hmdf->Init.CommonParam.InterleavedFilters << MDF_GCR_ILVNB_Pos);
 8015118:	68bb      	ldr	r3, [r7, #8]
 801511a:	681a      	ldr	r2, [r3, #0]
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	685b      	ldr	r3, [r3, #4]
 8015120:	011b      	lsls	r3, r3, #4
 8015122:	431a      	orrs	r2, r3
 8015124:	68bb      	ldr	r3, [r7, #8]
 8015126:	601a      	str	r2, [r3, #0]

          /* Configure processing clock divider, output clock divider,
             output clock pins and output clock generation trigger */
          assert_param(IS_MDF_PROC_CLOCK_DIVIDER(hmdf->Init.CommonParam.ProcClockDivider));
          assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Activation));
          mdfBase->CKGCR = 0U;
 8015128:	68bb      	ldr	r3, [r7, #8]
 801512a:	2200      	movs	r2, #0
 801512c:	605a      	str	r2, [r3, #4]
          mdfBase->CKGCR |= ((hmdf->Init.CommonParam.ProcClockDivider - 1U) << MDF_CKGCR_PROCDIV_Pos);
 801512e:	68bb      	ldr	r3, [r7, #8]
 8015130:	685a      	ldr	r2, [r3, #4]
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	689b      	ldr	r3, [r3, #8]
 8015136:	3b01      	subs	r3, #1
 8015138:	061b      	lsls	r3, r3, #24
 801513a:	431a      	orrs	r2, r3
 801513c:	68bb      	ldr	r3, [r7, #8]
 801513e:	605a      	str	r2, [r3, #4]
          if (hmdf->Init.CommonParam.OutputClock.Activation == ENABLE)
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	7b1b      	ldrb	r3, [r3, #12]
 8015144:	2b01      	cmp	r3, #1
 8015146:	d137      	bne.n	80151b8 <HAL_MDF_Init+0x19c>
          {
            assert_param(IS_MDF_OUTPUT_CLOCK_PINS(hmdf->Init.CommonParam.OutputClock.Pins));
            assert_param(IS_MDF_OUTPUT_CLOCK_DIVIDER(hmdf->Init.CommonParam.OutputClock.Divider));
            assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Trigger.Activation));
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8015148:	68bb      	ldr	r3, [r7, #8]
 801514a:	685a      	ldr	r2, [r3, #4]
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	695b      	ldr	r3, [r3, #20]
 8015150:	3b01      	subs	r3, #1
 8015152:	0419      	lsls	r1, r3, #16
                               hmdf->Init.CommonParam.OutputClock.Pins |
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	691b      	ldr	r3, [r3, #16]
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8015158:	4319      	orrs	r1, r3
                               (hmdf->Init.CommonParam.OutputClock.Pins >> 4U));
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	691b      	ldr	r3, [r3, #16]
 801515e:	091b      	lsrs	r3, r3, #4
                               hmdf->Init.CommonParam.OutputClock.Pins |
 8015160:	430b      	orrs	r3, r1
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8015162:	431a      	orrs	r2, r3
 8015164:	68bb      	ldr	r3, [r7, #8]
 8015166:	605a      	str	r2, [r3, #4]
            if (hmdf->Init.CommonParam.OutputClock.Trigger.Activation == ENABLE)
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	7e1b      	ldrb	r3, [r3, #24]
 801516c:	2b01      	cmp	r3, #1
 801516e:	d123      	bne.n	80151b8 <HAL_MDF_Init+0x19c>
            {
              if (IS_MDF_INSTANCE(hmdf->Instance))
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	681b      	ldr	r3, [r3, #0]
 8015174:	4a3b      	ldr	r2, [pc, #236]	; (8015264 <HAL_MDF_Init+0x248>)
 8015176:	4293      	cmp	r3, r2
 8015178:	d012      	beq.n	80151a0 <HAL_MDF_Init+0x184>
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	681b      	ldr	r3, [r3, #0]
 801517e:	4a3a      	ldr	r2, [pc, #232]	; (8015268 <HAL_MDF_Init+0x24c>)
 8015180:	4293      	cmp	r3, r2
 8015182:	d00d      	beq.n	80151a0 <HAL_MDF_Init+0x184>
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	681b      	ldr	r3, [r3, #0]
 8015188:	4a38      	ldr	r2, [pc, #224]	; (801526c <HAL_MDF_Init+0x250>)
 801518a:	4293      	cmp	r3, r2
 801518c:	d008      	beq.n	80151a0 <HAL_MDF_Init+0x184>
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	681b      	ldr	r3, [r3, #0]
 8015192:	4a37      	ldr	r2, [pc, #220]	; (8015270 <HAL_MDF_Init+0x254>)
 8015194:	4293      	cmp	r3, r2
 8015196:	d003      	beq.n	80151a0 <HAL_MDF_Init+0x184>
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	681b      	ldr	r3, [r3, #0]
 801519c:	4a35      	ldr	r2, [pc, #212]	; (8015274 <HAL_MDF_Init+0x258>)
 801519e:	4293      	cmp	r3, r2
              else /* ADF instance */
              {
                assert_param(IS_ADF_OUTPUT_CLOCK_TRIGGER_SOURCE(hmdf->Init.CommonParam.OutputClock.Trigger.Source));
              }
              assert_param(IS_MDF_OUTPUT_CLOCK_TRIGGER_EDGE(hmdf->Init.CommonParam.OutputClock.Trigger.Edge));
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 80151a0:	68bb      	ldr	r3, [r7, #8]
 80151a2:	685a      	ldr	r2, [r3, #4]
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	69d9      	ldr	r1, [r3, #28]
                                 hmdf->Init.CommonParam.OutputClock.Trigger.Edge |
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	6a1b      	ldr	r3, [r3, #32]
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 80151ac:	430b      	orrs	r3, r1
 80151ae:	4313      	orrs	r3, r2
 80151b0:	f043 0210 	orr.w	r2, r3, #16
 80151b4:	68bb      	ldr	r3, [r7, #8]
 80151b6:	605a      	str	r2, [r3, #4]
                                 MDF_CKGCR_CKGMOD);
            }
          }

          /* Activate clock generator */
          mdfBase->CKGCR |= MDF_CKGCR_CKDEN;
 80151b8:	68bb      	ldr	r3, [r7, #8]
 80151ba:	685b      	ldr	r3, [r3, #4]
 80151bc:	f043 0201 	orr.w	r2, r3, #1
 80151c0:	68bb      	ldr	r3, [r7, #8]
 80151c2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Configure serial interface */
      if ((status == HAL_OK) && (hmdf->Init.SerialInterface.Activation == ENABLE))
 80151c4:	7bfb      	ldrb	r3, [r7, #15]
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d128      	bne.n	801521c <HAL_MDF_Init+0x200>
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80151d0:	2b01      	cmp	r3, #1
 80151d2:	d123      	bne.n	801521c <HAL_MDF_Init+0x200>
      {
        /* Check serial interface status */
        if ((hmdf->Instance->SITFCR & MDF_SITFCR_SITFACTIVE) != 0U)
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	681b      	ldr	r3, [r3, #0]
 80151d8:	681b      	ldr	r3, [r3, #0]
 80151da:	2b00      	cmp	r3, #0
 80151dc:	da02      	bge.n	80151e4 <HAL_MDF_Init+0x1c8>
        {
          status = HAL_ERROR;
 80151de:	2301      	movs	r3, #1
 80151e0:	73fb      	strb	r3, [r7, #15]
 80151e2:	e01b      	b.n	801521c <HAL_MDF_Init+0x200>
        {
          /* Configure mode, clock source and threshold */
          assert_param(IS_MDF_SITF_MODE(hmdf->Init.SerialInterface.Mode));
          assert_param(IS_MDF_SITF_CLOCK_SOURCE(hmdf->Init.SerialInterface.ClockSource));
          assert_param(IS_MDF_SITF_THRESHOLD(hmdf->Init.SerialInterface.Threshold));
          hmdf->Instance->SITFCR = 0U;
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	681b      	ldr	r3, [r3, #0]
 80151e8:	2200      	movs	r2, #0
 80151ea:	601a      	str	r2, [r3, #0]
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	681b      	ldr	r3, [r3, #0]
 80151f0:	6819      	ldr	r1, [r3, #0]
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80151f6:	021a      	lsls	r2, r3, #8
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 80151fc:	431a      	orrs	r2, r3
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015202:	431a      	orrs	r2, r3
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	681b      	ldr	r3, [r3, #0]
 8015208:	430a      	orrs	r2, r1
 801520a:	601a      	str	r2, [r3, #0]

          /* Activate serial interface */
          hmdf->Instance->SITFCR |= MDF_SITFCR_SITFEN;
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	681b      	ldr	r3, [r3, #0]
 8015210:	681a      	ldr	r2, [r3, #0]
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	681b      	ldr	r3, [r3, #0]
 8015216:	f042 0201 	orr.w	r2, r2, #1
 801521a:	601a      	str	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 801521c:	7bfb      	ldrb	r3, [r7, #15]
 801521e:	2b00      	cmp	r3, #0
 8015220:	d14a      	bne.n	80152b8 <HAL_MDF_Init+0x29c>
      {
        /* Configure filter bitstream */
        hmdf->Instance->BSMXCR &= ~(MDF_BSMXCR_BSSEL);
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	681b      	ldr	r3, [r3, #0]
 8015226:	685a      	ldr	r2, [r3, #4]
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	681b      	ldr	r3, [r3, #0]
 801522c:	f022 021f 	bic.w	r2, r2, #31
 8015230:	605a      	str	r2, [r3, #4]
        hmdf->Instance->BSMXCR |= hmdf->Init.FilterBistream;
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	681b      	ldr	r3, [r3, #0]
 8015236:	6859      	ldr	r1, [r3, #4]
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	681b      	ldr	r3, [r3, #0]
 8015240:	430a      	orrs	r2, r1
 8015242:	605a      	str	r2, [r3, #4]

        /* Update instance counter and table */
        if (IS_ADF_INSTANCE(hmdf->Instance))
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	681b      	ldr	r3, [r3, #0]
 8015248:	4a0d      	ldr	r2, [pc, #52]	; (8015280 <HAL_MDF_Init+0x264>)
 801524a:	4293      	cmp	r3, r2
 801524c:	d11e      	bne.n	801528c <HAL_MDF_Init+0x270>
        {
          v_adf1InstanceCounter++;
 801524e:	4b0b      	ldr	r3, [pc, #44]	; (801527c <HAL_MDF_Init+0x260>)
 8015250:	681b      	ldr	r3, [r3, #0]
 8015252:	3301      	adds	r3, #1
 8015254:	4a09      	ldr	r2, [pc, #36]	; (801527c <HAL_MDF_Init+0x260>)
 8015256:	6013      	str	r3, [r2, #0]
 8015258:	e01d      	b.n	8015296 <HAL_MDF_Init+0x27a>
 801525a:	bf00      	nop
 801525c:	20003c4c 	.word	0x20003c4c
 8015260:	20003c44 	.word	0x20003c44
 8015264:	40025080 	.word	0x40025080
 8015268:	40025100 	.word	0x40025100
 801526c:	40025180 	.word	0x40025180
 8015270:	40025200 	.word	0x40025200
 8015274:	40025280 	.word	0x40025280
 8015278:	40025300 	.word	0x40025300
 801527c:	20003c48 	.word	0x20003c48
 8015280:	46024080 	.word	0x46024080
 8015284:	46024000 	.word	0x46024000
 8015288:	40025000 	.word	0x40025000
        }
        else /* MDF instance */
        {
          v_mdf1InstanceCounter++;
 801528c:	4b0d      	ldr	r3, [pc, #52]	; (80152c4 <HAL_MDF_Init+0x2a8>)
 801528e:	681b      	ldr	r3, [r3, #0]
 8015290:	3301      	adds	r3, #1
 8015292:	4a0c      	ldr	r2, [pc, #48]	; (80152c4 <HAL_MDF_Init+0x2a8>)
 8015294:	6013      	str	r3, [r2, #0]
        }
        a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] = hmdf;
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	681b      	ldr	r3, [r3, #0]
 801529a:	4618      	mov	r0, r3
 801529c:	f000 fb12 	bl	80158c4 <MDF_GetHandleNumberFromInstance>
 80152a0:	4602      	mov	r2, r0
 80152a2:	4909      	ldr	r1, [pc, #36]	; (80152c8 <HAL_MDF_Init+0x2ac>)
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

        /* Update error code and state */
        hmdf->ErrorCode = MDF_ERROR_NONE;
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	2200      	movs	r2, #0
 80152ae:	641a      	str	r2, [r3, #64]	; 0x40
        hmdf->State     = HAL_MDF_STATE_READY;
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	2201      	movs	r2, #1
 80152b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      }
    }
  }

  /* Return function status */
  return status;
 80152b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80152ba:	4618      	mov	r0, r3
 80152bc:	3710      	adds	r7, #16
 80152be:	46bd      	mov	sp, r7
 80152c0:	bd80      	pop	{r7, pc}
 80152c2:	bf00      	nop
 80152c4:	20003c44 	.word	0x20003c44
 80152c8:	20003c4c 	.word	0x20003c4c

080152cc <HAL_MDF_DeInit>:
  * @brief  De-initialize the MDF instance.
  * @param  hmdf MDF handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_MDF_DeInit(MDF_HandleTypeDef *hmdf)
{
 80152cc:	b580      	push	{r7, lr}
 80152ce:	b084      	sub	sp, #16
 80152d0:	af00      	add	r7, sp, #0
 80152d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80152d4:	2300      	movs	r3, #0
 80152d6:	73fb      	strb	r3, [r7, #15]

  /* Check MDF handle */
  if (hmdf == NULL)
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d102      	bne.n	80152e4 <HAL_MDF_DeInit+0x18>
  {
    status = HAL_ERROR;
 80152de:	2301      	movs	r3, #1
 80152e0:	73fb      	strb	r3, [r7, #15]
 80152e2:	e0d5      	b.n	8015490 <HAL_MDF_DeInit+0x1c4>
  {
    /* Check parameters */
    assert_param(IS_MDF_ALL_INSTANCE(hmdf->Instance));

    /* Check that instance has not been already deinitialized */
    if (a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] == NULL)
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	681b      	ldr	r3, [r3, #0]
 80152e8:	4618      	mov	r0, r3
 80152ea:	f000 faeb 	bl	80158c4 <MDF_GetHandleNumberFromInstance>
 80152ee:	4603      	mov	r3, r0
 80152f0:	4a6a      	ldr	r2, [pc, #424]	; (801549c <HAL_MDF_DeInit+0x1d0>)
 80152f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d102      	bne.n	8015300 <HAL_MDF_DeInit+0x34>
    {
      status = HAL_ERROR;
 80152fa:	2301      	movs	r3, #1
 80152fc:	73fb      	strb	r3, [r7, #15]
 80152fe:	e0c7      	b.n	8015490 <HAL_MDF_DeInit+0x1c4>
    }
    else
    {
      if (IS_MDF_INSTANCE(hmdf->Instance))
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	681b      	ldr	r3, [r3, #0]
 8015304:	4a66      	ldr	r2, [pc, #408]	; (80154a0 <HAL_MDF_DeInit+0x1d4>)
 8015306:	4293      	cmp	r3, r2
 8015308:	d018      	beq.n	801533c <HAL_MDF_DeInit+0x70>
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	681b      	ldr	r3, [r3, #0]
 801530e:	4a65      	ldr	r2, [pc, #404]	; (80154a4 <HAL_MDF_DeInit+0x1d8>)
 8015310:	4293      	cmp	r3, r2
 8015312:	d013      	beq.n	801533c <HAL_MDF_DeInit+0x70>
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	681b      	ldr	r3, [r3, #0]
 8015318:	4a63      	ldr	r2, [pc, #396]	; (80154a8 <HAL_MDF_DeInit+0x1dc>)
 801531a:	4293      	cmp	r3, r2
 801531c:	d00e      	beq.n	801533c <HAL_MDF_DeInit+0x70>
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	681b      	ldr	r3, [r3, #0]
 8015322:	4a62      	ldr	r2, [pc, #392]	; (80154ac <HAL_MDF_DeInit+0x1e0>)
 8015324:	4293      	cmp	r3, r2
 8015326:	d009      	beq.n	801533c <HAL_MDF_DeInit+0x70>
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	681b      	ldr	r3, [r3, #0]
 801532c:	4a60      	ldr	r2, [pc, #384]	; (80154b0 <HAL_MDF_DeInit+0x1e4>)
 801532e:	4293      	cmp	r3, r2
 8015330:	d004      	beq.n	801533c <HAL_MDF_DeInit+0x70>
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	681b      	ldr	r3, [r3, #0]
 8015336:	4a5f      	ldr	r2, [pc, #380]	; (80154b4 <HAL_MDF_DeInit+0x1e8>)
 8015338:	4293      	cmp	r3, r2
 801533a:	d119      	bne.n	8015370 <HAL_MDF_DeInit+0xa4>
      {
        /* Disable short circuit detector if needed */
        if ((hmdf->Instance->SCDCR & MDF_SCDCR_SCDACTIVE) != 0U)
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	681b      	ldr	r3, [r3, #0]
 8015340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015342:	2b00      	cmp	r3, #0
 8015344:	da07      	bge.n	8015356 <HAL_MDF_DeInit+0x8a>
        {
          hmdf->Instance->SCDCR &= ~(MDF_SCDCR_SCDEN);
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	681b      	ldr	r3, [r3, #0]
 801534a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	681b      	ldr	r3, [r3, #0]
 8015350:	f022 0201 	bic.w	r2, r2, #1
 8015354:	629a      	str	r2, [r3, #40]	; 0x28
        }

        /* Disable out-off limit detector if needed */
        if ((hmdf->Instance->OLDCR & MDF_OLDCR_OLDACTIVE) != 0U)
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	681b      	ldr	r3, [r3, #0]
 801535a:	699b      	ldr	r3, [r3, #24]
 801535c:	2b00      	cmp	r3, #0
 801535e:	da07      	bge.n	8015370 <HAL_MDF_DeInit+0xa4>
        {
          hmdf->Instance->OLDCR &= ~(MDF_OLDCR_OLDEN);
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	681b      	ldr	r3, [r3, #0]
 8015364:	699a      	ldr	r2, [r3, #24]
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	681b      	ldr	r3, [r3, #0]
 801536a:	f022 0201 	bic.w	r2, r2, #1
 801536e:	619a      	str	r2, [r3, #24]
        }
      }

      /* Disable sound activity detector if needed */
      if (IS_ADF_INSTANCE(hmdf->Instance))
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	681b      	ldr	r3, [r3, #0]
 8015374:	4a50      	ldr	r2, [pc, #320]	; (80154b8 <HAL_MDF_DeInit+0x1ec>)
 8015376:	4293      	cmp	r3, r2
 8015378:	d10c      	bne.n	8015394 <HAL_MDF_DeInit+0xc8>
      {
        if ((hmdf->Instance->SADCR & MDF_SADCR_SADACTIVE) != 0U)
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	681b      	ldr	r3, [r3, #0]
 801537e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015380:	2b00      	cmp	r3, #0
 8015382:	da07      	bge.n	8015394 <HAL_MDF_DeInit+0xc8>
        {
          hmdf->Instance->SADCR &= ~(MDF_SADCR_SADEN);
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	681b      	ldr	r3, [r3, #0]
 8015388:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	681b      	ldr	r3, [r3, #0]
 801538e:	f022 0201 	bic.w	r2, r2, #1
 8015392:	639a      	str	r2, [r3, #56]	; 0x38
        }
      }

      /* Disable filter if needed */
      if ((hmdf->Instance->DFLTCR & MDF_DFLTCR_DFLTACTIVE) != 0U)
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	681b      	ldr	r3, [r3, #0]
 8015398:	689b      	ldr	r3, [r3, #8]
 801539a:	2b00      	cmp	r3, #0
 801539c:	da07      	bge.n	80153ae <HAL_MDF_DeInit+0xe2>
      {
        hmdf->Instance->DFLTCR &= ~(MDF_DFLTCR_DFLTEN);
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	681b      	ldr	r3, [r3, #0]
 80153a2:	689a      	ldr	r2, [r3, #8]
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	681b      	ldr	r3, [r3, #0]
 80153a8:	f022 0201 	bic.w	r2, r2, #1
 80153ac:	609a      	str	r2, [r3, #8]
      }

      /* Disable serial interface if needed */
      if ((hmdf->Instance->SITFCR & MDF_SITFCR_SITFACTIVE) != 0U)
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	681b      	ldr	r3, [r3, #0]
 80153b2:	681b      	ldr	r3, [r3, #0]
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	da07      	bge.n	80153c8 <HAL_MDF_DeInit+0xfc>
      {
        hmdf->Instance->SITFCR &= ~(MDF_SITFCR_SITFEN);
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	681b      	ldr	r3, [r3, #0]
 80153bc:	681a      	ldr	r2, [r3, #0]
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	681b      	ldr	r3, [r3, #0]
 80153c2:	f022 0201 	bic.w	r2, r2, #1
 80153c6:	601a      	str	r2, [r3, #0]
      }

      /* Disable all interrupts and clear all pending flags */
      hmdf->Instance->DFLTIER = 0U;
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	681b      	ldr	r3, [r3, #0]
 80153cc:	2200      	movs	r2, #0
 80153ce:	62da      	str	r2, [r3, #44]	; 0x2c
      hmdf->Instance->DFLTISR = 0xFFFFFFFFU;
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	681b      	ldr	r3, [r3, #0]
 80153d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80153d8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Disable clock generator only for last MDF or ADF instance deinitialization */
      if (((v_mdf1InstanceCounter == 1U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 80153da:	4b38      	ldr	r3, [pc, #224]	; (80154bc <HAL_MDF_DeInit+0x1f0>)
 80153dc:	681b      	ldr	r3, [r3, #0]
 80153de:	2b01      	cmp	r3, #1
 80153e0:	d11d      	bne.n	801541e <HAL_MDF_DeInit+0x152>
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	681b      	ldr	r3, [r3, #0]
 80153e6:	4a2e      	ldr	r2, [pc, #184]	; (80154a0 <HAL_MDF_DeInit+0x1d4>)
 80153e8:	4293      	cmp	r3, r2
 80153ea:	d021      	beq.n	8015430 <HAL_MDF_DeInit+0x164>
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	681b      	ldr	r3, [r3, #0]
 80153f0:	4a2c      	ldr	r2, [pc, #176]	; (80154a4 <HAL_MDF_DeInit+0x1d8>)
 80153f2:	4293      	cmp	r3, r2
 80153f4:	d01c      	beq.n	8015430 <HAL_MDF_DeInit+0x164>
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	681b      	ldr	r3, [r3, #0]
 80153fa:	4a2b      	ldr	r2, [pc, #172]	; (80154a8 <HAL_MDF_DeInit+0x1dc>)
 80153fc:	4293      	cmp	r3, r2
 80153fe:	d017      	beq.n	8015430 <HAL_MDF_DeInit+0x164>
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	681b      	ldr	r3, [r3, #0]
 8015404:	4a29      	ldr	r2, [pc, #164]	; (80154ac <HAL_MDF_DeInit+0x1e0>)
 8015406:	4293      	cmp	r3, r2
 8015408:	d012      	beq.n	8015430 <HAL_MDF_DeInit+0x164>
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	681b      	ldr	r3, [r3, #0]
 801540e:	4a28      	ldr	r2, [pc, #160]	; (80154b0 <HAL_MDF_DeInit+0x1e4>)
 8015410:	4293      	cmp	r3, r2
 8015412:	d00d      	beq.n	8015430 <HAL_MDF_DeInit+0x164>
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	681b      	ldr	r3, [r3, #0]
 8015418:	4a26      	ldr	r2, [pc, #152]	; (80154b4 <HAL_MDF_DeInit+0x1e8>)
 801541a:	4293      	cmp	r3, r2
 801541c:	d008      	beq.n	8015430 <HAL_MDF_DeInit+0x164>
          ((v_adf1InstanceCounter == 1U) && IS_ADF_INSTANCE(hmdf->Instance)))
 801541e:	4b28      	ldr	r3, [pc, #160]	; (80154c0 <HAL_MDF_DeInit+0x1f4>)
 8015420:	681b      	ldr	r3, [r3, #0]
      if (((v_mdf1InstanceCounter == 1U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 8015422:	2b01      	cmp	r3, #1
 8015424:	d113      	bne.n	801544e <HAL_MDF_DeInit+0x182>
          ((v_adf1InstanceCounter == 1U) && IS_ADF_INSTANCE(hmdf->Instance)))
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	681b      	ldr	r3, [r3, #0]
 801542a:	4a23      	ldr	r2, [pc, #140]	; (80154b8 <HAL_MDF_DeInit+0x1ec>)
 801542c:	4293      	cmp	r3, r2
 801542e:	d10e      	bne.n	801544e <HAL_MDF_DeInit+0x182>
      {
        MDF_TypeDef *p_mdf_base;
        /* Get MDF base according instance */
        p_mdf_base = (IS_ADF_INSTANCE(hmdf->Instance)) ? ADF1 : MDF1;
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	681b      	ldr	r3, [r3, #0]
 8015434:	4a20      	ldr	r2, [pc, #128]	; (80154b8 <HAL_MDF_DeInit+0x1ec>)
 8015436:	4293      	cmp	r3, r2
 8015438:	d101      	bne.n	801543e <HAL_MDF_DeInit+0x172>
 801543a:	4b22      	ldr	r3, [pc, #136]	; (80154c4 <HAL_MDF_DeInit+0x1f8>)
 801543c:	e000      	b.n	8015440 <HAL_MDF_DeInit+0x174>
 801543e:	4b22      	ldr	r3, [pc, #136]	; (80154c8 <HAL_MDF_DeInit+0x1fc>)
 8015440:	60bb      	str	r3, [r7, #8]

        /* Disable clock generator */
        p_mdf_base->CKGCR &= ~(MDF_CKGCR_CKDEN);
 8015442:	68bb      	ldr	r3, [r7, #8]
 8015444:	685b      	ldr	r3, [r3, #4]
 8015446:	f023 0201 	bic.w	r2, r3, #1
 801544a:	68bb      	ldr	r3, [r7, #8]
 801544c:	605a      	str	r2, [r3, #4]
      {
        hmdf->MspDeInitCallback = HAL_MDF_MspDeInit;
      }
      hmdf->MspDeInitCallback(hmdf);
#else /* USE_HAL_MDF_REGISTER_CALLBACKS */
      HAL_MDF_MspDeInit(hmdf);
 801544e:	6878      	ldr	r0, [r7, #4]
 8015450:	f000 f846 	bl	80154e0 <HAL_MDF_MspDeInit>
#endif /* USE_HAL_MDF_REGISTER_CALLBACKS */

      /* Update instance counter and table */
      if (IS_ADF_INSTANCE(hmdf->Instance))
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	681b      	ldr	r3, [r3, #0]
 8015458:	4a17      	ldr	r2, [pc, #92]	; (80154b8 <HAL_MDF_DeInit+0x1ec>)
 801545a:	4293      	cmp	r3, r2
 801545c:	d105      	bne.n	801546a <HAL_MDF_DeInit+0x19e>
      {
        v_adf1InstanceCounter--;
 801545e:	4b18      	ldr	r3, [pc, #96]	; (80154c0 <HAL_MDF_DeInit+0x1f4>)
 8015460:	681b      	ldr	r3, [r3, #0]
 8015462:	3b01      	subs	r3, #1
 8015464:	4a16      	ldr	r2, [pc, #88]	; (80154c0 <HAL_MDF_DeInit+0x1f4>)
 8015466:	6013      	str	r3, [r2, #0]
 8015468:	e004      	b.n	8015474 <HAL_MDF_DeInit+0x1a8>
      }
      else /* MDF instance */
      {
        v_mdf1InstanceCounter--;
 801546a:	4b14      	ldr	r3, [pc, #80]	; (80154bc <HAL_MDF_DeInit+0x1f0>)
 801546c:	681b      	ldr	r3, [r3, #0]
 801546e:	3b01      	subs	r3, #1
 8015470:	4a12      	ldr	r2, [pc, #72]	; (80154bc <HAL_MDF_DeInit+0x1f0>)
 8015472:	6013      	str	r3, [r2, #0]
      }
      a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] = (MDF_HandleTypeDef *) NULL;
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	4618      	mov	r0, r3
 801547a:	f000 fa23 	bl	80158c4 <MDF_GetHandleNumberFromInstance>
 801547e:	4603      	mov	r3, r0
 8015480:	4a06      	ldr	r2, [pc, #24]	; (801549c <HAL_MDF_DeInit+0x1d0>)
 8015482:	2100      	movs	r1, #0
 8015484:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      /* Update state */
      hmdf->State = HAL_MDF_STATE_RESET;
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	2200      	movs	r2, #0
 801548c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
  }

  /* Return function status */
  return status;
 8015490:	7bfb      	ldrb	r3, [r7, #15]
}
 8015492:	4618      	mov	r0, r3
 8015494:	3710      	adds	r7, #16
 8015496:	46bd      	mov	sp, r7
 8015498:	bd80      	pop	{r7, pc}
 801549a:	bf00      	nop
 801549c:	20003c4c 	.word	0x20003c4c
 80154a0:	40025080 	.word	0x40025080
 80154a4:	40025100 	.word	0x40025100
 80154a8:	40025180 	.word	0x40025180
 80154ac:	40025200 	.word	0x40025200
 80154b0:	40025280 	.word	0x40025280
 80154b4:	40025300 	.word	0x40025300
 80154b8:	46024080 	.word	0x46024080
 80154bc:	20003c44 	.word	0x20003c44
 80154c0:	20003c48 	.word	0x20003c48
 80154c4:	46024000 	.word	0x46024000
 80154c8:	40025000 	.word	0x40025000

080154cc <HAL_MDF_MspInit>:
  * @brief  Initialize the MDF instance MSP.
  * @param  hmdf MDF handle.
  * @retval None.
  */
__weak void HAL_MDF_MspInit(MDF_HandleTypeDef *hmdf)
{
 80154cc:	b480      	push	{r7}
 80154ce:	b083      	sub	sp, #12
 80154d0:	af00      	add	r7, sp, #0
 80154d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hmdf);

  /* NOTE : This function should not be modified, when the function is needed,
            the HAL_MDF_MspInit could be implemented in the user file */
}
 80154d4:	bf00      	nop
 80154d6:	370c      	adds	r7, #12
 80154d8:	46bd      	mov	sp, r7
 80154da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154de:	4770      	bx	lr

080154e0 <HAL_MDF_MspDeInit>:
  * @brief  De-initialize the MDF instance MSP.
  * @param  hmdf MDF handle.
  * @retval None.
  */
__weak void HAL_MDF_MspDeInit(MDF_HandleTypeDef *hmdf)
{
 80154e0:	b480      	push	{r7}
 80154e2:	b083      	sub	sp, #12
 80154e4:	af00      	add	r7, sp, #0
 80154e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hmdf);

  /* NOTE : This function should not be modified, when the function is needed,
            the HAL_MDF_MspDeInit could be implemented in the user file */
}
 80154e8:	bf00      	nop
 80154ea:	370c      	adds	r7, #12
 80154ec:	46bd      	mov	sp, r7
 80154ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154f2:	4770      	bx	lr

080154f4 <HAL_MDF_AcqStart_DMA>:
  * @param  pDmaConfig DMA configuration parameters.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_MDF_AcqStart_DMA(MDF_HandleTypeDef *hmdf, const MDF_FilterConfigTypeDef *pFilterConfig,
                                       const MDF_DmaConfigTypeDef *pDmaConfig)
{
 80154f4:	b580      	push	{r7, lr}
 80154f6:	b086      	sub	sp, #24
 80154f8:	af00      	add	r7, sp, #0
 80154fa:	60f8      	str	r0, [r7, #12]
 80154fc:	60b9      	str	r1, [r7, #8]
 80154fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015500:	2300      	movs	r3, #0
 8015502:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  if ((pFilterConfig == NULL) || (pDmaConfig == NULL))
 8015504:	68bb      	ldr	r3, [r7, #8]
 8015506:	2b00      	cmp	r3, #0
 8015508:	d002      	beq.n	8015510 <HAL_MDF_AcqStart_DMA+0x1c>
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	2b00      	cmp	r3, #0
 801550e:	d102      	bne.n	8015516 <HAL_MDF_AcqStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8015510:	2301      	movs	r3, #1
 8015512:	75fb      	strb	r3, [r7, #23]
 8015514:	e0fd      	b.n	8015712 <HAL_MDF_AcqStart_DMA+0x21e>
    }
    else
    {
      assert_param(IS_MDF_ACQUISITION_MODE(pFilterConfig->AcquisitionMode));
    }
    if ((IS_ADF_INSTANCE(hmdf->Instance)) && (pFilterConfig->SoundActivity.Activation == ENABLE) &&
 8015516:	68fb      	ldr	r3, [r7, #12]
 8015518:	681b      	ldr	r3, [r3, #0]
 801551a:	4a80      	ldr	r2, [pc, #512]	; (801571c <HAL_MDF_AcqStart_DMA+0x228>)
 801551c:	4293      	cmp	r3, r2
 801551e:	d113      	bne.n	8015548 <HAL_MDF_AcqStart_DMA+0x54>
 8015520:	68bb      	ldr	r3, [r7, #8]
 8015522:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015526:	2b01      	cmp	r3, #1
 8015528:	d10e      	bne.n	8015548 <HAL_MDF_AcqStart_DMA+0x54>
        ((pFilterConfig->AcquisitionMode == MDF_MODE_ASYNC_SINGLE) ||
 801552a:	68bb      	ldr	r3, [r7, #8]
 801552c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    if ((IS_ADF_INSTANCE(hmdf->Instance)) && (pFilterConfig->SoundActivity.Activation == ENABLE) &&
 801552e:	2b10      	cmp	r3, #16
 8015530:	d007      	beq.n	8015542 <HAL_MDF_AcqStart_DMA+0x4e>
         (pFilterConfig->AcquisitionMode == MDF_MODE_SYNC_SINGLE) ||
 8015532:	68bb      	ldr	r3, [r7, #8]
 8015534:	6e5b      	ldr	r3, [r3, #100]	; 0x64
        ((pFilterConfig->AcquisitionMode == MDF_MODE_ASYNC_SINGLE) ||
 8015536:	2b30      	cmp	r3, #48	; 0x30
 8015538:	d003      	beq.n	8015542 <HAL_MDF_AcqStart_DMA+0x4e>
         (pFilterConfig->AcquisitionMode == MDF_MODE_WINDOW_CONT)))
 801553a:	68bb      	ldr	r3, [r7, #8]
 801553c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
         (pFilterConfig->AcquisitionMode == MDF_MODE_SYNC_SINGLE) ||
 801553e:	2b40      	cmp	r3, #64	; 0x40
 8015540:	d102      	bne.n	8015548 <HAL_MDF_AcqStart_DMA+0x54>
    {
      status = HAL_ERROR;
 8015542:	2301      	movs	r3, #1
 8015544:	75fb      	strb	r3, [r7, #23]
 8015546:	e023      	b.n	8015590 <HAL_MDF_AcqStart_DMA+0x9c>
    }
    else if (pFilterConfig->AcquisitionMode == MDF_MODE_SYNC_SNAPSHOT)
 8015548:	68bb      	ldr	r3, [r7, #8]
 801554a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801554c:	2b50      	cmp	r3, #80	; 0x50
 801554e:	d102      	bne.n	8015556 <HAL_MDF_AcqStart_DMA+0x62>
    {
      status = HAL_ERROR;
 8015550:	2301      	movs	r3, #1
 8015552:	75fb      	strb	r3, [r7, #23]
 8015554:	e01c      	b.n	8015590 <HAL_MDF_AcqStart_DMA+0x9c>
    }
    /* Check state */
    else if (hmdf->State != HAL_MDF_STATE_READY)
 8015556:	68fb      	ldr	r3, [r7, #12]
 8015558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801555c:	b2db      	uxtb	r3, r3
 801555e:	2b01      	cmp	r3, #1
 8015560:	d002      	beq.n	8015568 <HAL_MDF_AcqStart_DMA+0x74>
    {
      status = HAL_ERROR;
 8015562:	2301      	movs	r3, #1
 8015564:	75fb      	strb	r3, [r7, #23]
 8015566:	e013      	b.n	8015590 <HAL_MDF_AcqStart_DMA+0x9c>
    }
    /* Check filter status */
    else if ((hmdf->Instance->DFLTCR & MDF_DFLTCR_DFLTACTIVE) != 0U)
 8015568:	68fb      	ldr	r3, [r7, #12]
 801556a:	681b      	ldr	r3, [r3, #0]
 801556c:	689b      	ldr	r3, [r3, #8]
 801556e:	2b00      	cmp	r3, #0
 8015570:	da02      	bge.n	8015578 <HAL_MDF_AcqStart_DMA+0x84>
    {
      status = HAL_ERROR;
 8015572:	2301      	movs	r3, #1
 8015574:	75fb      	strb	r3, [r7, #23]
 8015576:	e00b      	b.n	8015590 <HAL_MDF_AcqStart_DMA+0x9c>
    }
    else
    {
      /* For ADF instance, check SAD status */
      if (IS_ADF_INSTANCE(hmdf->Instance))
 8015578:	68fb      	ldr	r3, [r7, #12]
 801557a:	681b      	ldr	r3, [r3, #0]
 801557c:	4a67      	ldr	r2, [pc, #412]	; (801571c <HAL_MDF_AcqStart_DMA+0x228>)
 801557e:	4293      	cmp	r3, r2
 8015580:	d106      	bne.n	8015590 <HAL_MDF_AcqStart_DMA+0x9c>
      {
        if ((hmdf->Instance->SADCR & MDF_SADCR_SADACTIVE) != 0U)
 8015582:	68fb      	ldr	r3, [r7, #12]
 8015584:	681b      	ldr	r3, [r3, #0]
 8015586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015588:	2b00      	cmp	r3, #0
 801558a:	da01      	bge.n	8015590 <HAL_MDF_AcqStart_DMA+0x9c>
        {
          status = HAL_ERROR;
 801558c:	2301      	movs	r3, #1
 801558e:	75fb      	strb	r3, [r7, #23]
        }
      }
    }

    if (status == HAL_OK)
 8015590:	7dfb      	ldrb	r3, [r7, #23]
 8015592:	2b00      	cmp	r3, #0
 8015594:	f040 80bd 	bne.w	8015712 <HAL_MDF_AcqStart_DMA+0x21e>
    {
      /* For MDF instance, check OLD status and main filter order */
      assert_param(IS_MDF_CIC_MODE(pFilterConfig->CicMode));
      if (IS_MDF_INSTANCE(hmdf->Instance))
 8015598:	68fb      	ldr	r3, [r7, #12]
 801559a:	681b      	ldr	r3, [r3, #0]
 801559c:	4a60      	ldr	r2, [pc, #384]	; (8015720 <HAL_MDF_AcqStart_DMA+0x22c>)
 801559e:	4293      	cmp	r3, r2
 80155a0:	d018      	beq.n	80155d4 <HAL_MDF_AcqStart_DMA+0xe0>
 80155a2:	68fb      	ldr	r3, [r7, #12]
 80155a4:	681b      	ldr	r3, [r3, #0]
 80155a6:	4a5f      	ldr	r2, [pc, #380]	; (8015724 <HAL_MDF_AcqStart_DMA+0x230>)
 80155a8:	4293      	cmp	r3, r2
 80155aa:	d013      	beq.n	80155d4 <HAL_MDF_AcqStart_DMA+0xe0>
 80155ac:	68fb      	ldr	r3, [r7, #12]
 80155ae:	681b      	ldr	r3, [r3, #0]
 80155b0:	4a5d      	ldr	r2, [pc, #372]	; (8015728 <HAL_MDF_AcqStart_DMA+0x234>)
 80155b2:	4293      	cmp	r3, r2
 80155b4:	d00e      	beq.n	80155d4 <HAL_MDF_AcqStart_DMA+0xe0>
 80155b6:	68fb      	ldr	r3, [r7, #12]
 80155b8:	681b      	ldr	r3, [r3, #0]
 80155ba:	4a5c      	ldr	r2, [pc, #368]	; (801572c <HAL_MDF_AcqStart_DMA+0x238>)
 80155bc:	4293      	cmp	r3, r2
 80155be:	d009      	beq.n	80155d4 <HAL_MDF_AcqStart_DMA+0xe0>
 80155c0:	68fb      	ldr	r3, [r7, #12]
 80155c2:	681b      	ldr	r3, [r3, #0]
 80155c4:	4a5a      	ldr	r2, [pc, #360]	; (8015730 <HAL_MDF_AcqStart_DMA+0x23c>)
 80155c6:	4293      	cmp	r3, r2
 80155c8:	d004      	beq.n	80155d4 <HAL_MDF_AcqStart_DMA+0xe0>
 80155ca:	68fb      	ldr	r3, [r7, #12]
 80155cc:	681b      	ldr	r3, [r3, #0]
 80155ce:	4a59      	ldr	r2, [pc, #356]	; (8015734 <HAL_MDF_AcqStart_DMA+0x240>)
 80155d0:	4293      	cmp	r3, r2
 80155d2:	d10a      	bne.n	80155ea <HAL_MDF_AcqStart_DMA+0xf6>
      {
        if (((hmdf->Instance->OLDCR & MDF_OLDCR_OLDACTIVE) != 0U) && (pFilterConfig->CicMode >= MDF_ONE_FILTER_SINC4))
 80155d4:	68fb      	ldr	r3, [r7, #12]
 80155d6:	681b      	ldr	r3, [r3, #0]
 80155d8:	699b      	ldr	r3, [r3, #24]
 80155da:	2b00      	cmp	r3, #0
 80155dc:	da05      	bge.n	80155ea <HAL_MDF_AcqStart_DMA+0xf6>
 80155de:	68bb      	ldr	r3, [r7, #8]
 80155e0:	689b      	ldr	r3, [r3, #8]
 80155e2:	2b3f      	cmp	r3, #63	; 0x3f
 80155e4:	d901      	bls.n	80155ea <HAL_MDF_AcqStart_DMA+0xf6>
        {
          status = HAL_ERROR;
 80155e6:	2301      	movs	r3, #1
 80155e8:	75fb      	strb	r3, [r7, #23]
        }
      }

      if (status == HAL_OK)
 80155ea:	7dfb      	ldrb	r3, [r7, #23]
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	f040 8090 	bne.w	8015712 <HAL_MDF_AcqStart_DMA+0x21e>
      {
        uint32_t SrcAddress;

        if (pFilterConfig->ReshapeFilter.Activation == ENABLE)
 80155f2:	68bb      	ldr	r3, [r7, #8]
 80155f4:	7e1b      	ldrb	r3, [r3, #24]
 80155f6:	2b01      	cmp	r3, #1
 80155f8:	d107      	bne.n	801560a <HAL_MDF_AcqStart_DMA+0x116>
        {
          /* Enable reshape filter overrun interrupt */
          hmdf->Instance->DFLTIER |= MDF_DFLTIER_RFOVRIE;
 80155fa:	68fb      	ldr	r3, [r7, #12]
 80155fc:	681b      	ldr	r3, [r3, #0]
 80155fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015600:	68fb      	ldr	r3, [r7, #12]
 8015602:	681b      	ldr	r3, [r3, #0]
 8015604:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8015608:	62da      	str	r2, [r3, #44]	; 0x2c
        }

        /* Enable saturation interrupt */
        hmdf->Instance->DFLTIER |= MDF_DFLTIER_SATIE;
 801560a:	68fb      	ldr	r3, [r7, #12]
 801560c:	681b      	ldr	r3, [r3, #0]
 801560e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015610:	68fb      	ldr	r3, [r7, #12]
 8015612:	681b      	ldr	r3, [r3, #0]
 8015614:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015618:	62da      	str	r2, [r3, #44]	; 0x2c

        if ((IS_ADF_INSTANCE(hmdf->Instance)) && (pFilterConfig->SoundActivity.Activation == ENABLE))
 801561a:	68fb      	ldr	r3, [r7, #12]
 801561c:	681b      	ldr	r3, [r3, #0]
 801561e:	4a3f      	ldr	r2, [pc, #252]	; (801571c <HAL_MDF_AcqStart_DMA+0x228>)
 8015620:	4293      	cmp	r3, r2
 8015622:	d115      	bne.n	8015650 <HAL_MDF_AcqStart_DMA+0x15c>
 8015624:	68bb      	ldr	r3, [r7, #8]
 8015626:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801562a:	2b01      	cmp	r3, #1
 801562c:	d110      	bne.n	8015650 <HAL_MDF_AcqStart_DMA+0x15c>
        {
          /* Enable sound level value ready and sound activity detection interrupts */
          assert_param(IS_FUNCTIONAL_STATE(pFilterConfig->SoundActivity.SoundLevelInterrupt));
          hmdf->Instance->DFLTIER |= (pFilterConfig->SoundActivity.SoundLevelInterrupt == ENABLE) ?
 801562e:	68fb      	ldr	r3, [r7, #12]
 8015630:	681b      	ldr	r3, [r3, #0]
 8015632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015634:	68bb      	ldr	r3, [r7, #8]
 8015636:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
                                     (MDF_DFLTIER_SDLVLIE | MDF_DFLTIER_SDDETIE) :
 801563a:	2b01      	cmp	r3, #1
 801563c:	d102      	bne.n	8015644 <HAL_MDF_AcqStart_DMA+0x150>
 801563e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8015642:	e001      	b.n	8015648 <HAL_MDF_AcqStart_DMA+0x154>
 8015644:	f44f 5180 	mov.w	r1, #4096	; 0x1000
          hmdf->Instance->DFLTIER |= (pFilterConfig->SoundActivity.SoundLevelInterrupt == ENABLE) ?
 8015648:	68fb      	ldr	r3, [r7, #12]
 801564a:	681b      	ldr	r3, [r3, #0]
 801564c:	430a      	orrs	r2, r1
 801564e:	62da      	str	r2, [r3, #44]	; 0x2c
                                     MDF_DFLTIER_SDDETIE;
        }

        /* Enable MDF DMA requests */
        hmdf->Instance->DFLTCR = MDF_DFLTCR_DMAEN;
 8015650:	68fb      	ldr	r3, [r7, #12]
 8015652:	681b      	ldr	r3, [r3, #0]
 8015654:	2202      	movs	r2, #2
 8015656:	609a      	str	r2, [r3, #8]

        /* Start DMA transfer */
        hmdf->hdma->XferCpltCallback     = MDF_DmaXferCpltCallback;
 8015658:	68fb      	ldr	r3, [r7, #12]
 801565a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801565c:	4a36      	ldr	r2, [pc, #216]	; (8015738 <HAL_MDF_AcqStart_DMA+0x244>)
 801565e:	661a      	str	r2, [r3, #96]	; 0x60
        hmdf->hdma->XferHalfCpltCallback = MDF_DmaXferHalfCpltCallback;
 8015660:	68fb      	ldr	r3, [r7, #12]
 8015662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015664:	4a35      	ldr	r2, [pc, #212]	; (801573c <HAL_MDF_AcqStart_DMA+0x248>)
 8015666:	665a      	str	r2, [r3, #100]	; 0x64
        hmdf->hdma->XferErrorCallback    = MDF_DmaErrorCallback;
 8015668:	68fb      	ldr	r3, [r7, #12]
 801566a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801566c:	4a34      	ldr	r2, [pc, #208]	; (8015740 <HAL_MDF_AcqStart_DMA+0x24c>)
 801566e:	669a      	str	r2, [r3, #104]	; 0x68
        SrcAddress = (pDmaConfig->MsbOnly == ENABLE) ? (((uint32_t) &hmdf->Instance->DFLTDR) + 2U) :
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	7a1b      	ldrb	r3, [r3, #8]
 8015674:	2b01      	cmp	r3, #1
 8015676:	d104      	bne.n	8015682 <HAL_MDF_AcqStart_DMA+0x18e>
 8015678:	68fb      	ldr	r3, [r7, #12]
 801567a:	681b      	ldr	r3, [r3, #0]
 801567c:	3370      	adds	r3, #112	; 0x70
 801567e:	3302      	adds	r3, #2
 8015680:	e002      	b.n	8015688 <HAL_MDF_AcqStart_DMA+0x194>
                     (uint32_t) &hmdf->Instance->DFLTDR;
 8015682:	68fb      	ldr	r3, [r7, #12]
 8015684:	681b      	ldr	r3, [r3, #0]
 8015686:	3370      	adds	r3, #112	; 0x70
        SrcAddress = (pDmaConfig->MsbOnly == ENABLE) ? (((uint32_t) &hmdf->Instance->DFLTDR) + 2U) :
 8015688:	613b      	str	r3, [r7, #16]
        if ((hmdf->hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 801568a:	68fb      	ldr	r3, [r7, #12]
 801568c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801568e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015694:	2b00      	cmp	r3, #0
 8015696:	d023      	beq.n	80156e0 <HAL_MDF_AcqStart_DMA+0x1ec>
        {
          if (hmdf->hdma->LinkedListQueue != NULL)
 8015698:	68fb      	ldr	r3, [r7, #12]
 801569a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801569c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d01b      	beq.n	80156da <HAL_MDF_AcqStart_DMA+0x1e6>
          {
            hmdf->hdma->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = pDmaConfig->DataLength;
 80156a2:	68fb      	ldr	r3, [r7, #12]
 80156a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80156a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80156a8:	681b      	ldr	r3, [r3, #0]
 80156aa:	687a      	ldr	r2, [r7, #4]
 80156ac:	6852      	ldr	r2, [r2, #4]
 80156ae:	609a      	str	r2, [r3, #8]
            hmdf->hdma->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = SrcAddress;
 80156b0:	68fb      	ldr	r3, [r7, #12]
 80156b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80156b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80156b6:	681b      	ldr	r3, [r3, #0]
 80156b8:	693a      	ldr	r2, [r7, #16]
 80156ba:	60da      	str	r2, [r3, #12]
            hmdf->hdma->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pDmaConfig->Address;
 80156bc:	68fb      	ldr	r3, [r7, #12]
 80156be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80156c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80156c2:	681b      	ldr	r3, [r3, #0]
 80156c4:	687a      	ldr	r2, [r7, #4]
 80156c6:	6812      	ldr	r2, [r2, #0]
 80156c8:	611a      	str	r2, [r3, #16]

            status = HAL_DMAEx_List_Start_IT(hmdf->hdma);
 80156ca:	68fb      	ldr	r3, [r7, #12]
 80156cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80156ce:	4618      	mov	r0, r3
 80156d0:	f7fd fa10 	bl	8012af4 <HAL_DMAEx_List_Start_IT>
 80156d4:	4603      	mov	r3, r0
 80156d6:	75fb      	strb	r3, [r7, #23]
 80156d8:	e00d      	b.n	80156f6 <HAL_MDF_AcqStart_DMA+0x202>
          }
          else
          {
            status = HAL_ERROR;
 80156da:	2301      	movs	r3, #1
 80156dc:	75fb      	strb	r3, [r7, #23]
 80156de:	e00a      	b.n	80156f6 <HAL_MDF_AcqStart_DMA+0x202>
          }
        }
        else
        {
          status = HAL_DMA_Start_IT(hmdf->hdma, SrcAddress, pDmaConfig->Address, pDmaConfig->DataLength);
 80156e0:	68fb      	ldr	r3, [r7, #12]
 80156e2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	681a      	ldr	r2, [r3, #0]
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	685b      	ldr	r3, [r3, #4]
 80156ec:	6939      	ldr	r1, [r7, #16]
 80156ee:	f7fc fd48 	bl	8012182 <HAL_DMA_Start_IT>
 80156f2:	4603      	mov	r3, r0
 80156f4:	75fb      	strb	r3, [r7, #23]
        }
        if (status != HAL_OK)
 80156f6:	7dfb      	ldrb	r3, [r7, #23]
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d006      	beq.n	801570a <HAL_MDF_AcqStart_DMA+0x216>
        {
          /* Update state */
          hmdf->State = HAL_MDF_STATE_ERROR;
 80156fc:	68fb      	ldr	r3, [r7, #12]
 80156fe:	22ff      	movs	r2, #255	; 0xff
 8015700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          status = HAL_ERROR;
 8015704:	2301      	movs	r3, #1
 8015706:	75fb      	strb	r3, [r7, #23]
 8015708:	e003      	b.n	8015712 <HAL_MDF_AcqStart_DMA+0x21e>
        }
        else
        {
          /* Configure filter and start acquisition */
          MDF_AcqStart(hmdf, pFilterConfig);
 801570a:	68b9      	ldr	r1, [r7, #8]
 801570c:	68f8      	ldr	r0, [r7, #12]
 801570e:	f000 f91d 	bl	801594c <MDF_AcqStart>
      }
    }
  }

  /* Return function status */
  return status;
 8015712:	7dfb      	ldrb	r3, [r7, #23]
}
 8015714:	4618      	mov	r0, r3
 8015716:	3718      	adds	r7, #24
 8015718:	46bd      	mov	sp, r7
 801571a:	bd80      	pop	{r7, pc}
 801571c:	46024080 	.word	0x46024080
 8015720:	40025080 	.word	0x40025080
 8015724:	40025100 	.word	0x40025100
 8015728:	40025180 	.word	0x40025180
 801572c:	40025200 	.word	0x40025200
 8015730:	40025280 	.word	0x40025280
 8015734:	40025300 	.word	0x40025300
 8015738:	08015c99 	.word	0x08015c99
 801573c:	08015cc5 	.word	0x08015cc5
 8015740:	08015ce1 	.word	0x08015ce1

08015744 <HAL_MDF_AcqStop_DMA>:
  * @brief  This function allows to stop acquisition in DMA mode.
  * @param  hmdf MDF handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_MDF_AcqStop_DMA(MDF_HandleTypeDef *hmdf)
{
 8015744:	b580      	push	{r7, lr}
 8015746:	b084      	sub	sp, #16
 8015748:	af00      	add	r7, sp, #0
 801574a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801574c:	2300      	movs	r3, #0
 801574e:	73fb      	strb	r3, [r7, #15]

  /* Check if state is ready and filter active */
  if (hmdf->State == HAL_MDF_STATE_READY)
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015756:	b2db      	uxtb	r3, r3
 8015758:	2b01      	cmp	r3, #1
 801575a:	d10a      	bne.n	8015772 <HAL_MDF_AcqStop_DMA+0x2e>
  {
    if ((hmdf->Instance->DFLTCR & MDF_DFLTCR_DFLTACTIVE) != MDF_DFLTCR_DFLTACTIVE)
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	681b      	ldr	r3, [r3, #0]
 8015760:	689b      	ldr	r3, [r3, #8]
 8015762:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015766:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801576a:	d019      	beq.n	80157a0 <HAL_MDF_AcqStop_DMA+0x5c>
    {
      status = HAL_ERROR;
 801576c:	2301      	movs	r3, #1
 801576e:	73fb      	strb	r3, [r7, #15]
 8015770:	e016      	b.n	80157a0 <HAL_MDF_AcqStop_DMA+0x5c>
    }
  }
  else
  {
    /* Check state */
    if (hmdf->State != HAL_MDF_STATE_ACQUISITION)
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015778:	b2db      	uxtb	r3, r3
 801577a:	2b02      	cmp	r3, #2
 801577c:	d002      	beq.n	8015784 <HAL_MDF_AcqStop_DMA+0x40>
    {
      status = HAL_ERROR;
 801577e:	2301      	movs	r3, #1
 8015780:	73fb      	strb	r3, [r7, #15]
 8015782:	e00d      	b.n	80157a0 <HAL_MDF_AcqStop_DMA+0x5c>
    }
    else
    {
      /* Stop the DMA transfer */
      if (HAL_DMA_Abort(hmdf->hdma) != HAL_OK)
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015788:	4618      	mov	r0, r3
 801578a:	f7fc fd5a 	bl	8012242 <HAL_DMA_Abort>
 801578e:	4603      	mov	r3, r0
 8015790:	2b00      	cmp	r3, #0
 8015792:	d005      	beq.n	80157a0 <HAL_MDF_AcqStop_DMA+0x5c>
      {
        /* Update state */
        hmdf->State = HAL_MDF_STATE_ERROR;
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	22ff      	movs	r2, #255	; 0xff
 8015798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        status = HAL_ERROR;
 801579c:	2301      	movs	r3, #1
 801579e:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  if (status == HAL_OK)
 80157a0:	7bfb      	ldrb	r3, [r7, #15]
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d14b      	bne.n	801583e <HAL_MDF_AcqStop_DMA+0xfa>
  {
    /* Disable sound activity detector if needed for ADF instance */
    if (IS_ADF_INSTANCE(hmdf->Instance))
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	681b      	ldr	r3, [r3, #0]
 80157aa:	4a27      	ldr	r2, [pc, #156]	; (8015848 <HAL_MDF_AcqStop_DMA+0x104>)
 80157ac:	4293      	cmp	r3, r2
 80157ae:	d10c      	bne.n	80157ca <HAL_MDF_AcqStop_DMA+0x86>
    {
      if ((hmdf->Instance->SADCR & MDF_SADCR_SADACTIVE) != 0U)
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	681b      	ldr	r3, [r3, #0]
 80157b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	da07      	bge.n	80157ca <HAL_MDF_AcqStop_DMA+0x86>
      {
        hmdf->Instance->SADCR &= ~(MDF_SADCR_SADEN);
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	681b      	ldr	r3, [r3, #0]
 80157be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	681b      	ldr	r3, [r3, #0]
 80157c4:	f022 0201 	bic.w	r2, r2, #1
 80157c8:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }

    /* Disable filter */
    hmdf->Instance->DFLTCR &= ~(MDF_DFLTCR_DFLTEN);
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	681b      	ldr	r3, [r3, #0]
 80157ce:	689a      	ldr	r2, [r3, #8]
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	681b      	ldr	r3, [r3, #0]
 80157d4:	f022 0201 	bic.w	r2, r2, #1
 80157d8:	609a      	str	r2, [r3, #8]

    /* Disable interrupts and clear all potential pending flags */
    if (IS_ADF_INSTANCE(hmdf->Instance))
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	681b      	ldr	r3, [r3, #0]
 80157de:	4a1a      	ldr	r2, [pc, #104]	; (8015848 <HAL_MDF_AcqStop_DMA+0x104>)
 80157e0:	4293      	cmp	r3, r2
 80157e2:	d110      	bne.n	8015806 <HAL_MDF_AcqStop_DMA+0xc2>
    {
      hmdf->Instance->DFLTIER &= ~(MDF_DFLTIER_SATIE | MDF_DFLTIER_RFOVRIE | MDF_DFLTIER_SDDETIE |
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	681b      	ldr	r3, [r3, #0]
 80157e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	681b      	ldr	r3, [r3, #0]
 80157ee:	f422 5268 	bic.w	r2, r2, #14848	; 0x3a00
 80157f2:	62da      	str	r2, [r3, #44]	; 0x2c
                                   MDF_DFLTIER_SDLVLIE);
      hmdf->Instance->DFLTISR |= (MDF_DFLTISR_SATF | MDF_DFLTISR_RFOVRF | MDF_DFLTISR_SDDETF |
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	681b      	ldr	r3, [r3, #0]
 80157f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	681b      	ldr	r3, [r3, #0]
 80157fe:	f442 5268 	orr.w	r2, r2, #14848	; 0x3a00
 8015802:	631a      	str	r2, [r3, #48]	; 0x30
 8015804:	e00f      	b.n	8015826 <HAL_MDF_AcqStop_DMA+0xe2>
                                  MDF_DFLTISR_SDLVLF);
    }
    else
    {
      hmdf->Instance->DFLTIER &= ~(MDF_DFLTIER_SATIE | MDF_DFLTIER_RFOVRIE);
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	681b      	ldr	r3, [r3, #0]
 801580a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	681b      	ldr	r3, [r3, #0]
 8015810:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8015814:	62da      	str	r2, [r3, #44]	; 0x2c
      hmdf->Instance->DFLTISR |= (MDF_DFLTISR_SATF | MDF_DFLTISR_RFOVRF);
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	681b      	ldr	r3, [r3, #0]
 801581a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	681b      	ldr	r3, [r3, #0]
 8015820:	f442 6220 	orr.w	r2, r2, #2560	; 0xa00
 8015824:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Disable MDF DMA requests */
    hmdf->Instance->DFLTCR &= ~(MDF_DFLTCR_DMAEN);
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	681b      	ldr	r3, [r3, #0]
 801582a:	689a      	ldr	r2, [r3, #8]
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	681b      	ldr	r3, [r3, #0]
 8015830:	f022 0202 	bic.w	r2, r2, #2
 8015834:	609a      	str	r2, [r3, #8]

    /* Update state */
    hmdf->State = HAL_MDF_STATE_READY;
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	2201      	movs	r2, #1
 801583a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Return function status */
  return status;
 801583e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015840:	4618      	mov	r0, r3
 8015842:	3710      	adds	r7, #16
 8015844:	46bd      	mov	sp, r7
 8015846:	bd80      	pop	{r7, pc}
 8015848:	46024080 	.word	0x46024080

0801584c <HAL_MDF_GenerateTrgo>:
  * @brief  This function allows to generate pulse on TRGO signal.
  * @param  hmdf MDF handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_MDF_GenerateTrgo(const MDF_HandleTypeDef *hmdf)
{
 801584c:	b480      	push	{r7}
 801584e:	b085      	sub	sp, #20
 8015850:	af00      	add	r7, sp, #0
 8015852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015854:	2300      	movs	r3, #0
 8015856:	73fb      	strb	r3, [r7, #15]

  /* Check state */
  if (hmdf->State != HAL_MDF_STATE_READY)
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801585e:	b2db      	uxtb	r3, r3
 8015860:	2b01      	cmp	r3, #1
 8015862:	d007      	beq.n	8015874 <HAL_MDF_GenerateTrgo+0x28>
  {
    if (hmdf->State != HAL_MDF_STATE_ACQUISITION)
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801586a:	b2db      	uxtb	r3, r3
 801586c:	2b02      	cmp	r3, #2
 801586e:	d001      	beq.n	8015874 <HAL_MDF_GenerateTrgo+0x28>
    {
      status = HAL_ERROR;
 8015870:	2301      	movs	r3, #1
 8015872:	73fb      	strb	r3, [r7, #15]
    }
  }

  if (status == HAL_OK)
 8015874:	7bfb      	ldrb	r3, [r7, #15]
 8015876:	2b00      	cmp	r3, #0
 8015878:	d117      	bne.n	80158aa <HAL_MDF_GenerateTrgo+0x5e>
  {
    MDF_TypeDef *p_mdf_base;

    /* Get MDF base according instance */
    p_mdf_base = (IS_ADF_INSTANCE(hmdf->Instance)) ? ADF1 : MDF1;
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	681b      	ldr	r3, [r3, #0]
 801587e:	4a0e      	ldr	r2, [pc, #56]	; (80158b8 <HAL_MDF_GenerateTrgo+0x6c>)
 8015880:	4293      	cmp	r3, r2
 8015882:	d101      	bne.n	8015888 <HAL_MDF_GenerateTrgo+0x3c>
 8015884:	4b0d      	ldr	r3, [pc, #52]	; (80158bc <HAL_MDF_GenerateTrgo+0x70>)
 8015886:	e000      	b.n	801588a <HAL_MDF_GenerateTrgo+0x3e>
 8015888:	4b0d      	ldr	r3, [pc, #52]	; (80158c0 <HAL_MDF_GenerateTrgo+0x74>)
 801588a:	60bb      	str	r3, [r7, #8]

    /* Check if trigger output control is already active */
    if ((p_mdf_base->GCR & MDF_GCR_TRGO) == MDF_GCR_TRGO)
 801588c:	68bb      	ldr	r3, [r7, #8]
 801588e:	681b      	ldr	r3, [r3, #0]
 8015890:	f003 0301 	and.w	r3, r3, #1
 8015894:	2b01      	cmp	r3, #1
 8015896:	d102      	bne.n	801589e <HAL_MDF_GenerateTrgo+0x52>
    {
      status = HAL_ERROR;
 8015898:	2301      	movs	r3, #1
 801589a:	73fb      	strb	r3, [r7, #15]
 801589c:	e005      	b.n	80158aa <HAL_MDF_GenerateTrgo+0x5e>
    }
    else
    {
      /* Generate pulse on trigger output control signal */
      p_mdf_base->GCR |= MDF_GCR_TRGO;
 801589e:	68bb      	ldr	r3, [r7, #8]
 80158a0:	681b      	ldr	r3, [r3, #0]
 80158a2:	f043 0201 	orr.w	r2, r3, #1
 80158a6:	68bb      	ldr	r3, [r7, #8]
 80158a8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80158aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80158ac:	4618      	mov	r0, r3
 80158ae:	3714      	adds	r7, #20
 80158b0:	46bd      	mov	sp, r7
 80158b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158b6:	4770      	bx	lr
 80158b8:	46024080 	.word	0x46024080
 80158bc:	46024000 	.word	0x46024000
 80158c0:	40025000 	.word	0x40025000

080158c4 <MDF_GetHandleNumberFromInstance>:
  * @brief  This function allows to get the handle number from instance.
  * @param  pInstance MDF instance.
  * @retval Instance number.
  */
static uint32_t MDF_GetHandleNumberFromInstance(const MDF_Filter_TypeDef *const pInstance)
{
 80158c4:	b480      	push	{r7}
 80158c6:	b085      	sub	sp, #20
 80158c8:	af00      	add	r7, sp, #0
 80158ca:	6078      	str	r0, [r7, #4]
  uint32_t handle_number;

  /* Get handle number from instance */
  if (pInstance == MDF1_Filter0)
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	4a19      	ldr	r2, [pc, #100]	; (8015934 <MDF_GetHandleNumberFromInstance+0x70>)
 80158d0:	4293      	cmp	r3, r2
 80158d2:	d102      	bne.n	80158da <MDF_GetHandleNumberFromInstance+0x16>
  {
    handle_number = 0U;
 80158d4:	2300      	movs	r3, #0
 80158d6:	60fb      	str	r3, [r7, #12]
 80158d8:	e024      	b.n	8015924 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter1)
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	4a16      	ldr	r2, [pc, #88]	; (8015938 <MDF_GetHandleNumberFromInstance+0x74>)
 80158de:	4293      	cmp	r3, r2
 80158e0:	d102      	bne.n	80158e8 <MDF_GetHandleNumberFromInstance+0x24>
  {
    handle_number = 1U;
 80158e2:	2301      	movs	r3, #1
 80158e4:	60fb      	str	r3, [r7, #12]
 80158e6:	e01d      	b.n	8015924 <MDF_GetHandleNumberFromInstance+0x60>
  }
#if !defined(STM32U535xx) && !defined(STM32U545xx)
  else if (pInstance == MDF1_Filter2)
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	4a14      	ldr	r2, [pc, #80]	; (801593c <MDF_GetHandleNumberFromInstance+0x78>)
 80158ec:	4293      	cmp	r3, r2
 80158ee:	d102      	bne.n	80158f6 <MDF_GetHandleNumberFromInstance+0x32>
  {
    handle_number = 2U;
 80158f0:	2302      	movs	r3, #2
 80158f2:	60fb      	str	r3, [r7, #12]
 80158f4:	e016      	b.n	8015924 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter3)
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	4a11      	ldr	r2, [pc, #68]	; (8015940 <MDF_GetHandleNumberFromInstance+0x7c>)
 80158fa:	4293      	cmp	r3, r2
 80158fc:	d102      	bne.n	8015904 <MDF_GetHandleNumberFromInstance+0x40>
  {
    handle_number = 3U;
 80158fe:	2303      	movs	r3, #3
 8015900:	60fb      	str	r3, [r7, #12]
 8015902:	e00f      	b.n	8015924 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter4)
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	4a0f      	ldr	r2, [pc, #60]	; (8015944 <MDF_GetHandleNumberFromInstance+0x80>)
 8015908:	4293      	cmp	r3, r2
 801590a:	d102      	bne.n	8015912 <MDF_GetHandleNumberFromInstance+0x4e>
  {
    handle_number = 4U;
 801590c:	2304      	movs	r3, #4
 801590e:	60fb      	str	r3, [r7, #12]
 8015910:	e008      	b.n	8015924 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter5)
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	4a0c      	ldr	r2, [pc, #48]	; (8015948 <MDF_GetHandleNumberFromInstance+0x84>)
 8015916:	4293      	cmp	r3, r2
 8015918:	d102      	bne.n	8015920 <MDF_GetHandleNumberFromInstance+0x5c>
  {
    handle_number = 5U;
 801591a:	2305      	movs	r3, #5
 801591c:	60fb      	str	r3, [r7, #12]
 801591e:	e001      	b.n	8015924 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else /* ADF1_Filter0 */
  {
    handle_number = 6U;
 8015920:	2306      	movs	r3, #6
 8015922:	60fb      	str	r3, [r7, #12]
  {
    handle_number = 2U;
  }
#endif /* !defined(STM32U535xx) && !defined(STM32U545xx) */

  return handle_number;
 8015924:	68fb      	ldr	r3, [r7, #12]
}
 8015926:	4618      	mov	r0, r3
 8015928:	3714      	adds	r7, #20
 801592a:	46bd      	mov	sp, r7
 801592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015930:	4770      	bx	lr
 8015932:	bf00      	nop
 8015934:	40025080 	.word	0x40025080
 8015938:	40025100 	.word	0x40025100
 801593c:	40025180 	.word	0x40025180
 8015940:	40025200 	.word	0x40025200
 8015944:	40025280 	.word	0x40025280
 8015948:	40025300 	.word	0x40025300

0801594c <MDF_AcqStart>:
  * @param  hmdf MDF handle.
  * @param  pFilterConfig Filter configuration parameters.
  * @retval None.
  */
static void MDF_AcqStart(MDF_HandleTypeDef *const hmdf, const MDF_FilterConfigTypeDef *const pFilterConfig)
{
 801594c:	b480      	push	{r7}
 801594e:	b085      	sub	sp, #20
 8015950:	af00      	add	r7, sp, #0
 8015952:	6078      	str	r0, [r7, #4]
 8015954:	6039      	str	r1, [r7, #0]
  uint32_t register_gain_value;

  /* Configure acquisition mode, discard samples, trigger and fifo threshold */
  assert_param(IS_MDF_DISCARD_SAMPLES(pFilterConfig->DiscardSamples));
  assert_param(IS_MDF_FIFO_THRESHOLD(pFilterConfig->FifoThreshold));
  if ((pFilterConfig->AcquisitionMode == MDF_MODE_ASYNC_CONT) ||
 8015956:	683b      	ldr	r3, [r7, #0]
 8015958:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801595a:	2b00      	cmp	r3, #0
 801595c:	d003      	beq.n	8015966 <MDF_AcqStart+0x1a>
      (pFilterConfig->AcquisitionMode == MDF_MODE_ASYNC_SINGLE))
 801595e:	683b      	ldr	r3, [r7, #0]
 8015960:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  if ((pFilterConfig->AcquisitionMode == MDF_MODE_ASYNC_CONT) ||
 8015962:	2b10      	cmp	r3, #16
 8015964:	d110      	bne.n	8015988 <MDF_AcqStart+0x3c>
  {
    /* Trigger parameters are not used */
    hmdf->Instance->DFLTCR |= (pFilterConfig->AcquisitionMode | pFilterConfig->FifoThreshold |
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	681b      	ldr	r3, [r3, #0]
 801596a:	6899      	ldr	r1, [r3, #8]
 801596c:	683b      	ldr	r3, [r7, #0]
 801596e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8015970:	683b      	ldr	r3, [r7, #0]
 8015972:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015974:	431a      	orrs	r2, r3
                               (pFilterConfig->DiscardSamples << MDF_DFLTCR_NBDIS_Pos));
 8015976:	683b      	ldr	r3, [r7, #0]
 8015978:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801597a:	051b      	lsls	r3, r3, #20
    hmdf->Instance->DFLTCR |= (pFilterConfig->AcquisitionMode | pFilterConfig->FifoThreshold |
 801597c:	431a      	orrs	r2, r3
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	681b      	ldr	r3, [r3, #0]
 8015982:	430a      	orrs	r2, r1
 8015984:	609a      	str	r2, [r3, #8]
 8015986:	e015      	b.n	80159b4 <MDF_AcqStart+0x68>
    else
    {
      assert_param(IS_MDF_TRIGGER_SOURCE(pFilterConfig->Trigger.Source));
    }
    assert_param(IS_MDF_TRIGGER_EDGE(pFilterConfig->Trigger.Edge));
    hmdf->Instance->DFLTCR |= (pFilterConfig->AcquisitionMode | pFilterConfig->FifoThreshold |
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	681b      	ldr	r3, [r3, #0]
 801598c:	6899      	ldr	r1, [r3, #8]
 801598e:	683b      	ldr	r3, [r7, #0]
 8015990:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8015992:	683b      	ldr	r3, [r7, #0]
 8015994:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015996:	431a      	orrs	r2, r3
                               pFilterConfig->Trigger.Source | pFilterConfig->Trigger.Edge |
 8015998:	683b      	ldr	r3, [r7, #0]
 801599a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    hmdf->Instance->DFLTCR |= (pFilterConfig->AcquisitionMode | pFilterConfig->FifoThreshold |
 801599c:	431a      	orrs	r2, r3
                               pFilterConfig->Trigger.Source | pFilterConfig->Trigger.Edge |
 801599e:	683b      	ldr	r3, [r7, #0]
 80159a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80159a2:	431a      	orrs	r2, r3
                               (pFilterConfig->DiscardSamples << MDF_DFLTCR_NBDIS_Pos));
 80159a4:	683b      	ldr	r3, [r7, #0]
 80159a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80159a8:	051b      	lsls	r3, r3, #20
                               pFilterConfig->Trigger.Source | pFilterConfig->Trigger.Edge |
 80159aa:	431a      	orrs	r2, r3
    hmdf->Instance->DFLTCR |= (pFilterConfig->AcquisitionMode | pFilterConfig->FifoThreshold |
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	681b      	ldr	r3, [r3, #0]
 80159b0:	430a      	orrs	r2, r1
 80159b2:	609a      	str	r2, [r3, #8]
  }

  /* Configure if needed snapshot format only for MDF instance */
  if (IS_MDF_INSTANCE(hmdf->Instance) && (pFilterConfig->AcquisitionMode == MDF_MODE_SYNC_SNAPSHOT))
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	681b      	ldr	r3, [r3, #0]
 80159b8:	4a7c      	ldr	r2, [pc, #496]	; (8015bac <MDF_AcqStart+0x260>)
 80159ba:	4293      	cmp	r3, r2
 80159bc:	d018      	beq.n	80159f0 <MDF_AcqStart+0xa4>
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	681b      	ldr	r3, [r3, #0]
 80159c2:	4a7b      	ldr	r2, [pc, #492]	; (8015bb0 <MDF_AcqStart+0x264>)
 80159c4:	4293      	cmp	r3, r2
 80159c6:	d013      	beq.n	80159f0 <MDF_AcqStart+0xa4>
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	681b      	ldr	r3, [r3, #0]
 80159cc:	4a79      	ldr	r2, [pc, #484]	; (8015bb4 <MDF_AcqStart+0x268>)
 80159ce:	4293      	cmp	r3, r2
 80159d0:	d00e      	beq.n	80159f0 <MDF_AcqStart+0xa4>
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	681b      	ldr	r3, [r3, #0]
 80159d6:	4a78      	ldr	r2, [pc, #480]	; (8015bb8 <MDF_AcqStart+0x26c>)
 80159d8:	4293      	cmp	r3, r2
 80159da:	d009      	beq.n	80159f0 <MDF_AcqStart+0xa4>
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	681b      	ldr	r3, [r3, #0]
 80159e0:	4a76      	ldr	r2, [pc, #472]	; (8015bbc <MDF_AcqStart+0x270>)
 80159e2:	4293      	cmp	r3, r2
 80159e4:	d004      	beq.n	80159f0 <MDF_AcqStart+0xa4>
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	681b      	ldr	r3, [r3, #0]
 80159ea:	4a75      	ldr	r2, [pc, #468]	; (8015bc0 <MDF_AcqStart+0x274>)
 80159ec:	4293      	cmp	r3, r2
 80159ee:	d10c      	bne.n	8015a0a <MDF_AcqStart+0xbe>
 80159f0:	683b      	ldr	r3, [r7, #0]
 80159f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80159f4:	2b50      	cmp	r3, #80	; 0x50
 80159f6:	d108      	bne.n	8015a0a <MDF_AcqStart+0xbe>
  {
    assert_param(IS_MDF_SNAPSHOT_FORMAT(pFilterConfig->SnapshotFormat));
    hmdf->Instance->DFLTCR |= pFilterConfig->SnapshotFormat;
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	681b      	ldr	r3, [r3, #0]
 80159fc:	6899      	ldr	r1, [r3, #8]
 80159fe:	683b      	ldr	r3, [r7, #0]
 8015a00:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	681b      	ldr	r3, [r3, #0]
 8015a06:	430a      	orrs	r2, r1
 8015a08:	609a      	str	r2, [r3, #8]
  {
    assert_param(IS_MDF_DATA_SOURCE(pFilterConfig->DataSource));
  }
  assert_param(IS_MDF_DECIMATION_RATIO(pFilterConfig->DecimationRatio));
  assert_param(IS_MDF_GAIN(pFilterConfig->Gain));
  if (pFilterConfig->Gain < 0)
 8015a0a:	683b      	ldr	r3, [r7, #0]
 8015a0c:	695b      	ldr	r3, [r3, #20]
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	da08      	bge.n	8015a24 <MDF_AcqStart+0xd8>
  {
    int32_t adjust_gain;

    /* adjust gain value to set on register for negative value (offset of -16) */
    adjust_gain = pFilterConfig->Gain - 16;
 8015a12:	683b      	ldr	r3, [r7, #0]
 8015a14:	695b      	ldr	r3, [r3, #20]
 8015a16:	3b10      	subs	r3, #16
 8015a18:	60bb      	str	r3, [r7, #8]
    register_gain_value = ((uint32_t) adjust_gain & 0x3FU);
 8015a1a:	68bb      	ldr	r3, [r7, #8]
 8015a1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015a20:	60fb      	str	r3, [r7, #12]
 8015a22:	e002      	b.n	8015a2a <MDF_AcqStart+0xde>
  }
  else
  {
    /* for positive value, no offset to apply */
    register_gain_value = (uint32_t) pFilterConfig->Gain;
 8015a24:	683b      	ldr	r3, [r7, #0]
 8015a26:	695b      	ldr	r3, [r3, #20]
 8015a28:	60fb      	str	r3, [r7, #12]
  }
  hmdf->Instance->DFLTCICR = (pFilterConfig->DataSource | pFilterConfig->CicMode |
 8015a2a:	683b      	ldr	r3, [r7, #0]
 8015a2c:	681a      	ldr	r2, [r3, #0]
 8015a2e:	683b      	ldr	r3, [r7, #0]
 8015a30:	689b      	ldr	r3, [r3, #8]
 8015a32:	431a      	orrs	r2, r3
                              ((pFilterConfig->DecimationRatio - 1U) << MDF_DFLTCICR_MCICD_Pos) |
 8015a34:	683b      	ldr	r3, [r7, #0]
 8015a36:	68db      	ldr	r3, [r3, #12]
 8015a38:	3b01      	subs	r3, #1
 8015a3a:	021b      	lsls	r3, r3, #8
  hmdf->Instance->DFLTCICR = (pFilterConfig->DataSource | pFilterConfig->CicMode |
 8015a3c:	ea42 0103 	orr.w	r1, r2, r3
                              (register_gain_value << MDF_DFLTCICR_SCALE_Pos));
 8015a40:	68fb      	ldr	r3, [r7, #12]
 8015a42:	051a      	lsls	r2, r3, #20
  hmdf->Instance->DFLTCICR = (pFilterConfig->DataSource | pFilterConfig->CicMode |
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	681b      	ldr	r3, [r3, #0]
                              ((pFilterConfig->DecimationRatio - 1U) << MDF_DFLTCICR_MCICD_Pos) |
 8015a48:	430a      	orrs	r2, r1
  hmdf->Instance->DFLTCICR = (pFilterConfig->DataSource | pFilterConfig->CicMode |
 8015a4a:	60da      	str	r2, [r3, #12]

  /* Configure bitstream delay */
  assert_param(IS_MDF_DELAY(pFilterConfig->Delay));
  hmdf->Instance->DLYCR = pFilterConfig->Delay;
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	681b      	ldr	r3, [r3, #0]
 8015a50:	683a      	ldr	r2, [r7, #0]
 8015a52:	6852      	ldr	r2, [r2, #4]
 8015a54:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure offset compensation only for MDF instance */
  if (IS_MDF_INSTANCE(hmdf->Instance))
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	681b      	ldr	r3, [r3, #0]
 8015a5a:	4a54      	ldr	r2, [pc, #336]	; (8015bac <MDF_AcqStart+0x260>)
 8015a5c:	4293      	cmp	r3, r2
 8015a5e:	d018      	beq.n	8015a92 <MDF_AcqStart+0x146>
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	681b      	ldr	r3, [r3, #0]
 8015a64:	4a52      	ldr	r2, [pc, #328]	; (8015bb0 <MDF_AcqStart+0x264>)
 8015a66:	4293      	cmp	r3, r2
 8015a68:	d013      	beq.n	8015a92 <MDF_AcqStart+0x146>
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	681b      	ldr	r3, [r3, #0]
 8015a6e:	4a51      	ldr	r2, [pc, #324]	; (8015bb4 <MDF_AcqStart+0x268>)
 8015a70:	4293      	cmp	r3, r2
 8015a72:	d00e      	beq.n	8015a92 <MDF_AcqStart+0x146>
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	681b      	ldr	r3, [r3, #0]
 8015a78:	4a4f      	ldr	r2, [pc, #316]	; (8015bb8 <MDF_AcqStart+0x26c>)
 8015a7a:	4293      	cmp	r3, r2
 8015a7c:	d009      	beq.n	8015a92 <MDF_AcqStart+0x146>
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	681b      	ldr	r3, [r3, #0]
 8015a82:	4a4e      	ldr	r2, [pc, #312]	; (8015bbc <MDF_AcqStart+0x270>)
 8015a84:	4293      	cmp	r3, r2
 8015a86:	d004      	beq.n	8015a92 <MDF_AcqStart+0x146>
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	681b      	ldr	r3, [r3, #0]
 8015a8c:	4a4c      	ldr	r2, [pc, #304]	; (8015bc0 <MDF_AcqStart+0x274>)
 8015a8e:	4293      	cmp	r3, r2
 8015a90:	d104      	bne.n	8015a9c <MDF_AcqStart+0x150>
  {
    assert_param(IS_MDF_OFFSET(pFilterConfig->Offset));
    hmdf->Instance->OECCR = (uint32_t) pFilterConfig->Offset;
 8015a92:	683b      	ldr	r3, [r7, #0]
 8015a94:	691a      	ldr	r2, [r3, #16]
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	681b      	ldr	r3, [r3, #0]
 8015a9a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Configure reshape filter */
  assert_param(IS_FUNCTIONAL_STATE(pFilterConfig->ReshapeFilter.Activation));
  hmdf->Instance->DFLTRSFR = 0U;
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	681b      	ldr	r3, [r3, #0]
 8015aa0:	2200      	movs	r2, #0
 8015aa2:	611a      	str	r2, [r3, #16]
  if (pFilterConfig->ReshapeFilter.Activation == ENABLE)
 8015aa4:	683b      	ldr	r3, [r7, #0]
 8015aa6:	7e1b      	ldrb	r3, [r3, #24]
 8015aa8:	2b01      	cmp	r3, #1
 8015aaa:	d109      	bne.n	8015ac0 <MDF_AcqStart+0x174>
  {
    /* Configure reshape filter decimation ratio */
    assert_param(IS_MDF_RSF_DECIMATION_RATIO(pFilterConfig->ReshapeFilter.DecimationRatio));
    hmdf->Instance->DFLTRSFR |= pFilterConfig->ReshapeFilter.DecimationRatio;
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	681b      	ldr	r3, [r3, #0]
 8015ab0:	6919      	ldr	r1, [r3, #16]
 8015ab2:	683b      	ldr	r3, [r7, #0]
 8015ab4:	69da      	ldr	r2, [r3, #28]
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	681b      	ldr	r3, [r3, #0]
 8015aba:	430a      	orrs	r2, r1
 8015abc:	611a      	str	r2, [r3, #16]
 8015abe:	e007      	b.n	8015ad0 <MDF_AcqStart+0x184>
  }
  else
  {
    /* Bypass reshape filter */
    hmdf->Instance->DFLTRSFR |= MDF_DFLTRSFR_RSFLTBYP;
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	681b      	ldr	r3, [r3, #0]
 8015ac4:	691a      	ldr	r2, [r3, #16]
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	681b      	ldr	r3, [r3, #0]
 8015aca:	f042 0201 	orr.w	r2, r2, #1
 8015ace:	611a      	str	r2, [r3, #16]
  }

  /* Configure high-pass filter */
  assert_param(IS_FUNCTIONAL_STATE(pFilterConfig->HighPassFilter.Activation));
  if (pFilterConfig->HighPassFilter.Activation == ENABLE)
 8015ad0:	683b      	ldr	r3, [r7, #0]
 8015ad2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015ad6:	2b01      	cmp	r3, #1
 8015ad8:	d109      	bne.n	8015aee <MDF_AcqStart+0x1a2>
  {
    /* Configure high-pass filter cut-off frequency */
    assert_param(IS_MDF_HPF_CUTOFF_FREQ(pFilterConfig->HighPassFilter.CutOffFrequency));
    hmdf->Instance->DFLTRSFR |= pFilterConfig->HighPassFilter.CutOffFrequency;
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	681b      	ldr	r3, [r3, #0]
 8015ade:	6919      	ldr	r1, [r3, #16]
 8015ae0:	683b      	ldr	r3, [r7, #0]
 8015ae2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	681b      	ldr	r3, [r3, #0]
 8015ae8:	430a      	orrs	r2, r1
 8015aea:	611a      	str	r2, [r3, #16]
 8015aec:	e007      	b.n	8015afe <MDF_AcqStart+0x1b2>
  }
  else
  {
    /* Bypass high-pass filter */
    hmdf->Instance->DFLTRSFR |= MDF_DFLTRSFR_HPFBYP;
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	681b      	ldr	r3, [r3, #0]
 8015af2:	691a      	ldr	r2, [r3, #16]
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	681b      	ldr	r3, [r3, #0]
 8015af8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8015afc:	611a      	str	r2, [r3, #16]
  }

  /* Configure integrator only for MDF instance */
  if (IS_MDF_INSTANCE(hmdf->Instance))
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	681b      	ldr	r3, [r3, #0]
 8015b02:	4a2a      	ldr	r2, [pc, #168]	; (8015bac <MDF_AcqStart+0x260>)
 8015b04:	4293      	cmp	r3, r2
 8015b06:	d018      	beq.n	8015b3a <MDF_AcqStart+0x1ee>
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	681b      	ldr	r3, [r3, #0]
 8015b0c:	4a28      	ldr	r2, [pc, #160]	; (8015bb0 <MDF_AcqStart+0x264>)
 8015b0e:	4293      	cmp	r3, r2
 8015b10:	d013      	beq.n	8015b3a <MDF_AcqStart+0x1ee>
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	681b      	ldr	r3, [r3, #0]
 8015b16:	4a27      	ldr	r2, [pc, #156]	; (8015bb4 <MDF_AcqStart+0x268>)
 8015b18:	4293      	cmp	r3, r2
 8015b1a:	d00e      	beq.n	8015b3a <MDF_AcqStart+0x1ee>
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	681b      	ldr	r3, [r3, #0]
 8015b20:	4a25      	ldr	r2, [pc, #148]	; (8015bb8 <MDF_AcqStart+0x26c>)
 8015b22:	4293      	cmp	r3, r2
 8015b24:	d009      	beq.n	8015b3a <MDF_AcqStart+0x1ee>
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	681b      	ldr	r3, [r3, #0]
 8015b2a:	4a24      	ldr	r2, [pc, #144]	; (8015bbc <MDF_AcqStart+0x270>)
 8015b2c:	4293      	cmp	r3, r2
 8015b2e:	d004      	beq.n	8015b3a <MDF_AcqStart+0x1ee>
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	681b      	ldr	r3, [r3, #0]
 8015b34:	4a22      	ldr	r2, [pc, #136]	; (8015bc0 <MDF_AcqStart+0x274>)
 8015b36:	4293      	cmp	r3, r2
 8015b38:	d113      	bne.n	8015b62 <MDF_AcqStart+0x216>
  {
    assert_param(IS_FUNCTIONAL_STATE(pFilterConfig->Integrator.Activation));
    if (pFilterConfig->Integrator.Activation == ENABLE)
 8015b3a:	683b      	ldr	r3, [r7, #0]
 8015b3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015b40:	2b01      	cmp	r3, #1
 8015b42:	d10a      	bne.n	8015b5a <MDF_AcqStart+0x20e>
    {
      /* Configure integrator value and output division */
      assert_param(IS_MDF_INTEGRATOR_VALUE(pFilterConfig->Integrator.Value));
      assert_param(IS_MDF_INTEGRATOR_OUTPUT_DIV(pFilterConfig->Integrator.OutputDivision));
      hmdf->Instance->DFLTINTR = (((pFilterConfig->Integrator.Value - 1U) << MDF_DFLTINTR_INTVAL_Pos) |
 8015b44:	683b      	ldr	r3, [r7, #0]
 8015b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b48:	3b01      	subs	r3, #1
 8015b4a:	0119      	lsls	r1, r3, #4
                                  pFilterConfig->Integrator.OutputDivision);
 8015b4c:	683b      	ldr	r3, [r7, #0]
 8015b4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
      hmdf->Instance->DFLTINTR = (((pFilterConfig->Integrator.Value - 1U) << MDF_DFLTINTR_INTVAL_Pos) |
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	681b      	ldr	r3, [r3, #0]
 8015b54:	430a      	orrs	r2, r1
 8015b56:	615a      	str	r2, [r3, #20]
 8015b58:	e003      	b.n	8015b62 <MDF_AcqStart+0x216>
    }
    else
    {
      /* Bypass integrator */
      hmdf->Instance->DFLTINTR = 0U;
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	681b      	ldr	r3, [r3, #0]
 8015b5e:	2200      	movs	r2, #0
 8015b60:	615a      	str	r2, [r3, #20]
    }
  }

  if (IS_ADF_INSTANCE(hmdf->Instance))
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	681b      	ldr	r3, [r3, #0]
 8015b66:	4a17      	ldr	r2, [pc, #92]	; (8015bc4 <MDF_AcqStart+0x278>)
 8015b68:	4293      	cmp	r3, r2
 8015b6a:	d16f      	bne.n	8015c4c <MDF_AcqStart+0x300>
  {
    assert_param(IS_FUNCTIONAL_STATE(pFilterConfig->SoundActivity.Activation));
    if (pFilterConfig->SoundActivity.Activation == ENABLE)
 8015b6c:	683b      	ldr	r3, [r7, #0]
 8015b6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015b72:	2b01      	cmp	r3, #1
 8015b74:	d162      	bne.n	8015c3c <MDF_AcqStart+0x2f0>
      {
        assert_param(IS_FUNCTIONAL_STATE(pFilterConfig->SoundActivity.Hysteresis));
      }
      assert_param(IS_MDF_SAD_SOUND_TRIGGER(pFilterConfig->SoundActivity.SoundTriggerEvent));
      assert_param(IS_MDF_SAD_DATA_MEMORY_TRANSFER(pFilterConfig->SoundActivity.DataMemoryTransfer));
      if ((pFilterConfig->SoundActivity.Mode != MDF_SAD_AMBIENT_NOISE_DETECTOR) &&
 8015b76:	683b      	ldr	r3, [r7, #0]
 8015b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015b7a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8015b7e:	d023      	beq.n	8015bc8 <MDF_AcqStart+0x27c>
          (pFilterConfig->SoundActivity.Hysteresis == ENABLE))
 8015b80:	683b      	ldr	r3, [r7, #0]
 8015b82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
      if ((pFilterConfig->SoundActivity.Mode != MDF_SAD_AMBIENT_NOISE_DETECTOR) &&
 8015b86:	2b01      	cmp	r3, #1
 8015b88:	d11e      	bne.n	8015bc8 <MDF_AcqStart+0x27c>
      {
        hmdf->Instance->SADCR = (pFilterConfig->SoundActivity.Mode | pFilterConfig->SoundActivity.FrameSize |
 8015b8a:	683b      	ldr	r3, [r7, #0]
 8015b8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015b8e:	683b      	ldr	r3, [r7, #0]
 8015b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015b92:	431a      	orrs	r2, r3
                                 MDF_SADCR_HYSTEN | pFilterConfig->SoundActivity.SoundTriggerEvent |
 8015b94:	683b      	ldr	r3, [r7, #0]
 8015b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015b98:	431a      	orrs	r2, r3
                                 pFilterConfig->SoundActivity.DataMemoryTransfer);
 8015b9a:	683b      	ldr	r3, [r7, #0]
 8015b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                                 MDF_SADCR_HYSTEN | pFilterConfig->SoundActivity.SoundTriggerEvent |
 8015b9e:	431a      	orrs	r2, r3
        hmdf->Instance->SADCR = (pFilterConfig->SoundActivity.Mode | pFilterConfig->SoundActivity.FrameSize |
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	681b      	ldr	r3, [r3, #0]
                                 MDF_SADCR_HYSTEN | pFilterConfig->SoundActivity.SoundTriggerEvent |
 8015ba4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
        hmdf->Instance->SADCR = (pFilterConfig->SoundActivity.Mode | pFilterConfig->SoundActivity.FrameSize |
 8015ba8:	639a      	str	r2, [r3, #56]	; 0x38
 8015baa:	e01c      	b.n	8015be6 <MDF_AcqStart+0x29a>
 8015bac:	40025080 	.word	0x40025080
 8015bb0:	40025100 	.word	0x40025100
 8015bb4:	40025180 	.word	0x40025180
 8015bb8:	40025200 	.word	0x40025200
 8015bbc:	40025280 	.word	0x40025280
 8015bc0:	40025300 	.word	0x40025300
 8015bc4:	46024080 	.word	0x46024080
      }
      else
      {
        hmdf->Instance->SADCR = (pFilterConfig->SoundActivity.Mode | pFilterConfig->SoundActivity.FrameSize |
 8015bc8:	683b      	ldr	r3, [r7, #0]
 8015bca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015bcc:	683b      	ldr	r3, [r7, #0]
 8015bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015bd0:	431a      	orrs	r2, r3
                                 pFilterConfig->SoundActivity.SoundTriggerEvent |
 8015bd2:	683b      	ldr	r3, [r7, #0]
 8015bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        hmdf->Instance->SADCR = (pFilterConfig->SoundActivity.Mode | pFilterConfig->SoundActivity.FrameSize |
 8015bd6:	ea42 0103 	orr.w	r1, r2, r3
                                 pFilterConfig->SoundActivity.DataMemoryTransfer);
 8015bda:	683b      	ldr	r3, [r7, #0]
 8015bdc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
        hmdf->Instance->SADCR = (pFilterConfig->SoundActivity.Mode | pFilterConfig->SoundActivity.FrameSize |
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	681b      	ldr	r3, [r3, #0]
                                 pFilterConfig->SoundActivity.SoundTriggerEvent |
 8015be2:	430a      	orrs	r2, r1
        hmdf->Instance->SADCR = (pFilterConfig->SoundActivity.Mode | pFilterConfig->SoundActivity.FrameSize |
 8015be4:	639a      	str	r2, [r3, #56]	; 0x38
         ambient noise slope control and signal noise threshold only for ADF instance */
      assert_param(IS_MDF_SAD_MIN_NOISE_LEVEL(pFilterConfig->SoundActivity.MinNoiseLevel));
      assert_param(IS_MDF_SAD_HANGOVER_WINDOW(pFilterConfig->SoundActivity.HangoverWindow));
      assert_param(IS_MDF_SAD_LEARNING_FRAMES(pFilterConfig->SoundActivity.LearningFrames));
      assert_param(IS_MDF_SAD_SIGNAL_NOISE_THRESHOLD(pFilterConfig->SoundActivity.SignalNoiseThreshold));
      if (pFilterConfig->SoundActivity.Mode != MDF_SAD_SOUND_DETECTOR)
 8015be6:	683b      	ldr	r3, [r7, #0]
 8015be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015bea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015bee:	d014      	beq.n	8015c1a <MDF_AcqStart+0x2ce>
      {
        assert_param(IS_MDF_SAD_AMBIENT_NOISE_SLOPE(pFilterConfig->SoundActivity.AmbientNoiseSlope));
        hmdf->Instance->SADCFGR = ((pFilterConfig->SoundActivity.MinNoiseLevel << MDF_SADCFGR_ANMIN_Pos) |
 8015bf0:	683b      	ldr	r3, [r7, #0]
 8015bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015bf4:	041a      	lsls	r2, r3, #16
                                   pFilterConfig->SoundActivity.HangoverWindow |
 8015bf6:	683b      	ldr	r3, [r7, #0]
 8015bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
        hmdf->Instance->SADCFGR = ((pFilterConfig->SoundActivity.MinNoiseLevel << MDF_SADCFGR_ANMIN_Pos) |
 8015bfa:	431a      	orrs	r2, r3
                                   pFilterConfig->SoundActivity.LearningFrames |
 8015bfc:	683b      	ldr	r3, [r7, #0]
 8015bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
                                   pFilterConfig->SoundActivity.HangoverWindow |
 8015c00:	431a      	orrs	r2, r3
                                   (pFilterConfig->SoundActivity.AmbientNoiseSlope << MDF_SADCFGR_ANSLP_Pos) |
 8015c02:	683b      	ldr	r3, [r7, #0]
 8015c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015c06:	011b      	lsls	r3, r3, #4
                                   pFilterConfig->SoundActivity.LearningFrames |
 8015c08:	ea42 0103 	orr.w	r1, r2, r3
                                   pFilterConfig->SoundActivity.SignalNoiseThreshold);
 8015c0c:	683b      	ldr	r3, [r7, #0]
 8015c0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
        hmdf->Instance->SADCFGR = ((pFilterConfig->SoundActivity.MinNoiseLevel << MDF_SADCFGR_ANMIN_Pos) |
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	681b      	ldr	r3, [r3, #0]
                                   (pFilterConfig->SoundActivity.AmbientNoiseSlope << MDF_SADCFGR_ANSLP_Pos) |
 8015c14:	430a      	orrs	r2, r1
        hmdf->Instance->SADCFGR = ((pFilterConfig->SoundActivity.MinNoiseLevel << MDF_SADCFGR_ANMIN_Pos) |
 8015c16:	63da      	str	r2, [r3, #60]	; 0x3c
 8015c18:	e018      	b.n	8015c4c <MDF_AcqStart+0x300>
      }
      else
      {
        hmdf->Instance->SADCFGR = ((pFilterConfig->SoundActivity.MinNoiseLevel << MDF_SADCFGR_ANMIN_Pos) |
 8015c1a:	683b      	ldr	r3, [r7, #0]
 8015c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015c1e:	041a      	lsls	r2, r3, #16
                                   pFilterConfig->SoundActivity.HangoverWindow |
 8015c20:	683b      	ldr	r3, [r7, #0]
 8015c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
        hmdf->Instance->SADCFGR = ((pFilterConfig->SoundActivity.MinNoiseLevel << MDF_SADCFGR_ANMIN_Pos) |
 8015c24:	431a      	orrs	r2, r3
                                   pFilterConfig->SoundActivity.LearningFrames |
 8015c26:	683b      	ldr	r3, [r7, #0]
 8015c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
                                   pFilterConfig->SoundActivity.HangoverWindow |
 8015c2a:	ea42 0103 	orr.w	r1, r2, r3
                                   pFilterConfig->SoundActivity.SignalNoiseThreshold);
 8015c2e:	683b      	ldr	r3, [r7, #0]
 8015c30:	6dda      	ldr	r2, [r3, #92]	; 0x5c
        hmdf->Instance->SADCFGR = ((pFilterConfig->SoundActivity.MinNoiseLevel << MDF_SADCFGR_ANMIN_Pos) |
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	681b      	ldr	r3, [r3, #0]
                                   pFilterConfig->SoundActivity.LearningFrames |
 8015c36:	430a      	orrs	r2, r1
        hmdf->Instance->SADCFGR = ((pFilterConfig->SoundActivity.MinNoiseLevel << MDF_SADCFGR_ANMIN_Pos) |
 8015c38:	63da      	str	r2, [r3, #60]	; 0x3c
 8015c3a:	e007      	b.n	8015c4c <MDF_AcqStart+0x300>
      }
    }
    else
    {
      /* SAD is not used */
      hmdf->Instance->SADCR = 0U;
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	681b      	ldr	r3, [r3, #0]
 8015c40:	2200      	movs	r2, #0
 8015c42:	639a      	str	r2, [r3, #56]	; 0x38
      hmdf->Instance->SADCFGR = 0U;
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	681b      	ldr	r3, [r3, #0]
 8015c48:	2200      	movs	r2, #0
 8015c4a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /* Update instance state */
  hmdf->State = HAL_MDF_STATE_ACQUISITION;
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	2202      	movs	r2, #2
 8015c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable sound activity detector if needed only for ADF instance */
  if ((IS_ADF_INSTANCE(hmdf->Instance)) && (pFilterConfig->SoundActivity.Activation == ENABLE))
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	681b      	ldr	r3, [r3, #0]
 8015c58:	4a0e      	ldr	r2, [pc, #56]	; (8015c94 <MDF_AcqStart+0x348>)
 8015c5a:	4293      	cmp	r3, r2
 8015c5c:	d10c      	bne.n	8015c78 <MDF_AcqStart+0x32c>
 8015c5e:	683b      	ldr	r3, [r7, #0]
 8015c60:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015c64:	2b01      	cmp	r3, #1
 8015c66:	d107      	bne.n	8015c78 <MDF_AcqStart+0x32c>
  {
    hmdf->Instance->SADCR |= MDF_SADCR_SADEN;
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	681b      	ldr	r3, [r3, #0]
 8015c6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	681b      	ldr	r3, [r3, #0]
 8015c72:	f042 0201 	orr.w	r2, r2, #1
 8015c76:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Enable filter */
  hmdf->Instance->DFLTCR |= MDF_DFLTCR_DFLTEN;
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	681b      	ldr	r3, [r3, #0]
 8015c7c:	689a      	ldr	r2, [r3, #8]
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	681b      	ldr	r3, [r3, #0]
 8015c82:	f042 0201 	orr.w	r2, r2, #1
 8015c86:	609a      	str	r2, [r3, #8]
}
 8015c88:	bf00      	nop
 8015c8a:	3714      	adds	r7, #20
 8015c8c:	46bd      	mov	sp, r7
 8015c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c92:	4770      	bx	lr
 8015c94:	46024080 	.word	0x46024080

08015c98 <MDF_DmaXferCpltCallback>:
  * @brief  This function handles DMA transfer complete callback.
  * @param  hdma DMA handle.
  * @retval None.
  */
static void MDF_DmaXferCpltCallback(DMA_HandleTypeDef *hdma)
{
 8015c98:	b580      	push	{r7, lr}
 8015c9a:	b084      	sub	sp, #16
 8015c9c:	af00      	add	r7, sp, #0
 8015c9e:	6078      	str	r0, [r7, #4]
  MDF_HandleTypeDef *hmdf = (MDF_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015ca4:	60fb      	str	r3, [r7, #12]

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015caa:	2b81      	cmp	r3, #129	; 0x81
 8015cac:	d003      	beq.n	8015cb6 <MDF_DmaXferCpltCallback+0x1e>
  {
    hmdf->State = HAL_MDF_STATE_READY;
 8015cae:	68fb      	ldr	r3, [r7, #12]
 8015cb0:	2201      	movs	r2, #1
 8015cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

#if (USE_HAL_MDF_REGISTER_CALLBACKS == 1)
  hmdf->AcqCpltCallback(hmdf);
#else /* USE_HAL_MDF_REGISTER_CALLBACKS */
  HAL_MDF_AcqCpltCallback(hmdf);
 8015cb6:	68f8      	ldr	r0, [r7, #12]
 8015cb8:	f7ec f86a 	bl	8001d90 <HAL_MDF_AcqCpltCallback>
#endif /* USE_HAL_MDF_REGISTER_CALLBACKS */
}
 8015cbc:	bf00      	nop
 8015cbe:	3710      	adds	r7, #16
 8015cc0:	46bd      	mov	sp, r7
 8015cc2:	bd80      	pop	{r7, pc}

08015cc4 <MDF_DmaXferHalfCpltCallback>:
  * @brief  This function handles DMA half transfer complete callback.
  * @param  hdma DMA handle.
  * @retval None.
  */
static void MDF_DmaXferHalfCpltCallback(DMA_HandleTypeDef *hdma)
{
 8015cc4:	b580      	push	{r7, lr}
 8015cc6:	b084      	sub	sp, #16
 8015cc8:	af00      	add	r7, sp, #0
 8015cca:	6078      	str	r0, [r7, #4]
  MDF_HandleTypeDef *hmdf = (MDF_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015cd0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_MDF_REGISTER_CALLBACKS == 1)
  hmdf->AcqHalfCpltCallback(hmdf);
#else /* USE_HAL_MDF_REGISTER_CALLBACKS */
  HAL_MDF_AcqHalfCpltCallback(hmdf);
 8015cd2:	68f8      	ldr	r0, [r7, #12]
 8015cd4:	f7ec f872 	bl	8001dbc <HAL_MDF_AcqHalfCpltCallback>
#endif /* USE_HAL_MDF_REGISTER_CALLBACKS */
}
 8015cd8:	bf00      	nop
 8015cda:	3710      	adds	r7, #16
 8015cdc:	46bd      	mov	sp, r7
 8015cde:	bd80      	pop	{r7, pc}

08015ce0 <MDF_DmaErrorCallback>:
  * @brief  This function handles DMA error callback.
  * @param  hdma DMA handle.
  * @retval None.
  */
static void MDF_DmaErrorCallback(DMA_HandleTypeDef *hdma)
{
 8015ce0:	b580      	push	{r7, lr}
 8015ce2:	b084      	sub	sp, #16
 8015ce4:	af00      	add	r7, sp, #0
 8015ce6:	6078      	str	r0, [r7, #4]
  MDF_HandleTypeDef *hmdf = (MDF_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015cec:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hmdf->ErrorCode |= MDF_ERROR_DMA;
 8015cee:	68fb      	ldr	r3, [r7, #12]
 8015cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015cf2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8015cf6:	68fb      	ldr	r3, [r7, #12]
 8015cf8:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_MDF_REGISTER_CALLBACKS == 1)
  hmdf->ErrorCallback(hmdf);
#else /* USE_HAL_MDF_REGISTER_CALLBACKS */
  HAL_MDF_ErrorCallback(hmdf);
 8015cfa:	68f8      	ldr	r0, [r7, #12]
 8015cfc:	f7ec f874 	bl	8001de8 <HAL_MDF_ErrorCallback>
#endif /* USE_HAL_MDF_REGISTER_CALLBACKS */
}
 8015d00:	bf00      	nop
 8015d02:	3710      	adds	r7, #16
 8015d04:	46bd      	mov	sp, r7
 8015d06:	bd80      	pop	{r7, pc}

08015d08 <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 8015d08:	b480      	push	{r7}
 8015d0a:	b083      	sub	sp, #12
 8015d0c:	af00      	add	r7, sp, #0
 8015d0e:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	681b      	ldr	r3, [r3, #0]
 8015d14:	f043 0201 	orr.w	r2, r3, #1
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	601a      	str	r2, [r3, #0]
}
 8015d1c:	bf00      	nop
 8015d1e:	370c      	adds	r7, #12
 8015d20:	46bd      	mov	sp, r7
 8015d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d26:	4770      	bx	lr

08015d28 <LL_DLYB_Disable>:
  * @param  DLYBx DLYB Instance.
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Disable(DLYB_TypeDef *DLYBx)
{
 8015d28:	b480      	push	{r7}
 8015d2a:	b083      	sub	sp, #12
 8015d2c:	af00      	add	r7, sp, #0
 8015d2e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(DLYBx->CR, DLYB_CR_DEN);
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	681b      	ldr	r3, [r3, #0]
 8015d34:	f023 0201 	bic.w	r2, r3, #1
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	601a      	str	r2, [r3, #0]
}
 8015d3c:	bf00      	nop
 8015d3e:	370c      	adds	r7, #12
 8015d40:	46bd      	mov	sp, r7
 8015d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d46:	4770      	bx	lr

08015d48 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8015d48:	b580      	push	{r7, lr}
 8015d4a:	b086      	sub	sp, #24
 8015d4c:	af02      	add	r7, sp, #8
 8015d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015d50:	2300      	movs	r3, #0
 8015d52:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8015d54:	f7fb fcc6 	bl	80116e4 <HAL_GetTick>
 8015d58:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	d102      	bne.n	8015d66 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8015d60:	2301      	movs	r3, #1
 8015d62:	73fb      	strb	r3, [r7, #15]
 8015d64:	e0a5      	b.n	8015eb2 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	2200      	movs	r2, #0
 8015d6a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	f040 809e 	bne.w	8015eb2 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8015d76:	6878      	ldr	r0, [r7, #4]
 8015d78:	f000 f8a2 	bl	8015ec0 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8015d7c:	f241 3188 	movw	r1, #5000	; 0x1388
 8015d80:	6878      	ldr	r0, [r7, #4]
 8015d82:	f000 fbc4 	bl	801650e <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	681b      	ldr	r3, [r3, #0]
 8015d8a:	689a      	ldr	r2, [r3, #8]
 8015d8c:	4b4b      	ldr	r3, [pc, #300]	; (8015ebc <HAL_OSPI_Init+0x174>)
 8015d8e:	4013      	ands	r3, r2
 8015d90:	687a      	ldr	r2, [r7, #4]
 8015d92:	68d1      	ldr	r1, [r2, #12]
 8015d94:	687a      	ldr	r2, [r7, #4]
 8015d96:	6912      	ldr	r2, [r2, #16]
 8015d98:	3a01      	subs	r2, #1
 8015d9a:	0412      	lsls	r2, r2, #16
 8015d9c:	4311      	orrs	r1, r2
 8015d9e:	687a      	ldr	r2, [r7, #4]
 8015da0:	6952      	ldr	r2, [r2, #20]
 8015da2:	3a01      	subs	r2, #1
 8015da4:	0212      	lsls	r2, r2, #8
 8015da6:	4311      	orrs	r1, r2
 8015da8:	687a      	ldr	r2, [r7, #4]
 8015daa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8015dac:	4311      	orrs	r1, r2
 8015dae:	687a      	ldr	r2, [r7, #4]
 8015db0:	69d2      	ldr	r2, [r2, #28]
 8015db2:	4311      	orrs	r1, r2
 8015db4:	687a      	ldr	r2, [r7, #4]
 8015db6:	6812      	ldr	r2, [r2, #0]
 8015db8:	430b      	orrs	r3, r1
 8015dba:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	681b      	ldr	r3, [r3, #0]
 8015dc0:	68db      	ldr	r3, [r3, #12]
 8015dc2:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	6a1a      	ldr	r2, [r3, #32]
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	681b      	ldr	r3, [r3, #0]
 8015dce:	430a      	orrs	r2, r1
 8015dd0:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015dd6:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	681b      	ldr	r3, [r3, #0]
 8015de0:	430a      	orrs	r2, r1
 8015de2:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	681b      	ldr	r3, [r3, #0]
 8015de8:	687a      	ldr	r2, [r7, #4]
 8015dea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8015dec:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	681b      	ldr	r3, [r3, #0]
 8015df2:	681b      	ldr	r3, [r3, #0]
 8015df4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	685b      	ldr	r3, [r3, #4]
 8015dfc:	3b01      	subs	r3, #1
 8015dfe:	021a      	lsls	r2, r3, #8
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	681b      	ldr	r3, [r3, #0]
 8015e04:	430a      	orrs	r2, r1
 8015e06:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015e0c:	9300      	str	r3, [sp, #0]
 8015e0e:	68bb      	ldr	r3, [r7, #8]
 8015e10:	2200      	movs	r2, #0
 8015e12:	2120      	movs	r1, #32
 8015e14:	6878      	ldr	r0, [r7, #4]
 8015e16:	f000 fb89 	bl	801652c <OSPI_WaitFlagStateUntilTimeout>
 8015e1a:	4603      	mov	r3, r0
 8015e1c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8015e1e:	7bfb      	ldrb	r3, [r7, #15]
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d146      	bne.n	8015eb2 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	681b      	ldr	r3, [r3, #0]
 8015e28:	68db      	ldr	r3, [r3, #12]
 8015e2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e32:	1e5a      	subs	r2, r3, #1
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	681b      	ldr	r3, [r3, #0]
 8015e38:	430a      	orrs	r2, r1
 8015e3a:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DMM, hospi->Init.DualQuad);
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	681b      	ldr	r3, [r3, #0]
 8015e40:	681b      	ldr	r3, [r3, #0]
 8015e42:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	689a      	ldr	r2, [r3, #8]
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	681b      	ldr	r3, [r3, #0]
 8015e4e:	430a      	orrs	r2, r1
 8015e50:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	681b      	ldr	r3, [r3, #0]
 8015e56:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8015e5a:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e66:	431a      	orrs	r2, r3
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	681b      	ldr	r3, [r3, #0]
 8015e6c:	430a      	orrs	r2, r1
 8015e6e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	681b      	ldr	r3, [r3, #0]
 8015e76:	681a      	ldr	r2, [r3, #0]
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	681b      	ldr	r3, [r3, #0]
 8015e7c:	f042 0201 	orr.w	r2, r2, #1
 8015e80:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	699b      	ldr	r3, [r3, #24]
 8015e86:	2b02      	cmp	r3, #2
 8015e88:	d107      	bne.n	8015e9a <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	681b      	ldr	r3, [r3, #0]
 8015e8e:	689a      	ldr	r2, [r3, #8]
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	681b      	ldr	r3, [r3, #0]
 8015e94:	f042 0202 	orr.w	r2, r2, #2
 8015e98:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	68db      	ldr	r3, [r3, #12]
 8015e9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8015ea2:	d103      	bne.n	8015eac <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	2201      	movs	r2, #1
 8015ea8:	651a      	str	r2, [r3, #80]	; 0x50
 8015eaa:	e002      	b.n	8015eb2 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	2202      	movs	r2, #2
 8015eb0:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8015eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8015eb4:	4618      	mov	r0, r3
 8015eb6:	3710      	adds	r7, #16
 8015eb8:	46bd      	mov	sp, r7
 8015eba:	bd80      	pop	{r7, pc}
 8015ebc:	f8e0c0f4 	.word	0xf8e0c0f4

08015ec0 <HAL_OSPI_MspInit>:
  * @brief  Initialize the OSPI MSP.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_MspInit(OSPI_HandleTypeDef *hospi)
{
 8015ec0:	b480      	push	{r7}
 8015ec2:	b083      	sub	sp, #12
 8015ec4:	af00      	add	r7, sp, #0
 8015ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_MspInit can be implemented in the user file
   */
}
 8015ec8:	bf00      	nop
 8015eca:	370c      	adds	r7, #12
 8015ecc:	46bd      	mov	sp, r7
 8015ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ed2:	4770      	bx	lr

08015ed4 <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 8015ed4:	b580      	push	{r7, lr}
 8015ed6:	b084      	sub	sp, #16
 8015ed8:	af00      	add	r7, sp, #0
 8015eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015edc:	2300      	movs	r3, #0
 8015ede:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	2b00      	cmp	r3, #0
 8015ee4:	d102      	bne.n	8015eec <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 8015ee6:	2301      	movs	r3, #1
 8015ee8:	73fb      	strb	r3, [r7, #15]
 8015eea:	e015      	b.n	8015f18 <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
    /* Disable OctoSPI */
    __HAL_OSPI_DISABLE(hospi);
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	681b      	ldr	r3, [r3, #0]
 8015ef0:	681a      	ldr	r2, [r3, #0]
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	681b      	ldr	r3, [r3, #0]
 8015ef6:	f022 0201 	bic.w	r2, r2, #1
 8015efa:	601a      	str	r2, [r3, #0]

    /* Disable free running clock if needed : must be done after OSPI disable */
    CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	681b      	ldr	r3, [r3, #0]
 8015f00:	689a      	ldr	r2, [r3, #8]
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	681b      	ldr	r3, [r3, #0]
 8015f06:	f022 0202 	bic.w	r2, r2, #2
 8015f0a:	609a      	str	r2, [r3, #8]

    /* DeInit the low level hardware */
    hospi->MspDeInitCallback(hospi);
#else
    /* De-initialize the low-level hardware */
    HAL_OSPI_MspDeInit(hospi);
 8015f0c:	6878      	ldr	r0, [r7, #4]
 8015f0e:	f000 f808 	bl	8015f22 <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

    /* Reset the driver state */
    hospi->State = HAL_OSPI_STATE_RESET;
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	2200      	movs	r2, #0
 8015f16:	651a      	str	r2, [r3, #80]	; 0x50
  }

  return status;
 8015f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f1a:	4618      	mov	r0, r3
 8015f1c:	3710      	adds	r7, #16
 8015f1e:	46bd      	mov	sp, r7
 8015f20:	bd80      	pop	{r7, pc}

08015f22 <HAL_OSPI_MspDeInit>:
  * @brief  DeInitialize the OSPI MSP.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef *hospi)
{
 8015f22:	b480      	push	{r7}
 8015f24:	b083      	sub	sp, #12
 8015f26:	af00      	add	r7, sp, #0
 8015f28:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_MspDeInit can be implemented in the user file
   */
}
 8015f2a:	bf00      	nop
 8015f2c:	370c      	adds	r7, #12
 8015f2e:	46bd      	mov	sp, r7
 8015f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f34:	4770      	bx	lr

08015f36 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8015f36:	b580      	push	{r7, lr}
 8015f38:	b08a      	sub	sp, #40	; 0x28
 8015f3a:	af02      	add	r7, sp, #8
 8015f3c:	60f8      	str	r0, [r7, #12]
 8015f3e:	60b9      	str	r1, [r7, #8]
 8015f40:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8015f42:	f7fb fbcf 	bl	80116e4 <HAL_GetTick>
 8015f46:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE(cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8015f48:	68bb      	ldr	r3, [r7, #8]
 8015f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015f4c:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE(cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8015f4e:	68fb      	ldr	r3, [r7, #12]
 8015f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015f52:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8015f54:	697b      	ldr	r3, [r7, #20]
 8015f56:	2b02      	cmp	r3, #2
 8015f58:	d104      	bne.n	8015f64 <HAL_OSPI_Command+0x2e>
 8015f5a:	68fb      	ldr	r3, [r7, #12]
 8015f5c:	68db      	ldr	r3, [r3, #12]
 8015f5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8015f62:	d115      	bne.n	8015f90 <HAL_OSPI_Command+0x5a>
 8015f64:	697b      	ldr	r3, [r7, #20]
 8015f66:	2b14      	cmp	r3, #20
 8015f68:	d107      	bne.n	8015f7a <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8015f6a:	68bb      	ldr	r3, [r7, #8]
 8015f6c:	681b      	ldr	r3, [r3, #0]
 8015f6e:	2b02      	cmp	r3, #2
 8015f70:	d00e      	beq.n	8015f90 <HAL_OSPI_Command+0x5a>
                                                   || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 8015f72:	68bb      	ldr	r3, [r7, #8]
 8015f74:	681b      	ldr	r3, [r3, #0]
 8015f76:	2b03      	cmp	r3, #3
 8015f78:	d00a      	beq.n	8015f90 <HAL_OSPI_Command+0x5a>
 8015f7a:	697b      	ldr	r3, [r7, #20]
 8015f7c:	2b24      	cmp	r3, #36	; 0x24
 8015f7e:	d15b      	bne.n	8016038 <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8015f80:	68bb      	ldr	r3, [r7, #8]
 8015f82:	681b      	ldr	r3, [r3, #0]
 8015f84:	2b01      	cmp	r3, #1
 8015f86:	d003      	beq.n	8015f90 <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 8015f88:	68bb      	ldr	r3, [r7, #8]
 8015f8a:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8015f8c:	2b03      	cmp	r3, #3
 8015f8e:	d153      	bne.n	8016038 <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	9300      	str	r3, [sp, #0]
 8015f94:	69bb      	ldr	r3, [r7, #24]
 8015f96:	2200      	movs	r2, #0
 8015f98:	2120      	movs	r1, #32
 8015f9a:	68f8      	ldr	r0, [r7, #12]
 8015f9c:	f000 fac6 	bl	801652c <OSPI_WaitFlagStateUntilTimeout>
 8015fa0:	4603      	mov	r3, r0
 8015fa2:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8015fa4:	7ffb      	ldrb	r3, [r7, #31]
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	d14c      	bne.n	8016044 <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8015faa:	68fb      	ldr	r3, [r7, #12]
 8015fac:	2200      	movs	r2, #0
 8015fae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 8015fb0:	68b9      	ldr	r1, [r7, #8]
 8015fb2:	68f8      	ldr	r0, [r7, #12]
 8015fb4:	f000 fafa 	bl	80165ac <OSPI_ConfigCmd>
 8015fb8:	4603      	mov	r3, r0
 8015fba:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8015fbc:	7ffb      	ldrb	r3, [r7, #31]
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	d140      	bne.n	8016044 <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8015fc2:	68bb      	ldr	r3, [r7, #8]
 8015fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	d10e      	bne.n	8015fe8 <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	9300      	str	r3, [sp, #0]
 8015fce:	69bb      	ldr	r3, [r7, #24]
 8015fd0:	2201      	movs	r2, #1
 8015fd2:	2102      	movs	r1, #2
 8015fd4:	68f8      	ldr	r0, [r7, #12]
 8015fd6:	f000 faa9 	bl	801652c <OSPI_WaitFlagStateUntilTimeout>
 8015fda:	4603      	mov	r3, r0
 8015fdc:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8015fde:	68fb      	ldr	r3, [r7, #12]
 8015fe0:	681b      	ldr	r3, [r3, #0]
 8015fe2:	2202      	movs	r2, #2
 8015fe4:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8015fe6:	e02d      	b.n	8016044 <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8015fe8:	68bb      	ldr	r3, [r7, #8]
 8015fea:	681b      	ldr	r3, [r3, #0]
 8015fec:	2b00      	cmp	r3, #0
 8015fee:	d103      	bne.n	8015ff8 <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8015ff0:	68fb      	ldr	r3, [r7, #12]
 8015ff2:	2204      	movs	r2, #4
 8015ff4:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8015ff6:	e025      	b.n	8016044 <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8015ff8:	68bb      	ldr	r3, [r7, #8]
 8015ffa:	681b      	ldr	r3, [r3, #0]
 8015ffc:	2b01      	cmp	r3, #1
 8015ffe:	d10b      	bne.n	8016018 <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 8016000:	68fb      	ldr	r3, [r7, #12]
 8016002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016004:	2b24      	cmp	r3, #36	; 0x24
 8016006:	d103      	bne.n	8016010 <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8016008:	68fb      	ldr	r3, [r7, #12]
 801600a:	2204      	movs	r2, #4
 801600c:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 801600e:	e019      	b.n	8016044 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8016010:	68fb      	ldr	r3, [r7, #12]
 8016012:	2214      	movs	r2, #20
 8016014:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8016016:	e015      	b.n	8016044 <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8016018:	68bb      	ldr	r3, [r7, #8]
 801601a:	681b      	ldr	r3, [r3, #0]
 801601c:	2b02      	cmp	r3, #2
 801601e:	d111      	bne.n	8016044 <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8016020:	68fb      	ldr	r3, [r7, #12]
 8016022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016024:	2b14      	cmp	r3, #20
 8016026:	d103      	bne.n	8016030 <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8016028:	68fb      	ldr	r3, [r7, #12]
 801602a:	2204      	movs	r2, #4
 801602c:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 801602e:	e009      	b.n	8016044 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8016030:	68fb      	ldr	r3, [r7, #12]
 8016032:	2224      	movs	r2, #36	; 0x24
 8016034:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8016036:	e005      	b.n	8016044 <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8016038:	2301      	movs	r3, #1
 801603a:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 801603c:	68fb      	ldr	r3, [r7, #12]
 801603e:	2210      	movs	r2, #16
 8016040:	655a      	str	r2, [r3, #84]	; 0x54
 8016042:	e000      	b.n	8016046 <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 8016044:	bf00      	nop
  }

  /* Return function status */
  return status;
 8016046:	7ffb      	ldrb	r3, [r7, #31]
}
 8016048:	4618      	mov	r0, r3
 801604a:	3720      	adds	r7, #32
 801604c:	46bd      	mov	sp, r7
 801604e:	bd80      	pop	{r7, pc}

08016050 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8016050:	b580      	push	{r7, lr}
 8016052:	b08a      	sub	sp, #40	; 0x28
 8016054:	af02      	add	r7, sp, #8
 8016056:	60f8      	str	r0, [r7, #12]
 8016058:	60b9      	str	r1, [r7, #8]
 801605a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 801605c:	f7fb fb42 	bl	80116e4 <HAL_GetTick>
 8016060:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8016062:	68fb      	ldr	r3, [r7, #12]
 8016064:	681b      	ldr	r3, [r3, #0]
 8016066:	3350      	adds	r3, #80	; 0x50
 8016068:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 801606a:	68bb      	ldr	r3, [r7, #8]
 801606c:	2b00      	cmp	r3, #0
 801606e:	d105      	bne.n	801607c <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8016070:	2301      	movs	r3, #1
 8016072:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	2208      	movs	r2, #8
 8016078:	655a      	str	r2, [r3, #84]	; 0x54
 801607a:	e057      	b.n	801612c <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 801607c:	68fb      	ldr	r3, [r7, #12]
 801607e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016080:	2b04      	cmp	r3, #4
 8016082:	d14e      	bne.n	8016122 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8016084:	68fb      	ldr	r3, [r7, #12]
 8016086:	681b      	ldr	r3, [r3, #0]
 8016088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801608a:	1c5a      	adds	r2, r3, #1
 801608c:	68fb      	ldr	r3, [r7, #12]
 801608e:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 8016090:	68fb      	ldr	r3, [r7, #12]
 8016092:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8016094:	68fb      	ldr	r3, [r7, #12]
 8016096:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 8016098:	68fb      	ldr	r3, [r7, #12]
 801609a:	68ba      	ldr	r2, [r7, #8]
 801609c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 801609e:	68fb      	ldr	r3, [r7, #12]
 80160a0:	681b      	ldr	r3, [r3, #0]
 80160a2:	681a      	ldr	r2, [r3, #0]
 80160a4:	68fb      	ldr	r3, [r7, #12]
 80160a6:	681b      	ldr	r3, [r3, #0]
 80160a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80160ac:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	9300      	str	r3, [sp, #0]
 80160b2:	69bb      	ldr	r3, [r7, #24]
 80160b4:	2201      	movs	r2, #1
 80160b6:	2104      	movs	r1, #4
 80160b8:	68f8      	ldr	r0, [r7, #12]
 80160ba:	f000 fa37 	bl	801652c <OSPI_WaitFlagStateUntilTimeout>
 80160be:	4603      	mov	r3, r0
 80160c0:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80160c2:	7ffb      	ldrb	r3, [r7, #31]
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d113      	bne.n	80160f0 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 80160c8:	68fb      	ldr	r3, [r7, #12]
 80160ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80160cc:	781a      	ldrb	r2, [r3, #0]
 80160ce:	697b      	ldr	r3, [r7, #20]
 80160d0:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 80160d2:	68fb      	ldr	r3, [r7, #12]
 80160d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80160d6:	1c5a      	adds	r2, r3, #1
 80160d8:	68fb      	ldr	r3, [r7, #12]
 80160da:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 80160dc:	68fb      	ldr	r3, [r7, #12]
 80160de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80160e0:	1e5a      	subs	r2, r3, #1
 80160e2:	68fb      	ldr	r3, [r7, #12]
 80160e4:	649a      	str	r2, [r3, #72]	; 0x48
      } while (hospi->XferCount > 0U);
 80160e6:	68fb      	ldr	r3, [r7, #12]
 80160e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	d1df      	bne.n	80160ae <HAL_OSPI_Transmit+0x5e>
 80160ee:	e000      	b.n	80160f2 <HAL_OSPI_Transmit+0xa2>
          break;
 80160f0:	bf00      	nop

      if (status == HAL_OK)
 80160f2:	7ffb      	ldrb	r3, [r7, #31]
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	d119      	bne.n	801612c <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	9300      	str	r3, [sp, #0]
 80160fc:	69bb      	ldr	r3, [r7, #24]
 80160fe:	2201      	movs	r2, #1
 8016100:	2102      	movs	r1, #2
 8016102:	68f8      	ldr	r0, [r7, #12]
 8016104:	f000 fa12 	bl	801652c <OSPI_WaitFlagStateUntilTimeout>
 8016108:	4603      	mov	r3, r0
 801610a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 801610c:	7ffb      	ldrb	r3, [r7, #31]
 801610e:	2b00      	cmp	r3, #0
 8016110:	d10c      	bne.n	801612c <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8016112:	68fb      	ldr	r3, [r7, #12]
 8016114:	681b      	ldr	r3, [r3, #0]
 8016116:	2202      	movs	r2, #2
 8016118:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 801611a:	68fb      	ldr	r3, [r7, #12]
 801611c:	2202      	movs	r2, #2
 801611e:	651a      	str	r2, [r3, #80]	; 0x50
 8016120:	e004      	b.n	801612c <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8016122:	2301      	movs	r3, #1
 8016124:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8016126:	68fb      	ldr	r3, [r7, #12]
 8016128:	2210      	movs	r2, #16
 801612a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 801612c:	7ffb      	ldrb	r3, [r7, #31]
}
 801612e:	4618      	mov	r0, r3
 8016130:	3720      	adds	r7, #32
 8016132:	46bd      	mov	sp, r7
 8016134:	bd80      	pop	{r7, pc}

08016136 <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8016136:	b580      	push	{r7, lr}
 8016138:	b08c      	sub	sp, #48	; 0x30
 801613a:	af02      	add	r7, sp, #8
 801613c:	60f8      	str	r0, [r7, #12]
 801613e:	60b9      	str	r1, [r7, #8]
 8016140:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8016142:	f7fb facf 	bl	80116e4 <HAL_GetTick>
 8016146:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8016148:	68fb      	ldr	r3, [r7, #12]
 801614a:	681b      	ldr	r3, [r3, #0]
 801614c:	3350      	adds	r3, #80	; 0x50
 801614e:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 8016150:	68fb      	ldr	r3, [r7, #12]
 8016152:	681b      	ldr	r3, [r3, #0]
 8016154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016156:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 8016158:	68fb      	ldr	r3, [r7, #12]
 801615a:	681b      	ldr	r3, [r3, #0]
 801615c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8016160:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8016162:	68bb      	ldr	r3, [r7, #8]
 8016164:	2b00      	cmp	r3, #0
 8016166:	d106      	bne.n	8016176 <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8016168:	2301      	movs	r3, #1
 801616a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 801616e:	68fb      	ldr	r3, [r7, #12]
 8016170:	2208      	movs	r2, #8
 8016172:	655a      	str	r2, [r3, #84]	; 0x54
 8016174:	e07c      	b.n	8016270 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801617a:	2b04      	cmp	r3, #4
 801617c:	d172      	bne.n	8016264 <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 801617e:	68fb      	ldr	r3, [r7, #12]
 8016180:	681b      	ldr	r3, [r3, #0]
 8016182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016184:	1c5a      	adds	r2, r3, #1
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 801618a:	68fb      	ldr	r3, [r7, #12]
 801618c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801618e:	68fb      	ldr	r3, [r7, #12]
 8016190:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 8016192:	68fb      	ldr	r3, [r7, #12]
 8016194:	68ba      	ldr	r2, [r7, #8]
 8016196:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	681b      	ldr	r3, [r3, #0]
 801619c:	681b      	ldr	r3, [r3, #0]
 801619e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80161a2:	68fb      	ldr	r3, [r7, #12]
 80161a4:	681b      	ldr	r3, [r3, #0]
 80161a6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80161aa:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80161ac:	68fb      	ldr	r3, [r7, #12]
 80161ae:	68db      	ldr	r3, [r3, #12]
 80161b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80161b4:	d104      	bne.n	80161c0 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 80161b6:	68fb      	ldr	r3, [r7, #12]
 80161b8:	681b      	ldr	r3, [r3, #0]
 80161ba:	69ba      	ldr	r2, [r7, #24]
 80161bc:	649a      	str	r2, [r3, #72]	; 0x48
 80161be:	e011      	b.n	80161e4 <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 80161c0:	68fb      	ldr	r3, [r7, #12]
 80161c2:	681b      	ldr	r3, [r3, #0]
 80161c4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80161c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	d004      	beq.n	80161da <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 80161d0:	68fb      	ldr	r3, [r7, #12]
 80161d2:	681b      	ldr	r3, [r3, #0]
 80161d4:	69ba      	ldr	r2, [r7, #24]
 80161d6:	649a      	str	r2, [r3, #72]	; 0x48
 80161d8:	e004      	b.n	80161e4 <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 80161da:	68fb      	ldr	r3, [r7, #12]
 80161dc:	681b      	ldr	r3, [r3, #0]
 80161de:	697a      	ldr	r2, [r7, #20]
 80161e0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	9300      	str	r3, [sp, #0]
 80161e8:	6a3b      	ldr	r3, [r7, #32]
 80161ea:	2201      	movs	r2, #1
 80161ec:	2106      	movs	r1, #6
 80161ee:	68f8      	ldr	r0, [r7, #12]
 80161f0:	f000 f99c 	bl	801652c <OSPI_WaitFlagStateUntilTimeout>
 80161f4:	4603      	mov	r3, r0
 80161f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 80161fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80161fe:	2b00      	cmp	r3, #0
 8016200:	d114      	bne.n	801622c <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8016202:	68fb      	ldr	r3, [r7, #12]
 8016204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016206:	69fa      	ldr	r2, [r7, #28]
 8016208:	7812      	ldrb	r2, [r2, #0]
 801620a:	b2d2      	uxtb	r2, r2
 801620c:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 801620e:	68fb      	ldr	r3, [r7, #12]
 8016210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016212:	1c5a      	adds	r2, r3, #1
 8016214:	68fb      	ldr	r3, [r7, #12]
 8016216:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 8016218:	68fb      	ldr	r3, [r7, #12]
 801621a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801621c:	1e5a      	subs	r2, r3, #1
 801621e:	68fb      	ldr	r3, [r7, #12]
 8016220:	649a      	str	r2, [r3, #72]	; 0x48
      } while (hospi->XferCount > 0U);
 8016222:	68fb      	ldr	r3, [r7, #12]
 8016224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016226:	2b00      	cmp	r3, #0
 8016228:	d1dc      	bne.n	80161e4 <HAL_OSPI_Receive+0xae>
 801622a:	e000      	b.n	801622e <HAL_OSPI_Receive+0xf8>
          break;
 801622c:	bf00      	nop

      if (status == HAL_OK)
 801622e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016232:	2b00      	cmp	r3, #0
 8016234:	d11c      	bne.n	8016270 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8016236:	687b      	ldr	r3, [r7, #4]
 8016238:	9300      	str	r3, [sp, #0]
 801623a:	6a3b      	ldr	r3, [r7, #32]
 801623c:	2201      	movs	r2, #1
 801623e:	2102      	movs	r1, #2
 8016240:	68f8      	ldr	r0, [r7, #12]
 8016242:	f000 f973 	bl	801652c <OSPI_WaitFlagStateUntilTimeout>
 8016246:	4603      	mov	r3, r0
 8016248:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 801624c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016250:	2b00      	cmp	r3, #0
 8016252:	d10d      	bne.n	8016270 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8016254:	68fb      	ldr	r3, [r7, #12]
 8016256:	681b      	ldr	r3, [r3, #0]
 8016258:	2202      	movs	r2, #2
 801625a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 801625c:	68fb      	ldr	r3, [r7, #12]
 801625e:	2202      	movs	r2, #2
 8016260:	651a      	str	r2, [r3, #80]	; 0x50
 8016262:	e005      	b.n	8016270 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8016264:	2301      	movs	r3, #1
 8016266:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 801626a:	68fb      	ldr	r3, [r7, #12]
 801626c:	2210      	movs	r2, #16
 801626e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 8016270:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8016274:	4618      	mov	r0, r3
 8016276:	3728      	adds	r7, #40	; 0x28
 8016278:	46bd      	mov	sp, r7
 801627a:	bd80      	pop	{r7, pc}

0801627c <HAL_OSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 801627c:	b580      	push	{r7, lr}
 801627e:	b08a      	sub	sp, #40	; 0x28
 8016280:	af02      	add	r7, sp, #8
 8016282:	60f8      	str	r0, [r7, #12]
 8016284:	60b9      	str	r1, [r7, #8]
 8016286:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8016288:	f7fb fa2c 	bl	80116e4 <HAL_GetTick>
 801628c:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 801628e:	68fb      	ldr	r3, [r7, #12]
 8016290:	681b      	ldr	r3, [r3, #0]
 8016292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016294:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 8016296:	68fb      	ldr	r3, [r7, #12]
 8016298:	681b      	ldr	r3, [r3, #0]
 801629a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 801629e:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP(cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL(cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 80162a0:	68fb      	ldr	r3, [r7, #12]
 80162a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80162a4:	2b04      	cmp	r3, #4
 80162a6:	d164      	bne.n	8016372 <HAL_OSPI_AutoPolling+0xf6>
 80162a8:	68bb      	ldr	r3, [r7, #8]
 80162aa:	68db      	ldr	r3, [r3, #12]
 80162ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80162b0:	d15f      	bne.n	8016372 <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	9300      	str	r3, [sp, #0]
 80162b6:	69bb      	ldr	r3, [r7, #24]
 80162b8:	2200      	movs	r2, #0
 80162ba:	2120      	movs	r1, #32
 80162bc:	68f8      	ldr	r0, [r7, #12]
 80162be:	f000 f935 	bl	801652c <OSPI_WaitFlagStateUntilTimeout>
 80162c2:	4603      	mov	r3, r0
 80162c4:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 80162c6:	7ffb      	ldrb	r3, [r7, #31]
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d158      	bne.n	801637e <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG(hospi->Instance->PSMAR, cfg->Match);
 80162cc:	68fb      	ldr	r3, [r7, #12]
 80162ce:	681b      	ldr	r3, [r3, #0]
 80162d0:	68ba      	ldr	r2, [r7, #8]
 80162d2:	6812      	ldr	r2, [r2, #0]
 80162d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG(hospi->Instance->PSMKR, cfg->Mask);
 80162d8:	68fb      	ldr	r3, [r7, #12]
 80162da:	681b      	ldr	r3, [r3, #0]
 80162dc:	68ba      	ldr	r2, [r7, #8]
 80162de:	6852      	ldr	r2, [r2, #4]
 80162e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG(hospi->Instance->PIR,   cfg->Interval);
 80162e4:	68fb      	ldr	r3, [r7, #12]
 80162e6:	681b      	ldr	r3, [r3, #0]
 80162e8:	68ba      	ldr	r2, [r7, #8]
 80162ea:	6912      	ldr	r2, [r2, #16]
 80162ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 80162f0:	68fb      	ldr	r3, [r7, #12]
 80162f2:	681b      	ldr	r3, [r3, #0]
 80162f4:	681b      	ldr	r3, [r3, #0]
 80162f6:	f023 5243 	bic.w	r2, r3, #817889280	; 0x30c00000
 80162fa:	68bb      	ldr	r3, [r7, #8]
 80162fc:	6899      	ldr	r1, [r3, #8]
 80162fe:	68bb      	ldr	r3, [r7, #8]
 8016300:	68db      	ldr	r3, [r3, #12]
 8016302:	430b      	orrs	r3, r1
 8016304:	431a      	orrs	r2, r3
 8016306:	68fb      	ldr	r3, [r7, #12]
 8016308:	681b      	ldr	r3, [r3, #0]
 801630a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 801630e:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8016310:	68fb      	ldr	r3, [r7, #12]
 8016312:	68db      	ldr	r3, [r3, #12]
 8016314:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8016318:	d104      	bne.n	8016324 <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 801631a:	68fb      	ldr	r3, [r7, #12]
 801631c:	681b      	ldr	r3, [r3, #0]
 801631e:	697a      	ldr	r2, [r7, #20]
 8016320:	649a      	str	r2, [r3, #72]	; 0x48
 8016322:	e011      	b.n	8016348 <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8016324:	68fb      	ldr	r3, [r7, #12]
 8016326:	681b      	ldr	r3, [r3, #0]
 8016328:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 801632c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8016330:	2b00      	cmp	r3, #0
 8016332:	d004      	beq.n	801633e <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8016334:	68fb      	ldr	r3, [r7, #12]
 8016336:	681b      	ldr	r3, [r3, #0]
 8016338:	697a      	ldr	r2, [r7, #20]
 801633a:	649a      	str	r2, [r3, #72]	; 0x48
 801633c:	e004      	b.n	8016348 <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 801633e:	68fb      	ldr	r3, [r7, #12]
 8016340:	681b      	ldr	r3, [r3, #0]
 8016342:	693a      	ldr	r2, [r7, #16]
 8016344:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	9300      	str	r3, [sp, #0]
 801634c:	69bb      	ldr	r3, [r7, #24]
 801634e:	2201      	movs	r2, #1
 8016350:	2108      	movs	r1, #8
 8016352:	68f8      	ldr	r0, [r7, #12]
 8016354:	f000 f8ea 	bl	801652c <OSPI_WaitFlagStateUntilTimeout>
 8016358:	4603      	mov	r3, r0
 801635a:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 801635c:	7ffb      	ldrb	r3, [r7, #31]
 801635e:	2b00      	cmp	r3, #0
 8016360:	d10d      	bne.n	801637e <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 8016362:	68fb      	ldr	r3, [r7, #12]
 8016364:	681b      	ldr	r3, [r3, #0]
 8016366:	2208      	movs	r2, #8
 8016368:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 801636a:	68fb      	ldr	r3, [r7, #12]
 801636c:	2202      	movs	r2, #2
 801636e:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8016370:	e005      	b.n	801637e <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8016372:	2301      	movs	r3, #1
 8016374:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8016376:	68fb      	ldr	r3, [r7, #12]
 8016378:	2210      	movs	r2, #16
 801637a:	655a      	str	r2, [r3, #84]	; 0x54
 801637c:	e000      	b.n	8016380 <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 801637e:	bf00      	nop
  }

  /* Return function status */
  return status;
 8016380:	7ffb      	ldrb	r3, [r7, #31]
}
 8016382:	4618      	mov	r0, r3
 8016384:	3720      	adds	r7, #32
 8016386:	46bd      	mov	sp, r7
 8016388:	bd80      	pop	{r7, pc}

0801638a <HAL_OSPI_MemoryMapped>:
  * @param  cfg   : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_MemoryMapped(OSPI_HandleTypeDef *hospi, OSPI_MemoryMappedTypeDef *cfg)
{
 801638a:	b580      	push	{r7, lr}
 801638c:	b086      	sub	sp, #24
 801638e:	af02      	add	r7, sp, #8
 8016390:	6078      	str	r0, [r7, #4]
 8016392:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8016394:	f7fb f9a6 	bl	80116e4 <HAL_GetTick>
 8016398:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_OSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801639e:	2b04      	cmp	r3, #4
 80163a0:	d136      	bne.n	8016410 <HAL_OSPI_MemoryMapped+0x86>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80163a6:	9300      	str	r3, [sp, #0]
 80163a8:	68bb      	ldr	r3, [r7, #8]
 80163aa:	2200      	movs	r2, #0
 80163ac:	2120      	movs	r1, #32
 80163ae:	6878      	ldr	r0, [r7, #4]
 80163b0:	f000 f8bc 	bl	801652c <OSPI_WaitFlagStateUntilTimeout>
 80163b4:	4603      	mov	r3, r0
 80163b6:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80163b8:	7bfb      	ldrb	r3, [r7, #15]
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d12d      	bne.n	801641a <HAL_OSPI_MemoryMapped+0x90>
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	2288      	movs	r2, #136	; 0x88
 80163c2:	651a      	str	r2, [r3, #80]	; 0x50

      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 80163c4:	683b      	ldr	r3, [r7, #0]
 80163c6:	681b      	ldr	r3, [r3, #0]
 80163c8:	2b08      	cmp	r3, #8
 80163ca:	d111      	bne.n	80163f0 <HAL_OSPI_MemoryMapped+0x66>
      {
        assert_param(IS_OSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure register */
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	681b      	ldr	r3, [r3, #0]
 80163d0:	683a      	ldr	r2, [r7, #0]
 80163d2:	6852      	ldr	r2, [r2, #4]
 80163d4:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	681b      	ldr	r3, [r3, #0]
 80163dc:	2210      	movs	r2, #16
 80163de:	625a      	str	r2, [r3, #36]	; 0x24

        /* Enable the timeout interrupt */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	681b      	ldr	r3, [r3, #0]
 80163e4:	681a      	ldr	r2, [r3, #0]
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	681b      	ldr	r3, [r3, #0]
 80163ea:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80163ee:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	681b      	ldr	r3, [r3, #0]
 80163f4:	681b      	ldr	r3, [r3, #0]
 80163f6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80163fa:	f023 0308 	bic.w	r3, r3, #8
 80163fe:	683a      	ldr	r2, [r7, #0]
 8016400:	6812      	ldr	r2, [r2, #0]
 8016402:	431a      	orrs	r2, r3
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	681b      	ldr	r3, [r3, #0]
 8016408:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 801640c:	601a      	str	r2, [r3, #0]
 801640e:	e004      	b.n	801641a <HAL_OSPI_MemoryMapped+0x90>
                 (cfg->TimeOutActivation | OSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 8016410:	2301      	movs	r3, #1
 8016412:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	2210      	movs	r2, #16
 8016418:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Return function status */
  return status;
 801641a:	7bfb      	ldrb	r3, [r7, #15]
}
 801641c:	4618      	mov	r0, r3
 801641e:	3710      	adds	r7, #16
 8016420:	46bd      	mov	sp, r7
 8016422:	bd80      	pop	{r7, pc}

08016424 <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 8016424:	b580      	push	{r7, lr}
 8016426:	b088      	sub	sp, #32
 8016428:	af02      	add	r7, sp, #8
 801642a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801642c:	2300      	movs	r3, #0
 801642e:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8016430:	f7fb f958 	bl	80116e4 <HAL_GetTick>
 8016434:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801643a:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 801643c:	68fb      	ldr	r3, [r7, #12]
 801643e:	f003 0308 	and.w	r3, r3, #8
 8016442:	2b00      	cmp	r3, #0
 8016444:	d104      	bne.n	8016450 <HAL_OSPI_Abort+0x2c>
 8016446:	68fb      	ldr	r3, [r7, #12]
 8016448:	f003 0304 	and.w	r3, r3, #4
 801644c:	2b00      	cmp	r3, #0
 801644e:	d052      	beq.n	80164f6 <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	681b      	ldr	r3, [r3, #0]
 8016454:	681b      	ldr	r3, [r3, #0]
 8016456:	f003 0304 	and.w	r3, r3, #4
 801645a:	2b00      	cmp	r3, #0
 801645c:	d014      	beq.n	8016488 <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	681b      	ldr	r3, [r3, #0]
 8016462:	681a      	ldr	r2, [r3, #0]
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	681b      	ldr	r3, [r3, #0]
 8016468:	f022 0204 	bic.w	r2, r2, #4
 801646c:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_DMA_Abort(hospi->hdma);
 801646e:	687b      	ldr	r3, [r7, #4]
 8016470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016472:	4618      	mov	r0, r3
 8016474:	f7fb fee5 	bl	8012242 <HAL_DMA_Abort>
 8016478:	4603      	mov	r3, r0
 801647a:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 801647c:	7dfb      	ldrb	r3, [r7, #23]
 801647e:	2b00      	cmp	r3, #0
 8016480:	d002      	beq.n	8016488 <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	2204      	movs	r2, #4
 8016486:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	681b      	ldr	r3, [r3, #0]
 801648c:	6a1b      	ldr	r3, [r3, #32]
 801648e:	f003 0320 	and.w	r3, r3, #32
 8016492:	2b00      	cmp	r3, #0
 8016494:	d02b      	beq.n	80164ee <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	681b      	ldr	r3, [r3, #0]
 801649a:	681a      	ldr	r2, [r3, #0]
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	681b      	ldr	r3, [r3, #0]
 80164a0:	f042 0202 	orr.w	r2, r2, #2
 80164a4:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80164aa:	9300      	str	r3, [sp, #0]
 80164ac:	693b      	ldr	r3, [r7, #16]
 80164ae:	2201      	movs	r2, #1
 80164b0:	2102      	movs	r1, #2
 80164b2:	6878      	ldr	r0, [r7, #4]
 80164b4:	f000 f83a 	bl	801652c <OSPI_WaitFlagStateUntilTimeout>
 80164b8:	4603      	mov	r3, r0
 80164ba:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80164bc:	7dfb      	ldrb	r3, [r7, #23]
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d11f      	bne.n	8016502 <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	2202      	movs	r2, #2
 80164c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80164ce:	9300      	str	r3, [sp, #0]
 80164d0:	693b      	ldr	r3, [r7, #16]
 80164d2:	2200      	movs	r2, #0
 80164d4:	2120      	movs	r1, #32
 80164d6:	6878      	ldr	r0, [r7, #4]
 80164d8:	f000 f828 	bl	801652c <OSPI_WaitFlagStateUntilTimeout>
 80164dc:	4603      	mov	r3, r0
 80164de:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 80164e0:	7dfb      	ldrb	r3, [r7, #23]
 80164e2:	2b00      	cmp	r3, #0
 80164e4:	d10d      	bne.n	8016502 <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	2202      	movs	r2, #2
 80164ea:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 80164ec:	e009      	b.n	8016502 <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	2202      	movs	r2, #2
 80164f2:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 80164f4:	e005      	b.n	8016502 <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 80164f6:	2301      	movs	r3, #1
 80164f8:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	2210      	movs	r2, #16
 80164fe:	655a      	str	r2, [r3, #84]	; 0x54
 8016500:	e000      	b.n	8016504 <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8016502:	bf00      	nop
  }

  /* Return function status */
  return status;
 8016504:	7dfb      	ldrb	r3, [r7, #23]
}
 8016506:	4618      	mov	r0, r3
 8016508:	3718      	adds	r7, #24
 801650a:	46bd      	mov	sp, r7
 801650c:	bd80      	pop	{r7, pc}

0801650e <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 801650e:	b480      	push	{r7}
 8016510:	b083      	sub	sp, #12
 8016512:	af00      	add	r7, sp, #0
 8016514:	6078      	str	r0, [r7, #4]
 8016516:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	683a      	ldr	r2, [r7, #0]
 801651c:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 801651e:	2300      	movs	r3, #0
}
 8016520:	4618      	mov	r0, r3
 8016522:	370c      	adds	r7, #12
 8016524:	46bd      	mov	sp, r7
 8016526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801652a:	4770      	bx	lr

0801652c <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 801652c:	b580      	push	{r7, lr}
 801652e:	b084      	sub	sp, #16
 8016530:	af00      	add	r7, sp, #0
 8016532:	60f8      	str	r0, [r7, #12]
 8016534:	60b9      	str	r1, [r7, #8]
 8016536:	603b      	str	r3, [r7, #0]
 8016538:	4613      	mov	r3, r2
 801653a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 801653c:	e022      	b.n	8016584 <OSPI_WaitFlagStateUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801653e:	69bb      	ldr	r3, [r7, #24]
 8016540:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016544:	d01e      	beq.n	8016584 <OSPI_WaitFlagStateUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016546:	f7fb f8cd 	bl	80116e4 <HAL_GetTick>
 801654a:	4602      	mov	r2, r0
 801654c:	683b      	ldr	r3, [r7, #0]
 801654e:	1ad3      	subs	r3, r2, r3
 8016550:	69ba      	ldr	r2, [r7, #24]
 8016552:	429a      	cmp	r2, r3
 8016554:	d302      	bcc.n	801655c <OSPI_WaitFlagStateUntilTimeout+0x30>
 8016556:	69bb      	ldr	r3, [r7, #24]
 8016558:	2b00      	cmp	r3, #0
 801655a:	d113      	bne.n	8016584 <OSPI_WaitFlagStateUntilTimeout+0x58>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hospi->Instance->SR & Flag) != (uint32_t)State)
 801655c:	68fb      	ldr	r3, [r7, #12]
 801655e:	681b      	ldr	r3, [r3, #0]
 8016560:	6a1a      	ldr	r2, [r3, #32]
 8016562:	68bb      	ldr	r3, [r7, #8]
 8016564:	401a      	ands	r2, r3
 8016566:	79fb      	ldrb	r3, [r7, #7]
 8016568:	429a      	cmp	r2, r3
 801656a:	d00b      	beq.n	8016584 <OSPI_WaitFlagStateUntilTimeout+0x58>
        {
          hospi->State     = HAL_OSPI_STATE_ERROR;
 801656c:	68fb      	ldr	r3, [r7, #12]
 801656e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016572:	651a      	str	r2, [r3, #80]	; 0x50
          hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8016574:	68fb      	ldr	r3, [r7, #12]
 8016576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016578:	f043 0201 	orr.w	r2, r3, #1
 801657c:	68fb      	ldr	r3, [r7, #12]
 801657e:	655a      	str	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8016580:	2301      	movs	r3, #1
 8016582:	e00e      	b.n	80165a2 <OSPI_WaitFlagStateUntilTimeout+0x76>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8016584:	68fb      	ldr	r3, [r7, #12]
 8016586:	681b      	ldr	r3, [r3, #0]
 8016588:	6a1a      	ldr	r2, [r3, #32]
 801658a:	68bb      	ldr	r3, [r7, #8]
 801658c:	4013      	ands	r3, r2
 801658e:	2b00      	cmp	r3, #0
 8016590:	bf14      	ite	ne
 8016592:	2301      	movne	r3, #1
 8016594:	2300      	moveq	r3, #0
 8016596:	b2db      	uxtb	r3, r3
 8016598:	461a      	mov	r2, r3
 801659a:	79fb      	ldrb	r3, [r7, #7]
 801659c:	429a      	cmp	r2, r3
 801659e:	d1ce      	bne.n	801653e <OSPI_WaitFlagStateUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80165a0:	2300      	movs	r3, #0
}
 80165a2:	4618      	mov	r0, r3
 80165a4:	3710      	adds	r7, #16
 80165a6:	46bd      	mov	sp, r7
 80165a8:	bd80      	pop	{r7, pc}
	...

080165ac <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 80165ac:	b480      	push	{r7}
 80165ae:	b089      	sub	sp, #36	; 0x24
 80165b0:	af00      	add	r7, sp, #0
 80165b2:	6078      	str	r0, [r7, #4]
 80165b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80165b6:	2300      	movs	r3, #0
 80165b8:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	681b      	ldr	r3, [r3, #0]
 80165be:	681a      	ldr	r2, [r3, #0]
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	681b      	ldr	r3, [r3, #0]
 80165c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80165c8:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	689b      	ldr	r3, [r3, #8]
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	d10a      	bne.n	80165e8 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_MSEL, cmd->FlashId);
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	681b      	ldr	r3, [r3, #0]
 80165d6:	681b      	ldr	r3, [r3, #0]
 80165d8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80165dc:	683b      	ldr	r3, [r7, #0]
 80165de:	685a      	ldr	r2, [r3, #4]
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	681b      	ldr	r3, [r3, #0]
 80165e4:	430a      	orrs	r2, r1
 80165e6:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80165e8:	683b      	ldr	r3, [r7, #0]
 80165ea:	681b      	ldr	r3, [r3, #0]
 80165ec:	2b02      	cmp	r3, #2
 80165ee:	d114      	bne.n	801661a <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	681b      	ldr	r3, [r3, #0]
 80165f4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80165f8:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	681b      	ldr	r3, [r3, #0]
 80165fe:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8016602:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	681b      	ldr	r3, [r3, #0]
 8016608:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 801660c:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	681b      	ldr	r3, [r3, #0]
 8016612:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8016616:	60fb      	str	r3, [r7, #12]
 8016618:	e02c      	b.n	8016674 <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 801661a:	683b      	ldr	r3, [r7, #0]
 801661c:	681b      	ldr	r3, [r3, #0]
 801661e:	2b03      	cmp	r3, #3
 8016620:	d114      	bne.n	801664c <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	681b      	ldr	r3, [r3, #0]
 8016626:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801662a:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	681b      	ldr	r3, [r3, #0]
 8016630:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8016634:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	681b      	ldr	r3, [r3, #0]
 801663a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801663e:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	681b      	ldr	r3, [r3, #0]
 8016644:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8016648:	60fb      	str	r3, [r7, #12]
 801664a:	e013      	b.n	8016674 <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	681b      	ldr	r3, [r3, #0]
 8016650:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8016654:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	681b      	ldr	r3, [r3, #0]
 801665a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 801665e:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	681b      	ldr	r3, [r3, #0]
 8016664:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8016668:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	681b      	ldr	r3, [r3, #0]
 801666e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8016672:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8016674:	683b      	ldr	r3, [r7, #0]
 8016676:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8016678:	683b      	ldr	r3, [r7, #0]
 801667a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801667c:	431a      	orrs	r2, r3
 801667e:	69bb      	ldr	r3, [r7, #24]
 8016680:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8016682:	683b      	ldr	r3, [r7, #0]
 8016684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016686:	2b00      	cmp	r3, #0
 8016688:	d012      	beq.n	80166b0 <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 801668a:	683b      	ldr	r3, [r7, #0]
 801668c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801668e:	68fb      	ldr	r3, [r7, #12]
 8016690:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 8016692:	69bb      	ldr	r3, [r7, #24]
 8016694:	681b      	ldr	r3, [r3, #0]
 8016696:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 801669a:	683b      	ldr	r3, [r7, #0]
 801669c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801669e:	683b      	ldr	r3, [r7, #0]
 80166a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80166a2:	4319      	orrs	r1, r3
 80166a4:	683b      	ldr	r3, [r7, #0]
 80166a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80166a8:	430b      	orrs	r3, r1
 80166aa:	431a      	orrs	r2, r3
 80166ac:	69bb      	ldr	r3, [r7, #24]
 80166ae:	601a      	str	r2, [r3, #0]
               (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 80166b0:	697b      	ldr	r3, [r7, #20]
 80166b2:	681b      	ldr	r3, [r3, #0]
 80166b4:	f023 021f 	bic.w	r2, r3, #31
 80166b8:	683b      	ldr	r3, [r7, #0]
 80166ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80166bc:	431a      	orrs	r2, r3
 80166be:	697b      	ldr	r3, [r7, #20]
 80166c0:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80166c2:	683b      	ldr	r3, [r7, #0]
 80166c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	d009      	beq.n	80166de <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80166ca:	683b      	ldr	r3, [r7, #0]
 80166cc:	681b      	ldr	r3, [r3, #0]
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d105      	bne.n	80166de <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 80166d2:	683b      	ldr	r3, [r7, #0]
 80166d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80166d6:	687b      	ldr	r3, [r7, #4]
 80166d8:	681b      	ldr	r3, [r3, #0]
 80166da:	3a01      	subs	r2, #1
 80166dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 80166de:	683b      	ldr	r3, [r7, #0]
 80166e0:	68db      	ldr	r3, [r3, #12]
 80166e2:	2b00      	cmp	r3, #0
 80166e4:	f000 8099 	beq.w	801681a <OSPI_ConfigCmd+0x26e>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80166e8:	683b      	ldr	r3, [r7, #0]
 80166ea:	69db      	ldr	r3, [r3, #28]
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d055      	beq.n	801679c <OSPI_ConfigCmd+0x1f0>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80166f0:	683b      	ldr	r3, [r7, #0]
 80166f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	d01e      	beq.n	8016736 <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80166f8:	69bb      	ldr	r3, [r7, #24]
 80166fa:	681a      	ldr	r2, [r3, #0]
 80166fc:	4b67      	ldr	r3, [pc, #412]	; (801689c <OSPI_ConfigCmd+0x2f0>)
 80166fe:	4013      	ands	r3, r2
 8016700:	683a      	ldr	r2, [r7, #0]
 8016702:	68d1      	ldr	r1, [r2, #12]
 8016704:	683a      	ldr	r2, [r7, #0]
 8016706:	6952      	ldr	r2, [r2, #20]
 8016708:	4311      	orrs	r1, r2
 801670a:	683a      	ldr	r2, [r7, #0]
 801670c:	6912      	ldr	r2, [r2, #16]
 801670e:	4311      	orrs	r1, r2
 8016710:	683a      	ldr	r2, [r7, #0]
 8016712:	69d2      	ldr	r2, [r2, #28]
 8016714:	4311      	orrs	r1, r2
 8016716:	683a      	ldr	r2, [r7, #0]
 8016718:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801671a:	4311      	orrs	r1, r2
 801671c:	683a      	ldr	r2, [r7, #0]
 801671e:	6a12      	ldr	r2, [r2, #32]
 8016720:	4311      	orrs	r1, r2
 8016722:	683a      	ldr	r2, [r7, #0]
 8016724:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8016726:	4311      	orrs	r1, r2
 8016728:	683a      	ldr	r2, [r7, #0]
 801672a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801672c:	430a      	orrs	r2, r1
 801672e:	431a      	orrs	r2, r3
 8016730:	69bb      	ldr	r3, [r7, #24]
 8016732:	601a      	str	r2, [r3, #0]
 8016734:	e028      	b.n	8016788 <OSPI_ConfigCmd+0x1dc>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8016736:	69bb      	ldr	r3, [r7, #24]
 8016738:	681b      	ldr	r3, [r3, #0]
 801673a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801673e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8016742:	683a      	ldr	r2, [r7, #0]
 8016744:	68d1      	ldr	r1, [r2, #12]
 8016746:	683a      	ldr	r2, [r7, #0]
 8016748:	6952      	ldr	r2, [r2, #20]
 801674a:	4311      	orrs	r1, r2
 801674c:	683a      	ldr	r2, [r7, #0]
 801674e:	6912      	ldr	r2, [r2, #16]
 8016750:	4311      	orrs	r1, r2
 8016752:	683a      	ldr	r2, [r7, #0]
 8016754:	69d2      	ldr	r2, [r2, #28]
 8016756:	4311      	orrs	r1, r2
 8016758:	683a      	ldr	r2, [r7, #0]
 801675a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801675c:	4311      	orrs	r1, r2
 801675e:	683a      	ldr	r2, [r7, #0]
 8016760:	6a12      	ldr	r2, [r2, #32]
 8016762:	430a      	orrs	r2, r1
 8016764:	431a      	orrs	r2, r3
 8016766:	69bb      	ldr	r3, [r7, #24]
 8016768:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                    cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801676e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8016772:	d109      	bne.n	8016788 <OSPI_ConfigCmd+0x1dc>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8016774:	683b      	ldr	r3, [r7, #0]
 8016776:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8016778:	2b08      	cmp	r3, #8
 801677a:	d105      	bne.n	8016788 <OSPI_ConfigCmd+0x1dc>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 801677c:	69bb      	ldr	r3, [r7, #24]
 801677e:	681b      	ldr	r3, [r3, #0]
 8016780:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8016784:	69bb      	ldr	r3, [r7, #24]
 8016786:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8016788:	683b      	ldr	r3, [r7, #0]
 801678a:	689a      	ldr	r2, [r3, #8]
 801678c:	693b      	ldr	r3, [r7, #16]
 801678e:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	681b      	ldr	r3, [r3, #0]
 8016794:	683a      	ldr	r2, [r7, #0]
 8016796:	6992      	ldr	r2, [r2, #24]
 8016798:	649a      	str	r2, [r3, #72]	; 0x48
 801679a:	e078      	b.n	801688e <OSPI_ConfigCmd+0x2e2>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 801679c:	683b      	ldr	r3, [r7, #0]
 801679e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	d017      	beq.n	80167d4 <OSPI_ConfigCmd+0x228>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 80167a4:	69bb      	ldr	r3, [r7, #24]
 80167a6:	681b      	ldr	r3, [r3, #0]
 80167a8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80167ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80167b0:	683a      	ldr	r2, [r7, #0]
 80167b2:	68d1      	ldr	r1, [r2, #12]
 80167b4:	683a      	ldr	r2, [r7, #0]
 80167b6:	6952      	ldr	r2, [r2, #20]
 80167b8:	4311      	orrs	r1, r2
 80167ba:	683a      	ldr	r2, [r7, #0]
 80167bc:	6912      	ldr	r2, [r2, #16]
 80167be:	4311      	orrs	r1, r2
 80167c0:	683a      	ldr	r2, [r7, #0]
 80167c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80167c4:	4311      	orrs	r1, r2
 80167c6:	683a      	ldr	r2, [r7, #0]
 80167c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80167ca:	430a      	orrs	r2, r1
 80167cc:	431a      	orrs	r2, r3
 80167ce:	69bb      	ldr	r3, [r7, #24]
 80167d0:	601a      	str	r2, [r3, #0]
 80167d2:	e01d      	b.n	8016810 <OSPI_ConfigCmd+0x264>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 80167d4:	69bb      	ldr	r3, [r7, #24]
 80167d6:	681b      	ldr	r3, [r3, #0]
 80167d8:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80167dc:	683b      	ldr	r3, [r7, #0]
 80167de:	68d9      	ldr	r1, [r3, #12]
 80167e0:	683b      	ldr	r3, [r7, #0]
 80167e2:	695b      	ldr	r3, [r3, #20]
 80167e4:	4319      	orrs	r1, r3
 80167e6:	683b      	ldr	r3, [r7, #0]
 80167e8:	691b      	ldr	r3, [r3, #16]
 80167ea:	430b      	orrs	r3, r1
 80167ec:	431a      	orrs	r2, r3
 80167ee:	69bb      	ldr	r3, [r7, #24]
 80167f0:	601a      	str	r2, [r3, #0]
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80167f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80167fa:	d109      	bne.n	8016810 <OSPI_ConfigCmd+0x264>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 80167fc:	683b      	ldr	r3, [r7, #0]
 80167fe:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8016800:	2b08      	cmp	r3, #8
 8016802:	d105      	bne.n	8016810 <OSPI_ConfigCmd+0x264>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8016804:	69bb      	ldr	r3, [r7, #24]
 8016806:	681b      	ldr	r3, [r3, #0]
 8016808:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 801680c:	69bb      	ldr	r3, [r7, #24]
 801680e:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8016810:	683b      	ldr	r3, [r7, #0]
 8016812:	689a      	ldr	r2, [r3, #8]
 8016814:	693b      	ldr	r3, [r7, #16]
 8016816:	601a      	str	r2, [r3, #0]
 8016818:	e039      	b.n	801688e <OSPI_ConfigCmd+0x2e2>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 801681a:	683b      	ldr	r3, [r7, #0]
 801681c:	69db      	ldr	r3, [r3, #28]
 801681e:	2b00      	cmp	r3, #0
 8016820:	d030      	beq.n	8016884 <OSPI_ConfigCmd+0x2d8>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8016822:	683b      	ldr	r3, [r7, #0]
 8016824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016826:	2b00      	cmp	r3, #0
 8016828:	d017      	beq.n	801685a <OSPI_ConfigCmd+0x2ae>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 801682a:	69bb      	ldr	r3, [r7, #24]
 801682c:	681b      	ldr	r3, [r3, #0]
 801682e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8016832:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8016836:	683a      	ldr	r2, [r7, #0]
 8016838:	69d1      	ldr	r1, [r2, #28]
 801683a:	683a      	ldr	r2, [r7, #0]
 801683c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801683e:	4311      	orrs	r1, r2
 8016840:	683a      	ldr	r2, [r7, #0]
 8016842:	6a12      	ldr	r2, [r2, #32]
 8016844:	4311      	orrs	r1, r2
 8016846:	683a      	ldr	r2, [r7, #0]
 8016848:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801684a:	4311      	orrs	r1, r2
 801684c:	683a      	ldr	r2, [r7, #0]
 801684e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8016850:	430a      	orrs	r2, r1
 8016852:	431a      	orrs	r2, r3
 8016854:	69bb      	ldr	r3, [r7, #24]
 8016856:	601a      	str	r2, [r3, #0]
 8016858:	e00e      	b.n	8016878 <OSPI_ConfigCmd+0x2cc>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 801685a:	69bb      	ldr	r3, [r7, #24]
 801685c:	681b      	ldr	r3, [r3, #0]
 801685e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8016862:	683b      	ldr	r3, [r7, #0]
 8016864:	69d9      	ldr	r1, [r3, #28]
 8016866:	683b      	ldr	r3, [r7, #0]
 8016868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801686a:	4319      	orrs	r1, r3
 801686c:	683b      	ldr	r3, [r7, #0]
 801686e:	6a1b      	ldr	r3, [r3, #32]
 8016870:	430b      	orrs	r3, r1
 8016872:	431a      	orrs	r2, r3
 8016874:	69bb      	ldr	r3, [r7, #24]
 8016876:	601a      	str	r2, [r3, #0]
                   (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	681b      	ldr	r3, [r3, #0]
 801687c:	683a      	ldr	r2, [r7, #0]
 801687e:	6992      	ldr	r2, [r2, #24]
 8016880:	649a      	str	r2, [r3, #72]	; 0x48
 8016882:	e004      	b.n	801688e <OSPI_ConfigCmd+0x2e2>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8016884:	2301      	movs	r3, #1
 8016886:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	2208      	movs	r2, #8
 801688c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 801688e:	7ffb      	ldrb	r3, [r7, #31]
}
 8016890:	4618      	mov	r0, r3
 8016892:	3724      	adds	r7, #36	; 0x24
 8016894:	46bd      	mov	sp, r7
 8016896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801689a:	4770      	bx	lr
 801689c:	f0ffc0c0 	.word	0xf0ffc0c0

080168a0 <HAL_OSPI_DLYB_SetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_SetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 80168a0:	b580      	push	{r7, lr}
 80168a2:	b084      	sub	sp, #16
 80168a4:	af00      	add	r7, sp, #0
 80168a6:	6078      	str	r0, [r7, #4]
 80168a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80168aa:	2301      	movs	r3, #1
 80168ac:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	681b      	ldr	r3, [r3, #0]
 80168b2:	689a      	ldr	r2, [r3, #8]
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	681b      	ldr	r3, [r3, #0]
 80168b8:	f042 0202 	orr.w	r2, r2, #2
 80168bc:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	2208      	movs	r2, #8
 80168c2:	651a      	str	r2, [r3, #80]	; 0x50

  if (hospi->Instance == OCTOSPI1)
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	681b      	ldr	r3, [r3, #0]
 80168c8:	4a15      	ldr	r2, [pc, #84]	; (8016920 <HAL_OSPI_DLYB_SetConfig+0x80>)
 80168ca:	4293      	cmp	r3, r2
 80168cc:	d109      	bne.n	80168e2 <HAL_OSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 80168ce:	4815      	ldr	r0, [pc, #84]	; (8016924 <HAL_OSPI_DLYB_SetConfig+0x84>)
 80168d0:	f7ff fa1a 	bl	8015d08 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 80168d4:	6839      	ldr	r1, [r7, #0]
 80168d6:	4813      	ldr	r0, [pc, #76]	; (8016924 <HAL_OSPI_DLYB_SetConfig+0x84>)
 80168d8:	f002 fafa 	bl	8018ed0 <LL_DLYB_SetDelay>
    status = HAL_OK;
 80168dc:	2300      	movs	r3, #0
 80168de:	73fb      	strb	r3, [r7, #15]
 80168e0:	e00d      	b.n	80168fe <HAL_OSPI_DLYB_SetConfig+0x5e>
  }

#if defined (OCTOSPI2)
  else if (hospi->Instance == OCTOSPI2)
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	681b      	ldr	r3, [r3, #0]
 80168e6:	4a10      	ldr	r2, [pc, #64]	; (8016928 <HAL_OSPI_DLYB_SetConfig+0x88>)
 80168e8:	4293      	cmp	r3, r2
 80168ea:	d108      	bne.n	80168fe <HAL_OSPI_DLYB_SetConfig+0x5e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 80168ec:	480f      	ldr	r0, [pc, #60]	; (801692c <HAL_OSPI_DLYB_SetConfig+0x8c>)
 80168ee:	f7ff fa0b 	bl	8015d08 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 80168f2:	6839      	ldr	r1, [r7, #0]
 80168f4:	480d      	ldr	r0, [pc, #52]	; (801692c <HAL_OSPI_DLYB_SetConfig+0x8c>)
 80168f6:	f002 faeb 	bl	8018ed0 <LL_DLYB_SetDelay>
    status = HAL_OK;
 80168fa:	2300      	movs	r3, #0
 80168fc:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Abort the current OCTOSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 80168fe:	6878      	ldr	r0, [r7, #4]
 8016900:	f7ff fd90 	bl	8016424 <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	681b      	ldr	r3, [r3, #0]
 8016908:	689a      	ldr	r2, [r3, #8]
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	681b      	ldr	r3, [r3, #0]
 801690e:	f022 0202 	bic.w	r2, r2, #2
 8016912:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 8016914:	7bfb      	ldrb	r3, [r7, #15]
}
 8016916:	4618      	mov	r0, r3
 8016918:	3710      	adds	r7, #16
 801691a:	46bd      	mov	sp, r7
 801691c:	bd80      	pop	{r7, pc}
 801691e:	bf00      	nop
 8016920:	420d1400 	.word	0x420d1400
 8016924:	420cf000 	.word	0x420cf000
 8016928:	420d2400 	.word	0x420d2400
 801692c:	420cf400 	.word	0x420cf400

08016930 <HAL_OSPI_DLYB_GetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_GetConfig(const OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 8016930:	b580      	push	{r7, lr}
 8016932:	b084      	sub	sp, #16
 8016934:	af00      	add	r7, sp, #0
 8016936:	6078      	str	r0, [r7, #4]
 8016938:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 801693a:	2301      	movs	r3, #1
 801693c:	73fb      	strb	r3, [r7, #15]

  if (hospi->Instance == OCTOSPI1)
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	681b      	ldr	r3, [r3, #0]
 8016942:	4a0d      	ldr	r2, [pc, #52]	; (8016978 <HAL_OSPI_DLYB_GetConfig+0x48>)
 8016944:	4293      	cmp	r3, r2
 8016946:	d106      	bne.n	8016956 <HAL_OSPI_DLYB_GetConfig+0x26>
  {
    LL_DLYB_GetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 8016948:	6839      	ldr	r1, [r7, #0]
 801694a:	480c      	ldr	r0, [pc, #48]	; (801697c <HAL_OSPI_DLYB_GetConfig+0x4c>)
 801694c:	f002 fadf 	bl	8018f0e <LL_DLYB_GetDelay>
    status = HAL_OK;
 8016950:	2300      	movs	r3, #0
 8016952:	73fb      	strb	r3, [r7, #15]
 8016954:	e00a      	b.n	801696c <HAL_OSPI_DLYB_GetConfig+0x3c>
  }
#if defined (OCTOSPI2)
  else if (hospi->Instance == OCTOSPI2)
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	681b      	ldr	r3, [r3, #0]
 801695a:	4a09      	ldr	r2, [pc, #36]	; (8016980 <HAL_OSPI_DLYB_GetConfig+0x50>)
 801695c:	4293      	cmp	r3, r2
 801695e:	d105      	bne.n	801696c <HAL_OSPI_DLYB_GetConfig+0x3c>
  {
    LL_DLYB_GetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 8016960:	6839      	ldr	r1, [r7, #0]
 8016962:	4808      	ldr	r0, [pc, #32]	; (8016984 <HAL_OSPI_DLYB_GetConfig+0x54>)
 8016964:	f002 fad3 	bl	8018f0e <LL_DLYB_GetDelay>
    status = HAL_OK;
 8016968:	2300      	movs	r3, #0
 801696a:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Return function status */
  return status;
 801696c:	7bfb      	ldrb	r3, [r7, #15]
}
 801696e:	4618      	mov	r0, r3
 8016970:	3710      	adds	r7, #16
 8016972:	46bd      	mov	sp, r7
 8016974:	bd80      	pop	{r7, pc}
 8016976:	bf00      	nop
 8016978:	420d1400 	.word	0x420d1400
 801697c:	420cf000 	.word	0x420cf000
 8016980:	420d2400 	.word	0x420d2400
 8016984:	420cf400 	.word	0x420cf400

08016988 <HAL_OSPI_DLYB_GetClockPeriod>:
  * @brief  Get the Delay line length value.
  * @param  hospi   : OSPI handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_GetClockPeriod(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 8016988:	b580      	push	{r7, lr}
 801698a:	b084      	sub	sp, #16
 801698c:	af00      	add	r7, sp, #0
 801698e:	6078      	str	r0, [r7, #4]
 8016990:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8016992:	2301      	movs	r3, #1
 8016994:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	681b      	ldr	r3, [r3, #0]
 801699a:	689a      	ldr	r2, [r3, #8]
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	681b      	ldr	r3, [r3, #0]
 80169a0:	f042 0202 	orr.w	r2, r2, #2
 80169a4:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	2208      	movs	r2, #8
 80169aa:	651a      	str	r2, [r3, #80]	; 0x50

  if (hospi->Instance == OCTOSPI1)
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	681b      	ldr	r3, [r3, #0]
 80169b0:	4a1b      	ldr	r2, [pc, #108]	; (8016a20 <HAL_OSPI_DLYB_GetClockPeriod+0x98>)
 80169b2:	4293      	cmp	r3, r2
 80169b4:	d10f      	bne.n	80169d6 <HAL_OSPI_DLYB_GetClockPeriod+0x4e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 80169b6:	481b      	ldr	r0, [pc, #108]	; (8016a24 <HAL_OSPI_DLYB_GetClockPeriod+0x9c>)
 80169b8:	f7ff f9a6 	bl	8015d08 <LL_DLYB_Enable>

    /* try to detect Period */
    if (LL_DLYB_GetClockPeriod(DLYB_OCTOSPI1, pdlyb_cfg) == (uint32_t)SUCCESS)
 80169bc:	6839      	ldr	r1, [r7, #0]
 80169be:	4819      	ldr	r0, [pc, #100]	; (8016a24 <HAL_OSPI_DLYB_GetClockPeriod+0x9c>)
 80169c0:	f002 fabe 	bl	8018f40 <LL_DLYB_GetClockPeriod>
 80169c4:	4603      	mov	r3, r0
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	d101      	bne.n	80169ce <HAL_OSPI_DLYB_GetClockPeriod+0x46>
    {
      status = HAL_OK;
 80169ca:	2300      	movs	r3, #0
 80169cc:	73fb      	strb	r3, [r7, #15]
    }

    /* Disable the DelayBlock */
    LL_DLYB_Disable(DLYB_OCTOSPI1);
 80169ce:	4815      	ldr	r0, [pc, #84]	; (8016a24 <HAL_OSPI_DLYB_GetClockPeriod+0x9c>)
 80169d0:	f7ff f9aa 	bl	8015d28 <LL_DLYB_Disable>
 80169d4:	e013      	b.n	80169fe <HAL_OSPI_DLYB_GetClockPeriod+0x76>
  }

#if defined (OCTOSPI2)
  else if (hospi->Instance == OCTOSPI2)
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	681b      	ldr	r3, [r3, #0]
 80169da:	4a13      	ldr	r2, [pc, #76]	; (8016a28 <HAL_OSPI_DLYB_GetClockPeriod+0xa0>)
 80169dc:	4293      	cmp	r3, r2
 80169de:	d10e      	bne.n	80169fe <HAL_OSPI_DLYB_GetClockPeriod+0x76>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 80169e0:	4812      	ldr	r0, [pc, #72]	; (8016a2c <HAL_OSPI_DLYB_GetClockPeriod+0xa4>)
 80169e2:	f7ff f991 	bl	8015d08 <LL_DLYB_Enable>

    /* try to detect Period */
    if (LL_DLYB_GetClockPeriod(DLYB_OCTOSPI2, pdlyb_cfg) == (uint32_t)SUCCESS)
 80169e6:	6839      	ldr	r1, [r7, #0]
 80169e8:	4810      	ldr	r0, [pc, #64]	; (8016a2c <HAL_OSPI_DLYB_GetClockPeriod+0xa4>)
 80169ea:	f002 faa9 	bl	8018f40 <LL_DLYB_GetClockPeriod>
 80169ee:	4603      	mov	r3, r0
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	d101      	bne.n	80169f8 <HAL_OSPI_DLYB_GetClockPeriod+0x70>
    {
      status = HAL_OK;
 80169f4:	2300      	movs	r3, #0
 80169f6:	73fb      	strb	r3, [r7, #15]
    }

    /* Disable the DelayBlock */
    LL_DLYB_Disable(DLYB_OCTOSPI2);
 80169f8:	480c      	ldr	r0, [pc, #48]	; (8016a2c <HAL_OSPI_DLYB_GetClockPeriod+0xa4>)
 80169fa:	f7ff f995 	bl	8015d28 <LL_DLYB_Disable>
  {
    /* Nothing to do */
  }

  /* Abort the current OctoSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 80169fe:	6878      	ldr	r0, [r7, #4]
 8016a00:	f7ff fd10 	bl	8016424 <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	681b      	ldr	r3, [r3, #0]
 8016a08:	689a      	ldr	r2, [r3, #8]
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	681b      	ldr	r3, [r3, #0]
 8016a0e:	f022 0202 	bic.w	r2, r2, #2
 8016a12:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 8016a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8016a16:	4618      	mov	r0, r3
 8016a18:	3710      	adds	r7, #16
 8016a1a:	46bd      	mov	sp, r7
 8016a1c:	bd80      	pop	{r7, pc}
 8016a1e:	bf00      	nop
 8016a20:	420d1400 	.word	0x420d1400
 8016a24:	420cf000 	.word	0x420cf000
 8016a28:	420d2400 	.word	0x420d2400
 8016a2c:	420cf400 	.word	0x420cf400

08016a30 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8016a30:	b480      	push	{r7}
 8016a32:	b085      	sub	sp, #20
 8016a34:	af00      	add	r7, sp, #0
 8016a36:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8016a38:	4b39      	ldr	r3, [pc, #228]	; (8016b20 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8016a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016a3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8016a40:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8016a42:	68ba      	ldr	r2, [r7, #8]
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	429a      	cmp	r2, r3
 8016a48:	d10b      	bne.n	8016a62 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016a50:	d905      	bls.n	8016a5e <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8016a52:	4b33      	ldr	r3, [pc, #204]	; (8016b20 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8016a54:	68db      	ldr	r3, [r3, #12]
 8016a56:	4a32      	ldr	r2, [pc, #200]	; (8016b20 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8016a58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8016a5c:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8016a5e:	2300      	movs	r3, #0
 8016a60:	e057      	b.n	8016b12 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8016a62:	687b      	ldr	r3, [r7, #4]
 8016a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016a68:	d90a      	bls.n	8016a80 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8016a6a:	4b2d      	ldr	r3, [pc, #180]	; (8016b20 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8016a6c:	68db      	ldr	r3, [r3, #12]
 8016a6e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	4313      	orrs	r3, r2
 8016a76:	4a2a      	ldr	r2, [pc, #168]	; (8016b20 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8016a78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8016a7c:	60d3      	str	r3, [r2, #12]
 8016a7e:	e007      	b.n	8016a90 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8016a80:	4b27      	ldr	r3, [pc, #156]	; (8016b20 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8016a82:	68db      	ldr	r3, [r3, #12]
 8016a84:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8016a88:	4925      	ldr	r1, [pc, #148]	; (8016b20 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8016a8a:	687b      	ldr	r3, [r7, #4]
 8016a8c:	4313      	orrs	r3, r2
 8016a8e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8016a90:	4b24      	ldr	r3, [pc, #144]	; (8016b24 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8016a92:	681b      	ldr	r3, [r3, #0]
 8016a94:	4a24      	ldr	r2, [pc, #144]	; (8016b28 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8016a96:	fba2 2303 	umull	r2, r3, r2, r3
 8016a9a:	099b      	lsrs	r3, r3, #6
 8016a9c:	2232      	movs	r2, #50	; 0x32
 8016a9e:	fb02 f303 	mul.w	r3, r2, r3
 8016aa2:	4a21      	ldr	r2, [pc, #132]	; (8016b28 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8016aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8016aa8:	099b      	lsrs	r3, r3, #6
 8016aaa:	3301      	adds	r3, #1
 8016aac:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8016aae:	e002      	b.n	8016ab6 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8016ab0:	68fb      	ldr	r3, [r7, #12]
 8016ab2:	3b01      	subs	r3, #1
 8016ab4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8016ab6:	4b1a      	ldr	r3, [pc, #104]	; (8016b20 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8016ab8:	68db      	ldr	r3, [r3, #12]
 8016aba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	d102      	bne.n	8016ac8 <HAL_PWREx_ControlVoltageScaling+0x98>
 8016ac2:	68fb      	ldr	r3, [r7, #12]
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	d1f3      	bne.n	8016ab0 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8016ac8:	68fb      	ldr	r3, [r7, #12]
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	d01b      	beq.n	8016b06 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8016ace:	4b15      	ldr	r3, [pc, #84]	; (8016b24 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8016ad0:	681b      	ldr	r3, [r3, #0]
 8016ad2:	4a15      	ldr	r2, [pc, #84]	; (8016b28 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8016ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8016ad8:	099b      	lsrs	r3, r3, #6
 8016ada:	2232      	movs	r2, #50	; 0x32
 8016adc:	fb02 f303 	mul.w	r3, r2, r3
 8016ae0:	4a11      	ldr	r2, [pc, #68]	; (8016b28 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8016ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8016ae6:	099b      	lsrs	r3, r3, #6
 8016ae8:	3301      	adds	r3, #1
 8016aea:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8016aec:	e002      	b.n	8016af4 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8016aee:	68fb      	ldr	r3, [r7, #12]
 8016af0:	3b01      	subs	r3, #1
 8016af2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8016af4:	4b0a      	ldr	r3, [pc, #40]	; (8016b20 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8016af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016af8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	d102      	bne.n	8016b06 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8016b00:	68fb      	ldr	r3, [r7, #12]
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	d1f3      	bne.n	8016aee <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8016b06:	68fb      	ldr	r3, [r7, #12]
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	d101      	bne.n	8016b10 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8016b0c:	2303      	movs	r3, #3
 8016b0e:	e000      	b.n	8016b12 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8016b10:	2300      	movs	r3, #0
}
 8016b12:	4618      	mov	r0, r3
 8016b14:	3714      	adds	r7, #20
 8016b16:	46bd      	mov	sp, r7
 8016b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b1c:	4770      	bx	lr
 8016b1e:	bf00      	nop
 8016b20:	46020800 	.word	0x46020800
 8016b24:	20000200 	.word	0x20000200
 8016b28:	10624dd3 	.word	0x10624dd3

08016b2c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8016b2c:	b480      	push	{r7}
 8016b2e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8016b30:	4b04      	ldr	r3, [pc, #16]	; (8016b44 <HAL_PWREx_GetVoltageRange+0x18>)
 8016b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016b34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8016b38:	4618      	mov	r0, r3
 8016b3a:	46bd      	mov	sp, r7
 8016b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b40:	4770      	bx	lr
 8016b42:	bf00      	nop
 8016b44:	46020800 	.word	0x46020800

08016b48 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8016b48:	b480      	push	{r7}
 8016b4a:	b085      	sub	sp, #20
 8016b4c:	af00      	add	r7, sp, #0
 8016b4e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8016b50:	4b22      	ldr	r3, [pc, #136]	; (8016bdc <HAL_PWREx_ConfigSupply+0x94>)
 8016b52:	681b      	ldr	r3, [r3, #0]
 8016b54:	4a22      	ldr	r2, [pc, #136]	; (8016be0 <HAL_PWREx_ConfigSupply+0x98>)
 8016b56:	fba2 2303 	umull	r2, r3, r2, r3
 8016b5a:	099b      	lsrs	r3, r3, #6
 8016b5c:	2232      	movs	r2, #50	; 0x32
 8016b5e:	fb02 f303 	mul.w	r3, r2, r3
 8016b62:	4a1f      	ldr	r2, [pc, #124]	; (8016be0 <HAL_PWREx_ConfigSupply+0x98>)
 8016b64:	fba2 2303 	umull	r2, r3, r2, r3
 8016b68:	099b      	lsrs	r3, r3, #6
 8016b6a:	3301      	adds	r3, #1
 8016b6c:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	2b00      	cmp	r3, #0
 8016b72:	d113      	bne.n	8016b9c <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8016b74:	4b1b      	ldr	r3, [pc, #108]	; (8016be4 <HAL_PWREx_ConfigSupply+0x9c>)
 8016b76:	689b      	ldr	r3, [r3, #8]
 8016b78:	4a1a      	ldr	r2, [pc, #104]	; (8016be4 <HAL_PWREx_ConfigSupply+0x9c>)
 8016b7a:	f023 0302 	bic.w	r3, r3, #2
 8016b7e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8016b80:	e002      	b.n	8016b88 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8016b82:	68fb      	ldr	r3, [r7, #12]
 8016b84:	3b01      	subs	r3, #1
 8016b86:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8016b88:	4b16      	ldr	r3, [pc, #88]	; (8016be4 <HAL_PWREx_ConfigSupply+0x9c>)
 8016b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016b8c:	f003 0302 	and.w	r3, r3, #2
 8016b90:	2b02      	cmp	r3, #2
 8016b92:	d116      	bne.n	8016bc2 <HAL_PWREx_ConfigSupply+0x7a>
 8016b94:	68fb      	ldr	r3, [r7, #12]
 8016b96:	2b00      	cmp	r3, #0
 8016b98:	d1f3      	bne.n	8016b82 <HAL_PWREx_ConfigSupply+0x3a>
 8016b9a:	e012      	b.n	8016bc2 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8016b9c:	4b11      	ldr	r3, [pc, #68]	; (8016be4 <HAL_PWREx_ConfigSupply+0x9c>)
 8016b9e:	689b      	ldr	r3, [r3, #8]
 8016ba0:	4a10      	ldr	r2, [pc, #64]	; (8016be4 <HAL_PWREx_ConfigSupply+0x9c>)
 8016ba2:	f043 0302 	orr.w	r3, r3, #2
 8016ba6:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8016ba8:	e002      	b.n	8016bb0 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8016baa:	68fb      	ldr	r3, [r7, #12]
 8016bac:	3b01      	subs	r3, #1
 8016bae:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8016bb0:	4b0c      	ldr	r3, [pc, #48]	; (8016be4 <HAL_PWREx_ConfigSupply+0x9c>)
 8016bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016bb4:	f003 0302 	and.w	r3, r3, #2
 8016bb8:	2b00      	cmp	r3, #0
 8016bba:	d102      	bne.n	8016bc2 <HAL_PWREx_ConfigSupply+0x7a>
 8016bbc:	68fb      	ldr	r3, [r7, #12]
 8016bbe:	2b00      	cmp	r3, #0
 8016bc0:	d1f3      	bne.n	8016baa <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8016bc2:	68fb      	ldr	r3, [r7, #12]
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	d101      	bne.n	8016bcc <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8016bc8:	2303      	movs	r3, #3
 8016bca:	e000      	b.n	8016bce <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8016bcc:	2300      	movs	r3, #0
}
 8016bce:	4618      	mov	r0, r3
 8016bd0:	3714      	adds	r7, #20
 8016bd2:	46bd      	mov	sp, r7
 8016bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bd8:	4770      	bx	lr
 8016bda:	bf00      	nop
 8016bdc:	20000200 	.word	0x20000200
 8016be0:	10624dd3 	.word	0x10624dd3
 8016be4:	46020800 	.word	0x46020800

08016be8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8016be8:	b580      	push	{r7, lr}
 8016bea:	b08e      	sub	sp, #56	; 0x38
 8016bec:	af00      	add	r7, sp, #0
 8016bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8016bf0:	2300      	movs	r3, #0
 8016bf2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8016bf6:	687b      	ldr	r3, [r7, #4]
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	d102      	bne.n	8016c02 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8016bfc:	2301      	movs	r3, #1
 8016bfe:	f000 bec8 	b.w	8017992 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8016c02:	4b99      	ldr	r3, [pc, #612]	; (8016e68 <HAL_RCC_OscConfig+0x280>)
 8016c04:	69db      	ldr	r3, [r3, #28]
 8016c06:	f003 030c 	and.w	r3, r3, #12
 8016c0a:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8016c0c:	4b96      	ldr	r3, [pc, #600]	; (8016e68 <HAL_RCC_OscConfig+0x280>)
 8016c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016c10:	f003 0303 	and.w	r3, r3, #3
 8016c14:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	681b      	ldr	r3, [r3, #0]
 8016c1a:	f003 0310 	and.w	r3, r3, #16
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	f000 816c 	beq.w	8016efc <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8016c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c26:	2b00      	cmp	r3, #0
 8016c28:	d007      	beq.n	8016c3a <HAL_RCC_OscConfig+0x52>
 8016c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c2c:	2b0c      	cmp	r3, #12
 8016c2e:	f040 80de 	bne.w	8016dee <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8016c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c34:	2b01      	cmp	r3, #1
 8016c36:	f040 80da 	bne.w	8016dee <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	69db      	ldr	r3, [r3, #28]
 8016c3e:	2b00      	cmp	r3, #0
 8016c40:	d102      	bne.n	8016c48 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8016c42:	2301      	movs	r3, #1
 8016c44:	f000 bea5 	b.w	8017992 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016c4c:	4b86      	ldr	r3, [pc, #536]	; (8016e68 <HAL_RCC_OscConfig+0x280>)
 8016c4e:	689b      	ldr	r3, [r3, #8]
 8016c50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	d004      	beq.n	8016c62 <HAL_RCC_OscConfig+0x7a>
 8016c58:	4b83      	ldr	r3, [pc, #524]	; (8016e68 <HAL_RCC_OscConfig+0x280>)
 8016c5a:	689b      	ldr	r3, [r3, #8]
 8016c5c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8016c60:	e005      	b.n	8016c6e <HAL_RCC_OscConfig+0x86>
 8016c62:	4b81      	ldr	r3, [pc, #516]	; (8016e68 <HAL_RCC_OscConfig+0x280>)
 8016c64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8016c68:	041b      	lsls	r3, r3, #16
 8016c6a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8016c6e:	4293      	cmp	r3, r2
 8016c70:	d255      	bcs.n	8016d1e <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8016c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c74:	2b00      	cmp	r3, #0
 8016c76:	d10a      	bne.n	8016c8e <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c7c:	4618      	mov	r0, r3
 8016c7e:	f001 f9b1 	bl	8017fe4 <RCC_SetFlashLatencyFromMSIRange>
 8016c82:	4603      	mov	r3, r0
 8016c84:	2b00      	cmp	r3, #0
 8016c86:	d002      	beq.n	8016c8e <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8016c88:	2301      	movs	r3, #1
 8016c8a:	f000 be82 	b.w	8017992 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8016c8e:	4b76      	ldr	r3, [pc, #472]	; (8016e68 <HAL_RCC_OscConfig+0x280>)
 8016c90:	689b      	ldr	r3, [r3, #8]
 8016c92:	4a75      	ldr	r2, [pc, #468]	; (8016e68 <HAL_RCC_OscConfig+0x280>)
 8016c94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8016c98:	6093      	str	r3, [r2, #8]
 8016c9a:	4b73      	ldr	r3, [pc, #460]	; (8016e68 <HAL_RCC_OscConfig+0x280>)
 8016c9c:	689b      	ldr	r3, [r3, #8]
 8016c9e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8016ca2:	687b      	ldr	r3, [r7, #4]
 8016ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ca6:	4970      	ldr	r1, [pc, #448]	; (8016e68 <HAL_RCC_OscConfig+0x280>)
 8016ca8:	4313      	orrs	r3, r2
 8016caa:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016cb0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8016cb4:	d309      	bcc.n	8016cca <HAL_RCC_OscConfig+0xe2>
 8016cb6:	4b6c      	ldr	r3, [pc, #432]	; (8016e68 <HAL_RCC_OscConfig+0x280>)
 8016cb8:	68db      	ldr	r3, [r3, #12]
 8016cba:	f023 021f 	bic.w	r2, r3, #31
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	6a1b      	ldr	r3, [r3, #32]
 8016cc2:	4969      	ldr	r1, [pc, #420]	; (8016e68 <HAL_RCC_OscConfig+0x280>)
 8016cc4:	4313      	orrs	r3, r2
 8016cc6:	60cb      	str	r3, [r1, #12]
 8016cc8:	e07e      	b.n	8016dc8 <HAL_RCC_OscConfig+0x1e0>
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	da0a      	bge.n	8016ce8 <HAL_RCC_OscConfig+0x100>
 8016cd2:	4b65      	ldr	r3, [pc, #404]	; (8016e68 <HAL_RCC_OscConfig+0x280>)
 8016cd4:	68db      	ldr	r3, [r3, #12]
 8016cd6:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	6a1b      	ldr	r3, [r3, #32]
 8016cde:	015b      	lsls	r3, r3, #5
 8016ce0:	4961      	ldr	r1, [pc, #388]	; (8016e68 <HAL_RCC_OscConfig+0x280>)
 8016ce2:	4313      	orrs	r3, r2
 8016ce4:	60cb      	str	r3, [r1, #12]
 8016ce6:	e06f      	b.n	8016dc8 <HAL_RCC_OscConfig+0x1e0>
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016cf0:	d30a      	bcc.n	8016d08 <HAL_RCC_OscConfig+0x120>
 8016cf2:	4b5d      	ldr	r3, [pc, #372]	; (8016e68 <HAL_RCC_OscConfig+0x280>)
 8016cf4:	68db      	ldr	r3, [r3, #12]
 8016cf6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	6a1b      	ldr	r3, [r3, #32]
 8016cfe:	029b      	lsls	r3, r3, #10
 8016d00:	4959      	ldr	r1, [pc, #356]	; (8016e68 <HAL_RCC_OscConfig+0x280>)
 8016d02:	4313      	orrs	r3, r2
 8016d04:	60cb      	str	r3, [r1, #12]
 8016d06:	e05f      	b.n	8016dc8 <HAL_RCC_OscConfig+0x1e0>
 8016d08:	4b57      	ldr	r3, [pc, #348]	; (8016e68 <HAL_RCC_OscConfig+0x280>)
 8016d0a:	68db      	ldr	r3, [r3, #12]
 8016d0c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	6a1b      	ldr	r3, [r3, #32]
 8016d14:	03db      	lsls	r3, r3, #15
 8016d16:	4954      	ldr	r1, [pc, #336]	; (8016e68 <HAL_RCC_OscConfig+0x280>)
 8016d18:	4313      	orrs	r3, r2
 8016d1a:	60cb      	str	r3, [r1, #12]
 8016d1c:	e054      	b.n	8016dc8 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8016d1e:	4b52      	ldr	r3, [pc, #328]	; (8016e68 <HAL_RCC_OscConfig+0x280>)
 8016d20:	689b      	ldr	r3, [r3, #8]
 8016d22:	4a51      	ldr	r2, [pc, #324]	; (8016e68 <HAL_RCC_OscConfig+0x280>)
 8016d24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8016d28:	6093      	str	r3, [r2, #8]
 8016d2a:	4b4f      	ldr	r3, [pc, #316]	; (8016e68 <HAL_RCC_OscConfig+0x280>)
 8016d2c:	689b      	ldr	r3, [r3, #8]
 8016d2e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d36:	494c      	ldr	r1, [pc, #304]	; (8016e68 <HAL_RCC_OscConfig+0x280>)
 8016d38:	4313      	orrs	r3, r2
 8016d3a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d40:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8016d44:	d309      	bcc.n	8016d5a <HAL_RCC_OscConfig+0x172>
 8016d46:	4b48      	ldr	r3, [pc, #288]	; (8016e68 <HAL_RCC_OscConfig+0x280>)
 8016d48:	68db      	ldr	r3, [r3, #12]
 8016d4a:	f023 021f 	bic.w	r2, r3, #31
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	6a1b      	ldr	r3, [r3, #32]
 8016d52:	4945      	ldr	r1, [pc, #276]	; (8016e68 <HAL_RCC_OscConfig+0x280>)
 8016d54:	4313      	orrs	r3, r2
 8016d56:	60cb      	str	r3, [r1, #12]
 8016d58:	e028      	b.n	8016dac <HAL_RCC_OscConfig+0x1c4>
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	da0a      	bge.n	8016d78 <HAL_RCC_OscConfig+0x190>
 8016d62:	4b41      	ldr	r3, [pc, #260]	; (8016e68 <HAL_RCC_OscConfig+0x280>)
 8016d64:	68db      	ldr	r3, [r3, #12]
 8016d66:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8016d6a:	687b      	ldr	r3, [r7, #4]
 8016d6c:	6a1b      	ldr	r3, [r3, #32]
 8016d6e:	015b      	lsls	r3, r3, #5
 8016d70:	493d      	ldr	r1, [pc, #244]	; (8016e68 <HAL_RCC_OscConfig+0x280>)
 8016d72:	4313      	orrs	r3, r2
 8016d74:	60cb      	str	r3, [r1, #12]
 8016d76:	e019      	b.n	8016dac <HAL_RCC_OscConfig+0x1c4>
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016d80:	d30a      	bcc.n	8016d98 <HAL_RCC_OscConfig+0x1b0>
 8016d82:	4b39      	ldr	r3, [pc, #228]	; (8016e68 <HAL_RCC_OscConfig+0x280>)
 8016d84:	68db      	ldr	r3, [r3, #12]
 8016d86:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	6a1b      	ldr	r3, [r3, #32]
 8016d8e:	029b      	lsls	r3, r3, #10
 8016d90:	4935      	ldr	r1, [pc, #212]	; (8016e68 <HAL_RCC_OscConfig+0x280>)
 8016d92:	4313      	orrs	r3, r2
 8016d94:	60cb      	str	r3, [r1, #12]
 8016d96:	e009      	b.n	8016dac <HAL_RCC_OscConfig+0x1c4>
 8016d98:	4b33      	ldr	r3, [pc, #204]	; (8016e68 <HAL_RCC_OscConfig+0x280>)
 8016d9a:	68db      	ldr	r3, [r3, #12]
 8016d9c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	6a1b      	ldr	r3, [r3, #32]
 8016da4:	03db      	lsls	r3, r3, #15
 8016da6:	4930      	ldr	r1, [pc, #192]	; (8016e68 <HAL_RCC_OscConfig+0x280>)
 8016da8:	4313      	orrs	r3, r2
 8016daa:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8016dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016dae:	2b00      	cmp	r3, #0
 8016db0:	d10a      	bne.n	8016dc8 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016db6:	4618      	mov	r0, r3
 8016db8:	f001 f914 	bl	8017fe4 <RCC_SetFlashLatencyFromMSIRange>
 8016dbc:	4603      	mov	r3, r0
 8016dbe:	2b00      	cmp	r3, #0
 8016dc0:	d002      	beq.n	8016dc8 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8016dc2:	2301      	movs	r3, #1
 8016dc4:	f000 bde5 	b.w	8017992 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8016dc8:	f001 f8de 	bl	8017f88 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8016dcc:	4b27      	ldr	r3, [pc, #156]	; (8016e6c <HAL_RCC_OscConfig+0x284>)
 8016dce:	681b      	ldr	r3, [r3, #0]
 8016dd0:	4618      	mov	r0, r3
 8016dd2:	f7fa fc3d 	bl	8011650 <HAL_InitTick>
 8016dd6:	4603      	mov	r3, r0
 8016dd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8016ddc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	f000 808a 	beq.w	8016efa <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8016de6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016dea:	f000 bdd2 	b.w	8017992 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	69db      	ldr	r3, [r3, #28]
 8016df2:	2b00      	cmp	r3, #0
 8016df4:	d066      	beq.n	8016ec4 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8016df6:	4b1c      	ldr	r3, [pc, #112]	; (8016e68 <HAL_RCC_OscConfig+0x280>)
 8016df8:	681b      	ldr	r3, [r3, #0]
 8016dfa:	4a1b      	ldr	r2, [pc, #108]	; (8016e68 <HAL_RCC_OscConfig+0x280>)
 8016dfc:	f043 0301 	orr.w	r3, r3, #1
 8016e00:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8016e02:	f7fa fc6f 	bl	80116e4 <HAL_GetTick>
 8016e06:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8016e08:	e009      	b.n	8016e1e <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8016e0a:	f7fa fc6b 	bl	80116e4 <HAL_GetTick>
 8016e0e:	4602      	mov	r2, r0
 8016e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e12:	1ad3      	subs	r3, r2, r3
 8016e14:	2b02      	cmp	r3, #2
 8016e16:	d902      	bls.n	8016e1e <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8016e18:	2303      	movs	r3, #3
 8016e1a:	f000 bdba 	b.w	8017992 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8016e1e:	4b12      	ldr	r3, [pc, #72]	; (8016e68 <HAL_RCC_OscConfig+0x280>)
 8016e20:	681b      	ldr	r3, [r3, #0]
 8016e22:	f003 0304 	and.w	r3, r3, #4
 8016e26:	2b00      	cmp	r3, #0
 8016e28:	d0ef      	beq.n	8016e0a <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8016e2a:	4b0f      	ldr	r3, [pc, #60]	; (8016e68 <HAL_RCC_OscConfig+0x280>)
 8016e2c:	689b      	ldr	r3, [r3, #8]
 8016e2e:	4a0e      	ldr	r2, [pc, #56]	; (8016e68 <HAL_RCC_OscConfig+0x280>)
 8016e30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8016e34:	6093      	str	r3, [r2, #8]
 8016e36:	4b0c      	ldr	r3, [pc, #48]	; (8016e68 <HAL_RCC_OscConfig+0x280>)
 8016e38:	689b      	ldr	r3, [r3, #8]
 8016e3a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8016e3e:	687b      	ldr	r3, [r7, #4]
 8016e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e42:	4909      	ldr	r1, [pc, #36]	; (8016e68 <HAL_RCC_OscConfig+0x280>)
 8016e44:	4313      	orrs	r3, r2
 8016e46:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8016e48:	687b      	ldr	r3, [r7, #4]
 8016e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e4c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8016e50:	d30e      	bcc.n	8016e70 <HAL_RCC_OscConfig+0x288>
 8016e52:	4b05      	ldr	r3, [pc, #20]	; (8016e68 <HAL_RCC_OscConfig+0x280>)
 8016e54:	68db      	ldr	r3, [r3, #12]
 8016e56:	f023 021f 	bic.w	r2, r3, #31
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	6a1b      	ldr	r3, [r3, #32]
 8016e5e:	4902      	ldr	r1, [pc, #8]	; (8016e68 <HAL_RCC_OscConfig+0x280>)
 8016e60:	4313      	orrs	r3, r2
 8016e62:	60cb      	str	r3, [r1, #12]
 8016e64:	e04a      	b.n	8016efc <HAL_RCC_OscConfig+0x314>
 8016e66:	bf00      	nop
 8016e68:	46020c00 	.word	0x46020c00
 8016e6c:	20000204 	.word	0x20000204
 8016e70:	687b      	ldr	r3, [r7, #4]
 8016e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e74:	2b00      	cmp	r3, #0
 8016e76:	da0a      	bge.n	8016e8e <HAL_RCC_OscConfig+0x2a6>
 8016e78:	4b98      	ldr	r3, [pc, #608]	; (80170dc <HAL_RCC_OscConfig+0x4f4>)
 8016e7a:	68db      	ldr	r3, [r3, #12]
 8016e7c:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8016e80:	687b      	ldr	r3, [r7, #4]
 8016e82:	6a1b      	ldr	r3, [r3, #32]
 8016e84:	015b      	lsls	r3, r3, #5
 8016e86:	4995      	ldr	r1, [pc, #596]	; (80170dc <HAL_RCC_OscConfig+0x4f4>)
 8016e88:	4313      	orrs	r3, r2
 8016e8a:	60cb      	str	r3, [r1, #12]
 8016e8c:	e036      	b.n	8016efc <HAL_RCC_OscConfig+0x314>
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016e96:	d30a      	bcc.n	8016eae <HAL_RCC_OscConfig+0x2c6>
 8016e98:	4b90      	ldr	r3, [pc, #576]	; (80170dc <HAL_RCC_OscConfig+0x4f4>)
 8016e9a:	68db      	ldr	r3, [r3, #12]
 8016e9c:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	6a1b      	ldr	r3, [r3, #32]
 8016ea4:	029b      	lsls	r3, r3, #10
 8016ea6:	498d      	ldr	r1, [pc, #564]	; (80170dc <HAL_RCC_OscConfig+0x4f4>)
 8016ea8:	4313      	orrs	r3, r2
 8016eaa:	60cb      	str	r3, [r1, #12]
 8016eac:	e026      	b.n	8016efc <HAL_RCC_OscConfig+0x314>
 8016eae:	4b8b      	ldr	r3, [pc, #556]	; (80170dc <HAL_RCC_OscConfig+0x4f4>)
 8016eb0:	68db      	ldr	r3, [r3, #12]
 8016eb2:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	6a1b      	ldr	r3, [r3, #32]
 8016eba:	03db      	lsls	r3, r3, #15
 8016ebc:	4987      	ldr	r1, [pc, #540]	; (80170dc <HAL_RCC_OscConfig+0x4f4>)
 8016ebe:	4313      	orrs	r3, r2
 8016ec0:	60cb      	str	r3, [r1, #12]
 8016ec2:	e01b      	b.n	8016efc <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8016ec4:	4b85      	ldr	r3, [pc, #532]	; (80170dc <HAL_RCC_OscConfig+0x4f4>)
 8016ec6:	681b      	ldr	r3, [r3, #0]
 8016ec8:	4a84      	ldr	r2, [pc, #528]	; (80170dc <HAL_RCC_OscConfig+0x4f4>)
 8016eca:	f023 0301 	bic.w	r3, r3, #1
 8016ece:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8016ed0:	f7fa fc08 	bl	80116e4 <HAL_GetTick>
 8016ed4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8016ed6:	e009      	b.n	8016eec <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8016ed8:	f7fa fc04 	bl	80116e4 <HAL_GetTick>
 8016edc:	4602      	mov	r2, r0
 8016ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ee0:	1ad3      	subs	r3, r2, r3
 8016ee2:	2b02      	cmp	r3, #2
 8016ee4:	d902      	bls.n	8016eec <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8016ee6:	2303      	movs	r3, #3
 8016ee8:	f000 bd53 	b.w	8017992 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8016eec:	4b7b      	ldr	r3, [pc, #492]	; (80170dc <HAL_RCC_OscConfig+0x4f4>)
 8016eee:	681b      	ldr	r3, [r3, #0]
 8016ef0:	f003 0304 	and.w	r3, r3, #4
 8016ef4:	2b00      	cmp	r3, #0
 8016ef6:	d1ef      	bne.n	8016ed8 <HAL_RCC_OscConfig+0x2f0>
 8016ef8:	e000      	b.n	8016efc <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8016efa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	681b      	ldr	r3, [r3, #0]
 8016f00:	f003 0301 	and.w	r3, r3, #1
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	f000 808b 	beq.w	8017020 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8016f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f0c:	2b08      	cmp	r3, #8
 8016f0e:	d005      	beq.n	8016f1c <HAL_RCC_OscConfig+0x334>
 8016f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f12:	2b0c      	cmp	r3, #12
 8016f14:	d109      	bne.n	8016f2a <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8016f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f18:	2b03      	cmp	r3, #3
 8016f1a:	d106      	bne.n	8016f2a <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	685b      	ldr	r3, [r3, #4]
 8016f20:	2b00      	cmp	r3, #0
 8016f22:	d17d      	bne.n	8017020 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8016f24:	2301      	movs	r3, #1
 8016f26:	f000 bd34 	b.w	8017992 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	685b      	ldr	r3, [r3, #4]
 8016f2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016f32:	d106      	bne.n	8016f42 <HAL_RCC_OscConfig+0x35a>
 8016f34:	4b69      	ldr	r3, [pc, #420]	; (80170dc <HAL_RCC_OscConfig+0x4f4>)
 8016f36:	681b      	ldr	r3, [r3, #0]
 8016f38:	4a68      	ldr	r2, [pc, #416]	; (80170dc <HAL_RCC_OscConfig+0x4f4>)
 8016f3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8016f3e:	6013      	str	r3, [r2, #0]
 8016f40:	e041      	b.n	8016fc6 <HAL_RCC_OscConfig+0x3de>
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	685b      	ldr	r3, [r3, #4]
 8016f46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8016f4a:	d112      	bne.n	8016f72 <HAL_RCC_OscConfig+0x38a>
 8016f4c:	4b63      	ldr	r3, [pc, #396]	; (80170dc <HAL_RCC_OscConfig+0x4f4>)
 8016f4e:	681b      	ldr	r3, [r3, #0]
 8016f50:	4a62      	ldr	r2, [pc, #392]	; (80170dc <HAL_RCC_OscConfig+0x4f4>)
 8016f52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8016f56:	6013      	str	r3, [r2, #0]
 8016f58:	4b60      	ldr	r3, [pc, #384]	; (80170dc <HAL_RCC_OscConfig+0x4f4>)
 8016f5a:	681b      	ldr	r3, [r3, #0]
 8016f5c:	4a5f      	ldr	r2, [pc, #380]	; (80170dc <HAL_RCC_OscConfig+0x4f4>)
 8016f5e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016f62:	6013      	str	r3, [r2, #0]
 8016f64:	4b5d      	ldr	r3, [pc, #372]	; (80170dc <HAL_RCC_OscConfig+0x4f4>)
 8016f66:	681b      	ldr	r3, [r3, #0]
 8016f68:	4a5c      	ldr	r2, [pc, #368]	; (80170dc <HAL_RCC_OscConfig+0x4f4>)
 8016f6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8016f6e:	6013      	str	r3, [r2, #0]
 8016f70:	e029      	b.n	8016fc6 <HAL_RCC_OscConfig+0x3de>
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	685b      	ldr	r3, [r3, #4]
 8016f76:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8016f7a:	d112      	bne.n	8016fa2 <HAL_RCC_OscConfig+0x3ba>
 8016f7c:	4b57      	ldr	r3, [pc, #348]	; (80170dc <HAL_RCC_OscConfig+0x4f4>)
 8016f7e:	681b      	ldr	r3, [r3, #0]
 8016f80:	4a56      	ldr	r2, [pc, #344]	; (80170dc <HAL_RCC_OscConfig+0x4f4>)
 8016f82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8016f86:	6013      	str	r3, [r2, #0]
 8016f88:	4b54      	ldr	r3, [pc, #336]	; (80170dc <HAL_RCC_OscConfig+0x4f4>)
 8016f8a:	681b      	ldr	r3, [r3, #0]
 8016f8c:	4a53      	ldr	r2, [pc, #332]	; (80170dc <HAL_RCC_OscConfig+0x4f4>)
 8016f8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016f92:	6013      	str	r3, [r2, #0]
 8016f94:	4b51      	ldr	r3, [pc, #324]	; (80170dc <HAL_RCC_OscConfig+0x4f4>)
 8016f96:	681b      	ldr	r3, [r3, #0]
 8016f98:	4a50      	ldr	r2, [pc, #320]	; (80170dc <HAL_RCC_OscConfig+0x4f4>)
 8016f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8016f9e:	6013      	str	r3, [r2, #0]
 8016fa0:	e011      	b.n	8016fc6 <HAL_RCC_OscConfig+0x3de>
 8016fa2:	4b4e      	ldr	r3, [pc, #312]	; (80170dc <HAL_RCC_OscConfig+0x4f4>)
 8016fa4:	681b      	ldr	r3, [r3, #0]
 8016fa6:	4a4d      	ldr	r2, [pc, #308]	; (80170dc <HAL_RCC_OscConfig+0x4f4>)
 8016fa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8016fac:	6013      	str	r3, [r2, #0]
 8016fae:	4b4b      	ldr	r3, [pc, #300]	; (80170dc <HAL_RCC_OscConfig+0x4f4>)
 8016fb0:	681b      	ldr	r3, [r3, #0]
 8016fb2:	4a4a      	ldr	r2, [pc, #296]	; (80170dc <HAL_RCC_OscConfig+0x4f4>)
 8016fb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8016fb8:	6013      	str	r3, [r2, #0]
 8016fba:	4b48      	ldr	r3, [pc, #288]	; (80170dc <HAL_RCC_OscConfig+0x4f4>)
 8016fbc:	681b      	ldr	r3, [r3, #0]
 8016fbe:	4a47      	ldr	r2, [pc, #284]	; (80170dc <HAL_RCC_OscConfig+0x4f4>)
 8016fc0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016fc4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8016fc6:	687b      	ldr	r3, [r7, #4]
 8016fc8:	685b      	ldr	r3, [r3, #4]
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	d014      	beq.n	8016ff8 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8016fce:	f7fa fb89 	bl	80116e4 <HAL_GetTick>
 8016fd2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8016fd4:	e009      	b.n	8016fea <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8016fd6:	f7fa fb85 	bl	80116e4 <HAL_GetTick>
 8016fda:	4602      	mov	r2, r0
 8016fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fde:	1ad3      	subs	r3, r2, r3
 8016fe0:	2b64      	cmp	r3, #100	; 0x64
 8016fe2:	d902      	bls.n	8016fea <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8016fe4:	2303      	movs	r3, #3
 8016fe6:	f000 bcd4 	b.w	8017992 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8016fea:	4b3c      	ldr	r3, [pc, #240]	; (80170dc <HAL_RCC_OscConfig+0x4f4>)
 8016fec:	681b      	ldr	r3, [r3, #0]
 8016fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016ff2:	2b00      	cmp	r3, #0
 8016ff4:	d0ef      	beq.n	8016fd6 <HAL_RCC_OscConfig+0x3ee>
 8016ff6:	e013      	b.n	8017020 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8016ff8:	f7fa fb74 	bl	80116e4 <HAL_GetTick>
 8016ffc:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8016ffe:	e009      	b.n	8017014 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8017000:	f7fa fb70 	bl	80116e4 <HAL_GetTick>
 8017004:	4602      	mov	r2, r0
 8017006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017008:	1ad3      	subs	r3, r2, r3
 801700a:	2b64      	cmp	r3, #100	; 0x64
 801700c:	d902      	bls.n	8017014 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 801700e:	2303      	movs	r3, #3
 8017010:	f000 bcbf 	b.w	8017992 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8017014:	4b31      	ldr	r3, [pc, #196]	; (80170dc <HAL_RCC_OscConfig+0x4f4>)
 8017016:	681b      	ldr	r3, [r3, #0]
 8017018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801701c:	2b00      	cmp	r3, #0
 801701e:	d1ef      	bne.n	8017000 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	681b      	ldr	r3, [r3, #0]
 8017024:	f003 0302 	and.w	r3, r3, #2
 8017028:	2b00      	cmp	r3, #0
 801702a:	d05f      	beq.n	80170ec <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 801702c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801702e:	2b04      	cmp	r3, #4
 8017030:	d005      	beq.n	801703e <HAL_RCC_OscConfig+0x456>
 8017032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017034:	2b0c      	cmp	r3, #12
 8017036:	d114      	bne.n	8017062 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8017038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801703a:	2b02      	cmp	r3, #2
 801703c:	d111      	bne.n	8017062 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	68db      	ldr	r3, [r3, #12]
 8017042:	2b00      	cmp	r3, #0
 8017044:	d102      	bne.n	801704c <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8017046:	2301      	movs	r3, #1
 8017048:	f000 bca3 	b.w	8017992 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 801704c:	4b23      	ldr	r3, [pc, #140]	; (80170dc <HAL_RCC_OscConfig+0x4f4>)
 801704e:	691b      	ldr	r3, [r3, #16]
 8017050:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8017054:	687b      	ldr	r3, [r7, #4]
 8017056:	691b      	ldr	r3, [r3, #16]
 8017058:	041b      	lsls	r3, r3, #16
 801705a:	4920      	ldr	r1, [pc, #128]	; (80170dc <HAL_RCC_OscConfig+0x4f4>)
 801705c:	4313      	orrs	r3, r2
 801705e:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8017060:	e044      	b.n	80170ec <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8017062:	687b      	ldr	r3, [r7, #4]
 8017064:	68db      	ldr	r3, [r3, #12]
 8017066:	2b00      	cmp	r3, #0
 8017068:	d024      	beq.n	80170b4 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 801706a:	4b1c      	ldr	r3, [pc, #112]	; (80170dc <HAL_RCC_OscConfig+0x4f4>)
 801706c:	681b      	ldr	r3, [r3, #0]
 801706e:	4a1b      	ldr	r2, [pc, #108]	; (80170dc <HAL_RCC_OscConfig+0x4f4>)
 8017070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017074:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8017076:	f7fa fb35 	bl	80116e4 <HAL_GetTick>
 801707a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801707c:	e009      	b.n	8017092 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801707e:	f7fa fb31 	bl	80116e4 <HAL_GetTick>
 8017082:	4602      	mov	r2, r0
 8017084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017086:	1ad3      	subs	r3, r2, r3
 8017088:	2b02      	cmp	r3, #2
 801708a:	d902      	bls.n	8017092 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 801708c:	2303      	movs	r3, #3
 801708e:	f000 bc80 	b.w	8017992 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8017092:	4b12      	ldr	r3, [pc, #72]	; (80170dc <HAL_RCC_OscConfig+0x4f4>)
 8017094:	681b      	ldr	r3, [r3, #0]
 8017096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801709a:	2b00      	cmp	r3, #0
 801709c:	d0ef      	beq.n	801707e <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 801709e:	4b0f      	ldr	r3, [pc, #60]	; (80170dc <HAL_RCC_OscConfig+0x4f4>)
 80170a0:	691b      	ldr	r3, [r3, #16]
 80170a2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80170a6:	687b      	ldr	r3, [r7, #4]
 80170a8:	691b      	ldr	r3, [r3, #16]
 80170aa:	041b      	lsls	r3, r3, #16
 80170ac:	490b      	ldr	r1, [pc, #44]	; (80170dc <HAL_RCC_OscConfig+0x4f4>)
 80170ae:	4313      	orrs	r3, r2
 80170b0:	610b      	str	r3, [r1, #16]
 80170b2:	e01b      	b.n	80170ec <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80170b4:	4b09      	ldr	r3, [pc, #36]	; (80170dc <HAL_RCC_OscConfig+0x4f4>)
 80170b6:	681b      	ldr	r3, [r3, #0]
 80170b8:	4a08      	ldr	r2, [pc, #32]	; (80170dc <HAL_RCC_OscConfig+0x4f4>)
 80170ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80170be:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80170c0:	f7fa fb10 	bl	80116e4 <HAL_GetTick>
 80170c4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80170c6:	e00b      	b.n	80170e0 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80170c8:	f7fa fb0c 	bl	80116e4 <HAL_GetTick>
 80170cc:	4602      	mov	r2, r0
 80170ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170d0:	1ad3      	subs	r3, r2, r3
 80170d2:	2b02      	cmp	r3, #2
 80170d4:	d904      	bls.n	80170e0 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80170d6:	2303      	movs	r3, #3
 80170d8:	f000 bc5b 	b.w	8017992 <HAL_RCC_OscConfig+0xdaa>
 80170dc:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80170e0:	4baf      	ldr	r3, [pc, #700]	; (80173a0 <HAL_RCC_OscConfig+0x7b8>)
 80170e2:	681b      	ldr	r3, [r3, #0]
 80170e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80170e8:	2b00      	cmp	r3, #0
 80170ea:	d1ed      	bne.n	80170c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80170ec:	687b      	ldr	r3, [r7, #4]
 80170ee:	681b      	ldr	r3, [r3, #0]
 80170f0:	f003 0308 	and.w	r3, r3, #8
 80170f4:	2b00      	cmp	r3, #0
 80170f6:	f000 80c8 	beq.w	801728a <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80170fa:	2300      	movs	r3, #0
 80170fc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8017100:	4ba7      	ldr	r3, [pc, #668]	; (80173a0 <HAL_RCC_OscConfig+0x7b8>)
 8017102:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8017106:	f003 0304 	and.w	r3, r3, #4
 801710a:	2b00      	cmp	r3, #0
 801710c:	d111      	bne.n	8017132 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801710e:	4ba4      	ldr	r3, [pc, #656]	; (80173a0 <HAL_RCC_OscConfig+0x7b8>)
 8017110:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8017114:	4aa2      	ldr	r2, [pc, #648]	; (80173a0 <HAL_RCC_OscConfig+0x7b8>)
 8017116:	f043 0304 	orr.w	r3, r3, #4
 801711a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 801711e:	4ba0      	ldr	r3, [pc, #640]	; (80173a0 <HAL_RCC_OscConfig+0x7b8>)
 8017120:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8017124:	f003 0304 	and.w	r3, r3, #4
 8017128:	617b      	str	r3, [r7, #20]
 801712a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 801712c:	2301      	movs	r3, #1
 801712e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8017132:	4b9c      	ldr	r3, [pc, #624]	; (80173a4 <HAL_RCC_OscConfig+0x7bc>)
 8017134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017136:	f003 0301 	and.w	r3, r3, #1
 801713a:	2b00      	cmp	r3, #0
 801713c:	d119      	bne.n	8017172 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 801713e:	4b99      	ldr	r3, [pc, #612]	; (80173a4 <HAL_RCC_OscConfig+0x7bc>)
 8017140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017142:	4a98      	ldr	r2, [pc, #608]	; (80173a4 <HAL_RCC_OscConfig+0x7bc>)
 8017144:	f043 0301 	orr.w	r3, r3, #1
 8017148:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801714a:	f7fa facb 	bl	80116e4 <HAL_GetTick>
 801714e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8017150:	e009      	b.n	8017166 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8017152:	f7fa fac7 	bl	80116e4 <HAL_GetTick>
 8017156:	4602      	mov	r2, r0
 8017158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801715a:	1ad3      	subs	r3, r2, r3
 801715c:	2b02      	cmp	r3, #2
 801715e:	d902      	bls.n	8017166 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8017160:	2303      	movs	r3, #3
 8017162:	f000 bc16 	b.w	8017992 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8017166:	4b8f      	ldr	r3, [pc, #572]	; (80173a4 <HAL_RCC_OscConfig+0x7bc>)
 8017168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801716a:	f003 0301 	and.w	r3, r3, #1
 801716e:	2b00      	cmp	r3, #0
 8017170:	d0ef      	beq.n	8017152 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8017172:	687b      	ldr	r3, [r7, #4]
 8017174:	695b      	ldr	r3, [r3, #20]
 8017176:	2b00      	cmp	r3, #0
 8017178:	d05f      	beq.n	801723a <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 801717a:	4b89      	ldr	r3, [pc, #548]	; (80173a0 <HAL_RCC_OscConfig+0x7b8>)
 801717c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8017180:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	699a      	ldr	r2, [r3, #24]
 8017186:	6a3b      	ldr	r3, [r7, #32]
 8017188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801718c:	429a      	cmp	r2, r3
 801718e:	d037      	beq.n	8017200 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8017190:	6a3b      	ldr	r3, [r7, #32]
 8017192:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8017196:	2b00      	cmp	r3, #0
 8017198:	d006      	beq.n	80171a8 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 801719a:	6a3b      	ldr	r3, [r7, #32]
 801719c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	d101      	bne.n	80171a8 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80171a4:	2301      	movs	r3, #1
 80171a6:	e3f4      	b.n	8017992 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80171a8:	6a3b      	ldr	r3, [r7, #32]
 80171aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80171ae:	2b00      	cmp	r3, #0
 80171b0:	d01b      	beq.n	80171ea <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80171b2:	4b7b      	ldr	r3, [pc, #492]	; (80173a0 <HAL_RCC_OscConfig+0x7b8>)
 80171b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80171b8:	4a79      	ldr	r2, [pc, #484]	; (80173a0 <HAL_RCC_OscConfig+0x7b8>)
 80171ba:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80171be:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 80171c2:	f7fa fa8f 	bl	80116e4 <HAL_GetTick>
 80171c6:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80171c8:	e008      	b.n	80171dc <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80171ca:	f7fa fa8b 	bl	80116e4 <HAL_GetTick>
 80171ce:	4602      	mov	r2, r0
 80171d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171d2:	1ad3      	subs	r3, r2, r3
 80171d4:	2b05      	cmp	r3, #5
 80171d6:	d901      	bls.n	80171dc <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80171d8:	2303      	movs	r3, #3
 80171da:	e3da      	b.n	8017992 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80171dc:	4b70      	ldr	r3, [pc, #448]	; (80173a0 <HAL_RCC_OscConfig+0x7b8>)
 80171de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80171e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80171e6:	2b00      	cmp	r3, #0
 80171e8:	d1ef      	bne.n	80171ca <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80171ea:	4b6d      	ldr	r3, [pc, #436]	; (80173a0 <HAL_RCC_OscConfig+0x7b8>)
 80171ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80171f0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	699b      	ldr	r3, [r3, #24]
 80171f8:	4969      	ldr	r1, [pc, #420]	; (80173a0 <HAL_RCC_OscConfig+0x7b8>)
 80171fa:	4313      	orrs	r3, r2
 80171fc:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8017200:	4b67      	ldr	r3, [pc, #412]	; (80173a0 <HAL_RCC_OscConfig+0x7b8>)
 8017202:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8017206:	4a66      	ldr	r2, [pc, #408]	; (80173a0 <HAL_RCC_OscConfig+0x7b8>)
 8017208:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801720c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8017210:	f7fa fa68 	bl	80116e4 <HAL_GetTick>
 8017214:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8017216:	e008      	b.n	801722a <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8017218:	f7fa fa64 	bl	80116e4 <HAL_GetTick>
 801721c:	4602      	mov	r2, r0
 801721e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017220:	1ad3      	subs	r3, r2, r3
 8017222:	2b05      	cmp	r3, #5
 8017224:	d901      	bls.n	801722a <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8017226:	2303      	movs	r3, #3
 8017228:	e3b3      	b.n	8017992 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 801722a:	4b5d      	ldr	r3, [pc, #372]	; (80173a0 <HAL_RCC_OscConfig+0x7b8>)
 801722c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8017230:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8017234:	2b00      	cmp	r3, #0
 8017236:	d0ef      	beq.n	8017218 <HAL_RCC_OscConfig+0x630>
 8017238:	e01b      	b.n	8017272 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 801723a:	4b59      	ldr	r3, [pc, #356]	; (80173a0 <HAL_RCC_OscConfig+0x7b8>)
 801723c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8017240:	4a57      	ldr	r2, [pc, #348]	; (80173a0 <HAL_RCC_OscConfig+0x7b8>)
 8017242:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8017246:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 801724a:	f7fa fa4b 	bl	80116e4 <HAL_GetTick>
 801724e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8017250:	e008      	b.n	8017264 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8017252:	f7fa fa47 	bl	80116e4 <HAL_GetTick>
 8017256:	4602      	mov	r2, r0
 8017258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801725a:	1ad3      	subs	r3, r2, r3
 801725c:	2b05      	cmp	r3, #5
 801725e:	d901      	bls.n	8017264 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8017260:	2303      	movs	r3, #3
 8017262:	e396      	b.n	8017992 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8017264:	4b4e      	ldr	r3, [pc, #312]	; (80173a0 <HAL_RCC_OscConfig+0x7b8>)
 8017266:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801726a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801726e:	2b00      	cmp	r3, #0
 8017270:	d1ef      	bne.n	8017252 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8017272:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8017276:	2b01      	cmp	r3, #1
 8017278:	d107      	bne.n	801728a <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801727a:	4b49      	ldr	r3, [pc, #292]	; (80173a0 <HAL_RCC_OscConfig+0x7b8>)
 801727c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8017280:	4a47      	ldr	r2, [pc, #284]	; (80173a0 <HAL_RCC_OscConfig+0x7b8>)
 8017282:	f023 0304 	bic.w	r3, r3, #4
 8017286:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	681b      	ldr	r3, [r3, #0]
 801728e:	f003 0304 	and.w	r3, r3, #4
 8017292:	2b00      	cmp	r3, #0
 8017294:	f000 8111 	beq.w	80174ba <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8017298:	2300      	movs	r3, #0
 801729a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 801729e:	4b40      	ldr	r3, [pc, #256]	; (80173a0 <HAL_RCC_OscConfig+0x7b8>)
 80172a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80172a4:	f003 0304 	and.w	r3, r3, #4
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	d111      	bne.n	80172d0 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80172ac:	4b3c      	ldr	r3, [pc, #240]	; (80173a0 <HAL_RCC_OscConfig+0x7b8>)
 80172ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80172b2:	4a3b      	ldr	r2, [pc, #236]	; (80173a0 <HAL_RCC_OscConfig+0x7b8>)
 80172b4:	f043 0304 	orr.w	r3, r3, #4
 80172b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80172bc:	4b38      	ldr	r3, [pc, #224]	; (80173a0 <HAL_RCC_OscConfig+0x7b8>)
 80172be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80172c2:	f003 0304 	and.w	r3, r3, #4
 80172c6:	613b      	str	r3, [r7, #16]
 80172c8:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80172ca:	2301      	movs	r3, #1
 80172cc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80172d0:	4b34      	ldr	r3, [pc, #208]	; (80173a4 <HAL_RCC_OscConfig+0x7bc>)
 80172d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80172d4:	f003 0301 	and.w	r3, r3, #1
 80172d8:	2b00      	cmp	r3, #0
 80172da:	d118      	bne.n	801730e <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80172dc:	4b31      	ldr	r3, [pc, #196]	; (80173a4 <HAL_RCC_OscConfig+0x7bc>)
 80172de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80172e0:	4a30      	ldr	r2, [pc, #192]	; (80173a4 <HAL_RCC_OscConfig+0x7bc>)
 80172e2:	f043 0301 	orr.w	r3, r3, #1
 80172e6:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80172e8:	f7fa f9fc 	bl	80116e4 <HAL_GetTick>
 80172ec:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80172ee:	e008      	b.n	8017302 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80172f0:	f7fa f9f8 	bl	80116e4 <HAL_GetTick>
 80172f4:	4602      	mov	r2, r0
 80172f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172f8:	1ad3      	subs	r3, r2, r3
 80172fa:	2b02      	cmp	r3, #2
 80172fc:	d901      	bls.n	8017302 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80172fe:	2303      	movs	r3, #3
 8017300:	e347      	b.n	8017992 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8017302:	4b28      	ldr	r3, [pc, #160]	; (80173a4 <HAL_RCC_OscConfig+0x7bc>)
 8017304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017306:	f003 0301 	and.w	r3, r3, #1
 801730a:	2b00      	cmp	r3, #0
 801730c:	d0f0      	beq.n	80172f0 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 801730e:	687b      	ldr	r3, [r7, #4]
 8017310:	689b      	ldr	r3, [r3, #8]
 8017312:	f003 0301 	and.w	r3, r3, #1
 8017316:	2b00      	cmp	r3, #0
 8017318:	d01f      	beq.n	801735a <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	689b      	ldr	r3, [r3, #8]
 801731e:	f003 0304 	and.w	r3, r3, #4
 8017322:	2b00      	cmp	r3, #0
 8017324:	d010      	beq.n	8017348 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8017326:	4b1e      	ldr	r3, [pc, #120]	; (80173a0 <HAL_RCC_OscConfig+0x7b8>)
 8017328:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801732c:	4a1c      	ldr	r2, [pc, #112]	; (80173a0 <HAL_RCC_OscConfig+0x7b8>)
 801732e:	f043 0304 	orr.w	r3, r3, #4
 8017332:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8017336:	4b1a      	ldr	r3, [pc, #104]	; (80173a0 <HAL_RCC_OscConfig+0x7b8>)
 8017338:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801733c:	4a18      	ldr	r2, [pc, #96]	; (80173a0 <HAL_RCC_OscConfig+0x7b8>)
 801733e:	f043 0301 	orr.w	r3, r3, #1
 8017342:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8017346:	e018      	b.n	801737a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8017348:	4b15      	ldr	r3, [pc, #84]	; (80173a0 <HAL_RCC_OscConfig+0x7b8>)
 801734a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801734e:	4a14      	ldr	r2, [pc, #80]	; (80173a0 <HAL_RCC_OscConfig+0x7b8>)
 8017350:	f043 0301 	orr.w	r3, r3, #1
 8017354:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8017358:	e00f      	b.n	801737a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 801735a:	4b11      	ldr	r3, [pc, #68]	; (80173a0 <HAL_RCC_OscConfig+0x7b8>)
 801735c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8017360:	4a0f      	ldr	r2, [pc, #60]	; (80173a0 <HAL_RCC_OscConfig+0x7b8>)
 8017362:	f023 0301 	bic.w	r3, r3, #1
 8017366:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 801736a:	4b0d      	ldr	r3, [pc, #52]	; (80173a0 <HAL_RCC_OscConfig+0x7b8>)
 801736c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8017370:	4a0b      	ldr	r2, [pc, #44]	; (80173a0 <HAL_RCC_OscConfig+0x7b8>)
 8017372:	f023 0304 	bic.w	r3, r3, #4
 8017376:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	689b      	ldr	r3, [r3, #8]
 801737e:	2b00      	cmp	r3, #0
 8017380:	d057      	beq.n	8017432 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8017382:	f7fa f9af 	bl	80116e4 <HAL_GetTick>
 8017386:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8017388:	e00e      	b.n	80173a8 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801738a:	f7fa f9ab 	bl	80116e4 <HAL_GetTick>
 801738e:	4602      	mov	r2, r0
 8017390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017392:	1ad3      	subs	r3, r2, r3
 8017394:	f241 3288 	movw	r2, #5000	; 0x1388
 8017398:	4293      	cmp	r3, r2
 801739a:	d905      	bls.n	80173a8 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 801739c:	2303      	movs	r3, #3
 801739e:	e2f8      	b.n	8017992 <HAL_RCC_OscConfig+0xdaa>
 80173a0:	46020c00 	.word	0x46020c00
 80173a4:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80173a8:	4b9c      	ldr	r3, [pc, #624]	; (801761c <HAL_RCC_OscConfig+0xa34>)
 80173aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80173ae:	f003 0302 	and.w	r3, r3, #2
 80173b2:	2b00      	cmp	r3, #0
 80173b4:	d0e9      	beq.n	801738a <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80173b6:	687b      	ldr	r3, [r7, #4]
 80173b8:	689b      	ldr	r3, [r3, #8]
 80173ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80173be:	2b00      	cmp	r3, #0
 80173c0:	d01b      	beq.n	80173fa <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80173c2:	4b96      	ldr	r3, [pc, #600]	; (801761c <HAL_RCC_OscConfig+0xa34>)
 80173c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80173c8:	4a94      	ldr	r2, [pc, #592]	; (801761c <HAL_RCC_OscConfig+0xa34>)
 80173ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80173ce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80173d2:	e00a      	b.n	80173ea <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80173d4:	f7fa f986 	bl	80116e4 <HAL_GetTick>
 80173d8:	4602      	mov	r2, r0
 80173da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173dc:	1ad3      	subs	r3, r2, r3
 80173de:	f241 3288 	movw	r2, #5000	; 0x1388
 80173e2:	4293      	cmp	r3, r2
 80173e4:	d901      	bls.n	80173ea <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80173e6:	2303      	movs	r3, #3
 80173e8:	e2d3      	b.n	8017992 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80173ea:	4b8c      	ldr	r3, [pc, #560]	; (801761c <HAL_RCC_OscConfig+0xa34>)
 80173ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80173f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80173f4:	2b00      	cmp	r3, #0
 80173f6:	d0ed      	beq.n	80173d4 <HAL_RCC_OscConfig+0x7ec>
 80173f8:	e053      	b.n	80174a2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80173fa:	4b88      	ldr	r3, [pc, #544]	; (801761c <HAL_RCC_OscConfig+0xa34>)
 80173fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8017400:	4a86      	ldr	r2, [pc, #536]	; (801761c <HAL_RCC_OscConfig+0xa34>)
 8017402:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8017406:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 801740a:	e00a      	b.n	8017422 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801740c:	f7fa f96a 	bl	80116e4 <HAL_GetTick>
 8017410:	4602      	mov	r2, r0
 8017412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017414:	1ad3      	subs	r3, r2, r3
 8017416:	f241 3288 	movw	r2, #5000	; 0x1388
 801741a:	4293      	cmp	r3, r2
 801741c:	d901      	bls.n	8017422 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 801741e:	2303      	movs	r3, #3
 8017420:	e2b7      	b.n	8017992 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8017422:	4b7e      	ldr	r3, [pc, #504]	; (801761c <HAL_RCC_OscConfig+0xa34>)
 8017424:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8017428:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801742c:	2b00      	cmp	r3, #0
 801742e:	d1ed      	bne.n	801740c <HAL_RCC_OscConfig+0x824>
 8017430:	e037      	b.n	80174a2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8017432:	f7fa f957 	bl	80116e4 <HAL_GetTick>
 8017436:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8017438:	e00a      	b.n	8017450 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801743a:	f7fa f953 	bl	80116e4 <HAL_GetTick>
 801743e:	4602      	mov	r2, r0
 8017440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017442:	1ad3      	subs	r3, r2, r3
 8017444:	f241 3288 	movw	r2, #5000	; 0x1388
 8017448:	4293      	cmp	r3, r2
 801744a:	d901      	bls.n	8017450 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 801744c:	2303      	movs	r3, #3
 801744e:	e2a0      	b.n	8017992 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8017450:	4b72      	ldr	r3, [pc, #456]	; (801761c <HAL_RCC_OscConfig+0xa34>)
 8017452:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8017456:	f003 0302 	and.w	r3, r3, #2
 801745a:	2b00      	cmp	r3, #0
 801745c:	d1ed      	bne.n	801743a <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 801745e:	4b6f      	ldr	r3, [pc, #444]	; (801761c <HAL_RCC_OscConfig+0xa34>)
 8017460:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8017464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017468:	2b00      	cmp	r3, #0
 801746a:	d01a      	beq.n	80174a2 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 801746c:	4b6b      	ldr	r3, [pc, #428]	; (801761c <HAL_RCC_OscConfig+0xa34>)
 801746e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8017472:	4a6a      	ldr	r2, [pc, #424]	; (801761c <HAL_RCC_OscConfig+0xa34>)
 8017474:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8017478:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 801747c:	e00a      	b.n	8017494 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801747e:	f7fa f931 	bl	80116e4 <HAL_GetTick>
 8017482:	4602      	mov	r2, r0
 8017484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017486:	1ad3      	subs	r3, r2, r3
 8017488:	f241 3288 	movw	r2, #5000	; 0x1388
 801748c:	4293      	cmp	r3, r2
 801748e:	d901      	bls.n	8017494 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8017490:	2303      	movs	r3, #3
 8017492:	e27e      	b.n	8017992 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8017494:	4b61      	ldr	r3, [pc, #388]	; (801761c <HAL_RCC_OscConfig+0xa34>)
 8017496:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801749a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801749e:	2b00      	cmp	r3, #0
 80174a0:	d1ed      	bne.n	801747e <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80174a2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80174a6:	2b01      	cmp	r3, #1
 80174a8:	d107      	bne.n	80174ba <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80174aa:	4b5c      	ldr	r3, [pc, #368]	; (801761c <HAL_RCC_OscConfig+0xa34>)
 80174ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80174b0:	4a5a      	ldr	r2, [pc, #360]	; (801761c <HAL_RCC_OscConfig+0xa34>)
 80174b2:	f023 0304 	bic.w	r3, r3, #4
 80174b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80174ba:	687b      	ldr	r3, [r7, #4]
 80174bc:	681b      	ldr	r3, [r3, #0]
 80174be:	f003 0320 	and.w	r3, r3, #32
 80174c2:	2b00      	cmp	r3, #0
 80174c4:	d036      	beq.n	8017534 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	d019      	beq.n	8017502 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80174ce:	4b53      	ldr	r3, [pc, #332]	; (801761c <HAL_RCC_OscConfig+0xa34>)
 80174d0:	681b      	ldr	r3, [r3, #0]
 80174d2:	4a52      	ldr	r2, [pc, #328]	; (801761c <HAL_RCC_OscConfig+0xa34>)
 80174d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80174d8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80174da:	f7fa f903 	bl	80116e4 <HAL_GetTick>
 80174de:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80174e0:	e008      	b.n	80174f4 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80174e2:	f7fa f8ff 	bl	80116e4 <HAL_GetTick>
 80174e6:	4602      	mov	r2, r0
 80174e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174ea:	1ad3      	subs	r3, r2, r3
 80174ec:	2b02      	cmp	r3, #2
 80174ee:	d901      	bls.n	80174f4 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80174f0:	2303      	movs	r3, #3
 80174f2:	e24e      	b.n	8017992 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80174f4:	4b49      	ldr	r3, [pc, #292]	; (801761c <HAL_RCC_OscConfig+0xa34>)
 80174f6:	681b      	ldr	r3, [r3, #0]
 80174f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	d0f0      	beq.n	80174e2 <HAL_RCC_OscConfig+0x8fa>
 8017500:	e018      	b.n	8017534 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8017502:	4b46      	ldr	r3, [pc, #280]	; (801761c <HAL_RCC_OscConfig+0xa34>)
 8017504:	681b      	ldr	r3, [r3, #0]
 8017506:	4a45      	ldr	r2, [pc, #276]	; (801761c <HAL_RCC_OscConfig+0xa34>)
 8017508:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801750c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 801750e:	f7fa f8e9 	bl	80116e4 <HAL_GetTick>
 8017512:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8017514:	e008      	b.n	8017528 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8017516:	f7fa f8e5 	bl	80116e4 <HAL_GetTick>
 801751a:	4602      	mov	r2, r0
 801751c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801751e:	1ad3      	subs	r3, r2, r3
 8017520:	2b02      	cmp	r3, #2
 8017522:	d901      	bls.n	8017528 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8017524:	2303      	movs	r3, #3
 8017526:	e234      	b.n	8017992 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8017528:	4b3c      	ldr	r3, [pc, #240]	; (801761c <HAL_RCC_OscConfig+0xa34>)
 801752a:	681b      	ldr	r3, [r3, #0]
 801752c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8017530:	2b00      	cmp	r3, #0
 8017532:	d1f0      	bne.n	8017516 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	681b      	ldr	r3, [r3, #0]
 8017538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801753c:	2b00      	cmp	r3, #0
 801753e:	d036      	beq.n	80175ae <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8017540:	687b      	ldr	r3, [r7, #4]
 8017542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017544:	2b00      	cmp	r3, #0
 8017546:	d019      	beq.n	801757c <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8017548:	4b34      	ldr	r3, [pc, #208]	; (801761c <HAL_RCC_OscConfig+0xa34>)
 801754a:	681b      	ldr	r3, [r3, #0]
 801754c:	4a33      	ldr	r2, [pc, #204]	; (801761c <HAL_RCC_OscConfig+0xa34>)
 801754e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017552:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8017554:	f7fa f8c6 	bl	80116e4 <HAL_GetTick>
 8017558:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 801755a:	e008      	b.n	801756e <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 801755c:	f7fa f8c2 	bl	80116e4 <HAL_GetTick>
 8017560:	4602      	mov	r2, r0
 8017562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017564:	1ad3      	subs	r3, r2, r3
 8017566:	2b02      	cmp	r3, #2
 8017568:	d901      	bls.n	801756e <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 801756a:	2303      	movs	r3, #3
 801756c:	e211      	b.n	8017992 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 801756e:	4b2b      	ldr	r3, [pc, #172]	; (801761c <HAL_RCC_OscConfig+0xa34>)
 8017570:	681b      	ldr	r3, [r3, #0]
 8017572:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8017576:	2b00      	cmp	r3, #0
 8017578:	d0f0      	beq.n	801755c <HAL_RCC_OscConfig+0x974>
 801757a:	e018      	b.n	80175ae <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 801757c:	4b27      	ldr	r3, [pc, #156]	; (801761c <HAL_RCC_OscConfig+0xa34>)
 801757e:	681b      	ldr	r3, [r3, #0]
 8017580:	4a26      	ldr	r2, [pc, #152]	; (801761c <HAL_RCC_OscConfig+0xa34>)
 8017582:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8017586:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8017588:	f7fa f8ac 	bl	80116e4 <HAL_GetTick>
 801758c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 801758e:	e008      	b.n	80175a2 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8017590:	f7fa f8a8 	bl	80116e4 <HAL_GetTick>
 8017594:	4602      	mov	r2, r0
 8017596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017598:	1ad3      	subs	r3, r2, r3
 801759a:	2b02      	cmp	r3, #2
 801759c:	d901      	bls.n	80175a2 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 801759e:	2303      	movs	r3, #3
 80175a0:	e1f7      	b.n	8017992 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80175a2:	4b1e      	ldr	r3, [pc, #120]	; (801761c <HAL_RCC_OscConfig+0xa34>)
 80175a4:	681b      	ldr	r3, [r3, #0]
 80175a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80175aa:	2b00      	cmp	r3, #0
 80175ac:	d1f0      	bne.n	8017590 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80175ae:	687b      	ldr	r3, [r7, #4]
 80175b0:	681b      	ldr	r3, [r3, #0]
 80175b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	d07f      	beq.n	80176ba <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80175be:	2b00      	cmp	r3, #0
 80175c0:	d062      	beq.n	8017688 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80175c2:	4b16      	ldr	r3, [pc, #88]	; (801761c <HAL_RCC_OscConfig+0xa34>)
 80175c4:	689b      	ldr	r3, [r3, #8]
 80175c6:	4a15      	ldr	r2, [pc, #84]	; (801761c <HAL_RCC_OscConfig+0xa34>)
 80175c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80175cc:	6093      	str	r3, [r2, #8]
 80175ce:	4b13      	ldr	r3, [pc, #76]	; (801761c <HAL_RCC_OscConfig+0xa34>)
 80175d0:	689b      	ldr	r3, [r3, #8]
 80175d2:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80175d6:	687b      	ldr	r3, [r7, #4]
 80175d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80175da:	4910      	ldr	r1, [pc, #64]	; (801761c <HAL_RCC_OscConfig+0xa34>)
 80175dc:	4313      	orrs	r3, r2
 80175de:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80175e0:	687b      	ldr	r3, [r7, #4]
 80175e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80175e4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80175e8:	d309      	bcc.n	80175fe <HAL_RCC_OscConfig+0xa16>
 80175ea:	4b0c      	ldr	r3, [pc, #48]	; (801761c <HAL_RCC_OscConfig+0xa34>)
 80175ec:	68db      	ldr	r3, [r3, #12]
 80175ee:	f023 021f 	bic.w	r2, r3, #31
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	6a1b      	ldr	r3, [r3, #32]
 80175f6:	4909      	ldr	r1, [pc, #36]	; (801761c <HAL_RCC_OscConfig+0xa34>)
 80175f8:	4313      	orrs	r3, r2
 80175fa:	60cb      	str	r3, [r1, #12]
 80175fc:	e02a      	b.n	8017654 <HAL_RCC_OscConfig+0xa6c>
 80175fe:	687b      	ldr	r3, [r7, #4]
 8017600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017602:	2b00      	cmp	r3, #0
 8017604:	da0c      	bge.n	8017620 <HAL_RCC_OscConfig+0xa38>
 8017606:	4b05      	ldr	r3, [pc, #20]	; (801761c <HAL_RCC_OscConfig+0xa34>)
 8017608:	68db      	ldr	r3, [r3, #12]
 801760a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 801760e:	687b      	ldr	r3, [r7, #4]
 8017610:	6a1b      	ldr	r3, [r3, #32]
 8017612:	015b      	lsls	r3, r3, #5
 8017614:	4901      	ldr	r1, [pc, #4]	; (801761c <HAL_RCC_OscConfig+0xa34>)
 8017616:	4313      	orrs	r3, r2
 8017618:	60cb      	str	r3, [r1, #12]
 801761a:	e01b      	b.n	8017654 <HAL_RCC_OscConfig+0xa6c>
 801761c:	46020c00 	.word	0x46020c00
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017628:	d30a      	bcc.n	8017640 <HAL_RCC_OscConfig+0xa58>
 801762a:	4ba1      	ldr	r3, [pc, #644]	; (80178b0 <HAL_RCC_OscConfig+0xcc8>)
 801762c:	68db      	ldr	r3, [r3, #12]
 801762e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	6a1b      	ldr	r3, [r3, #32]
 8017636:	029b      	lsls	r3, r3, #10
 8017638:	499d      	ldr	r1, [pc, #628]	; (80178b0 <HAL_RCC_OscConfig+0xcc8>)
 801763a:	4313      	orrs	r3, r2
 801763c:	60cb      	str	r3, [r1, #12]
 801763e:	e009      	b.n	8017654 <HAL_RCC_OscConfig+0xa6c>
 8017640:	4b9b      	ldr	r3, [pc, #620]	; (80178b0 <HAL_RCC_OscConfig+0xcc8>)
 8017642:	68db      	ldr	r3, [r3, #12]
 8017644:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8017648:	687b      	ldr	r3, [r7, #4]
 801764a:	6a1b      	ldr	r3, [r3, #32]
 801764c:	03db      	lsls	r3, r3, #15
 801764e:	4998      	ldr	r1, [pc, #608]	; (80178b0 <HAL_RCC_OscConfig+0xcc8>)
 8017650:	4313      	orrs	r3, r2
 8017652:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8017654:	4b96      	ldr	r3, [pc, #600]	; (80178b0 <HAL_RCC_OscConfig+0xcc8>)
 8017656:	681b      	ldr	r3, [r3, #0]
 8017658:	4a95      	ldr	r2, [pc, #596]	; (80178b0 <HAL_RCC_OscConfig+0xcc8>)
 801765a:	f043 0310 	orr.w	r3, r3, #16
 801765e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8017660:	f7fa f840 	bl	80116e4 <HAL_GetTick>
 8017664:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8017666:	e008      	b.n	801767a <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8017668:	f7fa f83c 	bl	80116e4 <HAL_GetTick>
 801766c:	4602      	mov	r2, r0
 801766e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017670:	1ad3      	subs	r3, r2, r3
 8017672:	2b02      	cmp	r3, #2
 8017674:	d901      	bls.n	801767a <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8017676:	2303      	movs	r3, #3
 8017678:	e18b      	b.n	8017992 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 801767a:	4b8d      	ldr	r3, [pc, #564]	; (80178b0 <HAL_RCC_OscConfig+0xcc8>)
 801767c:	681b      	ldr	r3, [r3, #0]
 801767e:	f003 0320 	and.w	r3, r3, #32
 8017682:	2b00      	cmp	r3, #0
 8017684:	d0f0      	beq.n	8017668 <HAL_RCC_OscConfig+0xa80>
 8017686:	e018      	b.n	80176ba <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8017688:	4b89      	ldr	r3, [pc, #548]	; (80178b0 <HAL_RCC_OscConfig+0xcc8>)
 801768a:	681b      	ldr	r3, [r3, #0]
 801768c:	4a88      	ldr	r2, [pc, #544]	; (80178b0 <HAL_RCC_OscConfig+0xcc8>)
 801768e:	f023 0310 	bic.w	r3, r3, #16
 8017692:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8017694:	f7fa f826 	bl	80116e4 <HAL_GetTick>
 8017698:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 801769a:	e008      	b.n	80176ae <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 801769c:	f7fa f822 	bl	80116e4 <HAL_GetTick>
 80176a0:	4602      	mov	r2, r0
 80176a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176a4:	1ad3      	subs	r3, r2, r3
 80176a6:	2b02      	cmp	r3, #2
 80176a8:	d901      	bls.n	80176ae <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80176aa:	2303      	movs	r3, #3
 80176ac:	e171      	b.n	8017992 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80176ae:	4b80      	ldr	r3, [pc, #512]	; (80178b0 <HAL_RCC_OscConfig+0xcc8>)
 80176b0:	681b      	ldr	r3, [r3, #0]
 80176b2:	f003 0320 	and.w	r3, r3, #32
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	d1f0      	bne.n	801769c <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80176be:	2b00      	cmp	r3, #0
 80176c0:	f000 8166 	beq.w	8017990 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80176c4:	2300      	movs	r3, #0
 80176c6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80176ca:	4b79      	ldr	r3, [pc, #484]	; (80178b0 <HAL_RCC_OscConfig+0xcc8>)
 80176cc:	69db      	ldr	r3, [r3, #28]
 80176ce:	f003 030c 	and.w	r3, r3, #12
 80176d2:	2b0c      	cmp	r3, #12
 80176d4:	f000 80f2 	beq.w	80178bc <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80176dc:	2b02      	cmp	r3, #2
 80176de:	f040 80c5 	bne.w	801786c <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80176e2:	4b73      	ldr	r3, [pc, #460]	; (80178b0 <HAL_RCC_OscConfig+0xcc8>)
 80176e4:	681b      	ldr	r3, [r3, #0]
 80176e6:	4a72      	ldr	r2, [pc, #456]	; (80178b0 <HAL_RCC_OscConfig+0xcc8>)
 80176e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80176ec:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80176ee:	f7f9 fff9 	bl	80116e4 <HAL_GetTick>
 80176f2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80176f4:	e008      	b.n	8017708 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80176f6:	f7f9 fff5 	bl	80116e4 <HAL_GetTick>
 80176fa:	4602      	mov	r2, r0
 80176fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176fe:	1ad3      	subs	r3, r2, r3
 8017700:	2b02      	cmp	r3, #2
 8017702:	d901      	bls.n	8017708 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8017704:	2303      	movs	r3, #3
 8017706:	e144      	b.n	8017992 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8017708:	4b69      	ldr	r3, [pc, #420]	; (80178b0 <HAL_RCC_OscConfig+0xcc8>)
 801770a:	681b      	ldr	r3, [r3, #0]
 801770c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017710:	2b00      	cmp	r3, #0
 8017712:	d1f0      	bne.n	80176f6 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8017714:	4b66      	ldr	r3, [pc, #408]	; (80178b0 <HAL_RCC_OscConfig+0xcc8>)
 8017716:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801771a:	f003 0304 	and.w	r3, r3, #4
 801771e:	2b00      	cmp	r3, #0
 8017720:	d111      	bne.n	8017746 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8017722:	4b63      	ldr	r3, [pc, #396]	; (80178b0 <HAL_RCC_OscConfig+0xcc8>)
 8017724:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8017728:	4a61      	ldr	r2, [pc, #388]	; (80178b0 <HAL_RCC_OscConfig+0xcc8>)
 801772a:	f043 0304 	orr.w	r3, r3, #4
 801772e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8017732:	4b5f      	ldr	r3, [pc, #380]	; (80178b0 <HAL_RCC_OscConfig+0xcc8>)
 8017734:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8017738:	f003 0304 	and.w	r3, r3, #4
 801773c:	60fb      	str	r3, [r7, #12]
 801773e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8017740:	2301      	movs	r3, #1
 8017742:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8017746:	4b5b      	ldr	r3, [pc, #364]	; (80178b4 <HAL_RCC_OscConfig+0xccc>)
 8017748:	68db      	ldr	r3, [r3, #12]
 801774a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801774e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8017752:	d102      	bne.n	801775a <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8017754:	2301      	movs	r3, #1
 8017756:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 801775a:	4b56      	ldr	r3, [pc, #344]	; (80178b4 <HAL_RCC_OscConfig+0xccc>)
 801775c:	68db      	ldr	r3, [r3, #12]
 801775e:	4a55      	ldr	r2, [pc, #340]	; (80178b4 <HAL_RCC_OscConfig+0xccc>)
 8017760:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8017764:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8017766:	4b52      	ldr	r3, [pc, #328]	; (80178b0 <HAL_RCC_OscConfig+0xcc8>)
 8017768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801776a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801776e:	f023 0303 	bic.w	r3, r3, #3
 8017772:	687a      	ldr	r2, [r7, #4]
 8017774:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8017776:	687a      	ldr	r2, [r7, #4]
 8017778:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801777a:	3a01      	subs	r2, #1
 801777c:	0212      	lsls	r2, r2, #8
 801777e:	4311      	orrs	r1, r2
 8017780:	687a      	ldr	r2, [r7, #4]
 8017782:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8017784:	430a      	orrs	r2, r1
 8017786:	494a      	ldr	r1, [pc, #296]	; (80178b0 <HAL_RCC_OscConfig+0xcc8>)
 8017788:	4313      	orrs	r3, r2
 801778a:	628b      	str	r3, [r1, #40]	; 0x28
 801778c:	4b48      	ldr	r3, [pc, #288]	; (80178b0 <HAL_RCC_OscConfig+0xcc8>)
 801778e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017790:	4b49      	ldr	r3, [pc, #292]	; (80178b8 <HAL_RCC_OscConfig+0xcd0>)
 8017792:	4013      	ands	r3, r2
 8017794:	687a      	ldr	r2, [r7, #4]
 8017796:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8017798:	3a01      	subs	r2, #1
 801779a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 801779e:	687a      	ldr	r2, [r7, #4]
 80177a0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80177a2:	3a01      	subs	r2, #1
 80177a4:	0252      	lsls	r2, r2, #9
 80177a6:	b292      	uxth	r2, r2
 80177a8:	4311      	orrs	r1, r2
 80177aa:	687a      	ldr	r2, [r7, #4]
 80177ac:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80177ae:	3a01      	subs	r2, #1
 80177b0:	0412      	lsls	r2, r2, #16
 80177b2:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80177b6:	4311      	orrs	r1, r2
 80177b8:	687a      	ldr	r2, [r7, #4]
 80177ba:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80177bc:	3a01      	subs	r2, #1
 80177be:	0612      	lsls	r2, r2, #24
 80177c0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80177c4:	430a      	orrs	r2, r1
 80177c6:	493a      	ldr	r1, [pc, #232]	; (80178b0 <HAL_RCC_OscConfig+0xcc8>)
 80177c8:	4313      	orrs	r3, r2
 80177ca:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80177cc:	4b38      	ldr	r3, [pc, #224]	; (80178b0 <HAL_RCC_OscConfig+0xcc8>)
 80177ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80177d0:	4a37      	ldr	r2, [pc, #220]	; (80178b0 <HAL_RCC_OscConfig+0xcc8>)
 80177d2:	f023 0310 	bic.w	r3, r3, #16
 80177d6:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80177dc:	4a34      	ldr	r2, [pc, #208]	; (80178b0 <HAL_RCC_OscConfig+0xcc8>)
 80177de:	00db      	lsls	r3, r3, #3
 80177e0:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80177e2:	4b33      	ldr	r3, [pc, #204]	; (80178b0 <HAL_RCC_OscConfig+0xcc8>)
 80177e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80177e6:	4a32      	ldr	r2, [pc, #200]	; (80178b0 <HAL_RCC_OscConfig+0xcc8>)
 80177e8:	f043 0310 	orr.w	r3, r3, #16
 80177ec:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80177ee:	4b30      	ldr	r3, [pc, #192]	; (80178b0 <HAL_RCC_OscConfig+0xcc8>)
 80177f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80177f2:	f023 020c 	bic.w	r2, r3, #12
 80177f6:	687b      	ldr	r3, [r7, #4]
 80177f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80177fa:	492d      	ldr	r1, [pc, #180]	; (80178b0 <HAL_RCC_OscConfig+0xcc8>)
 80177fc:	4313      	orrs	r3, r2
 80177fe:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8017800:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017804:	2b01      	cmp	r3, #1
 8017806:	d105      	bne.n	8017814 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8017808:	4b2a      	ldr	r3, [pc, #168]	; (80178b4 <HAL_RCC_OscConfig+0xccc>)
 801780a:	68db      	ldr	r3, [r3, #12]
 801780c:	4a29      	ldr	r2, [pc, #164]	; (80178b4 <HAL_RCC_OscConfig+0xccc>)
 801780e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8017812:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8017814:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8017818:	2b01      	cmp	r3, #1
 801781a:	d107      	bne.n	801782c <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 801781c:	4b24      	ldr	r3, [pc, #144]	; (80178b0 <HAL_RCC_OscConfig+0xcc8>)
 801781e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8017822:	4a23      	ldr	r2, [pc, #140]	; (80178b0 <HAL_RCC_OscConfig+0xcc8>)
 8017824:	f023 0304 	bic.w	r3, r3, #4
 8017828:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 801782c:	4b20      	ldr	r3, [pc, #128]	; (80178b0 <HAL_RCC_OscConfig+0xcc8>)
 801782e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017830:	4a1f      	ldr	r2, [pc, #124]	; (80178b0 <HAL_RCC_OscConfig+0xcc8>)
 8017832:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8017836:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8017838:	4b1d      	ldr	r3, [pc, #116]	; (80178b0 <HAL_RCC_OscConfig+0xcc8>)
 801783a:	681b      	ldr	r3, [r3, #0]
 801783c:	4a1c      	ldr	r2, [pc, #112]	; (80178b0 <HAL_RCC_OscConfig+0xcc8>)
 801783e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8017842:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8017844:	f7f9 ff4e 	bl	80116e4 <HAL_GetTick>
 8017848:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 801784a:	e008      	b.n	801785e <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801784c:	f7f9 ff4a 	bl	80116e4 <HAL_GetTick>
 8017850:	4602      	mov	r2, r0
 8017852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017854:	1ad3      	subs	r3, r2, r3
 8017856:	2b02      	cmp	r3, #2
 8017858:	d901      	bls.n	801785e <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 801785a:	2303      	movs	r3, #3
 801785c:	e099      	b.n	8017992 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 801785e:	4b14      	ldr	r3, [pc, #80]	; (80178b0 <HAL_RCC_OscConfig+0xcc8>)
 8017860:	681b      	ldr	r3, [r3, #0]
 8017862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017866:	2b00      	cmp	r3, #0
 8017868:	d0f0      	beq.n	801784c <HAL_RCC_OscConfig+0xc64>
 801786a:	e091      	b.n	8017990 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 801786c:	4b10      	ldr	r3, [pc, #64]	; (80178b0 <HAL_RCC_OscConfig+0xcc8>)
 801786e:	681b      	ldr	r3, [r3, #0]
 8017870:	4a0f      	ldr	r2, [pc, #60]	; (80178b0 <HAL_RCC_OscConfig+0xcc8>)
 8017872:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8017876:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8017878:	f7f9 ff34 	bl	80116e4 <HAL_GetTick>
 801787c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 801787e:	e008      	b.n	8017892 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8017880:	f7f9 ff30 	bl	80116e4 <HAL_GetTick>
 8017884:	4602      	mov	r2, r0
 8017886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017888:	1ad3      	subs	r3, r2, r3
 801788a:	2b02      	cmp	r3, #2
 801788c:	d901      	bls.n	8017892 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 801788e:	2303      	movs	r3, #3
 8017890:	e07f      	b.n	8017992 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8017892:	4b07      	ldr	r3, [pc, #28]	; (80178b0 <HAL_RCC_OscConfig+0xcc8>)
 8017894:	681b      	ldr	r3, [r3, #0]
 8017896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801789a:	2b00      	cmp	r3, #0
 801789c:	d1f0      	bne.n	8017880 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 801789e:	4b04      	ldr	r3, [pc, #16]	; (80178b0 <HAL_RCC_OscConfig+0xcc8>)
 80178a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80178a2:	4a03      	ldr	r2, [pc, #12]	; (80178b0 <HAL_RCC_OscConfig+0xcc8>)
 80178a4:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80178a8:	f023 0303 	bic.w	r3, r3, #3
 80178ac:	6293      	str	r3, [r2, #40]	; 0x28
 80178ae:	e06f      	b.n	8017990 <HAL_RCC_OscConfig+0xda8>
 80178b0:	46020c00 	.word	0x46020c00
 80178b4:	46020800 	.word	0x46020800
 80178b8:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80178bc:	4b37      	ldr	r3, [pc, #220]	; (801799c <HAL_RCC_OscConfig+0xdb4>)
 80178be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80178c0:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80178c2:	4b36      	ldr	r3, [pc, #216]	; (801799c <HAL_RCC_OscConfig+0xdb4>)
 80178c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80178c6:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80178c8:	687b      	ldr	r3, [r7, #4]
 80178ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80178cc:	2b01      	cmp	r3, #1
 80178ce:	d039      	beq.n	8017944 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80178d0:	69fb      	ldr	r3, [r7, #28]
 80178d2:	f003 0203 	and.w	r2, r3, #3
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80178da:	429a      	cmp	r2, r3
 80178dc:	d132      	bne.n	8017944 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80178de:	69fb      	ldr	r3, [r7, #28]
 80178e0:	0a1b      	lsrs	r3, r3, #8
 80178e2:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80178ea:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80178ec:	429a      	cmp	r2, r3
 80178ee:	d129      	bne.n	8017944 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80178f0:	69fb      	ldr	r3, [r7, #28]
 80178f2:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 80178f6:	687b      	ldr	r3, [r7, #4]
 80178f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80178fa:	429a      	cmp	r2, r3
 80178fc:	d122      	bne.n	8017944 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80178fe:	69bb      	ldr	r3, [r7, #24]
 8017900:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017908:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 801790a:	429a      	cmp	r2, r3
 801790c:	d11a      	bne.n	8017944 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 801790e:	69bb      	ldr	r3, [r7, #24]
 8017910:	0a5b      	lsrs	r3, r3, #9
 8017912:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801791a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801791c:	429a      	cmp	r2, r3
 801791e:	d111      	bne.n	8017944 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8017920:	69bb      	ldr	r3, [r7, #24]
 8017922:	0c1b      	lsrs	r3, r3, #16
 8017924:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8017928:	687b      	ldr	r3, [r7, #4]
 801792a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801792c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801792e:	429a      	cmp	r2, r3
 8017930:	d108      	bne.n	8017944 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8017932:	69bb      	ldr	r3, [r7, #24]
 8017934:	0e1b      	lsrs	r3, r3, #24
 8017936:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 801793a:	687b      	ldr	r3, [r7, #4]
 801793c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801793e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8017940:	429a      	cmp	r2, r3
 8017942:	d001      	beq.n	8017948 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8017944:	2301      	movs	r3, #1
 8017946:	e024      	b.n	8017992 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8017948:	4b14      	ldr	r3, [pc, #80]	; (801799c <HAL_RCC_OscConfig+0xdb4>)
 801794a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801794c:	08db      	lsrs	r3, r3, #3
 801794e:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8017952:	687b      	ldr	r3, [r7, #4]
 8017954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8017956:	429a      	cmp	r2, r3
 8017958:	d01a      	beq.n	8017990 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 801795a:	4b10      	ldr	r3, [pc, #64]	; (801799c <HAL_RCC_OscConfig+0xdb4>)
 801795c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801795e:	4a0f      	ldr	r2, [pc, #60]	; (801799c <HAL_RCC_OscConfig+0xdb4>)
 8017960:	f023 0310 	bic.w	r3, r3, #16
 8017964:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017966:	f7f9 febd 	bl	80116e4 <HAL_GetTick>
 801796a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 801796c:	bf00      	nop
 801796e:	f7f9 feb9 	bl	80116e4 <HAL_GetTick>
 8017972:	4602      	mov	r2, r0
 8017974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017976:	4293      	cmp	r3, r2
 8017978:	d0f9      	beq.n	801796e <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 801797a:	687b      	ldr	r3, [r7, #4]
 801797c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801797e:	4a07      	ldr	r2, [pc, #28]	; (801799c <HAL_RCC_OscConfig+0xdb4>)
 8017980:	00db      	lsls	r3, r3, #3
 8017982:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8017984:	4b05      	ldr	r3, [pc, #20]	; (801799c <HAL_RCC_OscConfig+0xdb4>)
 8017986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017988:	4a04      	ldr	r2, [pc, #16]	; (801799c <HAL_RCC_OscConfig+0xdb4>)
 801798a:	f043 0310 	orr.w	r3, r3, #16
 801798e:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8017990:	2300      	movs	r3, #0
}
 8017992:	4618      	mov	r0, r3
 8017994:	3738      	adds	r7, #56	; 0x38
 8017996:	46bd      	mov	sp, r7
 8017998:	bd80      	pop	{r7, pc}
 801799a:	bf00      	nop
 801799c:	46020c00 	.word	0x46020c00

080179a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80179a0:	b580      	push	{r7, lr}
 80179a2:	b086      	sub	sp, #24
 80179a4:	af00      	add	r7, sp, #0
 80179a6:	6078      	str	r0, [r7, #4]
 80179a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80179aa:	687b      	ldr	r3, [r7, #4]
 80179ac:	2b00      	cmp	r3, #0
 80179ae:	d101      	bne.n	80179b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80179b0:	2301      	movs	r3, #1
 80179b2:	e1d9      	b.n	8017d68 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80179b4:	4b9b      	ldr	r3, [pc, #620]	; (8017c24 <HAL_RCC_ClockConfig+0x284>)
 80179b6:	681b      	ldr	r3, [r3, #0]
 80179b8:	f003 030f 	and.w	r3, r3, #15
 80179bc:	683a      	ldr	r2, [r7, #0]
 80179be:	429a      	cmp	r2, r3
 80179c0:	d910      	bls.n	80179e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80179c2:	4b98      	ldr	r3, [pc, #608]	; (8017c24 <HAL_RCC_ClockConfig+0x284>)
 80179c4:	681b      	ldr	r3, [r3, #0]
 80179c6:	f023 020f 	bic.w	r2, r3, #15
 80179ca:	4996      	ldr	r1, [pc, #600]	; (8017c24 <HAL_RCC_ClockConfig+0x284>)
 80179cc:	683b      	ldr	r3, [r7, #0]
 80179ce:	4313      	orrs	r3, r2
 80179d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80179d2:	4b94      	ldr	r3, [pc, #592]	; (8017c24 <HAL_RCC_ClockConfig+0x284>)
 80179d4:	681b      	ldr	r3, [r3, #0]
 80179d6:	f003 030f 	and.w	r3, r3, #15
 80179da:	683a      	ldr	r2, [r7, #0]
 80179dc:	429a      	cmp	r2, r3
 80179de:	d001      	beq.n	80179e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80179e0:	2301      	movs	r3, #1
 80179e2:	e1c1      	b.n	8017d68 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	681b      	ldr	r3, [r3, #0]
 80179e8:	f003 0310 	and.w	r3, r3, #16
 80179ec:	2b00      	cmp	r3, #0
 80179ee:	d010      	beq.n	8017a12 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	695a      	ldr	r2, [r3, #20]
 80179f4:	4b8c      	ldr	r3, [pc, #560]	; (8017c28 <HAL_RCC_ClockConfig+0x288>)
 80179f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80179f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80179fc:	429a      	cmp	r2, r3
 80179fe:	d908      	bls.n	8017a12 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8017a00:	4b89      	ldr	r3, [pc, #548]	; (8017c28 <HAL_RCC_ClockConfig+0x288>)
 8017a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a04:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	695b      	ldr	r3, [r3, #20]
 8017a0c:	4986      	ldr	r1, [pc, #536]	; (8017c28 <HAL_RCC_ClockConfig+0x288>)
 8017a0e:	4313      	orrs	r3, r2
 8017a10:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	681b      	ldr	r3, [r3, #0]
 8017a16:	f003 0308 	and.w	r3, r3, #8
 8017a1a:	2b00      	cmp	r3, #0
 8017a1c:	d012      	beq.n	8017a44 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8017a1e:	687b      	ldr	r3, [r7, #4]
 8017a20:	691a      	ldr	r2, [r3, #16]
 8017a22:	4b81      	ldr	r3, [pc, #516]	; (8017c28 <HAL_RCC_ClockConfig+0x288>)
 8017a24:	6a1b      	ldr	r3, [r3, #32]
 8017a26:	091b      	lsrs	r3, r3, #4
 8017a28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8017a2c:	429a      	cmp	r2, r3
 8017a2e:	d909      	bls.n	8017a44 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8017a30:	4b7d      	ldr	r3, [pc, #500]	; (8017c28 <HAL_RCC_ClockConfig+0x288>)
 8017a32:	6a1b      	ldr	r3, [r3, #32]
 8017a34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	691b      	ldr	r3, [r3, #16]
 8017a3c:	011b      	lsls	r3, r3, #4
 8017a3e:	497a      	ldr	r1, [pc, #488]	; (8017c28 <HAL_RCC_ClockConfig+0x288>)
 8017a40:	4313      	orrs	r3, r2
 8017a42:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8017a44:	687b      	ldr	r3, [r7, #4]
 8017a46:	681b      	ldr	r3, [r3, #0]
 8017a48:	f003 0304 	and.w	r3, r3, #4
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	d010      	beq.n	8017a72 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8017a50:	687b      	ldr	r3, [r7, #4]
 8017a52:	68da      	ldr	r2, [r3, #12]
 8017a54:	4b74      	ldr	r3, [pc, #464]	; (8017c28 <HAL_RCC_ClockConfig+0x288>)
 8017a56:	6a1b      	ldr	r3, [r3, #32]
 8017a58:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8017a5c:	429a      	cmp	r2, r3
 8017a5e:	d908      	bls.n	8017a72 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8017a60:	4b71      	ldr	r3, [pc, #452]	; (8017c28 <HAL_RCC_ClockConfig+0x288>)
 8017a62:	6a1b      	ldr	r3, [r3, #32]
 8017a64:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	68db      	ldr	r3, [r3, #12]
 8017a6c:	496e      	ldr	r1, [pc, #440]	; (8017c28 <HAL_RCC_ClockConfig+0x288>)
 8017a6e:	4313      	orrs	r3, r2
 8017a70:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8017a72:	687b      	ldr	r3, [r7, #4]
 8017a74:	681b      	ldr	r3, [r3, #0]
 8017a76:	f003 0302 	and.w	r3, r3, #2
 8017a7a:	2b00      	cmp	r3, #0
 8017a7c:	d010      	beq.n	8017aa0 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	689a      	ldr	r2, [r3, #8]
 8017a82:	4b69      	ldr	r3, [pc, #420]	; (8017c28 <HAL_RCC_ClockConfig+0x288>)
 8017a84:	6a1b      	ldr	r3, [r3, #32]
 8017a86:	f003 030f 	and.w	r3, r3, #15
 8017a8a:	429a      	cmp	r2, r3
 8017a8c:	d908      	bls.n	8017aa0 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8017a8e:	4b66      	ldr	r3, [pc, #408]	; (8017c28 <HAL_RCC_ClockConfig+0x288>)
 8017a90:	6a1b      	ldr	r3, [r3, #32]
 8017a92:	f023 020f 	bic.w	r2, r3, #15
 8017a96:	687b      	ldr	r3, [r7, #4]
 8017a98:	689b      	ldr	r3, [r3, #8]
 8017a9a:	4963      	ldr	r1, [pc, #396]	; (8017c28 <HAL_RCC_ClockConfig+0x288>)
 8017a9c:	4313      	orrs	r3, r2
 8017a9e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8017aa0:	687b      	ldr	r3, [r7, #4]
 8017aa2:	681b      	ldr	r3, [r3, #0]
 8017aa4:	f003 0301 	and.w	r3, r3, #1
 8017aa8:	2b00      	cmp	r3, #0
 8017aaa:	f000 80d2 	beq.w	8017c52 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8017aae:	2300      	movs	r3, #0
 8017ab0:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8017ab2:	687b      	ldr	r3, [r7, #4]
 8017ab4:	685b      	ldr	r3, [r3, #4]
 8017ab6:	2b03      	cmp	r3, #3
 8017ab8:	d143      	bne.n	8017b42 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8017aba:	4b5b      	ldr	r3, [pc, #364]	; (8017c28 <HAL_RCC_ClockConfig+0x288>)
 8017abc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8017ac0:	f003 0304 	and.w	r3, r3, #4
 8017ac4:	2b00      	cmp	r3, #0
 8017ac6:	d110      	bne.n	8017aea <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8017ac8:	4b57      	ldr	r3, [pc, #348]	; (8017c28 <HAL_RCC_ClockConfig+0x288>)
 8017aca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8017ace:	4a56      	ldr	r2, [pc, #344]	; (8017c28 <HAL_RCC_ClockConfig+0x288>)
 8017ad0:	f043 0304 	orr.w	r3, r3, #4
 8017ad4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8017ad8:	4b53      	ldr	r3, [pc, #332]	; (8017c28 <HAL_RCC_ClockConfig+0x288>)
 8017ada:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8017ade:	f003 0304 	and.w	r3, r3, #4
 8017ae2:	60bb      	str	r3, [r7, #8]
 8017ae4:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8017ae6:	2301      	movs	r3, #1
 8017ae8:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8017aea:	f7f9 fdfb 	bl	80116e4 <HAL_GetTick>
 8017aee:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8017af0:	4b4e      	ldr	r3, [pc, #312]	; (8017c2c <HAL_RCC_ClockConfig+0x28c>)
 8017af2:	68db      	ldr	r3, [r3, #12]
 8017af4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8017af8:	2b00      	cmp	r3, #0
 8017afa:	d00f      	beq.n	8017b1c <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8017afc:	e008      	b.n	8017b10 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8017afe:	f7f9 fdf1 	bl	80116e4 <HAL_GetTick>
 8017b02:	4602      	mov	r2, r0
 8017b04:	693b      	ldr	r3, [r7, #16]
 8017b06:	1ad3      	subs	r3, r2, r3
 8017b08:	2b02      	cmp	r3, #2
 8017b0a:	d901      	bls.n	8017b10 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8017b0c:	2303      	movs	r3, #3
 8017b0e:	e12b      	b.n	8017d68 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8017b10:	4b46      	ldr	r3, [pc, #280]	; (8017c2c <HAL_RCC_ClockConfig+0x28c>)
 8017b12:	68db      	ldr	r3, [r3, #12]
 8017b14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017b18:	2b00      	cmp	r3, #0
 8017b1a:	d0f0      	beq.n	8017afe <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8017b1c:	7dfb      	ldrb	r3, [r7, #23]
 8017b1e:	2b01      	cmp	r3, #1
 8017b20:	d107      	bne.n	8017b32 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8017b22:	4b41      	ldr	r3, [pc, #260]	; (8017c28 <HAL_RCC_ClockConfig+0x288>)
 8017b24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8017b28:	4a3f      	ldr	r2, [pc, #252]	; (8017c28 <HAL_RCC_ClockConfig+0x288>)
 8017b2a:	f023 0304 	bic.w	r3, r3, #4
 8017b2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8017b32:	4b3d      	ldr	r3, [pc, #244]	; (8017c28 <HAL_RCC_ClockConfig+0x288>)
 8017b34:	681b      	ldr	r3, [r3, #0]
 8017b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	d121      	bne.n	8017b82 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8017b3e:	2301      	movs	r3, #1
 8017b40:	e112      	b.n	8017d68 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8017b42:	687b      	ldr	r3, [r7, #4]
 8017b44:	685b      	ldr	r3, [r3, #4]
 8017b46:	2b02      	cmp	r3, #2
 8017b48:	d107      	bne.n	8017b5a <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8017b4a:	4b37      	ldr	r3, [pc, #220]	; (8017c28 <HAL_RCC_ClockConfig+0x288>)
 8017b4c:	681b      	ldr	r3, [r3, #0]
 8017b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017b52:	2b00      	cmp	r3, #0
 8017b54:	d115      	bne.n	8017b82 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8017b56:	2301      	movs	r3, #1
 8017b58:	e106      	b.n	8017d68 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8017b5a:	687b      	ldr	r3, [r7, #4]
 8017b5c:	685b      	ldr	r3, [r3, #4]
 8017b5e:	2b00      	cmp	r3, #0
 8017b60:	d107      	bne.n	8017b72 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8017b62:	4b31      	ldr	r3, [pc, #196]	; (8017c28 <HAL_RCC_ClockConfig+0x288>)
 8017b64:	681b      	ldr	r3, [r3, #0]
 8017b66:	f003 0304 	and.w	r3, r3, #4
 8017b6a:	2b00      	cmp	r3, #0
 8017b6c:	d109      	bne.n	8017b82 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8017b6e:	2301      	movs	r3, #1
 8017b70:	e0fa      	b.n	8017d68 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8017b72:	4b2d      	ldr	r3, [pc, #180]	; (8017c28 <HAL_RCC_ClockConfig+0x288>)
 8017b74:	681b      	ldr	r3, [r3, #0]
 8017b76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8017b7a:	2b00      	cmp	r3, #0
 8017b7c:	d101      	bne.n	8017b82 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8017b7e:	2301      	movs	r3, #1
 8017b80:	e0f2      	b.n	8017d68 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8017b82:	4b29      	ldr	r3, [pc, #164]	; (8017c28 <HAL_RCC_ClockConfig+0x288>)
 8017b84:	69db      	ldr	r3, [r3, #28]
 8017b86:	f023 0203 	bic.w	r2, r3, #3
 8017b8a:	687b      	ldr	r3, [r7, #4]
 8017b8c:	685b      	ldr	r3, [r3, #4]
 8017b8e:	4926      	ldr	r1, [pc, #152]	; (8017c28 <HAL_RCC_ClockConfig+0x288>)
 8017b90:	4313      	orrs	r3, r2
 8017b92:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8017b94:	f7f9 fda6 	bl	80116e4 <HAL_GetTick>
 8017b98:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8017b9a:	687b      	ldr	r3, [r7, #4]
 8017b9c:	685b      	ldr	r3, [r3, #4]
 8017b9e:	2b03      	cmp	r3, #3
 8017ba0:	d112      	bne.n	8017bc8 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8017ba2:	e00a      	b.n	8017bba <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8017ba4:	f7f9 fd9e 	bl	80116e4 <HAL_GetTick>
 8017ba8:	4602      	mov	r2, r0
 8017baa:	693b      	ldr	r3, [r7, #16]
 8017bac:	1ad3      	subs	r3, r2, r3
 8017bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8017bb2:	4293      	cmp	r3, r2
 8017bb4:	d901      	bls.n	8017bba <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8017bb6:	2303      	movs	r3, #3
 8017bb8:	e0d6      	b.n	8017d68 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8017bba:	4b1b      	ldr	r3, [pc, #108]	; (8017c28 <HAL_RCC_ClockConfig+0x288>)
 8017bbc:	69db      	ldr	r3, [r3, #28]
 8017bbe:	f003 030c 	and.w	r3, r3, #12
 8017bc2:	2b0c      	cmp	r3, #12
 8017bc4:	d1ee      	bne.n	8017ba4 <HAL_RCC_ClockConfig+0x204>
 8017bc6:	e044      	b.n	8017c52 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8017bc8:	687b      	ldr	r3, [r7, #4]
 8017bca:	685b      	ldr	r3, [r3, #4]
 8017bcc:	2b02      	cmp	r3, #2
 8017bce:	d112      	bne.n	8017bf6 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8017bd0:	e00a      	b.n	8017be8 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8017bd2:	f7f9 fd87 	bl	80116e4 <HAL_GetTick>
 8017bd6:	4602      	mov	r2, r0
 8017bd8:	693b      	ldr	r3, [r7, #16]
 8017bda:	1ad3      	subs	r3, r2, r3
 8017bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8017be0:	4293      	cmp	r3, r2
 8017be2:	d901      	bls.n	8017be8 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8017be4:	2303      	movs	r3, #3
 8017be6:	e0bf      	b.n	8017d68 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8017be8:	4b0f      	ldr	r3, [pc, #60]	; (8017c28 <HAL_RCC_ClockConfig+0x288>)
 8017bea:	69db      	ldr	r3, [r3, #28]
 8017bec:	f003 030c 	and.w	r3, r3, #12
 8017bf0:	2b08      	cmp	r3, #8
 8017bf2:	d1ee      	bne.n	8017bd2 <HAL_RCC_ClockConfig+0x232>
 8017bf4:	e02d      	b.n	8017c52 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	685b      	ldr	r3, [r3, #4]
 8017bfa:	2b00      	cmp	r3, #0
 8017bfc:	d123      	bne.n	8017c46 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8017bfe:	e00a      	b.n	8017c16 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8017c00:	f7f9 fd70 	bl	80116e4 <HAL_GetTick>
 8017c04:	4602      	mov	r2, r0
 8017c06:	693b      	ldr	r3, [r7, #16]
 8017c08:	1ad3      	subs	r3, r2, r3
 8017c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8017c0e:	4293      	cmp	r3, r2
 8017c10:	d901      	bls.n	8017c16 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8017c12:	2303      	movs	r3, #3
 8017c14:	e0a8      	b.n	8017d68 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8017c16:	4b04      	ldr	r3, [pc, #16]	; (8017c28 <HAL_RCC_ClockConfig+0x288>)
 8017c18:	69db      	ldr	r3, [r3, #28]
 8017c1a:	f003 030c 	and.w	r3, r3, #12
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	d1ee      	bne.n	8017c00 <HAL_RCC_ClockConfig+0x260>
 8017c22:	e016      	b.n	8017c52 <HAL_RCC_ClockConfig+0x2b2>
 8017c24:	40022000 	.word	0x40022000
 8017c28:	46020c00 	.word	0x46020c00
 8017c2c:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8017c30:	f7f9 fd58 	bl	80116e4 <HAL_GetTick>
 8017c34:	4602      	mov	r2, r0
 8017c36:	693b      	ldr	r3, [r7, #16]
 8017c38:	1ad3      	subs	r3, r2, r3
 8017c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8017c3e:	4293      	cmp	r3, r2
 8017c40:	d901      	bls.n	8017c46 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8017c42:	2303      	movs	r3, #3
 8017c44:	e090      	b.n	8017d68 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8017c46:	4b4a      	ldr	r3, [pc, #296]	; (8017d70 <HAL_RCC_ClockConfig+0x3d0>)
 8017c48:	69db      	ldr	r3, [r3, #28]
 8017c4a:	f003 030c 	and.w	r3, r3, #12
 8017c4e:	2b04      	cmp	r3, #4
 8017c50:	d1ee      	bne.n	8017c30 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	681b      	ldr	r3, [r3, #0]
 8017c56:	f003 0302 	and.w	r3, r3, #2
 8017c5a:	2b00      	cmp	r3, #0
 8017c5c:	d010      	beq.n	8017c80 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8017c5e:	687b      	ldr	r3, [r7, #4]
 8017c60:	689a      	ldr	r2, [r3, #8]
 8017c62:	4b43      	ldr	r3, [pc, #268]	; (8017d70 <HAL_RCC_ClockConfig+0x3d0>)
 8017c64:	6a1b      	ldr	r3, [r3, #32]
 8017c66:	f003 030f 	and.w	r3, r3, #15
 8017c6a:	429a      	cmp	r2, r3
 8017c6c:	d208      	bcs.n	8017c80 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8017c6e:	4b40      	ldr	r3, [pc, #256]	; (8017d70 <HAL_RCC_ClockConfig+0x3d0>)
 8017c70:	6a1b      	ldr	r3, [r3, #32]
 8017c72:	f023 020f 	bic.w	r2, r3, #15
 8017c76:	687b      	ldr	r3, [r7, #4]
 8017c78:	689b      	ldr	r3, [r3, #8]
 8017c7a:	493d      	ldr	r1, [pc, #244]	; (8017d70 <HAL_RCC_ClockConfig+0x3d0>)
 8017c7c:	4313      	orrs	r3, r2
 8017c7e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8017c80:	4b3c      	ldr	r3, [pc, #240]	; (8017d74 <HAL_RCC_ClockConfig+0x3d4>)
 8017c82:	681b      	ldr	r3, [r3, #0]
 8017c84:	f003 030f 	and.w	r3, r3, #15
 8017c88:	683a      	ldr	r2, [r7, #0]
 8017c8a:	429a      	cmp	r2, r3
 8017c8c:	d210      	bcs.n	8017cb0 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8017c8e:	4b39      	ldr	r3, [pc, #228]	; (8017d74 <HAL_RCC_ClockConfig+0x3d4>)
 8017c90:	681b      	ldr	r3, [r3, #0]
 8017c92:	f023 020f 	bic.w	r2, r3, #15
 8017c96:	4937      	ldr	r1, [pc, #220]	; (8017d74 <HAL_RCC_ClockConfig+0x3d4>)
 8017c98:	683b      	ldr	r3, [r7, #0]
 8017c9a:	4313      	orrs	r3, r2
 8017c9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8017c9e:	4b35      	ldr	r3, [pc, #212]	; (8017d74 <HAL_RCC_ClockConfig+0x3d4>)
 8017ca0:	681b      	ldr	r3, [r3, #0]
 8017ca2:	f003 030f 	and.w	r3, r3, #15
 8017ca6:	683a      	ldr	r2, [r7, #0]
 8017ca8:	429a      	cmp	r2, r3
 8017caa:	d001      	beq.n	8017cb0 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8017cac:	2301      	movs	r3, #1
 8017cae:	e05b      	b.n	8017d68 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8017cb0:	687b      	ldr	r3, [r7, #4]
 8017cb2:	681b      	ldr	r3, [r3, #0]
 8017cb4:	f003 0304 	and.w	r3, r3, #4
 8017cb8:	2b00      	cmp	r3, #0
 8017cba:	d010      	beq.n	8017cde <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	68da      	ldr	r2, [r3, #12]
 8017cc0:	4b2b      	ldr	r3, [pc, #172]	; (8017d70 <HAL_RCC_ClockConfig+0x3d0>)
 8017cc2:	6a1b      	ldr	r3, [r3, #32]
 8017cc4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8017cc8:	429a      	cmp	r2, r3
 8017cca:	d208      	bcs.n	8017cde <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8017ccc:	4b28      	ldr	r3, [pc, #160]	; (8017d70 <HAL_RCC_ClockConfig+0x3d0>)
 8017cce:	6a1b      	ldr	r3, [r3, #32]
 8017cd0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8017cd4:	687b      	ldr	r3, [r7, #4]
 8017cd6:	68db      	ldr	r3, [r3, #12]
 8017cd8:	4925      	ldr	r1, [pc, #148]	; (8017d70 <HAL_RCC_ClockConfig+0x3d0>)
 8017cda:	4313      	orrs	r3, r2
 8017cdc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8017cde:	687b      	ldr	r3, [r7, #4]
 8017ce0:	681b      	ldr	r3, [r3, #0]
 8017ce2:	f003 0308 	and.w	r3, r3, #8
 8017ce6:	2b00      	cmp	r3, #0
 8017ce8:	d012      	beq.n	8017d10 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8017cea:	687b      	ldr	r3, [r7, #4]
 8017cec:	691a      	ldr	r2, [r3, #16]
 8017cee:	4b20      	ldr	r3, [pc, #128]	; (8017d70 <HAL_RCC_ClockConfig+0x3d0>)
 8017cf0:	6a1b      	ldr	r3, [r3, #32]
 8017cf2:	091b      	lsrs	r3, r3, #4
 8017cf4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8017cf8:	429a      	cmp	r2, r3
 8017cfa:	d209      	bcs.n	8017d10 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8017cfc:	4b1c      	ldr	r3, [pc, #112]	; (8017d70 <HAL_RCC_ClockConfig+0x3d0>)
 8017cfe:	6a1b      	ldr	r3, [r3, #32]
 8017d00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	691b      	ldr	r3, [r3, #16]
 8017d08:	011b      	lsls	r3, r3, #4
 8017d0a:	4919      	ldr	r1, [pc, #100]	; (8017d70 <HAL_RCC_ClockConfig+0x3d0>)
 8017d0c:	4313      	orrs	r3, r2
 8017d0e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	681b      	ldr	r3, [r3, #0]
 8017d14:	f003 0310 	and.w	r3, r3, #16
 8017d18:	2b00      	cmp	r3, #0
 8017d1a:	d010      	beq.n	8017d3e <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8017d1c:	687b      	ldr	r3, [r7, #4]
 8017d1e:	695a      	ldr	r2, [r3, #20]
 8017d20:	4b13      	ldr	r3, [pc, #76]	; (8017d70 <HAL_RCC_ClockConfig+0x3d0>)
 8017d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d24:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8017d28:	429a      	cmp	r2, r3
 8017d2a:	d208      	bcs.n	8017d3e <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8017d2c:	4b10      	ldr	r3, [pc, #64]	; (8017d70 <HAL_RCC_ClockConfig+0x3d0>)
 8017d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d30:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8017d34:	687b      	ldr	r3, [r7, #4]
 8017d36:	695b      	ldr	r3, [r3, #20]
 8017d38:	490d      	ldr	r1, [pc, #52]	; (8017d70 <HAL_RCC_ClockConfig+0x3d0>)
 8017d3a:	4313      	orrs	r3, r2
 8017d3c:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8017d3e:	f000 f821 	bl	8017d84 <HAL_RCC_GetSysClockFreq>
 8017d42:	4602      	mov	r2, r0
 8017d44:	4b0a      	ldr	r3, [pc, #40]	; (8017d70 <HAL_RCC_ClockConfig+0x3d0>)
 8017d46:	6a1b      	ldr	r3, [r3, #32]
 8017d48:	f003 030f 	and.w	r3, r3, #15
 8017d4c:	490a      	ldr	r1, [pc, #40]	; (8017d78 <HAL_RCC_ClockConfig+0x3d8>)
 8017d4e:	5ccb      	ldrb	r3, [r1, r3]
 8017d50:	fa22 f303 	lsr.w	r3, r2, r3
 8017d54:	4a09      	ldr	r2, [pc, #36]	; (8017d7c <HAL_RCC_ClockConfig+0x3dc>)
 8017d56:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8017d58:	4b09      	ldr	r3, [pc, #36]	; (8017d80 <HAL_RCC_ClockConfig+0x3e0>)
 8017d5a:	681b      	ldr	r3, [r3, #0]
 8017d5c:	4618      	mov	r0, r3
 8017d5e:	f7f9 fc77 	bl	8011650 <HAL_InitTick>
 8017d62:	4603      	mov	r3, r0
 8017d64:	73fb      	strb	r3, [r7, #15]

  return status;
 8017d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8017d68:	4618      	mov	r0, r3
 8017d6a:	3718      	adds	r7, #24
 8017d6c:	46bd      	mov	sp, r7
 8017d6e:	bd80      	pop	{r7, pc}
 8017d70:	46020c00 	.word	0x46020c00
 8017d74:	40022000 	.word	0x40022000
 8017d78:	08038374 	.word	0x08038374
 8017d7c:	20000200 	.word	0x20000200
 8017d80:	20000204 	.word	0x20000204

08017d84 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8017d84:	b480      	push	{r7}
 8017d86:	b08b      	sub	sp, #44	; 0x2c
 8017d88:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8017d8a:	2300      	movs	r3, #0
 8017d8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8017d8e:	2300      	movs	r3, #0
 8017d90:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8017d92:	4b78      	ldr	r3, [pc, #480]	; (8017f74 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8017d94:	69db      	ldr	r3, [r3, #28]
 8017d96:	f003 030c 	and.w	r3, r3, #12
 8017d9a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8017d9c:	4b75      	ldr	r3, [pc, #468]	; (8017f74 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8017d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017da0:	f003 0303 	and.w	r3, r3, #3
 8017da4:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8017da6:	69bb      	ldr	r3, [r7, #24]
 8017da8:	2b00      	cmp	r3, #0
 8017daa:	d005      	beq.n	8017db8 <HAL_RCC_GetSysClockFreq+0x34>
 8017dac:	69bb      	ldr	r3, [r7, #24]
 8017dae:	2b0c      	cmp	r3, #12
 8017db0:	d121      	bne.n	8017df6 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8017db2:	697b      	ldr	r3, [r7, #20]
 8017db4:	2b01      	cmp	r3, #1
 8017db6:	d11e      	bne.n	8017df6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8017db8:	4b6e      	ldr	r3, [pc, #440]	; (8017f74 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8017dba:	689b      	ldr	r3, [r3, #8]
 8017dbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	d107      	bne.n	8017dd4 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8017dc4:	4b6b      	ldr	r3, [pc, #428]	; (8017f74 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8017dc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8017dca:	0b1b      	lsrs	r3, r3, #12
 8017dcc:	f003 030f 	and.w	r3, r3, #15
 8017dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8017dd2:	e005      	b.n	8017de0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8017dd4:	4b67      	ldr	r3, [pc, #412]	; (8017f74 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8017dd6:	689b      	ldr	r3, [r3, #8]
 8017dd8:	0f1b      	lsrs	r3, r3, #28
 8017dda:	f003 030f 	and.w	r3, r3, #15
 8017dde:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8017de0:	4a65      	ldr	r2, [pc, #404]	; (8017f78 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8017de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017de8:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8017dea:	69bb      	ldr	r3, [r7, #24]
 8017dec:	2b00      	cmp	r3, #0
 8017dee:	d110      	bne.n	8017e12 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8017df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017df2:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8017df4:	e00d      	b.n	8017e12 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8017df6:	4b5f      	ldr	r3, [pc, #380]	; (8017f74 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8017df8:	69db      	ldr	r3, [r3, #28]
 8017dfa:	f003 030c 	and.w	r3, r3, #12
 8017dfe:	2b04      	cmp	r3, #4
 8017e00:	d102      	bne.n	8017e08 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8017e02:	4b5e      	ldr	r3, [pc, #376]	; (8017f7c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8017e04:	623b      	str	r3, [r7, #32]
 8017e06:	e004      	b.n	8017e12 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8017e08:	69bb      	ldr	r3, [r7, #24]
 8017e0a:	2b08      	cmp	r3, #8
 8017e0c:	d101      	bne.n	8017e12 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8017e0e:	4b5b      	ldr	r3, [pc, #364]	; (8017f7c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8017e10:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8017e12:	69bb      	ldr	r3, [r7, #24]
 8017e14:	2b0c      	cmp	r3, #12
 8017e16:	f040 80a5 	bne.w	8017f64 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8017e1a:	4b56      	ldr	r3, [pc, #344]	; (8017f74 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8017e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017e1e:	f003 0303 	and.w	r3, r3, #3
 8017e22:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8017e24:	4b53      	ldr	r3, [pc, #332]	; (8017f74 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8017e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017e28:	0a1b      	lsrs	r3, r3, #8
 8017e2a:	f003 030f 	and.w	r3, r3, #15
 8017e2e:	3301      	adds	r3, #1
 8017e30:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8017e32:	4b50      	ldr	r3, [pc, #320]	; (8017f74 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8017e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017e36:	091b      	lsrs	r3, r3, #4
 8017e38:	f003 0301 	and.w	r3, r3, #1
 8017e3c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8017e3e:	4b4d      	ldr	r3, [pc, #308]	; (8017f74 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8017e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017e42:	08db      	lsrs	r3, r3, #3
 8017e44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017e48:	68ba      	ldr	r2, [r7, #8]
 8017e4a:	fb02 f303 	mul.w	r3, r2, r3
 8017e4e:	ee07 3a90 	vmov	s15, r3
 8017e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017e56:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8017e5a:	693b      	ldr	r3, [r7, #16]
 8017e5c:	2b02      	cmp	r3, #2
 8017e5e:	d003      	beq.n	8017e68 <HAL_RCC_GetSysClockFreq+0xe4>
 8017e60:	693b      	ldr	r3, [r7, #16]
 8017e62:	2b03      	cmp	r3, #3
 8017e64:	d022      	beq.n	8017eac <HAL_RCC_GetSysClockFreq+0x128>
 8017e66:	e043      	b.n	8017ef0 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8017e68:	68fb      	ldr	r3, [r7, #12]
 8017e6a:	ee07 3a90 	vmov	s15, r3
 8017e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017e72:	eddf 6a43 	vldr	s13, [pc, #268]	; 8017f80 <HAL_RCC_GetSysClockFreq+0x1fc>
 8017e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8017e7a:	4b3e      	ldr	r3, [pc, #248]	; (8017f74 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8017e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017e82:	ee07 3a90 	vmov	s15, r3
 8017e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8017e8a:	ed97 6a01 	vldr	s12, [r7, #4]
 8017e8e:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8017f84 <HAL_RCC_GetSysClockFreq+0x200>
 8017e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8017e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8017e9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8017ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017ea6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8017eaa:	e046      	b.n	8017f3a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8017eac:	68fb      	ldr	r3, [r7, #12]
 8017eae:	ee07 3a90 	vmov	s15, r3
 8017eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017eb6:	eddf 6a32 	vldr	s13, [pc, #200]	; 8017f80 <HAL_RCC_GetSysClockFreq+0x1fc>
 8017eba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8017ebe:	4b2d      	ldr	r3, [pc, #180]	; (8017f74 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8017ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017ec6:	ee07 3a90 	vmov	s15, r3
 8017eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8017ece:	ed97 6a01 	vldr	s12, [r7, #4]
 8017ed2:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8017f84 <HAL_RCC_GetSysClockFreq+0x200>
 8017ed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8017eda:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8017ede:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017ee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8017ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017eea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8017eee:	e024      	b.n	8017f3a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8017ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ef2:	ee07 3a90 	vmov	s15, r3
 8017ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8017efa:	68fb      	ldr	r3, [r7, #12]
 8017efc:	ee07 3a90 	vmov	s15, r3
 8017f00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017f04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8017f08:	4b1a      	ldr	r3, [pc, #104]	; (8017f74 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8017f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017f10:	ee07 3a90 	vmov	s15, r3
 8017f14:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8017f18:	ed97 6a01 	vldr	s12, [r7, #4]
 8017f1c:	eddf 5a19 	vldr	s11, [pc, #100]	; 8017f84 <HAL_RCC_GetSysClockFreq+0x200>
 8017f20:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8017f24:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8017f28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017f2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8017f30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017f34:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8017f38:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8017f3a:	4b0e      	ldr	r3, [pc, #56]	; (8017f74 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8017f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017f3e:	0e1b      	lsrs	r3, r3, #24
 8017f40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017f44:	3301      	adds	r3, #1
 8017f46:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8017f48:	683b      	ldr	r3, [r7, #0]
 8017f4a:	ee07 3a90 	vmov	s15, r3
 8017f4e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8017f52:	edd7 6a07 	vldr	s13, [r7, #28]
 8017f56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017f5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8017f5e:	ee17 3a90 	vmov	r3, s15
 8017f62:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8017f64:	6a3b      	ldr	r3, [r7, #32]
}
 8017f66:	4618      	mov	r0, r3
 8017f68:	372c      	adds	r7, #44	; 0x2c
 8017f6a:	46bd      	mov	sp, r7
 8017f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f70:	4770      	bx	lr
 8017f72:	bf00      	nop
 8017f74:	46020c00 	.word	0x46020c00
 8017f78:	0803838c 	.word	0x0803838c
 8017f7c:	00f42400 	.word	0x00f42400
 8017f80:	4b742400 	.word	0x4b742400
 8017f84:	46000000 	.word	0x46000000

08017f88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8017f88:	b580      	push	{r7, lr}
 8017f8a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8017f8c:	f7ff fefa 	bl	8017d84 <HAL_RCC_GetSysClockFreq>
 8017f90:	4602      	mov	r2, r0
 8017f92:	4b07      	ldr	r3, [pc, #28]	; (8017fb0 <HAL_RCC_GetHCLKFreq+0x28>)
 8017f94:	6a1b      	ldr	r3, [r3, #32]
 8017f96:	f003 030f 	and.w	r3, r3, #15
 8017f9a:	4906      	ldr	r1, [pc, #24]	; (8017fb4 <HAL_RCC_GetHCLKFreq+0x2c>)
 8017f9c:	5ccb      	ldrb	r3, [r1, r3]
 8017f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8017fa2:	4a05      	ldr	r2, [pc, #20]	; (8017fb8 <HAL_RCC_GetHCLKFreq+0x30>)
 8017fa4:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8017fa6:	4b04      	ldr	r3, [pc, #16]	; (8017fb8 <HAL_RCC_GetHCLKFreq+0x30>)
 8017fa8:	681b      	ldr	r3, [r3, #0]
}
 8017faa:	4618      	mov	r0, r3
 8017fac:	bd80      	pop	{r7, pc}
 8017fae:	bf00      	nop
 8017fb0:	46020c00 	.word	0x46020c00
 8017fb4:	08038374 	.word	0x08038374
 8017fb8:	20000200 	.word	0x20000200

08017fbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8017fbc:	b580      	push	{r7, lr}
 8017fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8017fc0:	f7ff ffe2 	bl	8017f88 <HAL_RCC_GetHCLKFreq>
 8017fc4:	4602      	mov	r2, r0
 8017fc6:	4b05      	ldr	r3, [pc, #20]	; (8017fdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8017fc8:	6a1b      	ldr	r3, [r3, #32]
 8017fca:	091b      	lsrs	r3, r3, #4
 8017fcc:	f003 0307 	and.w	r3, r3, #7
 8017fd0:	4903      	ldr	r1, [pc, #12]	; (8017fe0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8017fd2:	5ccb      	ldrb	r3, [r1, r3]
 8017fd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8017fd8:	4618      	mov	r0, r3
 8017fda:	bd80      	pop	{r7, pc}
 8017fdc:	46020c00 	.word	0x46020c00
 8017fe0:	08038384 	.word	0x08038384

08017fe4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8017fe4:	b580      	push	{r7, lr}
 8017fe6:	b086      	sub	sp, #24
 8017fe8:	af00      	add	r7, sp, #0
 8017fea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8017fec:	4b3e      	ldr	r3, [pc, #248]	; (80180e8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8017fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8017ff2:	f003 0304 	and.w	r3, r3, #4
 8017ff6:	2b00      	cmp	r3, #0
 8017ff8:	d003      	beq.n	8018002 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8017ffa:	f7fe fd97 	bl	8016b2c <HAL_PWREx_GetVoltageRange>
 8017ffe:	6178      	str	r0, [r7, #20]
 8018000:	e019      	b.n	8018036 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8018002:	4b39      	ldr	r3, [pc, #228]	; (80180e8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8018004:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8018008:	4a37      	ldr	r2, [pc, #220]	; (80180e8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 801800a:	f043 0304 	orr.w	r3, r3, #4
 801800e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8018012:	4b35      	ldr	r3, [pc, #212]	; (80180e8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8018014:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8018018:	f003 0304 	and.w	r3, r3, #4
 801801c:	60fb      	str	r3, [r7, #12]
 801801e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8018020:	f7fe fd84 	bl	8016b2c <HAL_PWREx_GetVoltageRange>
 8018024:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8018026:	4b30      	ldr	r3, [pc, #192]	; (80180e8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8018028:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801802c:	4a2e      	ldr	r2, [pc, #184]	; (80180e8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 801802e:	f023 0304 	bic.w	r3, r3, #4
 8018032:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8018036:	697b      	ldr	r3, [r7, #20]
 8018038:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801803c:	d003      	beq.n	8018046 <RCC_SetFlashLatencyFromMSIRange+0x62>
 801803e:	697b      	ldr	r3, [r7, #20]
 8018040:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8018044:	d109      	bne.n	801805a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8018046:	687b      	ldr	r3, [r7, #4]
 8018048:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801804c:	d202      	bcs.n	8018054 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 801804e:	2301      	movs	r3, #1
 8018050:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8018052:	e033      	b.n	80180bc <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8018054:	2300      	movs	r3, #0
 8018056:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8018058:	e030      	b.n	80180bc <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 801805a:	687b      	ldr	r3, [r7, #4]
 801805c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8018060:	d208      	bcs.n	8018074 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8018062:	697b      	ldr	r3, [r7, #20]
 8018064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018068:	d102      	bne.n	8018070 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 801806a:	2303      	movs	r3, #3
 801806c:	613b      	str	r3, [r7, #16]
 801806e:	e025      	b.n	80180bc <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8018070:	2301      	movs	r3, #1
 8018072:	e035      	b.n	80180e0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8018074:	687b      	ldr	r3, [r7, #4]
 8018076:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801807a:	d90f      	bls.n	801809c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 801807c:	697b      	ldr	r3, [r7, #20]
 801807e:	2b00      	cmp	r3, #0
 8018080:	d109      	bne.n	8018096 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8018082:	687b      	ldr	r3, [r7, #4]
 8018084:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8018088:	d902      	bls.n	8018090 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 801808a:	2300      	movs	r3, #0
 801808c:	613b      	str	r3, [r7, #16]
 801808e:	e015      	b.n	80180bc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8018090:	2301      	movs	r3, #1
 8018092:	613b      	str	r3, [r7, #16]
 8018094:	e012      	b.n	80180bc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8018096:	2300      	movs	r3, #0
 8018098:	613b      	str	r3, [r7, #16]
 801809a:	e00f      	b.n	80180bc <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80180a2:	d109      	bne.n	80180b8 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80180a4:	697b      	ldr	r3, [r7, #20]
 80180a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80180aa:	d102      	bne.n	80180b2 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80180ac:	2301      	movs	r3, #1
 80180ae:	613b      	str	r3, [r7, #16]
 80180b0:	e004      	b.n	80180bc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80180b2:	2302      	movs	r3, #2
 80180b4:	613b      	str	r3, [r7, #16]
 80180b6:	e001      	b.n	80180bc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80180b8:	2301      	movs	r3, #1
 80180ba:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80180bc:	4b0b      	ldr	r3, [pc, #44]	; (80180ec <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80180be:	681b      	ldr	r3, [r3, #0]
 80180c0:	f023 020f 	bic.w	r2, r3, #15
 80180c4:	4909      	ldr	r1, [pc, #36]	; (80180ec <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80180c6:	693b      	ldr	r3, [r7, #16]
 80180c8:	4313      	orrs	r3, r2
 80180ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80180cc:	4b07      	ldr	r3, [pc, #28]	; (80180ec <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80180ce:	681b      	ldr	r3, [r3, #0]
 80180d0:	f003 030f 	and.w	r3, r3, #15
 80180d4:	693a      	ldr	r2, [r7, #16]
 80180d6:	429a      	cmp	r2, r3
 80180d8:	d001      	beq.n	80180de <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80180da:	2301      	movs	r3, #1
 80180dc:	e000      	b.n	80180e0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80180de:	2300      	movs	r3, #0
}
 80180e0:	4618      	mov	r0, r3
 80180e2:	3718      	adds	r7, #24
 80180e4:	46bd      	mov	sp, r7
 80180e6:	bd80      	pop	{r7, pc}
 80180e8:	46020c00 	.word	0x46020c00
 80180ec:	40022000 	.word	0x40022000

080180f0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80180f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80180f4:	b0ba      	sub	sp, #232	; 0xe8
 80180f6:	af00      	add	r7, sp, #0
 80180f8:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80180fc:	2300      	movs	r3, #0
 80180fe:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8018102:	2300      	movs	r3, #0
 8018104:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8018108:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801810c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018110:	f002 0401 	and.w	r4, r2, #1
 8018114:	2500      	movs	r5, #0
 8018116:	ea54 0305 	orrs.w	r3, r4, r5
 801811a:	d00b      	beq.n	8018134 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 801811c:	4bcb      	ldr	r3, [pc, #812]	; (801844c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 801811e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8018122:	f023 0103 	bic.w	r1, r3, #3
 8018126:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801812a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801812c:	4ac7      	ldr	r2, [pc, #796]	; (801844c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 801812e:	430b      	orrs	r3, r1
 8018130:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8018134:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018138:	e9d3 2300 	ldrd	r2, r3, [r3]
 801813c:	f002 0802 	and.w	r8, r2, #2
 8018140:	f04f 0900 	mov.w	r9, #0
 8018144:	ea58 0309 	orrs.w	r3, r8, r9
 8018148:	d00b      	beq.n	8018162 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 801814a:	4bc0      	ldr	r3, [pc, #768]	; (801844c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 801814c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8018150:	f023 010c 	bic.w	r1, r3, #12
 8018154:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801815a:	4abc      	ldr	r2, [pc, #752]	; (801844c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 801815c:	430b      	orrs	r3, r1
 801815e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8018162:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018166:	e9d3 2300 	ldrd	r2, r3, [r3]
 801816a:	f002 0a04 	and.w	sl, r2, #4
 801816e:	f04f 0b00 	mov.w	fp, #0
 8018172:	ea5a 030b 	orrs.w	r3, sl, fp
 8018176:	d00b      	beq.n	8018190 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8018178:	4bb4      	ldr	r3, [pc, #720]	; (801844c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 801817a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801817e:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8018182:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018188:	4ab0      	ldr	r2, [pc, #704]	; (801844c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 801818a:	430b      	orrs	r3, r1
 801818c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8018190:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018198:	f002 0308 	and.w	r3, r2, #8
 801819c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80181a0:	2300      	movs	r3, #0
 80181a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80181a6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80181aa:	460b      	mov	r3, r1
 80181ac:	4313      	orrs	r3, r2
 80181ae:	d00b      	beq.n	80181c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80181b0:	4ba6      	ldr	r3, [pc, #664]	; (801844c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80181b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80181b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80181ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80181be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80181c0:	4aa2      	ldr	r2, [pc, #648]	; (801844c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80181c2:	430b      	orrs	r3, r1
 80181c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80181c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80181cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181d0:	f002 0310 	and.w	r3, r2, #16
 80181d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80181d8:	2300      	movs	r3, #0
 80181da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80181de:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80181e2:	460b      	mov	r3, r1
 80181e4:	4313      	orrs	r3, r2
 80181e6:	d00b      	beq.n	8018200 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80181e8:	4b98      	ldr	r3, [pc, #608]	; (801844c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80181ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80181ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80181f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80181f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80181f8:	4a94      	ldr	r2, [pc, #592]	; (801844c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80181fa:	430b      	orrs	r3, r1
 80181fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8018200:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018208:	f002 0320 	and.w	r3, r2, #32
 801820c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8018210:	2300      	movs	r3, #0
 8018212:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8018216:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 801821a:	460b      	mov	r3, r1
 801821c:	4313      	orrs	r3, r2
 801821e:	d00b      	beq.n	8018238 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8018220:	4b8a      	ldr	r3, [pc, #552]	; (801844c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8018222:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8018226:	f023 0107 	bic.w	r1, r3, #7
 801822a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801822e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018230:	4a86      	ldr	r2, [pc, #536]	; (801844c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8018232:	430b      	orrs	r3, r1
 8018234:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8018238:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801823c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018240:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8018244:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8018248:	2300      	movs	r3, #0
 801824a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801824e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8018252:	460b      	mov	r3, r1
 8018254:	4313      	orrs	r3, r2
 8018256:	d00b      	beq.n	8018270 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8018258:	4b7c      	ldr	r3, [pc, #496]	; (801844c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 801825a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801825e:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8018262:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018266:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018268:	4a78      	ldr	r2, [pc, #480]	; (801844c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 801826a:	430b      	orrs	r3, r1
 801826c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8018270:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018278:	f002 0380 	and.w	r3, r2, #128	; 0x80
 801827c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8018280:	2300      	movs	r3, #0
 8018282:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8018286:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 801828a:	460b      	mov	r3, r1
 801828c:	4313      	orrs	r3, r2
 801828e:	d00b      	beq.n	80182a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8018290:	4b6e      	ldr	r3, [pc, #440]	; (801844c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8018292:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8018296:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801829a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801829e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80182a0:	4a6a      	ldr	r2, [pc, #424]	; (801844c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80182a2:	430b      	orrs	r3, r1
 80182a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80182a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80182ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182b0:	f402 7380 	and.w	r3, r2, #256	; 0x100
 80182b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80182b8:	2300      	movs	r3, #0
 80182ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80182be:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80182c2:	460b      	mov	r3, r1
 80182c4:	4313      	orrs	r3, r2
 80182c6:	d00b      	beq.n	80182e0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80182c8:	4b60      	ldr	r3, [pc, #384]	; (801844c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80182ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80182ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80182d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80182d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80182d8:	4a5c      	ldr	r2, [pc, #368]	; (801844c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80182da:	430b      	orrs	r3, r1
 80182dc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80182e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80182e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182e8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80182ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80182f0:	2300      	movs	r3, #0
 80182f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80182f6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80182fa:	460b      	mov	r3, r1
 80182fc:	4313      	orrs	r3, r2
 80182fe:	d00b      	beq.n	8018318 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8018300:	4b52      	ldr	r3, [pc, #328]	; (801844c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8018302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8018306:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 801830a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801830e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018310:	4a4e      	ldr	r2, [pc, #312]	; (801844c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8018312:	430b      	orrs	r3, r1
 8018314:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8018318:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801831c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018320:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8018324:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8018328:	2300      	movs	r3, #0
 801832a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801832e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8018332:	460b      	mov	r3, r1
 8018334:	4313      	orrs	r3, r2
 8018336:	d00b      	beq.n	8018350 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8018338:	4b44      	ldr	r3, [pc, #272]	; (801844c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 801833a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801833e:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8018342:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018346:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018348:	4a40      	ldr	r2, [pc, #256]	; (801844c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 801834a:	430b      	orrs	r3, r1
 801834c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8018350:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018358:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 801835c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8018360:	2300      	movs	r3, #0
 8018362:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8018366:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 801836a:	460b      	mov	r3, r1
 801836c:	4313      	orrs	r3, r2
 801836e:	d00b      	beq.n	8018388 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8018370:	4b36      	ldr	r3, [pc, #216]	; (801844c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8018372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8018376:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 801837a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801837e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018380:	4a32      	ldr	r2, [pc, #200]	; (801844c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8018382:	430b      	orrs	r3, r1
 8018384:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8018388:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801838c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018390:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8018394:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8018398:	2300      	movs	r3, #0
 801839a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801839e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80183a2:	460b      	mov	r3, r1
 80183a4:	4313      	orrs	r3, r2
 80183a6:	d00c      	beq.n	80183c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80183a8:	4b28      	ldr	r3, [pc, #160]	; (801844c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80183aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80183ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80183b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80183b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80183ba:	4a24      	ldr	r2, [pc, #144]	; (801844c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80183bc:	430b      	orrs	r3, r1
 80183be:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80183c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80183c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183ca:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80183ce:	67bb      	str	r3, [r7, #120]	; 0x78
 80183d0:	2300      	movs	r3, #0
 80183d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80183d4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80183d8:	460b      	mov	r3, r1
 80183da:	4313      	orrs	r3, r2
 80183dc:	d04f      	beq.n	801847e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80183de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80183e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80183e6:	2b80      	cmp	r3, #128	; 0x80
 80183e8:	d02d      	beq.n	8018446 <HAL_RCCEx_PeriphCLKConfig+0x356>
 80183ea:	2b80      	cmp	r3, #128	; 0x80
 80183ec:	d827      	bhi.n	801843e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80183ee:	2b60      	cmp	r3, #96	; 0x60
 80183f0:	d02e      	beq.n	8018450 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80183f2:	2b60      	cmp	r3, #96	; 0x60
 80183f4:	d823      	bhi.n	801843e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80183f6:	2b40      	cmp	r3, #64	; 0x40
 80183f8:	d006      	beq.n	8018408 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80183fa:	2b40      	cmp	r3, #64	; 0x40
 80183fc:	d81f      	bhi.n	801843e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80183fe:	2b00      	cmp	r3, #0
 8018400:	d009      	beq.n	8018416 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8018402:	2b20      	cmp	r3, #32
 8018404:	d011      	beq.n	801842a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8018406:	e01a      	b.n	801843e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8018408:	4b10      	ldr	r3, [pc, #64]	; (801844c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 801840a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801840c:	4a0f      	ldr	r2, [pc, #60]	; (801844c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 801840e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8018412:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8018414:	e01d      	b.n	8018452 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8018416:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801841a:	3308      	adds	r3, #8
 801841c:	4618      	mov	r0, r3
 801841e:	f000 fc27 	bl	8018c70 <RCCEx_PLL2_Config>
 8018422:	4603      	mov	r3, r0
 8018424:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8018428:	e013      	b.n	8018452 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 801842a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801842e:	332c      	adds	r3, #44	; 0x2c
 8018430:	4618      	mov	r0, r3
 8018432:	f000 fcb5 	bl	8018da0 <RCCEx_PLL3_Config>
 8018436:	4603      	mov	r3, r0
 8018438:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 801843c:	e009      	b.n	8018452 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801843e:	2301      	movs	r3, #1
 8018440:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8018444:	e005      	b.n	8018452 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8018446:	bf00      	nop
 8018448:	e003      	b.n	8018452 <HAL_RCCEx_PeriphCLKConfig+0x362>
 801844a:	bf00      	nop
 801844c:	46020c00 	.word	0x46020c00
        break;
 8018450:	bf00      	nop
    }

    if (ret == HAL_OK)
 8018452:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8018456:	2b00      	cmp	r3, #0
 8018458:	d10d      	bne.n	8018476 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 801845a:	4bb6      	ldr	r3, [pc, #728]	; (8018734 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 801845c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8018460:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8018464:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801846c:	4ab1      	ldr	r2, [pc, #708]	; (8018734 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 801846e:	430b      	orrs	r3, r1
 8018470:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8018474:	e003      	b.n	801847e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8018476:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 801847a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 801847e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018486:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 801848a:	673b      	str	r3, [r7, #112]	; 0x70
 801848c:	2300      	movs	r3, #0
 801848e:	677b      	str	r3, [r7, #116]	; 0x74
 8018490:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8018494:	460b      	mov	r3, r1
 8018496:	4313      	orrs	r3, r2
 8018498:	d053      	beq.n	8018542 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 801849a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801849e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80184a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80184a6:	d033      	beq.n	8018510 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80184a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80184ac:	d82c      	bhi.n	8018508 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80184ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80184b2:	d02f      	beq.n	8018514 <HAL_RCCEx_PeriphCLKConfig+0x424>
 80184b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80184b8:	d826      	bhi.n	8018508 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80184ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80184be:	d008      	beq.n	80184d2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 80184c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80184c4:	d820      	bhi.n	8018508 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80184c6:	2b00      	cmp	r3, #0
 80184c8:	d00a      	beq.n	80184e0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 80184ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80184ce:	d011      	beq.n	80184f4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80184d0:	e01a      	b.n	8018508 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80184d2:	4b98      	ldr	r3, [pc, #608]	; (8018734 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80184d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80184d6:	4a97      	ldr	r2, [pc, #604]	; (8018734 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80184d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80184dc:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80184de:	e01a      	b.n	8018516 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80184e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80184e4:	3308      	adds	r3, #8
 80184e6:	4618      	mov	r0, r3
 80184e8:	f000 fbc2 	bl	8018c70 <RCCEx_PLL2_Config>
 80184ec:	4603      	mov	r3, r0
 80184ee:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 80184f2:	e010      	b.n	8018516 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80184f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80184f8:	332c      	adds	r3, #44	; 0x2c
 80184fa:	4618      	mov	r0, r3
 80184fc:	f000 fc50 	bl	8018da0 <RCCEx_PLL3_Config>
 8018500:	4603      	mov	r3, r0
 8018502:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8018506:	e006      	b.n	8018516 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8018508:	2301      	movs	r3, #1
 801850a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 801850e:	e002      	b.n	8018516 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8018510:	bf00      	nop
 8018512:	e000      	b.n	8018516 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8018514:	bf00      	nop
    }

    if (ret == HAL_OK)
 8018516:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 801851a:	2b00      	cmp	r3, #0
 801851c:	d10d      	bne.n	801853a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 801851e:	4b85      	ldr	r3, [pc, #532]	; (8018734 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8018520:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8018524:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8018528:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801852c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8018530:	4a80      	ldr	r2, [pc, #512]	; (8018734 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8018532:	430b      	orrs	r3, r1
 8018534:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8018538:	e003      	b.n	8018542 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801853a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 801853e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8018542:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018546:	e9d3 2300 	ldrd	r2, r3, [r3]
 801854a:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 801854e:	66bb      	str	r3, [r7, #104]	; 0x68
 8018550:	2300      	movs	r3, #0
 8018552:	66fb      	str	r3, [r7, #108]	; 0x6c
 8018554:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8018558:	460b      	mov	r3, r1
 801855a:	4313      	orrs	r3, r2
 801855c:	d046      	beq.n	80185ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 801855e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018562:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8018566:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 801856a:	d028      	beq.n	80185be <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 801856c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8018570:	d821      	bhi.n	80185b6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8018572:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8018576:	d022      	beq.n	80185be <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8018578:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801857c:	d81b      	bhi.n	80185b6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 801857e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8018582:	d01c      	beq.n	80185be <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8018584:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8018588:	d815      	bhi.n	80185b6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 801858a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801858e:	d008      	beq.n	80185a2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8018590:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8018594:	d80f      	bhi.n	80185b6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8018596:	2b00      	cmp	r3, #0
 8018598:	d011      	beq.n	80185be <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 801859a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801859e:	d00e      	beq.n	80185be <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80185a0:	e009      	b.n	80185b6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80185a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80185a6:	3308      	adds	r3, #8
 80185a8:	4618      	mov	r0, r3
 80185aa:	f000 fb61 	bl	8018c70 <RCCEx_PLL2_Config>
 80185ae:	4603      	mov	r3, r0
 80185b0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80185b4:	e004      	b.n	80185c0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80185b6:	2301      	movs	r3, #1
 80185b8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80185bc:	e000      	b.n	80185c0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 80185be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80185c0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80185c4:	2b00      	cmp	r3, #0
 80185c6:	d10d      	bne.n	80185e4 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80185c8:	4b5a      	ldr	r3, [pc, #360]	; (8018734 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80185ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80185ce:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80185d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80185d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80185da:	4a56      	ldr	r2, [pc, #344]	; (8018734 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80185dc:	430b      	orrs	r3, r1
 80185de:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80185e2:	e003      	b.n	80185ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80185e4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80185e8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80185ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80185f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185f4:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80185f8:	663b      	str	r3, [r7, #96]	; 0x60
 80185fa:	2300      	movs	r3, #0
 80185fc:	667b      	str	r3, [r7, #100]	; 0x64
 80185fe:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8018602:	460b      	mov	r3, r1
 8018604:	4313      	orrs	r3, r2
 8018606:	d03f      	beq.n	8018688 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8018608:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801860c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018610:	2b04      	cmp	r3, #4
 8018612:	d81e      	bhi.n	8018652 <HAL_RCCEx_PeriphCLKConfig+0x562>
 8018614:	a201      	add	r2, pc, #4	; (adr r2, 801861c <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8018616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801861a:	bf00      	nop
 801861c:	0801865b 	.word	0x0801865b
 8018620:	08018631 	.word	0x08018631
 8018624:	0801863f 	.word	0x0801863f
 8018628:	0801865b 	.word	0x0801865b
 801862c:	0801865b 	.word	0x0801865b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8018630:	4b40      	ldr	r3, [pc, #256]	; (8018734 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8018632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018634:	4a3f      	ldr	r2, [pc, #252]	; (8018734 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8018636:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801863a:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 801863c:	e00e      	b.n	801865c <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 801863e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018642:	332c      	adds	r3, #44	; 0x2c
 8018644:	4618      	mov	r0, r3
 8018646:	f000 fbab 	bl	8018da0 <RCCEx_PLL3_Config>
 801864a:	4603      	mov	r3, r0
 801864c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8018650:	e004      	b.n	801865c <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8018652:	2301      	movs	r3, #1
 8018654:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8018658:	e000      	b.n	801865c <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 801865a:	bf00      	nop
    }
    if (ret == HAL_OK)
 801865c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8018660:	2b00      	cmp	r3, #0
 8018662:	d10d      	bne.n	8018680 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8018664:	4b33      	ldr	r3, [pc, #204]	; (8018734 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8018666:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 801866a:	f023 0107 	bic.w	r1, r3, #7
 801866e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018676:	4a2f      	ldr	r2, [pc, #188]	; (8018734 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8018678:	430b      	orrs	r3, r1
 801867a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 801867e:	e003      	b.n	8018688 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8018680:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8018684:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8018688:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801868c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018690:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8018694:	65bb      	str	r3, [r7, #88]	; 0x58
 8018696:	2300      	movs	r3, #0
 8018698:	65fb      	str	r3, [r7, #92]	; 0x5c
 801869a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 801869e:	460b      	mov	r3, r1
 80186a0:	4313      	orrs	r3, r2
 80186a2:	d04d      	beq.n	8018740 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80186a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80186a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80186ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80186b0:	d028      	beq.n	8018704 <HAL_RCCEx_PeriphCLKConfig+0x614>
 80186b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80186b6:	d821      	bhi.n	80186fc <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80186b8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80186bc:	d024      	beq.n	8018708 <HAL_RCCEx_PeriphCLKConfig+0x618>
 80186be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80186c2:	d81b      	bhi.n	80186fc <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80186c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80186c8:	d00e      	beq.n	80186e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 80186ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80186ce:	d815      	bhi.n	80186fc <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80186d0:	2b00      	cmp	r3, #0
 80186d2:	d01b      	beq.n	801870c <HAL_RCCEx_PeriphCLKConfig+0x61c>
 80186d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80186d8:	d110      	bne.n	80186fc <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80186da:	4b16      	ldr	r3, [pc, #88]	; (8018734 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80186dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80186de:	4a15      	ldr	r2, [pc, #84]	; (8018734 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80186e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80186e4:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80186e6:	e012      	b.n	801870e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80186e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80186ec:	332c      	adds	r3, #44	; 0x2c
 80186ee:	4618      	mov	r0, r3
 80186f0:	f000 fb56 	bl	8018da0 <RCCEx_PLL3_Config>
 80186f4:	4603      	mov	r3, r0
 80186f6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80186fa:	e008      	b.n	801870e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80186fc:	2301      	movs	r3, #1
 80186fe:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8018702:	e004      	b.n	801870e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8018704:	bf00      	nop
 8018706:	e002      	b.n	801870e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8018708:	bf00      	nop
 801870a:	e000      	b.n	801870e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 801870c:	bf00      	nop
    }
    if (ret == HAL_OK)
 801870e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8018712:	2b00      	cmp	r3, #0
 8018714:	d110      	bne.n	8018738 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8018716:	4b07      	ldr	r3, [pc, #28]	; (8018734 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8018718:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801871c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8018720:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018724:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018728:	4a02      	ldr	r2, [pc, #8]	; (8018734 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 801872a:	430b      	orrs	r3, r1
 801872c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8018730:	e006      	b.n	8018740 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8018732:	bf00      	nop
 8018734:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8018738:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 801873c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8018740:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018748:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 801874c:	653b      	str	r3, [r7, #80]	; 0x50
 801874e:	2300      	movs	r3, #0
 8018750:	657b      	str	r3, [r7, #84]	; 0x54
 8018752:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8018756:	460b      	mov	r3, r1
 8018758:	4313      	orrs	r3, r2
 801875a:	f000 80b5 	beq.w	80188c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 801875e:	2300      	movs	r3, #0
 8018760:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8018764:	4b9d      	ldr	r3, [pc, #628]	; (80189dc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8018766:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801876a:	f003 0304 	and.w	r3, r3, #4
 801876e:	2b00      	cmp	r3, #0
 8018770:	d113      	bne.n	801879a <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8018772:	4b9a      	ldr	r3, [pc, #616]	; (80189dc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8018774:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8018778:	4a98      	ldr	r2, [pc, #608]	; (80189dc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 801877a:	f043 0304 	orr.w	r3, r3, #4
 801877e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8018782:	4b96      	ldr	r3, [pc, #600]	; (80189dc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8018784:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8018788:	f003 0304 	and.w	r3, r3, #4
 801878c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8018790:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 8018794:	2301      	movs	r3, #1
 8018796:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 801879a:	4b91      	ldr	r3, [pc, #580]	; (80189e0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 801879c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801879e:	4a90      	ldr	r2, [pc, #576]	; (80189e0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80187a0:	f043 0301 	orr.w	r3, r3, #1
 80187a4:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80187a6:	f7f8 ff9d 	bl	80116e4 <HAL_GetTick>
 80187aa:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80187ae:	e00b      	b.n	80187c8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80187b0:	f7f8 ff98 	bl	80116e4 <HAL_GetTick>
 80187b4:	4602      	mov	r2, r0
 80187b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80187ba:	1ad3      	subs	r3, r2, r3
 80187bc:	2b02      	cmp	r3, #2
 80187be:	d903      	bls.n	80187c8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 80187c0:	2303      	movs	r3, #3
 80187c2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80187c6:	e005      	b.n	80187d4 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80187c8:	4b85      	ldr	r3, [pc, #532]	; (80189e0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80187ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80187cc:	f003 0301 	and.w	r3, r3, #1
 80187d0:	2b00      	cmp	r3, #0
 80187d2:	d0ed      	beq.n	80187b0 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 80187d4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80187d8:	2b00      	cmp	r3, #0
 80187da:	d165      	bne.n	80188a8 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80187dc:	4b7f      	ldr	r3, [pc, #508]	; (80189dc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80187de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80187e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80187e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80187ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80187ee:	2b00      	cmp	r3, #0
 80187f0:	d023      	beq.n	801883a <HAL_RCCEx_PeriphCLKConfig+0x74a>
 80187f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80187f6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80187fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80187fe:	4293      	cmp	r3, r2
 8018800:	d01b      	beq.n	801883a <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8018802:	4b76      	ldr	r3, [pc, #472]	; (80189dc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8018804:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8018808:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801880c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8018810:	4b72      	ldr	r3, [pc, #456]	; (80189dc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8018812:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8018816:	4a71      	ldr	r2, [pc, #452]	; (80189dc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8018818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801881c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8018820:	4b6e      	ldr	r3, [pc, #440]	; (80189dc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8018822:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8018826:	4a6d      	ldr	r2, [pc, #436]	; (80189dc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8018828:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801882c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8018830:	4a6a      	ldr	r2, [pc, #424]	; (80189dc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8018832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018836:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 801883a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801883e:	f003 0301 	and.w	r3, r3, #1
 8018842:	2b00      	cmp	r3, #0
 8018844:	d019      	beq.n	801887a <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018846:	f7f8 ff4d 	bl	80116e4 <HAL_GetTick>
 801884a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801884e:	e00d      	b.n	801886c <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8018850:	f7f8 ff48 	bl	80116e4 <HAL_GetTick>
 8018854:	4602      	mov	r2, r0
 8018856:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801885a:	1ad2      	subs	r2, r2, r3
 801885c:	f241 3388 	movw	r3, #5000	; 0x1388
 8018860:	429a      	cmp	r2, r3
 8018862:	d903      	bls.n	801886c <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8018864:	2303      	movs	r3, #3
 8018866:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 801886a:	e006      	b.n	801887a <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801886c:	4b5b      	ldr	r3, [pc, #364]	; (80189dc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 801886e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8018872:	f003 0302 	and.w	r3, r3, #2
 8018876:	2b00      	cmp	r3, #0
 8018878:	d0ea      	beq.n	8018850 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 801887a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 801887e:	2b00      	cmp	r3, #0
 8018880:	d10d      	bne.n	801889e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8018882:	4b56      	ldr	r3, [pc, #344]	; (80189dc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8018884:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8018888:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 801888c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018890:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8018894:	4a51      	ldr	r2, [pc, #324]	; (80189dc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8018896:	430b      	orrs	r3, r1
 8018898:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 801889c:	e008      	b.n	80188b0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801889e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80188a2:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 80188a6:	e003      	b.n	80188b0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80188a8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80188ac:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80188b0:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 80188b4:	2b01      	cmp	r3, #1
 80188b6:	d107      	bne.n	80188c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80188b8:	4b48      	ldr	r3, [pc, #288]	; (80189dc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80188ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80188be:	4a47      	ldr	r2, [pc, #284]	; (80189dc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80188c0:	f023 0304 	bic.w	r3, r3, #4
 80188c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80188c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80188cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188d0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80188d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80188d6:	2300      	movs	r3, #0
 80188d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80188da:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80188de:	460b      	mov	r3, r1
 80188e0:	4313      	orrs	r3, r2
 80188e2:	d042      	beq.n	801896a <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80188e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80188e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80188ec:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80188f0:	d022      	beq.n	8018938 <HAL_RCCEx_PeriphCLKConfig+0x848>
 80188f2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80188f6:	d81b      	bhi.n	8018930 <HAL_RCCEx_PeriphCLKConfig+0x840>
 80188f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80188fc:	d011      	beq.n	8018922 <HAL_RCCEx_PeriphCLKConfig+0x832>
 80188fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8018902:	d815      	bhi.n	8018930 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8018904:	2b00      	cmp	r3, #0
 8018906:	d019      	beq.n	801893c <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8018908:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801890c:	d110      	bne.n	8018930 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 801890e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018912:	3308      	adds	r3, #8
 8018914:	4618      	mov	r0, r3
 8018916:	f000 f9ab 	bl	8018c70 <RCCEx_PLL2_Config>
 801891a:	4603      	mov	r3, r0
 801891c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8018920:	e00d      	b.n	801893e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8018922:	4b2e      	ldr	r3, [pc, #184]	; (80189dc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8018924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018926:	4a2d      	ldr	r2, [pc, #180]	; (80189dc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8018928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801892c:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 801892e:	e006      	b.n	801893e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8018930:	2301      	movs	r3, #1
 8018932:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8018936:	e002      	b.n	801893e <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8018938:	bf00      	nop
 801893a:	e000      	b.n	801893e <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 801893c:	bf00      	nop
    }
    if (ret == HAL_OK)
 801893e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8018942:	2b00      	cmp	r3, #0
 8018944:	d10d      	bne.n	8018962 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8018946:	4b25      	ldr	r3, [pc, #148]	; (80189dc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8018948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801894c:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8018950:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018954:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8018958:	4a20      	ldr	r2, [pc, #128]	; (80189dc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 801895a:	430b      	orrs	r3, r1
 801895c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8018960:	e003      	b.n	801896a <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8018962:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8018966:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801896a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801896e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018972:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8018976:	643b      	str	r3, [r7, #64]	; 0x40
 8018978:	2300      	movs	r3, #0
 801897a:	647b      	str	r3, [r7, #68]	; 0x44
 801897c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8018980:	460b      	mov	r3, r1
 8018982:	4313      	orrs	r3, r2
 8018984:	d032      	beq.n	80189ec <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8018986:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801898a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801898e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8018992:	d00b      	beq.n	80189ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8018994:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8018998:	d804      	bhi.n	80189a4 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 801899a:	2b00      	cmp	r3, #0
 801899c:	d008      	beq.n	80189b0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 801899e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80189a2:	d007      	beq.n	80189b4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80189a4:	2301      	movs	r3, #1
 80189a6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80189aa:	e004      	b.n	80189b6 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80189ac:	bf00      	nop
 80189ae:	e002      	b.n	80189b6 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80189b0:	bf00      	nop
 80189b2:	e000      	b.n	80189b6 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80189b4:	bf00      	nop
    }
    if (ret == HAL_OK)
 80189b6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80189ba:	2b00      	cmp	r3, #0
 80189bc:	d112      	bne.n	80189e4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80189be:	4b07      	ldr	r3, [pc, #28]	; (80189dc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80189c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80189c4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80189c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80189cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80189d0:	4a02      	ldr	r2, [pc, #8]	; (80189dc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80189d2:	430b      	orrs	r3, r1
 80189d4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80189d8:	e008      	b.n	80189ec <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 80189da:	bf00      	nop
 80189dc:	46020c00 	.word	0x46020c00
 80189e0:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80189e4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80189e8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 80189ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80189f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189f4:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80189f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80189fa:	2300      	movs	r3, #0
 80189fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80189fe:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8018a02:	460b      	mov	r3, r1
 8018a04:	4313      	orrs	r3, r2
 8018a06:	d00c      	beq.n	8018a22 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8018a08:	4b98      	ldr	r3, [pc, #608]	; (8018c6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8018a0a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8018a0e:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8018a12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018a16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8018a1a:	4a94      	ldr	r2, [pc, #592]	; (8018c6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8018a1c:	430b      	orrs	r3, r1
 8018a1e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8018a22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a2a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8018a2e:	633b      	str	r3, [r7, #48]	; 0x30
 8018a30:	2300      	movs	r3, #0
 8018a32:	637b      	str	r3, [r7, #52]	; 0x34
 8018a34:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8018a38:	460b      	mov	r3, r1
 8018a3a:	4313      	orrs	r3, r2
 8018a3c:	d019      	beq.n	8018a72 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8018a3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018a42:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8018a46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8018a4a:	d105      	bne.n	8018a58 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8018a4c:	4b87      	ldr	r3, [pc, #540]	; (8018c6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8018a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018a50:	4a86      	ldr	r2, [pc, #536]	; (8018c6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8018a52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8018a56:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8018a58:	4b84      	ldr	r3, [pc, #528]	; (8018c6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8018a5a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8018a5e:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8018a62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018a66:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8018a6a:	4a80      	ldr	r2, [pc, #512]	; (8018c6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8018a6c:	430b      	orrs	r3, r1
 8018a6e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8018a72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a7a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8018a7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8018a80:	2300      	movs	r3, #0
 8018a82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018a84:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8018a88:	460b      	mov	r3, r1
 8018a8a:	4313      	orrs	r3, r2
 8018a8c:	d00c      	beq.n	8018aa8 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8018a8e:	4b77      	ldr	r3, [pc, #476]	; (8018c6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8018a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8018a94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8018a98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018a9c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8018aa0:	4972      	ldr	r1, [pc, #456]	; (8018c6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8018aa2:	4313      	orrs	r3, r2
 8018aa4:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8018aa8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ab0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8018ab4:	623b      	str	r3, [r7, #32]
 8018ab6:	2300      	movs	r3, #0
 8018ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8018aba:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8018abe:	460b      	mov	r3, r1
 8018ac0:	4313      	orrs	r3, r2
 8018ac2:	d00c      	beq.n	8018ade <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8018ac4:	4b69      	ldr	r3, [pc, #420]	; (8018c6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8018ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8018aca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8018ace:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018ad2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8018ad6:	4965      	ldr	r1, [pc, #404]	; (8018c6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8018ad8:	4313      	orrs	r3, r2
 8018ada:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8018ade:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ae6:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8018aea:	61bb      	str	r3, [r7, #24]
 8018aec:	2300      	movs	r3, #0
 8018aee:	61fb      	str	r3, [r7, #28]
 8018af0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8018af4:	460b      	mov	r3, r1
 8018af6:	4313      	orrs	r3, r2
 8018af8:	d00c      	beq.n	8018b14 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8018afa:	4b5c      	ldr	r3, [pc, #368]	; (8018c6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8018afc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8018b00:	f023 0218 	bic.w	r2, r3, #24
 8018b04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018b08:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8018b0c:	4957      	ldr	r1, [pc, #348]	; (8018c6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8018b0e:	4313      	orrs	r3, r2
 8018b10:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8018b14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b1c:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8018b20:	613b      	str	r3, [r7, #16]
 8018b22:	2300      	movs	r3, #0
 8018b24:	617b      	str	r3, [r7, #20]
 8018b26:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8018b2a:	460b      	mov	r3, r1
 8018b2c:	4313      	orrs	r3, r2
 8018b2e:	d032      	beq.n	8018b96 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8018b30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018b34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8018b38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8018b3c:	d105      	bne.n	8018b4a <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8018b3e:	4b4b      	ldr	r3, [pc, #300]	; (8018c6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8018b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018b42:	4a4a      	ldr	r2, [pc, #296]	; (8018c6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8018b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8018b48:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8018b4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018b4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8018b52:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8018b56:	d108      	bne.n	8018b6a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8018b58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018b5c:	3308      	adds	r3, #8
 8018b5e:	4618      	mov	r0, r3
 8018b60:	f000 f886 	bl	8018c70 <RCCEx_PLL2_Config>
 8018b64:	4603      	mov	r3, r0
 8018b66:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 8018b6a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8018b6e:	2b00      	cmp	r3, #0
 8018b70:	d10d      	bne.n	8018b8e <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8018b72:	4b3e      	ldr	r3, [pc, #248]	; (8018c6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8018b74:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8018b78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8018b7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018b80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8018b84:	4939      	ldr	r1, [pc, #228]	; (8018c6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8018b86:	4313      	orrs	r3, r2
 8018b88:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8018b8c:	e003      	b.n	8018b96 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8018b8e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8018b92:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8018b96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b9e:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8018ba2:	60bb      	str	r3, [r7, #8]
 8018ba4:	2300      	movs	r3, #0
 8018ba6:	60fb      	str	r3, [r7, #12]
 8018ba8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8018bac:	460b      	mov	r3, r1
 8018bae:	4313      	orrs	r3, r2
 8018bb0:	d03a      	beq.n	8018c28 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8018bb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018bb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018bba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8018bbe:	d00e      	beq.n	8018bde <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8018bc0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8018bc4:	d815      	bhi.n	8018bf2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8018bc6:	2b00      	cmp	r3, #0
 8018bc8:	d017      	beq.n	8018bfa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8018bca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8018bce:	d110      	bne.n	8018bf2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8018bd0:	4b26      	ldr	r3, [pc, #152]	; (8018c6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8018bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018bd4:	4a25      	ldr	r2, [pc, #148]	; (8018c6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8018bd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8018bda:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8018bdc:	e00e      	b.n	8018bfc <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8018bde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018be2:	3308      	adds	r3, #8
 8018be4:	4618      	mov	r0, r3
 8018be6:	f000 f843 	bl	8018c70 <RCCEx_PLL2_Config>
 8018bea:	4603      	mov	r3, r0
 8018bec:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8018bf0:	e004      	b.n	8018bfc <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8018bf2:	2301      	movs	r3, #1
 8018bf4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8018bf8:	e000      	b.n	8018bfc <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8018bfa:	bf00      	nop
    }
    if (ret == HAL_OK)
 8018bfc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8018c00:	2b00      	cmp	r3, #0
 8018c02:	d10d      	bne.n	8018c20 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8018c04:	4b19      	ldr	r3, [pc, #100]	; (8018c6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8018c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8018c0a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8018c0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018c12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018c16:	4915      	ldr	r1, [pc, #84]	; (8018c6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8018c18:	4313      	orrs	r3, r2
 8018c1a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8018c1e:	e003      	b.n	8018c28 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8018c20:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8018c24:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8018c28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c30:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8018c34:	603b      	str	r3, [r7, #0]
 8018c36:	2300      	movs	r3, #0
 8018c38:	607b      	str	r3, [r7, #4]
 8018c3a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8018c3e:	460b      	mov	r3, r1
 8018c40:	4313      	orrs	r3, r2
 8018c42:	d00c      	beq.n	8018c5e <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8018c44:	4b09      	ldr	r3, [pc, #36]	; (8018c6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8018c46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8018c4a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8018c4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018c52:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8018c56:	4905      	ldr	r1, [pc, #20]	; (8018c6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8018c58:	4313      	orrs	r3, r2
 8018c5a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8018c5e:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 8018c62:	4618      	mov	r0, r3
 8018c64:	37e8      	adds	r7, #232	; 0xe8
 8018c66:	46bd      	mov	sp, r7
 8018c68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8018c6c:	46020c00 	.word	0x46020c00

08018c70 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8018c70:	b580      	push	{r7, lr}
 8018c72:	b084      	sub	sp, #16
 8018c74:	af00      	add	r7, sp, #0
 8018c76:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8018c78:	4b47      	ldr	r3, [pc, #284]	; (8018d98 <RCCEx_PLL2_Config+0x128>)
 8018c7a:	681b      	ldr	r3, [r3, #0]
 8018c7c:	4a46      	ldr	r2, [pc, #280]	; (8018d98 <RCCEx_PLL2_Config+0x128>)
 8018c7e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8018c82:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8018c84:	f7f8 fd2e 	bl	80116e4 <HAL_GetTick>
 8018c88:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8018c8a:	e008      	b.n	8018c9e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8018c8c:	f7f8 fd2a 	bl	80116e4 <HAL_GetTick>
 8018c90:	4602      	mov	r2, r0
 8018c92:	68fb      	ldr	r3, [r7, #12]
 8018c94:	1ad3      	subs	r3, r2, r3
 8018c96:	2b02      	cmp	r3, #2
 8018c98:	d901      	bls.n	8018c9e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8018c9a:	2303      	movs	r3, #3
 8018c9c:	e077      	b.n	8018d8e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8018c9e:	4b3e      	ldr	r3, [pc, #248]	; (8018d98 <RCCEx_PLL2_Config+0x128>)
 8018ca0:	681b      	ldr	r3, [r3, #0]
 8018ca2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8018ca6:	2b00      	cmp	r3, #0
 8018ca8:	d1f0      	bne.n	8018c8c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8018caa:	4b3b      	ldr	r3, [pc, #236]	; (8018d98 <RCCEx_PLL2_Config+0x128>)
 8018cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018cae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8018cb2:	f023 0303 	bic.w	r3, r3, #3
 8018cb6:	687a      	ldr	r2, [r7, #4]
 8018cb8:	6811      	ldr	r1, [r2, #0]
 8018cba:	687a      	ldr	r2, [r7, #4]
 8018cbc:	6852      	ldr	r2, [r2, #4]
 8018cbe:	3a01      	subs	r2, #1
 8018cc0:	0212      	lsls	r2, r2, #8
 8018cc2:	430a      	orrs	r2, r1
 8018cc4:	4934      	ldr	r1, [pc, #208]	; (8018d98 <RCCEx_PLL2_Config+0x128>)
 8018cc6:	4313      	orrs	r3, r2
 8018cc8:	62cb      	str	r3, [r1, #44]	; 0x2c
 8018cca:	4b33      	ldr	r3, [pc, #204]	; (8018d98 <RCCEx_PLL2_Config+0x128>)
 8018ccc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8018cce:	4b33      	ldr	r3, [pc, #204]	; (8018d9c <RCCEx_PLL2_Config+0x12c>)
 8018cd0:	4013      	ands	r3, r2
 8018cd2:	687a      	ldr	r2, [r7, #4]
 8018cd4:	6892      	ldr	r2, [r2, #8]
 8018cd6:	3a01      	subs	r2, #1
 8018cd8:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8018cdc:	687a      	ldr	r2, [r7, #4]
 8018cde:	68d2      	ldr	r2, [r2, #12]
 8018ce0:	3a01      	subs	r2, #1
 8018ce2:	0252      	lsls	r2, r2, #9
 8018ce4:	b292      	uxth	r2, r2
 8018ce6:	4311      	orrs	r1, r2
 8018ce8:	687a      	ldr	r2, [r7, #4]
 8018cea:	6912      	ldr	r2, [r2, #16]
 8018cec:	3a01      	subs	r2, #1
 8018cee:	0412      	lsls	r2, r2, #16
 8018cf0:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8018cf4:	4311      	orrs	r1, r2
 8018cf6:	687a      	ldr	r2, [r7, #4]
 8018cf8:	6952      	ldr	r2, [r2, #20]
 8018cfa:	3a01      	subs	r2, #1
 8018cfc:	0612      	lsls	r2, r2, #24
 8018cfe:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8018d02:	430a      	orrs	r2, r1
 8018d04:	4924      	ldr	r1, [pc, #144]	; (8018d98 <RCCEx_PLL2_Config+0x128>)
 8018d06:	4313      	orrs	r3, r2
 8018d08:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8018d0a:	4b23      	ldr	r3, [pc, #140]	; (8018d98 <RCCEx_PLL2_Config+0x128>)
 8018d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018d0e:	f023 020c 	bic.w	r2, r3, #12
 8018d12:	687b      	ldr	r3, [r7, #4]
 8018d14:	699b      	ldr	r3, [r3, #24]
 8018d16:	4920      	ldr	r1, [pc, #128]	; (8018d98 <RCCEx_PLL2_Config+0x128>)
 8018d18:	4313      	orrs	r3, r2
 8018d1a:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8018d1c:	4b1e      	ldr	r3, [pc, #120]	; (8018d98 <RCCEx_PLL2_Config+0x128>)
 8018d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018d20:	687b      	ldr	r3, [r7, #4]
 8018d22:	6a1b      	ldr	r3, [r3, #32]
 8018d24:	491c      	ldr	r1, [pc, #112]	; (8018d98 <RCCEx_PLL2_Config+0x128>)
 8018d26:	4313      	orrs	r3, r2
 8018d28:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8018d2a:	4b1b      	ldr	r3, [pc, #108]	; (8018d98 <RCCEx_PLL2_Config+0x128>)
 8018d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018d2e:	4a1a      	ldr	r2, [pc, #104]	; (8018d98 <RCCEx_PLL2_Config+0x128>)
 8018d30:	f023 0310 	bic.w	r3, r3, #16
 8018d34:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8018d36:	4b18      	ldr	r3, [pc, #96]	; (8018d98 <RCCEx_PLL2_Config+0x128>)
 8018d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018d3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8018d3e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8018d42:	687a      	ldr	r2, [r7, #4]
 8018d44:	69d2      	ldr	r2, [r2, #28]
 8018d46:	00d2      	lsls	r2, r2, #3
 8018d48:	4913      	ldr	r1, [pc, #76]	; (8018d98 <RCCEx_PLL2_Config+0x128>)
 8018d4a:	4313      	orrs	r3, r2
 8018d4c:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8018d4e:	4b12      	ldr	r3, [pc, #72]	; (8018d98 <RCCEx_PLL2_Config+0x128>)
 8018d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018d52:	4a11      	ldr	r2, [pc, #68]	; (8018d98 <RCCEx_PLL2_Config+0x128>)
 8018d54:	f043 0310 	orr.w	r3, r3, #16
 8018d58:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8018d5a:	4b0f      	ldr	r3, [pc, #60]	; (8018d98 <RCCEx_PLL2_Config+0x128>)
 8018d5c:	681b      	ldr	r3, [r3, #0]
 8018d5e:	4a0e      	ldr	r2, [pc, #56]	; (8018d98 <RCCEx_PLL2_Config+0x128>)
 8018d60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8018d64:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8018d66:	f7f8 fcbd 	bl	80116e4 <HAL_GetTick>
 8018d6a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8018d6c:	e008      	b.n	8018d80 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8018d6e:	f7f8 fcb9 	bl	80116e4 <HAL_GetTick>
 8018d72:	4602      	mov	r2, r0
 8018d74:	68fb      	ldr	r3, [r7, #12]
 8018d76:	1ad3      	subs	r3, r2, r3
 8018d78:	2b02      	cmp	r3, #2
 8018d7a:	d901      	bls.n	8018d80 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8018d7c:	2303      	movs	r3, #3
 8018d7e:	e006      	b.n	8018d8e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8018d80:	4b05      	ldr	r3, [pc, #20]	; (8018d98 <RCCEx_PLL2_Config+0x128>)
 8018d82:	681b      	ldr	r3, [r3, #0]
 8018d84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8018d88:	2b00      	cmp	r3, #0
 8018d8a:	d0f0      	beq.n	8018d6e <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8018d8c:	2300      	movs	r3, #0

}
 8018d8e:	4618      	mov	r0, r3
 8018d90:	3710      	adds	r7, #16
 8018d92:	46bd      	mov	sp, r7
 8018d94:	bd80      	pop	{r7, pc}
 8018d96:	bf00      	nop
 8018d98:	46020c00 	.word	0x46020c00
 8018d9c:	80800000 	.word	0x80800000

08018da0 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8018da0:	b580      	push	{r7, lr}
 8018da2:	b084      	sub	sp, #16
 8018da4:	af00      	add	r7, sp, #0
 8018da6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8018da8:	4b47      	ldr	r3, [pc, #284]	; (8018ec8 <RCCEx_PLL3_Config+0x128>)
 8018daa:	681b      	ldr	r3, [r3, #0]
 8018dac:	4a46      	ldr	r2, [pc, #280]	; (8018ec8 <RCCEx_PLL3_Config+0x128>)
 8018dae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8018db2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8018db4:	f7f8 fc96 	bl	80116e4 <HAL_GetTick>
 8018db8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8018dba:	e008      	b.n	8018dce <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8018dbc:	f7f8 fc92 	bl	80116e4 <HAL_GetTick>
 8018dc0:	4602      	mov	r2, r0
 8018dc2:	68fb      	ldr	r3, [r7, #12]
 8018dc4:	1ad3      	subs	r3, r2, r3
 8018dc6:	2b02      	cmp	r3, #2
 8018dc8:	d901      	bls.n	8018dce <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8018dca:	2303      	movs	r3, #3
 8018dcc:	e077      	b.n	8018ebe <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8018dce:	4b3e      	ldr	r3, [pc, #248]	; (8018ec8 <RCCEx_PLL3_Config+0x128>)
 8018dd0:	681b      	ldr	r3, [r3, #0]
 8018dd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8018dd6:	2b00      	cmp	r3, #0
 8018dd8:	d1f0      	bne.n	8018dbc <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8018dda:	4b3b      	ldr	r3, [pc, #236]	; (8018ec8 <RCCEx_PLL3_Config+0x128>)
 8018ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018dde:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8018de2:	f023 0303 	bic.w	r3, r3, #3
 8018de6:	687a      	ldr	r2, [r7, #4]
 8018de8:	6811      	ldr	r1, [r2, #0]
 8018dea:	687a      	ldr	r2, [r7, #4]
 8018dec:	6852      	ldr	r2, [r2, #4]
 8018dee:	3a01      	subs	r2, #1
 8018df0:	0212      	lsls	r2, r2, #8
 8018df2:	430a      	orrs	r2, r1
 8018df4:	4934      	ldr	r1, [pc, #208]	; (8018ec8 <RCCEx_PLL3_Config+0x128>)
 8018df6:	4313      	orrs	r3, r2
 8018df8:	630b      	str	r3, [r1, #48]	; 0x30
 8018dfa:	4b33      	ldr	r3, [pc, #204]	; (8018ec8 <RCCEx_PLL3_Config+0x128>)
 8018dfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8018dfe:	4b33      	ldr	r3, [pc, #204]	; (8018ecc <RCCEx_PLL3_Config+0x12c>)
 8018e00:	4013      	ands	r3, r2
 8018e02:	687a      	ldr	r2, [r7, #4]
 8018e04:	6892      	ldr	r2, [r2, #8]
 8018e06:	3a01      	subs	r2, #1
 8018e08:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8018e0c:	687a      	ldr	r2, [r7, #4]
 8018e0e:	68d2      	ldr	r2, [r2, #12]
 8018e10:	3a01      	subs	r2, #1
 8018e12:	0252      	lsls	r2, r2, #9
 8018e14:	b292      	uxth	r2, r2
 8018e16:	4311      	orrs	r1, r2
 8018e18:	687a      	ldr	r2, [r7, #4]
 8018e1a:	6912      	ldr	r2, [r2, #16]
 8018e1c:	3a01      	subs	r2, #1
 8018e1e:	0412      	lsls	r2, r2, #16
 8018e20:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8018e24:	4311      	orrs	r1, r2
 8018e26:	687a      	ldr	r2, [r7, #4]
 8018e28:	6952      	ldr	r2, [r2, #20]
 8018e2a:	3a01      	subs	r2, #1
 8018e2c:	0612      	lsls	r2, r2, #24
 8018e2e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8018e32:	430a      	orrs	r2, r1
 8018e34:	4924      	ldr	r1, [pc, #144]	; (8018ec8 <RCCEx_PLL3_Config+0x128>)
 8018e36:	4313      	orrs	r3, r2
 8018e38:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8018e3a:	4b23      	ldr	r3, [pc, #140]	; (8018ec8 <RCCEx_PLL3_Config+0x128>)
 8018e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018e3e:	f023 020c 	bic.w	r2, r3, #12
 8018e42:	687b      	ldr	r3, [r7, #4]
 8018e44:	699b      	ldr	r3, [r3, #24]
 8018e46:	4920      	ldr	r1, [pc, #128]	; (8018ec8 <RCCEx_PLL3_Config+0x128>)
 8018e48:	4313      	orrs	r3, r2
 8018e4a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8018e4c:	4b1e      	ldr	r3, [pc, #120]	; (8018ec8 <RCCEx_PLL3_Config+0x128>)
 8018e4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8018e50:	687b      	ldr	r3, [r7, #4]
 8018e52:	6a1b      	ldr	r3, [r3, #32]
 8018e54:	491c      	ldr	r1, [pc, #112]	; (8018ec8 <RCCEx_PLL3_Config+0x128>)
 8018e56:	4313      	orrs	r3, r2
 8018e58:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8018e5a:	4b1b      	ldr	r3, [pc, #108]	; (8018ec8 <RCCEx_PLL3_Config+0x128>)
 8018e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018e5e:	4a1a      	ldr	r2, [pc, #104]	; (8018ec8 <RCCEx_PLL3_Config+0x128>)
 8018e60:	f023 0310 	bic.w	r3, r3, #16
 8018e64:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8018e66:	4b18      	ldr	r3, [pc, #96]	; (8018ec8 <RCCEx_PLL3_Config+0x128>)
 8018e68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018e6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8018e6e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8018e72:	687a      	ldr	r2, [r7, #4]
 8018e74:	69d2      	ldr	r2, [r2, #28]
 8018e76:	00d2      	lsls	r2, r2, #3
 8018e78:	4913      	ldr	r1, [pc, #76]	; (8018ec8 <RCCEx_PLL3_Config+0x128>)
 8018e7a:	4313      	orrs	r3, r2
 8018e7c:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8018e7e:	4b12      	ldr	r3, [pc, #72]	; (8018ec8 <RCCEx_PLL3_Config+0x128>)
 8018e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018e82:	4a11      	ldr	r2, [pc, #68]	; (8018ec8 <RCCEx_PLL3_Config+0x128>)
 8018e84:	f043 0310 	orr.w	r3, r3, #16
 8018e88:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8018e8a:	4b0f      	ldr	r3, [pc, #60]	; (8018ec8 <RCCEx_PLL3_Config+0x128>)
 8018e8c:	681b      	ldr	r3, [r3, #0]
 8018e8e:	4a0e      	ldr	r2, [pc, #56]	; (8018ec8 <RCCEx_PLL3_Config+0x128>)
 8018e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8018e94:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8018e96:	f7f8 fc25 	bl	80116e4 <HAL_GetTick>
 8018e9a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8018e9c:	e008      	b.n	8018eb0 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8018e9e:	f7f8 fc21 	bl	80116e4 <HAL_GetTick>
 8018ea2:	4602      	mov	r2, r0
 8018ea4:	68fb      	ldr	r3, [r7, #12]
 8018ea6:	1ad3      	subs	r3, r2, r3
 8018ea8:	2b02      	cmp	r3, #2
 8018eaa:	d901      	bls.n	8018eb0 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8018eac:	2303      	movs	r3, #3
 8018eae:	e006      	b.n	8018ebe <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8018eb0:	4b05      	ldr	r3, [pc, #20]	; (8018ec8 <RCCEx_PLL3_Config+0x128>)
 8018eb2:	681b      	ldr	r3, [r3, #0]
 8018eb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8018eb8:	2b00      	cmp	r3, #0
 8018eba:	d0f0      	beq.n	8018e9e <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8018ebc:	2300      	movs	r3, #0
}
 8018ebe:	4618      	mov	r0, r3
 8018ec0:	3710      	adds	r7, #16
 8018ec2:	46bd      	mov	sp, r7
 8018ec4:	bd80      	pop	{r7, pc}
 8018ec6:	bf00      	nop
 8018ec8:	46020c00 	.word	0x46020c00
 8018ecc:	80800000 	.word	0x80800000

08018ed0 <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 8018ed0:	b480      	push	{r7}
 8018ed2:	b083      	sub	sp, #12
 8018ed4:	af00      	add	r7, sp, #0
 8018ed6:	6078      	str	r0, [r7, #4]
 8018ed8:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 8018eda:	687b      	ldr	r3, [r7, #4]
 8018edc:	681b      	ldr	r3, [r3, #0]
 8018ede:	f043 0202 	orr.w	r2, r3, #2
 8018ee2:	687b      	ldr	r3, [r7, #4]
 8018ee4:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 8018ee6:	683b      	ldr	r3, [r7, #0]
 8018ee8:	685a      	ldr	r2, [r3, #4]
 8018eea:	683b      	ldr	r3, [r7, #0]
 8018eec:	681b      	ldr	r3, [r3, #0]
 8018eee:	021b      	lsls	r3, r3, #8
 8018ef0:	431a      	orrs	r2, r3
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 8018ef6:	687b      	ldr	r3, [r7, #4]
 8018ef8:	681b      	ldr	r3, [r3, #0]
 8018efa:	f023 0202 	bic.w	r2, r3, #2
 8018efe:	687b      	ldr	r3, [r7, #4]
 8018f00:	601a      	str	r2, [r3, #0]
}
 8018f02:	bf00      	nop
 8018f04:	370c      	adds	r7, #12
 8018f06:	46bd      	mov	sp, r7
 8018f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f0c:	4770      	bx	lr

08018f0e <LL_DLYB_GetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is received.
  *          - ERROR: the Delay value is not received.
  */
void LL_DLYB_GetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef *pdlyb_cfg)
{
 8018f0e:	b480      	push	{r7}
 8018f10:	b083      	sub	sp, #12
 8018f12:	af00      	add	r7, sp, #0
 8018f14:	6078      	str	r0, [r7, #4]
 8018f16:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Fill the DelayBlock configuration structure with SEL and UNIT value */
  pdlyb_cfg->Units = ((DLYBx->CFGR & DLYB_CFGR_UNIT) >> DLYB_CFGR_UNIT_Pos);
 8018f18:	687b      	ldr	r3, [r7, #4]
 8018f1a:	685b      	ldr	r3, [r3, #4]
 8018f1c:	0a1b      	lsrs	r3, r3, #8
 8018f1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018f22:	683b      	ldr	r3, [r7, #0]
 8018f24:	601a      	str	r2, [r3, #0]
  pdlyb_cfg->PhaseSel = (DLYBx->CFGR & DLYB_CFGR_SEL);
 8018f26:	687b      	ldr	r3, [r7, #4]
 8018f28:	685b      	ldr	r3, [r3, #4]
 8018f2a:	f003 020f 	and.w	r2, r3, #15
 8018f2e:	683b      	ldr	r3, [r7, #0]
 8018f30:	605a      	str	r2, [r3, #4]
}
 8018f32:	bf00      	nop
 8018f34:	370c      	adds	r7, #12
 8018f36:	46bd      	mov	sp, r7
 8018f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f3c:	4770      	bx	lr
	...

08018f40 <LL_DLYB_GetClockPeriod>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: there is a valid period detected and stored in pdlyb_cfg.
  *          - ERROR: there is no valid period detected.
  */
uint32_t LL_DLYB_GetClockPeriod(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef *pdlyb_cfg)
{
 8018f40:	b580      	push	{r7, lr}
 8018f42:	b086      	sub	sp, #24
 8018f44:	af00      	add	r7, sp, #0
 8018f46:	6078      	str	r0, [r7, #4]
 8018f48:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8018f4a:	2300      	movs	r3, #0
 8018f4c:	617b      	str	r3, [r7, #20]

  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 8018f4e:	687b      	ldr	r3, [r7, #4]
 8018f50:	681b      	ldr	r3, [r3, #0]
 8018f52:	f043 0202 	orr.w	r2, r3, #2
 8018f56:	687b      	ldr	r3, [r7, #4]
 8018f58:	601a      	str	r2, [r3, #0]

  /* Delay line length detection */
  while (i < DLYB_MAX_UNIT)
 8018f5a:	e02a      	b.n	8018fb2 <LL_DLYB_GetClockPeriod+0x72>
  {
    /* Set the Delay of the UNIT(s)*/
    DLYBx->CFGR = DLYB_MAX_SELECT | (i << DLYB_CFGR_UNIT_Pos);
 8018f5c:	697b      	ldr	r3, [r7, #20]
 8018f5e:	021b      	lsls	r3, r3, #8
 8018f60:	f043 020c 	orr.w	r2, r3, #12
 8018f64:	687b      	ldr	r3, [r7, #4]
 8018f66:	605a      	str	r2, [r3, #4]

    /* Waiting for a LNG valid value */
    tickstart =  HAL_GetTick();
 8018f68:	f7f8 fbbc 	bl	80116e4 <HAL_GetTick>
 8018f6c:	60f8      	str	r0, [r7, #12]
    while ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 8018f6e:	e00c      	b.n	8018f8a <LL_DLYB_GetClockPeriod+0x4a>
    {
      if ((HAL_GetTick() - tickstart) >=  DLYB_TIMEOUT)
 8018f70:	f7f8 fbb8 	bl	80116e4 <HAL_GetTick>
 8018f74:	4602      	mov	r2, r0
 8018f76:	68fb      	ldr	r3, [r7, #12]
 8018f78:	1ad3      	subs	r3, r2, r3
 8018f7a:	2bfe      	cmp	r3, #254	; 0xfe
 8018f7c:	d905      	bls.n	8018f8a <LL_DLYB_GetClockPeriod+0x4a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 8018f7e:	687b      	ldr	r3, [r7, #4]
 8018f80:	685b      	ldr	r3, [r3, #4]
 8018f82:	2b00      	cmp	r3, #0
 8018f84:	db01      	blt.n	8018f8a <LL_DLYB_GetClockPeriod+0x4a>
        {
          return (uint32_t) HAL_TIMEOUT;
 8018f86:	2303      	movs	r3, #3
 8018f88:	e042      	b.n	8019010 <LL_DLYB_GetClockPeriod+0xd0>
    while ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 8018f8a:	687b      	ldr	r3, [r7, #4]
 8018f8c:	685b      	ldr	r3, [r3, #4]
 8018f8e:	2b00      	cmp	r3, #0
 8018f90:	daee      	bge.n	8018f70 <LL_DLYB_GetClockPeriod+0x30>
        }
      }
    }

    if ((DLYBx->CFGR & DLYB_LNG_10_0_MASK) != 0U)
 8018f92:	687b      	ldr	r3, [r7, #4]
 8018f94:	685a      	ldr	r2, [r3, #4]
 8018f96:	4b20      	ldr	r3, [pc, #128]	; (8019018 <LL_DLYB_GetClockPeriod+0xd8>)
 8018f98:	4013      	ands	r3, r2
 8018f9a:	2b00      	cmp	r3, #0
 8018f9c:	d006      	beq.n	8018fac <LL_DLYB_GetClockPeriod+0x6c>
    {
      if ((DLYBx->CFGR & (DLYB_CFGR_LNG_11 | DLYB_CFGR_LNG_10)) != DLYB_LNG_11_10_MASK)
 8018f9e:	687b      	ldr	r3, [r7, #4]
 8018fa0:	685b      	ldr	r3, [r3, #4]
 8018fa2:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8018fa6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8018faa:	d106      	bne.n	8018fba <LL_DLYB_GetClockPeriod+0x7a>
      {
        /* Delay line length is configured to one input clock period*/
        break;
      }
    }
    i++;
 8018fac:	697b      	ldr	r3, [r7, #20]
 8018fae:	3301      	adds	r3, #1
 8018fb0:	617b      	str	r3, [r7, #20]
  while (i < DLYB_MAX_UNIT)
 8018fb2:	697b      	ldr	r3, [r7, #20]
 8018fb4:	2b7f      	cmp	r3, #127	; 0x7f
 8018fb6:	d9d1      	bls.n	8018f5c <LL_DLYB_GetClockPeriod+0x1c>
 8018fb8:	e000      	b.n	8018fbc <LL_DLYB_GetClockPeriod+0x7c>
        break;
 8018fba:	bf00      	nop
  }

  if (DLYB_MAX_UNIT != i)
 8018fbc:	697b      	ldr	r3, [r7, #20]
 8018fbe:	2b80      	cmp	r3, #128	; 0x80
 8018fc0:	d022      	beq.n	8019008 <LL_DLYB_GetClockPeriod+0xc8>
  {
    /* Determine how many unit delays (nb) span one input clock period */
    lng = (DLYBx->CFGR & DLYB_CFGR_LNG) >> 16U;
 8018fc2:	687b      	ldr	r3, [r7, #4]
 8018fc4:	685b      	ldr	r3, [r3, #4]
 8018fc6:	0c1b      	lsrs	r3, r3, #16
 8018fc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8018fcc:	60bb      	str	r3, [r7, #8]
    nb = 10U;
 8018fce:	230a      	movs	r3, #10
 8018fd0:	613b      	str	r3, [r7, #16]
    while ((nb > 0U) && ((lng >> nb) == 0U))
 8018fd2:	e002      	b.n	8018fda <LL_DLYB_GetClockPeriod+0x9a>
    {
      nb--;
 8018fd4:	693b      	ldr	r3, [r7, #16]
 8018fd6:	3b01      	subs	r3, #1
 8018fd8:	613b      	str	r3, [r7, #16]
    while ((nb > 0U) && ((lng >> nb) == 0U))
 8018fda:	693b      	ldr	r3, [r7, #16]
 8018fdc:	2b00      	cmp	r3, #0
 8018fde:	d005      	beq.n	8018fec <LL_DLYB_GetClockPeriod+0xac>
 8018fe0:	68ba      	ldr	r2, [r7, #8]
 8018fe2:	693b      	ldr	r3, [r7, #16]
 8018fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8018fe8:	2b00      	cmp	r3, #0
 8018fea:	d0f3      	beq.n	8018fd4 <LL_DLYB_GetClockPeriod+0x94>
    }
    if (nb != 0U)
 8018fec:	693b      	ldr	r3, [r7, #16]
 8018fee:	2b00      	cmp	r3, #0
 8018ff0:	d00a      	beq.n	8019008 <LL_DLYB_GetClockPeriod+0xc8>
    {
      pdlyb_cfg->PhaseSel = nb ;
 8018ff2:	683b      	ldr	r3, [r7, #0]
 8018ff4:	693a      	ldr	r2, [r7, #16]
 8018ff6:	605a      	str	r2, [r3, #4]
      pdlyb_cfg->Units = i ;
 8018ff8:	683b      	ldr	r3, [r7, #0]
 8018ffa:	697a      	ldr	r2, [r7, #20]
 8018ffc:	601a      	str	r2, [r3, #0]

      /* Disable the length sampling */
      DLYBx->CR = DLYB_CR_SEN;
 8018ffe:	687b      	ldr	r3, [r7, #4]
 8019000:	2202      	movs	r2, #2
 8019002:	601a      	str	r2, [r3, #0]

      return (uint32_t)SUCCESS;
 8019004:	2300      	movs	r3, #0
 8019006:	e003      	b.n	8019010 <LL_DLYB_GetClockPeriod+0xd0>
    }
  }

  /* Disable the length sampling */
  DLYBx->CR = DLYB_CR_SEN;
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	2202      	movs	r2, #2
 801900c:	601a      	str	r2, [r3, #0]

  return (uint32_t)ERROR;
 801900e:	2301      	movs	r3, #1

}
 8019010:	4618      	mov	r0, r3
 8019012:	3718      	adds	r7, #24
 8019014:	46bd      	mov	sp, r7
 8019016:	bd80      	pop	{r7, pc}
 8019018:	07ff0000 	.word	0x07ff0000

0801901c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 801901c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8019054 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8019020:	f7f8 fab0 	bl	8011584 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8019024:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8019026:	e003      	b.n	8019030 <LoopCopyDataInit>

08019028 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8019028:	4b0b      	ldr	r3, [pc, #44]	; (8019058 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 801902a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 801902c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 801902e:	3104      	adds	r1, #4

08019030 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8019030:	480a      	ldr	r0, [pc, #40]	; (801905c <LoopForever+0xa>)
	ldr	r3, =_edata
 8019032:	4b0b      	ldr	r3, [pc, #44]	; (8019060 <LoopForever+0xe>)
	adds	r2, r0, r1
 8019034:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8019036:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8019038:	d3f6      	bcc.n	8019028 <CopyDataInit>
	ldr	r2, =_sbss
 801903a:	4a0a      	ldr	r2, [pc, #40]	; (8019064 <LoopForever+0x12>)
	b	LoopFillZerobss
 801903c:	e002      	b.n	8019044 <LoopFillZerobss>

0801903e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 801903e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8019040:	f842 3b04 	str.w	r3, [r2], #4

08019044 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8019044:	4b08      	ldr	r3, [pc, #32]	; (8019068 <LoopForever+0x16>)
	cmp	r2, r3
 8019046:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8019048:	d3f9      	bcc.n	801903e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 801904a:	f004 fc4b 	bl	801d8e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 801904e:	f001 f8ed 	bl	801a22c <main>

08019052 <LoopForever>:

LoopForever:
    b LoopForever
 8019052:	e7fe      	b.n	8019052 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8019054:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8019058:	080388d0 	.word	0x080388d0
	ldr	r0, =_sdata
 801905c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8019060:	200007d0 	.word	0x200007d0
	ldr	r2, =_sbss
 8019064:	200007d0 	.word	0x200007d0
	ldr	r3, = _ebss
 8019068:	20035740 	.word	0x20035740

0801906c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 801906c:	e7fe      	b.n	801906c <ADC1_IRQHandler>
	...

08019070 <AudioRecord_demo>:
  * @brief  Test BSP AUDIO for record.
  * @param  None
  * @retval None
  */
int32_t AudioRecord_demo(void)
{
 8019070:	b580      	push	{r7, lr}
 8019072:	af00      	add	r7, sp, #0
  
  printf("\n******AUDIO IN EXAMPLE******\n");
 8019074:	4824      	ldr	r0, [pc, #144]	; (8019108 <AudioRecord_demo+0x98>)
 8019076:	f004 fc09 	bl	801d88c <puts>
  
  printf("Press USER button to start the example\n");
 801907a:	4824      	ldr	r0, [pc, #144]	; (801910c <AudioRecord_demo+0x9c>)
 801907c:	f004 fc06 	bl	801d88c <puts>
  
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8019080:	2101      	movs	r1, #1
 8019082:	2000      	movs	r0, #0
 8019084:	f7e7 ff3c 	bl	8000f00 <BSP_PB_Init>
  
  
  while (UserButtonPressed == RESET)
 8019088:	bf00      	nop
 801908a:	4b21      	ldr	r3, [pc, #132]	; (8019110 <AudioRecord_demo+0xa0>)
 801908c:	781b      	ldrb	r3, [r3, #0]
 801908e:	b2db      	uxtb	r3, r3
 8019090:	2b00      	cmp	r3, #0
 8019092:	d0fa      	beq.n	801908a <AudioRecord_demo+0x1a>
  {
  }
  UserButtonPressed = RESET;
 8019094:	4b1e      	ldr	r3, [pc, #120]	; (8019110 <AudioRecord_demo+0xa0>)
 8019096:	2200      	movs	r2, #0
 8019098:	701a      	strb	r2, [r3, #0]
  
  /* Initialize record */
  Record_Init();
 801909a:	f000 f849 	bl	8019130 <Record_Init>
  
  /* Start record */
  
  printf("Recording Started..\n");
 801909e:	481d      	ldr	r0, [pc, #116]	; (8019114 <AudioRecord_demo+0xa4>)
 80190a0:	f004 fbf4 	bl	801d88c <puts>
  if (BSP_AUDIO_IN_Record(0, (uint8_t*) RecordBuff, REC_BUFF_SIZE) != BSP_ERROR_NONE)
 80190a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80190a8:	491b      	ldr	r1, [pc, #108]	; (8019118 <AudioRecord_demo+0xa8>)
 80190aa:	2000      	movs	r0, #0
 80190ac:	f7e8 f93c 	bl	8001328 <BSP_AUDIO_IN_Record>
 80190b0:	4603      	mov	r3, r0
 80190b2:	2b00      	cmp	r3, #0
 80190b4:	d007      	beq.n	80190c6 <AudioRecord_demo+0x56>
  {
    printf("AUDIO IN : FAILED.\n");
 80190b6:	4819      	ldr	r0, [pc, #100]	; (801911c <AudioRecord_demo+0xac>)
 80190b8:	f004 fbe8 	bl	801d88c <puts>
    printf("AUDIO IN example Aborted.\n");
 80190bc:	4818      	ldr	r0, [pc, #96]	; (8019120 <AudioRecord_demo+0xb0>)
 80190be:	f004 fbe5 	bl	801d88c <puts>
    Error_Handler();
 80190c2:	f001 f961 	bl	801a388 <Error_Handler>
  }
  
  
  HAL_Delay(3000);
 80190c6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80190ca:	f7f8 fb17 	bl	80116fc <HAL_Delay>
  
  /* Stop playback */
  if (BSP_AUDIO_IN_Stop(0) != BSP_ERROR_NONE)
 80190ce:	2000      	movs	r0, #0
 80190d0:	f7e8 faf4 	bl	80016bc <BSP_AUDIO_IN_Stop>
 80190d4:	4603      	mov	r3, r0
 80190d6:	2b00      	cmp	r3, #0
 80190d8:	d001      	beq.n	80190de <AudioRecord_demo+0x6e>
  {
    Error_Handler();
 80190da:	f001 f955 	bl	801a388 <Error_Handler>
  }
  printf("Recording Stopped.\n");
 80190de:	4811      	ldr	r0, [pc, #68]	; (8019124 <AudioRecord_demo+0xb4>)
 80190e0:	f004 fbd4 	bl	801d88c <puts>
  /* De-initialize record */
  if(BSP_AUDIO_IN_DeInit(0) != BSP_ERROR_NONE)
 80190e4:	2000      	movs	r0, #0
 80190e6:	f7e8 f8c3 	bl	8001270 <BSP_AUDIO_IN_DeInit>
 80190ea:	4603      	mov	r3, r0
 80190ec:	2b00      	cmp	r3, #0
 80190ee:	d001      	beq.n	80190f4 <AudioRecord_demo+0x84>
  {
    Error_Handler();
 80190f0:	f001 f94a 	bl	801a388 <Error_Handler>
  }
  
  /* Reset global variables */
  RecBuffCplt      = 0;
 80190f4:	4b0c      	ldr	r3, [pc, #48]	; (8019128 <AudioRecord_demo+0xb8>)
 80190f6:	2200      	movs	r2, #0
 80190f8:	601a      	str	r2, [r3, #0]
  RecHalfBuffCplt  = 0; 
 80190fa:	4b0c      	ldr	r3, [pc, #48]	; (801912c <AudioRecord_demo+0xbc>)
 80190fc:	2200      	movs	r2, #0
 80190fe:	601a      	str	r2, [r3, #0]
  return 0;
 8019100:	2300      	movs	r3, #0
}
 8019102:	4618      	mov	r0, r3
 8019104:	bd80      	pop	{r7, pc}
 8019106:	bf00      	nop
 8019108:	08021a14 	.word	0x08021a14
 801910c:	08021a34 	.word	0x08021a34
 8019110:	200314e8 	.word	0x200314e8
 8019114:	08021a5c 	.word	0x08021a5c
 8019118:	20003c68 	.word	0x20003c68
 801911c:	08021a70 	.word	0x08021a70
 8019120:	08021a84 	.word	0x08021a84
 8019124:	08021aa0 	.word	0x08021aa0
 8019128:	20007c6c 	.word	0x20007c6c
 801912c:	20007c68 	.word	0x20007c68

08019130 <Record_Init>:
* @brief  Record initialization
* @param  None
* @retval None
*/
static void Record_Init(void)
{
 8019130:	b580      	push	{r7, lr}
 8019132:	b086      	sub	sp, #24
 8019134:	af00      	add	r7, sp, #0
  BSP_AUDIO_Init_t AudioInit;
  
  /* Select device depending on the Instance */
  AudioInit.Device        = AUDIO_IN_DEVICE_DIGITAL_MIC1;
 8019136:	2301      	movs	r3, #1
 8019138:	607b      	str	r3, [r7, #4]
  AudioInit.SampleRate    = AUDIO_FREQUENCY_11K;
 801913a:	f642 3311 	movw	r3, #11025	; 0x2b11
 801913e:	60bb      	str	r3, [r7, #8]
  AudioInit.BitsPerSample = AUDIO_RESOLUTION_16B;
 8019140:	2310      	movs	r3, #16
 8019142:	60fb      	str	r3, [r7, #12]
  AudioInit.ChannelsNbr   = 1;
 8019144:	2301      	movs	r3, #1
 8019146:	613b      	str	r3, [r7, #16]
  AudioInit.Volume        = 100; /* Not used */
 8019148:	2364      	movs	r3, #100	; 0x64
 801914a:	617b      	str	r3, [r7, #20]
  if (BSP_AUDIO_IN_Init(0, &AudioInit) != BSP_ERROR_NONE)
 801914c:	1d3b      	adds	r3, r7, #4
 801914e:	4619      	mov	r1, r3
 8019150:	2000      	movs	r0, #0
 8019152:	f7e7 ff9b 	bl	800108c <BSP_AUDIO_IN_Init>
 8019156:	4603      	mov	r3, r0
 8019158:	2b00      	cmp	r3, #0
 801915a:	d001      	beq.n	8019160 <Record_Init+0x30>
  {
    Error_Handler();
 801915c:	f001 f914 	bl	801a388 <Error_Handler>
  }
}
 8019160:	bf00      	nop
 8019162:	3718      	adds	r7, #24
 8019164:	46bd      	mov	sp, r7
 8019166:	bd80      	pop	{r7, pc}

08019168 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
* @brief  Manage the BSP audio in half transfer complete event.
* @param  Instance Audio in instance.
* @retval None.
*/
void BSP_AUDIO_IN_HalfTransfer_CallBack(uint32_t Instance)
{
 8019168:	b480      	push	{r7}
 801916a:	b083      	sub	sp, #12
 801916c:	af00      	add	r7, sp, #0
 801916e:	6078      	str	r0, [r7, #4]
  RecHalfBuffCplt ++;
 8019170:	4b05      	ldr	r3, [pc, #20]	; (8019188 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x20>)
 8019172:	681b      	ldr	r3, [r3, #0]
 8019174:	3301      	adds	r3, #1
 8019176:	4a04      	ldr	r2, [pc, #16]	; (8019188 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x20>)
 8019178:	6013      	str	r3, [r2, #0]
}
 801917a:	bf00      	nop
 801917c:	370c      	adds	r7, #12
 801917e:	46bd      	mov	sp, r7
 8019180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019184:	4770      	bx	lr
 8019186:	bf00      	nop
 8019188:	20007c68 	.word	0x20007c68

0801918c <BSP_AUDIO_IN_TransferComplete_CallBack>:
* @brief  Manage the BSP audio in transfer complete event.
* @param  Instance Audio in instance.
* @retval None.
*/
void BSP_AUDIO_IN_TransferComplete_CallBack(uint32_t Instance)
{
 801918c:	b480      	push	{r7}
 801918e:	b083      	sub	sp, #12
 8019190:	af00      	add	r7, sp, #0
 8019192:	6078      	str	r0, [r7, #4]
  RecBuffCplt ++;
 8019194:	4b05      	ldr	r3, [pc, #20]	; (80191ac <BSP_AUDIO_IN_TransferComplete_CallBack+0x20>)
 8019196:	681b      	ldr	r3, [r3, #0]
 8019198:	3301      	adds	r3, #1
 801919a:	4a04      	ldr	r2, [pc, #16]	; (80191ac <BSP_AUDIO_IN_TransferComplete_CallBack+0x20>)
 801919c:	6013      	str	r3, [r2, #0]
}
 801919e:	bf00      	nop
 80191a0:	370c      	adds	r7, #12
 80191a2:	46bd      	mov	sp, r7
 80191a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191a8:	4770      	bx	lr
 80191aa:	bf00      	nop
 80191ac:	20007c6c 	.word	0x20007c6c

080191b0 <BSP_AUDIO_IN_Error_CallBack>:
* @brief  Manages the BSP audio in error event.
* @param  Instance Audio in instance.
* @retval None.
*/
void BSP_AUDIO_IN_Error_CallBack(uint32_t Instance)
{
 80191b0:	b580      	push	{r7, lr}
 80191b2:	b082      	sub	sp, #8
 80191b4:	af00      	add	r7, sp, #0
 80191b6:	6078      	str	r0, [r7, #4]
  Error_Handler();
 80191b8:	f001 f8e6 	bl	801a388 <Error_Handler>
}
 80191bc:	bf00      	nop
 80191be:	3708      	adds	r7, #8
 80191c0:	46bd      	mov	sp, r7
 80191c2:	bd80      	pop	{r7, pc}

080191c4 <Button_demo>:
  * @brief  Button example
  * @param  None
  * @retval 0 if ok, else value < 0.
  */
int32_t Button_demo(void)
{
 80191c4:	b580      	push	{r7, lr}
 80191c6:	b082      	sub	sp, #8
 80191c8:	af00      	add	r7, sp, #0
  int32_t  result = 0;
 80191ca:	2300      	movs	r3, #0
 80191cc:	607b      	str	r3, [r7, #4]
  
  printf("\n******BUTTON EXAMPLE******\n");
 80191ce:	483e      	ldr	r0, [pc, #248]	; (80192c8 <Button_demo+0x104>)
 80191d0:	f004 fb5c 	bl	801d88c <puts>

  /* ------------------- */
  /* Button in GPIO mode */
  /* ------------------- */
  /* Initialize buttons */
  if (BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO) != BSP_ERROR_NONE) result--;
 80191d4:	2100      	movs	r1, #0
 80191d6:	2000      	movs	r0, #0
 80191d8:	f7e7 fe92 	bl	8000f00 <BSP_PB_Init>
 80191dc:	4603      	mov	r3, r0
 80191de:	2b00      	cmp	r3, #0
 80191e0:	d002      	beq.n	80191e8 <Button_demo+0x24>
 80191e2:	687b      	ldr	r3, [r7, #4]
 80191e4:	3b01      	subs	r3, #1
 80191e6:	607b      	str	r3, [r7, #4]
  
  /* Check buttons state */
  if (BSP_PB_GetState(BUTTON_USER) != RESET) result--;
 80191e8:	2000      	movs	r0, #0
 80191ea:	f7e7 ff31 	bl	8001050 <BSP_PB_GetState>
 80191ee:	4603      	mov	r3, r0
 80191f0:	2b00      	cmp	r3, #0
 80191f2:	d002      	beq.n	80191fa <Button_demo+0x36>
 80191f4:	687b      	ldr	r3, [r7, #4]
 80191f6:	3b01      	subs	r3, #1
 80191f8:	607b      	str	r3, [r7, #4]
  
  /* Ask user to press buttons and check results */
  printf("Please press User button (GPIO mode)\n");
 80191fa:	4834      	ldr	r0, [pc, #208]	; (80192cc <Button_demo+0x108>)
 80191fc:	f004 fb46 	bl	801d88c <puts>
  while (BSP_PB_GetState(BUTTON_USER) != 1);
 8019200:	bf00      	nop
 8019202:	2000      	movs	r0, #0
 8019204:	f7e7 ff24 	bl	8001050 <BSP_PB_GetState>
 8019208:	4603      	mov	r3, r0
 801920a:	2b01      	cmp	r3, #1
 801920c:	d1f9      	bne.n	8019202 <Button_demo+0x3e>
  printf("user button pressed\n");
 801920e:	4830      	ldr	r0, [pc, #192]	; (80192d0 <Button_demo+0x10c>)
 8019210:	f004 fb3c 	bl	801d88c <puts>
  
  /* De-initialize buttons */
  if (BSP_PB_DeInit(BUTTON_USER) != BSP_ERROR_NONE) result--;
 8019214:	2000      	movs	r0, #0
 8019216:	f7e7 fef5 	bl	8001004 <BSP_PB_DeInit>
 801921a:	4603      	mov	r3, r0
 801921c:	2b00      	cmp	r3, #0
 801921e:	d002      	beq.n	8019226 <Button_demo+0x62>
 8019220:	687b      	ldr	r3, [r7, #4]
 8019222:	3b01      	subs	r3, #1
 8019224:	607b      	str	r3, [r7, #4]

  HAL_Delay(1000);
 8019226:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801922a:	f7f8 fa67 	bl	80116fc <HAL_Delay>
  
  /* ------------------- */
  /* Button in EXTI mode */
  /* ------------------- */
  /* Initialize buttons */
  UserButtonPressed = RESET;
 801922e:	4b29      	ldr	r3, [pc, #164]	; (80192d4 <Button_demo+0x110>)
 8019230:	2200      	movs	r2, #0
 8019232:	701a      	strb	r2, [r3, #0]
  if (BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI) != BSP_ERROR_NONE) result--;
 8019234:	2101      	movs	r1, #1
 8019236:	2000      	movs	r0, #0
 8019238:	f7e7 fe62 	bl	8000f00 <BSP_PB_Init>
 801923c:	4603      	mov	r3, r0
 801923e:	2b00      	cmp	r3, #0
 8019240:	d002      	beq.n	8019248 <Button_demo+0x84>
 8019242:	687b      	ldr	r3, [r7, #4]
 8019244:	3b01      	subs	r3, #1
 8019246:	607b      	str	r3, [r7, #4]
  
  /* Check buttons state */
  if (BSP_PB_GetState(BUTTON_USER) != RESET) result--;
 8019248:	2000      	movs	r0, #0
 801924a:	f7e7 ff01 	bl	8001050 <BSP_PB_GetState>
 801924e:	4603      	mov	r3, r0
 8019250:	2b00      	cmp	r3, #0
 8019252:	d002      	beq.n	801925a <Button_demo+0x96>
 8019254:	687b      	ldr	r3, [r7, #4]
 8019256:	3b01      	subs	r3, #1
 8019258:	607b      	str	r3, [r7, #4]
  
  /* Ask user to press buttons and check results */
  printf("Please press User button (EXTI mode)\n");
 801925a:	481f      	ldr	r0, [pc, #124]	; (80192d8 <Button_demo+0x114>)
 801925c:	f004 fb16 	bl	801d88c <puts>
  while (UserButtonPressed == RESET);
 8019260:	bf00      	nop
 8019262:	4b1c      	ldr	r3, [pc, #112]	; (80192d4 <Button_demo+0x110>)
 8019264:	781b      	ldrb	r3, [r3, #0]
 8019266:	b2db      	uxtb	r3, r3
 8019268:	2b00      	cmp	r3, #0
 801926a:	d0fa      	beq.n	8019262 <Button_demo+0x9e>
  printf("User button pressed\n");
 801926c:	481b      	ldr	r0, [pc, #108]	; (80192dc <Button_demo+0x118>)
 801926e:	f004 fb0d 	bl	801d88c <puts>
  
  HAL_Delay(1000);
 8019272:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8019276:	f7f8 fa41 	bl	80116fc <HAL_Delay>
  UserButtonPressed = RESET;
 801927a:	4b16      	ldr	r3, [pc, #88]	; (80192d4 <Button_demo+0x110>)
 801927c:	2200      	movs	r2, #0
 801927e:	701a      	strb	r2, [r3, #0]

  /* Re-ask user to press buttons and check results */
  printf("Please press one more time User button\n");
 8019280:	4817      	ldr	r0, [pc, #92]	; (80192e0 <Button_demo+0x11c>)
 8019282:	f004 fb03 	bl	801d88c <puts>
  while (UserButtonPressed == RESET);
 8019286:	bf00      	nop
 8019288:	4b12      	ldr	r3, [pc, #72]	; (80192d4 <Button_demo+0x110>)
 801928a:	781b      	ldrb	r3, [r3, #0]
 801928c:	b2db      	uxtb	r3, r3
 801928e:	2b00      	cmp	r3, #0
 8019290:	d0fa      	beq.n	8019288 <Button_demo+0xc4>
  printf("User button pressed\n");
 8019292:	4812      	ldr	r0, [pc, #72]	; (80192dc <Button_demo+0x118>)
 8019294:	f004 fafa 	bl	801d88c <puts>

  HAL_Delay(1000);
 8019298:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801929c:	f7f8 fa2e 	bl	80116fc <HAL_Delay>
  UserButtonPressed = RESET;
 80192a0:	4b0c      	ldr	r3, [pc, #48]	; (80192d4 <Button_demo+0x110>)
 80192a2:	2200      	movs	r2, #0
 80192a4:	701a      	strb	r2, [r3, #0]

  /* De-initialize buttons */
  if (BSP_PB_DeInit(BUTTON_USER) != BSP_ERROR_NONE) result--;
 80192a6:	2000      	movs	r0, #0
 80192a8:	f7e7 feac 	bl	8001004 <BSP_PB_DeInit>
 80192ac:	4603      	mov	r3, r0
 80192ae:	2b00      	cmp	r3, #0
 80192b0:	d002      	beq.n	80192b8 <Button_demo+0xf4>
 80192b2:	687b      	ldr	r3, [r7, #4]
 80192b4:	3b01      	subs	r3, #1
 80192b6:	607b      	str	r3, [r7, #4]

  printf("Button Example Ended\n");
 80192b8:	480a      	ldr	r0, [pc, #40]	; (80192e4 <Button_demo+0x120>)
 80192ba:	f004 fae7 	bl	801d88c <puts>
  return result;
 80192be:	687b      	ldr	r3, [r7, #4]
}
 80192c0:	4618      	mov	r0, r3
 80192c2:	3708      	adds	r7, #8
 80192c4:	46bd      	mov	sp, r7
 80192c6:	bd80      	pop	{r7, pc}
 80192c8:	08021ab4 	.word	0x08021ab4
 80192cc:	08021ad0 	.word	0x08021ad0
 80192d0:	08021af8 	.word	0x08021af8
 80192d4:	200314e8 	.word	0x200314e8
 80192d8:	08021b0c 	.word	0x08021b0c
 80192dc:	08021b34 	.word	0x08021b34
 80192e0:	08021b48 	.word	0x08021b48
 80192e4:	08021b70 	.word	0x08021b70

080192e8 <Camera_demo>:
  * @brief  Camera demo
  * @param  None
  * @retval None
  */
int32_t Camera_demo(void)
{
 80192e8:	b580      	push	{r7, lr}
 80192ea:	b082      	sub	sp, #8
 80192ec:	af00      	add	r7, sp, #0
  int32_t   result = 0;
 80192ee:	2300      	movs	r3, #0
 80192f0:	607b      	str	r3, [r7, #4]
  
  printf("\n******CAMERA EXAMPLE******\n");
 80192f2:	4827      	ldr	r0, [pc, #156]	; (8019390 <Camera_demo+0xa8>)
 80192f4:	f004 faca 	bl	801d88c <puts>

  /* Initialize the Camera */
  if(BSP_CAMERA_Init(0, CAMERA_R320x240, CAMERA_PF_RGB565) != BSP_ERROR_NONE)
 80192f8:	2200      	movs	r2, #0
 80192fa:	2101      	movs	r1, #1
 80192fc:	2000      	movs	r0, #0
 80192fe:	f7e9 fcb9 	bl	8002c74 <BSP_CAMERA_Init>
 8019302:	4603      	mov	r3, r0
 8019304:	2b00      	cmp	r3, #0
 8019306:	d007      	beq.n	8019318 <Camera_demo+0x30>
  {
    printf("VERIFY THAT CAMERA IS CONNECTED!\n");    
 8019308:	4822      	ldr	r0, [pc, #136]	; (8019394 <Camera_demo+0xac>)
 801930a:	f004 fabf 	bl	801d88c <puts>
    printf("TEST ABORTED\n");
 801930e:	4822      	ldr	r0, [pc, #136]	; (8019398 <Camera_demo+0xb0>)
 8019310:	f004 fabc 	bl	801d88c <puts>

    return 0;
 8019314:	2300      	movs	r3, #0
 8019316:	e037      	b.n	8019388 <Camera_demo+0xa0>
  }
  
  else
  {
    printf("CAMERA CONTINUOUS MODE\n");
 8019318:	4820      	ldr	r0, [pc, #128]	; (801939c <Camera_demo+0xb4>)
 801931a:	f004 fab7 	bl	801d88c <puts>
    /* Wait for the camera initialization after HW reset*/
    HAL_Delay(100);
 801931e:	2064      	movs	r0, #100	; 0x64
 8019320:	f7f8 f9ec 	bl	80116fc <HAL_Delay>

    if(BSP_CAMERA_GetCapabilities(0, &Cap) != BSP_ERROR_NONE) result--;
 8019324:	491e      	ldr	r1, [pc, #120]	; (80193a0 <Camera_demo+0xb8>)
 8019326:	2000      	movs	r0, #0
 8019328:	f7e9 fde0 	bl	8002eec <BSP_CAMERA_GetCapabilities>
 801932c:	4603      	mov	r3, r0
 801932e:	2b00      	cmp	r3, #0
 8019330:	d002      	beq.n	8019338 <Camera_demo+0x50>
 8019332:	687b      	ldr	r3, [r7, #4]
 8019334:	3b01      	subs	r3, #1
 8019336:	607b      	str	r3, [r7, #4]

    /* Start the Camera Capture */
    if(BSP_CAMERA_Start(0, (uint8_t *)CameraBuf, CAMERA_MODE_CONTINUOUS)) result--;
 8019338:	2200      	movs	r2, #0
 801933a:	491a      	ldr	r1, [pc, #104]	; (80193a4 <Camera_demo+0xbc>)
 801933c:	2000      	movs	r0, #0
 801933e:	f7e9 fd7d 	bl	8002e3c <BSP_CAMERA_Start>
 8019342:	4603      	mov	r3, r0
 8019344:	2b00      	cmp	r3, #0
 8019346:	d002      	beq.n	801934e <Camera_demo+0x66>
 8019348:	687b      	ldr	r3, [r7, #4]
 801934a:	3b01      	subs	r3, #1
 801934c:	607b      	str	r3, [r7, #4]
    HAL_Delay(500);
 801934e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8019352:	f7f8 f9d3 	bl	80116fc <HAL_Delay>
  }

  printf("Camera is capturing and buffer is stored in CameraBuf\n");
 8019356:	4814      	ldr	r0, [pc, #80]	; (80193a8 <Camera_demo+0xc0>)
 8019358:	f004 fa98 	bl	801d88c <puts>
  HAL_Delay(2000);
 801935c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8019360:	f7f8 f9cc 	bl	80116fc <HAL_Delay>
  
  BSP_CAMERA_Stop(0);
 8019364:	2000      	movs	r0, #0
 8019366:	f7e9 fda3 	bl	8002eb0 <BSP_CAMERA_Stop>
  BSP_CAMERA_DeInit(0);
 801936a:	2000      	movs	r0, #0
 801936c:	f7e9 fcf2 	bl	8002d54 <BSP_CAMERA_DeInit>

 if (CheckResult() != 0U) result--;
 8019370:	f001 f81a 	bl	801a3a8 <CheckResult>
 8019374:	4603      	mov	r3, r0
 8019376:	2b00      	cmp	r3, #0
 8019378:	d002      	beq.n	8019380 <Camera_demo+0x98>
 801937a:	687b      	ldr	r3, [r7, #4]
 801937c:	3b01      	subs	r3, #1
 801937e:	607b      	str	r3, [r7, #4]

  printf("Camera Example Ended\n");
 8019380:	480a      	ldr	r0, [pc, #40]	; (80193ac <Camera_demo+0xc4>)
 8019382:	f004 fa83 	bl	801d88c <puts>
  return result;
 8019386:	687b      	ldr	r3, [r7, #4]
}
 8019388:	4618      	mov	r0, r3
 801938a:	3708      	adds	r7, #8
 801938c:	46bd      	mov	sp, r7
 801938e:	bd80      	pop	{r7, pc}
 8019390:	08021b88 	.word	0x08021b88
 8019394:	08021ba4 	.word	0x08021ba4
 8019398:	08021bc8 	.word	0x08021bc8
 801939c:	08021bd8 	.word	0x08021bd8
 80193a0:	2002d470 	.word	0x2002d470
 80193a4:	20007c70 	.word	0x20007c70
 80193a8:	08021bf0 	.word	0x08021bf0
 80193ac:	08021c28 	.word	0x08021c28

080193b0 <EEPROM_demo>:
  * @brief  EEPROM Demo
  * @param  None
  * @retval None
  */
int32_t EEPROM_demo (void)
{
 80193b0:	b580      	push	{r7, lr}
 80193b2:	af00      	add	r7, sp, #0
  printf("Press USER button to start the example\n");
 80193b4:	4812      	ldr	r0, [pc, #72]	; (8019400 <EEPROM_demo+0x50>)
 80193b6:	f004 fa69 	bl	801d88c <puts>

  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80193ba:	2101      	movs	r1, #1
 80193bc:	2000      	movs	r0, #0
 80193be:	f7e7 fd9f 	bl	8000f00 <BSP_PB_Init>
  EepromFeature = 0;
 80193c2:	4b10      	ldr	r3, [pc, #64]	; (8019404 <EEPROM_demo+0x54>)
 80193c4:	2200      	movs	r2, #0
 80193c6:	701a      	strb	r2, [r3, #0]

  while (1)
  {
    if(UserButtonPressed == SET)
 80193c8:	4b0f      	ldr	r3, [pc, #60]	; (8019408 <EEPROM_demo+0x58>)
 80193ca:	781b      	ldrb	r3, [r3, #0]
 80193cc:	b2db      	uxtb	r3, r3
 80193ce:	2b01      	cmp	r3, #1
 80193d0:	d1fa      	bne.n	80193c8 <EEPROM_demo+0x18>
    {
      UserButtonPressed = RESET;
 80193d2:	4b0d      	ldr	r3, [pc, #52]	; (8019408 <EEPROM_demo+0x58>)
 80193d4:	2200      	movs	r2, #0
 80193d6:	701a      	strb	r2, [r3, #0]
      if(EepromFeature < EEPROM_FEATURES_NUM)
 80193d8:	4b0a      	ldr	r3, [pc, #40]	; (8019404 <EEPROM_demo+0x54>)
 80193da:	781b      	ldrb	r3, [r3, #0]
 80193dc:	2b02      	cmp	r3, #2
 80193de:	d809      	bhi.n	80193f4 <EEPROM_demo+0x44>
      {
        EEPROM_Show_Feature(EepromFeature++);
 80193e0:	4b08      	ldr	r3, [pc, #32]	; (8019404 <EEPROM_demo+0x54>)
 80193e2:	781b      	ldrb	r3, [r3, #0]
 80193e4:	1c5a      	adds	r2, r3, #1
 80193e6:	b2d1      	uxtb	r1, r2
 80193e8:	4a06      	ldr	r2, [pc, #24]	; (8019404 <EEPROM_demo+0x54>)
 80193ea:	7011      	strb	r1, [r2, #0]
 80193ec:	4618      	mov	r0, r3
 80193ee:	f000 f80d 	bl	801940c <EEPROM_Show_Feature>
 80193f2:	e7e9      	b.n	80193c8 <EEPROM_demo+0x18>
      }
      else
      {
        UserButtonPressed = RESET;
 80193f4:	4b04      	ldr	r3, [pc, #16]	; (8019408 <EEPROM_demo+0x58>)
 80193f6:	2200      	movs	r2, #0
 80193f8:	701a      	strb	r2, [r3, #0]
        return 0;
 80193fa:	2300      	movs	r3, #0
      }
    }
  }
}
 80193fc:	4618      	mov	r0, r3
 80193fe:	bd80      	pop	{r7, pc}
 8019400:	08021c40 	.word	0x08021c40
 8019404:	2002d498 	.word	0x2002d498
 8019408:	200314e8 	.word	0x200314e8

0801940c <EEPROM_Show_Feature>:
  * @brief  Show EEPROM Features
  * @param  feature : feature index
  * @retval None
  */
static void EEPROM_Show_Feature(uint8_t feature)
{
 801940c:	b580      	push	{r7, lr}
 801940e:	b086      	sub	sp, #24
 8019410:	af00      	add	r7, sp, #0
 8019412:	4603      	mov	r3, r0
 8019414:	71fb      	strb	r3, [r7, #7]
  __IO TestStatus TransferStatus1 = FAILED;
 8019416:	2300      	movs	r3, #0
 8019418:	74fb      	strb	r3, [r7, #19]
  __IO uint32_t NumDataRead = 0;
 801941a:	2300      	movs	r3, #0
 801941c:	60fb      	str	r3, [r7, #12]

  /* Initialize the EEPROM driver --------------------------------------------*/
  if (BSP_EEPROM_Init(0) != BSP_ERROR_NONE)
 801941e:	2000      	movs	r0, #0
 8019420:	f7ea f8c8 	bl	80035b4 <BSP_EEPROM_Init>
 8019424:	4603      	mov	r3, r0
 8019426:	2b00      	cmp	r3, #0
 8019428:	d003      	beq.n	8019432 <EEPROM_Show_Feature+0x26>
  {
    printf("Initialization problem\n");
 801942a:	4868      	ldr	r0, [pc, #416]	; (80195cc <EEPROM_Show_Feature+0x1c0>)
 801942c:	f004 fa2e 	bl	801d88c <puts>
    return;
 8019430:	e0c9      	b.n	80195c6 <EEPROM_Show_Feature+0x1ba>
  }

  switch (feature)
 8019432:	79fb      	ldrb	r3, [r7, #7]
 8019434:	2b02      	cmp	r3, #2
 8019436:	d06f      	beq.n	8019518 <EEPROM_Show_Feature+0x10c>
 8019438:	2b02      	cmp	r3, #2
 801943a:	f300 80c4 	bgt.w	80195c6 <EEPROM_Show_Feature+0x1ba>
 801943e:	2b00      	cmp	r3, #0
 8019440:	d002      	beq.n	8019448 <EEPROM_Show_Feature+0x3c>
 8019442:	2b01      	cmp	r3, #1
 8019444:	d020      	beq.n	8019488 <EEPROM_Show_Feature+0x7c>
 8019446:	e0be      	b.n	80195c6 <EEPROM_Show_Feature+0x1ba>
  {
  case 0:
    /* Read old parameter in EEPROM */
    if(BSP_EEPROM_IsDeviceReady(0) == BSP_ERROR_NONE)
 8019448:	2000      	movs	r0, #0
 801944a:	f7ea fa59 	bl	8003900 <BSP_EEPROM_IsDeviceReady>
 801944e:	4603      	mov	r3, r0
 8019450:	2b00      	cmp	r3, #0
 8019452:	d115      	bne.n	8019480 <EEPROM_Show_Feature+0x74>
    {
      /* Set the Number of data to be read */
      NumDataRead = BUFFER_SIZE;
 8019454:	232e      	movs	r3, #46	; 0x2e
 8019456:	60fb      	str	r3, [r7, #12]

      /* Read from EEPROM from EEPROM_READ_ADDRESS1 */
      if (BSP_EEPROM_ReadBuffer(0, (uint8_t*)RxBuffer, EEPROM_READ_ADDRESS1, NumDataRead) != BSP_ERROR_NONE)
 8019458:	68fb      	ldr	r3, [r7, #12]
 801945a:	2200      	movs	r2, #0
 801945c:	495c      	ldr	r1, [pc, #368]	; (80195d0 <EEPROM_Show_Feature+0x1c4>)
 801945e:	2000      	movs	r0, #0
 8019460:	f7ea f92c 	bl	80036bc <BSP_EEPROM_ReadBuffer>
 8019464:	4603      	mov	r3, r0
 8019466:	2b00      	cmp	r3, #0
 8019468:	d003      	beq.n	8019472 <EEPROM_Show_Feature+0x66>
      {
        printf("Init issue at read old data\n");
 801946a:	485a      	ldr	r0, [pc, #360]	; (80195d4 <EEPROM_Show_Feature+0x1c8>)
 801946c:	f004 fa0e 	bl	801d88c <puts>
        return;
 8019470:	e0a9      	b.n	80195c6 <EEPROM_Show_Feature+0x1ba>
      }
      printf("String read in the current EEPROM selected:\n");
 8019472:	4859      	ldr	r0, [pc, #356]	; (80195d8 <EEPROM_Show_Feature+0x1cc>)
 8019474:	f004 fa0a 	bl	801d88c <puts>
      printf("%s\n", RxBuffer);
 8019478:	4855      	ldr	r0, [pc, #340]	; (80195d0 <EEPROM_Show_Feature+0x1c4>)
 801947a:	f004 fa07 	bl	801d88c <puts>
    else
    {
      printf("Problem to communicate with EEPROM\n");
    }

    break;
 801947e:	e0a2      	b.n	80195c6 <EEPROM_Show_Feature+0x1ba>
      printf("Problem to communicate with EEPROM\n");
 8019480:	4856      	ldr	r0, [pc, #344]	; (80195dc <EEPROM_Show_Feature+0x1d0>)
 8019482:	f004 fa03 	bl	801d88c <puts>
    break;
 8019486:	e09e      	b.n	80195c6 <EEPROM_Show_Feature+0x1ba>

  case 1:
     /* Write new parameter in EEPROM */
    if(BSP_EEPROM_IsDeviceReady(0) == BSP_ERROR_NONE)
 8019488:	2000      	movs	r0, #0
 801948a:	f7ea fa39 	bl	8003900 <BSP_EEPROM_IsDeviceReady>
 801948e:	4603      	mov	r3, r0
 8019490:	2b00      	cmp	r3, #0
 8019492:	d13d      	bne.n	8019510 <EEPROM_Show_Feature+0x104>
    {
      FillBuffer((uint8_t*)Tx2Buffer, 0x21, BUFFER_SIZE1);
 8019494:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8019498:	2121      	movs	r1, #33	; 0x21
 801949a:	4851      	ldr	r0, [pc, #324]	; (80195e0 <EEPROM_Show_Feature+0x1d4>)
 801949c:	f000 f8e4 	bl	8019668 <FillBuffer>

      printf("Writing data to memory ...\n");
 80194a0:	4850      	ldr	r0, [pc, #320]	; (80195e4 <EEPROM_Show_Feature+0x1d8>)
 80194a2:	f004 f9f3 	bl	801d88c <puts>
      /* First write in the memory followed by a read of the written data ----*/
      /* Write on EEPROM to EEPROM_WRITE_ADDRESS1 */
      if (BSP_EEPROM_WriteBuffer(0, (uint8_t*)Tx2Buffer, EEPROM_WRITE_ADDRESS1, BUFFER_SIZE1) != BSP_ERROR_NONE)
 80194a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80194aa:	2200      	movs	r2, #0
 80194ac:	494c      	ldr	r1, [pc, #304]	; (80195e0 <EEPROM_Show_Feature+0x1d4>)
 80194ae:	2000      	movs	r0, #0
 80194b0:	f7ea f92e 	bl	8003710 <BSP_EEPROM_WriteBuffer>
 80194b4:	4603      	mov	r3, r0
 80194b6:	2b00      	cmp	r3, #0
 80194b8:	d003      	beq.n	80194c2 <EEPROM_Show_Feature+0xb6>
      {
        printf("Init issue at write\n");
 80194ba:	484b      	ldr	r0, [pc, #300]	; (80195e8 <EEPROM_Show_Feature+0x1dc>)
 80194bc:	f004 f9e6 	bl	801d88c <puts>
        return;
 80194c0:	e081      	b.n	80195c6 <EEPROM_Show_Feature+0x1ba>
      }

      /* Set the Number of data to be read */
      NumDataRead = (uint32_t)BUFFER_SIZE1;
 80194c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80194c6:	60fb      	str	r3, [r7, #12]

      /* Read from I2C EEPROM from EEPROM_READ_ADDRESS1 */
      if (BSP_EEPROM_ReadBuffer(0, (uint8_t*)Rx1Buffer, EEPROM_READ_ADDRESS1, NumDataRead) != BSP_ERROR_NONE)
 80194c8:	68fb      	ldr	r3, [r7, #12]
 80194ca:	2200      	movs	r2, #0
 80194cc:	4947      	ldr	r1, [pc, #284]	; (80195ec <EEPROM_Show_Feature+0x1e0>)
 80194ce:	2000      	movs	r0, #0
 80194d0:	f7ea f8f4 	bl	80036bc <BSP_EEPROM_ReadBuffer>
 80194d4:	4603      	mov	r3, r0
 80194d6:	2b00      	cmp	r3, #0
 80194d8:	d003      	beq.n	80194e2 <EEPROM_Show_Feature+0xd6>
      {
        printf("Init issue at read\n");
 80194da:	4845      	ldr	r0, [pc, #276]	; (80195f0 <EEPROM_Show_Feature+0x1e4>)
 80194dc:	f004 f9d6 	bl	801d88c <puts>
        return;
 80194e0:	e071      	b.n	80195c6 <EEPROM_Show_Feature+0x1ba>
      }

      /* Check if the data written to the memory is read correctly */
      TransferStatus1 = Buffercmp((uint8_t*)Tx2Buffer, (uint8_t*)Rx1Buffer, BUFFER_SIZE1);
 80194e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80194e6:	4941      	ldr	r1, [pc, #260]	; (80195ec <EEPROM_Show_Feature+0x1e0>)
 80194e8:	483d      	ldr	r0, [pc, #244]	; (80195e0 <EEPROM_Show_Feature+0x1d4>)
 80194ea:	f000 f89b 	bl	8019624 <Buffercmp>
 80194ee:	4603      	mov	r3, r0
 80194f0:	74fb      	strb	r3, [r7, #19]
      if(TransferStatus1 != FAILED)
 80194f2:	7cfb      	ldrb	r3, [r7, #19]
 80194f4:	b2db      	uxtb	r3, r3
 80194f6:	2b00      	cmp	r3, #0
 80194f8:	d006      	beq.n	8019508 <EEPROM_Show_Feature+0xfc>
      {
        printf("String writes in the current EEPROM selected:\n");
 80194fa:	483e      	ldr	r0, [pc, #248]	; (80195f4 <EEPROM_Show_Feature+0x1e8>)
 80194fc:	f004 f9c6 	bl	801d88c <puts>
        printf("READ/WRITE SUCCECC\n");
 8019500:	483d      	ldr	r0, [pc, #244]	; (80195f8 <EEPROM_Show_Feature+0x1ec>)
 8019502:	f004 f9c3 	bl	801d88c <puts>
    }
    else
    {
      printf("Problem to communicate\n");
    }
    break;
 8019506:	e05e      	b.n	80195c6 <EEPROM_Show_Feature+0x1ba>
        printf("FAILED to write!\n");
 8019508:	483c      	ldr	r0, [pc, #240]	; (80195fc <EEPROM_Show_Feature+0x1f0>)
 801950a:	f004 f9bf 	bl	801d88c <puts>
    break;
 801950e:	e05a      	b.n	80195c6 <EEPROM_Show_Feature+0x1ba>
      printf("Problem to communicate\n");
 8019510:	483b      	ldr	r0, [pc, #236]	; (8019600 <EEPROM_Show_Feature+0x1f4>)
 8019512:	f004 f9bb 	bl	801d88c <puts>
    break;
 8019516:	e056      	b.n	80195c6 <EEPROM_Show_Feature+0x1ba>
  case 2:
    if(BSP_EEPROM_IsDeviceReady(0) == BSP_ERROR_NONE)
 8019518:	2000      	movs	r0, #0
 801951a:	f7ea f9f1 	bl	8003900 <BSP_EEPROM_IsDeviceReady>
 801951e:	4603      	mov	r3, r0
 8019520:	2b00      	cmp	r3, #0
 8019522:	d13d      	bne.n	80195a0 <EEPROM_Show_Feature+0x194>
    {
      FillBuffer((uint8_t*)Tx2Buffer, 0xAA, EEPROM_PAGESIZE);
 8019524:	2240      	movs	r2, #64	; 0x40
 8019526:	21aa      	movs	r1, #170	; 0xaa
 8019528:	482d      	ldr	r0, [pc, #180]	; (80195e0 <EEPROM_Show_Feature+0x1d4>)
 801952a:	f000 f89d 	bl	8019668 <FillBuffer>

      for(uint32_t i = 0; i < 128; i++)
 801952e:	2300      	movs	r3, #0
 8019530:	617b      	str	r3, [r7, #20]
 8019532:	e031      	b.n	8019598 <EEPROM_Show_Feature+0x18c>
      {
        /* First write in the memory followed by a read of the written data ----*/
        /* Write on EEPROM to EEPROM_WRITE_ADDRESS1 */
        if (BSP_EEPROM_WritePage(0, (uint8_t*)Tx2Buffer, i) != BSP_ERROR_NONE)
 8019534:	697a      	ldr	r2, [r7, #20]
 8019536:	492a      	ldr	r1, [pc, #168]	; (80195e0 <EEPROM_Show_Feature+0x1d4>)
 8019538:	2000      	movs	r0, #0
 801953a:	f7ea f855 	bl	80035e8 <BSP_EEPROM_WritePage>
 801953e:	4603      	mov	r3, r0
 8019540:	2b00      	cmp	r3, #0
 8019542:	d003      	beq.n	801954c <EEPROM_Show_Feature+0x140>
        {
          printf("Init issue at write page\n");
 8019544:	482f      	ldr	r0, [pc, #188]	; (8019604 <EEPROM_Show_Feature+0x1f8>)
 8019546:	f004 f9a1 	bl	801d88c <puts>
          return;
 801954a:	e03c      	b.n	80195c6 <EEPROM_Show_Feature+0x1ba>
        }

        /* Read from I2C EEPROM from EEPROM_READ_ADDRESS1 */
        if (BSP_EEPROM_ReadPage(0, (uint8_t*)Rx1Buffer, i) != BSP_ERROR_NONE)
 801954c:	697a      	ldr	r2, [r7, #20]
 801954e:	4927      	ldr	r1, [pc, #156]	; (80195ec <EEPROM_Show_Feature+0x1e0>)
 8019550:	2000      	movs	r0, #0
 8019552:	f7ea f883 	bl	800365c <BSP_EEPROM_ReadPage>
 8019556:	4603      	mov	r3, r0
 8019558:	2b00      	cmp	r3, #0
 801955a:	d003      	beq.n	8019564 <EEPROM_Show_Feature+0x158>
        {
          printf("Init issue at read page\n");
 801955c:	482a      	ldr	r0, [pc, #168]	; (8019608 <EEPROM_Show_Feature+0x1fc>)
 801955e:	f004 f995 	bl	801d88c <puts>
          return;
 8019562:	e030      	b.n	80195c6 <EEPROM_Show_Feature+0x1ba>
        }

        /* Check if the data written to the memory is read correctly */
        TransferStatus1 = Buffercmp((uint8_t*)Tx2Buffer, (uint8_t*)Rx1Buffer, EEPROM_PAGESIZE);
 8019564:	2240      	movs	r2, #64	; 0x40
 8019566:	4921      	ldr	r1, [pc, #132]	; (80195ec <EEPROM_Show_Feature+0x1e0>)
 8019568:	481d      	ldr	r0, [pc, #116]	; (80195e0 <EEPROM_Show_Feature+0x1d4>)
 801956a:	f000 f85b 	bl	8019624 <Buffercmp>
 801956e:	4603      	mov	r3, r0
 8019570:	74fb      	strb	r3, [r7, #19]
        if(TransferStatus1 != FAILED)
 8019572:	7cfb      	ldrb	r3, [r7, #19]
 8019574:	b2db      	uxtb	r3, r3
 8019576:	2b00      	cmp	r3, #0
 8019578:	d007      	beq.n	801958a <EEPROM_Show_Feature+0x17e>
        {
          printf("String writes in the current EEPROM selected:\n");
 801957a:	481e      	ldr	r0, [pc, #120]	; (80195f4 <EEPROM_Show_Feature+0x1e8>)
 801957c:	f004 f986 	bl	801d88c <puts>
          printf("READ/WRITE PAGE %u  SUCCEEDED\n", i);
 8019580:	6979      	ldr	r1, [r7, #20]
 8019582:	4822      	ldr	r0, [pc, #136]	; (801960c <EEPROM_Show_Feature+0x200>)
 8019584:	f004 f914 	bl	801d7b0 <iprintf>
 8019588:	e003      	b.n	8019592 <EEPROM_Show_Feature+0x186>
        }
        else
        {
          printf("READ/WRITE PAGE %u  FAILED\n", i);
 801958a:	6979      	ldr	r1, [r7, #20]
 801958c:	4820      	ldr	r0, [pc, #128]	; (8019610 <EEPROM_Show_Feature+0x204>)
 801958e:	f004 f90f 	bl	801d7b0 <iprintf>
      for(uint32_t i = 0; i < 128; i++)
 8019592:	697b      	ldr	r3, [r7, #20]
 8019594:	3301      	adds	r3, #1
 8019596:	617b      	str	r3, [r7, #20]
 8019598:	697b      	ldr	r3, [r7, #20]
 801959a:	2b7f      	cmp	r3, #127	; 0x7f
 801959c:	d9ca      	bls.n	8019534 <EEPROM_Show_Feature+0x128>
 801959e:	e005      	b.n	80195ac <EEPROM_Show_Feature+0x1a0>
        }
      }
    }
    else
    {
      printf("Problem to communicate again with EEPROM\n");
 80195a0:	481c      	ldr	r0, [pc, #112]	; (8019614 <EEPROM_Show_Feature+0x208>)
 80195a2:	f004 f973 	bl	801d88c <puts>
      printf("Press TAMPER button to end test\n");
 80195a6:	481c      	ldr	r0, [pc, #112]	; (8019618 <EEPROM_Show_Feature+0x20c>)
 80195a8:	f004 f970 	bl	801d88c <puts>
    }

    /* Tx1Buffer to the EEPROM */
    if (BSP_EEPROM_WriteBuffer(0, (uint8_t*)Tx1Buffer, EEPROM_WRITE_ADDRESS1, BUFFER_SIZE) != BSP_ERROR_NONE)
 80195ac:	232e      	movs	r3, #46	; 0x2e
 80195ae:	2200      	movs	r2, #0
 80195b0:	491a      	ldr	r1, [pc, #104]	; (801961c <EEPROM_Show_Feature+0x210>)
 80195b2:	2000      	movs	r0, #0
 80195b4:	f7ea f8ac 	bl	8003710 <BSP_EEPROM_WriteBuffer>
 80195b8:	4603      	mov	r3, r0
 80195ba:	2b00      	cmp	r3, #0
 80195bc:	d002      	beq.n	80195c4 <EEPROM_Show_Feature+0x1b8>
    {
      printf("Issue to write Tx1Buffer\n");
 80195be:	4818      	ldr	r0, [pc, #96]	; (8019620 <EEPROM_Show_Feature+0x214>)
 80195c0:	f004 f964 	bl	801d88c <puts>
    }
    break;
 80195c4:	bf00      	nop
  }
}
 80195c6:	3718      	adds	r7, #24
 80195c8:	46bd      	mov	sp, r7
 80195ca:	bd80      	pop	{r7, pc}
 80195cc:	08021c68 	.word	0x08021c68
 80195d0:	2002d49c 	.word	0x2002d49c
 80195d4:	08021c80 	.word	0x08021c80
 80195d8:	08021c9c 	.word	0x08021c9c
 80195dc:	08021cc8 	.word	0x08021cc8
 80195e0:	2002f4cc 	.word	0x2002f4cc
 80195e4:	08021cec 	.word	0x08021cec
 80195e8:	08021d08 	.word	0x08021d08
 80195ec:	2002d4cc 	.word	0x2002d4cc
 80195f0:	08021d1c 	.word	0x08021d1c
 80195f4:	08021d30 	.word	0x08021d30
 80195f8:	08021d60 	.word	0x08021d60
 80195fc:	08021d74 	.word	0x08021d74
 8019600:	08021d88 	.word	0x08021d88
 8019604:	08021da0 	.word	0x08021da0
 8019608:	08021dbc 	.word	0x08021dbc
 801960c:	08021dd4 	.word	0x08021dd4
 8019610:	08021df4 	.word	0x08021df4
 8019614:	08021e10 	.word	0x08021e10
 8019618:	08021e3c 	.word	0x08021e3c
 801961c:	2000020c 	.word	0x2000020c
 8019620:	08021e5c 	.word	0x08021e5c

08019624 <Buffercmp>:
  * @param  BufferLength: buffer's length
  * @retval PASSED: pBuffer1 identical to pBuffer2
  *         FAILED: pBuffer1 differs from pBuffer2
  */
static TestStatus Buffercmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint16_t BufferLength)
{
 8019624:	b480      	push	{r7}
 8019626:	b085      	sub	sp, #20
 8019628:	af00      	add	r7, sp, #0
 801962a:	60f8      	str	r0, [r7, #12]
 801962c:	60b9      	str	r1, [r7, #8]
 801962e:	4613      	mov	r3, r2
 8019630:	80fb      	strh	r3, [r7, #6]
  while(BufferLength--)
 8019632:	e00d      	b.n	8019650 <Buffercmp+0x2c>
  {
    if(*pBuffer1 != *pBuffer2)
 8019634:	68fb      	ldr	r3, [r7, #12]
 8019636:	781a      	ldrb	r2, [r3, #0]
 8019638:	68bb      	ldr	r3, [r7, #8]
 801963a:	781b      	ldrb	r3, [r3, #0]
 801963c:	429a      	cmp	r2, r3
 801963e:	d001      	beq.n	8019644 <Buffercmp+0x20>
    {
      return FAILED;
 8019640:	2300      	movs	r3, #0
 8019642:	e00b      	b.n	801965c <Buffercmp+0x38>
    }

    pBuffer1++;
 8019644:	68fb      	ldr	r3, [r7, #12]
 8019646:	3301      	adds	r3, #1
 8019648:	60fb      	str	r3, [r7, #12]
    pBuffer2++;
 801964a:	68bb      	ldr	r3, [r7, #8]
 801964c:	3301      	adds	r3, #1
 801964e:	60bb      	str	r3, [r7, #8]
  while(BufferLength--)
 8019650:	88fb      	ldrh	r3, [r7, #6]
 8019652:	1e5a      	subs	r2, r3, #1
 8019654:	80fa      	strh	r2, [r7, #6]
 8019656:	2b00      	cmp	r3, #0
 8019658:	d1ec      	bne.n	8019634 <Buffercmp+0x10>
  }

  return PASSED;
 801965a:	2301      	movs	r3, #1
}
 801965c:	4618      	mov	r0, r3
 801965e:	3714      	adds	r7, #20
 8019660:	46bd      	mov	sp, r7
 8019662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019666:	4770      	bx	lr

08019668 <FillBuffer>:

static void FillBuffer(uint8_t* pBuffer1, uint16_t Index, uint16_t BufferLength)
{
 8019668:	b480      	push	{r7}
 801966a:	b085      	sub	sp, #20
 801966c:	af00      	add	r7, sp, #0
 801966e:	6078      	str	r0, [r7, #4]
 8019670:	460b      	mov	r3, r1
 8019672:	807b      	strh	r3, [r7, #2]
 8019674:	4613      	mov	r3, r2
 8019676:	803b      	strh	r3, [r7, #0]
  uint32_t i;
  for(i = 0; i < BufferLength; i++)
 8019678:	2300      	movs	r3, #0
 801967a:	60fb      	str	r3, [r7, #12]
 801967c:	e00c      	b.n	8019698 <FillBuffer+0x30>
  {
    pBuffer1[i] = Index + i;
 801967e:	887b      	ldrh	r3, [r7, #2]
 8019680:	b2d9      	uxtb	r1, r3
 8019682:	68fb      	ldr	r3, [r7, #12]
 8019684:	b2da      	uxtb	r2, r3
 8019686:	6878      	ldr	r0, [r7, #4]
 8019688:	68fb      	ldr	r3, [r7, #12]
 801968a:	4403      	add	r3, r0
 801968c:	440a      	add	r2, r1
 801968e:	b2d2      	uxtb	r2, r2
 8019690:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < BufferLength; i++)
 8019692:	68fb      	ldr	r3, [r7, #12]
 8019694:	3301      	adds	r3, #1
 8019696:	60fb      	str	r3, [r7, #12]
 8019698:	883b      	ldrh	r3, [r7, #0]
 801969a:	68fa      	ldr	r2, [r7, #12]
 801969c:	429a      	cmp	r2, r3
 801969e:	d3ee      	bcc.n	801967e <FillBuffer+0x16>
  }
}
 80196a0:	bf00      	nop
 80196a2:	bf00      	nop
 80196a4:	3714      	adds	r7, #20
 80196a6:	46bd      	mov	sp, r7
 80196a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196ac:	4770      	bx	lr
	...

080196b0 <Es_demo>:
  * @brief  Env sensor demo
  * @param  None
  * @retval 0 if ok, else value < 0.
  */
int32_t Es_demo(void)
{
 80196b0:	b580      	push	{r7, lr}
 80196b2:	b088      	sub	sp, #32
 80196b4:	af00      	add	r7, sp, #0
  int32_t                   result  = 0;
 80196b6:	2300      	movs	r3, #0
 80196b8:	61fb      	str	r3, [r7, #28]
  ENV_SENSOR_Capabilities_t Capabilities;
  uint8_t                   chipId;
  float                     outputDataRate;
  float                     value;

  printf("\n******ENV SENSOR******\n");
 80196ba:	4893      	ldr	r0, [pc, #588]	; (8019908 <Es_demo+0x258>)
 80196bc:	f004 f8e6 	bl	801d88c <puts>
  printf("Press user button for next step\n");
 80196c0:	4892      	ldr	r0, [pc, #584]	; (801990c <Es_demo+0x25c>)
 80196c2:	f004 f8e3 	bl	801d88c <puts>

  /* Initialize user button */
  if (BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI) != BSP_ERROR_NONE) result--;
 80196c6:	2101      	movs	r1, #1
 80196c8:	2000      	movs	r0, #0
 80196ca:	f7e7 fc19 	bl	8000f00 <BSP_PB_Init>
 80196ce:	4603      	mov	r3, r0
 80196d0:	2b00      	cmp	r3, #0
 80196d2:	d002      	beq.n	80196da <Es_demo+0x2a>
 80196d4:	69fb      	ldr	r3, [r7, #28]
 80196d6:	3b01      	subs	r3, #1
 80196d8:	61fb      	str	r3, [r7, #28]
  /* -------------- */

  /***********************/
  /* Test of Temperature */
  /***********************/
  printf("TEST OF HTS221 TEMPERATURE\n");
 80196da:	488d      	ldr	r0, [pc, #564]	; (8019910 <Es_demo+0x260>)
 80196dc:	f004 f8d6 	bl	801d88c <puts>

  /* Initialize function */
  if (BSP_ENV_SENSOR_Init(0, ENV_TEMPERATURE) != BSP_ERROR_NONE) result--;
 80196e0:	2101      	movs	r1, #1
 80196e2:	2000      	movs	r0, #0
 80196e4:	f7ea f9b8 	bl	8003a58 <BSP_ENV_SENSOR_Init>
 80196e8:	4603      	mov	r3, r0
 80196ea:	2b00      	cmp	r3, #0
 80196ec:	d002      	beq.n	80196f4 <Es_demo+0x44>
 80196ee:	69fb      	ldr	r3, [r7, #28]
 80196f0:	3b01      	subs	r3, #1
 80196f2:	61fb      	str	r3, [r7, #28]

  if (BSP_ENV_SENSOR_GetCapabilities(0, &Capabilities) != BSP_ERROR_NONE) result--;
 80196f4:	f107 030c 	add.w	r3, r7, #12
 80196f8:	4619      	mov	r1, r3
 80196fa:	2000      	movs	r0, #0
 80196fc:	f7ea fa2e 	bl	8003b5c <BSP_ENV_SENSOR_GetCapabilities>
 8019700:	4603      	mov	r3, r0
 8019702:	2b00      	cmp	r3, #0
 8019704:	d002      	beq.n	801970c <Es_demo+0x5c>
 8019706:	69fb      	ldr	r3, [r7, #28]
 8019708:	3b01      	subs	r3, #1
 801970a:	61fb      	str	r3, [r7, #28]

  /* Read id function */
  if (BSP_ENV_SENSOR_ReadID(0, &chipId) != BSP_ERROR_NONE) result--;
 801970c:	f107 030b 	add.w	r3, r7, #11
 8019710:	4619      	mov	r1, r3
 8019712:	2000      	movs	r0, #0
 8019714:	f7ea fa5a 	bl	8003bcc <BSP_ENV_SENSOR_ReadID>
 8019718:	4603      	mov	r3, r0
 801971a:	2b00      	cmp	r3, #0
 801971c:	d002      	beq.n	8019724 <Es_demo+0x74>
 801971e:	69fb      	ldr	r3, [r7, #28]
 8019720:	3b01      	subs	r3, #1
 8019722:	61fb      	str	r3, [r7, #28]

  /* Enable function */
  if (BSP_ENV_SENSOR_Enable(0, ENV_TEMPERATURE) != BSP_ERROR_NONE) result--;
 8019724:	2101      	movs	r1, #1
 8019726:	2000      	movs	r0, #0
 8019728:	f7ea fa88 	bl	8003c3c <BSP_ENV_SENSOR_Enable>
 801972c:	4603      	mov	r3, r0
 801972e:	2b00      	cmp	r3, #0
 8019730:	d002      	beq.n	8019738 <Es_demo+0x88>
 8019732:	69fb      	ldr	r3, [r7, #28]
 8019734:	3b01      	subs	r3, #1
 8019736:	61fb      	str	r3, [r7, #28]
  
  /* GetOutputDataRate and SetOutputDataRate functions */
  if (BSP_ENV_SENSOR_SetOutputDataRate(0, ENV_TEMPERATURE, 12.5f) != BSP_ERROR_NONE) result--;
 8019738:	eeb2 0a09 	vmov.f32	s0, #41	; 0x41480000  12.5
 801973c:	2101      	movs	r1, #1
 801973e:	2000      	movs	r0, #0
 8019740:	f7ea fb88 	bl	8003e54 <BSP_ENV_SENSOR_SetOutputDataRate>
 8019744:	4603      	mov	r3, r0
 8019746:	2b00      	cmp	r3, #0
 8019748:	d002      	beq.n	8019750 <Es_demo+0xa0>
 801974a:	69fb      	ldr	r3, [r7, #28]
 801974c:	3b01      	subs	r3, #1
 801974e:	61fb      	str	r3, [r7, #28]
  if (BSP_ENV_SENSOR_GetOutputDataRate(0, ENV_TEMPERATURE, &outputDataRate) != BSP_ERROR_NONE) result--;
 8019750:	1d3b      	adds	r3, r7, #4
 8019752:	461a      	mov	r2, r3
 8019754:	2101      	movs	r1, #1
 8019756:	2000      	movs	r0, #0
 8019758:	f7ea fb20 	bl	8003d9c <BSP_ENV_SENSOR_GetOutputDataRate>
 801975c:	4603      	mov	r3, r0
 801975e:	2b00      	cmp	r3, #0
 8019760:	d002      	beq.n	8019768 <Es_demo+0xb8>
 8019762:	69fb      	ldr	r3, [r7, #28]
 8019764:	3b01      	subs	r3, #1
 8019766:	61fb      	str	r3, [r7, #28]
  if (outputDataRate != 12.5f) result--;
 8019768:	edd7 7a01 	vldr	s15, [r7, #4]
 801976c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8019770:	eef4 7a47 	vcmp.f32	s15, s14
 8019774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019778:	d002      	beq.n	8019780 <Es_demo+0xd0>
 801977a:	69fb      	ldr	r3, [r7, #28]
 801977c:	3b01      	subs	r3, #1
 801977e:	61fb      	str	r3, [r7, #28]
 
  if (BSP_ENV_SENSOR_SetOutputDataRate(0, ENV_TEMPERATURE, 7.0f) != BSP_ERROR_NONE) result--;
 8019780:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 8019784:	2101      	movs	r1, #1
 8019786:	2000      	movs	r0, #0
 8019788:	f7ea fb64 	bl	8003e54 <BSP_ENV_SENSOR_SetOutputDataRate>
 801978c:	4603      	mov	r3, r0
 801978e:	2b00      	cmp	r3, #0
 8019790:	d002      	beq.n	8019798 <Es_demo+0xe8>
 8019792:	69fb      	ldr	r3, [r7, #28]
 8019794:	3b01      	subs	r3, #1
 8019796:	61fb      	str	r3, [r7, #28]
  if (BSP_ENV_SENSOR_GetOutputDataRate(0, ENV_TEMPERATURE, &outputDataRate) != BSP_ERROR_NONE) result--;
 8019798:	1d3b      	adds	r3, r7, #4
 801979a:	461a      	mov	r2, r3
 801979c:	2101      	movs	r1, #1
 801979e:	2000      	movs	r0, #0
 80197a0:	f7ea fafc 	bl	8003d9c <BSP_ENV_SENSOR_GetOutputDataRate>
 80197a4:	4603      	mov	r3, r0
 80197a6:	2b00      	cmp	r3, #0
 80197a8:	d002      	beq.n	80197b0 <Es_demo+0x100>
 80197aa:	69fb      	ldr	r3, [r7, #28]
 80197ac:	3b01      	subs	r3, #1
 80197ae:	61fb      	str	r3, [r7, #28]
  if (outputDataRate != 7.0f) result--;
 80197b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80197b4:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80197b8:	eef4 7a47 	vcmp.f32	s15, s14
 80197bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197c0:	d002      	beq.n	80197c8 <Es_demo+0x118>
 80197c2:	69fb      	ldr	r3, [r7, #28]
 80197c4:	3b01      	subs	r3, #1
 80197c6:	61fb      	str	r3, [r7, #28]

  /* GetValue function */
  printf("Temperature values:\n");
 80197c8:	4852      	ldr	r0, [pc, #328]	; (8019914 <Es_demo+0x264>)
 80197ca:	f004 f85f 	bl	801d88c <puts>
  while (UserButtonPressed == 0)
 80197ce:	e018      	b.n	8019802 <Es_demo+0x152>
  {
    if (BSP_ENV_SENSOR_GetValue(0, ENV_TEMPERATURE, &value) != BSP_ERROR_NONE) result--;
 80197d0:	463b      	mov	r3, r7
 80197d2:	461a      	mov	r2, r3
 80197d4:	2101      	movs	r1, #1
 80197d6:	2000      	movs	r0, #0
 80197d8:	f7ea fb98 	bl	8003f0c <BSP_ENV_SENSOR_GetValue>
 80197dc:	4603      	mov	r3, r0
 80197de:	2b00      	cmp	r3, #0
 80197e0:	d002      	beq.n	80197e8 <Es_demo+0x138>
 80197e2:	69fb      	ldr	r3, [r7, #28]
 80197e4:	3b01      	subs	r3, #1
 80197e6:	61fb      	str	r3, [r7, #28]
    printf("Temperature = %.1f\n", value);
 80197e8:	683b      	ldr	r3, [r7, #0]
 80197ea:	4618      	mov	r0, r3
 80197ec:	f7e6 feb0 	bl	8000550 <__aeabi_f2d>
 80197f0:	4602      	mov	r2, r0
 80197f2:	460b      	mov	r3, r1
 80197f4:	4848      	ldr	r0, [pc, #288]	; (8019918 <Es_demo+0x268>)
 80197f6:	f003 ffdb 	bl	801d7b0 <iprintf>
    HAL_Delay(500);
 80197fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80197fe:	f7f7 ff7d 	bl	80116fc <HAL_Delay>
  while (UserButtonPressed == 0)
 8019802:	4b46      	ldr	r3, [pc, #280]	; (801991c <Es_demo+0x26c>)
 8019804:	781b      	ldrb	r3, [r3, #0]
 8019806:	b2db      	uxtb	r3, r3
 8019808:	2b00      	cmp	r3, #0
 801980a:	d0e1      	beq.n	80197d0 <Es_demo+0x120>
  }
  HAL_Delay(1000);
 801980c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8019810:	f7f7 ff74 	bl	80116fc <HAL_Delay>
  UserButtonPressed = RESET;
 8019814:	4b41      	ldr	r3, [pc, #260]	; (801991c <Es_demo+0x26c>)
 8019816:	2200      	movs	r2, #0
 8019818:	701a      	strb	r2, [r3, #0]

  /* Disable function */
  if (BSP_ENV_SENSOR_Disable(0, ENV_TEMPERATURE) != BSP_ERROR_NONE) result--;
 801981a:	2101      	movs	r1, #1
 801981c:	2000      	movs	r0, #0
 801981e:	f7ea fa65 	bl	8003cec <BSP_ENV_SENSOR_Disable>
 8019822:	4603      	mov	r3, r0
 8019824:	2b00      	cmp	r3, #0
 8019826:	d002      	beq.n	801982e <Es_demo+0x17e>
 8019828:	69fb      	ldr	r3, [r7, #28]
 801982a:	3b01      	subs	r3, #1
 801982c:	61fb      	str	r3, [r7, #28]
  
  /* De-initialize function */
  if (BSP_ENV_SENSOR_DeInit(0) != BSP_ERROR_NONE) result--;
 801982e:	2000      	movs	r0, #0
 8019830:	f7ea f95e 	bl	8003af0 <BSP_ENV_SENSOR_DeInit>
 8019834:	4603      	mov	r3, r0
 8019836:	2b00      	cmp	r3, #0
 8019838:	d002      	beq.n	8019840 <Es_demo+0x190>
 801983a:	69fb      	ldr	r3, [r7, #28]
 801983c:	3b01      	subs	r3, #1
 801983e:	61fb      	str	r3, [r7, #28]

  /********************/
  /* Test of humidity */
  /********************/
  printf("TEST OF HTS221 HUMIDITY\n");
 8019840:	4837      	ldr	r0, [pc, #220]	; (8019920 <Es_demo+0x270>)
 8019842:	f004 f823 	bl	801d88c <puts>

  /* Initialize function */
  if (BSP_ENV_SENSOR_Init(0, ENV_HUMIDITY) != BSP_ERROR_NONE) result--;
 8019846:	2104      	movs	r1, #4
 8019848:	2000      	movs	r0, #0
 801984a:	f7ea f905 	bl	8003a58 <BSP_ENV_SENSOR_Init>
 801984e:	4603      	mov	r3, r0
 8019850:	2b00      	cmp	r3, #0
 8019852:	d002      	beq.n	801985a <Es_demo+0x1aa>
 8019854:	69fb      	ldr	r3, [r7, #28]
 8019856:	3b01      	subs	r3, #1
 8019858:	61fb      	str	r3, [r7, #28]

  /* Enable function */
  if (BSP_ENV_SENSOR_Enable(0, ENV_HUMIDITY) != BSP_ERROR_NONE) result--;
 801985a:	2104      	movs	r1, #4
 801985c:	2000      	movs	r0, #0
 801985e:	f7ea f9ed 	bl	8003c3c <BSP_ENV_SENSOR_Enable>
 8019862:	4603      	mov	r3, r0
 8019864:	2b00      	cmp	r3, #0
 8019866:	d002      	beq.n	801986e <Es_demo+0x1be>
 8019868:	69fb      	ldr	r3, [r7, #28]
 801986a:	3b01      	subs	r3, #1
 801986c:	61fb      	str	r3, [r7, #28]
  
  /* GetOutputDataRate and SetOutputDataRate functions */
  if (BSP_ENV_SENSOR_SetOutputDataRate(0, ENV_HUMIDITY, 12.5f) != BSP_ERROR_NONE) result--;
 801986e:	eeb2 0a09 	vmov.f32	s0, #41	; 0x41480000  12.5
 8019872:	2104      	movs	r1, #4
 8019874:	2000      	movs	r0, #0
 8019876:	f7ea faed 	bl	8003e54 <BSP_ENV_SENSOR_SetOutputDataRate>
 801987a:	4603      	mov	r3, r0
 801987c:	2b00      	cmp	r3, #0
 801987e:	d002      	beq.n	8019886 <Es_demo+0x1d6>
 8019880:	69fb      	ldr	r3, [r7, #28]
 8019882:	3b01      	subs	r3, #1
 8019884:	61fb      	str	r3, [r7, #28]

  if (BSP_ENV_SENSOR_GetOutputDataRate(0, ENV_HUMIDITY, &outputDataRate) != BSP_ERROR_NONE) result--;
 8019886:	1d3b      	adds	r3, r7, #4
 8019888:	461a      	mov	r2, r3
 801988a:	2104      	movs	r1, #4
 801988c:	2000      	movs	r0, #0
 801988e:	f7ea fa85 	bl	8003d9c <BSP_ENV_SENSOR_GetOutputDataRate>
 8019892:	4603      	mov	r3, r0
 8019894:	2b00      	cmp	r3, #0
 8019896:	d002      	beq.n	801989e <Es_demo+0x1ee>
 8019898:	69fb      	ldr	r3, [r7, #28]
 801989a:	3b01      	subs	r3, #1
 801989c:	61fb      	str	r3, [r7, #28]
  if (outputDataRate != 12.5f) result--;
 801989e:	edd7 7a01 	vldr	s15, [r7, #4]
 80198a2:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80198a6:	eef4 7a47 	vcmp.f32	s15, s14
 80198aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198ae:	d002      	beq.n	80198b6 <Es_demo+0x206>
 80198b0:	69fb      	ldr	r3, [r7, #28]
 80198b2:	3b01      	subs	r3, #1
 80198b4:	61fb      	str	r3, [r7, #28]
  if (BSP_ENV_SENSOR_SetOutputDataRate(0, ENV_HUMIDITY, 7.0f) != BSP_ERROR_NONE) result--;
 80198b6:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 80198ba:	2104      	movs	r1, #4
 80198bc:	2000      	movs	r0, #0
 80198be:	f7ea fac9 	bl	8003e54 <BSP_ENV_SENSOR_SetOutputDataRate>
 80198c2:	4603      	mov	r3, r0
 80198c4:	2b00      	cmp	r3, #0
 80198c6:	d002      	beq.n	80198ce <Es_demo+0x21e>
 80198c8:	69fb      	ldr	r3, [r7, #28]
 80198ca:	3b01      	subs	r3, #1
 80198cc:	61fb      	str	r3, [r7, #28]
  if (BSP_ENV_SENSOR_GetOutputDataRate(0, ENV_HUMIDITY, &outputDataRate) != BSP_ERROR_NONE) result--;
 80198ce:	1d3b      	adds	r3, r7, #4
 80198d0:	461a      	mov	r2, r3
 80198d2:	2104      	movs	r1, #4
 80198d4:	2000      	movs	r0, #0
 80198d6:	f7ea fa61 	bl	8003d9c <BSP_ENV_SENSOR_GetOutputDataRate>
 80198da:	4603      	mov	r3, r0
 80198dc:	2b00      	cmp	r3, #0
 80198de:	d002      	beq.n	80198e6 <Es_demo+0x236>
 80198e0:	69fb      	ldr	r3, [r7, #28]
 80198e2:	3b01      	subs	r3, #1
 80198e4:	61fb      	str	r3, [r7, #28]
  if (outputDataRate != 7.0f) result--;
 80198e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80198ea:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80198ee:	eef4 7a47 	vcmp.f32	s15, s14
 80198f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198f6:	d002      	beq.n	80198fe <Es_demo+0x24e>
 80198f8:	69fb      	ldr	r3, [r7, #28]
 80198fa:	3b01      	subs	r3, #1
 80198fc:	61fb      	str	r3, [r7, #28]

  /* GetValue function */
  printf("Humidity values:\n");
 80198fe:	4809      	ldr	r0, [pc, #36]	; (8019924 <Es_demo+0x274>)
 8019900:	f003 ffc4 	bl	801d88c <puts>
  while (UserButtonPressed == 0)
 8019904:	e029      	b.n	801995a <Es_demo+0x2aa>
 8019906:	bf00      	nop
 8019908:	08021e78 	.word	0x08021e78
 801990c:	08021e90 	.word	0x08021e90
 8019910:	08021eb0 	.word	0x08021eb0
 8019914:	08021ecc 	.word	0x08021ecc
 8019918:	08021ee0 	.word	0x08021ee0
 801991c:	200314e8 	.word	0x200314e8
 8019920:	08021ef4 	.word	0x08021ef4
 8019924:	08021f0c 	.word	0x08021f0c
  {
    if (BSP_ENV_SENSOR_GetValue(0, ENV_HUMIDITY, &value) != BSP_ERROR_NONE) result--;
 8019928:	463b      	mov	r3, r7
 801992a:	461a      	mov	r2, r3
 801992c:	2104      	movs	r1, #4
 801992e:	2000      	movs	r0, #0
 8019930:	f7ea faec 	bl	8003f0c <BSP_ENV_SENSOR_GetValue>
 8019934:	4603      	mov	r3, r0
 8019936:	2b00      	cmp	r3, #0
 8019938:	d002      	beq.n	8019940 <Es_demo+0x290>
 801993a:	69fb      	ldr	r3, [r7, #28]
 801993c:	3b01      	subs	r3, #1
 801993e:	61fb      	str	r3, [r7, #28]
    printf("Humidity = %.1f\n", value);
 8019940:	683b      	ldr	r3, [r7, #0]
 8019942:	4618      	mov	r0, r3
 8019944:	f7e6 fe04 	bl	8000550 <__aeabi_f2d>
 8019948:	4602      	mov	r2, r0
 801994a:	460b      	mov	r3, r1
 801994c:	489d      	ldr	r0, [pc, #628]	; (8019bc4 <Es_demo+0x514>)
 801994e:	f003 ff2f 	bl	801d7b0 <iprintf>
    HAL_Delay(500);
 8019952:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8019956:	f7f7 fed1 	bl	80116fc <HAL_Delay>
  while (UserButtonPressed == 0)
 801995a:	4b9b      	ldr	r3, [pc, #620]	; (8019bc8 <Es_demo+0x518>)
 801995c:	781b      	ldrb	r3, [r3, #0]
 801995e:	b2db      	uxtb	r3, r3
 8019960:	2b00      	cmp	r3, #0
 8019962:	d0e1      	beq.n	8019928 <Es_demo+0x278>
  }
  HAL_Delay(1000);
 8019964:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8019968:	f7f7 fec8 	bl	80116fc <HAL_Delay>
  UserButtonPressed = RESET;
 801996c:	4b96      	ldr	r3, [pc, #600]	; (8019bc8 <Es_demo+0x518>)
 801996e:	2200      	movs	r2, #0
 8019970:	701a      	strb	r2, [r3, #0]

  /* Disable function */
  if (BSP_ENV_SENSOR_Disable(0, ENV_HUMIDITY) != BSP_ERROR_NONE) result--;
 8019972:	2104      	movs	r1, #4
 8019974:	2000      	movs	r0, #0
 8019976:	f7ea f9b9 	bl	8003cec <BSP_ENV_SENSOR_Disable>
 801997a:	4603      	mov	r3, r0
 801997c:	2b00      	cmp	r3, #0
 801997e:	d002      	beq.n	8019986 <Es_demo+0x2d6>
 8019980:	69fb      	ldr	r3, [r7, #28]
 8019982:	3b01      	subs	r3, #1
 8019984:	61fb      	str	r3, [r7, #28]
  
  /* De-initialize function */
  if (BSP_ENV_SENSOR_DeInit(0) != BSP_ERROR_NONE) result--;
 8019986:	2000      	movs	r0, #0
 8019988:	f7ea f8b2 	bl	8003af0 <BSP_ENV_SENSOR_DeInit>
 801998c:	4603      	mov	r3, r0
 801998e:	2b00      	cmp	r3, #0
 8019990:	d002      	beq.n	8019998 <Es_demo+0x2e8>
 8019992:	69fb      	ldr	r3, [r7, #28]
 8019994:	3b01      	subs	r3, #1
 8019996:	61fb      	str	r3, [r7, #28]
  /* --------------- */

  /***********************/
  /* Test of Temperature */
  /***********************/
  printf("TEST OF LPS22HH TEMPERATURE\n");
 8019998:	488c      	ldr	r0, [pc, #560]	; (8019bcc <Es_demo+0x51c>)
 801999a:	f003 ff77 	bl	801d88c <puts>

  /* Initialize function */
  if (BSP_ENV_SENSOR_Init(1, ENV_TEMPERATURE) != BSP_ERROR_NONE) result--;
 801999e:	2101      	movs	r1, #1
 80199a0:	2001      	movs	r0, #1
 80199a2:	f7ea f859 	bl	8003a58 <BSP_ENV_SENSOR_Init>
 80199a6:	4603      	mov	r3, r0
 80199a8:	2b00      	cmp	r3, #0
 80199aa:	d002      	beq.n	80199b2 <Es_demo+0x302>
 80199ac:	69fb      	ldr	r3, [r7, #28]
 80199ae:	3b01      	subs	r3, #1
 80199b0:	61fb      	str	r3, [r7, #28]

  /* Get capabilities */
  if (BSP_ENV_SENSOR_GetCapabilities(1, &Capabilities) != BSP_ERROR_NONE) result--;
 80199b2:	f107 030c 	add.w	r3, r7, #12
 80199b6:	4619      	mov	r1, r3
 80199b8:	2001      	movs	r0, #1
 80199ba:	f7ea f8cf 	bl	8003b5c <BSP_ENV_SENSOR_GetCapabilities>
 80199be:	4603      	mov	r3, r0
 80199c0:	2b00      	cmp	r3, #0
 80199c2:	d002      	beq.n	80199ca <Es_demo+0x31a>
 80199c4:	69fb      	ldr	r3, [r7, #28]
 80199c6:	3b01      	subs	r3, #1
 80199c8:	61fb      	str	r3, [r7, #28]

  /* Read id function */
  if (BSP_ENV_SENSOR_ReadID(1, &chipId) != BSP_ERROR_NONE) result--;
 80199ca:	f107 030b 	add.w	r3, r7, #11
 80199ce:	4619      	mov	r1, r3
 80199d0:	2001      	movs	r0, #1
 80199d2:	f7ea f8fb 	bl	8003bcc <BSP_ENV_SENSOR_ReadID>
 80199d6:	4603      	mov	r3, r0
 80199d8:	2b00      	cmp	r3, #0
 80199da:	d002      	beq.n	80199e2 <Es_demo+0x332>
 80199dc:	69fb      	ldr	r3, [r7, #28]
 80199de:	3b01      	subs	r3, #1
 80199e0:	61fb      	str	r3, [r7, #28]

  /* Enable function */
  if (BSP_ENV_SENSOR_Enable(1, ENV_TEMPERATURE) != BSP_ERROR_NONE) result--;
 80199e2:	2101      	movs	r1, #1
 80199e4:	2001      	movs	r0, #1
 80199e6:	f7ea f929 	bl	8003c3c <BSP_ENV_SENSOR_Enable>
 80199ea:	4603      	mov	r3, r0
 80199ec:	2b00      	cmp	r3, #0
 80199ee:	d002      	beq.n	80199f6 <Es_demo+0x346>
 80199f0:	69fb      	ldr	r3, [r7, #28]
 80199f2:	3b01      	subs	r3, #1
 80199f4:	61fb      	str	r3, [r7, #28]
  
  /* GetOutputDataRate and SetOutputDataRate functions */

  if (BSP_ENV_SENSOR_SetOutputDataRate(1, ENV_TEMPERATURE, 75.0f) != BSP_ERROR_NONE) result--;
 80199f6:	ed9f 0a76 	vldr	s0, [pc, #472]	; 8019bd0 <Es_demo+0x520>
 80199fa:	2101      	movs	r1, #1
 80199fc:	2001      	movs	r0, #1
 80199fe:	f7ea fa29 	bl	8003e54 <BSP_ENV_SENSOR_SetOutputDataRate>
 8019a02:	4603      	mov	r3, r0
 8019a04:	2b00      	cmp	r3, #0
 8019a06:	d002      	beq.n	8019a0e <Es_demo+0x35e>
 8019a08:	69fb      	ldr	r3, [r7, #28]
 8019a0a:	3b01      	subs	r3, #1
 8019a0c:	61fb      	str	r3, [r7, #28]
  if (BSP_ENV_SENSOR_GetOutputDataRate(1, ENV_TEMPERATURE, &outputDataRate) != BSP_ERROR_NONE) result--;
 8019a0e:	1d3b      	adds	r3, r7, #4
 8019a10:	461a      	mov	r2, r3
 8019a12:	2101      	movs	r1, #1
 8019a14:	2001      	movs	r0, #1
 8019a16:	f7ea f9c1 	bl	8003d9c <BSP_ENV_SENSOR_GetOutputDataRate>
 8019a1a:	4603      	mov	r3, r0
 8019a1c:	2b00      	cmp	r3, #0
 8019a1e:	d002      	beq.n	8019a26 <Es_demo+0x376>
 8019a20:	69fb      	ldr	r3, [r7, #28]
 8019a22:	3b01      	subs	r3, #1
 8019a24:	61fb      	str	r3, [r7, #28]
  if (outputDataRate != 75.0f) result--;
 8019a26:	edd7 7a01 	vldr	s15, [r7, #4]
 8019a2a:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8019bd0 <Es_demo+0x520>
 8019a2e:	eef4 7a47 	vcmp.f32	s15, s14
 8019a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a36:	d002      	beq.n	8019a3e <Es_demo+0x38e>
 8019a38:	69fb      	ldr	r3, [r7, #28]
 8019a3a:	3b01      	subs	r3, #1
 8019a3c:	61fb      	str	r3, [r7, #28]
  if (BSP_ENV_SENSOR_SetOutputDataRate(1, ENV_TEMPERATURE, 50.0f) != BSP_ERROR_NONE) result--;
 8019a3e:	ed9f 0a65 	vldr	s0, [pc, #404]	; 8019bd4 <Es_demo+0x524>
 8019a42:	2101      	movs	r1, #1
 8019a44:	2001      	movs	r0, #1
 8019a46:	f7ea fa05 	bl	8003e54 <BSP_ENV_SENSOR_SetOutputDataRate>
 8019a4a:	4603      	mov	r3, r0
 8019a4c:	2b00      	cmp	r3, #0
 8019a4e:	d002      	beq.n	8019a56 <Es_demo+0x3a6>
 8019a50:	69fb      	ldr	r3, [r7, #28]
 8019a52:	3b01      	subs	r3, #1
 8019a54:	61fb      	str	r3, [r7, #28]
  if (BSP_ENV_SENSOR_GetOutputDataRate(1, ENV_TEMPERATURE, &outputDataRate) != BSP_ERROR_NONE) result--;
 8019a56:	1d3b      	adds	r3, r7, #4
 8019a58:	461a      	mov	r2, r3
 8019a5a:	2101      	movs	r1, #1
 8019a5c:	2001      	movs	r0, #1
 8019a5e:	f7ea f99d 	bl	8003d9c <BSP_ENV_SENSOR_GetOutputDataRate>
 8019a62:	4603      	mov	r3, r0
 8019a64:	2b00      	cmp	r3, #0
 8019a66:	d002      	beq.n	8019a6e <Es_demo+0x3be>
 8019a68:	69fb      	ldr	r3, [r7, #28]
 8019a6a:	3b01      	subs	r3, #1
 8019a6c:	61fb      	str	r3, [r7, #28]
  if (outputDataRate != 50.0f) result--;
 8019a6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8019a72:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8019bd4 <Es_demo+0x524>
 8019a76:	eef4 7a47 	vcmp.f32	s15, s14
 8019a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a7e:	d002      	beq.n	8019a86 <Es_demo+0x3d6>
 8019a80:	69fb      	ldr	r3, [r7, #28]
 8019a82:	3b01      	subs	r3, #1
 8019a84:	61fb      	str	r3, [r7, #28]

  /* GetValue function */
  printf("Temperature values:\n");
 8019a86:	4854      	ldr	r0, [pc, #336]	; (8019bd8 <Es_demo+0x528>)
 8019a88:	f003 ff00 	bl	801d88c <puts>
  while (UserButtonPressed == 0)
 8019a8c:	e018      	b.n	8019ac0 <Es_demo+0x410>
  {
    if (BSP_ENV_SENSOR_GetValue(1, ENV_TEMPERATURE, &value) != BSP_ERROR_NONE) result--;
 8019a8e:	463b      	mov	r3, r7
 8019a90:	461a      	mov	r2, r3
 8019a92:	2101      	movs	r1, #1
 8019a94:	2001      	movs	r0, #1
 8019a96:	f7ea fa39 	bl	8003f0c <BSP_ENV_SENSOR_GetValue>
 8019a9a:	4603      	mov	r3, r0
 8019a9c:	2b00      	cmp	r3, #0
 8019a9e:	d002      	beq.n	8019aa6 <Es_demo+0x3f6>
 8019aa0:	69fb      	ldr	r3, [r7, #28]
 8019aa2:	3b01      	subs	r3, #1
 8019aa4:	61fb      	str	r3, [r7, #28]
    printf("Temperature = %.1f\n", value);
 8019aa6:	683b      	ldr	r3, [r7, #0]
 8019aa8:	4618      	mov	r0, r3
 8019aaa:	f7e6 fd51 	bl	8000550 <__aeabi_f2d>
 8019aae:	4602      	mov	r2, r0
 8019ab0:	460b      	mov	r3, r1
 8019ab2:	484a      	ldr	r0, [pc, #296]	; (8019bdc <Es_demo+0x52c>)
 8019ab4:	f003 fe7c 	bl	801d7b0 <iprintf>
    HAL_Delay(500);
 8019ab8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8019abc:	f7f7 fe1e 	bl	80116fc <HAL_Delay>
  while (UserButtonPressed == 0)
 8019ac0:	4b41      	ldr	r3, [pc, #260]	; (8019bc8 <Es_demo+0x518>)
 8019ac2:	781b      	ldrb	r3, [r3, #0]
 8019ac4:	b2db      	uxtb	r3, r3
 8019ac6:	2b00      	cmp	r3, #0
 8019ac8:	d0e1      	beq.n	8019a8e <Es_demo+0x3de>
  }
  HAL_Delay(1000);
 8019aca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8019ace:	f7f7 fe15 	bl	80116fc <HAL_Delay>
  UserButtonPressed = RESET;
 8019ad2:	4b3d      	ldr	r3, [pc, #244]	; (8019bc8 <Es_demo+0x518>)
 8019ad4:	2200      	movs	r2, #0
 8019ad6:	701a      	strb	r2, [r3, #0]

  /* Disable function */
  if (BSP_ENV_SENSOR_Disable(1, ENV_TEMPERATURE) != BSP_ERROR_NONE) result--;
 8019ad8:	2101      	movs	r1, #1
 8019ada:	2001      	movs	r0, #1
 8019adc:	f7ea f906 	bl	8003cec <BSP_ENV_SENSOR_Disable>
 8019ae0:	4603      	mov	r3, r0
 8019ae2:	2b00      	cmp	r3, #0
 8019ae4:	d002      	beq.n	8019aec <Es_demo+0x43c>
 8019ae6:	69fb      	ldr	r3, [r7, #28]
 8019ae8:	3b01      	subs	r3, #1
 8019aea:	61fb      	str	r3, [r7, #28]
  
  /* De-initialize function */
  if (BSP_ENV_SENSOR_DeInit(1) != BSP_ERROR_NONE) result--;
 8019aec:	2001      	movs	r0, #1
 8019aee:	f7e9 ffff 	bl	8003af0 <BSP_ENV_SENSOR_DeInit>
 8019af2:	4603      	mov	r3, r0
 8019af4:	2b00      	cmp	r3, #0
 8019af6:	d002      	beq.n	8019afe <Es_demo+0x44e>
 8019af8:	69fb      	ldr	r3, [r7, #28]
 8019afa:	3b01      	subs	r3, #1
 8019afc:	61fb      	str	r3, [r7, #28]
  
  /********************/
  /* Test of pressure */
  /********************/
  printf("TEST OF LPS22HH PRESSURE\n");
 8019afe:	4838      	ldr	r0, [pc, #224]	; (8019be0 <Es_demo+0x530>)
 8019b00:	f003 fec4 	bl	801d88c <puts>

  /* Initialize function */
  if (BSP_ENV_SENSOR_Init(1, ENV_PRESSURE) != BSP_ERROR_NONE) result--;
 8019b04:	2102      	movs	r1, #2
 8019b06:	2001      	movs	r0, #1
 8019b08:	f7e9 ffa6 	bl	8003a58 <BSP_ENV_SENSOR_Init>
 8019b0c:	4603      	mov	r3, r0
 8019b0e:	2b00      	cmp	r3, #0
 8019b10:	d002      	beq.n	8019b18 <Es_demo+0x468>
 8019b12:	69fb      	ldr	r3, [r7, #28]
 8019b14:	3b01      	subs	r3, #1
 8019b16:	61fb      	str	r3, [r7, #28]

  /* Enable function */
  if (BSP_ENV_SENSOR_Enable(1, ENV_PRESSURE) != BSP_ERROR_NONE) result--;
 8019b18:	2102      	movs	r1, #2
 8019b1a:	2001      	movs	r0, #1
 8019b1c:	f7ea f88e 	bl	8003c3c <BSP_ENV_SENSOR_Enable>
 8019b20:	4603      	mov	r3, r0
 8019b22:	2b00      	cmp	r3, #0
 8019b24:	d002      	beq.n	8019b2c <Es_demo+0x47c>
 8019b26:	69fb      	ldr	r3, [r7, #28]
 8019b28:	3b01      	subs	r3, #1
 8019b2a:	61fb      	str	r3, [r7, #28]
  
  /* GetOutputDataRate and SetOutputDataRate functions */
  if (BSP_ENV_SENSOR_SetOutputDataRate(1, ENV_PRESSURE, 75.0f) != BSP_ERROR_NONE) result--;
 8019b2c:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8019bd0 <Es_demo+0x520>
 8019b30:	2102      	movs	r1, #2
 8019b32:	2001      	movs	r0, #1
 8019b34:	f7ea f98e 	bl	8003e54 <BSP_ENV_SENSOR_SetOutputDataRate>
 8019b38:	4603      	mov	r3, r0
 8019b3a:	2b00      	cmp	r3, #0
 8019b3c:	d002      	beq.n	8019b44 <Es_demo+0x494>
 8019b3e:	69fb      	ldr	r3, [r7, #28]
 8019b40:	3b01      	subs	r3, #1
 8019b42:	61fb      	str	r3, [r7, #28]
  if (BSP_ENV_SENSOR_GetOutputDataRate(1, ENV_PRESSURE, &outputDataRate) != BSP_ERROR_NONE) result--;
 8019b44:	1d3b      	adds	r3, r7, #4
 8019b46:	461a      	mov	r2, r3
 8019b48:	2102      	movs	r1, #2
 8019b4a:	2001      	movs	r0, #1
 8019b4c:	f7ea f926 	bl	8003d9c <BSP_ENV_SENSOR_GetOutputDataRate>
 8019b50:	4603      	mov	r3, r0
 8019b52:	2b00      	cmp	r3, #0
 8019b54:	d002      	beq.n	8019b5c <Es_demo+0x4ac>
 8019b56:	69fb      	ldr	r3, [r7, #28]
 8019b58:	3b01      	subs	r3, #1
 8019b5a:	61fb      	str	r3, [r7, #28]
  if (outputDataRate != 75.0f) result--;
 8019b5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8019b60:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8019bd0 <Es_demo+0x520>
 8019b64:	eef4 7a47 	vcmp.f32	s15, s14
 8019b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b6c:	d002      	beq.n	8019b74 <Es_demo+0x4c4>
 8019b6e:	69fb      	ldr	r3, [r7, #28]
 8019b70:	3b01      	subs	r3, #1
 8019b72:	61fb      	str	r3, [r7, #28]

  if (BSP_ENV_SENSOR_SetOutputDataRate(1, ENV_PRESSURE, 50.0f) != BSP_ERROR_NONE) result--;
 8019b74:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8019bd4 <Es_demo+0x524>
 8019b78:	2102      	movs	r1, #2
 8019b7a:	2001      	movs	r0, #1
 8019b7c:	f7ea f96a 	bl	8003e54 <BSP_ENV_SENSOR_SetOutputDataRate>
 8019b80:	4603      	mov	r3, r0
 8019b82:	2b00      	cmp	r3, #0
 8019b84:	d002      	beq.n	8019b8c <Es_demo+0x4dc>
 8019b86:	69fb      	ldr	r3, [r7, #28]
 8019b88:	3b01      	subs	r3, #1
 8019b8a:	61fb      	str	r3, [r7, #28]
  if (BSP_ENV_SENSOR_GetOutputDataRate(1, ENV_PRESSURE, &outputDataRate) != BSP_ERROR_NONE) result--;
 8019b8c:	1d3b      	adds	r3, r7, #4
 8019b8e:	461a      	mov	r2, r3
 8019b90:	2102      	movs	r1, #2
 8019b92:	2001      	movs	r0, #1
 8019b94:	f7ea f902 	bl	8003d9c <BSP_ENV_SENSOR_GetOutputDataRate>
 8019b98:	4603      	mov	r3, r0
 8019b9a:	2b00      	cmp	r3, #0
 8019b9c:	d002      	beq.n	8019ba4 <Es_demo+0x4f4>
 8019b9e:	69fb      	ldr	r3, [r7, #28]
 8019ba0:	3b01      	subs	r3, #1
 8019ba2:	61fb      	str	r3, [r7, #28]
  if (outputDataRate != 50.0f) result--;
 8019ba4:	edd7 7a01 	vldr	s15, [r7, #4]
 8019ba8:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8019bd4 <Es_demo+0x524>
 8019bac:	eef4 7a47 	vcmp.f32	s15, s14
 8019bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019bb4:	d002      	beq.n	8019bbc <Es_demo+0x50c>
 8019bb6:	69fb      	ldr	r3, [r7, #28]
 8019bb8:	3b01      	subs	r3, #1
 8019bba:	61fb      	str	r3, [r7, #28]

  /* GetValue function */
  printf("Pressure values:\n");
 8019bbc:	4809      	ldr	r0, [pc, #36]	; (8019be4 <Es_demo+0x534>)
 8019bbe:	f003 fe65 	bl	801d88c <puts>
  while (UserButtonPressed == 0)
 8019bc2:	e02a      	b.n	8019c1a <Es_demo+0x56a>
 8019bc4:	08021f20 	.word	0x08021f20
 8019bc8:	200314e8 	.word	0x200314e8
 8019bcc:	08021f34 	.word	0x08021f34
 8019bd0:	42960000 	.word	0x42960000
 8019bd4:	42480000 	.word	0x42480000
 8019bd8:	08021ecc 	.word	0x08021ecc
 8019bdc:	08021ee0 	.word	0x08021ee0
 8019be0:	08021f50 	.word	0x08021f50
 8019be4:	08021f6c 	.word	0x08021f6c
  {
    if (BSP_ENV_SENSOR_GetValue(1, ENV_PRESSURE, &value) != BSP_ERROR_NONE) result--;
 8019be8:	463b      	mov	r3, r7
 8019bea:	461a      	mov	r2, r3
 8019bec:	2102      	movs	r1, #2
 8019bee:	2001      	movs	r0, #1
 8019bf0:	f7ea f98c 	bl	8003f0c <BSP_ENV_SENSOR_GetValue>
 8019bf4:	4603      	mov	r3, r0
 8019bf6:	2b00      	cmp	r3, #0
 8019bf8:	d002      	beq.n	8019c00 <Es_demo+0x550>
 8019bfa:	69fb      	ldr	r3, [r7, #28]
 8019bfc:	3b01      	subs	r3, #1
 8019bfe:	61fb      	str	r3, [r7, #28]
    printf("Pressure = %.1f\n", value);
 8019c00:	683b      	ldr	r3, [r7, #0]
 8019c02:	4618      	mov	r0, r3
 8019c04:	f7e6 fca4 	bl	8000550 <__aeabi_f2d>
 8019c08:	4602      	mov	r2, r0
 8019c0a:	460b      	mov	r3, r1
 8019c0c:	481b      	ldr	r0, [pc, #108]	; (8019c7c <Es_demo+0x5cc>)
 8019c0e:	f003 fdcf 	bl	801d7b0 <iprintf>
    HAL_Delay(500);
 8019c12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8019c16:	f7f7 fd71 	bl	80116fc <HAL_Delay>
  while (UserButtonPressed == 0)
 8019c1a:	4b19      	ldr	r3, [pc, #100]	; (8019c80 <Es_demo+0x5d0>)
 8019c1c:	781b      	ldrb	r3, [r3, #0]
 8019c1e:	b2db      	uxtb	r3, r3
 8019c20:	2b00      	cmp	r3, #0
 8019c22:	d0e1      	beq.n	8019be8 <Es_demo+0x538>
  }
  HAL_Delay(1000);
 8019c24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8019c28:	f7f7 fd68 	bl	80116fc <HAL_Delay>
  UserButtonPressed = RESET;
 8019c2c:	4b14      	ldr	r3, [pc, #80]	; (8019c80 <Es_demo+0x5d0>)
 8019c2e:	2200      	movs	r2, #0
 8019c30:	701a      	strb	r2, [r3, #0]

  /* Disable function */
  if (BSP_ENV_SENSOR_Disable(1, ENV_PRESSURE) != BSP_ERROR_NONE) result--;
 8019c32:	2102      	movs	r1, #2
 8019c34:	2001      	movs	r0, #1
 8019c36:	f7ea f859 	bl	8003cec <BSP_ENV_SENSOR_Disable>
 8019c3a:	4603      	mov	r3, r0
 8019c3c:	2b00      	cmp	r3, #0
 8019c3e:	d002      	beq.n	8019c46 <Es_demo+0x596>
 8019c40:	69fb      	ldr	r3, [r7, #28]
 8019c42:	3b01      	subs	r3, #1
 8019c44:	61fb      	str	r3, [r7, #28]
  
  /* De-initialize function */
  if (BSP_ENV_SENSOR_DeInit(1) != BSP_ERROR_NONE) result--;
 8019c46:	2001      	movs	r0, #1
 8019c48:	f7e9 ff52 	bl	8003af0 <BSP_ENV_SENSOR_DeInit>
 8019c4c:	4603      	mov	r3, r0
 8019c4e:	2b00      	cmp	r3, #0
 8019c50:	d002      	beq.n	8019c58 <Es_demo+0x5a8>
 8019c52:	69fb      	ldr	r3, [r7, #28]
 8019c54:	3b01      	subs	r3, #1
 8019c56:	61fb      	str	r3, [r7, #28]
  /***************/
  /* End of example */
  /***************/

  /* De-Initialize User Button */
  if (BSP_PB_DeInit(BUTTON_USER) != BSP_ERROR_NONE) result--;
 8019c58:	2000      	movs	r0, #0
 8019c5a:	f7e7 f9d3 	bl	8001004 <BSP_PB_DeInit>
 8019c5e:	4603      	mov	r3, r0
 8019c60:	2b00      	cmp	r3, #0
 8019c62:	d002      	beq.n	8019c6a <Es_demo+0x5ba>
 8019c64:	69fb      	ldr	r3, [r7, #28]
 8019c66:	3b01      	subs	r3, #1
 8019c68:	61fb      	str	r3, [r7, #28]

  printf("Environmental Sensors Example Ended\n");
 8019c6a:	4806      	ldr	r0, [pc, #24]	; (8019c84 <Es_demo+0x5d4>)
 8019c6c:	f003 fe0e 	bl	801d88c <puts>
  return result;
 8019c70:	69fb      	ldr	r3, [r7, #28]
}
 8019c72:	4618      	mov	r0, r3
 8019c74:	3720      	adds	r7, #32
 8019c76:	46bd      	mov	sp, r7
 8019c78:	bd80      	pop	{r7, pc}
 8019c7a:	bf00      	nop
 8019c7c:	08021f80 	.word	0x08021f80
 8019c80:	200314e8 	.word	0x200314e8
 8019c84:	08021f94 	.word	0x08021f94

08019c88 <Led_demo>:
  * @brief  Led demo
  * @param  None
  * @retval 0 if ok, else value < 0.
  */
int32_t Led_demo(void)
{
 8019c88:	b580      	push	{r7, lr}
 8019c8a:	b082      	sub	sp, #8
 8019c8c:	af00      	add	r7, sp, #0
  int32_t  result = 0;
 8019c8e:	2300      	movs	r3, #0
 8019c90:	607b      	str	r3, [r7, #4]

  printf("\n******LEDs EXAMPLE******\n");
 8019c92:	4875      	ldr	r0, [pc, #468]	; (8019e68 <Led_demo+0x1e0>)
 8019c94:	f003 fdfa 	bl	801d88c <puts>

  /* Initialize the LEDs */
  if (BSP_LED_Init(LED6) != BSP_ERROR_NONE) result--;
 8019c98:	2000      	movs	r0, #0
 8019c9a:	f7e7 f82f 	bl	8000cfc <BSP_LED_Init>
 8019c9e:	4603      	mov	r3, r0
 8019ca0:	2b00      	cmp	r3, #0
 8019ca2:	d002      	beq.n	8019caa <Led_demo+0x22>
 8019ca4:	687b      	ldr	r3, [r7, #4]
 8019ca6:	3b01      	subs	r3, #1
 8019ca8:	607b      	str	r3, [r7, #4]
  if (BSP_LED_Init(LED7) != BSP_ERROR_NONE) result--;
 8019caa:	2001      	movs	r0, #1
 8019cac:	f7e7 f826 	bl	8000cfc <BSP_LED_Init>
 8019cb0:	4603      	mov	r3, r0
 8019cb2:	2b00      	cmp	r3, #0
 8019cb4:	d002      	beq.n	8019cbc <Led_demo+0x34>
 8019cb6:	687b      	ldr	r3, [r7, #4]
 8019cb8:	3b01      	subs	r3, #1
 8019cba:	607b      	str	r3, [r7, #4]

  /* Switch on the LEDs */
  printf("Switch on LED6\n");
 8019cbc:	486b      	ldr	r0, [pc, #428]	; (8019e6c <Led_demo+0x1e4>)
 8019cbe:	f003 fde5 	bl	801d88c <puts>
  if (BSP_LED_On(LED6) != BSP_ERROR_NONE) result--;
 8019cc2:	2000      	movs	r0, #0
 8019cc4:	f7e7 f898 	bl	8000df8 <BSP_LED_On>
 8019cc8:	4603      	mov	r3, r0
 8019cca:	2b00      	cmp	r3, #0
 8019ccc:	d002      	beq.n	8019cd4 <Led_demo+0x4c>
 8019cce:	687b      	ldr	r3, [r7, #4]
 8019cd0:	3b01      	subs	r3, #1
 8019cd2:	607b      	str	r3, [r7, #4]
  HAL_Delay(1000);
 8019cd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8019cd8:	f7f7 fd10 	bl	80116fc <HAL_Delay>
  printf("Switch on LED7\n");
 8019cdc:	4864      	ldr	r0, [pc, #400]	; (8019e70 <Led_demo+0x1e8>)
 8019cde:	f003 fdd5 	bl	801d88c <puts>
  if (BSP_LED_On(LED7) != BSP_ERROR_NONE) result--;
 8019ce2:	2001      	movs	r0, #1
 8019ce4:	f7e7 f888 	bl	8000df8 <BSP_LED_On>
 8019ce8:	4603      	mov	r3, r0
 8019cea:	2b00      	cmp	r3, #0
 8019cec:	d002      	beq.n	8019cf4 <Led_demo+0x6c>
 8019cee:	687b      	ldr	r3, [r7, #4]
 8019cf0:	3b01      	subs	r3, #1
 8019cf2:	607b      	str	r3, [r7, #4]
  HAL_Delay(1000);
 8019cf4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8019cf8:	f7f7 fd00 	bl	80116fc <HAL_Delay>

  /* Check LEDs states */
  if (BSP_LED_GetState(LED6) != 1) result--;
 8019cfc:	2000      	movs	r0, #0
 8019cfe:	f7e7 f8d5 	bl	8000eac <BSP_LED_GetState>
 8019d02:	4603      	mov	r3, r0
 8019d04:	2b01      	cmp	r3, #1
 8019d06:	d002      	beq.n	8019d0e <Led_demo+0x86>
 8019d08:	687b      	ldr	r3, [r7, #4]
 8019d0a:	3b01      	subs	r3, #1
 8019d0c:	607b      	str	r3, [r7, #4]
  if (BSP_LED_GetState(LED7) != 1) result--;
 8019d0e:	2001      	movs	r0, #1
 8019d10:	f7e7 f8cc 	bl	8000eac <BSP_LED_GetState>
 8019d14:	4603      	mov	r3, r0
 8019d16:	2b01      	cmp	r3, #1
 8019d18:	d002      	beq.n	8019d20 <Led_demo+0x98>
 8019d1a:	687b      	ldr	r3, [r7, #4]
 8019d1c:	3b01      	subs	r3, #1
 8019d1e:	607b      	str	r3, [r7, #4]
  
  /* Check result */
 if (CheckResult() != 0U) result--;
 8019d20:	f000 fb42 	bl	801a3a8 <CheckResult>
 8019d24:	4603      	mov	r3, r0
 8019d26:	2b00      	cmp	r3, #0
 8019d28:	d002      	beq.n	8019d30 <Led_demo+0xa8>
 8019d2a:	687b      	ldr	r3, [r7, #4]
 8019d2c:	3b01      	subs	r3, #1
 8019d2e:	607b      	str	r3, [r7, #4]
  
  /* Toggle the LEDs */
  printf("Switch off LED6\n");
 8019d30:	4850      	ldr	r0, [pc, #320]	; (8019e74 <Led_demo+0x1ec>)
 8019d32:	f003 fdab 	bl	801d88c <puts>
  if (BSP_LED_Toggle(LED6) != BSP_ERROR_NONE) result--;
 8019d36:	2000      	movs	r0, #0
 8019d38:	f7e7 f89a 	bl	8000e70 <BSP_LED_Toggle>
 8019d3c:	4603      	mov	r3, r0
 8019d3e:	2b00      	cmp	r3, #0
 8019d40:	d002      	beq.n	8019d48 <Led_demo+0xc0>
 8019d42:	687b      	ldr	r3, [r7, #4]
 8019d44:	3b01      	subs	r3, #1
 8019d46:	607b      	str	r3, [r7, #4]
  HAL_Delay(1000);
 8019d48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8019d4c:	f7f7 fcd6 	bl	80116fc <HAL_Delay>
  printf("Switch off LED7\n");
 8019d50:	4849      	ldr	r0, [pc, #292]	; (8019e78 <Led_demo+0x1f0>)
 8019d52:	f003 fd9b 	bl	801d88c <puts>
  if (BSP_LED_Toggle(LED7) != BSP_ERROR_NONE) result--;
 8019d56:	2001      	movs	r0, #1
 8019d58:	f7e7 f88a 	bl	8000e70 <BSP_LED_Toggle>
 8019d5c:	4603      	mov	r3, r0
 8019d5e:	2b00      	cmp	r3, #0
 8019d60:	d002      	beq.n	8019d68 <Led_demo+0xe0>
 8019d62:	687b      	ldr	r3, [r7, #4]
 8019d64:	3b01      	subs	r3, #1
 8019d66:	607b      	str	r3, [r7, #4]
  HAL_Delay(1000);
 8019d68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8019d6c:	f7f7 fcc6 	bl	80116fc <HAL_Delay>

  /* Check LEDs states */
  if (BSP_LED_GetState(LED6) != 0) result--;
 8019d70:	2000      	movs	r0, #0
 8019d72:	f7e7 f89b 	bl	8000eac <BSP_LED_GetState>
 8019d76:	4603      	mov	r3, r0
 8019d78:	2b00      	cmp	r3, #0
 8019d7a:	d002      	beq.n	8019d82 <Led_demo+0xfa>
 8019d7c:	687b      	ldr	r3, [r7, #4]
 8019d7e:	3b01      	subs	r3, #1
 8019d80:	607b      	str	r3, [r7, #4]
  if (BSP_LED_GetState(LED7) != 0) result--;
 8019d82:	2001      	movs	r0, #1
 8019d84:	f7e7 f892 	bl	8000eac <BSP_LED_GetState>
 8019d88:	4603      	mov	r3, r0
 8019d8a:	2b00      	cmp	r3, #0
 8019d8c:	d002      	beq.n	8019d94 <Led_demo+0x10c>
 8019d8e:	687b      	ldr	r3, [r7, #4]
 8019d90:	3b01      	subs	r3, #1
 8019d92:	607b      	str	r3, [r7, #4]
  
  /* Check result */
 if (CheckResult() != 0U) result--;
 8019d94:	f000 fb08 	bl	801a3a8 <CheckResult>
 8019d98:	4603      	mov	r3, r0
 8019d9a:	2b00      	cmp	r3, #0
 8019d9c:	d002      	beq.n	8019da4 <Led_demo+0x11c>
 8019d9e:	687b      	ldr	r3, [r7, #4]
 8019da0:	3b01      	subs	r3, #1
 8019da2:	607b      	str	r3, [r7, #4]

  /* Toggle the LEDs */
  printf("Switch on LED6\n");
 8019da4:	4831      	ldr	r0, [pc, #196]	; (8019e6c <Led_demo+0x1e4>)
 8019da6:	f003 fd71 	bl	801d88c <puts>
  if (BSP_LED_Toggle(LED6) != BSP_ERROR_NONE) result--;
 8019daa:	2000      	movs	r0, #0
 8019dac:	f7e7 f860 	bl	8000e70 <BSP_LED_Toggle>
 8019db0:	4603      	mov	r3, r0
 8019db2:	2b00      	cmp	r3, #0
 8019db4:	d002      	beq.n	8019dbc <Led_demo+0x134>
 8019db6:	687b      	ldr	r3, [r7, #4]
 8019db8:	3b01      	subs	r3, #1
 8019dba:	607b      	str	r3, [r7, #4]
  HAL_Delay(1000);
 8019dbc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8019dc0:	f7f7 fc9c 	bl	80116fc <HAL_Delay>
  printf("Switch on LED7\n");
 8019dc4:	482a      	ldr	r0, [pc, #168]	; (8019e70 <Led_demo+0x1e8>)
 8019dc6:	f003 fd61 	bl	801d88c <puts>
  if (BSP_LED_Toggle(LED7) != BSP_ERROR_NONE) result--;
 8019dca:	2001      	movs	r0, #1
 8019dcc:	f7e7 f850 	bl	8000e70 <BSP_LED_Toggle>
 8019dd0:	4603      	mov	r3, r0
 8019dd2:	2b00      	cmp	r3, #0
 8019dd4:	d002      	beq.n	8019ddc <Led_demo+0x154>
 8019dd6:	687b      	ldr	r3, [r7, #4]
 8019dd8:	3b01      	subs	r3, #1
 8019dda:	607b      	str	r3, [r7, #4]
  HAL_Delay(1000);
 8019ddc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8019de0:	f7f7 fc8c 	bl	80116fc <HAL_Delay>

  /* Check result */
  if (CheckResult() != 0U) result--;
 8019de4:	f000 fae0 	bl	801a3a8 <CheckResult>
 8019de8:	4603      	mov	r3, r0
 8019dea:	2b00      	cmp	r3, #0
 8019dec:	d002      	beq.n	8019df4 <Led_demo+0x16c>
 8019dee:	687b      	ldr	r3, [r7, #4]
 8019df0:	3b01      	subs	r3, #1
 8019df2:	607b      	str	r3, [r7, #4]

  /* Switch off the LEDs */
  printf("Switch off LED6\n");
 8019df4:	481f      	ldr	r0, [pc, #124]	; (8019e74 <Led_demo+0x1ec>)
 8019df6:	f003 fd49 	bl	801d88c <puts>
  if (BSP_LED_Off(LED6) != BSP_ERROR_NONE) result--;
 8019dfa:	2000      	movs	r0, #0
 8019dfc:	f7e7 f81a 	bl	8000e34 <BSP_LED_Off>
 8019e00:	4603      	mov	r3, r0
 8019e02:	2b00      	cmp	r3, #0
 8019e04:	d002      	beq.n	8019e0c <Led_demo+0x184>
 8019e06:	687b      	ldr	r3, [r7, #4]
 8019e08:	3b01      	subs	r3, #1
 8019e0a:	607b      	str	r3, [r7, #4]
  HAL_Delay(1000);
 8019e0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8019e10:	f7f7 fc74 	bl	80116fc <HAL_Delay>
  printf("Switch off LED7\n");
 8019e14:	4818      	ldr	r0, [pc, #96]	; (8019e78 <Led_demo+0x1f0>)
 8019e16:	f003 fd39 	bl	801d88c <puts>
  if (BSP_LED_Off(LED7) != BSP_ERROR_NONE) result--;
 8019e1a:	2001      	movs	r0, #1
 8019e1c:	f7e7 f80a 	bl	8000e34 <BSP_LED_Off>
 8019e20:	4603      	mov	r3, r0
 8019e22:	2b00      	cmp	r3, #0
 8019e24:	d002      	beq.n	8019e2c <Led_demo+0x1a4>
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	3b01      	subs	r3, #1
 8019e2a:	607b      	str	r3, [r7, #4]
  HAL_Delay(1000);
 8019e2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8019e30:	f7f7 fc64 	bl	80116fc <HAL_Delay>

  /* Check result */
 if (CheckResult() != 0U) result--;
 8019e34:	f000 fab8 	bl	801a3a8 <CheckResult>
 8019e38:	4603      	mov	r3, r0
 8019e3a:	2b00      	cmp	r3, #0
 8019e3c:	d002      	beq.n	8019e44 <Led_demo+0x1bc>
 8019e3e:	687b      	ldr	r3, [r7, #4]
 8019e40:	3b01      	subs	r3, #1
 8019e42:	607b      	str	r3, [r7, #4]

  /* De-Initialize the LEDs */
  if (BSP_LED_DeInit(LED7) != BSP_ERROR_NONE) result--;
 8019e44:	2001      	movs	r0, #1
 8019e46:	f7e6 ffab 	bl	8000da0 <BSP_LED_DeInit>
 8019e4a:	4603      	mov	r3, r0
 8019e4c:	2b00      	cmp	r3, #0
 8019e4e:	d002      	beq.n	8019e56 <Led_demo+0x1ce>
 8019e50:	687b      	ldr	r3, [r7, #4]
 8019e52:	3b01      	subs	r3, #1
 8019e54:	607b      	str	r3, [r7, #4]
  
  printf("LEDs Example Ended\n");
 8019e56:	4809      	ldr	r0, [pc, #36]	; (8019e7c <Led_demo+0x1f4>)
 8019e58:	f003 fd18 	bl	801d88c <puts>
  return result;
 8019e5c:	687b      	ldr	r3, [r7, #4]
}
 8019e5e:	4618      	mov	r0, r3
 8019e60:	3708      	adds	r7, #8
 8019e62:	46bd      	mov	sp, r7
 8019e64:	bd80      	pop	{r7, pc}
 8019e66:	bf00      	nop
 8019e68:	08021fb8 	.word	0x08021fb8
 8019e6c:	08021fd4 	.word	0x08021fd4
 8019e70:	08021fe4 	.word	0x08021fe4
 8019e74:	08021ff4 	.word	0x08021ff4
 8019e78:	08022004 	.word	0x08022004
 8019e7c:	08022014 	.word	0x08022014

08019e80 <Ls_demo>:
  * @param  None
  * @retval 0 if ok, else value < 0.
  */

int32_t Ls_demo(void)
{
 8019e80:	b580      	push	{r7, lr}
 8019e82:	af00      	add	r7, sp, #0

  printf("\n******LIGHT SENSORS EXAMPLE******\n");
 8019e84:	4851      	ldr	r0, [pc, #324]	; (8019fcc <Ls_demo+0x14c>)
 8019e86:	f003 fd01 	bl	801d88c <puts>

  /* Initialize function */
  if (BSP_LIGHT_SENSOR_Init(0) != BSP_ERROR_NONE) result--;
 8019e8a:	2000      	movs	r0, #0
 8019e8c:	f7ea f986 	bl	800419c <BSP_LIGHT_SENSOR_Init>
 8019e90:	4603      	mov	r3, r0
 8019e92:	2b00      	cmp	r3, #0
 8019e94:	d004      	beq.n	8019ea0 <Ls_demo+0x20>
 8019e96:	4b4e      	ldr	r3, [pc, #312]	; (8019fd0 <Ls_demo+0x150>)
 8019e98:	681b      	ldr	r3, [r3, #0]
 8019e9a:	3b01      	subs	r3, #1
 8019e9c:	4a4c      	ldr	r2, [pc, #304]	; (8019fd0 <Ls_demo+0x150>)
 8019e9e:	6013      	str	r3, [r2, #0]

  if (BSP_LIGHT_SENSOR_GetCapabilities(0, &Capabilities) != BSP_ERROR_NONE) result--;
 8019ea0:	494c      	ldr	r1, [pc, #304]	; (8019fd4 <Ls_demo+0x154>)
 8019ea2:	2000      	movs	r0, #0
 8019ea4:	f7ea f9d6 	bl	8004254 <BSP_LIGHT_SENSOR_GetCapabilities>
 8019ea8:	4603      	mov	r3, r0
 8019eaa:	2b00      	cmp	r3, #0
 8019eac:	d004      	beq.n	8019eb8 <Ls_demo+0x38>
 8019eae:	4b48      	ldr	r3, [pc, #288]	; (8019fd0 <Ls_demo+0x150>)
 8019eb0:	681b      	ldr	r3, [r3, #0]
 8019eb2:	3b01      	subs	r3, #1
 8019eb4:	4a46      	ldr	r2, [pc, #280]	; (8019fd0 <Ls_demo+0x150>)
 8019eb6:	6013      	str	r3, [r2, #0]

  /* Read id function */
  if (BSP_LIGHT_SENSOR_ReadID(0, &sensorId) != BSP_ERROR_NONE) result--;
 8019eb8:	4947      	ldr	r1, [pc, #284]	; (8019fd8 <Ls_demo+0x158>)
 8019eba:	2000      	movs	r0, #0
 8019ebc:	f7ea f9a0 	bl	8004200 <BSP_LIGHT_SENSOR_ReadID>
 8019ec0:	4603      	mov	r3, r0
 8019ec2:	2b00      	cmp	r3, #0
 8019ec4:	d004      	beq.n	8019ed0 <Ls_demo+0x50>
 8019ec6:	4b42      	ldr	r3, [pc, #264]	; (8019fd0 <Ls_demo+0x150>)
 8019ec8:	681b      	ldr	r3, [r3, #0]
 8019eca:	3b01      	subs	r3, #1
 8019ecc:	4a40      	ldr	r2, [pc, #256]	; (8019fd0 <Ls_demo+0x150>)
 8019ece:	6013      	str	r3, [r2, #0]

  /* STOP the Sensor */
  if (BSP_LIGHT_SENSOR_Stop(0)) result--;
 8019ed0:	2000      	movs	r0, #0
 8019ed2:	f7ea fad7 	bl	8004484 <BSP_LIGHT_SENSOR_Stop>
 8019ed6:	4603      	mov	r3, r0
 8019ed8:	2b00      	cmp	r3, #0
 8019eda:	d004      	beq.n	8019ee6 <Ls_demo+0x66>
 8019edc:	4b3c      	ldr	r3, [pc, #240]	; (8019fd0 <Ls_demo+0x150>)
 8019ede:	681b      	ldr	r3, [r3, #0]
 8019ee0:	3b01      	subs	r3, #1
 8019ee2:	4a3b      	ldr	r2, [pc, #236]	; (8019fd0 <Ls_demo+0x150>)
 8019ee4:	6013      	str	r3, [r2, #0]

  /* Set Sensor Gain */
  if (BSP_LIGHT_SENSOR_SetGain(0,LIGHT_SENSOR_ALS_CHANNEL, LIGHT_SENSOR_GAIN_1)!= BSP_ERROR_NONE) result--;
 8019ee6:	2200      	movs	r2, #0
 8019ee8:	2100      	movs	r1, #0
 8019eea:	2000      	movs	r0, #0
 8019eec:	f7ea f9dc 	bl	80042a8 <BSP_LIGHT_SENSOR_SetGain>
 8019ef0:	4603      	mov	r3, r0
 8019ef2:	2b00      	cmp	r3, #0
 8019ef4:	d004      	beq.n	8019f00 <Ls_demo+0x80>
 8019ef6:	4b36      	ldr	r3, [pc, #216]	; (8019fd0 <Ls_demo+0x150>)
 8019ef8:	681b      	ldr	r3, [r3, #0]
 8019efa:	3b01      	subs	r3, #1
 8019efc:	4a34      	ldr	r2, [pc, #208]	; (8019fd0 <Ls_demo+0x150>)
 8019efe:	6013      	str	r3, [r2, #0]

  /* Set Sensor Exposure Time (Integreation Time) */
  if ( BSP_LIGHT_SENSOR_SetExposureTime(0, LIGHT_SENSOR_EXPOSURE_TIME_100)!= BSP_ERROR_NONE) result--;
 8019f00:	2100      	movs	r1, #0
 8019f02:	2000      	movs	r0, #0
 8019f04:	f7ea fa32 	bl	800436c <BSP_LIGHT_SENSOR_SetExposureTime>
 8019f08:	4603      	mov	r3, r0
 8019f0a:	2b00      	cmp	r3, #0
 8019f0c:	d004      	beq.n	8019f18 <Ls_demo+0x98>
 8019f0e:	4b30      	ldr	r3, [pc, #192]	; (8019fd0 <Ls_demo+0x150>)
 8019f10:	681b      	ldr	r3, [r3, #0]
 8019f12:	3b01      	subs	r3, #1
 8019f14:	4a2e      	ldr	r2, [pc, #184]	; (8019fd0 <Ls_demo+0x150>)
 8019f16:	6013      	str	r3, [r2, #0]

  HAL_Delay(100);
 8019f18:	2064      	movs	r0, #100	; 0x64
 8019f1a:	f7f7 fbef 	bl	80116fc <HAL_Delay>
   /* Start the Sensor */
  if (BSP_LIGHT_SENSOR_Start(0,LIGHT_SENSOR_MODE_CONTINUOUS)) result--;
 8019f1e:	2101      	movs	r1, #1
 8019f20:	2000      	movs	r0, #0
 8019f22:	f7ea fa83 	bl	800442c <BSP_LIGHT_SENSOR_Start>
 8019f26:	4603      	mov	r3, r0
 8019f28:	2b00      	cmp	r3, #0
 8019f2a:	d004      	beq.n	8019f36 <Ls_demo+0xb6>
 8019f2c:	4b28      	ldr	r3, [pc, #160]	; (8019fd0 <Ls_demo+0x150>)
 8019f2e:	681b      	ldr	r3, [r3, #0]
 8019f30:	3b01      	subs	r3, #1
 8019f32:	4a27      	ldr	r2, [pc, #156]	; (8019fd0 <Ls_demo+0x150>)
 8019f34:	6013      	str	r3, [r2, #0]

  /*Sensor Get channel values */
  if ( BSP_LIGHT_SENSOR_GetValues(0,&pResult[0])!= BSP_ERROR_NONE) result--;
 8019f36:	4929      	ldr	r1, [pc, #164]	; (8019fdc <Ls_demo+0x15c>)
 8019f38:	2000      	movs	r0, #0
 8019f3a:	f7ea facb 	bl	80044d4 <BSP_LIGHT_SENSOR_GetValues>
 8019f3e:	4603      	mov	r3, r0
 8019f40:	2b00      	cmp	r3, #0
 8019f42:	d004      	beq.n	8019f4e <Ls_demo+0xce>
 8019f44:	4b22      	ldr	r3, [pc, #136]	; (8019fd0 <Ls_demo+0x150>)
 8019f46:	681b      	ldr	r3, [r3, #0]
 8019f48:	3b01      	subs	r3, #1
 8019f4a:	4a21      	ldr	r2, [pc, #132]	; (8019fd0 <Ls_demo+0x150>)
 8019f4c:	6013      	str	r3, [r2, #0]

  /* Convert ALS Channel Value to Lux */
  LIGHT_SENSOR_ConvertToLUX(0, pResult[0], &ALS_Lux);
 8019f4e:	4b23      	ldr	r3, [pc, #140]	; (8019fdc <Ls_demo+0x15c>)
 8019f50:	681b      	ldr	r3, [r3, #0]
 8019f52:	4a23      	ldr	r2, [pc, #140]	; (8019fe0 <Ls_demo+0x160>)
 8019f54:	4619      	mov	r1, r3
 8019f56:	2000      	movs	r0, #0
 8019f58:	f000 f8da 	bl	801a110 <LIGHT_SENSOR_ConvertToLUX>

  if(ALS_Lux > 10000)
 8019f5c:	4b20      	ldr	r3, [pc, #128]	; (8019fe0 <Ls_demo+0x160>)
 8019f5e:	681b      	ldr	r3, [r3, #0]
 8019f60:	f242 7210 	movw	r2, #10000	; 0x2710
 8019f64:	4293      	cmp	r3, r2
 8019f66:	d907      	bls.n	8019f78 <Ls_demo+0xf8>
  {
    ALS_Lux = LIGHT_SENSOR_LuxCompensation(ALS_Lux);
 8019f68:	4b1d      	ldr	r3, [pc, #116]	; (8019fe0 <Ls_demo+0x160>)
 8019f6a:	681b      	ldr	r3, [r3, #0]
 8019f6c:	4618      	mov	r0, r3
 8019f6e:	f000 f83f 	bl	8019ff0 <LIGHT_SENSOR_LuxCompensation>
 8019f72:	4603      	mov	r3, r0
 8019f74:	4a1a      	ldr	r2, [pc, #104]	; (8019fe0 <Ls_demo+0x160>)
 8019f76:	6013      	str	r3, [r2, #0]
  }

  /* Convert White Channel Value to Lux */
  LIGHT_SENSOR_ConvertToLUX(0, pResult[1], &WHITE_lux);
 8019f78:	4b18      	ldr	r3, [pc, #96]	; (8019fdc <Ls_demo+0x15c>)
 8019f7a:	685b      	ldr	r3, [r3, #4]
 8019f7c:	4a19      	ldr	r2, [pc, #100]	; (8019fe4 <Ls_demo+0x164>)
 8019f7e:	4619      	mov	r1, r3
 8019f80:	2000      	movs	r0, #0
 8019f82:	f000 f8c5 	bl	801a110 <LIGHT_SENSOR_ConvertToLUX>

  if(WHITE_lux > 10000)
 8019f86:	4b17      	ldr	r3, [pc, #92]	; (8019fe4 <Ls_demo+0x164>)
 8019f88:	681b      	ldr	r3, [r3, #0]
 8019f8a:	f242 7210 	movw	r2, #10000	; 0x2710
 8019f8e:	4293      	cmp	r3, r2
 8019f90:	d907      	bls.n	8019fa2 <Ls_demo+0x122>
  {
    WHITE_lux = LIGHT_SENSOR_LuxCompensation(WHITE_lux);
 8019f92:	4b14      	ldr	r3, [pc, #80]	; (8019fe4 <Ls_demo+0x164>)
 8019f94:	681b      	ldr	r3, [r3, #0]
 8019f96:	4618      	mov	r0, r3
 8019f98:	f000 f82a 	bl	8019ff0 <LIGHT_SENSOR_LuxCompensation>
 8019f9c:	4603      	mov	r3, r0
 8019f9e:	4a11      	ldr	r2, [pc, #68]	; (8019fe4 <Ls_demo+0x164>)
 8019fa0:	6013      	str	r3, [r2, #0]
  }

  printf ("\n Ambiant Light channel value %u , %u lux \n",pResult[0],ALS_Lux);
 8019fa2:	4b0e      	ldr	r3, [pc, #56]	; (8019fdc <Ls_demo+0x15c>)
 8019fa4:	681b      	ldr	r3, [r3, #0]
 8019fa6:	4a0e      	ldr	r2, [pc, #56]	; (8019fe0 <Ls_demo+0x160>)
 8019fa8:	6812      	ldr	r2, [r2, #0]
 8019faa:	4619      	mov	r1, r3
 8019fac:	480e      	ldr	r0, [pc, #56]	; (8019fe8 <Ls_demo+0x168>)
 8019fae:	f003 fbff 	bl	801d7b0 <iprintf>
  printf ("\n White Light channel value %u , %u lux \n",pResult[1],WHITE_lux);
 8019fb2:	4b0a      	ldr	r3, [pc, #40]	; (8019fdc <Ls_demo+0x15c>)
 8019fb4:	685b      	ldr	r3, [r3, #4]
 8019fb6:	4a0b      	ldr	r2, [pc, #44]	; (8019fe4 <Ls_demo+0x164>)
 8019fb8:	6812      	ldr	r2, [r2, #0]
 8019fba:	4619      	mov	r1, r3
 8019fbc:	480b      	ldr	r0, [pc, #44]	; (8019fec <Ls_demo+0x16c>)
 8019fbe:	f003 fbf7 	bl	801d7b0 <iprintf>

  return result;
 8019fc2:	4b03      	ldr	r3, [pc, #12]	; (8019fd0 <Ls_demo+0x150>)
 8019fc4:	681b      	ldr	r3, [r3, #0]

}
 8019fc6:	4618      	mov	r0, r3
 8019fc8:	bd80      	pop	{r7, pc}
 8019fca:	bf00      	nop
 8019fcc:	08022028 	.word	0x08022028
 8019fd0:	200314cc 	.word	0x200314cc
 8019fd4:	200314d0 	.word	0x200314d0
 8019fd8:	200314d4 	.word	0x200314d4
 8019fdc:	200314d8 	.word	0x200314d8
 8019fe0:	200314e0 	.word	0x200314e0
 8019fe4:	200314e4 	.word	0x200314e4
 8019fe8:	0802204c 	.word	0x0802204c
 8019fec:	08022078 	.word	0x08022078

08019ff0 <LIGHT_SENSOR_LuxCompensation>:
  *          value light Level
  * @param  Value  light level in lux > 10000
  * @retval Light Level in lux
  */
static uint32_t LIGHT_SENSOR_LuxCompensation(uint32_t Value)
{
 8019ff0:	b5b0      	push	{r4, r5, r7, lr}
 8019ff2:	b084      	sub	sp, #16
 8019ff4:	af00      	add	r7, sp, #0
 8019ff6:	6078      	str	r0, [r7, #4]

  /* Polynomial is pulled from the datasheet */
  float compLux = (.00000000000060135 * (pow(Value, 4))) -
 8019ff8:	6878      	ldr	r0, [r7, #4]
 8019ffa:	f7e6 fa87 	bl	800050c <__aeabi_ui2d>
 8019ffe:	4602      	mov	r2, r0
 801a000:	460b      	mov	r3, r1
 801a002:	ed9f 1b35 	vldr	d1, [pc, #212]	; 801a0d8 <LIGHT_SENSOR_LuxCompensation+0xe8>
 801a006:	ec43 2b10 	vmov	d0, r2, r3
 801a00a:	f006 fd55 	bl	8020ab8 <pow>
 801a00e:	ec51 0b10 	vmov	r0, r1, d0
 801a012:	a337      	add	r3, pc, #220	; (adr r3, 801a0f0 <LIGHT_SENSOR_LuxCompensation+0x100>)
 801a014:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a018:	f7e6 faf2 	bl	8000600 <__aeabi_dmul>
 801a01c:	4602      	mov	r2, r0
 801a01e:	460b      	mov	r3, r1
 801a020:	4614      	mov	r4, r2
 801a022:	461d      	mov	r5, r3
                      (.0000000093924 * (pow(Value, 3))) +
 801a024:	6878      	ldr	r0, [r7, #4]
 801a026:	f7e6 fa71 	bl	800050c <__aeabi_ui2d>
 801a02a:	4602      	mov	r2, r0
 801a02c:	460b      	mov	r3, r1
 801a02e:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 801a0e0 <LIGHT_SENSOR_LuxCompensation+0xf0>
 801a032:	ec43 2b10 	vmov	d0, r2, r3
 801a036:	f006 fd3f 	bl	8020ab8 <pow>
 801a03a:	ec51 0b10 	vmov	r0, r1, d0
 801a03e:	a32e      	add	r3, pc, #184	; (adr r3, 801a0f8 <LIGHT_SENSOR_LuxCompensation+0x108>)
 801a040:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a044:	f7e6 fadc 	bl	8000600 <__aeabi_dmul>
 801a048:	4602      	mov	r2, r0
 801a04a:	460b      	mov	r3, r1
  float compLux = (.00000000000060135 * (pow(Value, 4))) -
 801a04c:	4620      	mov	r0, r4
 801a04e:	4629      	mov	r1, r5
 801a050:	f7e6 f91e 	bl	8000290 <__aeabi_dsub>
 801a054:	4602      	mov	r2, r0
 801a056:	460b      	mov	r3, r1
 801a058:	4614      	mov	r4, r2
 801a05a:	461d      	mov	r5, r3
                      (.000081488 * (pow(Value,2))) +
 801a05c:	6878      	ldr	r0, [r7, #4]
 801a05e:	f7e6 fa55 	bl	800050c <__aeabi_ui2d>
 801a062:	4602      	mov	r2, r0
 801a064:	460b      	mov	r3, r1
 801a066:	ed9f 1b20 	vldr	d1, [pc, #128]	; 801a0e8 <LIGHT_SENSOR_LuxCompensation+0xf8>
 801a06a:	ec43 2b10 	vmov	d0, r2, r3
 801a06e:	f006 fd23 	bl	8020ab8 <pow>
 801a072:	ec51 0b10 	vmov	r0, r1, d0
 801a076:	a322      	add	r3, pc, #136	; (adr r3, 801a100 <LIGHT_SENSOR_LuxCompensation+0x110>)
 801a078:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a07c:	f7e6 fac0 	bl	8000600 <__aeabi_dmul>
 801a080:	4602      	mov	r2, r0
 801a082:	460b      	mov	r3, r1
                      (.0000000093924 * (pow(Value, 3))) +
 801a084:	4620      	mov	r0, r4
 801a086:	4629      	mov	r1, r5
 801a088:	f7e6 f904 	bl	8000294 <__adddf3>
 801a08c:	4602      	mov	r2, r0
 801a08e:	460b      	mov	r3, r1
 801a090:	4614      	mov	r4, r2
 801a092:	461d      	mov	r5, r3
                      (1.0023 * Value);
 801a094:	6878      	ldr	r0, [r7, #4]
 801a096:	f7e6 fa39 	bl	800050c <__aeabi_ui2d>
 801a09a:	a31b      	add	r3, pc, #108	; (adr r3, 801a108 <LIGHT_SENSOR_LuxCompensation+0x118>)
 801a09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0a0:	f7e6 faae 	bl	8000600 <__aeabi_dmul>
 801a0a4:	4602      	mov	r2, r0
 801a0a6:	460b      	mov	r3, r1
                      (.000081488 * (pow(Value,2))) +
 801a0a8:	4620      	mov	r0, r4
 801a0aa:	4629      	mov	r1, r5
 801a0ac:	f7e6 f8f2 	bl	8000294 <__adddf3>
 801a0b0:	4602      	mov	r2, r0
 801a0b2:	460b      	mov	r3, r1
  float compLux = (.00000000000060135 * (pow(Value, 4))) -
 801a0b4:	4610      	mov	r0, r2
 801a0b6:	4619      	mov	r1, r3
 801a0b8:	f7e6 fd9a 	bl	8000bf0 <__aeabi_d2f>
 801a0bc:	4603      	mov	r3, r0
 801a0be:	60fb      	str	r3, [r7, #12]
  return (uint32_t)compLux;
 801a0c0:	edd7 7a03 	vldr	s15, [r7, #12]
 801a0c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801a0c8:	ee17 3a90 	vmov	r3, s15
}
 801a0cc:	4618      	mov	r0, r3
 801a0ce:	3710      	adds	r7, #16
 801a0d0:	46bd      	mov	sp, r7
 801a0d2:	bdb0      	pop	{r4, r5, r7, pc}
 801a0d4:	f3af 8000 	nop.w
 801a0d8:	00000000 	.word	0x00000000
 801a0dc:	40100000 	.word	0x40100000
 801a0e0:	00000000 	.word	0x00000000
 801a0e4:	40080000 	.word	0x40080000
 801a0e8:	00000000 	.word	0x00000000
 801a0ec:	40000000 	.word	0x40000000
 801a0f0:	b18f283b 	.word	0xb18f283b
 801a0f4:	3d65287a 	.word	0x3d65287a
 801a0f8:	c91ef46e 	.word	0xc91ef46e
 801a0fc:	3e442b86 	.word	0x3e442b86
 801a100:	2e18cab0 	.word	0x2e18cab0
 801a104:	3f155c91 	.word	0x3f155c91
 801a108:	b98c7e28 	.word	0xb98c7e28
 801a10c:	3ff0096b 	.word	0x3ff0096b

0801a110 <LIGHT_SENSOR_ConvertToLUX>:
  * @param  value     Raw values to be converted in lux
  * @param  LuxLevel  Pointer to light value
  * @retval Light Level in lux
  */
static int32_t LIGHT_SENSOR_ConvertToLUX(uint32_t Instance, uint32_t Value, uint32_t *LuxLevel)
{
 801a110:	b580      	push	{r7, lr}
 801a112:	b08a      	sub	sp, #40	; 0x28
 801a114:	af00      	add	r7, sp, #0
 801a116:	60f8      	str	r0, [r7, #12]
 801a118:	60b9      	str	r1, [r7, #8]
 801a11a:	607a      	str	r2, [r7, #4]
  int32_t ret = VEML3235_OK;
 801a11c:	2300      	movs	r3, #0
 801a11e:	627b      	str	r3, [r7, #36]	; 0x24
  float luxConv = 0;
 801a120:	f04f 0300 	mov.w	r3, #0
 801a124:	623b      	str	r3, [r7, #32]
  uint8_t convPos = 0;
 801a126:	2300      	movs	r3, #0
 801a128:	77fb      	strb	r3, [r7, #31]
  uint32_t pGain;
  uint32_t pExposureTime;

  if (BSP_LIGHT_SENSOR_GetGain(Instance,LIGHT_SENSOR_ALS_CHANNEL,&pGain)!= BSP_ERROR_NONE)
 801a12a:	f107 0318 	add.w	r3, r7, #24
 801a12e:	461a      	mov	r2, r3
 801a130:	2100      	movs	r1, #0
 801a132:	68f8      	ldr	r0, [r7, #12]
 801a134:	f7ea f8ee 	bl	8004314 <BSP_LIGHT_SENSOR_GetGain>
 801a138:	4603      	mov	r3, r0
 801a13a:	2b00      	cmp	r3, #0
 801a13c:	d11f      	bne.n	801a17e <LIGHT_SENSOR_ConvertToLUX+0x6e>
  {
  }
  else if (BSP_LIGHT_SENSOR_GetExposureTime(Instance,&pExposureTime)!= BSP_ERROR_NONE)
 801a13e:	f107 0314 	add.w	r3, r7, #20
 801a142:	4619      	mov	r1, r3
 801a144:	68f8      	ldr	r0, [r7, #12]
 801a146:	f7ea f947 	bl	80043d8 <BSP_LIGHT_SENSOR_GetExposureTime>
 801a14a:	4603      	mov	r3, r0
 801a14c:	2b00      	cmp	r3, #0
 801a14e:	d116      	bne.n	801a17e <LIGHT_SENSOR_ConvertToLUX+0x6e>
  {
  }
  else
  {
    if (pGain == VEML3235_CONF_GAIN_1)
 801a150:	69bb      	ldr	r3, [r7, #24]
 801a152:	2b00      	cmp	r3, #0
 801a154:	d102      	bne.n	801a15c <LIGHT_SENSOR_ConvertToLUX+0x4c>
    {
      convPos = 2;
 801a156:	2302      	movs	r3, #2
 801a158:	77fb      	strb	r3, [r7, #31]
 801a15a:	e010      	b.n	801a17e <LIGHT_SENSOR_ConvertToLUX+0x6e>
    }
    else if (pGain == VEML3235_CONF_GAIN_2)
 801a15c:	69bb      	ldr	r3, [r7, #24]
 801a15e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801a162:	d102      	bne.n	801a16a <LIGHT_SENSOR_ConvertToLUX+0x5a>
    {
      convPos = 1;
 801a164:	2301      	movs	r3, #1
 801a166:	77fb      	strb	r3, [r7, #31]
 801a168:	e009      	b.n	801a17e <LIGHT_SENSOR_ConvertToLUX+0x6e>
    }
    else if (pGain == VEML3235_CONF_GAIN_4)
 801a16a:	69bb      	ldr	r3, [r7, #24]
 801a16c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 801a170:	d102      	bne.n	801a178 <LIGHT_SENSOR_ConvertToLUX+0x68>
    {
      convPos = 0;
 801a172:	2300      	movs	r3, #0
 801a174:	77fb      	strb	r3, [r7, #31]
 801a176:	e002      	b.n	801a17e <LIGHT_SENSOR_ConvertToLUX+0x6e>
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 801a178:	f06f 0301 	mvn.w	r3, #1
 801a17c:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  if(ret == BSP_ERROR_NONE)
 801a17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a180:	2b00      	cmp	r3, #0
 801a182:	d135      	bne.n	801a1f0 <LIGHT_SENSOR_ConvertToLUX+0xe0>
  {
    if(pExposureTime == VEML3235_CONF_IT800)
 801a184:	697b      	ldr	r3, [r7, #20]
 801a186:	2bc0      	cmp	r3, #192	; 0xc0
 801a188:	d106      	bne.n	801a198 <LIGHT_SENSOR_ConvertToLUX+0x88>
    {
      luxConv = IntegrationTime_800[convPos];
 801a18a:	7ffb      	ldrb	r3, [r7, #31]
 801a18c:	4a22      	ldr	r2, [pc, #136]	; (801a218 <LIGHT_SENSOR_ConvertToLUX+0x108>)
 801a18e:	009b      	lsls	r3, r3, #2
 801a190:	4413      	add	r3, r2
 801a192:	681b      	ldr	r3, [r3, #0]
 801a194:	623b      	str	r3, [r7, #32]
 801a196:	e02b      	b.n	801a1f0 <LIGHT_SENSOR_ConvertToLUX+0xe0>
    }
    else if(pExposureTime == VEML3235_CONF_IT400)
 801a198:	697b      	ldr	r3, [r7, #20]
 801a19a:	2b80      	cmp	r3, #128	; 0x80
 801a19c:	d106      	bne.n	801a1ac <LIGHT_SENSOR_ConvertToLUX+0x9c>
    {
      luxConv = IntegrationTime_400[convPos];
 801a19e:	7ffb      	ldrb	r3, [r7, #31]
 801a1a0:	4a1e      	ldr	r2, [pc, #120]	; (801a21c <LIGHT_SENSOR_ConvertToLUX+0x10c>)
 801a1a2:	009b      	lsls	r3, r3, #2
 801a1a4:	4413      	add	r3, r2
 801a1a6:	681b      	ldr	r3, [r3, #0]
 801a1a8:	623b      	str	r3, [r7, #32]
 801a1aa:	e021      	b.n	801a1f0 <LIGHT_SENSOR_ConvertToLUX+0xe0>
    }
    else if(pExposureTime == VEML3235_CONF_IT200)
 801a1ac:	697b      	ldr	r3, [r7, #20]
 801a1ae:	2b40      	cmp	r3, #64	; 0x40
 801a1b0:	d106      	bne.n	801a1c0 <LIGHT_SENSOR_ConvertToLUX+0xb0>
    {
      luxConv = IntegrationTime_200[convPos];
 801a1b2:	7ffb      	ldrb	r3, [r7, #31]
 801a1b4:	4a1a      	ldr	r2, [pc, #104]	; (801a220 <LIGHT_SENSOR_ConvertToLUX+0x110>)
 801a1b6:	009b      	lsls	r3, r3, #2
 801a1b8:	4413      	add	r3, r2
 801a1ba:	681b      	ldr	r3, [r3, #0]
 801a1bc:	623b      	str	r3, [r7, #32]
 801a1be:	e017      	b.n	801a1f0 <LIGHT_SENSOR_ConvertToLUX+0xe0>
    }
    else if(pExposureTime == VEML3235_CONF_IT100)
 801a1c0:	697b      	ldr	r3, [r7, #20]
 801a1c2:	2b00      	cmp	r3, #0
 801a1c4:	d106      	bne.n	801a1d4 <LIGHT_SENSOR_ConvertToLUX+0xc4>
    {
      luxConv = IntegrationTime_100[convPos];
 801a1c6:	7ffb      	ldrb	r3, [r7, #31]
 801a1c8:	4a16      	ldr	r2, [pc, #88]	; (801a224 <LIGHT_SENSOR_ConvertToLUX+0x114>)
 801a1ca:	009b      	lsls	r3, r3, #2
 801a1cc:	4413      	add	r3, r2
 801a1ce:	681b      	ldr	r3, [r3, #0]
 801a1d0:	623b      	str	r3, [r7, #32]
 801a1d2:	e00d      	b.n	801a1f0 <LIGHT_SENSOR_ConvertToLUX+0xe0>
    }
    else if(pExposureTime == VEML3235_CONF_IT50)
 801a1d4:	697b      	ldr	r3, [r7, #20]
 801a1d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a1da:	d106      	bne.n	801a1ea <LIGHT_SENSOR_ConvertToLUX+0xda>
    {
      luxConv = IntegrationTime_50[convPos];
 801a1dc:	7ffb      	ldrb	r3, [r7, #31]
 801a1de:	4a12      	ldr	r2, [pc, #72]	; (801a228 <LIGHT_SENSOR_ConvertToLUX+0x118>)
 801a1e0:	009b      	lsls	r3, r3, #2
 801a1e2:	4413      	add	r3, r2
 801a1e4:	681b      	ldr	r3, [r3, #0]
 801a1e6:	623b      	str	r3, [r7, #32]
 801a1e8:	e002      	b.n	801a1f0 <LIGHT_SENSOR_ConvertToLUX+0xe0>
    }
    else
    {
      ret = VEML3235_INVALID_PARAM;
 801a1ea:	f06f 0301 	mvn.w	r3, #1
 801a1ee:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  *LuxLevel =(uint32_t)(luxConv * Value);
 801a1f0:	68bb      	ldr	r3, [r7, #8]
 801a1f2:	ee07 3a90 	vmov	s15, r3
 801a1f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801a1fa:	edd7 7a08 	vldr	s15, [r7, #32]
 801a1fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a202:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801a206:	ee17 2a90 	vmov	r2, s15
 801a20a:	687b      	ldr	r3, [r7, #4]
 801a20c:	601a      	str	r2, [r3, #0]

  return ret;
 801a20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801a210:	4618      	mov	r0, r3
 801a212:	3728      	adds	r7, #40	; 0x28
 801a214:	46bd      	mov	sp, r7
 801a216:	bd80      	pop	{r7, pc}
 801a218:	2000023c 	.word	0x2000023c
 801a21c:	20000248 	.word	0x20000248
 801a220:	20000254 	.word	0x20000254
 801a224:	20000260 	.word	0x20000260
 801a228:	2000026c 	.word	0x2000026c

0801a22c <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 801a22c:	b580      	push	{r7, lr}
 801a22e:	af00      	add	r7, sp, #0

#if defined(__GNUC__) && !defined(__ARMCC_VERSION)
  initialise_monitor_handles();	/*rtt*/
 801a230:	f006 fb9c 	bl	802096c <initialise_monitor_handles>
  printf("Semihosting Test...\n\r");
 801a234:	4813      	ldr	r0, [pc, #76]	; (801a284 <main+0x58>)
 801a236:	f003 fabb 	bl	801d7b0 <iprintf>
       - Configure the Flash prefetch
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 3
       - Low Level Initialization
     */
  HAL_Init();
 801a23a:	f7f7 f9db 	bl	80115f4 <HAL_Init>
  /* Enable the Instruction Cache */
  CACHE_Enable();
 801a23e:	f000 f899 	bl	801a374 <CACHE_Enable>

  /* Configure the System clock to have a frequency of 160 MHz */
  SystemClock_Config();
 801a242:	f000 f825 	bl	801a290 <SystemClock_Config>

  while (1)
  {
    if (BSP_examples[DemoIndex++].DemoFunc() != 0)
 801a246:	4b10      	ldr	r3, [pc, #64]	; (801a288 <main+0x5c>)
 801a248:	781b      	ldrb	r3, [r3, #0]
 801a24a:	b2db      	uxtb	r3, r3
 801a24c:	1c5a      	adds	r2, r3, #1
 801a24e:	b2d1      	uxtb	r1, r2
 801a250:	4a0d      	ldr	r2, [pc, #52]	; (801a288 <main+0x5c>)
 801a252:	7011      	strb	r1, [r2, #0]
 801a254:	4619      	mov	r1, r3
 801a256:	4a0d      	ldr	r2, [pc, #52]	; (801a28c <main+0x60>)
 801a258:	460b      	mov	r3, r1
 801a25a:	00db      	lsls	r3, r3, #3
 801a25c:	1a5b      	subs	r3, r3, r1
 801a25e:	00db      	lsls	r3, r3, #3
 801a260:	4413      	add	r3, r2
 801a262:	681b      	ldr	r3, [r3, #0]
 801a264:	4798      	blx	r3
 801a266:	4603      	mov	r3, r0
 801a268:	2b00      	cmp	r3, #0
 801a26a:	d001      	beq.n	801a270 <main+0x44>
    {
      Error_Handler();
 801a26c:	f000 f88c 	bl	801a388 <Error_Handler>
    }

    if(DemoIndex >= COUNT_OF_EXAMPLE(BSP_examples))
 801a270:	4b05      	ldr	r3, [pc, #20]	; (801a288 <main+0x5c>)
 801a272:	781b      	ldrb	r3, [r3, #0]
 801a274:	b2db      	uxtb	r3, r3
 801a276:	2b0a      	cmp	r3, #10
 801a278:	d9e5      	bls.n	801a246 <main+0x1a>
    {
      DemoIndex = 0;
 801a27a:	4b03      	ldr	r3, [pc, #12]	; (801a288 <main+0x5c>)
 801a27c:	2200      	movs	r2, #0
 801a27e:	701a      	strb	r2, [r3, #0]
    if (BSP_examples[DemoIndex++].DemoFunc() != 0)
 801a280:	e7e1      	b.n	801a246 <main+0x1a>
 801a282:	bf00      	nop
 801a284:	080220a4 	.word	0x080220a4
 801a288:	200314e9 	.word	0x200314e9
 801a28c:	20000278 	.word	0x20000278

0801a290 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 801a290:	b580      	push	{r7, lr}
 801a292:	b0a0      	sub	sp, #128	; 0x80
 801a294:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801a296:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801a29a:	2200      	movs	r2, #0
 801a29c:	601a      	str	r2, [r3, #0]
 801a29e:	605a      	str	r2, [r3, #4]
 801a2a0:	609a      	str	r2, [r3, #8]
 801a2a2:	60da      	str	r2, [r3, #12]
 801a2a4:	611a      	str	r2, [r3, #16]
 801a2a6:	615a      	str	r2, [r3, #20]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801a2a8:	f107 0308 	add.w	r3, r7, #8
 801a2ac:	2260      	movs	r2, #96	; 0x60
 801a2ae:	2100      	movs	r1, #0
 801a2b0:	4618      	mov	r0, r3
 801a2b2:	f003 fb05 	bl	801d8c0 <memset>

  /* Enable voltage range 1 for frequency above 100 Mhz */
  __HAL_RCC_PWR_CLK_ENABLE();
 801a2b6:	4b2e      	ldr	r3, [pc, #184]	; (801a370 <SystemClock_Config+0xe0>)
 801a2b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801a2bc:	4a2c      	ldr	r2, [pc, #176]	; (801a370 <SystemClock_Config+0xe0>)
 801a2be:	f043 0304 	orr.w	r3, r3, #4
 801a2c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 801a2c6:	4b2a      	ldr	r3, [pc, #168]	; (801a370 <SystemClock_Config+0xe0>)
 801a2c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801a2cc:	f003 0304 	and.w	r3, r3, #4
 801a2d0:	607b      	str	r3, [r7, #4]
 801a2d2:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 801a2d4:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 801a2d8:	f7fc fbaa 	bl	8016a30 <HAL_PWREx_ControlVoltageScaling>

  /* Switch to SMPS regulator instead of LDO */
  HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY);
 801a2dc:	2002      	movs	r0, #2
 801a2de:	f7fc fc33 	bl	8016b48 <HAL_PWREx_ConfigSupply>

  __HAL_RCC_PWR_CLK_DISABLE();
 801a2e2:	4b23      	ldr	r3, [pc, #140]	; (801a370 <SystemClock_Config+0xe0>)
 801a2e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801a2e8:	4a21      	ldr	r2, [pc, #132]	; (801a370 <SystemClock_Config+0xe0>)
 801a2ea:	f023 0304 	bic.w	r3, r3, #4
 801a2ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /* MSI Oscillator enabled at reset (4Mhz), activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 801a2f2:	2310      	movs	r3, #16
 801a2f4:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 801a2f6:	2301      	movs	r3, #1
 801a2f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 801a2fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801a2fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 801a300:	2310      	movs	r3, #16
 801a302:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801a304:	2302      	movs	r3, #2
 801a306:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 801a308:	2301      	movs	r3, #1
 801a30a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 801a30c:	2300      	movs	r3, #0
 801a30e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 801a310:	2301      	movs	r3, #1
 801a312:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 80;
 801a314:	2350      	movs	r3, #80	; 0x50
 801a316:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = 2;
 801a318:	2302      	movs	r3, #2
 801a31a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 801a31c:	2302      	movs	r3, #2
 801a31e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 2;
 801a320:	2302      	movs	r3, #2
 801a322:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLFRACN= 0;
 801a324:	2300      	movs	r3, #0
 801a326:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801a328:	f107 0308 	add.w	r3, r7, #8
 801a32c:	4618      	mov	r0, r3
 801a32e:	f7fc fc5b 	bl	8016be8 <HAL_RCC_OscConfig>
 801a332:	4603      	mov	r3, r0
 801a334:	2b00      	cmp	r3, #0
 801a336:	d000      	beq.n	801a33a <SystemClock_Config+0xaa>
  {
    /* Initialization Error */
    while(1);
 801a338:	e7fe      	b.n	801a338 <SystemClock_Config+0xa8>
  }

  /* Select PLL as system clock source and configure bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 801a33a:	231f      	movs	r3, #31
 801a33c:	66bb      	str	r3, [r7, #104]	; 0x68
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_PCLK3);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801a33e:	2303      	movs	r3, #3
 801a340:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801a342:	2300      	movs	r3, #0
 801a344:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 801a346:	2300      	movs	r3, #0
 801a348:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 801a34a:	2300      	movs	r3, #0
 801a34c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 801a34e:	2300      	movs	r3, #0
 801a350:	67fb      	str	r3, [r7, #124]	; 0x7c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 801a352:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801a356:	2104      	movs	r1, #4
 801a358:	4618      	mov	r0, r3
 801a35a:	f7fd fb21 	bl	80179a0 <HAL_RCC_ClockConfig>
 801a35e:	4603      	mov	r3, r0
 801a360:	2b00      	cmp	r3, #0
 801a362:	d000      	beq.n	801a366 <SystemClock_Config+0xd6>
  {
    /* Initialization Error */
    while(1);
 801a364:	e7fe      	b.n	801a364 <SystemClock_Config+0xd4>
  }
}
 801a366:	bf00      	nop
 801a368:	3780      	adds	r7, #128	; 0x80
 801a36a:	46bd      	mov	sp, r7
 801a36c:	bd80      	pop	{r7, pc}
 801a36e:	bf00      	nop
 801a370:	46020c00 	.word	0x46020c00

0801a374 <CACHE_Enable>:
  * @brief  Enable ICACHE with 1-way set-associative configuration.
  * @param  None
  * @retval None
  */
static void CACHE_Enable(void)
{
 801a374:	b580      	push	{r7, lr}
 801a376:	af00      	add	r7, sp, #0
  /* Configure ICACHE associativity mode */
  HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY);
 801a378:	2000      	movs	r0, #0
 801a37a:	f7fa fe1f 	bl	8014fbc <HAL_ICACHE_ConfigAssociativityMode>

  /* Enable ICACHE */
  HAL_ICACHE_Enable();
 801a37e:	f7fa fe3d 	bl	8014ffc <HAL_ICACHE_Enable>
}
 801a382:	bf00      	nop
 801a384:	bd80      	pop	{r7, pc}
	...

0801a388 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 801a388:	b580      	push	{r7, lr}
 801a38a:	af00      	add	r7, sp, #0
  printf("You have an ERROR!\n");
 801a38c:	4805      	ldr	r0, [pc, #20]	; (801a3a4 <Error_Handler+0x1c>)
 801a38e:	f003 fa7d 	bl	801d88c <puts>
  while(1)
  {
    BSP_LED_Toggle(LED_RED);
 801a392:	2000      	movs	r0, #0
 801a394:	f7e6 fd6c 	bl	8000e70 <BSP_LED_Toggle>
    HAL_Delay(500);
 801a398:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801a39c:	f7f7 f9ae 	bl	80116fc <HAL_Delay>
    BSP_LED_Toggle(LED_RED);
 801a3a0:	e7f7      	b.n	801a392 <Error_Handler+0xa>
 801a3a2:	bf00      	nop
 801a3a4:	080220bc 	.word	0x080220bc

0801a3a8 <CheckResult>:
  * @brief  Ask user for result.
  * @param  None
  * @retval None
  */
uint32_t CheckResult(void)
{
 801a3a8:	b580      	push	{r7, lr}
 801a3aa:	af00      	add	r7, sp, #0
  printf("Next step loading..\n\n");
 801a3ac:	4802      	ldr	r0, [pc, #8]	; (801a3b8 <CheckResult+0x10>)
 801a3ae:	f003 fa6d 	bl	801d88c <puts>

  return 0;
 801a3b2:	2300      	movs	r3, #0
}
 801a3b4:	4618      	mov	r0, r3
 801a3b6:	bd80      	pop	{r7, pc}
 801a3b8:	080220d0 	.word	0x080220d0

0801a3bc <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 801a3bc:	b480      	push	{r7}
 801a3be:	b083      	sub	sp, #12
 801a3c0:	af00      	add	r7, sp, #0
 801a3c2:	4603      	mov	r3, r0
 801a3c4:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 801a3c6:	79fb      	ldrb	r3, [r7, #7]
 801a3c8:	2b00      	cmp	r3, #0
 801a3ca:	d102      	bne.n	801a3d2 <BSP_PB_Callback+0x16>
  {
    UserButtonPressed = SET;
 801a3cc:	4b04      	ldr	r3, [pc, #16]	; (801a3e0 <BSP_PB_Callback+0x24>)
 801a3ce:	2201      	movs	r2, #1
 801a3d0:	701a      	strb	r2, [r3, #0]
  }
}
 801a3d2:	bf00      	nop
 801a3d4:	370c      	adds	r7, #12
 801a3d6:	46bd      	mov	sp, r7
 801a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3dc:	4770      	bx	lr
 801a3de:	bf00      	nop
 801a3e0:	200314e8 	.word	0x200314e8

0801a3e4 <Ms_demo>:
  * @brief  Motion sensor demo
  * @param  None
  * @retval 0 if ok, else value < 0.
  */
int32_t Ms_demo(void)
{
 801a3e4:	b580      	push	{r7, lr}
 801a3e6:	b092      	sub	sp, #72	; 0x48
 801a3e8:	af00      	add	r7, sp, #0
  int32_t  result  = 0;
 801a3ea:	2300      	movs	r3, #0
 801a3ec:	647b      	str	r3, [r7, #68]	; 0x44
  BSP_MOTION_SENSOR_AxesRaw_t      axesRaw;
  uint8_t chipId;
  float sensitivity, outputDataRate;
  int32_t fullScale;

  printf("\n******MOTION SENSORS EXAMPLE******\n");
 801a3ee:	487d      	ldr	r0, [pc, #500]	; (801a5e4 <Ms_demo+0x200>)
 801a3f0:	f003 fa4c 	bl	801d88c <puts>
  printf("Press user button for next step\n");
 801a3f4:	487c      	ldr	r0, [pc, #496]	; (801a5e8 <Ms_demo+0x204>)
 801a3f6:	f003 fa49 	bl	801d88c <puts>

  /* Initialize user button */
  if (BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI) != BSP_ERROR_NONE) result--;
 801a3fa:	2101      	movs	r1, #1
 801a3fc:	2000      	movs	r0, #0
 801a3fe:	f7e6 fd7f 	bl	8000f00 <BSP_PB_Init>
 801a402:	4603      	mov	r3, r0
 801a404:	2b00      	cmp	r3, #0
 801a406:	d002      	beq.n	801a40e <Ms_demo+0x2a>
 801a408:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a40a:	3b01      	subs	r3, #1
 801a40c:	647b      	str	r3, [r7, #68]	; 0x44
  /* --------------- */

  /*************************/
  /* Test of Accelerometer */
  /*************************/
  printf("TEST OF IIS2MDC ACCLEROMETER\n");
 801a40e:	4877      	ldr	r0, [pc, #476]	; (801a5ec <Ms_demo+0x208>)
 801a410:	f003 fa3c 	bl	801d88c <puts>

  /* Initialize function */
  if (BSP_MOTION_SENSOR_Init(0, MOTION_ACCELERO) != BSP_ERROR_NONE) result--;
 801a414:	2102      	movs	r1, #2
 801a416:	2000      	movs	r0, #0
 801a418:	f7ea f8ee 	bl	80045f8 <BSP_MOTION_SENSOR_Init>
 801a41c:	4603      	mov	r3, r0
 801a41e:	2b00      	cmp	r3, #0
 801a420:	d002      	beq.n	801a428 <Ms_demo+0x44>
 801a422:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a424:	3b01      	subs	r3, #1
 801a426:	647b      	str	r3, [r7, #68]	; 0x44

  if (BSP_MOTION_SENSOR_GetCapabilities(0, &Capabilities) != BSP_ERROR_NONE) result--;
 801a428:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a42c:	4619      	mov	r1, r3
 801a42e:	2000      	movs	r0, #0
 801a430:	f7ea f964 	bl	80046fc <BSP_MOTION_SENSOR_GetCapabilities>
 801a434:	4603      	mov	r3, r0
 801a436:	2b00      	cmp	r3, #0
 801a438:	d002      	beq.n	801a440 <Ms_demo+0x5c>
 801a43a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a43c:	3b01      	subs	r3, #1
 801a43e:	647b      	str	r3, [r7, #68]	; 0x44

  /* Read id function */
  if (BSP_MOTION_SENSOR_ReadID(0, &chipId) != BSP_ERROR_NONE) result--;
 801a440:	f107 0313 	add.w	r3, r7, #19
 801a444:	4619      	mov	r1, r3
 801a446:	2000      	movs	r0, #0
 801a448:	f7ea f990 	bl	800476c <BSP_MOTION_SENSOR_ReadID>
 801a44c:	4603      	mov	r3, r0
 801a44e:	2b00      	cmp	r3, #0
 801a450:	d002      	beq.n	801a458 <Ms_demo+0x74>
 801a452:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a454:	3b01      	subs	r3, #1
 801a456:	647b      	str	r3, [r7, #68]	; 0x44

  /* Enable function */
  if (BSP_MOTION_SENSOR_Enable(0, MOTION_ACCELERO) != BSP_ERROR_NONE) result--;
 801a458:	2102      	movs	r1, #2
 801a45a:	2000      	movs	r0, #0
 801a45c:	f7ea f9be 	bl	80047dc <BSP_MOTION_SENSOR_Enable>
 801a460:	4603      	mov	r3, r0
 801a462:	2b00      	cmp	r3, #0
 801a464:	d002      	beq.n	801a46c <Ms_demo+0x88>
 801a466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a468:	3b01      	subs	r3, #1
 801a46a:	647b      	str	r3, [r7, #68]	; 0x44

  /* GetFullScale and SetFullScale functions */
  if (BSP_MOTION_SENSOR_SetFullScale(0, MOTION_ACCELERO, 16) != BSP_ERROR_NONE) result--;
 801a46c:	2210      	movs	r2, #16
 801a46e:	2102      	movs	r1, #2
 801a470:	2000      	movs	r0, #0
 801a472:	f7ea fcab 	bl	8004dcc <BSP_MOTION_SENSOR_SetFullScale>
 801a476:	4603      	mov	r3, r0
 801a478:	2b00      	cmp	r3, #0
 801a47a:	d002      	beq.n	801a482 <Ms_demo+0x9e>
 801a47c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a47e:	3b01      	subs	r3, #1
 801a480:	647b      	str	r3, [r7, #68]	; 0x44
  if (BSP_MOTION_SENSOR_GetFullScale(0, MOTION_ACCELERO, &fullScale) != BSP_ERROR_NONE) result--;
 801a482:	1d3b      	adds	r3, r7, #4
 801a484:	461a      	mov	r2, r3
 801a486:	2102      	movs	r1, #2
 801a488:	2000      	movs	r0, #0
 801a48a:	f7ea fc3f 	bl	8004d0c <BSP_MOTION_SENSOR_GetFullScale>
 801a48e:	4603      	mov	r3, r0
 801a490:	2b00      	cmp	r3, #0
 801a492:	d002      	beq.n	801a49a <Ms_demo+0xb6>
 801a494:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a496:	3b01      	subs	r3, #1
 801a498:	647b      	str	r3, [r7, #68]	; 0x44
  if (fullScale != 16) result--;
 801a49a:	687b      	ldr	r3, [r7, #4]
 801a49c:	2b10      	cmp	r3, #16
 801a49e:	d002      	beq.n	801a4a6 <Ms_demo+0xc2>
 801a4a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a4a2:	3b01      	subs	r3, #1
 801a4a4:	647b      	str	r3, [r7, #68]	; 0x44

  if (BSP_MOTION_SENSOR_SetFullScale(0, MOTION_ACCELERO, 2) != BSP_ERROR_NONE) result--;
 801a4a6:	2202      	movs	r2, #2
 801a4a8:	2102      	movs	r1, #2
 801a4aa:	2000      	movs	r0, #0
 801a4ac:	f7ea fc8e 	bl	8004dcc <BSP_MOTION_SENSOR_SetFullScale>
 801a4b0:	4603      	mov	r3, r0
 801a4b2:	2b00      	cmp	r3, #0
 801a4b4:	d002      	beq.n	801a4bc <Ms_demo+0xd8>
 801a4b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a4b8:	3b01      	subs	r3, #1
 801a4ba:	647b      	str	r3, [r7, #68]	; 0x44
  if (BSP_MOTION_SENSOR_GetFullScale(0, MOTION_ACCELERO, &fullScale) != BSP_ERROR_NONE) result--;
 801a4bc:	1d3b      	adds	r3, r7, #4
 801a4be:	461a      	mov	r2, r3
 801a4c0:	2102      	movs	r1, #2
 801a4c2:	2000      	movs	r0, #0
 801a4c4:	f7ea fc22 	bl	8004d0c <BSP_MOTION_SENSOR_GetFullScale>
 801a4c8:	4603      	mov	r3, r0
 801a4ca:	2b00      	cmp	r3, #0
 801a4cc:	d002      	beq.n	801a4d4 <Ms_demo+0xf0>
 801a4ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a4d0:	3b01      	subs	r3, #1
 801a4d2:	647b      	str	r3, [r7, #68]	; 0x44
  if (fullScale != 2) result--;
 801a4d4:	687b      	ldr	r3, [r7, #4]
 801a4d6:	2b02      	cmp	r3, #2
 801a4d8:	d002      	beq.n	801a4e0 <Ms_demo+0xfc>
 801a4da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a4dc:	3b01      	subs	r3, #1
 801a4de:	647b      	str	r3, [r7, #68]	; 0x44

  /* GetOutputDataRate and SetOutputDataRate functions */
  if (BSP_MOTION_SENSOR_SetOutputDataRate(0, MOTION_ACCELERO, 3333.0f) != BSP_ERROR_NONE) result--;
 801a4e0:	ed9f 0a43 	vldr	s0, [pc, #268]	; 801a5f0 <Ms_demo+0x20c>
 801a4e4:	2102      	movs	r1, #2
 801a4e6:	2000      	movs	r0, #0
 801a4e8:	f7ea fbb0 	bl	8004c4c <BSP_MOTION_SENSOR_SetOutputDataRate>
 801a4ec:	4603      	mov	r3, r0
 801a4ee:	2b00      	cmp	r3, #0
 801a4f0:	d002      	beq.n	801a4f8 <Ms_demo+0x114>
 801a4f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a4f4:	3b01      	subs	r3, #1
 801a4f6:	647b      	str	r3, [r7, #68]	; 0x44
  if (BSP_MOTION_SENSOR_GetOutputDataRate(0, MOTION_ACCELERO, &outputDataRate) != BSP_ERROR_NONE) result--;
 801a4f8:	f107 0308 	add.w	r3, r7, #8
 801a4fc:	461a      	mov	r2, r3
 801a4fe:	2102      	movs	r1, #2
 801a500:	2000      	movs	r0, #0
 801a502:	f7ea fb43 	bl	8004b8c <BSP_MOTION_SENSOR_GetOutputDataRate>
 801a506:	4603      	mov	r3, r0
 801a508:	2b00      	cmp	r3, #0
 801a50a:	d002      	beq.n	801a512 <Ms_demo+0x12e>
 801a50c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a50e:	3b01      	subs	r3, #1
 801a510:	647b      	str	r3, [r7, #68]	; 0x44
  if (outputDataRate != 6667.0f) result--;
 801a512:	edd7 7a02 	vldr	s15, [r7, #8]
 801a516:	ed9f 7a37 	vldr	s14, [pc, #220]	; 801a5f4 <Ms_demo+0x210>
 801a51a:	eef4 7a47 	vcmp.f32	s15, s14
 801a51e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a522:	d002      	beq.n	801a52a <Ms_demo+0x146>
 801a524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a526:	3b01      	subs	r3, #1
 801a528:	647b      	str	r3, [r7, #68]	; 0x44

  if (BSP_MOTION_SENSOR_SetOutputDataRate(0, MOTION_ACCELERO, 208.0f) != BSP_ERROR_NONE) result--;
 801a52a:	ed9f 0a33 	vldr	s0, [pc, #204]	; 801a5f8 <Ms_demo+0x214>
 801a52e:	2102      	movs	r1, #2
 801a530:	2000      	movs	r0, #0
 801a532:	f7ea fb8b 	bl	8004c4c <BSP_MOTION_SENSOR_SetOutputDataRate>
 801a536:	4603      	mov	r3, r0
 801a538:	2b00      	cmp	r3, #0
 801a53a:	d002      	beq.n	801a542 <Ms_demo+0x15e>
 801a53c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a53e:	3b01      	subs	r3, #1
 801a540:	647b      	str	r3, [r7, #68]	; 0x44
  if (BSP_MOTION_SENSOR_GetOutputDataRate(0, MOTION_ACCELERO, &outputDataRate) != BSP_ERROR_NONE) result--;
 801a542:	f107 0308 	add.w	r3, r7, #8
 801a546:	461a      	mov	r2, r3
 801a548:	2102      	movs	r1, #2
 801a54a:	2000      	movs	r0, #0
 801a54c:	f7ea fb1e 	bl	8004b8c <BSP_MOTION_SENSOR_GetOutputDataRate>
 801a550:	4603      	mov	r3, r0
 801a552:	2b00      	cmp	r3, #0
 801a554:	d002      	beq.n	801a55c <Ms_demo+0x178>
 801a556:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a558:	3b01      	subs	r3, #1
 801a55a:	647b      	str	r3, [r7, #68]	; 0x44
  if (outputDataRate != 208.0f) result--;
 801a55c:	edd7 7a02 	vldr	s15, [r7, #8]
 801a560:	ed9f 7a25 	vldr	s14, [pc, #148]	; 801a5f8 <Ms_demo+0x214>
 801a564:	eef4 7a47 	vcmp.f32	s15, s14
 801a568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a56c:	d002      	beq.n	801a574 <Ms_demo+0x190>
 801a56e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a570:	3b01      	subs	r3, #1
 801a572:	647b      	str	r3, [r7, #68]	; 0x44

  /* GetSensitivity function */
  if (BSP_MOTION_SENSOR_GetSensitivity(0, MOTION_ACCELERO, &sensitivity) != BSP_ERROR_NONE) result--;
 801a574:	f107 030c 	add.w	r3, r7, #12
 801a578:	461a      	mov	r2, r3
 801a57a:	2102      	movs	r1, #2
 801a57c:	2000      	movs	r0, #0
 801a57e:	f7ea faa5 	bl	8004acc <BSP_MOTION_SENSOR_GetSensitivity>
 801a582:	4603      	mov	r3, r0
 801a584:	2b00      	cmp	r3, #0
 801a586:	d002      	beq.n	801a58e <Ms_demo+0x1aa>
 801a588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a58a:	3b01      	subs	r3, #1
 801a58c:	647b      	str	r3, [r7, #68]	; 0x44

  /* GetAxes function */
  printf("Accelerometer axes:\n");
 801a58e:	481b      	ldr	r0, [pc, #108]	; (801a5fc <Ms_demo+0x218>)
 801a590:	f003 f97c 	bl	801d88c <puts>
  while (UserButtonPressed == 0)
 801a594:	e016      	b.n	801a5c4 <Ms_demo+0x1e0>
  {
    if (BSP_MOTION_SENSOR_GetAxes(0, MOTION_ACCELERO, &axes) != BSP_ERROR_NONE) result--;
 801a596:	f107 031c 	add.w	r3, r7, #28
 801a59a:	461a      	mov	r2, r3
 801a59c:	2102      	movs	r1, #2
 801a59e:	2000      	movs	r0, #0
 801a5a0:	f7ea f9d4 	bl	800494c <BSP_MOTION_SENSOR_GetAxes>
 801a5a4:	4603      	mov	r3, r0
 801a5a6:	2b00      	cmp	r3, #0
 801a5a8:	d002      	beq.n	801a5b0 <Ms_demo+0x1cc>
 801a5aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a5ac:	3b01      	subs	r3, #1
 801a5ae:	647b      	str	r3, [r7, #68]	; 0x44
    printf("X = %d, Y = %d, , Z = %d\n", axes.xval, axes.yval, axes.zval);
 801a5b0:	69f9      	ldr	r1, [r7, #28]
 801a5b2:	6a3a      	ldr	r2, [r7, #32]
 801a5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5b6:	4812      	ldr	r0, [pc, #72]	; (801a600 <Ms_demo+0x21c>)
 801a5b8:	f003 f8fa 	bl	801d7b0 <iprintf>
    HAL_Delay(500);
 801a5bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801a5c0:	f7f7 f89c 	bl	80116fc <HAL_Delay>
  while (UserButtonPressed == 0)
 801a5c4:	4b0f      	ldr	r3, [pc, #60]	; (801a604 <Ms_demo+0x220>)
 801a5c6:	781b      	ldrb	r3, [r3, #0]
 801a5c8:	b2db      	uxtb	r3, r3
 801a5ca:	2b00      	cmp	r3, #0
 801a5cc:	d0e3      	beq.n	801a596 <Ms_demo+0x1b2>
  }
  HAL_Delay(1000);
 801a5ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801a5d2:	f7f7 f893 	bl	80116fc <HAL_Delay>
  UserButtonPressed = RESET;
 801a5d6:	4b0b      	ldr	r3, [pc, #44]	; (801a604 <Ms_demo+0x220>)
 801a5d8:	2200      	movs	r2, #0
 801a5da:	701a      	strb	r2, [r3, #0]

  /* GetAxesRaw function */
  printf("Accelerometer raw axes:\n");
 801a5dc:	480a      	ldr	r0, [pc, #40]	; (801a608 <Ms_demo+0x224>)
 801a5de:	f003 f955 	bl	801d88c <puts>
  while (UserButtonPressed == 0)
 801a5e2:	e02f      	b.n	801a644 <Ms_demo+0x260>
 801a5e4:	080220e8 	.word	0x080220e8
 801a5e8:	0802210c 	.word	0x0802210c
 801a5ec:	0802212c 	.word	0x0802212c
 801a5f0:	45505000 	.word	0x45505000
 801a5f4:	45d05800 	.word	0x45d05800
 801a5f8:	43500000 	.word	0x43500000
 801a5fc:	0802214c 	.word	0x0802214c
 801a600:	08022160 	.word	0x08022160
 801a604:	200314e8 	.word	0x200314e8
 801a608:	0802217c 	.word	0x0802217c
  {
    if (BSP_MOTION_SENSOR_GetAxesRaw(0, MOTION_ACCELERO, &axesRaw) != BSP_ERROR_NONE) result--;
 801a60c:	f107 0314 	add.w	r3, r7, #20
 801a610:	461a      	mov	r2, r3
 801a612:	2102      	movs	r1, #2
 801a614:	2000      	movs	r0, #0
 801a616:	f7ea f9f9 	bl	8004a0c <BSP_MOTION_SENSOR_GetAxesRaw>
 801a61a:	4603      	mov	r3, r0
 801a61c:	2b00      	cmp	r3, #0
 801a61e:	d002      	beq.n	801a626 <Ms_demo+0x242>
 801a620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a622:	3b01      	subs	r3, #1
 801a624:	647b      	str	r3, [r7, #68]	; 0x44
    printf("Xraw = %d, Yraw = %d, , Zraw = %d\n", axesRaw.xval, axesRaw.yval, axesRaw.zval);
 801a626:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a62a:	4619      	mov	r1, r3
 801a62c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801a630:	461a      	mov	r2, r3
 801a632:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801a636:	487e      	ldr	r0, [pc, #504]	; (801a830 <Ms_demo+0x44c>)
 801a638:	f003 f8ba 	bl	801d7b0 <iprintf>
    HAL_Delay(500);
 801a63c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801a640:	f7f7 f85c 	bl	80116fc <HAL_Delay>
  while (UserButtonPressed == 0)
 801a644:	4b7b      	ldr	r3, [pc, #492]	; (801a834 <Ms_demo+0x450>)
 801a646:	781b      	ldrb	r3, [r3, #0]
 801a648:	b2db      	uxtb	r3, r3
 801a64a:	2b00      	cmp	r3, #0
 801a64c:	d0de      	beq.n	801a60c <Ms_demo+0x228>
  }
  HAL_Delay(1000);
 801a64e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801a652:	f7f7 f853 	bl	80116fc <HAL_Delay>
  UserButtonPressed = RESET;
 801a656:	4b77      	ldr	r3, [pc, #476]	; (801a834 <Ms_demo+0x450>)
 801a658:	2200      	movs	r2, #0
 801a65a:	701a      	strb	r2, [r3, #0]

  /* Disable function */
  if (BSP_MOTION_SENSOR_Disable(0, MOTION_ACCELERO) != BSP_ERROR_NONE) result--;
 801a65c:	2102      	movs	r1, #2
 801a65e:	2000      	movs	r0, #0
 801a660:	f7ea f918 	bl	8004894 <BSP_MOTION_SENSOR_Disable>
 801a664:	4603      	mov	r3, r0
 801a666:	2b00      	cmp	r3, #0
 801a668:	d002      	beq.n	801a670 <Ms_demo+0x28c>
 801a66a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a66c:	3b01      	subs	r3, #1
 801a66e:	647b      	str	r3, [r7, #68]	; 0x44

  /* De-initialize function */
  if (BSP_MOTION_SENSOR_DeInit(0) != BSP_ERROR_NONE) result--;
 801a670:	2000      	movs	r0, #0
 801a672:	f7ea f80d 	bl	8004690 <BSP_MOTION_SENSOR_DeInit>
 801a676:	4603      	mov	r3, r0
 801a678:	2b00      	cmp	r3, #0
 801a67a:	d002      	beq.n	801a682 <Ms_demo+0x29e>
 801a67c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a67e:	3b01      	subs	r3, #1
 801a680:	647b      	str	r3, [r7, #68]	; 0x44

  /*********************/
  /* Test of Gyroscope */
  /*********************/
  printf("TEST OF IIS2MDC GYROSCOPE\n");
 801a682:	486d      	ldr	r0, [pc, #436]	; (801a838 <Ms_demo+0x454>)
 801a684:	f003 f902 	bl	801d88c <puts>

  /* Initialize function */
  if (BSP_MOTION_SENSOR_Init(0, MOTION_GYRO) != BSP_ERROR_NONE) result--;
 801a688:	2101      	movs	r1, #1
 801a68a:	2000      	movs	r0, #0
 801a68c:	f7e9 ffb4 	bl	80045f8 <BSP_MOTION_SENSOR_Init>
 801a690:	4603      	mov	r3, r0
 801a692:	2b00      	cmp	r3, #0
 801a694:	d002      	beq.n	801a69c <Ms_demo+0x2b8>
 801a696:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a698:	3b01      	subs	r3, #1
 801a69a:	647b      	str	r3, [r7, #68]	; 0x44

  /* Enable function */
  if (BSP_MOTION_SENSOR_Enable(0, MOTION_GYRO) != BSP_ERROR_NONE) result--;
 801a69c:	2101      	movs	r1, #1
 801a69e:	2000      	movs	r0, #0
 801a6a0:	f7ea f89c 	bl	80047dc <BSP_MOTION_SENSOR_Enable>
 801a6a4:	4603      	mov	r3, r0
 801a6a6:	2b00      	cmp	r3, #0
 801a6a8:	d002      	beq.n	801a6b0 <Ms_demo+0x2cc>
 801a6aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a6ac:	3b01      	subs	r3, #1
 801a6ae:	647b      	str	r3, [r7, #68]	; 0x44

  /* GetFullScale and SetFullScale functions */
  if (BSP_MOTION_SENSOR_SetFullScale(0, MOTION_GYRO, 2000) != BSP_ERROR_NONE) result--;
 801a6b0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 801a6b4:	2101      	movs	r1, #1
 801a6b6:	2000      	movs	r0, #0
 801a6b8:	f7ea fb88 	bl	8004dcc <BSP_MOTION_SENSOR_SetFullScale>
 801a6bc:	4603      	mov	r3, r0
 801a6be:	2b00      	cmp	r3, #0
 801a6c0:	d002      	beq.n	801a6c8 <Ms_demo+0x2e4>
 801a6c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a6c4:	3b01      	subs	r3, #1
 801a6c6:	647b      	str	r3, [r7, #68]	; 0x44
  if (BSP_MOTION_SENSOR_GetFullScale(0, MOTION_GYRO, &fullScale) != BSP_ERROR_NONE) result--;
 801a6c8:	1d3b      	adds	r3, r7, #4
 801a6ca:	461a      	mov	r2, r3
 801a6cc:	2101      	movs	r1, #1
 801a6ce:	2000      	movs	r0, #0
 801a6d0:	f7ea fb1c 	bl	8004d0c <BSP_MOTION_SENSOR_GetFullScale>
 801a6d4:	4603      	mov	r3, r0
 801a6d6:	2b00      	cmp	r3, #0
 801a6d8:	d002      	beq.n	801a6e0 <Ms_demo+0x2fc>
 801a6da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a6dc:	3b01      	subs	r3, #1
 801a6de:	647b      	str	r3, [r7, #68]	; 0x44
  if (fullScale != 2000) result--;
 801a6e0:	687b      	ldr	r3, [r7, #4]
 801a6e2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 801a6e6:	d002      	beq.n	801a6ee <Ms_demo+0x30a>
 801a6e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a6ea:	3b01      	subs	r3, #1
 801a6ec:	647b      	str	r3, [r7, #68]	; 0x44

  if (BSP_MOTION_SENSOR_SetFullScale(0, MOTION_GYRO, 500) != BSP_ERROR_NONE) result--;
 801a6ee:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 801a6f2:	2101      	movs	r1, #1
 801a6f4:	2000      	movs	r0, #0
 801a6f6:	f7ea fb69 	bl	8004dcc <BSP_MOTION_SENSOR_SetFullScale>
 801a6fa:	4603      	mov	r3, r0
 801a6fc:	2b00      	cmp	r3, #0
 801a6fe:	d002      	beq.n	801a706 <Ms_demo+0x322>
 801a700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a702:	3b01      	subs	r3, #1
 801a704:	647b      	str	r3, [r7, #68]	; 0x44
  if (BSP_MOTION_SENSOR_GetFullScale(0, MOTION_GYRO, &fullScale) != BSP_ERROR_NONE) result--;
 801a706:	1d3b      	adds	r3, r7, #4
 801a708:	461a      	mov	r2, r3
 801a70a:	2101      	movs	r1, #1
 801a70c:	2000      	movs	r0, #0
 801a70e:	f7ea fafd 	bl	8004d0c <BSP_MOTION_SENSOR_GetFullScale>
 801a712:	4603      	mov	r3, r0
 801a714:	2b00      	cmp	r3, #0
 801a716:	d002      	beq.n	801a71e <Ms_demo+0x33a>
 801a718:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a71a:	3b01      	subs	r3, #1
 801a71c:	647b      	str	r3, [r7, #68]	; 0x44
  if (fullScale != 500) result--;
 801a71e:	687b      	ldr	r3, [r7, #4]
 801a720:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 801a724:	d002      	beq.n	801a72c <Ms_demo+0x348>
 801a726:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a728:	3b01      	subs	r3, #1
 801a72a:	647b      	str	r3, [r7, #68]	; 0x44

  /* GetOutputDataRate and SetOutputDataRate functions */
  if (BSP_MOTION_SENSOR_SetOutputDataRate(0, MOTION_GYRO, 3332.0f) != BSP_ERROR_NONE) result--;
 801a72c:	ed9f 0a43 	vldr	s0, [pc, #268]	; 801a83c <Ms_demo+0x458>
 801a730:	2101      	movs	r1, #1
 801a732:	2000      	movs	r0, #0
 801a734:	f7ea fa8a 	bl	8004c4c <BSP_MOTION_SENSOR_SetOutputDataRate>
 801a738:	4603      	mov	r3, r0
 801a73a:	2b00      	cmp	r3, #0
 801a73c:	d002      	beq.n	801a744 <Ms_demo+0x360>
 801a73e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a740:	3b01      	subs	r3, #1
 801a742:	647b      	str	r3, [r7, #68]	; 0x44
  if (BSP_MOTION_SENSOR_GetOutputDataRate(0, MOTION_GYRO, &outputDataRate) != BSP_ERROR_NONE) result--;
 801a744:	f107 0308 	add.w	r3, r7, #8
 801a748:	461a      	mov	r2, r3
 801a74a:	2101      	movs	r1, #1
 801a74c:	2000      	movs	r0, #0
 801a74e:	f7ea fa1d 	bl	8004b8c <BSP_MOTION_SENSOR_GetOutputDataRate>
 801a752:	4603      	mov	r3, r0
 801a754:	2b00      	cmp	r3, #0
 801a756:	d002      	beq.n	801a75e <Ms_demo+0x37a>
 801a758:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a75a:	3b01      	subs	r3, #1
 801a75c:	647b      	str	r3, [r7, #68]	; 0x44
  if (outputDataRate != 3332.0f) result--;
 801a75e:	edd7 7a02 	vldr	s15, [r7, #8]
 801a762:	ed9f 7a36 	vldr	s14, [pc, #216]	; 801a83c <Ms_demo+0x458>
 801a766:	eef4 7a47 	vcmp.f32	s15, s14
 801a76a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a76e:	d002      	beq.n	801a776 <Ms_demo+0x392>
 801a770:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a772:	3b01      	subs	r3, #1
 801a774:	647b      	str	r3, [r7, #68]	; 0x44

  if (BSP_MOTION_SENSOR_SetOutputDataRate(0, MOTION_GYRO, 208.0f) != BSP_ERROR_NONE) result--;
 801a776:	ed9f 0a32 	vldr	s0, [pc, #200]	; 801a840 <Ms_demo+0x45c>
 801a77a:	2101      	movs	r1, #1
 801a77c:	2000      	movs	r0, #0
 801a77e:	f7ea fa65 	bl	8004c4c <BSP_MOTION_SENSOR_SetOutputDataRate>
 801a782:	4603      	mov	r3, r0
 801a784:	2b00      	cmp	r3, #0
 801a786:	d002      	beq.n	801a78e <Ms_demo+0x3aa>
 801a788:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a78a:	3b01      	subs	r3, #1
 801a78c:	647b      	str	r3, [r7, #68]	; 0x44
  if (BSP_MOTION_SENSOR_GetOutputDataRate(0, MOTION_GYRO, &outputDataRate) != BSP_ERROR_NONE) result--;
 801a78e:	f107 0308 	add.w	r3, r7, #8
 801a792:	461a      	mov	r2, r3
 801a794:	2101      	movs	r1, #1
 801a796:	2000      	movs	r0, #0
 801a798:	f7ea f9f8 	bl	8004b8c <BSP_MOTION_SENSOR_GetOutputDataRate>
 801a79c:	4603      	mov	r3, r0
 801a79e:	2b00      	cmp	r3, #0
 801a7a0:	d002      	beq.n	801a7a8 <Ms_demo+0x3c4>
 801a7a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a7a4:	3b01      	subs	r3, #1
 801a7a6:	647b      	str	r3, [r7, #68]	; 0x44
  if (outputDataRate != 208.0f) result--;
 801a7a8:	edd7 7a02 	vldr	s15, [r7, #8]
 801a7ac:	ed9f 7a24 	vldr	s14, [pc, #144]	; 801a840 <Ms_demo+0x45c>
 801a7b0:	eef4 7a47 	vcmp.f32	s15, s14
 801a7b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7b8:	d002      	beq.n	801a7c0 <Ms_demo+0x3dc>
 801a7ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a7bc:	3b01      	subs	r3, #1
 801a7be:	647b      	str	r3, [r7, #68]	; 0x44

  /* GetSensitivity function */
  if (BSP_MOTION_SENSOR_GetSensitivity(0, MOTION_GYRO, &sensitivity) != BSP_ERROR_NONE) result--;
 801a7c0:	f107 030c 	add.w	r3, r7, #12
 801a7c4:	461a      	mov	r2, r3
 801a7c6:	2101      	movs	r1, #1
 801a7c8:	2000      	movs	r0, #0
 801a7ca:	f7ea f97f 	bl	8004acc <BSP_MOTION_SENSOR_GetSensitivity>
 801a7ce:	4603      	mov	r3, r0
 801a7d0:	2b00      	cmp	r3, #0
 801a7d2:	d002      	beq.n	801a7da <Ms_demo+0x3f6>
 801a7d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a7d6:	3b01      	subs	r3, #1
 801a7d8:	647b      	str	r3, [r7, #68]	; 0x44

  /* GetAxes function */
  printf("Gyroscope axes:\n");
 801a7da:	481a      	ldr	r0, [pc, #104]	; (801a844 <Ms_demo+0x460>)
 801a7dc:	f003 f856 	bl	801d88c <puts>
  while (UserButtonPressed == 0)
 801a7e0:	e016      	b.n	801a810 <Ms_demo+0x42c>
  {
    if (BSP_MOTION_SENSOR_GetAxes(0, MOTION_GYRO, &axes) != BSP_ERROR_NONE) result--;
 801a7e2:	f107 031c 	add.w	r3, r7, #28
 801a7e6:	461a      	mov	r2, r3
 801a7e8:	2101      	movs	r1, #1
 801a7ea:	2000      	movs	r0, #0
 801a7ec:	f7ea f8ae 	bl	800494c <BSP_MOTION_SENSOR_GetAxes>
 801a7f0:	4603      	mov	r3, r0
 801a7f2:	2b00      	cmp	r3, #0
 801a7f4:	d002      	beq.n	801a7fc <Ms_demo+0x418>
 801a7f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a7f8:	3b01      	subs	r3, #1
 801a7fa:	647b      	str	r3, [r7, #68]	; 0x44
    printf("X = %d, Y = %d, , Z = %d\n", axes.xval, axes.yval, axes.zval);
 801a7fc:	69f9      	ldr	r1, [r7, #28]
 801a7fe:	6a3a      	ldr	r2, [r7, #32]
 801a800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a802:	4811      	ldr	r0, [pc, #68]	; (801a848 <Ms_demo+0x464>)
 801a804:	f002 ffd4 	bl	801d7b0 <iprintf>
    HAL_Delay(500);
 801a808:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801a80c:	f7f6 ff76 	bl	80116fc <HAL_Delay>
  while (UserButtonPressed == 0)
 801a810:	4b08      	ldr	r3, [pc, #32]	; (801a834 <Ms_demo+0x450>)
 801a812:	781b      	ldrb	r3, [r3, #0]
 801a814:	b2db      	uxtb	r3, r3
 801a816:	2b00      	cmp	r3, #0
 801a818:	d0e3      	beq.n	801a7e2 <Ms_demo+0x3fe>
  }
  HAL_Delay(1000);
 801a81a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801a81e:	f7f6 ff6d 	bl	80116fc <HAL_Delay>
  UserButtonPressed = RESET;
 801a822:	4b04      	ldr	r3, [pc, #16]	; (801a834 <Ms_demo+0x450>)
 801a824:	2200      	movs	r2, #0
 801a826:	701a      	strb	r2, [r3, #0]

  /* GetAxesRaw function */
  printf("Gyroscope raw axes:\n");
 801a828:	4808      	ldr	r0, [pc, #32]	; (801a84c <Ms_demo+0x468>)
 801a82a:	f003 f82f 	bl	801d88c <puts>
  while (UserButtonPressed == 0)
 801a82e:	e02b      	b.n	801a888 <Ms_demo+0x4a4>
 801a830:	08022194 	.word	0x08022194
 801a834:	200314e8 	.word	0x200314e8
 801a838:	080221b8 	.word	0x080221b8
 801a83c:	45504000 	.word	0x45504000
 801a840:	43500000 	.word	0x43500000
 801a844:	080221d4 	.word	0x080221d4
 801a848:	08022160 	.word	0x08022160
 801a84c:	080221e4 	.word	0x080221e4
  {
    if (BSP_MOTION_SENSOR_GetAxesRaw(0, MOTION_GYRO, &axesRaw) != BSP_ERROR_NONE) result--;
 801a850:	f107 0314 	add.w	r3, r7, #20
 801a854:	461a      	mov	r2, r3
 801a856:	2101      	movs	r1, #1
 801a858:	2000      	movs	r0, #0
 801a85a:	f7ea f8d7 	bl	8004a0c <BSP_MOTION_SENSOR_GetAxesRaw>
 801a85e:	4603      	mov	r3, r0
 801a860:	2b00      	cmp	r3, #0
 801a862:	d002      	beq.n	801a86a <Ms_demo+0x486>
 801a864:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a866:	3b01      	subs	r3, #1
 801a868:	647b      	str	r3, [r7, #68]	; 0x44
    printf("Xraw = %d, Yraw = %d, , Zraw = %d\n", axesRaw.xval, axesRaw.yval, axesRaw.zval);
 801a86a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a86e:	4619      	mov	r1, r3
 801a870:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801a874:	461a      	mov	r2, r3
 801a876:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801a87a:	489a      	ldr	r0, [pc, #616]	; (801aae4 <Ms_demo+0x700>)
 801a87c:	f002 ff98 	bl	801d7b0 <iprintf>
    HAL_Delay(500);
 801a880:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801a884:	f7f6 ff3a 	bl	80116fc <HAL_Delay>
  while (UserButtonPressed == 0)
 801a888:	4b97      	ldr	r3, [pc, #604]	; (801aae8 <Ms_demo+0x704>)
 801a88a:	781b      	ldrb	r3, [r3, #0]
 801a88c:	b2db      	uxtb	r3, r3
 801a88e:	2b00      	cmp	r3, #0
 801a890:	d0de      	beq.n	801a850 <Ms_demo+0x46c>
  }
  HAL_Delay(1000);
 801a892:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801a896:	f7f6 ff31 	bl	80116fc <HAL_Delay>
  UserButtonPressed = RESET;
 801a89a:	4b93      	ldr	r3, [pc, #588]	; (801aae8 <Ms_demo+0x704>)
 801a89c:	2200      	movs	r2, #0
 801a89e:	701a      	strb	r2, [r3, #0]

  /* Disable function */
  if (BSP_MOTION_SENSOR_Disable(0, MOTION_GYRO) != BSP_ERROR_NONE) result--;
 801a8a0:	2101      	movs	r1, #1
 801a8a2:	2000      	movs	r0, #0
 801a8a4:	f7e9 fff6 	bl	8004894 <BSP_MOTION_SENSOR_Disable>
 801a8a8:	4603      	mov	r3, r0
 801a8aa:	2b00      	cmp	r3, #0
 801a8ac:	d002      	beq.n	801a8b4 <Ms_demo+0x4d0>
 801a8ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a8b0:	3b01      	subs	r3, #1
 801a8b2:	647b      	str	r3, [r7, #68]	; 0x44

  /* De-initialize function */
  if (BSP_MOTION_SENSOR_DeInit(0) != BSP_ERROR_NONE) result--;
 801a8b4:	2000      	movs	r0, #0
 801a8b6:	f7e9 feeb 	bl	8004690 <BSP_MOTION_SENSOR_DeInit>
 801a8ba:	4603      	mov	r3, r0
 801a8bc:	2b00      	cmp	r3, #0
 801a8be:	d002      	beq.n	801a8c6 <Ms_demo+0x4e2>
 801a8c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a8c2:	3b01      	subs	r3, #1
 801a8c4:	647b      	str	r3, [r7, #68]	; 0x44
  /* --------------- */

  /************************/
  /* Test of Magnetometer */
  /************************/
  printf("TEST OF ISM330DHCX MAGNETOMETER\n");
 801a8c6:	4889      	ldr	r0, [pc, #548]	; (801aaec <Ms_demo+0x708>)
 801a8c8:	f002 ffe0 	bl	801d88c <puts>

  /* Initialize function */
  if (BSP_MOTION_SENSOR_Init(1, MOTION_MAGNETO) != BSP_ERROR_NONE) result--;
 801a8cc:	2104      	movs	r1, #4
 801a8ce:	2001      	movs	r0, #1
 801a8d0:	f7e9 fe92 	bl	80045f8 <BSP_MOTION_SENSOR_Init>
 801a8d4:	4603      	mov	r3, r0
 801a8d6:	2b00      	cmp	r3, #0
 801a8d8:	d002      	beq.n	801a8e0 <Ms_demo+0x4fc>
 801a8da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a8dc:	3b01      	subs	r3, #1
 801a8de:	647b      	str	r3, [r7, #68]	; 0x44

  if (BSP_MOTION_SENSOR_GetCapabilities(1, &Capabilities) != BSP_ERROR_NONE) result--;
 801a8e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a8e4:	4619      	mov	r1, r3
 801a8e6:	2001      	movs	r0, #1
 801a8e8:	f7e9 ff08 	bl	80046fc <BSP_MOTION_SENSOR_GetCapabilities>
 801a8ec:	4603      	mov	r3, r0
 801a8ee:	2b00      	cmp	r3, #0
 801a8f0:	d002      	beq.n	801a8f8 <Ms_demo+0x514>
 801a8f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a8f4:	3b01      	subs	r3, #1
 801a8f6:	647b      	str	r3, [r7, #68]	; 0x44

  /* Read id function */
  if (BSP_MOTION_SENSOR_ReadID(1, &chipId) != BSP_ERROR_NONE) result--;
 801a8f8:	f107 0313 	add.w	r3, r7, #19
 801a8fc:	4619      	mov	r1, r3
 801a8fe:	2001      	movs	r0, #1
 801a900:	f7e9 ff34 	bl	800476c <BSP_MOTION_SENSOR_ReadID>
 801a904:	4603      	mov	r3, r0
 801a906:	2b00      	cmp	r3, #0
 801a908:	d002      	beq.n	801a910 <Ms_demo+0x52c>
 801a90a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a90c:	3b01      	subs	r3, #1
 801a90e:	647b      	str	r3, [r7, #68]	; 0x44

  /* Enable function */
  if (BSP_MOTION_SENSOR_Enable(1, MOTION_MAGNETO) != BSP_ERROR_NONE) result--;
 801a910:	2104      	movs	r1, #4
 801a912:	2001      	movs	r0, #1
 801a914:	f7e9 ff62 	bl	80047dc <BSP_MOTION_SENSOR_Enable>
 801a918:	4603      	mov	r3, r0
 801a91a:	2b00      	cmp	r3, #0
 801a91c:	d002      	beq.n	801a924 <Ms_demo+0x540>
 801a91e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a920:	3b01      	subs	r3, #1
 801a922:	647b      	str	r3, [r7, #68]	; 0x44

  /* GetFullScale functions */
  if (BSP_MOTION_SENSOR_GetFullScale(1, MOTION_MAGNETO, &fullScale) != BSP_ERROR_NONE) result--;
 801a924:	1d3b      	adds	r3, r7, #4
 801a926:	461a      	mov	r2, r3
 801a928:	2104      	movs	r1, #4
 801a92a:	2001      	movs	r0, #1
 801a92c:	f7ea f9ee 	bl	8004d0c <BSP_MOTION_SENSOR_GetFullScale>
 801a930:	4603      	mov	r3, r0
 801a932:	2b00      	cmp	r3, #0
 801a934:	d002      	beq.n	801a93c <Ms_demo+0x558>
 801a936:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a938:	3b01      	subs	r3, #1
 801a93a:	647b      	str	r3, [r7, #68]	; 0x44
  if (fullScale != 50) result--;
 801a93c:	687b      	ldr	r3, [r7, #4]
 801a93e:	2b32      	cmp	r3, #50	; 0x32
 801a940:	d002      	beq.n	801a948 <Ms_demo+0x564>
 801a942:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a944:	3b01      	subs	r3, #1
 801a946:	647b      	str	r3, [r7, #68]	; 0x44

  /* GetOutputDataRate and SetOutputDataRate functions */
  if (BSP_MOTION_SENSOR_SetOutputDataRate(1, MOTION_MAGNETO, 80.0f) != BSP_ERROR_NONE) result--;
 801a948:	ed9f 0a69 	vldr	s0, [pc, #420]	; 801aaf0 <Ms_demo+0x70c>
 801a94c:	2104      	movs	r1, #4
 801a94e:	2001      	movs	r0, #1
 801a950:	f7ea f97c 	bl	8004c4c <BSP_MOTION_SENSOR_SetOutputDataRate>
 801a954:	4603      	mov	r3, r0
 801a956:	2b00      	cmp	r3, #0
 801a958:	d002      	beq.n	801a960 <Ms_demo+0x57c>
 801a95a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a95c:	3b01      	subs	r3, #1
 801a95e:	647b      	str	r3, [r7, #68]	; 0x44
  if (BSP_MOTION_SENSOR_GetOutputDataRate(1, MOTION_MAGNETO, &outputDataRate) != BSP_ERROR_NONE) result--;
 801a960:	f107 0308 	add.w	r3, r7, #8
 801a964:	461a      	mov	r2, r3
 801a966:	2104      	movs	r1, #4
 801a968:	2001      	movs	r0, #1
 801a96a:	f7ea f90f 	bl	8004b8c <BSP_MOTION_SENSOR_GetOutputDataRate>
 801a96e:	4603      	mov	r3, r0
 801a970:	2b00      	cmp	r3, #0
 801a972:	d002      	beq.n	801a97a <Ms_demo+0x596>
 801a974:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a976:	3b01      	subs	r3, #1
 801a978:	647b      	str	r3, [r7, #68]	; 0x44
  if (outputDataRate != 100.0f) result--;
 801a97a:	edd7 7a02 	vldr	s15, [r7, #8]
 801a97e:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 801aaf4 <Ms_demo+0x710>
 801a982:	eef4 7a47 	vcmp.f32	s15, s14
 801a986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a98a:	d002      	beq.n	801a992 <Ms_demo+0x5ae>
 801a98c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a98e:	3b01      	subs	r3, #1
 801a990:	647b      	str	r3, [r7, #68]	; 0x44

  if (BSP_MOTION_SENSOR_SetOutputDataRate(1, MOTION_MAGNETO, 20.0f) != BSP_ERROR_NONE) result--;
 801a992:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 801a996:	2104      	movs	r1, #4
 801a998:	2001      	movs	r0, #1
 801a99a:	f7ea f957 	bl	8004c4c <BSP_MOTION_SENSOR_SetOutputDataRate>
 801a99e:	4603      	mov	r3, r0
 801a9a0:	2b00      	cmp	r3, #0
 801a9a2:	d002      	beq.n	801a9aa <Ms_demo+0x5c6>
 801a9a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a9a6:	3b01      	subs	r3, #1
 801a9a8:	647b      	str	r3, [r7, #68]	; 0x44
  if (BSP_MOTION_SENSOR_GetOutputDataRate(1, MOTION_MAGNETO, &outputDataRate) != BSP_ERROR_NONE) result--;
 801a9aa:	f107 0308 	add.w	r3, r7, #8
 801a9ae:	461a      	mov	r2, r3
 801a9b0:	2104      	movs	r1, #4
 801a9b2:	2001      	movs	r0, #1
 801a9b4:	f7ea f8ea 	bl	8004b8c <BSP_MOTION_SENSOR_GetOutputDataRate>
 801a9b8:	4603      	mov	r3, r0
 801a9ba:	2b00      	cmp	r3, #0
 801a9bc:	d002      	beq.n	801a9c4 <Ms_demo+0x5e0>
 801a9be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a9c0:	3b01      	subs	r3, #1
 801a9c2:	647b      	str	r3, [r7, #68]	; 0x44
  if (outputDataRate != 20.0f) result--;
 801a9c4:	edd7 7a02 	vldr	s15, [r7, #8]
 801a9c8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 801a9cc:	eef4 7a47 	vcmp.f32	s15, s14
 801a9d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a9d4:	d002      	beq.n	801a9dc <Ms_demo+0x5f8>
 801a9d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a9d8:	3b01      	subs	r3, #1
 801a9da:	647b      	str	r3, [r7, #68]	; 0x44

  /* GetSensitivity function */
  if (BSP_MOTION_SENSOR_GetSensitivity(1, MOTION_MAGNETO, &sensitivity) != BSP_ERROR_NONE) result--;
 801a9dc:	f107 030c 	add.w	r3, r7, #12
 801a9e0:	461a      	mov	r2, r3
 801a9e2:	2104      	movs	r1, #4
 801a9e4:	2001      	movs	r0, #1
 801a9e6:	f7ea f871 	bl	8004acc <BSP_MOTION_SENSOR_GetSensitivity>
 801a9ea:	4603      	mov	r3, r0
 801a9ec:	2b00      	cmp	r3, #0
 801a9ee:	d002      	beq.n	801a9f6 <Ms_demo+0x612>
 801a9f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a9f2:	3b01      	subs	r3, #1
 801a9f4:	647b      	str	r3, [r7, #68]	; 0x44

  /* GetAxes function */
  printf("Magnetometer axes:\n");
 801a9f6:	4840      	ldr	r0, [pc, #256]	; (801aaf8 <Ms_demo+0x714>)
 801a9f8:	f002 ff48 	bl	801d88c <puts>
  while (UserButtonPressed == 0)
 801a9fc:	e016      	b.n	801aa2c <Ms_demo+0x648>
  {
    if (BSP_MOTION_SENSOR_GetAxes(1, MOTION_MAGNETO, &axes) != BSP_ERROR_NONE) result--;
 801a9fe:	f107 031c 	add.w	r3, r7, #28
 801aa02:	461a      	mov	r2, r3
 801aa04:	2104      	movs	r1, #4
 801aa06:	2001      	movs	r0, #1
 801aa08:	f7e9 ffa0 	bl	800494c <BSP_MOTION_SENSOR_GetAxes>
 801aa0c:	4603      	mov	r3, r0
 801aa0e:	2b00      	cmp	r3, #0
 801aa10:	d002      	beq.n	801aa18 <Ms_demo+0x634>
 801aa12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801aa14:	3b01      	subs	r3, #1
 801aa16:	647b      	str	r3, [r7, #68]	; 0x44
    printf("X = %d, Y = %d, , Z = %d\n", axes.xval, axes.yval, axes.zval);
 801aa18:	69f9      	ldr	r1, [r7, #28]
 801aa1a:	6a3a      	ldr	r2, [r7, #32]
 801aa1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa1e:	4837      	ldr	r0, [pc, #220]	; (801aafc <Ms_demo+0x718>)
 801aa20:	f002 fec6 	bl	801d7b0 <iprintf>
    HAL_Delay(500);
 801aa24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801aa28:	f7f6 fe68 	bl	80116fc <HAL_Delay>
  while (UserButtonPressed == 0)
 801aa2c:	4b2e      	ldr	r3, [pc, #184]	; (801aae8 <Ms_demo+0x704>)
 801aa2e:	781b      	ldrb	r3, [r3, #0]
 801aa30:	b2db      	uxtb	r3, r3
 801aa32:	2b00      	cmp	r3, #0
 801aa34:	d0e3      	beq.n	801a9fe <Ms_demo+0x61a>
  }
  HAL_Delay(1000);
 801aa36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801aa3a:	f7f6 fe5f 	bl	80116fc <HAL_Delay>
  UserButtonPressed = RESET;
 801aa3e:	4b2a      	ldr	r3, [pc, #168]	; (801aae8 <Ms_demo+0x704>)
 801aa40:	2200      	movs	r2, #0
 801aa42:	701a      	strb	r2, [r3, #0]

  /* GetAxesRaw function */
  printf("Magnetometer raw axes:\n");
 801aa44:	482e      	ldr	r0, [pc, #184]	; (801ab00 <Ms_demo+0x71c>)
 801aa46:	f002 ff21 	bl	801d88c <puts>
  while (UserButtonPressed == 0)
 801aa4a:	e01b      	b.n	801aa84 <Ms_demo+0x6a0>
  {
    if (BSP_MOTION_SENSOR_GetAxesRaw(1, MOTION_MAGNETO, &axesRaw) != BSP_ERROR_NONE) result--;
 801aa4c:	f107 0314 	add.w	r3, r7, #20
 801aa50:	461a      	mov	r2, r3
 801aa52:	2104      	movs	r1, #4
 801aa54:	2001      	movs	r0, #1
 801aa56:	f7e9 ffd9 	bl	8004a0c <BSP_MOTION_SENSOR_GetAxesRaw>
 801aa5a:	4603      	mov	r3, r0
 801aa5c:	2b00      	cmp	r3, #0
 801aa5e:	d002      	beq.n	801aa66 <Ms_demo+0x682>
 801aa60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801aa62:	3b01      	subs	r3, #1
 801aa64:	647b      	str	r3, [r7, #68]	; 0x44
    printf("Xraw = %d, Yraw = %d, , Zraw = %d\n", axesRaw.xval, axesRaw.yval, axesRaw.zval);
 801aa66:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801aa6a:	4619      	mov	r1, r3
 801aa6c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801aa70:	461a      	mov	r2, r3
 801aa72:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801aa76:	481b      	ldr	r0, [pc, #108]	; (801aae4 <Ms_demo+0x700>)
 801aa78:	f002 fe9a 	bl	801d7b0 <iprintf>
    HAL_Delay(500);
 801aa7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801aa80:	f7f6 fe3c 	bl	80116fc <HAL_Delay>
  while (UserButtonPressed == 0)
 801aa84:	4b18      	ldr	r3, [pc, #96]	; (801aae8 <Ms_demo+0x704>)
 801aa86:	781b      	ldrb	r3, [r3, #0]
 801aa88:	b2db      	uxtb	r3, r3
 801aa8a:	2b00      	cmp	r3, #0
 801aa8c:	d0de      	beq.n	801aa4c <Ms_demo+0x668>
  }
  HAL_Delay(1000);
 801aa8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801aa92:	f7f6 fe33 	bl	80116fc <HAL_Delay>
  UserButtonPressed = RESET;
 801aa96:	4b14      	ldr	r3, [pc, #80]	; (801aae8 <Ms_demo+0x704>)
 801aa98:	2200      	movs	r2, #0
 801aa9a:	701a      	strb	r2, [r3, #0]

  /* Disable function */
  if (BSP_MOTION_SENSOR_Disable(1, MOTION_MAGNETO) != BSP_ERROR_NONE) result--;
 801aa9c:	2104      	movs	r1, #4
 801aa9e:	2001      	movs	r0, #1
 801aaa0:	f7e9 fef8 	bl	8004894 <BSP_MOTION_SENSOR_Disable>
 801aaa4:	4603      	mov	r3, r0
 801aaa6:	2b00      	cmp	r3, #0
 801aaa8:	d002      	beq.n	801aab0 <Ms_demo+0x6cc>
 801aaaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801aaac:	3b01      	subs	r3, #1
 801aaae:	647b      	str	r3, [r7, #68]	; 0x44

  /* De-initialize function */
  if (BSP_MOTION_SENSOR_DeInit(1) != BSP_ERROR_NONE) result--;
 801aab0:	2001      	movs	r0, #1
 801aab2:	f7e9 fded 	bl	8004690 <BSP_MOTION_SENSOR_DeInit>
 801aab6:	4603      	mov	r3, r0
 801aab8:	2b00      	cmp	r3, #0
 801aaba:	d002      	beq.n	801aac2 <Ms_demo+0x6de>
 801aabc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801aabe:	3b01      	subs	r3, #1
 801aac0:	647b      	str	r3, [r7, #68]	; 0x44
  /***************/
  /* End of example */
  /***************/

  /* De-Initialize User Button */
  if (BSP_PB_DeInit(BUTTON_USER) != BSP_ERROR_NONE) result--;
 801aac2:	2000      	movs	r0, #0
 801aac4:	f7e6 fa9e 	bl	8001004 <BSP_PB_DeInit>
 801aac8:	4603      	mov	r3, r0
 801aaca:	2b00      	cmp	r3, #0
 801aacc:	d002      	beq.n	801aad4 <Ms_demo+0x6f0>
 801aace:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801aad0:	3b01      	subs	r3, #1
 801aad2:	647b      	str	r3, [r7, #68]	; 0x44

  printf("Motion Sensors Example Ended\n");
 801aad4:	480b      	ldr	r0, [pc, #44]	; (801ab04 <Ms_demo+0x720>)
 801aad6:	f002 fed9 	bl	801d88c <puts>
  return result;
 801aada:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 801aadc:	4618      	mov	r0, r3
 801aade:	3748      	adds	r7, #72	; 0x48
 801aae0:	46bd      	mov	sp, r7
 801aae2:	bd80      	pop	{r7, pc}
 801aae4:	08022194 	.word	0x08022194
 801aae8:	200314e8 	.word	0x200314e8
 801aaec:	080221f8 	.word	0x080221f8
 801aaf0:	42a00000 	.word	0x42a00000
 801aaf4:	42c80000 	.word	0x42c80000
 801aaf8:	08022218 	.word	0x08022218
 801aafc:	08022160 	.word	0x08022160
 801ab00:	0802222c 	.word	0x0802222c
 801ab04:	08022244 	.word	0x08022244

0801ab08 <OSPI_NOR_demo>:
* @brief  OSPI Demo
* @param  None
* @retval None
*/
int32_t OSPI_NOR_demo(void)
{
 801ab08:	b580      	push	{r7, lr}
 801ab0a:	af00      	add	r7, sp, #0
  printf("\n******OSPI NOR EXAMPLE******\n");
 801ab0c:	4826      	ldr	r0, [pc, #152]	; (801aba8 <OSPI_NOR_demo+0xa0>)
 801ab0e:	f002 febd 	bl	801d88c <puts>

  /* Fill the buffer for write operation *************************************/
  Fill_Buffer(ospi_aTxBuffer, BUFFER_SIZE, TEST_VALUE_START);
 801ab12:	2243      	movs	r2, #67	; 0x43
 801ab14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801ab18:	4824      	ldr	r0, [pc, #144]	; (801abac <OSPI_NOR_demo+0xa4>)
 801ab1a:	f000 fbeb 	bl	801b2f4 <Fill_Buffer>

  /*##-2- Read & check the OSPI info #######################################*/
  /* Initialize the structure */
  pOSPI_Info.FlashSize          = (uint32_t)0x00;
 801ab1e:	4b24      	ldr	r3, [pc, #144]	; (801abb0 <OSPI_NOR_demo+0xa8>)
 801ab20:	2200      	movs	r2, #0
 801ab22:	601a      	str	r2, [r3, #0]
  pOSPI_Info.EraseSectorSize    = (uint32_t)0x00;
 801ab24:	4b22      	ldr	r3, [pc, #136]	; (801abb0 <OSPI_NOR_demo+0xa8>)
 801ab26:	2200      	movs	r2, #0
 801ab28:	605a      	str	r2, [r3, #4]
  pOSPI_Info.EraseSectorsNumber = (uint32_t)0x00;
 801ab2a:	4b21      	ldr	r3, [pc, #132]	; (801abb0 <OSPI_NOR_demo+0xa8>)
 801ab2c:	2200      	movs	r2, #0
 801ab2e:	609a      	str	r2, [r3, #8]
  pOSPI_Info.ProgPageSize       = (uint32_t)0x00;
 801ab30:	4b1f      	ldr	r3, [pc, #124]	; (801abb0 <OSPI_NOR_demo+0xa8>)
 801ab32:	2200      	movs	r2, #0
 801ab34:	61da      	str	r2, [r3, #28]
  pOSPI_Info.ProgPagesNumber    = (uint32_t)0x00;
 801ab36:	4b1e      	ldr	r3, [pc, #120]	; (801abb0 <OSPI_NOR_demo+0xa8>)
 801ab38:	2200      	movs	r2, #0
 801ab3a:	621a      	str	r2, [r3, #32]

  /* Read the OSPI memory info */
  if(BSP_OSPI_NOR_GetInfo(0, &pOSPI_Info) != BSP_ERROR_NONE)
 801ab3c:	491c      	ldr	r1, [pc, #112]	; (801abb0 <OSPI_NOR_demo+0xa8>)
 801ab3e:	2000      	movs	r0, #0
 801ab40:	f7ea fe0c 	bl	800575c <BSP_OSPI_NOR_GetInfo>
 801ab44:	4603      	mov	r3, r0
 801ab46:	2b00      	cmp	r3, #0
 801ab48:	d003      	beq.n	801ab52 <OSPI_NOR_demo+0x4a>
  {
    printf("TEST Get INFO : FAILED\n");
 801ab4a:	481a      	ldr	r0, [pc, #104]	; (801abb4 <OSPI_NOR_demo+0xac>)
 801ab4c:	f002 fe9e 	bl	801d88c <puts>
 801ab50:	e027      	b.n	801aba2 <OSPI_NOR_demo+0x9a>
  }
  /* Test the correctness */
  else if((pOSPI_Info.FlashSize != 0x4000000) || (pOSPI_Info.EraseSectorSize != 0x10000)  ||
 801ab52:	4b17      	ldr	r3, [pc, #92]	; (801abb0 <OSPI_NOR_demo+0xa8>)
 801ab54:	681b      	ldr	r3, [r3, #0]
 801ab56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801ab5a:	d113      	bne.n	801ab84 <OSPI_NOR_demo+0x7c>
 801ab5c:	4b14      	ldr	r3, [pc, #80]	; (801abb0 <OSPI_NOR_demo+0xa8>)
 801ab5e:	685b      	ldr	r3, [r3, #4]
 801ab60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ab64:	d10e      	bne.n	801ab84 <OSPI_NOR_demo+0x7c>
          (pOSPI_Info.ProgPageSize != 0x100)  || (pOSPI_Info.EraseSectorsNumber != 0x400) ||
 801ab66:	4b12      	ldr	r3, [pc, #72]	; (801abb0 <OSPI_NOR_demo+0xa8>)
 801ab68:	69db      	ldr	r3, [r3, #28]
  else if((pOSPI_Info.FlashSize != 0x4000000) || (pOSPI_Info.EraseSectorSize != 0x10000)  ||
 801ab6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ab6e:	d109      	bne.n	801ab84 <OSPI_NOR_demo+0x7c>
          (pOSPI_Info.ProgPageSize != 0x100)  || (pOSPI_Info.EraseSectorsNumber != 0x400) ||
 801ab70:	4b0f      	ldr	r3, [pc, #60]	; (801abb0 <OSPI_NOR_demo+0xa8>)
 801ab72:	689b      	ldr	r3, [r3, #8]
 801ab74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ab78:	d104      	bne.n	801ab84 <OSPI_NOR_demo+0x7c>
          (pOSPI_Info.ProgPagesNumber != 262144))
 801ab7a:	4b0d      	ldr	r3, [pc, #52]	; (801abb0 <OSPI_NOR_demo+0xa8>)
 801ab7c:	6a1b      	ldr	r3, [r3, #32]
          (pOSPI_Info.ProgPageSize != 0x100)  || (pOSPI_Info.EraseSectorsNumber != 0x400) ||
 801ab7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801ab82:	d006      	beq.n	801ab92 <OSPI_NOR_demo+0x8a>
  {
    printf("OSPI GET INFO : FAILED.\n");
 801ab84:	480c      	ldr	r0, [pc, #48]	; (801abb8 <OSPI_NOR_demo+0xb0>)
 801ab86:	f002 fe81 	bl	801d88c <puts>
    printf("OSPI Example Aborted.\n");
 801ab8a:	480c      	ldr	r0, [pc, #48]	; (801abbc <OSPI_NOR_demo+0xb4>)
 801ab8c:	f002 fe7e 	bl	801d88c <puts>
 801ab90:	e007      	b.n	801aba2 <OSPI_NOR_demo+0x9a>
  }
  else
  {
    OSPI_NOR_STR_Mode();
 801ab92:	f000 f815 	bl	801abc0 <OSPI_NOR_STR_Mode>
    OSPI_NOR_STR_MM_Mode();
 801ab96:	f000 f907 	bl	801ada8 <OSPI_NOR_STR_MM_Mode>
    OSPI_NOR_DTR_Mode();
 801ab9a:	f000 fa13 	bl	801afc4 <OSPI_NOR_DTR_Mode>
    OSPI_NOR_DTR_MM_Mode();
 801ab9e:	f000 fad1 	bl	801b144 <OSPI_NOR_DTR_MM_Mode>
  }

  return 0;
 801aba2:	2300      	movs	r3, #0
}
 801aba4:	4618      	mov	r0, r3
 801aba6:	bd80      	pop	{r7, pc}
 801aba8:	08022284 	.word	0x08022284
 801abac:	200314ec 	.word	0x200314ec
 801abb0:	200334ec 	.word	0x200334ec
 801abb4:	080222a4 	.word	0x080222a4
 801abb8:	080222bc 	.word	0x080222bc
 801abbc:	080222d4 	.word	0x080222d4

0801abc0 <OSPI_NOR_STR_Mode>:

static void OSPI_NOR_STR_Mode(void)
{
 801abc0:	b580      	push	{r7, lr}
 801abc2:	b086      	sub	sp, #24
 801abc4:	af00      	add	r7, sp, #0
  uint32_t Offset;
  uint32_t block_size = MX25LM51245G_SECTOR_64K;
 801abc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801abca:	60fb      	str	r3, [r7, #12]
  uint32_t j = 0, temp_value = 4*block_size;
 801abcc:	2300      	movs	r3, #0
 801abce:	617b      	str	r3, [r7, #20]
 801abd0:	68fb      	ldr	r3, [r7, #12]
 801abd2:	009b      	lsls	r3, r3, #2
 801abd4:	60bb      	str	r3, [r7, #8]
  static uint32_t i = 0;
  uint32_t error_code = 0;
 801abd6:	2300      	movs	r3, #0
 801abd8:	613b      	str	r3, [r7, #16]

  printf("STR COMPARE:\n");
 801abda:	4865      	ldr	r0, [pc, #404]	; (801ad70 <OSPI_NOR_STR_Mode+0x1b0>)
 801abdc:	f002 fe56 	bl	801d88c <puts>

  BSP_OSPI_NOR_DeInit(0);
 801abe0:	2000      	movs	r0, #0
 801abe2:	f7ea fae1 	bl	80051a8 <BSP_OSPI_NOR_DeInit>

  /* OSPI device configuration */
  Flash.InterfaceMode = InterfaceMode[j];
 801abe6:	4a63      	ldr	r2, [pc, #396]	; (801ad74 <OSPI_NOR_STR_Mode+0x1b4>)
 801abe8:	697b      	ldr	r3, [r7, #20]
 801abea:	4413      	add	r3, r2
 801abec:	781a      	ldrb	r2, [r3, #0]
 801abee:	4b62      	ldr	r3, [pc, #392]	; (801ad78 <OSPI_NOR_STR_Mode+0x1b8>)
 801abf0:	701a      	strb	r2, [r3, #0]
  Flash.TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;
 801abf2:	4b61      	ldr	r3, [pc, #388]	; (801ad78 <OSPI_NOR_STR_Mode+0x1b8>)
 801abf4:	2200      	movs	r2, #0
 801abf6:	705a      	strb	r2, [r3, #1]
  BSP_OSPI_NOR_Init(0, &Flash);
 801abf8:	495f      	ldr	r1, [pc, #380]	; (801ad78 <OSPI_NOR_STR_Mode+0x1b8>)
 801abfa:	2000      	movs	r0, #0
 801abfc:	f7ea fa2c 	bl	8005058 <BSP_OSPI_NOR_Init>

  /* Fill the buffer for write operation *************************************/
  Fill_Buffer(ospi_aTxBuffer, BUFFER_SIZE, TEST_VALUE_START);
 801ac00:	2243      	movs	r2, #67	; 0x43
 801ac02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801ac06:	485d      	ldr	r0, [pc, #372]	; (801ad7c <OSPI_NOR_STR_Mode+0x1bc>)
 801ac08:	f000 fb74 	bl	801b2f4 <Fill_Buffer>

  for(j = 0; j < 2; j++)
 801ac0c:	2300      	movs	r3, #0
 801ac0e:	617b      	str	r3, [r7, #20]
 801ac10:	e0a4      	b.n	801ad5c <OSPI_NOR_STR_Mode+0x19c>
  {
    if(BSP_OSPI_NOR_ConfigFlash(0, Flash.InterfaceMode, Flash.TransferRate) != BSP_ERROR_NONE)
 801ac12:	4b59      	ldr	r3, [pc, #356]	; (801ad78 <OSPI_NOR_STR_Mode+0x1b8>)
 801ac14:	781b      	ldrb	r3, [r3, #0]
 801ac16:	4a58      	ldr	r2, [pc, #352]	; (801ad78 <OSPI_NOR_STR_Mode+0x1b8>)
 801ac18:	7852      	ldrb	r2, [r2, #1]
 801ac1a:	4619      	mov	r1, r3
 801ac1c:	2000      	movs	r0, #0
 801ac1e:	f7ea fe51 	bl	80058c4 <BSP_OSPI_NOR_ConfigFlash>
 801ac22:	4603      	mov	r3, r0
 801ac24:	2b00      	cmp	r3, #0
 801ac26:	d002      	beq.n	801ac2e <OSPI_NOR_STR_Mode+0x6e>
    {
      printf("Config flash Failed.\n");
 801ac28:	4855      	ldr	r0, [pc, #340]	; (801ad80 <OSPI_NOR_STR_Mode+0x1c0>)
 801ac2a:	f002 fe2f 	bl	801d88c <puts>
    }

    BSP_OSPI_NOR_GetStatus(0);
 801ac2e:	2000      	movs	r0, #0
 801ac30:	f7ea fd1e 	bl	8005670 <BSP_OSPI_NOR_GetStatus>

    for(i = 0; i < temp_value/block_size; i++)
 801ac34:	4b53      	ldr	r3, [pc, #332]	; (801ad84 <OSPI_NOR_STR_Mode+0x1c4>)
 801ac36:	2200      	movs	r2, #0
 801ac38:	601a      	str	r2, [r3, #0]
 801ac3a:	e01e      	b.n	801ac7a <OSPI_NOR_STR_Mode+0xba>
    {
      if(BSP_OSPI_NOR_Erase_Block(0, OPI_START_ADDRESS + i*block_size, MX25LM51245G_ERASE_64K) != BSP_ERROR_NONE)
 801ac3c:	4b51      	ldr	r3, [pc, #324]	; (801ad84 <OSPI_NOR_STR_Mode+0x1c4>)
 801ac3e:	681b      	ldr	r3, [r3, #0]
 801ac40:	68fa      	ldr	r2, [r7, #12]
 801ac42:	fb02 f303 	mul.w	r3, r2, r3
 801ac46:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 801ac4a:	2201      	movs	r2, #1
 801ac4c:	4619      	mov	r1, r3
 801ac4e:	2000      	movs	r0, #0
 801ac50:	f7ea fc90 	bl	8005574 <BSP_OSPI_NOR_Erase_Block>
 801ac54:	4603      	mov	r3, r0
 801ac56:	2b00      	cmp	r3, #0
 801ac58:	d002      	beq.n	801ac60 <OSPI_NOR_STR_Mode+0xa0>
      {
        printf("Erase Failed.\n");
 801ac5a:	484b      	ldr	r0, [pc, #300]	; (801ad88 <OSPI_NOR_STR_Mode+0x1c8>)
 801ac5c:	f002 fe16 	bl	801d88c <puts>
      }
      while(BSP_OSPI_NOR_GetStatus(0) == BSP_ERROR_BUSY);
 801ac60:	bf00      	nop
 801ac62:	2000      	movs	r0, #0
 801ac64:	f7ea fd04 	bl	8005670 <BSP_OSPI_NOR_GetStatus>
 801ac68:	4603      	mov	r3, r0
 801ac6a:	f113 0f03 	cmn.w	r3, #3
 801ac6e:	d0f8      	beq.n	801ac62 <OSPI_NOR_STR_Mode+0xa2>
    for(i = 0; i < temp_value/block_size; i++)
 801ac70:	4b44      	ldr	r3, [pc, #272]	; (801ad84 <OSPI_NOR_STR_Mode+0x1c4>)
 801ac72:	681b      	ldr	r3, [r3, #0]
 801ac74:	3301      	adds	r3, #1
 801ac76:	4a43      	ldr	r2, [pc, #268]	; (801ad84 <OSPI_NOR_STR_Mode+0x1c4>)
 801ac78:	6013      	str	r3, [r2, #0]
 801ac7a:	68ba      	ldr	r2, [r7, #8]
 801ac7c:	68fb      	ldr	r3, [r7, #12]
 801ac7e:	fbb2 f2f3 	udiv	r2, r2, r3
 801ac82:	4b40      	ldr	r3, [pc, #256]	; (801ad84 <OSPI_NOR_STR_Mode+0x1c4>)
 801ac84:	681b      	ldr	r3, [r3, #0]
 801ac86:	429a      	cmp	r2, r3
 801ac88:	d8d8      	bhi.n	801ac3c <OSPI_NOR_STR_Mode+0x7c>
    }

    for(i = 0; i < (temp_value/BUFFER_SIZE); i++)
 801ac8a:	4b3e      	ldr	r3, [pc, #248]	; (801ad84 <OSPI_NOR_STR_Mode+0x1c4>)
 801ac8c:	2200      	movs	r2, #0
 801ac8e:	601a      	str	r2, [r3, #0]
 801ac90:	e039      	b.n	801ad06 <OSPI_NOR_STR_Mode+0x146>
    {
      if(BSP_OSPI_NOR_Write(0, ospi_aTxBuffer, OPI_START_ADDRESS + i*BUFFER_SIZE, BUFFER_SIZE) != BSP_ERROR_NONE)
 801ac92:	4b3c      	ldr	r3, [pc, #240]	; (801ad84 <OSPI_NOR_STR_Mode+0x1c4>)
 801ac94:	681b      	ldr	r3, [r3, #0]
 801ac96:	3370      	adds	r3, #112	; 0x70
 801ac98:	031a      	lsls	r2, r3, #12
 801ac9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801ac9e:	4937      	ldr	r1, [pc, #220]	; (801ad7c <OSPI_NOR_STR_Mode+0x1bc>)
 801aca0:	2000      	movs	r0, #0
 801aca2:	f7ea fb81 	bl	80053a8 <BSP_OSPI_NOR_Write>
 801aca6:	4603      	mov	r3, r0
 801aca8:	2b00      	cmp	r3, #0
 801acaa:	d006      	beq.n	801acba <OSPI_NOR_STR_Mode+0xfa>
      {
        printf("WRITE : FAILED.\n");
 801acac:	4837      	ldr	r0, [pc, #220]	; (801ad8c <OSPI_NOR_STR_Mode+0x1cc>)
 801acae:	f002 fded 	bl	801d88c <puts>
        printf("Test Aborted.\n");
 801acb2:	4837      	ldr	r0, [pc, #220]	; (801ad90 <OSPI_NOR_STR_Mode+0x1d0>)
 801acb4:	f002 fdea 	bl	801d88c <puts>
        break;
 801acb8:	e02b      	b.n	801ad12 <OSPI_NOR_STR_Mode+0x152>
      }

      if(BSP_OSPI_NOR_Read(0, ospi_aRxBuffer, OPI_START_ADDRESS + i*BUFFER_SIZE, BUFFER_SIZE) != BSP_ERROR_NONE)
 801acba:	4b32      	ldr	r3, [pc, #200]	; (801ad84 <OSPI_NOR_STR_Mode+0x1c4>)
 801acbc:	681b      	ldr	r3, [r3, #0]
 801acbe:	3370      	adds	r3, #112	; 0x70
 801acc0:	031a      	lsls	r2, r3, #12
 801acc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801acc6:	4933      	ldr	r1, [pc, #204]	; (801ad94 <OSPI_NOR_STR_Mode+0x1d4>)
 801acc8:	2000      	movs	r0, #0
 801acca:	f7ea fb17 	bl	80052fc <BSP_OSPI_NOR_Read>
 801acce:	4603      	mov	r3, r0
 801acd0:	2b00      	cmp	r3, #0
 801acd2:	d006      	beq.n	801ace2 <OSPI_NOR_STR_Mode+0x122>
      {
        printf("Read : FAILED.\n");
 801acd4:	4830      	ldr	r0, [pc, #192]	; (801ad98 <OSPI_NOR_STR_Mode+0x1d8>)
 801acd6:	f002 fdd9 	bl	801d88c <puts>
        printf("Test Aborted.\n");
 801acda:	482d      	ldr	r0, [pc, #180]	; (801ad90 <OSPI_NOR_STR_Mode+0x1d0>)
 801acdc:	f002 fdd6 	bl	801d88c <puts>
        break;
 801ace0:	e017      	b.n	801ad12 <OSPI_NOR_STR_Mode+0x152>
      }

      if(RMABuffercmp(ospi_aRxBuffer, ospi_aTxBuffer, (uint32_t)BUFFER_SIZE, &Offset) != 0)
 801ace2:	1d3b      	adds	r3, r7, #4
 801ace4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801ace8:	4924      	ldr	r1, [pc, #144]	; (801ad7c <OSPI_NOR_STR_Mode+0x1bc>)
 801acea:	482a      	ldr	r0, [pc, #168]	; (801ad94 <OSPI_NOR_STR_Mode+0x1d4>)
 801acec:	f000 fb25 	bl	801b33a <RMABuffercmp>
 801acf0:	4603      	mov	r3, r0
 801acf2:	2b00      	cmp	r3, #0
 801acf4:	d002      	beq.n	801acfc <OSPI_NOR_STR_Mode+0x13c>
      {
        error_code++;
 801acf6:	693b      	ldr	r3, [r7, #16]
 801acf8:	3301      	adds	r3, #1
 801acfa:	613b      	str	r3, [r7, #16]
    for(i = 0; i < (temp_value/BUFFER_SIZE); i++)
 801acfc:	4b21      	ldr	r3, [pc, #132]	; (801ad84 <OSPI_NOR_STR_Mode+0x1c4>)
 801acfe:	681b      	ldr	r3, [r3, #0]
 801ad00:	3301      	adds	r3, #1
 801ad02:	4a20      	ldr	r2, [pc, #128]	; (801ad84 <OSPI_NOR_STR_Mode+0x1c4>)
 801ad04:	6013      	str	r3, [r2, #0]
 801ad06:	68bb      	ldr	r3, [r7, #8]
 801ad08:	0b1a      	lsrs	r2, r3, #12
 801ad0a:	4b1e      	ldr	r3, [pc, #120]	; (801ad84 <OSPI_NOR_STR_Mode+0x1c4>)
 801ad0c:	681b      	ldr	r3, [r3, #0]
 801ad0e:	429a      	cmp	r2, r3
 801ad10:	d8bf      	bhi.n	801ac92 <OSPI_NOR_STR_Mode+0xd2>
      }
    }

    if(error_code == 0)
 801ad12:	693b      	ldr	r3, [r7, #16]
 801ad14:	2b00      	cmp	r3, #0
 801ad16:	d108      	bne.n	801ad2a <OSPI_NOR_STR_Mode+0x16a>
    {
      printf("%s Successful\n",(uint8_t*)InterfaceModeText[j]);
 801ad18:	4a20      	ldr	r2, [pc, #128]	; (801ad9c <OSPI_NOR_STR_Mode+0x1dc>)
 801ad1a:	697b      	ldr	r3, [r7, #20]
 801ad1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ad20:	4619      	mov	r1, r3
 801ad22:	481f      	ldr	r0, [pc, #124]	; (801ada0 <OSPI_NOR_STR_Mode+0x1e0>)
 801ad24:	f002 fd44 	bl	801d7b0 <iprintf>
 801ad28:	e009      	b.n	801ad3e <OSPI_NOR_STR_Mode+0x17e>
    }
    else
    {
      printf("ERROR with %s\n",(uint8_t*)InterfaceModeText[j]);
 801ad2a:	4a1c      	ldr	r2, [pc, #112]	; (801ad9c <OSPI_NOR_STR_Mode+0x1dc>)
 801ad2c:	697b      	ldr	r3, [r7, #20]
 801ad2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ad32:	4619      	mov	r1, r3
 801ad34:	481b      	ldr	r0, [pc, #108]	; (801ada4 <OSPI_NOR_STR_Mode+0x1e4>)
 801ad36:	f002 fd3b 	bl	801d7b0 <iprintf>
      error_code = 0;
 801ad3a:	2300      	movs	r3, #0
 801ad3c:	613b      	str	r3, [r7, #16]
    }

    /* Clear the buffer for the next test */    
    memset(ospi_aRxBuffer, 0, sizeof(ospi_aRxBuffer));
 801ad3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801ad42:	2100      	movs	r1, #0
 801ad44:	4813      	ldr	r0, [pc, #76]	; (801ad94 <OSPI_NOR_STR_Mode+0x1d4>)
 801ad46:	f002 fdbb 	bl	801d8c0 <memset>
    memset(ospi_aTxBuffer, 0, sizeof(ospi_aTxBuffer));    
 801ad4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801ad4e:	2100      	movs	r1, #0
 801ad50:	480a      	ldr	r0, [pc, #40]	; (801ad7c <OSPI_NOR_STR_Mode+0x1bc>)
 801ad52:	f002 fdb5 	bl	801d8c0 <memset>
  for(j = 0; j < 2; j++)
 801ad56:	697b      	ldr	r3, [r7, #20]
 801ad58:	3301      	adds	r3, #1
 801ad5a:	617b      	str	r3, [r7, #20]
 801ad5c:	697b      	ldr	r3, [r7, #20]
 801ad5e:	2b01      	cmp	r3, #1
 801ad60:	f67f af57 	bls.w	801ac12 <OSPI_NOR_STR_Mode+0x52>
  }
}
 801ad64:	bf00      	nop
 801ad66:	bf00      	nop
 801ad68:	3718      	adds	r7, #24
 801ad6a:	46bd      	mov	sp, r7
 801ad6c:	bd80      	pop	{r7, pc}
 801ad6e:	bf00      	nop
 801ad70:	080222ec 	.word	0x080222ec
 801ad74:	200004e0 	.word	0x200004e0
 801ad78:	20033510 	.word	0x20033510
 801ad7c:	200314ec 	.word	0x200314ec
 801ad80:	080222fc 	.word	0x080222fc
 801ad84:	20033518 	.word	0x20033518
 801ad88:	08022314 	.word	0x08022314
 801ad8c:	08022324 	.word	0x08022324
 801ad90:	08022334 	.word	0x08022334
 801ad94:	200324ec 	.word	0x200324ec
 801ad98:	08022344 	.word	0x08022344
 801ad9c:	200004e4 	.word	0x200004e4
 801ada0:	08022354 	.word	0x08022354
 801ada4:	08022364 	.word	0x08022364

0801ada8 <OSPI_NOR_STR_MM_Mode>:

static void OSPI_NOR_STR_MM_Mode(void)
{
 801ada8:	b580      	push	{r7, lr}
 801adaa:	b086      	sub	sp, #24
 801adac:	af00      	add	r7, sp, #0
  uint32_t Offset;
  uint32_t block_size = MX25LM51245G_SECTOR_64K;
 801adae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801adb2:	60bb      	str	r3, [r7, #8]
  uint32_t j = 0, temp_value = 4*block_size;
 801adb4:	2300      	movs	r3, #0
 801adb6:	617b      	str	r3, [r7, #20]
 801adb8:	68bb      	ldr	r3, [r7, #8]
 801adba:	009b      	lsls	r3, r3, #2
 801adbc:	607b      	str	r3, [r7, #4]
  static uint32_t i = 0;
  uint32_t error_code = 0;
 801adbe:	2300      	movs	r3, #0
 801adc0:	613b      	str	r3, [r7, #16]

  printf("MM STR COMPARE:\n");
 801adc2:	4871      	ldr	r0, [pc, #452]	; (801af88 <OSPI_NOR_STR_MM_Mode+0x1e0>)
 801adc4:	f002 fd62 	bl	801d88c <puts>

  BSP_OSPI_NOR_DeInit(0);
 801adc8:	2000      	movs	r0, #0
 801adca:	f7ea f9ed 	bl	80051a8 <BSP_OSPI_NOR_DeInit>

  /* OSPI device configuration */
  Flash.InterfaceMode = InterfaceMode[j];
 801adce:	4a6f      	ldr	r2, [pc, #444]	; (801af8c <OSPI_NOR_STR_MM_Mode+0x1e4>)
 801add0:	697b      	ldr	r3, [r7, #20]
 801add2:	4413      	add	r3, r2
 801add4:	781a      	ldrb	r2, [r3, #0]
 801add6:	4b6e      	ldr	r3, [pc, #440]	; (801af90 <OSPI_NOR_STR_MM_Mode+0x1e8>)
 801add8:	701a      	strb	r2, [r3, #0]
  Flash.TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;
 801adda:	4b6d      	ldr	r3, [pc, #436]	; (801af90 <OSPI_NOR_STR_MM_Mode+0x1e8>)
 801addc:	2200      	movs	r2, #0
 801adde:	705a      	strb	r2, [r3, #1]
  BSP_OSPI_NOR_Init(0, &Flash);
 801ade0:	496b      	ldr	r1, [pc, #428]	; (801af90 <OSPI_NOR_STR_MM_Mode+0x1e8>)
 801ade2:	2000      	movs	r0, #0
 801ade4:	f7ea f938 	bl	8005058 <BSP_OSPI_NOR_Init>

  /* Fill the buffer for write operation *************************************/
  Fill_Buffer(ospi_aTxBuffer, BUFFER_SIZE, TEST_VALUE_START);
 801ade8:	2243      	movs	r2, #67	; 0x43
 801adea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801adee:	4869      	ldr	r0, [pc, #420]	; (801af94 <OSPI_NOR_STR_MM_Mode+0x1ec>)
 801adf0:	f000 fa80 	bl	801b2f4 <Fill_Buffer>

  for(j = 0; j < 2; j++)
 801adf4:	2300      	movs	r3, #0
 801adf6:	617b      	str	r3, [r7, #20]
 801adf8:	e0bd      	b.n	801af76 <OSPI_NOR_STR_MM_Mode+0x1ce>
  {
    if(BSP_OSPI_NOR_ConfigFlash(0, Flash.InterfaceMode, Flash.TransferRate) != BSP_ERROR_NONE)
 801adfa:	4b65      	ldr	r3, [pc, #404]	; (801af90 <OSPI_NOR_STR_MM_Mode+0x1e8>)
 801adfc:	781b      	ldrb	r3, [r3, #0]
 801adfe:	4a64      	ldr	r2, [pc, #400]	; (801af90 <OSPI_NOR_STR_MM_Mode+0x1e8>)
 801ae00:	7852      	ldrb	r2, [r2, #1]
 801ae02:	4619      	mov	r1, r3
 801ae04:	2000      	movs	r0, #0
 801ae06:	f7ea fd5d 	bl	80058c4 <BSP_OSPI_NOR_ConfigFlash>
 801ae0a:	4603      	mov	r3, r0
 801ae0c:	2b00      	cmp	r3, #0
 801ae0e:	d002      	beq.n	801ae16 <OSPI_NOR_STR_MM_Mode+0x6e>
    {
      printf("Config flash Failed.\n");
 801ae10:	4861      	ldr	r0, [pc, #388]	; (801af98 <OSPI_NOR_STR_MM_Mode+0x1f0>)
 801ae12:	f002 fd3b 	bl	801d88c <puts>
    }

    BSP_OSPI_NOR_GetStatus(0);
 801ae16:	2000      	movs	r0, #0
 801ae18:	f7ea fc2a 	bl	8005670 <BSP_OSPI_NOR_GetStatus>

    for(i = 0; i < temp_value/block_size; i++)
 801ae1c:	4b5f      	ldr	r3, [pc, #380]	; (801af9c <OSPI_NOR_STR_MM_Mode+0x1f4>)
 801ae1e:	2200      	movs	r2, #0
 801ae20:	601a      	str	r2, [r3, #0]
 801ae22:	e01e      	b.n	801ae62 <OSPI_NOR_STR_MM_Mode+0xba>
    {
      if(BSP_OSPI_NOR_Erase_Block(0, OPI_START_ADDRESS + i*block_size, MX25LM51245G_ERASE_64K) != BSP_ERROR_NONE)
 801ae24:	4b5d      	ldr	r3, [pc, #372]	; (801af9c <OSPI_NOR_STR_MM_Mode+0x1f4>)
 801ae26:	681b      	ldr	r3, [r3, #0]
 801ae28:	68ba      	ldr	r2, [r7, #8]
 801ae2a:	fb02 f303 	mul.w	r3, r2, r3
 801ae2e:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 801ae32:	2201      	movs	r2, #1
 801ae34:	4619      	mov	r1, r3
 801ae36:	2000      	movs	r0, #0
 801ae38:	f7ea fb9c 	bl	8005574 <BSP_OSPI_NOR_Erase_Block>
 801ae3c:	4603      	mov	r3, r0
 801ae3e:	2b00      	cmp	r3, #0
 801ae40:	d002      	beq.n	801ae48 <OSPI_NOR_STR_MM_Mode+0xa0>
      {
        printf("Erase Failed.\n");
 801ae42:	4857      	ldr	r0, [pc, #348]	; (801afa0 <OSPI_NOR_STR_MM_Mode+0x1f8>)
 801ae44:	f002 fd22 	bl	801d88c <puts>
      }
      while(BSP_OSPI_NOR_GetStatus(0) == BSP_ERROR_BUSY);
 801ae48:	bf00      	nop
 801ae4a:	2000      	movs	r0, #0
 801ae4c:	f7ea fc10 	bl	8005670 <BSP_OSPI_NOR_GetStatus>
 801ae50:	4603      	mov	r3, r0
 801ae52:	f113 0f03 	cmn.w	r3, #3
 801ae56:	d0f8      	beq.n	801ae4a <OSPI_NOR_STR_MM_Mode+0xa2>
    for(i = 0; i < temp_value/block_size; i++)
 801ae58:	4b50      	ldr	r3, [pc, #320]	; (801af9c <OSPI_NOR_STR_MM_Mode+0x1f4>)
 801ae5a:	681b      	ldr	r3, [r3, #0]
 801ae5c:	3301      	adds	r3, #1
 801ae5e:	4a4f      	ldr	r2, [pc, #316]	; (801af9c <OSPI_NOR_STR_MM_Mode+0x1f4>)
 801ae60:	6013      	str	r3, [r2, #0]
 801ae62:	687a      	ldr	r2, [r7, #4]
 801ae64:	68bb      	ldr	r3, [r7, #8]
 801ae66:	fbb2 f2f3 	udiv	r2, r2, r3
 801ae6a:	4b4c      	ldr	r3, [pc, #304]	; (801af9c <OSPI_NOR_STR_MM_Mode+0x1f4>)
 801ae6c:	681b      	ldr	r3, [r3, #0]
 801ae6e:	429a      	cmp	r2, r3
 801ae70:	d8d8      	bhi.n	801ae24 <OSPI_NOR_STR_MM_Mode+0x7c>
    }

    for(i = 0; i < (temp_value/BUFFER_SIZE); i++)
 801ae72:	4b4a      	ldr	r3, [pc, #296]	; (801af9c <OSPI_NOR_STR_MM_Mode+0x1f4>)
 801ae74:	2200      	movs	r2, #0
 801ae76:	601a      	str	r2, [r3, #0]
 801ae78:	e018      	b.n	801aeac <OSPI_NOR_STR_MM_Mode+0x104>
    {
      if(BSP_OSPI_NOR_Write(0, ospi_aTxBuffer, OPI_START_ADDRESS + i*BUFFER_SIZE, BUFFER_SIZE) != BSP_ERROR_NONE)
 801ae7a:	4b48      	ldr	r3, [pc, #288]	; (801af9c <OSPI_NOR_STR_MM_Mode+0x1f4>)
 801ae7c:	681b      	ldr	r3, [r3, #0]
 801ae7e:	3370      	adds	r3, #112	; 0x70
 801ae80:	031a      	lsls	r2, r3, #12
 801ae82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801ae86:	4943      	ldr	r1, [pc, #268]	; (801af94 <OSPI_NOR_STR_MM_Mode+0x1ec>)
 801ae88:	2000      	movs	r0, #0
 801ae8a:	f7ea fa8d 	bl	80053a8 <BSP_OSPI_NOR_Write>
 801ae8e:	4603      	mov	r3, r0
 801ae90:	2b00      	cmp	r3, #0
 801ae92:	d006      	beq.n	801aea2 <OSPI_NOR_STR_MM_Mode+0xfa>
      {
        printf("WRITE : FAILED.\n");
 801ae94:	4843      	ldr	r0, [pc, #268]	; (801afa4 <OSPI_NOR_STR_MM_Mode+0x1fc>)
 801ae96:	f002 fcf9 	bl	801d88c <puts>
        printf("Test Aborted.\n");
 801ae9a:	4843      	ldr	r0, [pc, #268]	; (801afa8 <OSPI_NOR_STR_MM_Mode+0x200>)
 801ae9c:	f002 fcf6 	bl	801d88c <puts>
        break;
 801aea0:	e00a      	b.n	801aeb8 <OSPI_NOR_STR_MM_Mode+0x110>
    for(i = 0; i < (temp_value/BUFFER_SIZE); i++)
 801aea2:	4b3e      	ldr	r3, [pc, #248]	; (801af9c <OSPI_NOR_STR_MM_Mode+0x1f4>)
 801aea4:	681b      	ldr	r3, [r3, #0]
 801aea6:	3301      	adds	r3, #1
 801aea8:	4a3c      	ldr	r2, [pc, #240]	; (801af9c <OSPI_NOR_STR_MM_Mode+0x1f4>)
 801aeaa:	6013      	str	r3, [r2, #0]
 801aeac:	687b      	ldr	r3, [r7, #4]
 801aeae:	0b1a      	lsrs	r2, r3, #12
 801aeb0:	4b3a      	ldr	r3, [pc, #232]	; (801af9c <OSPI_NOR_STR_MM_Mode+0x1f4>)
 801aeb2:	681b      	ldr	r3, [r3, #0]
 801aeb4:	429a      	cmp	r2, r3
 801aeb6:	d8e0      	bhi.n	801ae7a <OSPI_NOR_STR_MM_Mode+0xd2>
      }
    }

    BSP_OSPI_NOR_EnableMemoryMappedMode(0);
 801aeb8:	2000      	movs	r0, #0
 801aeba:	f7ea fc65 	bl	8005788 <BSP_OSPI_NOR_EnableMemoryMappedMode>

    OSPI_MMP_pointer = (uint8_t*)(0x70000000 + OPI_START_ADDRESS);
 801aebe:	4b3b      	ldr	r3, [pc, #236]	; (801afac <OSPI_NOR_STR_MM_Mode+0x204>)
 801aec0:	4a3b      	ldr	r2, [pc, #236]	; (801afb0 <OSPI_NOR_STR_MM_Mode+0x208>)
 801aec2:	601a      	str	r2, [r3, #0]
    for(i = 0; i < (temp_value/BUFFER_SIZE); i++)
 801aec4:	4b35      	ldr	r3, [pc, #212]	; (801af9c <OSPI_NOR_STR_MM_Mode+0x1f4>)
 801aec6:	2200      	movs	r2, #0
 801aec8:	601a      	str	r2, [r3, #0]
 801aeca:	e026      	b.n	801af1a <OSPI_NOR_STR_MM_Mode+0x172>
    {
      for(int k = 0; k < BUFFER_SIZE; k++)
 801aecc:	2300      	movs	r3, #0
 801aece:	60fb      	str	r3, [r7, #12]
 801aed0:	e00d      	b.n	801aeee <OSPI_NOR_STR_MM_Mode+0x146>
      {
        ospi_aRxBuffer[k] = *(OSPI_MMP_pointer++);
 801aed2:	4b36      	ldr	r3, [pc, #216]	; (801afac <OSPI_NOR_STR_MM_Mode+0x204>)
 801aed4:	681b      	ldr	r3, [r3, #0]
 801aed6:	1c5a      	adds	r2, r3, #1
 801aed8:	4934      	ldr	r1, [pc, #208]	; (801afac <OSPI_NOR_STR_MM_Mode+0x204>)
 801aeda:	600a      	str	r2, [r1, #0]
 801aedc:	7819      	ldrb	r1, [r3, #0]
 801aede:	4a35      	ldr	r2, [pc, #212]	; (801afb4 <OSPI_NOR_STR_MM_Mode+0x20c>)
 801aee0:	68fb      	ldr	r3, [r7, #12]
 801aee2:	4413      	add	r3, r2
 801aee4:	460a      	mov	r2, r1
 801aee6:	701a      	strb	r2, [r3, #0]
      for(int k = 0; k < BUFFER_SIZE; k++)
 801aee8:	68fb      	ldr	r3, [r7, #12]
 801aeea:	3301      	adds	r3, #1
 801aeec:	60fb      	str	r3, [r7, #12]
 801aeee:	68fb      	ldr	r3, [r7, #12]
 801aef0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801aef4:	d3ed      	bcc.n	801aed2 <OSPI_NOR_STR_MM_Mode+0x12a>
      }
      if(RMABuffercmp(ospi_aRxBuffer, ospi_aTxBuffer, (uint32_t)BUFFER_SIZE, &Offset) != 0)
 801aef6:	463b      	mov	r3, r7
 801aef8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801aefc:	4925      	ldr	r1, [pc, #148]	; (801af94 <OSPI_NOR_STR_MM_Mode+0x1ec>)
 801aefe:	482d      	ldr	r0, [pc, #180]	; (801afb4 <OSPI_NOR_STR_MM_Mode+0x20c>)
 801af00:	f000 fa1b 	bl	801b33a <RMABuffercmp>
 801af04:	4603      	mov	r3, r0
 801af06:	2b00      	cmp	r3, #0
 801af08:	d002      	beq.n	801af10 <OSPI_NOR_STR_MM_Mode+0x168>
      {
        error_code++;
 801af0a:	693b      	ldr	r3, [r7, #16]
 801af0c:	3301      	adds	r3, #1
 801af0e:	613b      	str	r3, [r7, #16]
    for(i = 0; i < (temp_value/BUFFER_SIZE); i++)
 801af10:	4b22      	ldr	r3, [pc, #136]	; (801af9c <OSPI_NOR_STR_MM_Mode+0x1f4>)
 801af12:	681b      	ldr	r3, [r3, #0]
 801af14:	3301      	adds	r3, #1
 801af16:	4a21      	ldr	r2, [pc, #132]	; (801af9c <OSPI_NOR_STR_MM_Mode+0x1f4>)
 801af18:	6013      	str	r3, [r2, #0]
 801af1a:	687b      	ldr	r3, [r7, #4]
 801af1c:	0b1a      	lsrs	r2, r3, #12
 801af1e:	4b1f      	ldr	r3, [pc, #124]	; (801af9c <OSPI_NOR_STR_MM_Mode+0x1f4>)
 801af20:	681b      	ldr	r3, [r3, #0]
 801af22:	429a      	cmp	r2, r3
 801af24:	d8d2      	bhi.n	801aecc <OSPI_NOR_STR_MM_Mode+0x124>
      }
    }

    BSP_OSPI_NOR_DisableMemoryMappedMode(0);
 801af26:	2000      	movs	r0, #0
 801af28:	f7ea fc90 	bl	800584c <BSP_OSPI_NOR_DisableMemoryMappedMode>

    if(error_code == 0)
 801af2c:	693b      	ldr	r3, [r7, #16]
 801af2e:	2b00      	cmp	r3, #0
 801af30:	d108      	bne.n	801af44 <OSPI_NOR_STR_MM_Mode+0x19c>
    {
      printf("%s Successful\n",(uint8_t*)InterfaceModeText[j]);
 801af32:	4a21      	ldr	r2, [pc, #132]	; (801afb8 <OSPI_NOR_STR_MM_Mode+0x210>)
 801af34:	697b      	ldr	r3, [r7, #20]
 801af36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801af3a:	4619      	mov	r1, r3
 801af3c:	481f      	ldr	r0, [pc, #124]	; (801afbc <OSPI_NOR_STR_MM_Mode+0x214>)
 801af3e:	f002 fc37 	bl	801d7b0 <iprintf>
 801af42:	e009      	b.n	801af58 <OSPI_NOR_STR_MM_Mode+0x1b0>
    }
    else
    {
      printf("ERROR with %s\n",(uint8_t*)InterfaceModeText[j]);
 801af44:	4a1c      	ldr	r2, [pc, #112]	; (801afb8 <OSPI_NOR_STR_MM_Mode+0x210>)
 801af46:	697b      	ldr	r3, [r7, #20]
 801af48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801af4c:	4619      	mov	r1, r3
 801af4e:	481c      	ldr	r0, [pc, #112]	; (801afc0 <OSPI_NOR_STR_MM_Mode+0x218>)
 801af50:	f002 fc2e 	bl	801d7b0 <iprintf>
      error_code = 0;
 801af54:	2300      	movs	r3, #0
 801af56:	613b      	str	r3, [r7, #16]
    }

    /* Clear the buffer for the next test */    
    memset(ospi_aRxBuffer, 0, sizeof(ospi_aRxBuffer));
 801af58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801af5c:	2100      	movs	r1, #0
 801af5e:	4815      	ldr	r0, [pc, #84]	; (801afb4 <OSPI_NOR_STR_MM_Mode+0x20c>)
 801af60:	f002 fcae 	bl	801d8c0 <memset>
    memset(ospi_aTxBuffer, 0, sizeof(ospi_aTxBuffer));   
 801af64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801af68:	2100      	movs	r1, #0
 801af6a:	480a      	ldr	r0, [pc, #40]	; (801af94 <OSPI_NOR_STR_MM_Mode+0x1ec>)
 801af6c:	f002 fca8 	bl	801d8c0 <memset>
  for(j = 0; j < 2; j++)
 801af70:	697b      	ldr	r3, [r7, #20]
 801af72:	3301      	adds	r3, #1
 801af74:	617b      	str	r3, [r7, #20]
 801af76:	697b      	ldr	r3, [r7, #20]
 801af78:	2b01      	cmp	r3, #1
 801af7a:	f67f af3e 	bls.w	801adfa <OSPI_NOR_STR_MM_Mode+0x52>
  }
}
 801af7e:	bf00      	nop
 801af80:	bf00      	nop
 801af82:	3718      	adds	r7, #24
 801af84:	46bd      	mov	sp, r7
 801af86:	bd80      	pop	{r7, pc}
 801af88:	08022374 	.word	0x08022374
 801af8c:	200004e0 	.word	0x200004e0
 801af90:	20033510 	.word	0x20033510
 801af94:	200314ec 	.word	0x200314ec
 801af98:	080222fc 	.word	0x080222fc
 801af9c:	2003351c 	.word	0x2003351c
 801afa0:	08022314 	.word	0x08022314
 801afa4:	08022324 	.word	0x08022324
 801afa8:	08022334 	.word	0x08022334
 801afac:	20033514 	.word	0x20033514
 801afb0:	70070000 	.word	0x70070000
 801afb4:	200324ec 	.word	0x200324ec
 801afb8:	200004e4 	.word	0x200004e4
 801afbc:	08022354 	.word	0x08022354
 801afc0:	08022364 	.word	0x08022364

0801afc4 <OSPI_NOR_DTR_Mode>:

static void OSPI_NOR_DTR_Mode(void)
{
 801afc4:	b580      	push	{r7, lr}
 801afc6:	b086      	sub	sp, #24
 801afc8:	af00      	add	r7, sp, #0
  uint32_t Offset;
  uint32_t block_size = 65536;
 801afca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801afce:	60fb      	str	r3, [r7, #12]
  uint32_t i = 0, temp_value = 4*block_size;
 801afd0:	2300      	movs	r3, #0
 801afd2:	617b      	str	r3, [r7, #20]
 801afd4:	68fb      	ldr	r3, [r7, #12]
 801afd6:	009b      	lsls	r3, r3, #2
 801afd8:	60bb      	str	r3, [r7, #8]
  uint32_t error_code = 0;
 801afda:	2300      	movs	r3, #0
 801afdc:	613b      	str	r3, [r7, #16]

  BSP_OSPI_NOR_DeInit(0);
 801afde:	2000      	movs	r0, #0
 801afe0:	f7ea f8e2 	bl	80051a8 <BSP_OSPI_NOR_DeInit>

  printf("DTR COMPARE:");
 801afe4:	484c      	ldr	r0, [pc, #304]	; (801b118 <OSPI_NOR_DTR_Mode+0x154>)
 801afe6:	f002 fbe3 	bl	801d7b0 <iprintf>

  /* OSPI device configuration */
  Flash.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 801afea:	4b4c      	ldr	r3, [pc, #304]	; (801b11c <OSPI_NOR_DTR_Mode+0x158>)
 801afec:	2201      	movs	r2, #1
 801afee:	701a      	strb	r2, [r3, #0]
  Flash.TransferRate  = BSP_OSPI_NOR_DTR_TRANSFER;
 801aff0:	4b4a      	ldr	r3, [pc, #296]	; (801b11c <OSPI_NOR_DTR_Mode+0x158>)
 801aff2:	2201      	movs	r2, #1
 801aff4:	705a      	strb	r2, [r3, #1]
  BSP_OSPI_NOR_Init(0, &Flash);
 801aff6:	4949      	ldr	r1, [pc, #292]	; (801b11c <OSPI_NOR_DTR_Mode+0x158>)
 801aff8:	2000      	movs	r0, #0
 801affa:	f7ea f82d 	bl	8005058 <BSP_OSPI_NOR_Init>

  /* Fill the buffer for write operation *************************************/
  Fill_Buffer(ospi_aTxBuffer, BUFFER_SIZE, TEST_VALUE_START);
 801affe:	2243      	movs	r2, #67	; 0x43
 801b000:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801b004:	4846      	ldr	r0, [pc, #280]	; (801b120 <OSPI_NOR_DTR_Mode+0x15c>)
 801b006:	f000 f975 	bl	801b2f4 <Fill_Buffer>

  for(i = 0; i < temp_value/block_size; i++)
 801b00a:	2300      	movs	r3, #0
 801b00c:	617b      	str	r3, [r7, #20]
 801b00e:	e01b      	b.n	801b048 <OSPI_NOR_DTR_Mode+0x84>
  {
    if(BSP_OSPI_NOR_Erase_Block(0, i*block_size + OPI_START_ADDRESS, MX25LM51245G_ERASE_64K) != BSP_ERROR_NONE)
 801b010:	697b      	ldr	r3, [r7, #20]
 801b012:	68fa      	ldr	r2, [r7, #12]
 801b014:	fb02 f303 	mul.w	r3, r2, r3
 801b018:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 801b01c:	2201      	movs	r2, #1
 801b01e:	4619      	mov	r1, r3
 801b020:	2000      	movs	r0, #0
 801b022:	f7ea faa7 	bl	8005574 <BSP_OSPI_NOR_Erase_Block>
 801b026:	4603      	mov	r3, r0
 801b028:	2b00      	cmp	r3, #0
 801b02a:	d002      	beq.n	801b032 <OSPI_NOR_DTR_Mode+0x6e>
    {  
      printf("Erase Failed.\n");
 801b02c:	483d      	ldr	r0, [pc, #244]	; (801b124 <OSPI_NOR_DTR_Mode+0x160>)
 801b02e:	f002 fc2d 	bl	801d88c <puts>
    }
    while(BSP_OSPI_NOR_GetStatus(0) == BSP_ERROR_BUSY);
 801b032:	bf00      	nop
 801b034:	2000      	movs	r0, #0
 801b036:	f7ea fb1b 	bl	8005670 <BSP_OSPI_NOR_GetStatus>
 801b03a:	4603      	mov	r3, r0
 801b03c:	f113 0f03 	cmn.w	r3, #3
 801b040:	d0f8      	beq.n	801b034 <OSPI_NOR_DTR_Mode+0x70>
  for(i = 0; i < temp_value/block_size; i++)
 801b042:	697b      	ldr	r3, [r7, #20]
 801b044:	3301      	adds	r3, #1
 801b046:	617b      	str	r3, [r7, #20]
 801b048:	68ba      	ldr	r2, [r7, #8]
 801b04a:	68fb      	ldr	r3, [r7, #12]
 801b04c:	fbb2 f3f3 	udiv	r3, r2, r3
 801b050:	697a      	ldr	r2, [r7, #20]
 801b052:	429a      	cmp	r2, r3
 801b054:	d3dc      	bcc.n	801b010 <OSPI_NOR_DTR_Mode+0x4c>
  }

  for(i = 0; i < (temp_value/BUFFER_SIZE); i++)
 801b056:	2300      	movs	r3, #0
 801b058:	617b      	str	r3, [r7, #20]
 801b05a:	e035      	b.n	801b0c8 <OSPI_NOR_DTR_Mode+0x104>
  {
    if(BSP_OSPI_NOR_Write(0, ospi_aTxBuffer, i*BUFFER_SIZE + OPI_START_ADDRESS, BUFFER_SIZE) != BSP_ERROR_NONE)
 801b05c:	697b      	ldr	r3, [r7, #20]
 801b05e:	3370      	adds	r3, #112	; 0x70
 801b060:	031a      	lsls	r2, r3, #12
 801b062:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801b066:	492e      	ldr	r1, [pc, #184]	; (801b120 <OSPI_NOR_DTR_Mode+0x15c>)
 801b068:	2000      	movs	r0, #0
 801b06a:	f7ea f99d 	bl	80053a8 <BSP_OSPI_NOR_Write>
 801b06e:	4603      	mov	r3, r0
 801b070:	2b00      	cmp	r3, #0
 801b072:	d006      	beq.n	801b082 <OSPI_NOR_DTR_Mode+0xbe>
    {
      printf("WRITE : FAILED.\n");
 801b074:	482c      	ldr	r0, [pc, #176]	; (801b128 <OSPI_NOR_DTR_Mode+0x164>)
 801b076:	f002 fc09 	bl	801d88c <puts>
      printf("Test Aborted.\n");
 801b07a:	482c      	ldr	r0, [pc, #176]	; (801b12c <OSPI_NOR_DTR_Mode+0x168>)
 801b07c:	f002 fc06 	bl	801d88c <puts>
      break;
 801b080:	e027      	b.n	801b0d2 <OSPI_NOR_DTR_Mode+0x10e>
    }
    if(BSP_OSPI_NOR_Read(0, ospi_aRxBuffer, i*BUFFER_SIZE + OPI_START_ADDRESS, BUFFER_SIZE) != BSP_ERROR_NONE)
 801b082:	697b      	ldr	r3, [r7, #20]
 801b084:	3370      	adds	r3, #112	; 0x70
 801b086:	031a      	lsls	r2, r3, #12
 801b088:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801b08c:	4928      	ldr	r1, [pc, #160]	; (801b130 <OSPI_NOR_DTR_Mode+0x16c>)
 801b08e:	2000      	movs	r0, #0
 801b090:	f7ea f934 	bl	80052fc <BSP_OSPI_NOR_Read>
 801b094:	4603      	mov	r3, r0
 801b096:	2b00      	cmp	r3, #0
 801b098:	d006      	beq.n	801b0a8 <OSPI_NOR_DTR_Mode+0xe4>
    {
      printf("Read : FAILED.\n");
 801b09a:	4826      	ldr	r0, [pc, #152]	; (801b134 <OSPI_NOR_DTR_Mode+0x170>)
 801b09c:	f002 fbf6 	bl	801d88c <puts>
      printf("Test Aborted.\n");
 801b0a0:	4822      	ldr	r0, [pc, #136]	; (801b12c <OSPI_NOR_DTR_Mode+0x168>)
 801b0a2:	f002 fbf3 	bl	801d88c <puts>
      break;
 801b0a6:	e014      	b.n	801b0d2 <OSPI_NOR_DTR_Mode+0x10e>
    }
    if(RMABuffercmp(ospi_aRxBuffer, ospi_aTxBuffer, (uint32_t)BUFFER_SIZE, &Offset) != 0)
 801b0a8:	1d3b      	adds	r3, r7, #4
 801b0aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801b0ae:	491c      	ldr	r1, [pc, #112]	; (801b120 <OSPI_NOR_DTR_Mode+0x15c>)
 801b0b0:	481f      	ldr	r0, [pc, #124]	; (801b130 <OSPI_NOR_DTR_Mode+0x16c>)
 801b0b2:	f000 f942 	bl	801b33a <RMABuffercmp>
 801b0b6:	4603      	mov	r3, r0
 801b0b8:	2b00      	cmp	r3, #0
 801b0ba:	d002      	beq.n	801b0c2 <OSPI_NOR_DTR_Mode+0xfe>
    {
      error_code++;
 801b0bc:	693b      	ldr	r3, [r7, #16]
 801b0be:	3301      	adds	r3, #1
 801b0c0:	613b      	str	r3, [r7, #16]
  for(i = 0; i < (temp_value/BUFFER_SIZE); i++)
 801b0c2:	697b      	ldr	r3, [r7, #20]
 801b0c4:	3301      	adds	r3, #1
 801b0c6:	617b      	str	r3, [r7, #20]
 801b0c8:	68bb      	ldr	r3, [r7, #8]
 801b0ca:	0b1b      	lsrs	r3, r3, #12
 801b0cc:	697a      	ldr	r2, [r7, #20]
 801b0ce:	429a      	cmp	r2, r3
 801b0d0:	d3c4      	bcc.n	801b05c <OSPI_NOR_DTR_Mode+0x98>
    }
  }
  if(error_code == 0)
 801b0d2:	693b      	ldr	r3, [r7, #16]
 801b0d4:	2b00      	cmp	r3, #0
 801b0d6:	d106      	bne.n	801b0e6 <OSPI_NOR_DTR_Mode+0x122>
  {
    printf("%s Successful\n",(uint8_t*)InterfaceModeText[1]);
 801b0d8:	4b17      	ldr	r3, [pc, #92]	; (801b138 <OSPI_NOR_DTR_Mode+0x174>)
 801b0da:	685b      	ldr	r3, [r3, #4]
 801b0dc:	4619      	mov	r1, r3
 801b0de:	4817      	ldr	r0, [pc, #92]	; (801b13c <OSPI_NOR_DTR_Mode+0x178>)
 801b0e0:	f002 fb66 	bl	801d7b0 <iprintf>
 801b0e4:	e007      	b.n	801b0f6 <OSPI_NOR_DTR_Mode+0x132>
  }
  else
  {
    printf("ERROR with %s\n",(uint8_t*)InterfaceModeText[1]);
 801b0e6:	4b14      	ldr	r3, [pc, #80]	; (801b138 <OSPI_NOR_DTR_Mode+0x174>)
 801b0e8:	685b      	ldr	r3, [r3, #4]
 801b0ea:	4619      	mov	r1, r3
 801b0ec:	4814      	ldr	r0, [pc, #80]	; (801b140 <OSPI_NOR_DTR_Mode+0x17c>)
 801b0ee:	f002 fb5f 	bl	801d7b0 <iprintf>
    error_code = 0;
 801b0f2:	2300      	movs	r3, #0
 801b0f4:	613b      	str	r3, [r7, #16]
  }
  
  /* Clear the buffer for the next test */    
  memset(ospi_aRxBuffer, 0, sizeof(ospi_aRxBuffer));
 801b0f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801b0fa:	2100      	movs	r1, #0
 801b0fc:	480c      	ldr	r0, [pc, #48]	; (801b130 <OSPI_NOR_DTR_Mode+0x16c>)
 801b0fe:	f002 fbdf 	bl	801d8c0 <memset>
  memset(ospi_aTxBuffer, 0, sizeof(ospi_aTxBuffer));   
 801b102:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801b106:	2100      	movs	r1, #0
 801b108:	4805      	ldr	r0, [pc, #20]	; (801b120 <OSPI_NOR_DTR_Mode+0x15c>)
 801b10a:	f002 fbd9 	bl	801d8c0 <memset>
}
 801b10e:	bf00      	nop
 801b110:	3718      	adds	r7, #24
 801b112:	46bd      	mov	sp, r7
 801b114:	bd80      	pop	{r7, pc}
 801b116:	bf00      	nop
 801b118:	08022384 	.word	0x08022384
 801b11c:	20033510 	.word	0x20033510
 801b120:	200314ec 	.word	0x200314ec
 801b124:	08022314 	.word	0x08022314
 801b128:	08022324 	.word	0x08022324
 801b12c:	08022334 	.word	0x08022334
 801b130:	200324ec 	.word	0x200324ec
 801b134:	08022344 	.word	0x08022344
 801b138:	200004e4 	.word	0x200004e4
 801b13c:	08022354 	.word	0x08022354
 801b140:	08022364 	.word	0x08022364

0801b144 <OSPI_NOR_DTR_MM_Mode>:

static void OSPI_NOR_DTR_MM_Mode(void)
{
 801b144:	b580      	push	{r7, lr}
 801b146:	b086      	sub	sp, #24
 801b148:	af00      	add	r7, sp, #0
  uint32_t Offset;
  uint32_t block_size = 65536;
 801b14a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801b14e:	60bb      	str	r3, [r7, #8]
  uint32_t i = 0, temp_value = 4*block_size;
 801b150:	2300      	movs	r3, #0
 801b152:	617b      	str	r3, [r7, #20]
 801b154:	68bb      	ldr	r3, [r7, #8]
 801b156:	009b      	lsls	r3, r3, #2
 801b158:	607b      	str	r3, [r7, #4]
  uint32_t error_code = 0;
 801b15a:	2300      	movs	r3, #0
 801b15c:	613b      	str	r3, [r7, #16]

  BSP_OSPI_NOR_DeInit(0);
 801b15e:	2000      	movs	r0, #0
 801b160:	f7ea f822 	bl	80051a8 <BSP_OSPI_NOR_DeInit>

  printf("MM DTR COMPARE:");
 801b164:	4857      	ldr	r0, [pc, #348]	; (801b2c4 <OSPI_NOR_DTR_MM_Mode+0x180>)
 801b166:	f002 fb23 	bl	801d7b0 <iprintf>

  /* OSPI device configuration */
  Flash.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 801b16a:	4b57      	ldr	r3, [pc, #348]	; (801b2c8 <OSPI_NOR_DTR_MM_Mode+0x184>)
 801b16c:	2201      	movs	r2, #1
 801b16e:	701a      	strb	r2, [r3, #0]
  Flash.TransferRate  = BSP_OSPI_NOR_DTR_TRANSFER; 
 801b170:	4b55      	ldr	r3, [pc, #340]	; (801b2c8 <OSPI_NOR_DTR_MM_Mode+0x184>)
 801b172:	2201      	movs	r2, #1
 801b174:	705a      	strb	r2, [r3, #1]
  BSP_OSPI_NOR_Init(0, &Flash);
 801b176:	4954      	ldr	r1, [pc, #336]	; (801b2c8 <OSPI_NOR_DTR_MM_Mode+0x184>)
 801b178:	2000      	movs	r0, #0
 801b17a:	f7e9 ff6d 	bl	8005058 <BSP_OSPI_NOR_Init>

  /* Fill the buffer for write operation *************************************/
  Fill_Buffer(ospi_aTxBuffer, BUFFER_SIZE, TEST_VALUE_START);
 801b17e:	2243      	movs	r2, #67	; 0x43
 801b180:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801b184:	4851      	ldr	r0, [pc, #324]	; (801b2cc <OSPI_NOR_DTR_MM_Mode+0x188>)
 801b186:	f000 f8b5 	bl	801b2f4 <Fill_Buffer>

  for(i = 0; i < temp_value/block_size; i++)
 801b18a:	2300      	movs	r3, #0
 801b18c:	617b      	str	r3, [r7, #20]
 801b18e:	e01b      	b.n	801b1c8 <OSPI_NOR_DTR_MM_Mode+0x84>
  {
    if(BSP_OSPI_NOR_Erase_Block(0, i*block_size + OPI_START_ADDRESS, MX25LM51245G_ERASE_64K) != BSP_ERROR_NONE)
 801b190:	697b      	ldr	r3, [r7, #20]
 801b192:	68ba      	ldr	r2, [r7, #8]
 801b194:	fb02 f303 	mul.w	r3, r2, r3
 801b198:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 801b19c:	2201      	movs	r2, #1
 801b19e:	4619      	mov	r1, r3
 801b1a0:	2000      	movs	r0, #0
 801b1a2:	f7ea f9e7 	bl	8005574 <BSP_OSPI_NOR_Erase_Block>
 801b1a6:	4603      	mov	r3, r0
 801b1a8:	2b00      	cmp	r3, #0
 801b1aa:	d002      	beq.n	801b1b2 <OSPI_NOR_DTR_MM_Mode+0x6e>
    {
      printf("Erase Failed.\n");
 801b1ac:	4848      	ldr	r0, [pc, #288]	; (801b2d0 <OSPI_NOR_DTR_MM_Mode+0x18c>)
 801b1ae:	f002 fb6d 	bl	801d88c <puts>
    }
    while(BSP_OSPI_NOR_GetStatus(0) == BSP_ERROR_BUSY);
 801b1b2:	bf00      	nop
 801b1b4:	2000      	movs	r0, #0
 801b1b6:	f7ea fa5b 	bl	8005670 <BSP_OSPI_NOR_GetStatus>
 801b1ba:	4603      	mov	r3, r0
 801b1bc:	f113 0f03 	cmn.w	r3, #3
 801b1c0:	d0f8      	beq.n	801b1b4 <OSPI_NOR_DTR_MM_Mode+0x70>
  for(i = 0; i < temp_value/block_size; i++)
 801b1c2:	697b      	ldr	r3, [r7, #20]
 801b1c4:	3301      	adds	r3, #1
 801b1c6:	617b      	str	r3, [r7, #20]
 801b1c8:	687a      	ldr	r2, [r7, #4]
 801b1ca:	68bb      	ldr	r3, [r7, #8]
 801b1cc:	fbb2 f3f3 	udiv	r3, r2, r3
 801b1d0:	697a      	ldr	r2, [r7, #20]
 801b1d2:	429a      	cmp	r2, r3
 801b1d4:	d3dc      	bcc.n	801b190 <OSPI_NOR_DTR_MM_Mode+0x4c>
  }

  for(i = 0; i < (temp_value/BUFFER_SIZE); i++)
 801b1d6:	2300      	movs	r3, #0
 801b1d8:	617b      	str	r3, [r7, #20]
 801b1da:	e015      	b.n	801b208 <OSPI_NOR_DTR_MM_Mode+0xc4>
  {
    if(BSP_OSPI_NOR_Write(0, ospi_aTxBuffer, i*BUFFER_SIZE + OPI_START_ADDRESS, BUFFER_SIZE) != BSP_ERROR_NONE)
 801b1dc:	697b      	ldr	r3, [r7, #20]
 801b1de:	3370      	adds	r3, #112	; 0x70
 801b1e0:	031a      	lsls	r2, r3, #12
 801b1e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801b1e6:	4939      	ldr	r1, [pc, #228]	; (801b2cc <OSPI_NOR_DTR_MM_Mode+0x188>)
 801b1e8:	2000      	movs	r0, #0
 801b1ea:	f7ea f8dd 	bl	80053a8 <BSP_OSPI_NOR_Write>
 801b1ee:	4603      	mov	r3, r0
 801b1f0:	2b00      	cmp	r3, #0
 801b1f2:	d006      	beq.n	801b202 <OSPI_NOR_DTR_MM_Mode+0xbe>
    {
      printf("WRITE : FAILED.\n");
 801b1f4:	4837      	ldr	r0, [pc, #220]	; (801b2d4 <OSPI_NOR_DTR_MM_Mode+0x190>)
 801b1f6:	f002 fb49 	bl	801d88c <puts>
      printf("Test Aborted.\n");
 801b1fa:	4837      	ldr	r0, [pc, #220]	; (801b2d8 <OSPI_NOR_DTR_MM_Mode+0x194>)
 801b1fc:	f002 fb46 	bl	801d88c <puts>
      break;
 801b200:	e007      	b.n	801b212 <OSPI_NOR_DTR_MM_Mode+0xce>
  for(i = 0; i < (temp_value/BUFFER_SIZE); i++)
 801b202:	697b      	ldr	r3, [r7, #20]
 801b204:	3301      	adds	r3, #1
 801b206:	617b      	str	r3, [r7, #20]
 801b208:	687b      	ldr	r3, [r7, #4]
 801b20a:	0b1b      	lsrs	r3, r3, #12
 801b20c:	697a      	ldr	r2, [r7, #20]
 801b20e:	429a      	cmp	r2, r3
 801b210:	d3e4      	bcc.n	801b1dc <OSPI_NOR_DTR_MM_Mode+0x98>
    }
  }
    BSP_OSPI_NOR_EnableMemoryMappedMode(0);
 801b212:	2000      	movs	r0, #0
 801b214:	f7ea fab8 	bl	8005788 <BSP_OSPI_NOR_EnableMemoryMappedMode>

    OSPI_MMP_pointer = (uint8_t*)(0x70000000 + OPI_START_ADDRESS);
 801b218:	4b30      	ldr	r3, [pc, #192]	; (801b2dc <OSPI_NOR_DTR_MM_Mode+0x198>)
 801b21a:	4a31      	ldr	r2, [pc, #196]	; (801b2e0 <OSPI_NOR_DTR_MM_Mode+0x19c>)
 801b21c:	601a      	str	r2, [r3, #0]
    for(i = 0; i < (temp_value/BUFFER_SIZE); i++)
 801b21e:	2300      	movs	r3, #0
 801b220:	617b      	str	r3, [r7, #20]
 801b222:	e024      	b.n	801b26e <OSPI_NOR_DTR_MM_Mode+0x12a>
    {
      for(int k = 0; k < BUFFER_SIZE; k++)
 801b224:	2300      	movs	r3, #0
 801b226:	60fb      	str	r3, [r7, #12]
 801b228:	e00d      	b.n	801b246 <OSPI_NOR_DTR_MM_Mode+0x102>
      {
        ospi_aRxBuffer[k] = *(OSPI_MMP_pointer++);
 801b22a:	4b2c      	ldr	r3, [pc, #176]	; (801b2dc <OSPI_NOR_DTR_MM_Mode+0x198>)
 801b22c:	681b      	ldr	r3, [r3, #0]
 801b22e:	1c5a      	adds	r2, r3, #1
 801b230:	492a      	ldr	r1, [pc, #168]	; (801b2dc <OSPI_NOR_DTR_MM_Mode+0x198>)
 801b232:	600a      	str	r2, [r1, #0]
 801b234:	7819      	ldrb	r1, [r3, #0]
 801b236:	4a2b      	ldr	r2, [pc, #172]	; (801b2e4 <OSPI_NOR_DTR_MM_Mode+0x1a0>)
 801b238:	68fb      	ldr	r3, [r7, #12]
 801b23a:	4413      	add	r3, r2
 801b23c:	460a      	mov	r2, r1
 801b23e:	701a      	strb	r2, [r3, #0]
      for(int k = 0; k < BUFFER_SIZE; k++)
 801b240:	68fb      	ldr	r3, [r7, #12]
 801b242:	3301      	adds	r3, #1
 801b244:	60fb      	str	r3, [r7, #12]
 801b246:	68fb      	ldr	r3, [r7, #12]
 801b248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b24c:	d3ed      	bcc.n	801b22a <OSPI_NOR_DTR_MM_Mode+0xe6>
      }
      if(RMABuffercmp(ospi_aRxBuffer, ospi_aTxBuffer, (uint32_t)BUFFER_SIZE, &Offset) != 0)
 801b24e:	463b      	mov	r3, r7
 801b250:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801b254:	491d      	ldr	r1, [pc, #116]	; (801b2cc <OSPI_NOR_DTR_MM_Mode+0x188>)
 801b256:	4823      	ldr	r0, [pc, #140]	; (801b2e4 <OSPI_NOR_DTR_MM_Mode+0x1a0>)
 801b258:	f000 f86f 	bl	801b33a <RMABuffercmp>
 801b25c:	4603      	mov	r3, r0
 801b25e:	2b00      	cmp	r3, #0
 801b260:	d002      	beq.n	801b268 <OSPI_NOR_DTR_MM_Mode+0x124>
      {
        error_code++;
 801b262:	693b      	ldr	r3, [r7, #16]
 801b264:	3301      	adds	r3, #1
 801b266:	613b      	str	r3, [r7, #16]
    for(i = 0; i < (temp_value/BUFFER_SIZE); i++)
 801b268:	697b      	ldr	r3, [r7, #20]
 801b26a:	3301      	adds	r3, #1
 801b26c:	617b      	str	r3, [r7, #20]
 801b26e:	687b      	ldr	r3, [r7, #4]
 801b270:	0b1b      	lsrs	r3, r3, #12
 801b272:	697a      	ldr	r2, [r7, #20]
 801b274:	429a      	cmp	r2, r3
 801b276:	d3d5      	bcc.n	801b224 <OSPI_NOR_DTR_MM_Mode+0xe0>
      }
    }

  BSP_OSPI_NOR_DisableMemoryMappedMode(0);
 801b278:	2000      	movs	r0, #0
 801b27a:	f7ea fae7 	bl	800584c <BSP_OSPI_NOR_DisableMemoryMappedMode>
  
  if(error_code == 0)
 801b27e:	693b      	ldr	r3, [r7, #16]
 801b280:	2b00      	cmp	r3, #0
 801b282:	d106      	bne.n	801b292 <OSPI_NOR_DTR_MM_Mode+0x14e>
  {
    printf("%s Successful\n",(uint8_t*)InterfaceModeText[1]);
 801b284:	4b18      	ldr	r3, [pc, #96]	; (801b2e8 <OSPI_NOR_DTR_MM_Mode+0x1a4>)
 801b286:	685b      	ldr	r3, [r3, #4]
 801b288:	4619      	mov	r1, r3
 801b28a:	4818      	ldr	r0, [pc, #96]	; (801b2ec <OSPI_NOR_DTR_MM_Mode+0x1a8>)
 801b28c:	f002 fa90 	bl	801d7b0 <iprintf>
 801b290:	e007      	b.n	801b2a2 <OSPI_NOR_DTR_MM_Mode+0x15e>
  }
  else
  {
    printf("ERROR with %s\n",(uint8_t*)InterfaceModeText[1]);
 801b292:	4b15      	ldr	r3, [pc, #84]	; (801b2e8 <OSPI_NOR_DTR_MM_Mode+0x1a4>)
 801b294:	685b      	ldr	r3, [r3, #4]
 801b296:	4619      	mov	r1, r3
 801b298:	4815      	ldr	r0, [pc, #84]	; (801b2f0 <OSPI_NOR_DTR_MM_Mode+0x1ac>)
 801b29a:	f002 fa89 	bl	801d7b0 <iprintf>
    error_code = 0;
 801b29e:	2300      	movs	r3, #0
 801b2a0:	613b      	str	r3, [r7, #16]
  }

  /* Clear the buffer for the next test */    
  memset(ospi_aRxBuffer, 0, sizeof(ospi_aRxBuffer));
 801b2a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801b2a6:	2100      	movs	r1, #0
 801b2a8:	480e      	ldr	r0, [pc, #56]	; (801b2e4 <OSPI_NOR_DTR_MM_Mode+0x1a0>)
 801b2aa:	f002 fb09 	bl	801d8c0 <memset>
  memset(ospi_aTxBuffer, 0, sizeof(ospi_aTxBuffer));   
 801b2ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801b2b2:	2100      	movs	r1, #0
 801b2b4:	4805      	ldr	r0, [pc, #20]	; (801b2cc <OSPI_NOR_DTR_MM_Mode+0x188>)
 801b2b6:	f002 fb03 	bl	801d8c0 <memset>
}
 801b2ba:	bf00      	nop
 801b2bc:	3718      	adds	r7, #24
 801b2be:	46bd      	mov	sp, r7
 801b2c0:	bd80      	pop	{r7, pc}
 801b2c2:	bf00      	nop
 801b2c4:	08022394 	.word	0x08022394
 801b2c8:	20033510 	.word	0x20033510
 801b2cc:	200314ec 	.word	0x200314ec
 801b2d0:	08022314 	.word	0x08022314
 801b2d4:	08022324 	.word	0x08022324
 801b2d8:	08022334 	.word	0x08022334
 801b2dc:	20033514 	.word	0x20033514
 801b2e0:	70070000 	.word	0x70070000
 801b2e4:	200324ec 	.word	0x200324ec
 801b2e8:	200004e4 	.word	0x200004e4
 801b2ec:	08022354 	.word	0x08022354
 801b2f0:	08022364 	.word	0x08022364

0801b2f4 <Fill_Buffer>:
* @param  uwBufferLenght: size of the buffer to fill
* @param  uwOffset: first value to fill on the buffer
* @retval None
*/
static void Fill_Buffer(uint8_t *pBuffer, uint32_t uwBufferLenght, uint32_t uwOffset)
{
 801b2f4:	b480      	push	{r7}
 801b2f6:	b087      	sub	sp, #28
 801b2f8:	af00      	add	r7, sp, #0
 801b2fa:	60f8      	str	r0, [r7, #12]
 801b2fc:	60b9      	str	r1, [r7, #8]
 801b2fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpIndex = 0;
 801b300:	2300      	movs	r3, #0
 801b302:	617b      	str	r3, [r7, #20]

  /* Put in global buffer different values */
  for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
 801b304:	2300      	movs	r3, #0
 801b306:	617b      	str	r3, [r7, #20]
 801b308:	e00c      	b.n	801b324 <Fill_Buffer+0x30>
  {
    pBuffer[tmpIndex] = tmpIndex + uwOffset;
 801b30a:	697b      	ldr	r3, [r7, #20]
 801b30c:	b2d9      	uxtb	r1, r3
 801b30e:	687b      	ldr	r3, [r7, #4]
 801b310:	b2da      	uxtb	r2, r3
 801b312:	68f8      	ldr	r0, [r7, #12]
 801b314:	697b      	ldr	r3, [r7, #20]
 801b316:	4403      	add	r3, r0
 801b318:	440a      	add	r2, r1
 801b31a:	b2d2      	uxtb	r2, r2
 801b31c:	701a      	strb	r2, [r3, #0]
  for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
 801b31e:	697b      	ldr	r3, [r7, #20]
 801b320:	3301      	adds	r3, #1
 801b322:	617b      	str	r3, [r7, #20]
 801b324:	697a      	ldr	r2, [r7, #20]
 801b326:	68bb      	ldr	r3, [r7, #8]
 801b328:	429a      	cmp	r2, r3
 801b32a:	d3ee      	bcc.n	801b30a <Fill_Buffer+0x16>
  }
}
 801b32c:	bf00      	nop
 801b32e:	bf00      	nop
 801b330:	371c      	adds	r7, #28
 801b332:	46bd      	mov	sp, r7
 801b334:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b338:	4770      	bx	lr

0801b33a <RMABuffercmp>:
*         ErrorAd: Difference address
* @retval 0: pBuffer identical to pBuffer1
*         1: pBuffer differs from pBuffer1
*/
static uint8_t RMABuffercmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint32_t BufferLength, uint32_t *ErrorAd)
{
 801b33a:	b480      	push	{r7}
 801b33c:	b085      	sub	sp, #20
 801b33e:	af00      	add	r7, sp, #0
 801b340:	60f8      	str	r0, [r7, #12]
 801b342:	60b9      	str	r1, [r7, #8]
 801b344:	607a      	str	r2, [r7, #4]
 801b346:	603b      	str	r3, [r7, #0]
  (*ErrorAd) = 0;
 801b348:	683b      	ldr	r3, [r7, #0]
 801b34a:	2200      	movs	r2, #0
 801b34c:	601a      	str	r2, [r3, #0]

  while (BufferLength--)
 801b34e:	e012      	b.n	801b376 <RMABuffercmp+0x3c>
  {
    if (*pBuffer1 != *pBuffer2)
 801b350:	68fb      	ldr	r3, [r7, #12]
 801b352:	781a      	ldrb	r2, [r3, #0]
 801b354:	68bb      	ldr	r3, [r7, #8]
 801b356:	781b      	ldrb	r3, [r3, #0]
 801b358:	429a      	cmp	r2, r3
 801b35a:	d001      	beq.n	801b360 <RMABuffercmp+0x26>
    {
      return 1;
 801b35c:	2301      	movs	r3, #1
 801b35e:	e010      	b.n	801b382 <RMABuffercmp+0x48>
    }

    (*ErrorAd)++;
 801b360:	683b      	ldr	r3, [r7, #0]
 801b362:	681b      	ldr	r3, [r3, #0]
 801b364:	1c5a      	adds	r2, r3, #1
 801b366:	683b      	ldr	r3, [r7, #0]
 801b368:	601a      	str	r2, [r3, #0]
    pBuffer1++;
 801b36a:	68fb      	ldr	r3, [r7, #12]
 801b36c:	3301      	adds	r3, #1
 801b36e:	60fb      	str	r3, [r7, #12]
    pBuffer2++;
 801b370:	68bb      	ldr	r3, [r7, #8]
 801b372:	3301      	adds	r3, #1
 801b374:	60bb      	str	r3, [r7, #8]
  while (BufferLength--)
 801b376:	687b      	ldr	r3, [r7, #4]
 801b378:	1e5a      	subs	r2, r3, #1
 801b37a:	607a      	str	r2, [r7, #4]
 801b37c:	2b00      	cmp	r3, #0
 801b37e:	d1e7      	bne.n	801b350 <RMABuffercmp+0x16>
  }

  return 0;
 801b380:	2300      	movs	r3, #0
}
 801b382:	4618      	mov	r0, r3
 801b384:	3714      	adds	r7, #20
 801b386:	46bd      	mov	sp, r7
 801b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b38c:	4770      	bx	lr
	...

0801b390 <OSPI_RAM_demo>:
* @brief  OSPI Demo
* @param  None
* @retval None
*/
int32_t OSPI_RAM_demo(void)
{
 801b390:	b580      	push	{r7, lr}
 801b392:	af00      	add	r7, sp, #0
  printf("\n******OSPI RAM EXAMPLE******\n");
 801b394:	4804      	ldr	r0, [pc, #16]	; (801b3a8 <OSPI_RAM_demo+0x18>)
 801b396:	f002 fa79 	bl	801d88c <puts>

  /* OSPI Read/Write operation *************************************/
  OSPI_RAM_ReadWrite();
 801b39a:	f000 f807 	bl	801b3ac <OSPI_RAM_ReadWrite>

  /* OSPI Memory Mapped *************************************/
  OSPI_RAM_MemoryMapped();
 801b39e:	f000 f897 	bl	801b4d0 <OSPI_RAM_MemoryMapped>

  return 0;
 801b3a2:	2300      	movs	r3, #0
}
 801b3a4:	4618      	mov	r0, r3
 801b3a6:	bd80      	pop	{r7, pc}
 801b3a8:	080223a4 	.word	0x080223a4

0801b3ac <OSPI_RAM_ReadWrite>:
* @brief  OSPI RAM Read/Write
* @param  None
* @retval None
*/
void OSPI_RAM_ReadWrite(void)
{
 801b3ac:	b580      	push	{r7, lr}
 801b3ae:	b084      	sub	sp, #16
 801b3b0:	af00      	add	r7, sp, #0
  uint32_t Offset;
  uint32_t error_code = 0;
 801b3b2:	2300      	movs	r3, #0
 801b3b4:	60fb      	str	r3, [r7, #12]
  uint8_t Id;

  printf("OSPI_RAM_ReadWrite.\n");
 801b3b6:	483c      	ldr	r0, [pc, #240]	; (801b4a8 <OSPI_RAM_ReadWrite+0xfc>)
 801b3b8:	f002 fa68 	bl	801d88c <puts>

  /* Fill the buffer for write operation *************************************/
  Fill_Buffer(ospir_ram_aTxBuffer, BUFFER_SIZE, TEST_VALUE_START);
 801b3bc:	2241      	movs	r2, #65	; 0x41
 801b3be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801b3c2:	483a      	ldr	r0, [pc, #232]	; (801b4ac <OSPI_RAM_ReadWrite+0x100>)
 801b3c4:	f000 f8fc 	bl	801b5c0 <Fill_Buffer>
  
  /* OSPI device configuration */
  if(BSP_OSPI_RAM_Init(0) != BSP_ERROR_NONE)
 801b3c8:	2000      	movs	r0, #0
 801b3ca:	f7ea fb07 	bl	80059dc <BSP_OSPI_RAM_Init>
 801b3ce:	4603      	mov	r3, r0
 801b3d0:	2b00      	cmp	r3, #0
 801b3d2:	d004      	beq.n	801b3de <OSPI_RAM_ReadWrite+0x32>
  {
    printf("Deinitialization failed Failed\n");
 801b3d4:	4836      	ldr	r0, [pc, #216]	; (801b4b0 <OSPI_RAM_ReadWrite+0x104>)
 801b3d6:	f002 fa59 	bl	801d88c <puts>
    Error_Handler();
 801b3da:	f7fe ffd5 	bl	801a388 <Error_Handler>
  }
 
  BSP_OSPI_RAM_ReadID(0, &Id);
 801b3de:	1dfb      	adds	r3, r7, #7
 801b3e0:	4619      	mov	r1, r3
 801b3e2:	2000      	movs	r0, #0
 801b3e4:	f7ea fcb6 	bl	8005d54 <BSP_OSPI_RAM_ReadID>

  if(BSP_OSPI_RAM_Write(0, ospir_ram_aTxBuffer, OSPI_RAM_START_ADDRESS, BUFFER_SIZE) != BSP_ERROR_NONE)
 801b3e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801b3ec:	2200      	movs	r2, #0
 801b3ee:	492f      	ldr	r1, [pc, #188]	; (801b4ac <OSPI_RAM_ReadWrite+0x100>)
 801b3f0:	2000      	movs	r0, #0
 801b3f2:	f7ea fc21 	bl	8005c38 <BSP_OSPI_RAM_Write>
 801b3f6:	4603      	mov	r3, r0
 801b3f8:	2b00      	cmp	r3, #0
 801b3fa:	d008      	beq.n	801b40e <OSPI_RAM_ReadWrite+0x62>
  {
    printf("Write : FAILED.\n");
 801b3fc:	482d      	ldr	r0, [pc, #180]	; (801b4b4 <OSPI_RAM_ReadWrite+0x108>)
 801b3fe:	f002 fa45 	bl	801d88c <puts>
    printf("Test Aborted.\n");
 801b402:	482d      	ldr	r0, [pc, #180]	; (801b4b8 <OSPI_RAM_ReadWrite+0x10c>)
 801b404:	f002 fa42 	bl	801d88c <puts>
    error_code++;
 801b408:	68fb      	ldr	r3, [r7, #12]
 801b40a:	3301      	adds	r3, #1
 801b40c:	60fb      	str	r3, [r7, #12]
  }
  
  if(BSP_OSPI_RAM_Read(0, ospir_ram_aRxBuffer, OSPI_RAM_START_ADDRESS, BUFFER_SIZE) != BSP_ERROR_NONE)
 801b40e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801b412:	2200      	movs	r2, #0
 801b414:	4929      	ldr	r1, [pc, #164]	; (801b4bc <OSPI_RAM_ReadWrite+0x110>)
 801b416:	2000      	movs	r0, #0
 801b418:	f7ea fbe6 	bl	8005be8 <BSP_OSPI_RAM_Read>
 801b41c:	4603      	mov	r3, r0
 801b41e:	2b00      	cmp	r3, #0
 801b420:	d008      	beq.n	801b434 <OSPI_RAM_ReadWrite+0x88>
  {
    printf("Read : FAILED.\n");
 801b422:	4827      	ldr	r0, [pc, #156]	; (801b4c0 <OSPI_RAM_ReadWrite+0x114>)
 801b424:	f002 fa32 	bl	801d88c <puts>
    printf("Test Aborted.\n");
 801b428:	4823      	ldr	r0, [pc, #140]	; (801b4b8 <OSPI_RAM_ReadWrite+0x10c>)
 801b42a:	f002 fa2f 	bl	801d88c <puts>
    error_code++;
 801b42e:	68fb      	ldr	r3, [r7, #12]
 801b430:	3301      	adds	r3, #1
 801b432:	60fb      	str	r3, [r7, #12]
  }

  if(RMABuffercmp(ospir_ram_aRxBuffer, ospir_ram_aTxBuffer, (uint32_t)BUFFER_SIZE, &Offset) != 0)
 801b434:	f107 0308 	add.w	r3, r7, #8
 801b438:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801b43c:	491b      	ldr	r1, [pc, #108]	; (801b4ac <OSPI_RAM_ReadWrite+0x100>)
 801b43e:	481f      	ldr	r0, [pc, #124]	; (801b4bc <OSPI_RAM_ReadWrite+0x110>)
 801b440:	f000 f8e1 	bl	801b606 <RMABuffercmp>
 801b444:	4603      	mov	r3, r0
 801b446:	2b00      	cmp	r3, #0
 801b448:	d008      	beq.n	801b45c <OSPI_RAM_ReadWrite+0xb0>
  {
    printf("Comparison : FAILED.\n");
 801b44a:	481e      	ldr	r0, [pc, #120]	; (801b4c4 <OSPI_RAM_ReadWrite+0x118>)
 801b44c:	f002 fa1e 	bl	801d88c <puts>
    printf("Test Aborted.\n");
 801b450:	4819      	ldr	r0, [pc, #100]	; (801b4b8 <OSPI_RAM_ReadWrite+0x10c>)
 801b452:	f002 fa1b 	bl	801d88c <puts>
    error_code++;
 801b456:	68fb      	ldr	r3, [r7, #12]
 801b458:	3301      	adds	r3, #1
 801b45a:	60fb      	str	r3, [r7, #12]
  }

  if (error_code == 0)
 801b45c:	68fb      	ldr	r3, [r7, #12]
 801b45e:	2b00      	cmp	r3, #0
 801b460:	d103      	bne.n	801b46a <OSPI_RAM_ReadWrite+0xbe>
  {
    printf("OSPI_RAM_ReadWrite Successful\n");
 801b462:	4819      	ldr	r0, [pc, #100]	; (801b4c8 <OSPI_RAM_ReadWrite+0x11c>)
 801b464:	f002 fa12 	bl	801d88c <puts>
 801b468:	e002      	b.n	801b470 <OSPI_RAM_ReadWrite+0xc4>
  }
  else
  {
    printf("OSPI_RAM_ReadWrite Failed\n");
 801b46a:	4818      	ldr	r0, [pc, #96]	; (801b4cc <OSPI_RAM_ReadWrite+0x120>)
 801b46c:	f002 fa0e 	bl	801d88c <puts>
  }

  /* Clear the buffer for the next test */    
  memset(ospir_ram_aRxBuffer, 0, sizeof(ospir_ram_aRxBuffer));
 801b470:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801b474:	2100      	movs	r1, #0
 801b476:	4811      	ldr	r0, [pc, #68]	; (801b4bc <OSPI_RAM_ReadWrite+0x110>)
 801b478:	f002 fa22 	bl	801d8c0 <memset>
  memset(ospir_ram_aTxBuffer, 0, sizeof(ospir_ram_aTxBuffer));   
 801b47c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801b480:	2100      	movs	r1, #0
 801b482:	480a      	ldr	r0, [pc, #40]	; (801b4ac <OSPI_RAM_ReadWrite+0x100>)
 801b484:	f002 fa1c 	bl	801d8c0 <memset>
  
  /* OSPI device configuration */
  if(BSP_OSPI_RAM_DeInit(0) != BSP_ERROR_NONE)
 801b488:	2000      	movs	r0, #0
 801b48a:	f7ea fb1d 	bl	8005ac8 <BSP_OSPI_RAM_DeInit>
 801b48e:	4603      	mov	r3, r0
 801b490:	2b00      	cmp	r3, #0
 801b492:	d004      	beq.n	801b49e <OSPI_RAM_ReadWrite+0xf2>
  {
    printf("Deinitialization failed Failed\n");
 801b494:	4806      	ldr	r0, [pc, #24]	; (801b4b0 <OSPI_RAM_ReadWrite+0x104>)
 801b496:	f002 f9f9 	bl	801d88c <puts>
    Error_Handler();
 801b49a:	f7fe ff75 	bl	801a388 <Error_Handler>
  }
}
 801b49e:	bf00      	nop
 801b4a0:	3710      	adds	r7, #16
 801b4a2:	46bd      	mov	sp, r7
 801b4a4:	bd80      	pop	{r7, pc}
 801b4a6:	bf00      	nop
 801b4a8:	080223c4 	.word	0x080223c4
 801b4ac:	20033520 	.word	0x20033520
 801b4b0:	080223d8 	.word	0x080223d8
 801b4b4:	080223f8 	.word	0x080223f8
 801b4b8:	08022408 	.word	0x08022408
 801b4bc:	20034520 	.word	0x20034520
 801b4c0:	08022418 	.word	0x08022418
 801b4c4:	08022428 	.word	0x08022428
 801b4c8:	08022440 	.word	0x08022440
 801b4cc:	08022460 	.word	0x08022460

0801b4d0 <OSPI_RAM_MemoryMapped>:
* @brief  OSPI RAM Read/Write
* @param  None
* @retval None
*/
void OSPI_RAM_MemoryMapped(void)
{
 801b4d0:	b580      	push	{r7, lr}
 801b4d2:	b084      	sub	sp, #16
 801b4d4:	af00      	add	r7, sp, #0
  uint32_t error_code = 0;
 801b4d6:	2300      	movs	r3, #0
 801b4d8:	60fb      	str	r3, [r7, #12]
  uint16_t index;
  uint8_t *mem_addr;
  uint8_t temp;

  printf("OSPI_RAM_MemoryMapped.\n");
 801b4da:	4832      	ldr	r0, [pc, #200]	; (801b5a4 <OSPI_RAM_MemoryMapped+0xd4>)
 801b4dc:	f002 f9d6 	bl	801d88c <puts>

  /* OSPI device configuration */
  if(BSP_OSPI_RAM_Init(0) != BSP_ERROR_NONE)
 801b4e0:	2000      	movs	r0, #0
 801b4e2:	f7ea fa7b 	bl	80059dc <BSP_OSPI_RAM_Init>
 801b4e6:	4603      	mov	r3, r0
 801b4e8:	2b00      	cmp	r3, #0
 801b4ea:	d004      	beq.n	801b4f6 <OSPI_RAM_MemoryMapped+0x26>
  {
    printf("Deinitialization failed Failed\n");
 801b4ec:	482e      	ldr	r0, [pc, #184]	; (801b5a8 <OSPI_RAM_MemoryMapped+0xd8>)
 801b4ee:	f002 f9cd 	bl	801d88c <puts>
    Error_Handler();
 801b4f2:	f7fe ff49 	bl	801a388 <Error_Handler>
  }
 
  if(BSP_OSPI_RAM_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 801b4f6:	2000      	movs	r0, #0
 801b4f8:	f7ea fbc6 	bl	8005c88 <BSP_OSPI_RAM_EnableMemoryMappedMode>
 801b4fc:	4603      	mov	r3, r0
 801b4fe:	2b00      	cmp	r3, #0
 801b500:	d008      	beq.n	801b514 <OSPI_RAM_MemoryMapped+0x44>
  {
    printf("EnableMemoryMappedMode : FAILED.\n");
 801b502:	482a      	ldr	r0, [pc, #168]	; (801b5ac <OSPI_RAM_MemoryMapped+0xdc>)
 801b504:	f002 f9c2 	bl	801d88c <puts>
    printf("Test Aborted.\n");
 801b508:	4829      	ldr	r0, [pc, #164]	; (801b5b0 <OSPI_RAM_MemoryMapped+0xe0>)
 801b50a:	f002 f9bf 	bl	801d88c <puts>
    error_code++;
 801b50e:	68fb      	ldr	r3, [r7, #12]
 801b510:	3301      	adds	r3, #1
 801b512:	60fb      	str	r3, [r7, #12]
  }
  
  if(error_code == 0)
 801b514:	68fb      	ldr	r3, [r7, #12]
 801b516:	2b00      	cmp	r3, #0
 801b518:	d134      	bne.n	801b584 <OSPI_RAM_MemoryMapped+0xb4>
  {
    /* Writing Sequence ----------------------------------------------- */
    mem_addr = (uint8_t *)(OCTOSPI1_BASE);
 801b51a:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 801b51e:	607b      	str	r3, [r7, #4]
    for (index = 0; index < 0x100; index++)
 801b520:	2300      	movs	r3, #0
 801b522:	817b      	strh	r3, [r7, #10]
 801b524:	e00a      	b.n	801b53c <OSPI_RAM_MemoryMapped+0x6c>
    {
      *mem_addr = aTxBuffer_ospi[index];
 801b526:	897b      	ldrh	r3, [r7, #10]
 801b528:	4a22      	ldr	r2, [pc, #136]	; (801b5b4 <OSPI_RAM_MemoryMapped+0xe4>)
 801b52a:	5cd2      	ldrb	r2, [r2, r3]
 801b52c:	687b      	ldr	r3, [r7, #4]
 801b52e:	701a      	strb	r2, [r3, #0]
      mem_addr++;
 801b530:	687b      	ldr	r3, [r7, #4]
 801b532:	3301      	adds	r3, #1
 801b534:	607b      	str	r3, [r7, #4]
    for (index = 0; index < 0x100; index++)
 801b536:	897b      	ldrh	r3, [r7, #10]
 801b538:	3301      	adds	r3, #1
 801b53a:	817b      	strh	r3, [r7, #10]
 801b53c:	897b      	ldrh	r3, [r7, #10]
 801b53e:	2bff      	cmp	r3, #255	; 0xff
 801b540:	d9f1      	bls.n	801b526 <OSPI_RAM_MemoryMapped+0x56>
    }
    
    /* In memory-mapped mode, not possible to check if the memory is ready 
    after the programming. So a delay corresponding to max page programming
    time is added */
    HAL_Delay(100);
 801b542:	2064      	movs	r0, #100	; 0x64
 801b544:	f7f6 f8da 	bl	80116fc <HAL_Delay>
    
    /* Reading Sequence ----------------------------------------------- */
    mem_addr = (uint8_t *)(OCTOSPI1_BASE);
 801b548:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 801b54c:	607b      	str	r3, [r7, #4]
    for (index = 0; index < 0x100; index++)
 801b54e:	2300      	movs	r3, #0
 801b550:	817b      	strh	r3, [r7, #10]
 801b552:	e011      	b.n	801b578 <OSPI_RAM_MemoryMapped+0xa8>
    {
      temp = *mem_addr;
 801b554:	687b      	ldr	r3, [r7, #4]
 801b556:	781b      	ldrb	r3, [r3, #0]
 801b558:	70fb      	strb	r3, [r7, #3]
      if (temp != aTxBuffer_ospi[index])
 801b55a:	897b      	ldrh	r3, [r7, #10]
 801b55c:	4a15      	ldr	r2, [pc, #84]	; (801b5b4 <OSPI_RAM_MemoryMapped+0xe4>)
 801b55e:	5cd3      	ldrb	r3, [r2, r3]
 801b560:	78fa      	ldrb	r2, [r7, #3]
 801b562:	429a      	cmp	r2, r3
 801b564:	d002      	beq.n	801b56c <OSPI_RAM_MemoryMapped+0x9c>
      {
        printf("Memory mapped read failed.\n");
 801b566:	4814      	ldr	r0, [pc, #80]	; (801b5b8 <OSPI_RAM_MemoryMapped+0xe8>)
 801b568:	f002 f990 	bl	801d88c <puts>
      }
      mem_addr++;
 801b56c:	687b      	ldr	r3, [r7, #4]
 801b56e:	3301      	adds	r3, #1
 801b570:	607b      	str	r3, [r7, #4]
    for (index = 0; index < 0x100; index++)
 801b572:	897b      	ldrh	r3, [r7, #10]
 801b574:	3301      	adds	r3, #1
 801b576:	817b      	strh	r3, [r7, #10]
 801b578:	897b      	ldrh	r3, [r7, #10]
 801b57a:	2bff      	cmp	r3, #255	; 0xff
 801b57c:	d9ea      	bls.n	801b554 <OSPI_RAM_MemoryMapped+0x84>
    }
    printf("OSPI_RAM_MemoryMapped : Successful\n");
 801b57e:	480f      	ldr	r0, [pc, #60]	; (801b5bc <OSPI_RAM_MemoryMapped+0xec>)
 801b580:	f002 f984 	bl	801d88c <puts>
  }
  
  /* OSPI device configuration */
  if(BSP_OSPI_RAM_DeInit(0) != BSP_ERROR_NONE)
 801b584:	2000      	movs	r0, #0
 801b586:	f7ea fa9f 	bl	8005ac8 <BSP_OSPI_RAM_DeInit>
 801b58a:	4603      	mov	r3, r0
 801b58c:	2b00      	cmp	r3, #0
 801b58e:	d004      	beq.n	801b59a <OSPI_RAM_MemoryMapped+0xca>
  {
    printf("Deinitialization failed Failed\n");
 801b590:	4805      	ldr	r0, [pc, #20]	; (801b5a8 <OSPI_RAM_MemoryMapped+0xd8>)
 801b592:	f002 f97b 	bl	801d88c <puts>
    Error_Handler();
 801b596:	f7fe fef7 	bl	801a388 <Error_Handler>
  }
}
 801b59a:	bf00      	nop
 801b59c:	3710      	adds	r7, #16
 801b59e:	46bd      	mov	sp, r7
 801b5a0:	bd80      	pop	{r7, pc}
 801b5a2:	bf00      	nop
 801b5a4:	0802247c 	.word	0x0802247c
 801b5a8:	080223d8 	.word	0x080223d8
 801b5ac:	08022494 	.word	0x08022494
 801b5b0:	08022408 	.word	0x08022408
 801b5b4:	200004ec 	.word	0x200004ec
 801b5b8:	080224b8 	.word	0x080224b8
 801b5bc:	080224d4 	.word	0x080224d4

0801b5c0 <Fill_Buffer>:
* @param  uwBufferLenght: size of the buffer to fill
* @param  uwOffset: first value to fill on the buffer
* @retval None
*/
static void Fill_Buffer(uint8_t *pBuffer, uint32_t uwBufferLenght, uint32_t uwOffset)
{
 801b5c0:	b480      	push	{r7}
 801b5c2:	b087      	sub	sp, #28
 801b5c4:	af00      	add	r7, sp, #0
 801b5c6:	60f8      	str	r0, [r7, #12]
 801b5c8:	60b9      	str	r1, [r7, #8]
 801b5ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpIndex = 0;
 801b5cc:	2300      	movs	r3, #0
 801b5ce:	617b      	str	r3, [r7, #20]

  /* Put in global buffer different values */
  for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
 801b5d0:	2300      	movs	r3, #0
 801b5d2:	617b      	str	r3, [r7, #20]
 801b5d4:	e00c      	b.n	801b5f0 <Fill_Buffer+0x30>
  {
    pBuffer[tmpIndex] = tmpIndex + uwOffset;
 801b5d6:	697b      	ldr	r3, [r7, #20]
 801b5d8:	b2d9      	uxtb	r1, r3
 801b5da:	687b      	ldr	r3, [r7, #4]
 801b5dc:	b2da      	uxtb	r2, r3
 801b5de:	68f8      	ldr	r0, [r7, #12]
 801b5e0:	697b      	ldr	r3, [r7, #20]
 801b5e2:	4403      	add	r3, r0
 801b5e4:	440a      	add	r2, r1
 801b5e6:	b2d2      	uxtb	r2, r2
 801b5e8:	701a      	strb	r2, [r3, #0]
  for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
 801b5ea:	697b      	ldr	r3, [r7, #20]
 801b5ec:	3301      	adds	r3, #1
 801b5ee:	617b      	str	r3, [r7, #20]
 801b5f0:	697a      	ldr	r2, [r7, #20]
 801b5f2:	68bb      	ldr	r3, [r7, #8]
 801b5f4:	429a      	cmp	r2, r3
 801b5f6:	d3ee      	bcc.n	801b5d6 <Fill_Buffer+0x16>
  }
}
 801b5f8:	bf00      	nop
 801b5fa:	bf00      	nop
 801b5fc:	371c      	adds	r7, #28
 801b5fe:	46bd      	mov	sp, r7
 801b600:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b604:	4770      	bx	lr

0801b606 <RMABuffercmp>:
*         ErrorAd: Difference address
* @retval 0: pBuffer identical to pBuffer1
*         1: pBuffer differs from pBuffer1
*/
static uint8_t RMABuffercmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint32_t BufferLength, uint32_t *ErrorAd)
{
 801b606:	b480      	push	{r7}
 801b608:	b085      	sub	sp, #20
 801b60a:	af00      	add	r7, sp, #0
 801b60c:	60f8      	str	r0, [r7, #12]
 801b60e:	60b9      	str	r1, [r7, #8]
 801b610:	607a      	str	r2, [r7, #4]
 801b612:	603b      	str	r3, [r7, #0]
  (*ErrorAd) = 0;
 801b614:	683b      	ldr	r3, [r7, #0]
 801b616:	2200      	movs	r2, #0
 801b618:	601a      	str	r2, [r3, #0]

  while (BufferLength--)
 801b61a:	e012      	b.n	801b642 <RMABuffercmp+0x3c>
  {
    if (*pBuffer1 != *pBuffer2)
 801b61c:	68fb      	ldr	r3, [r7, #12]
 801b61e:	781a      	ldrb	r2, [r3, #0]
 801b620:	68bb      	ldr	r3, [r7, #8]
 801b622:	781b      	ldrb	r3, [r3, #0]
 801b624:	429a      	cmp	r2, r3
 801b626:	d001      	beq.n	801b62c <RMABuffercmp+0x26>
    {
      return 1;
 801b628:	2301      	movs	r3, #1
 801b62a:	e010      	b.n	801b64e <RMABuffercmp+0x48>
    }

    (*ErrorAd)++;
 801b62c:	683b      	ldr	r3, [r7, #0]
 801b62e:	681b      	ldr	r3, [r3, #0]
 801b630:	1c5a      	adds	r2, r3, #1
 801b632:	683b      	ldr	r3, [r7, #0]
 801b634:	601a      	str	r2, [r3, #0]
    pBuffer1++;
 801b636:	68fb      	ldr	r3, [r7, #12]
 801b638:	3301      	adds	r3, #1
 801b63a:	60fb      	str	r3, [r7, #12]
    pBuffer2++;
 801b63c:	68bb      	ldr	r3, [r7, #8]
 801b63e:	3301      	adds	r3, #1
 801b640:	60bb      	str	r3, [r7, #8]
  while (BufferLength--)
 801b642:	687b      	ldr	r3, [r7, #4]
 801b644:	1e5a      	subs	r2, r3, #1
 801b646:	607a      	str	r2, [r7, #4]
 801b648:	2b00      	cmp	r3, #0
 801b64a:	d1e7      	bne.n	801b61c <RMABuffercmp+0x16>
  }

  return 0;
 801b64c:	2300      	movs	r3, #0
}
 801b64e:	4618      	mov	r0, r3
 801b650:	3714      	adds	r7, #20
 801b652:	46bd      	mov	sp, r7
 801b654:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b658:	4770      	bx	lr
	...

0801b65c <Rs_demo>:
  * @brief  Ranging sensor demo
  * @param  None
  * @retval 0 if ok, else value < 0.
  */
int32_t Rs_demo(void)
{
 801b65c:	b580      	push	{r7, lr}
 801b65e:	f5ad 6da2 	sub.w	sp, sp, #1296	; 0x510
 801b662:	af00      	add	r7, sp, #0
  int32_t                   result  = 0;
 801b664:	2300      	movs	r3, #0
 801b666:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
  uint32_t                  chipId;
  RANGING_SENSOR_Result_t   distance;

  printf("\n******RANGING SENSOR******\n");
 801b66a:	4844      	ldr	r0, [pc, #272]	; (801b77c <Rs_demo+0x120>)
 801b66c:	f002 f90e 	bl	801d88c <puts>
  printf("Press user button for next Example\n");
 801b670:	4843      	ldr	r0, [pc, #268]	; (801b780 <Rs_demo+0x124>)
 801b672:	f002 f90b 	bl	801d88c <puts>
  /* Initialize user button */
  if (BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI) != BSP_ERROR_NONE) result--;
 801b676:	2101      	movs	r1, #1
 801b678:	2000      	movs	r0, #0
 801b67a:	f7e5 fc41 	bl	8000f00 <BSP_PB_Init>
 801b67e:	4603      	mov	r3, r0
 801b680:	2b00      	cmp	r3, #0
 801b682:	d004      	beq.n	801b68e <Rs_demo+0x32>
 801b684:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 801b688:	3b01      	subs	r3, #1
 801b68a:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
  printf("Waiting for Ranging Sensor Initialization ... \n");
 801b68e:	483d      	ldr	r0, [pc, #244]	; (801b784 <Rs_demo+0x128>)
 801b690:	f002 f8fc 	bl	801d88c <puts>
  if (BSP_RANGING_SENSOR_Init(VL53L5A1_DEV_CENTER) != BSP_ERROR_NONE) result--;
 801b694:	2001      	movs	r0, #1
 801b696:	f7eb fa19 	bl	8006acc <BSP_RANGING_SENSOR_Init>
 801b69a:	4603      	mov	r3, r0
 801b69c:	2b00      	cmp	r3, #0
 801b69e:	d004      	beq.n	801b6aa <Rs_demo+0x4e>
 801b6a0:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 801b6a4:	3b01      	subs	r3, #1
 801b6a6:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
  if (BSP_RANGING_SENSOR_ReadID(VL53L5A1_DEV_CENTER, &chipId) != BSP_ERROR_NONE) result--;
 801b6aa:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 801b6ae:	4619      	mov	r1, r3
 801b6b0:	2001      	movs	r0, #1
 801b6b2:	f7eb fa21 	bl	8006af8 <BSP_RANGING_SENSOR_ReadID>
 801b6b6:	4603      	mov	r3, r0
 801b6b8:	2b00      	cmp	r3, #0
 801b6ba:	d004      	beq.n	801b6c6 <Rs_demo+0x6a>
 801b6bc:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 801b6c0:	3b01      	subs	r3, #1
 801b6c2:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
  if (BSP_RANGING_SENSOR_GetCapabilities(VL53L5A1_DEV_CENTER, &Cap) != BSP_ERROR_NONE) result--;
 801b6c6:	4930      	ldr	r1, [pc, #192]	; (801b788 <Rs_demo+0x12c>)
 801b6c8:	2001      	movs	r0, #1
 801b6ca:	f7eb fa3d 	bl	8006b48 <BSP_RANGING_SENSOR_GetCapabilities>
 801b6ce:	4603      	mov	r3, r0
 801b6d0:	2b00      	cmp	r3, #0
 801b6d2:	d004      	beq.n	801b6de <Rs_demo+0x82>
 801b6d4:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 801b6d8:	3b01      	subs	r3, #1
 801b6da:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c

  Profile.RangingProfile = RS_PROFILE_4x4_CONTINUOUS;
 801b6de:	4b2b      	ldr	r3, [pc, #172]	; (801b78c <Rs_demo+0x130>)
 801b6e0:	2201      	movs	r2, #1
 801b6e2:	601a      	str	r2, [r3, #0]
  Profile.TimingBudget = 30; /* 5 ms < TimingBudget < 100 ms */
 801b6e4:	4b29      	ldr	r3, [pc, #164]	; (801b78c <Rs_demo+0x130>)
 801b6e6:	221e      	movs	r2, #30
 801b6e8:	605a      	str	r2, [r3, #4]
  Profile.Frequency = 5; /* Hz */
 801b6ea:	4b28      	ldr	r3, [pc, #160]	; (801b78c <Rs_demo+0x130>)
 801b6ec:	2205      	movs	r2, #5
 801b6ee:	609a      	str	r2, [r3, #8]
  Profile.EnableAmbient = 0; /* Enable: 1, Disable: 0 */
 801b6f0:	4b26      	ldr	r3, [pc, #152]	; (801b78c <Rs_demo+0x130>)
 801b6f2:	2200      	movs	r2, #0
 801b6f4:	60da      	str	r2, [r3, #12]
  Profile.EnableSignal = 0; /* Enable: 1, Disable: 0 */
 801b6f6:	4b25      	ldr	r3, [pc, #148]	; (801b78c <Rs_demo+0x130>)
 801b6f8:	2200      	movs	r2, #0
 801b6fa:	611a      	str	r2, [r3, #16]

  /* set the profile if different from default one */
  if (BSP_RANGING_SENSOR_ConfigProfile(VL53L5A1_DEV_CENTER, &Profile) != BSP_ERROR_NONE) result--;
 801b6fc:	4923      	ldr	r1, [pc, #140]	; (801b78c <Rs_demo+0x130>)
 801b6fe:	2001      	movs	r0, #1
 801b700:	f7eb fa4a 	bl	8006b98 <BSP_RANGING_SENSOR_ConfigProfile>
 801b704:	4603      	mov	r3, r0
 801b706:	2b00      	cmp	r3, #0
 801b708:	d004      	beq.n	801b714 <Rs_demo+0xb8>
 801b70a:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 801b70e:	3b01      	subs	r3, #1
 801b710:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
  if (BSP_RANGING_SENSOR_Start(VL53L5A1_DEV_CENTER, RS_MODE_BLOCKING_CONTINUOUS) != BSP_ERROR_NONE)  result--;
 801b714:	2101      	movs	r1, #1
 801b716:	2001      	movs	r0, #1
 801b718:	f7eb fa8e 	bl	8006c38 <BSP_RANGING_SENSOR_Start>
 801b71c:	4603      	mov	r3, r0
 801b71e:	2b00      	cmp	r3, #0
 801b720:	d004      	beq.n	801b72c <Rs_demo+0xd0>
 801b722:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 801b726:	3b01      	subs	r3, #1
 801b728:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c

  /* GetDistance function */
  printf("Distance values:\n");
 801b72c:	4818      	ldr	r0, [pc, #96]	; (801b790 <Rs_demo+0x134>)
 801b72e:	f002 f8ad 	bl	801d88c <puts>
  while (UserButtonPressed == 0)
 801b732:	e013      	b.n	801b75c <Rs_demo+0x100>
  {
    if (BSP_RANGING_SENSOR_GetDistance(VL53L5A1_DEV_CENTER, &distance) != BSP_ERROR_NONE) result--;
 801b734:	1d3b      	adds	r3, r7, #4
 801b736:	4619      	mov	r1, r3
 801b738:	2001      	movs	r0, #1
 801b73a:	f7eb fa55 	bl	8006be8 <BSP_RANGING_SENSOR_GetDistance>
 801b73e:	4603      	mov	r3, r0
 801b740:	2b00      	cmp	r3, #0
 801b742:	d004      	beq.n	801b74e <Rs_demo+0xf2>
 801b744:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 801b748:	3b01      	subs	r3, #1
 801b74a:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
    print_result(&distance);
 801b74e:	1d3b      	adds	r3, r7, #4
 801b750:	4618      	mov	r0, r3
 801b752:	f000 f821 	bl	801b798 <print_result>
    HAL_Delay(POLLING_PERIOD);
 801b756:	20fa      	movs	r0, #250	; 0xfa
 801b758:	f7f5 ffd0 	bl	80116fc <HAL_Delay>
  while (UserButtonPressed == 0)
 801b75c:	4b0d      	ldr	r3, [pc, #52]	; (801b794 <Rs_demo+0x138>)
 801b75e:	781b      	ldrb	r3, [r3, #0]
 801b760:	b2db      	uxtb	r3, r3
 801b762:	2b00      	cmp	r3, #0
 801b764:	d0e6      	beq.n	801b734 <Rs_demo+0xd8>
  }
  UserButtonPressed = RESET;
 801b766:	4b0b      	ldr	r3, [pc, #44]	; (801b794 <Rs_demo+0x138>)
 801b768:	2200      	movs	r2, #0
 801b76a:	701a      	strb	r2, [r3, #0]

  return result;
 801b76c:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
}
 801b770:	4618      	mov	r0, r3
 801b772:	f507 67a2 	add.w	r7, r7, #1296	; 0x510
 801b776:	46bd      	mov	sp, r7
 801b778:	bd80      	pop	{r7, pc}
 801b77a:	bf00      	nop
 801b77c:	080224f8 	.word	0x080224f8
 801b780:	08022514 	.word	0x08022514
 801b784:	08022538 	.word	0x08022538
 801b788:	20035520 	.word	0x20035520
 801b78c:	20035530 	.word	0x20035530
 801b790:	08022568 	.word	0x08022568
 801b794:	200314e8 	.word	0x200314e8

0801b798 <print_result>:


static void print_result(RANGING_SENSOR_Result_t *Result)
{
 801b798:	b590      	push	{r4, r7, lr}
 801b79a:	b085      	sub	sp, #20
 801b79c:	af00      	add	r7, sp, #0
 801b79e:	6078      	str	r0, [r7, #4]
  int8_t i, j, k, l;
  uint8_t zones_per_line;

  zones_per_line = ((Profile.RangingProfile == RS_PROFILE_8x8_AUTONOMOUS) ||
 801b7a0:	4ba9      	ldr	r3, [pc, #676]	; (801ba48 <print_result+0x2b0>)
 801b7a2:	681b      	ldr	r3, [r3, #0]
 801b7a4:	2b04      	cmp	r3, #4
 801b7a6:	d003      	beq.n	801b7b0 <print_result+0x18>
         (Profile.RangingProfile == RS_PROFILE_8x8_CONTINUOUS)) ? 8 : 4;
 801b7a8:	4ba7      	ldr	r3, [pc, #668]	; (801ba48 <print_result+0x2b0>)
 801b7aa:	681b      	ldr	r3, [r3, #0]
  zones_per_line = ((Profile.RangingProfile == RS_PROFILE_8x8_AUTONOMOUS) ||
 801b7ac:	2b03      	cmp	r3, #3
 801b7ae:	d101      	bne.n	801b7b4 <print_result+0x1c>
 801b7b0:	2308      	movs	r3, #8
 801b7b2:	e000      	b.n	801b7b6 <print_result+0x1e>
 801b7b4:	2304      	movs	r3, #4
 801b7b6:	72fb      	strb	r3, [r7, #11]

  printf("53L5A1 Simple Ranging demo application\n");
 801b7b8:	48a4      	ldr	r0, [pc, #656]	; (801ba4c <print_result+0x2b4>)
 801b7ba:	f002 f867 	bl	801d88c <puts>
  printf("--------------------------------------\n\n");
 801b7be:	48a4      	ldr	r0, [pc, #656]	; (801ba50 <print_result+0x2b8>)
 801b7c0:	f002 f864 	bl	801d88c <puts>

  printf("Cell Format :\n\n");
 801b7c4:	48a3      	ldr	r0, [pc, #652]	; (801ba54 <print_result+0x2bc>)
 801b7c6:	f002 f861 	bl	801d88c <puts>
  for (l = 0; l < RANGING_SENSOR_NB_TARGET_PER_ZONE; l++)
 801b7ca:	2300      	movs	r3, #0
 801b7cc:	733b      	strb	r3, [r7, #12]
 801b7ce:	e017      	b.n	801b800 <print_result+0x68>
  {
    printf(" [38;5;10m%20s[0m : %20s\n", "Distance [mm]", "Status");
 801b7d0:	4aa1      	ldr	r2, [pc, #644]	; (801ba58 <print_result+0x2c0>)
 801b7d2:	49a2      	ldr	r1, [pc, #648]	; (801ba5c <print_result+0x2c4>)
 801b7d4:	48a2      	ldr	r0, [pc, #648]	; (801ba60 <print_result+0x2c8>)
 801b7d6:	f001 ffeb 	bl	801d7b0 <iprintf>
    if ((Profile.EnableAmbient != 0) || (Profile.EnableSignal != 0))
 801b7da:	4b9b      	ldr	r3, [pc, #620]	; (801ba48 <print_result+0x2b0>)
 801b7dc:	68db      	ldr	r3, [r3, #12]
 801b7de:	2b00      	cmp	r3, #0
 801b7e0:	d103      	bne.n	801b7ea <print_result+0x52>
 801b7e2:	4b99      	ldr	r3, [pc, #612]	; (801ba48 <print_result+0x2b0>)
 801b7e4:	691b      	ldr	r3, [r3, #16]
 801b7e6:	2b00      	cmp	r3, #0
 801b7e8:	d004      	beq.n	801b7f4 <print_result+0x5c>
    {
      printf(" %20s : %20s\n", "Signal [kcps/spad]", "Ambient [kcps/spad]");
 801b7ea:	4a9e      	ldr	r2, [pc, #632]	; (801ba64 <print_result+0x2cc>)
 801b7ec:	499e      	ldr	r1, [pc, #632]	; (801ba68 <print_result+0x2d0>)
 801b7ee:	489f      	ldr	r0, [pc, #636]	; (801ba6c <print_result+0x2d4>)
 801b7f0:	f001 ffde 	bl	801d7b0 <iprintf>
  for (l = 0; l < RANGING_SENSOR_NB_TARGET_PER_ZONE; l++)
 801b7f4:	f997 300c 	ldrsb.w	r3, [r7, #12]
 801b7f8:	b2db      	uxtb	r3, r3
 801b7fa:	3301      	adds	r3, #1
 801b7fc:	b2db      	uxtb	r3, r3
 801b7fe:	733b      	strb	r3, [r7, #12]
 801b800:	f997 300c 	ldrsb.w	r3, [r7, #12]
 801b804:	2b00      	cmp	r3, #0
 801b806:	d0e3      	beq.n	801b7d0 <print_result+0x38>
    }
  }

  printf("\n\n");
 801b808:	4899      	ldr	r0, [pc, #612]	; (801ba70 <print_result+0x2d8>)
 801b80a:	f002 f83f 	bl	801d88c <puts>

  for (j = 0; j < Result->NumberOfZones; j += zones_per_line)
 801b80e:	2300      	movs	r3, #0
 801b810:	73bb      	strb	r3, [r7, #14]
 801b812:	e0f9      	b.n	801ba08 <print_result+0x270>
  {
    for (i = 0; i < zones_per_line; i++) /* number of zones per line */
 801b814:	2300      	movs	r3, #0
 801b816:	73fb      	strb	r3, [r7, #15]
 801b818:	e008      	b.n	801b82c <print_result+0x94>
      printf(" -----------------------------");
 801b81a:	4896      	ldr	r0, [pc, #600]	; (801ba74 <print_result+0x2dc>)
 801b81c:	f001 ffc8 	bl	801d7b0 <iprintf>
    for (i = 0; i < zones_per_line; i++) /* number of zones per line */
 801b820:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b824:	b2db      	uxtb	r3, r3
 801b826:	3301      	adds	r3, #1
 801b828:	b2db      	uxtb	r3, r3
 801b82a:	73fb      	strb	r3, [r7, #15]
 801b82c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801b830:	7afb      	ldrb	r3, [r7, #11]
 801b832:	429a      	cmp	r2, r3
 801b834:	dbf1      	blt.n	801b81a <print_result+0x82>
    printf("\n");
 801b836:	200a      	movs	r0, #10
 801b838:	f001 ffcc 	bl	801d7d4 <putchar>

    for (i = 0; i < zones_per_line; i++)
 801b83c:	2300      	movs	r3, #0
 801b83e:	73fb      	strb	r3, [r7, #15]
 801b840:	e008      	b.n	801b854 <print_result+0xbc>
      printf("|                             ");
 801b842:	488d      	ldr	r0, [pc, #564]	; (801ba78 <print_result+0x2e0>)
 801b844:	f001 ffb4 	bl	801d7b0 <iprintf>
    for (i = 0; i < zones_per_line; i++)
 801b848:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b84c:	b2db      	uxtb	r3, r3
 801b84e:	3301      	adds	r3, #1
 801b850:	b2db      	uxtb	r3, r3
 801b852:	73fb      	strb	r3, [r7, #15]
 801b854:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801b858:	7afb      	ldrb	r3, [r7, #11]
 801b85a:	429a      	cmp	r2, r3
 801b85c:	dbf1      	blt.n	801b842 <print_result+0xaa>
    printf("|\n");
 801b85e:	4887      	ldr	r0, [pc, #540]	; (801ba7c <print_result+0x2e4>)
 801b860:	f002 f814 	bl	801d88c <puts>

    for (l = 0; l < RANGING_SENSOR_NB_TARGET_PER_ZONE; l++)
 801b864:	2300      	movs	r3, #0
 801b866:	733b      	strb	r3, [r7, #12]
 801b868:	e0c4      	b.n	801b9f4 <print_result+0x25c>
    {
      /* Print distance and status */
      for (k = (zones_per_line - 1); k >= 0; k--)
 801b86a:	7afb      	ldrb	r3, [r7, #11]
 801b86c:	3b01      	subs	r3, #1
 801b86e:	b2db      	uxtb	r3, r3
 801b870:	737b      	strb	r3, [r7, #13]
 801b872:	e03f      	b.n	801b8f4 <print_result+0x15c>
      {
        if (Result->ZoneResult[j+k].NumberOfTargets > 0)
 801b874:	f997 200e 	ldrsb.w	r2, [r7, #14]
 801b878:	f997 300d 	ldrsb.w	r3, [r7, #13]
 801b87c:	441a      	add	r2, r3
 801b87e:	6879      	ldr	r1, [r7, #4]
 801b880:	4613      	mov	r3, r2
 801b882:	009b      	lsls	r3, r3, #2
 801b884:	4413      	add	r3, r2
 801b886:	009b      	lsls	r3, r3, #2
 801b888:	440b      	add	r3, r1
 801b88a:	3304      	adds	r3, #4
 801b88c:	781b      	ldrb	r3, [r3, #0]
 801b88e:	2b00      	cmp	r3, #0
 801b890:	d025      	beq.n	801b8de <print_result+0x146>
          printf("| [38;5;10m%5ld[0m  :  %5ld ",
              (long)Result->ZoneResult[j+k].Distance[l],
 801b892:	f997 200e 	ldrsb.w	r2, [r7, #14]
 801b896:	f997 300d 	ldrsb.w	r3, [r7, #13]
 801b89a:	441a      	add	r2, r3
 801b89c:	f997 000c 	ldrsb.w	r0, [r7, #12]
 801b8a0:	6879      	ldr	r1, [r7, #4]
 801b8a2:	4613      	mov	r3, r2
 801b8a4:	009b      	lsls	r3, r3, #2
 801b8a6:	4413      	add	r3, r2
 801b8a8:	4403      	add	r3, r0
 801b8aa:	009b      	lsls	r3, r3, #2
 801b8ac:	440b      	add	r3, r1
 801b8ae:	689b      	ldr	r3, [r3, #8]
          printf("| [38;5;10m%5ld[0m  :  %5ld ",
 801b8b0:	461c      	mov	r4, r3
              (long)Result->ZoneResult[j+k].Status[l]);
 801b8b2:	f997 200e 	ldrsb.w	r2, [r7, #14]
 801b8b6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 801b8ba:	441a      	add	r2, r3
 801b8bc:	f997 000c 	ldrsb.w	r0, [r7, #12]
 801b8c0:	6879      	ldr	r1, [r7, #4]
 801b8c2:	4613      	mov	r3, r2
 801b8c4:	009b      	lsls	r3, r3, #2
 801b8c6:	4413      	add	r3, r2
 801b8c8:	4403      	add	r3, r0
 801b8ca:	3302      	adds	r3, #2
 801b8cc:	009b      	lsls	r3, r3, #2
 801b8ce:	440b      	add	r3, r1
 801b8d0:	685b      	ldr	r3, [r3, #4]
          printf("| [38;5;10m%5ld[0m  :  %5ld ",
 801b8d2:	461a      	mov	r2, r3
 801b8d4:	4621      	mov	r1, r4
 801b8d6:	486a      	ldr	r0, [pc, #424]	; (801ba80 <print_result+0x2e8>)
 801b8d8:	f001 ff6a 	bl	801d7b0 <iprintf>
 801b8dc:	e004      	b.n	801b8e8 <print_result+0x150>
        else
          printf("| %5s  :  %5s ", "X", "X");
 801b8de:	4a69      	ldr	r2, [pc, #420]	; (801ba84 <print_result+0x2ec>)
 801b8e0:	4968      	ldr	r1, [pc, #416]	; (801ba84 <print_result+0x2ec>)
 801b8e2:	4869      	ldr	r0, [pc, #420]	; (801ba88 <print_result+0x2f0>)
 801b8e4:	f001 ff64 	bl	801d7b0 <iprintf>
      for (k = (zones_per_line - 1); k >= 0; k--)
 801b8e8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 801b8ec:	b2db      	uxtb	r3, r3
 801b8ee:	3b01      	subs	r3, #1
 801b8f0:	b2db      	uxtb	r3, r3
 801b8f2:	737b      	strb	r3, [r7, #13]
 801b8f4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 801b8f8:	2b00      	cmp	r3, #0
 801b8fa:	dabb      	bge.n	801b874 <print_result+0xdc>
      }
      printf("|\n");
 801b8fc:	485f      	ldr	r0, [pc, #380]	; (801ba7c <print_result+0x2e4>)
 801b8fe:	f001 ffc5 	bl	801d88c <puts>

      if ((Profile.EnableAmbient != 0) || (Profile.EnableSignal != 0))
 801b902:	4b51      	ldr	r3, [pc, #324]	; (801ba48 <print_result+0x2b0>)
 801b904:	68db      	ldr	r3, [r3, #12]
 801b906:	2b00      	cmp	r3, #0
 801b908:	d103      	bne.n	801b912 <print_result+0x17a>
 801b90a:	4b4f      	ldr	r3, [pc, #316]	; (801ba48 <print_result+0x2b0>)
 801b90c:	691b      	ldr	r3, [r3, #16]
 801b90e:	2b00      	cmp	r3, #0
 801b910:	d06a      	beq.n	801b9e8 <print_result+0x250>
      {
        /* Print Signal and Ambient */
        for (k = (zones_per_line - 1); k >= 0; k--)
 801b912:	7afb      	ldrb	r3, [r7, #11]
 801b914:	3b01      	subs	r3, #1
 801b916:	b2db      	uxtb	r3, r3
 801b918:	737b      	strb	r3, [r7, #13]
 801b91a:	e05e      	b.n	801b9da <print_result+0x242>
        {
          if (Result->ZoneResult[j+k].NumberOfTargets > 0)
 801b91c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 801b920:	f997 300d 	ldrsb.w	r3, [r7, #13]
 801b924:	441a      	add	r2, r3
 801b926:	6879      	ldr	r1, [r7, #4]
 801b928:	4613      	mov	r3, r2
 801b92a:	009b      	lsls	r3, r3, #2
 801b92c:	4413      	add	r3, r2
 801b92e:	009b      	lsls	r3, r3, #2
 801b930:	440b      	add	r3, r1
 801b932:	3304      	adds	r3, #4
 801b934:	781b      	ldrb	r3, [r3, #0]
 801b936:	2b00      	cmp	r3, #0
 801b938:	d044      	beq.n	801b9c4 <print_result+0x22c>
          {
            if (Profile.EnableSignal != 0)
 801b93a:	4b43      	ldr	r3, [pc, #268]	; (801ba48 <print_result+0x2b0>)
 801b93c:	691b      	ldr	r3, [r3, #16]
 801b93e:	2b00      	cmp	r3, #0
 801b940:	d019      	beq.n	801b976 <print_result+0x1de>
              printf("| %5ld  :  ", (long)Result->ZoneResult[j+k].Signal[l]);
 801b942:	f997 200e 	ldrsb.w	r2, [r7, #14]
 801b946:	f997 300d 	ldrsb.w	r3, [r7, #13]
 801b94a:	441a      	add	r2, r3
 801b94c:	f997 000c 	ldrsb.w	r0, [r7, #12]
 801b950:	6879      	ldr	r1, [r7, #4]
 801b952:	4613      	mov	r3, r2
 801b954:	009b      	lsls	r3, r3, #2
 801b956:	4413      	add	r3, r2
 801b958:	4403      	add	r3, r0
 801b95a:	3304      	adds	r3, #4
 801b95c:	009b      	lsls	r3, r3, #2
 801b95e:	440b      	add	r3, r1
 801b960:	3304      	adds	r3, #4
 801b962:	edd3 7a00 	vldr	s15, [r3]
 801b966:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b96a:	ee17 1a90 	vmov	r1, s15
 801b96e:	4847      	ldr	r0, [pc, #284]	; (801ba8c <print_result+0x2f4>)
 801b970:	f001 ff1e 	bl	801d7b0 <iprintf>
 801b974:	e003      	b.n	801b97e <print_result+0x1e6>
            else
              printf("| %5s  :  ", "X");
 801b976:	4943      	ldr	r1, [pc, #268]	; (801ba84 <print_result+0x2ec>)
 801b978:	4845      	ldr	r0, [pc, #276]	; (801ba90 <print_result+0x2f8>)
 801b97a:	f001 ff19 	bl	801d7b0 <iprintf>

            if (Profile.EnableAmbient != 0)
 801b97e:	4b32      	ldr	r3, [pc, #200]	; (801ba48 <print_result+0x2b0>)
 801b980:	68db      	ldr	r3, [r3, #12]
 801b982:	2b00      	cmp	r3, #0
 801b984:	d019      	beq.n	801b9ba <print_result+0x222>
              printf("%5ld ", (long)Result->ZoneResult[j+k].Ambient[l]);
 801b986:	f997 200e 	ldrsb.w	r2, [r7, #14]
 801b98a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 801b98e:	441a      	add	r2, r3
 801b990:	f997 000c 	ldrsb.w	r0, [r7, #12]
 801b994:	6879      	ldr	r1, [r7, #4]
 801b996:	4613      	mov	r3, r2
 801b998:	009b      	lsls	r3, r3, #2
 801b99a:	4413      	add	r3, r2
 801b99c:	4403      	add	r3, r0
 801b99e:	3302      	adds	r3, #2
 801b9a0:	009b      	lsls	r3, r3, #2
 801b9a2:	440b      	add	r3, r1
 801b9a4:	3308      	adds	r3, #8
 801b9a6:	edd3 7a00 	vldr	s15, [r3]
 801b9aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b9ae:	ee17 1a90 	vmov	r1, s15
 801b9b2:	4838      	ldr	r0, [pc, #224]	; (801ba94 <print_result+0x2fc>)
 801b9b4:	f001 fefc 	bl	801d7b0 <iprintf>
 801b9b8:	e009      	b.n	801b9ce <print_result+0x236>
            else
              printf("%5s ", "X");
 801b9ba:	4932      	ldr	r1, [pc, #200]	; (801ba84 <print_result+0x2ec>)
 801b9bc:	4836      	ldr	r0, [pc, #216]	; (801ba98 <print_result+0x300>)
 801b9be:	f001 fef7 	bl	801d7b0 <iprintf>
 801b9c2:	e004      	b.n	801b9ce <print_result+0x236>
          }
          else
            printf("| %5s  :  %5s ", "X", "X");
 801b9c4:	4a2f      	ldr	r2, [pc, #188]	; (801ba84 <print_result+0x2ec>)
 801b9c6:	492f      	ldr	r1, [pc, #188]	; (801ba84 <print_result+0x2ec>)
 801b9c8:	482f      	ldr	r0, [pc, #188]	; (801ba88 <print_result+0x2f0>)
 801b9ca:	f001 fef1 	bl	801d7b0 <iprintf>
        for (k = (zones_per_line - 1); k >= 0; k--)
 801b9ce:	f997 300d 	ldrsb.w	r3, [r7, #13]
 801b9d2:	b2db      	uxtb	r3, r3
 801b9d4:	3b01      	subs	r3, #1
 801b9d6:	b2db      	uxtb	r3, r3
 801b9d8:	737b      	strb	r3, [r7, #13]
 801b9da:	f997 300d 	ldrsb.w	r3, [r7, #13]
 801b9de:	2b00      	cmp	r3, #0
 801b9e0:	da9c      	bge.n	801b91c <print_result+0x184>
        }
        printf("|\n");
 801b9e2:	4826      	ldr	r0, [pc, #152]	; (801ba7c <print_result+0x2e4>)
 801b9e4:	f001 ff52 	bl	801d88c <puts>
    for (l = 0; l < RANGING_SENSOR_NB_TARGET_PER_ZONE; l++)
 801b9e8:	f997 300c 	ldrsb.w	r3, [r7, #12]
 801b9ec:	b2db      	uxtb	r3, r3
 801b9ee:	3301      	adds	r3, #1
 801b9f0:	b2db      	uxtb	r3, r3
 801b9f2:	733b      	strb	r3, [r7, #12]
 801b9f4:	f997 300c 	ldrsb.w	r3, [r7, #12]
 801b9f8:	2b00      	cmp	r3, #0
 801b9fa:	f43f af36 	beq.w	801b86a <print_result+0xd2>
  for (j = 0; j < Result->NumberOfZones; j += zones_per_line)
 801b9fe:	7bba      	ldrb	r2, [r7, #14]
 801ba00:	7afb      	ldrb	r3, [r7, #11]
 801ba02:	4413      	add	r3, r2
 801ba04:	b2db      	uxtb	r3, r3
 801ba06:	73bb      	strb	r3, [r7, #14]
 801ba08:	f997 200e 	ldrsb.w	r2, [r7, #14]
 801ba0c:	687b      	ldr	r3, [r7, #4]
 801ba0e:	681b      	ldr	r3, [r3, #0]
 801ba10:	429a      	cmp	r2, r3
 801ba12:	f4ff aeff 	bcc.w	801b814 <print_result+0x7c>
      }
    }
  }

  for (i = 0; i < zones_per_line; i++)
 801ba16:	2300      	movs	r3, #0
 801ba18:	73fb      	strb	r3, [r7, #15]
 801ba1a:	e008      	b.n	801ba2e <print_result+0x296>
    printf(" -----------------------------");
 801ba1c:	4815      	ldr	r0, [pc, #84]	; (801ba74 <print_result+0x2dc>)
 801ba1e:	f001 fec7 	bl	801d7b0 <iprintf>
  for (i = 0; i < zones_per_line; i++)
 801ba22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ba26:	b2db      	uxtb	r3, r3
 801ba28:	3301      	adds	r3, #1
 801ba2a:	b2db      	uxtb	r3, r3
 801ba2c:	73fb      	strb	r3, [r7, #15]
 801ba2e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801ba32:	7afb      	ldrb	r3, [r7, #11]
 801ba34:	429a      	cmp	r2, r3
 801ba36:	dbf1      	blt.n	801ba1c <print_result+0x284>
  printf("\n");
 801ba38:	200a      	movs	r0, #10
 801ba3a:	f001 fecb 	bl	801d7d4 <putchar>
}
 801ba3e:	bf00      	nop
 801ba40:	3714      	adds	r7, #20
 801ba42:	46bd      	mov	sp, r7
 801ba44:	bd90      	pop	{r4, r7, pc}
 801ba46:	bf00      	nop
 801ba48:	20035530 	.word	0x20035530
 801ba4c:	0802257c 	.word	0x0802257c
 801ba50:	080225a4 	.word	0x080225a4
 801ba54:	080225cc 	.word	0x080225cc
 801ba58:	080225dc 	.word	0x080225dc
 801ba5c:	080225e4 	.word	0x080225e4
 801ba60:	080225f4 	.word	0x080225f4
 801ba64:	08022610 	.word	0x08022610
 801ba68:	08022624 	.word	0x08022624
 801ba6c:	08022638 	.word	0x08022638
 801ba70:	08022648 	.word	0x08022648
 801ba74:	0802264c 	.word	0x0802264c
 801ba78:	0802266c 	.word	0x0802266c
 801ba7c:	0802268c 	.word	0x0802268c
 801ba80:	08022690 	.word	0x08022690
 801ba84:	080226b0 	.word	0x080226b0
 801ba88:	080226b4 	.word	0x080226b4
 801ba8c:	080226c4 	.word	0x080226c4
 801ba90:	080226d0 	.word	0x080226d0
 801ba94:	080226dc 	.word	0x080226dc
 801ba98:	080226e4 	.word	0x080226e4

0801ba9c <HAL_MspInit>:
/**
  * @brief  Initialize the Global MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 801ba9c:	b480      	push	{r7}
 801ba9e:	af00      	add	r7, sp, #0
  /* NOTE : This function is generated automatically by STM32CubeMX and eventually
            modified by the user
   */
}
 801baa0:	bf00      	nop
 801baa2:	46bd      	mov	sp, r7
 801baa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801baa8:	4770      	bx	lr

0801baaa <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 801baaa:	b480      	push	{r7}
 801baac:	af00      	add	r7, sp, #0
}
 801baae:	bf00      	nop
 801bab0:	46bd      	mov	sp, r7
 801bab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bab6:	4770      	bx	lr

0801bab8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 801bab8:	b480      	push	{r7}
 801baba:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 801babc:	e7fe      	b.n	801babc <HardFault_Handler+0x4>

0801babe <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 801babe:	b480      	push	{r7}
 801bac0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 801bac2:	e7fe      	b.n	801bac2 <MemManage_Handler+0x4>

0801bac4 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 801bac4:	b480      	push	{r7}
 801bac6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 801bac8:	e7fe      	b.n	801bac8 <BusFault_Handler+0x4>

0801baca <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 801baca:	b480      	push	{r7}
 801bacc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 801bace:	e7fe      	b.n	801bace <UsageFault_Handler+0x4>

0801bad0 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 801bad0:	b480      	push	{r7}
 801bad2:	af00      	add	r7, sp, #0
}
 801bad4:	bf00      	nop
 801bad6:	46bd      	mov	sp, r7
 801bad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801badc:	4770      	bx	lr

0801bade <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 801bade:	b480      	push	{r7}
 801bae0:	af00      	add	r7, sp, #0
  while (1)
 801bae2:	e7fe      	b.n	801bae2 <DebugMon_Handler+0x4>

0801bae4 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 801bae4:	b480      	push	{r7}
 801bae6:	af00      	add	r7, sp, #0
  while (1)
 801bae8:	e7fe      	b.n	801bae8 <PendSV_Handler+0x4>

0801baea <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 801baea:	b580      	push	{r7, lr}
 801baec:	af00      	add	r7, sp, #0
  HAL_IncTick();
 801baee:	f7f5 fde5 	bl	80116bc <HAL_IncTick>
}
 801baf2:	bf00      	nop
 801baf4:	bd80      	pop	{r7, pc}

0801baf6 <GPDMA1_Channel0_IRQHandler>:
  * @brief  This function handles GPDMA_Channel0 interrupt request.
  * @param  None
  * @retval None
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 801baf6:	b580      	push	{r7, lr}
 801baf8:	af00      	add	r7, sp, #0
  BSP_AUDIO_IN_IRQHandler(0, AUDIO_IN_DEVICE_DIGITAL_MIC2);
 801bafa:	2102      	movs	r1, #2
 801bafc:	2000      	movs	r0, #0
 801bafe:	f7e5 fe45 	bl	800178c <BSP_AUDIO_IN_IRQHandler>
}
 801bb02:	bf00      	nop
 801bb04:	bd80      	pop	{r7, pc}

0801bb06 <GPDMA1_Channel6_IRQHandler>:
  * @brief  This function handles GPDMA_Channel6 interrupt request.
  * @param  None
  * @retval None
  */
void GPDMA1_Channel6_IRQHandler(void)
{
 801bb06:	b580      	push	{r7, lr}
 801bb08:	af00      	add	r7, sp, #0
  BSP_AUDIO_IN_IRQHandler(0, AUDIO_IN_DEVICE_DIGITAL_MIC1);
 801bb0a:	2101      	movs	r1, #1
 801bb0c:	2000      	movs	r0, #0
 801bb0e:	f7e5 fe3d 	bl	800178c <BSP_AUDIO_IN_IRQHandler>
} 
 801bb12:	bf00      	nop
 801bb14:	bd80      	pop	{r7, pc}
	...

0801bb18 <EXTI13_IRQHandler>:
  * @brief  This function handles EXTI13 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI13_IRQHandler(void)
{
 801bb18:	b580      	push	{r7, lr}
 801bb1a:	af00      	add	r7, sp, #0
  HAL_EXTI_IRQHandler(&hpb_exti[0]);
 801bb1c:	4802      	ldr	r0, [pc, #8]	; (801bb28 <EXTI13_IRQHandler+0x10>)
 801bb1e:	f7f7 ff85 	bl	8013a2c <HAL_EXTI_IRQHandler>
}
 801bb22:	bf00      	nop
 801bb24:	bd80      	pop	{r7, pc}
 801bb26:	bf00      	nop
 801bb28:	200007ec 	.word	0x200007ec

0801bb2c <DCMI_PSSI_IRQHandler>:
  * @brief  This function handles DCMI_PSSI interrupt request.
  * @param  None
  * @retval None
  */
void DCMI_PSSI_IRQHandler(void)
{
 801bb2c:	b580      	push	{r7, lr}
 801bb2e:	af00      	add	r7, sp, #0
  HAL_DCMI_IRQHandler(&hcamera_dcmi);
 801bb30:	4802      	ldr	r0, [pc, #8]	; (801bb3c <DCMI_PSSI_IRQHandler+0x10>)
 801bb32:	f7f6 f9f1 	bl	8011f18 <HAL_DCMI_IRQHandler>
}
 801bb36:	bf00      	nop
 801bb38:	bd80      	pop	{r7, pc}
 801bb3a:	bf00      	nop
 801bb3c:	20001528 	.word	0x20001528

0801bb40 <GPDMA1_Channel12_IRQHandler>:
  * @brief  This function handles GPDMA_Channel12 interrupt request.
  * @param  None
  * @retval None
  */
void GPDMA1_Channel12_IRQHandler(void)
{
 801bb40:	b580      	push	{r7, lr}
 801bb42:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(hcamera_dcmi.DMA_Handle);
 801bb44:	4b03      	ldr	r3, [pc, #12]	; (801bb54 <GPDMA1_Channel12_IRQHandler+0x14>)
 801bb46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bb48:	4618      	mov	r0, r3
 801bb4a:	f7f6 fc1f 	bl	801238c <HAL_DMA_IRQHandler>
}
 801bb4e:	bf00      	nop
 801bb50:	bd80      	pop	{r7, pc}
 801bb52:	bf00      	nop
 801bb54:	20001528 	.word	0x20001528

0801bb58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 801bb58:	b580      	push	{r7, lr}
 801bb5a:	b086      	sub	sp, #24
 801bb5c:	af00      	add	r7, sp, #0
 801bb5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 801bb60:	4a14      	ldr	r2, [pc, #80]	; (801bbb4 <_sbrk+0x5c>)
 801bb62:	4b15      	ldr	r3, [pc, #84]	; (801bbb8 <_sbrk+0x60>)
 801bb64:	1ad3      	subs	r3, r2, r3
 801bb66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 801bb68:	697b      	ldr	r3, [r7, #20]
 801bb6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 801bb6c:	4b13      	ldr	r3, [pc, #76]	; (801bbbc <_sbrk+0x64>)
 801bb6e:	681b      	ldr	r3, [r3, #0]
 801bb70:	2b00      	cmp	r3, #0
 801bb72:	d102      	bne.n	801bb7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 801bb74:	4b11      	ldr	r3, [pc, #68]	; (801bbbc <_sbrk+0x64>)
 801bb76:	4a12      	ldr	r2, [pc, #72]	; (801bbc0 <_sbrk+0x68>)
 801bb78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801bb7a:	4b10      	ldr	r3, [pc, #64]	; (801bbbc <_sbrk+0x64>)
 801bb7c:	681a      	ldr	r2, [r3, #0]
 801bb7e:	687b      	ldr	r3, [r7, #4]
 801bb80:	4413      	add	r3, r2
 801bb82:	693a      	ldr	r2, [r7, #16]
 801bb84:	429a      	cmp	r2, r3
 801bb86:	d207      	bcs.n	801bb98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 801bb88:	f001 fea6 	bl	801d8d8 <__errno>
 801bb8c:	4603      	mov	r3, r0
 801bb8e:	220c      	movs	r2, #12
 801bb90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 801bb92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bb96:	e009      	b.n	801bbac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 801bb98:	4b08      	ldr	r3, [pc, #32]	; (801bbbc <_sbrk+0x64>)
 801bb9a:	681b      	ldr	r3, [r3, #0]
 801bb9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 801bb9e:	4b07      	ldr	r3, [pc, #28]	; (801bbbc <_sbrk+0x64>)
 801bba0:	681a      	ldr	r2, [r3, #0]
 801bba2:	687b      	ldr	r3, [r7, #4]
 801bba4:	4413      	add	r3, r2
 801bba6:	4a05      	ldr	r2, [pc, #20]	; (801bbbc <_sbrk+0x64>)
 801bba8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 801bbaa:	68fb      	ldr	r3, [r7, #12]
}
 801bbac:	4618      	mov	r0, r3
 801bbae:	3718      	adds	r7, #24
 801bbb0:	46bd      	mov	sp, r7
 801bbb2:	bd80      	pop	{r7, pc}
 801bbb4:	200c0000 	.word	0x200c0000
 801bbb8:	00001000 	.word	0x00001000
 801bbbc:	20035544 	.word	0x20035544
 801bbc0:	20035740 	.word	0x20035740

0801bbc4 <__cvt>:
 801bbc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801bbc8:	ec55 4b10 	vmov	r4, r5, d0
 801bbcc:	2d00      	cmp	r5, #0
 801bbce:	460e      	mov	r6, r1
 801bbd0:	4619      	mov	r1, r3
 801bbd2:	462b      	mov	r3, r5
 801bbd4:	bfb4      	ite	lt
 801bbd6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801bbda:	2300      	movge	r3, #0
 801bbdc:	4691      	mov	r9, r2
 801bbde:	bfbf      	itttt	lt
 801bbe0:	4622      	movlt	r2, r4
 801bbe2:	461d      	movlt	r5, r3
 801bbe4:	232d      	movlt	r3, #45	; 0x2d
 801bbe6:	4614      	movlt	r4, r2
 801bbe8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801bbec:	700b      	strb	r3, [r1, #0]
 801bbee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bbf0:	f023 0820 	bic.w	r8, r3, #32
 801bbf4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801bbf8:	d005      	beq.n	801bc06 <__cvt+0x42>
 801bbfa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801bbfe:	d100      	bne.n	801bc02 <__cvt+0x3e>
 801bc00:	3601      	adds	r6, #1
 801bc02:	2102      	movs	r1, #2
 801bc04:	e000      	b.n	801bc08 <__cvt+0x44>
 801bc06:	2103      	movs	r1, #3
 801bc08:	ab03      	add	r3, sp, #12
 801bc0a:	4632      	mov	r2, r6
 801bc0c:	9301      	str	r3, [sp, #4]
 801bc0e:	ab02      	add	r3, sp, #8
 801bc10:	ec45 4b10 	vmov	d0, r4, r5
 801bc14:	9300      	str	r3, [sp, #0]
 801bc16:	4653      	mov	r3, sl
 801bc18:	f001 ff46 	bl	801daa8 <_dtoa_r>
 801bc1c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801bc20:	4607      	mov	r7, r0
 801bc22:	d102      	bne.n	801bc2a <__cvt+0x66>
 801bc24:	f019 0f01 	tst.w	r9, #1
 801bc28:	d022      	beq.n	801bc70 <__cvt+0xac>
 801bc2a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801bc2e:	eb07 0906 	add.w	r9, r7, r6
 801bc32:	d110      	bne.n	801bc56 <__cvt+0x92>
 801bc34:	783b      	ldrb	r3, [r7, #0]
 801bc36:	2b30      	cmp	r3, #48	; 0x30
 801bc38:	d10a      	bne.n	801bc50 <__cvt+0x8c>
 801bc3a:	2200      	movs	r2, #0
 801bc3c:	2300      	movs	r3, #0
 801bc3e:	4620      	mov	r0, r4
 801bc40:	4629      	mov	r1, r5
 801bc42:	f7e4 ff45 	bl	8000ad0 <__aeabi_dcmpeq>
 801bc46:	b918      	cbnz	r0, 801bc50 <__cvt+0x8c>
 801bc48:	f1c6 0601 	rsb	r6, r6, #1
 801bc4c:	f8ca 6000 	str.w	r6, [sl]
 801bc50:	f8da 3000 	ldr.w	r3, [sl]
 801bc54:	4499      	add	r9, r3
 801bc56:	2200      	movs	r2, #0
 801bc58:	2300      	movs	r3, #0
 801bc5a:	4620      	mov	r0, r4
 801bc5c:	4629      	mov	r1, r5
 801bc5e:	f7e4 ff37 	bl	8000ad0 <__aeabi_dcmpeq>
 801bc62:	b108      	cbz	r0, 801bc68 <__cvt+0xa4>
 801bc64:	f8cd 900c 	str.w	r9, [sp, #12]
 801bc68:	2230      	movs	r2, #48	; 0x30
 801bc6a:	9b03      	ldr	r3, [sp, #12]
 801bc6c:	454b      	cmp	r3, r9
 801bc6e:	d307      	bcc.n	801bc80 <__cvt+0xbc>
 801bc70:	9b03      	ldr	r3, [sp, #12]
 801bc72:	4638      	mov	r0, r7
 801bc74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bc76:	1bdb      	subs	r3, r3, r7
 801bc78:	6013      	str	r3, [r2, #0]
 801bc7a:	b004      	add	sp, #16
 801bc7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bc80:	1c59      	adds	r1, r3, #1
 801bc82:	9103      	str	r1, [sp, #12]
 801bc84:	701a      	strb	r2, [r3, #0]
 801bc86:	e7f0      	b.n	801bc6a <__cvt+0xa6>

0801bc88 <__exponent>:
 801bc88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801bc8a:	2900      	cmp	r1, #0
 801bc8c:	4603      	mov	r3, r0
 801bc8e:	bfb8      	it	lt
 801bc90:	4249      	neglt	r1, r1
 801bc92:	f803 2b02 	strb.w	r2, [r3], #2
 801bc96:	bfb4      	ite	lt
 801bc98:	222d      	movlt	r2, #45	; 0x2d
 801bc9a:	222b      	movge	r2, #43	; 0x2b
 801bc9c:	2909      	cmp	r1, #9
 801bc9e:	7042      	strb	r2, [r0, #1]
 801bca0:	dd29      	ble.n	801bcf6 <__exponent+0x6e>
 801bca2:	f10d 0207 	add.w	r2, sp, #7
 801bca6:	260a      	movs	r6, #10
 801bca8:	4617      	mov	r7, r2
 801bcaa:	4694      	mov	ip, r2
 801bcac:	3a01      	subs	r2, #1
 801bcae:	fb91 f5f6 	sdiv	r5, r1, r6
 801bcb2:	fb06 1415 	mls	r4, r6, r5, r1
 801bcb6:	3430      	adds	r4, #48	; 0x30
 801bcb8:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801bcbc:	460c      	mov	r4, r1
 801bcbe:	4629      	mov	r1, r5
 801bcc0:	2c63      	cmp	r4, #99	; 0x63
 801bcc2:	dcf2      	bgt.n	801bcaa <__exponent+0x22>
 801bcc4:	3130      	adds	r1, #48	; 0x30
 801bcc6:	f1ac 0402 	sub.w	r4, ip, #2
 801bcca:	f802 1c01 	strb.w	r1, [r2, #-1]
 801bcce:	1c41      	adds	r1, r0, #1
 801bcd0:	4622      	mov	r2, r4
 801bcd2:	42ba      	cmp	r2, r7
 801bcd4:	d30a      	bcc.n	801bcec <__exponent+0x64>
 801bcd6:	f10d 0209 	add.w	r2, sp, #9
 801bcda:	eba2 020c 	sub.w	r2, r2, ip
 801bcde:	42bc      	cmp	r4, r7
 801bce0:	bf88      	it	hi
 801bce2:	2200      	movhi	r2, #0
 801bce4:	4413      	add	r3, r2
 801bce6:	1a18      	subs	r0, r3, r0
 801bce8:	b003      	add	sp, #12
 801bcea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bcec:	f812 5b01 	ldrb.w	r5, [r2], #1
 801bcf0:	f801 5f01 	strb.w	r5, [r1, #1]!
 801bcf4:	e7ed      	b.n	801bcd2 <__exponent+0x4a>
 801bcf6:	2330      	movs	r3, #48	; 0x30
 801bcf8:	3130      	adds	r1, #48	; 0x30
 801bcfa:	7083      	strb	r3, [r0, #2]
 801bcfc:	1d03      	adds	r3, r0, #4
 801bcfe:	70c1      	strb	r1, [r0, #3]
 801bd00:	e7f1      	b.n	801bce6 <__exponent+0x5e>
	...

0801bd04 <_printf_float>:
 801bd04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd08:	ed2d 8b02 	vpush	{d8}
 801bd0c:	b08d      	sub	sp, #52	; 0x34
 801bd0e:	460c      	mov	r4, r1
 801bd10:	4616      	mov	r6, r2
 801bd12:	461f      	mov	r7, r3
 801bd14:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801bd18:	4605      	mov	r5, r0
 801bd1a:	f001 fdd9 	bl	801d8d0 <_localeconv_r>
 801bd1e:	f8d0 a000 	ldr.w	sl, [r0]
 801bd22:	4650      	mov	r0, sl
 801bd24:	f7e4 faa8 	bl	8000278 <strlen>
 801bd28:	2300      	movs	r3, #0
 801bd2a:	f894 b018 	ldrb.w	fp, [r4, #24]
 801bd2e:	ee08 0a10 	vmov	s16, r0
 801bd32:	930a      	str	r3, [sp, #40]	; 0x28
 801bd34:	6823      	ldr	r3, [r4, #0]
 801bd36:	9305      	str	r3, [sp, #20]
 801bd38:	f8d8 3000 	ldr.w	r3, [r8]
 801bd3c:	3307      	adds	r3, #7
 801bd3e:	f023 0307 	bic.w	r3, r3, #7
 801bd42:	f103 0208 	add.w	r2, r3, #8
 801bd46:	f8c8 2000 	str.w	r2, [r8]
 801bd4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801bd4e:	e9d3 8900 	ldrd	r8, r9, [r3]
 801bd52:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801bd56:	f8cd 8018 	str.w	r8, [sp, #24]
 801bd5a:	9307      	str	r3, [sp, #28]
 801bd5c:	4b9f      	ldr	r3, [pc, #636]	; (801bfdc <_printf_float+0x2d8>)
 801bd5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801bd62:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 801bd66:	f7e4 fee5 	bl	8000b34 <__aeabi_dcmpun>
 801bd6a:	bb88      	cbnz	r0, 801bdd0 <_printf_float+0xcc>
 801bd6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801bd70:	4b9a      	ldr	r3, [pc, #616]	; (801bfdc <_printf_float+0x2d8>)
 801bd72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801bd76:	f7e4 febf 	bl	8000af8 <__aeabi_dcmple>
 801bd7a:	bb48      	cbnz	r0, 801bdd0 <_printf_float+0xcc>
 801bd7c:	2200      	movs	r2, #0
 801bd7e:	2300      	movs	r3, #0
 801bd80:	4640      	mov	r0, r8
 801bd82:	4649      	mov	r1, r9
 801bd84:	f7e4 feae 	bl	8000ae4 <__aeabi_dcmplt>
 801bd88:	b110      	cbz	r0, 801bd90 <_printf_float+0x8c>
 801bd8a:	232d      	movs	r3, #45	; 0x2d
 801bd8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bd90:	4a93      	ldr	r2, [pc, #588]	; (801bfe0 <_printf_float+0x2dc>)
 801bd92:	4b94      	ldr	r3, [pc, #592]	; (801bfe4 <_printf_float+0x2e0>)
 801bd94:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801bd98:	bf94      	ite	ls
 801bd9a:	4690      	movls	r8, r2
 801bd9c:	4698      	movhi	r8, r3
 801bd9e:	2303      	movs	r3, #3
 801bda0:	f04f 0900 	mov.w	r9, #0
 801bda4:	6123      	str	r3, [r4, #16]
 801bda6:	9b05      	ldr	r3, [sp, #20]
 801bda8:	f023 0304 	bic.w	r3, r3, #4
 801bdac:	6023      	str	r3, [r4, #0]
 801bdae:	4633      	mov	r3, r6
 801bdb0:	aa0b      	add	r2, sp, #44	; 0x2c
 801bdb2:	4621      	mov	r1, r4
 801bdb4:	4628      	mov	r0, r5
 801bdb6:	9700      	str	r7, [sp, #0]
 801bdb8:	f000 f9da 	bl	801c170 <_printf_common>
 801bdbc:	3001      	adds	r0, #1
 801bdbe:	f040 8090 	bne.w	801bee2 <_printf_float+0x1de>
 801bdc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bdc6:	b00d      	add	sp, #52	; 0x34
 801bdc8:	ecbd 8b02 	vpop	{d8}
 801bdcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bdd0:	4642      	mov	r2, r8
 801bdd2:	464b      	mov	r3, r9
 801bdd4:	4640      	mov	r0, r8
 801bdd6:	4649      	mov	r1, r9
 801bdd8:	f7e4 feac 	bl	8000b34 <__aeabi_dcmpun>
 801bddc:	b140      	cbz	r0, 801bdf0 <_printf_float+0xec>
 801bdde:	464b      	mov	r3, r9
 801bde0:	4a81      	ldr	r2, [pc, #516]	; (801bfe8 <_printf_float+0x2e4>)
 801bde2:	2b00      	cmp	r3, #0
 801bde4:	bfbc      	itt	lt
 801bde6:	232d      	movlt	r3, #45	; 0x2d
 801bde8:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801bdec:	4b7f      	ldr	r3, [pc, #508]	; (801bfec <_printf_float+0x2e8>)
 801bdee:	e7d1      	b.n	801bd94 <_printf_float+0x90>
 801bdf0:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801bdf4:	6863      	ldr	r3, [r4, #4]
 801bdf6:	9206      	str	r2, [sp, #24]
 801bdf8:	1c5a      	adds	r2, r3, #1
 801bdfa:	d13f      	bne.n	801be7c <_printf_float+0x178>
 801bdfc:	2306      	movs	r3, #6
 801bdfe:	6063      	str	r3, [r4, #4]
 801be00:	9b05      	ldr	r3, [sp, #20]
 801be02:	4628      	mov	r0, r5
 801be04:	6861      	ldr	r1, [r4, #4]
 801be06:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801be0a:	2300      	movs	r3, #0
 801be0c:	9303      	str	r3, [sp, #12]
 801be0e:	ab0a      	add	r3, sp, #40	; 0x28
 801be10:	6022      	str	r2, [r4, #0]
 801be12:	e9cd b301 	strd	fp, r3, [sp, #4]
 801be16:	ab09      	add	r3, sp, #36	; 0x24
 801be18:	ec49 8b10 	vmov	d0, r8, r9
 801be1c:	9300      	str	r3, [sp, #0]
 801be1e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801be22:	f7ff fecf 	bl	801bbc4 <__cvt>
 801be26:	9b06      	ldr	r3, [sp, #24]
 801be28:	4680      	mov	r8, r0
 801be2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801be2c:	2b47      	cmp	r3, #71	; 0x47
 801be2e:	d108      	bne.n	801be42 <_printf_float+0x13e>
 801be30:	1cc8      	adds	r0, r1, #3
 801be32:	db02      	blt.n	801be3a <_printf_float+0x136>
 801be34:	6863      	ldr	r3, [r4, #4]
 801be36:	4299      	cmp	r1, r3
 801be38:	dd41      	ble.n	801bebe <_printf_float+0x1ba>
 801be3a:	f1ab 0302 	sub.w	r3, fp, #2
 801be3e:	fa5f fb83 	uxtb.w	fp, r3
 801be42:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801be46:	d820      	bhi.n	801be8a <_printf_float+0x186>
 801be48:	3901      	subs	r1, #1
 801be4a:	465a      	mov	r2, fp
 801be4c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801be50:	9109      	str	r1, [sp, #36]	; 0x24
 801be52:	f7ff ff19 	bl	801bc88 <__exponent>
 801be56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801be58:	4681      	mov	r9, r0
 801be5a:	1813      	adds	r3, r2, r0
 801be5c:	2a01      	cmp	r2, #1
 801be5e:	6123      	str	r3, [r4, #16]
 801be60:	dc02      	bgt.n	801be68 <_printf_float+0x164>
 801be62:	6822      	ldr	r2, [r4, #0]
 801be64:	07d2      	lsls	r2, r2, #31
 801be66:	d501      	bpl.n	801be6c <_printf_float+0x168>
 801be68:	3301      	adds	r3, #1
 801be6a:	6123      	str	r3, [r4, #16]
 801be6c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801be70:	2b00      	cmp	r3, #0
 801be72:	d09c      	beq.n	801bdae <_printf_float+0xaa>
 801be74:	232d      	movs	r3, #45	; 0x2d
 801be76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801be7a:	e798      	b.n	801bdae <_printf_float+0xaa>
 801be7c:	9a06      	ldr	r2, [sp, #24]
 801be7e:	2a47      	cmp	r2, #71	; 0x47
 801be80:	d1be      	bne.n	801be00 <_printf_float+0xfc>
 801be82:	2b00      	cmp	r3, #0
 801be84:	d1bc      	bne.n	801be00 <_printf_float+0xfc>
 801be86:	2301      	movs	r3, #1
 801be88:	e7b9      	b.n	801bdfe <_printf_float+0xfa>
 801be8a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801be8e:	d118      	bne.n	801bec2 <_printf_float+0x1be>
 801be90:	2900      	cmp	r1, #0
 801be92:	6863      	ldr	r3, [r4, #4]
 801be94:	dd0b      	ble.n	801beae <_printf_float+0x1aa>
 801be96:	6121      	str	r1, [r4, #16]
 801be98:	b913      	cbnz	r3, 801bea0 <_printf_float+0x19c>
 801be9a:	6822      	ldr	r2, [r4, #0]
 801be9c:	07d0      	lsls	r0, r2, #31
 801be9e:	d502      	bpl.n	801bea6 <_printf_float+0x1a2>
 801bea0:	3301      	adds	r3, #1
 801bea2:	440b      	add	r3, r1
 801bea4:	6123      	str	r3, [r4, #16]
 801bea6:	f04f 0900 	mov.w	r9, #0
 801beaa:	65a1      	str	r1, [r4, #88]	; 0x58
 801beac:	e7de      	b.n	801be6c <_printf_float+0x168>
 801beae:	b913      	cbnz	r3, 801beb6 <_printf_float+0x1b2>
 801beb0:	6822      	ldr	r2, [r4, #0]
 801beb2:	07d2      	lsls	r2, r2, #31
 801beb4:	d501      	bpl.n	801beba <_printf_float+0x1b6>
 801beb6:	3302      	adds	r3, #2
 801beb8:	e7f4      	b.n	801bea4 <_printf_float+0x1a0>
 801beba:	2301      	movs	r3, #1
 801bebc:	e7f2      	b.n	801bea4 <_printf_float+0x1a0>
 801bebe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801bec2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bec4:	4299      	cmp	r1, r3
 801bec6:	db05      	blt.n	801bed4 <_printf_float+0x1d0>
 801bec8:	6823      	ldr	r3, [r4, #0]
 801beca:	6121      	str	r1, [r4, #16]
 801becc:	07d8      	lsls	r0, r3, #31
 801bece:	d5ea      	bpl.n	801bea6 <_printf_float+0x1a2>
 801bed0:	1c4b      	adds	r3, r1, #1
 801bed2:	e7e7      	b.n	801bea4 <_printf_float+0x1a0>
 801bed4:	2900      	cmp	r1, #0
 801bed6:	bfd4      	ite	le
 801bed8:	f1c1 0202 	rsble	r2, r1, #2
 801bedc:	2201      	movgt	r2, #1
 801bede:	4413      	add	r3, r2
 801bee0:	e7e0      	b.n	801bea4 <_printf_float+0x1a0>
 801bee2:	6823      	ldr	r3, [r4, #0]
 801bee4:	055a      	lsls	r2, r3, #21
 801bee6:	d407      	bmi.n	801bef8 <_printf_float+0x1f4>
 801bee8:	6923      	ldr	r3, [r4, #16]
 801beea:	4642      	mov	r2, r8
 801beec:	4631      	mov	r1, r6
 801beee:	4628      	mov	r0, r5
 801bef0:	47b8      	blx	r7
 801bef2:	3001      	adds	r0, #1
 801bef4:	d12c      	bne.n	801bf50 <_printf_float+0x24c>
 801bef6:	e764      	b.n	801bdc2 <_printf_float+0xbe>
 801bef8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801befc:	f240 80e0 	bls.w	801c0c0 <_printf_float+0x3bc>
 801bf00:	2200      	movs	r2, #0
 801bf02:	2300      	movs	r3, #0
 801bf04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801bf08:	f7e4 fde2 	bl	8000ad0 <__aeabi_dcmpeq>
 801bf0c:	2800      	cmp	r0, #0
 801bf0e:	d034      	beq.n	801bf7a <_printf_float+0x276>
 801bf10:	2301      	movs	r3, #1
 801bf12:	4a37      	ldr	r2, [pc, #220]	; (801bff0 <_printf_float+0x2ec>)
 801bf14:	4631      	mov	r1, r6
 801bf16:	4628      	mov	r0, r5
 801bf18:	47b8      	blx	r7
 801bf1a:	3001      	adds	r0, #1
 801bf1c:	f43f af51 	beq.w	801bdc2 <_printf_float+0xbe>
 801bf20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801bf24:	429a      	cmp	r2, r3
 801bf26:	db02      	blt.n	801bf2e <_printf_float+0x22a>
 801bf28:	6823      	ldr	r3, [r4, #0]
 801bf2a:	07d8      	lsls	r0, r3, #31
 801bf2c:	d510      	bpl.n	801bf50 <_printf_float+0x24c>
 801bf2e:	ee18 3a10 	vmov	r3, s16
 801bf32:	4652      	mov	r2, sl
 801bf34:	4631      	mov	r1, r6
 801bf36:	4628      	mov	r0, r5
 801bf38:	47b8      	blx	r7
 801bf3a:	3001      	adds	r0, #1
 801bf3c:	f43f af41 	beq.w	801bdc2 <_printf_float+0xbe>
 801bf40:	f04f 0800 	mov.w	r8, #0
 801bf44:	f104 091a 	add.w	r9, r4, #26
 801bf48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bf4a:	3b01      	subs	r3, #1
 801bf4c:	4543      	cmp	r3, r8
 801bf4e:	dc09      	bgt.n	801bf64 <_printf_float+0x260>
 801bf50:	6823      	ldr	r3, [r4, #0]
 801bf52:	079b      	lsls	r3, r3, #30
 801bf54:	f100 8107 	bmi.w	801c166 <_printf_float+0x462>
 801bf58:	68e0      	ldr	r0, [r4, #12]
 801bf5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bf5c:	4298      	cmp	r0, r3
 801bf5e:	bfb8      	it	lt
 801bf60:	4618      	movlt	r0, r3
 801bf62:	e730      	b.n	801bdc6 <_printf_float+0xc2>
 801bf64:	2301      	movs	r3, #1
 801bf66:	464a      	mov	r2, r9
 801bf68:	4631      	mov	r1, r6
 801bf6a:	4628      	mov	r0, r5
 801bf6c:	47b8      	blx	r7
 801bf6e:	3001      	adds	r0, #1
 801bf70:	f43f af27 	beq.w	801bdc2 <_printf_float+0xbe>
 801bf74:	f108 0801 	add.w	r8, r8, #1
 801bf78:	e7e6      	b.n	801bf48 <_printf_float+0x244>
 801bf7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bf7c:	2b00      	cmp	r3, #0
 801bf7e:	dc39      	bgt.n	801bff4 <_printf_float+0x2f0>
 801bf80:	2301      	movs	r3, #1
 801bf82:	4a1b      	ldr	r2, [pc, #108]	; (801bff0 <_printf_float+0x2ec>)
 801bf84:	4631      	mov	r1, r6
 801bf86:	4628      	mov	r0, r5
 801bf88:	47b8      	blx	r7
 801bf8a:	3001      	adds	r0, #1
 801bf8c:	f43f af19 	beq.w	801bdc2 <_printf_float+0xbe>
 801bf90:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801bf94:	4313      	orrs	r3, r2
 801bf96:	d102      	bne.n	801bf9e <_printf_float+0x29a>
 801bf98:	6823      	ldr	r3, [r4, #0]
 801bf9a:	07d9      	lsls	r1, r3, #31
 801bf9c:	d5d8      	bpl.n	801bf50 <_printf_float+0x24c>
 801bf9e:	ee18 3a10 	vmov	r3, s16
 801bfa2:	4652      	mov	r2, sl
 801bfa4:	4631      	mov	r1, r6
 801bfa6:	4628      	mov	r0, r5
 801bfa8:	47b8      	blx	r7
 801bfaa:	3001      	adds	r0, #1
 801bfac:	f43f af09 	beq.w	801bdc2 <_printf_float+0xbe>
 801bfb0:	f04f 0900 	mov.w	r9, #0
 801bfb4:	f104 0a1a 	add.w	sl, r4, #26
 801bfb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bfba:	425b      	negs	r3, r3
 801bfbc:	454b      	cmp	r3, r9
 801bfbe:	dc01      	bgt.n	801bfc4 <_printf_float+0x2c0>
 801bfc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bfc2:	e792      	b.n	801beea <_printf_float+0x1e6>
 801bfc4:	2301      	movs	r3, #1
 801bfc6:	4652      	mov	r2, sl
 801bfc8:	4631      	mov	r1, r6
 801bfca:	4628      	mov	r0, r5
 801bfcc:	47b8      	blx	r7
 801bfce:	3001      	adds	r0, #1
 801bfd0:	f43f aef7 	beq.w	801bdc2 <_printf_float+0xbe>
 801bfd4:	f109 0901 	add.w	r9, r9, #1
 801bfd8:	e7ee      	b.n	801bfb8 <_printf_float+0x2b4>
 801bfda:	bf00      	nop
 801bfdc:	7fefffff 	.word	0x7fefffff
 801bfe0:	0803844c 	.word	0x0803844c
 801bfe4:	08038450 	.word	0x08038450
 801bfe8:	08038454 	.word	0x08038454
 801bfec:	08038458 	.word	0x08038458
 801bff0:	0803845c 	.word	0x0803845c
 801bff4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bff6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801bff8:	429a      	cmp	r2, r3
 801bffa:	bfa8      	it	ge
 801bffc:	461a      	movge	r2, r3
 801bffe:	2a00      	cmp	r2, #0
 801c000:	4691      	mov	r9, r2
 801c002:	dc37      	bgt.n	801c074 <_printf_float+0x370>
 801c004:	f04f 0b00 	mov.w	fp, #0
 801c008:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c00c:	f104 021a 	add.w	r2, r4, #26
 801c010:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801c012:	9305      	str	r3, [sp, #20]
 801c014:	eba3 0309 	sub.w	r3, r3, r9
 801c018:	455b      	cmp	r3, fp
 801c01a:	dc33      	bgt.n	801c084 <_printf_float+0x380>
 801c01c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801c020:	429a      	cmp	r2, r3
 801c022:	db3b      	blt.n	801c09c <_printf_float+0x398>
 801c024:	6823      	ldr	r3, [r4, #0]
 801c026:	07da      	lsls	r2, r3, #31
 801c028:	d438      	bmi.n	801c09c <_printf_float+0x398>
 801c02a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801c02e:	eba2 0903 	sub.w	r9, r2, r3
 801c032:	9b05      	ldr	r3, [sp, #20]
 801c034:	1ad2      	subs	r2, r2, r3
 801c036:	4591      	cmp	r9, r2
 801c038:	bfa8      	it	ge
 801c03a:	4691      	movge	r9, r2
 801c03c:	f1b9 0f00 	cmp.w	r9, #0
 801c040:	dc35      	bgt.n	801c0ae <_printf_float+0x3aa>
 801c042:	f04f 0800 	mov.w	r8, #0
 801c046:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c04a:	f104 0a1a 	add.w	sl, r4, #26
 801c04e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801c052:	1a9b      	subs	r3, r3, r2
 801c054:	eba3 0309 	sub.w	r3, r3, r9
 801c058:	4543      	cmp	r3, r8
 801c05a:	f77f af79 	ble.w	801bf50 <_printf_float+0x24c>
 801c05e:	2301      	movs	r3, #1
 801c060:	4652      	mov	r2, sl
 801c062:	4631      	mov	r1, r6
 801c064:	4628      	mov	r0, r5
 801c066:	47b8      	blx	r7
 801c068:	3001      	adds	r0, #1
 801c06a:	f43f aeaa 	beq.w	801bdc2 <_printf_float+0xbe>
 801c06e:	f108 0801 	add.w	r8, r8, #1
 801c072:	e7ec      	b.n	801c04e <_printf_float+0x34a>
 801c074:	4613      	mov	r3, r2
 801c076:	4631      	mov	r1, r6
 801c078:	4642      	mov	r2, r8
 801c07a:	4628      	mov	r0, r5
 801c07c:	47b8      	blx	r7
 801c07e:	3001      	adds	r0, #1
 801c080:	d1c0      	bne.n	801c004 <_printf_float+0x300>
 801c082:	e69e      	b.n	801bdc2 <_printf_float+0xbe>
 801c084:	2301      	movs	r3, #1
 801c086:	4631      	mov	r1, r6
 801c088:	4628      	mov	r0, r5
 801c08a:	9205      	str	r2, [sp, #20]
 801c08c:	47b8      	blx	r7
 801c08e:	3001      	adds	r0, #1
 801c090:	f43f ae97 	beq.w	801bdc2 <_printf_float+0xbe>
 801c094:	f10b 0b01 	add.w	fp, fp, #1
 801c098:	9a05      	ldr	r2, [sp, #20]
 801c09a:	e7b9      	b.n	801c010 <_printf_float+0x30c>
 801c09c:	ee18 3a10 	vmov	r3, s16
 801c0a0:	4652      	mov	r2, sl
 801c0a2:	4631      	mov	r1, r6
 801c0a4:	4628      	mov	r0, r5
 801c0a6:	47b8      	blx	r7
 801c0a8:	3001      	adds	r0, #1
 801c0aa:	d1be      	bne.n	801c02a <_printf_float+0x326>
 801c0ac:	e689      	b.n	801bdc2 <_printf_float+0xbe>
 801c0ae:	9a05      	ldr	r2, [sp, #20]
 801c0b0:	464b      	mov	r3, r9
 801c0b2:	4631      	mov	r1, r6
 801c0b4:	4628      	mov	r0, r5
 801c0b6:	4442      	add	r2, r8
 801c0b8:	47b8      	blx	r7
 801c0ba:	3001      	adds	r0, #1
 801c0bc:	d1c1      	bne.n	801c042 <_printf_float+0x33e>
 801c0be:	e680      	b.n	801bdc2 <_printf_float+0xbe>
 801c0c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c0c2:	2a01      	cmp	r2, #1
 801c0c4:	dc01      	bgt.n	801c0ca <_printf_float+0x3c6>
 801c0c6:	07db      	lsls	r3, r3, #31
 801c0c8:	d53a      	bpl.n	801c140 <_printf_float+0x43c>
 801c0ca:	2301      	movs	r3, #1
 801c0cc:	4642      	mov	r2, r8
 801c0ce:	4631      	mov	r1, r6
 801c0d0:	4628      	mov	r0, r5
 801c0d2:	47b8      	blx	r7
 801c0d4:	3001      	adds	r0, #1
 801c0d6:	f43f ae74 	beq.w	801bdc2 <_printf_float+0xbe>
 801c0da:	ee18 3a10 	vmov	r3, s16
 801c0de:	4652      	mov	r2, sl
 801c0e0:	4631      	mov	r1, r6
 801c0e2:	4628      	mov	r0, r5
 801c0e4:	47b8      	blx	r7
 801c0e6:	3001      	adds	r0, #1
 801c0e8:	f43f ae6b 	beq.w	801bdc2 <_printf_float+0xbe>
 801c0ec:	2200      	movs	r2, #0
 801c0ee:	2300      	movs	r3, #0
 801c0f0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801c0f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801c0f8:	f7e4 fcea 	bl	8000ad0 <__aeabi_dcmpeq>
 801c0fc:	b9d8      	cbnz	r0, 801c136 <_printf_float+0x432>
 801c0fe:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 801c102:	f108 0201 	add.w	r2, r8, #1
 801c106:	4631      	mov	r1, r6
 801c108:	4628      	mov	r0, r5
 801c10a:	47b8      	blx	r7
 801c10c:	3001      	adds	r0, #1
 801c10e:	d10e      	bne.n	801c12e <_printf_float+0x42a>
 801c110:	e657      	b.n	801bdc2 <_printf_float+0xbe>
 801c112:	2301      	movs	r3, #1
 801c114:	4652      	mov	r2, sl
 801c116:	4631      	mov	r1, r6
 801c118:	4628      	mov	r0, r5
 801c11a:	47b8      	blx	r7
 801c11c:	3001      	adds	r0, #1
 801c11e:	f43f ae50 	beq.w	801bdc2 <_printf_float+0xbe>
 801c122:	f108 0801 	add.w	r8, r8, #1
 801c126:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c128:	3b01      	subs	r3, #1
 801c12a:	4543      	cmp	r3, r8
 801c12c:	dcf1      	bgt.n	801c112 <_printf_float+0x40e>
 801c12e:	464b      	mov	r3, r9
 801c130:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801c134:	e6da      	b.n	801beec <_printf_float+0x1e8>
 801c136:	f04f 0800 	mov.w	r8, #0
 801c13a:	f104 0a1a 	add.w	sl, r4, #26
 801c13e:	e7f2      	b.n	801c126 <_printf_float+0x422>
 801c140:	2301      	movs	r3, #1
 801c142:	4642      	mov	r2, r8
 801c144:	e7df      	b.n	801c106 <_printf_float+0x402>
 801c146:	2301      	movs	r3, #1
 801c148:	464a      	mov	r2, r9
 801c14a:	4631      	mov	r1, r6
 801c14c:	4628      	mov	r0, r5
 801c14e:	47b8      	blx	r7
 801c150:	3001      	adds	r0, #1
 801c152:	f43f ae36 	beq.w	801bdc2 <_printf_float+0xbe>
 801c156:	f108 0801 	add.w	r8, r8, #1
 801c15a:	68e3      	ldr	r3, [r4, #12]
 801c15c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801c15e:	1a5b      	subs	r3, r3, r1
 801c160:	4543      	cmp	r3, r8
 801c162:	dcf0      	bgt.n	801c146 <_printf_float+0x442>
 801c164:	e6f8      	b.n	801bf58 <_printf_float+0x254>
 801c166:	f04f 0800 	mov.w	r8, #0
 801c16a:	f104 0919 	add.w	r9, r4, #25
 801c16e:	e7f4      	b.n	801c15a <_printf_float+0x456>

0801c170 <_printf_common>:
 801c170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c174:	4616      	mov	r6, r2
 801c176:	4699      	mov	r9, r3
 801c178:	688a      	ldr	r2, [r1, #8]
 801c17a:	4607      	mov	r7, r0
 801c17c:	690b      	ldr	r3, [r1, #16]
 801c17e:	460c      	mov	r4, r1
 801c180:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801c184:	4293      	cmp	r3, r2
 801c186:	bfb8      	it	lt
 801c188:	4613      	movlt	r3, r2
 801c18a:	6033      	str	r3, [r6, #0]
 801c18c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801c190:	b10a      	cbz	r2, 801c196 <_printf_common+0x26>
 801c192:	3301      	adds	r3, #1
 801c194:	6033      	str	r3, [r6, #0]
 801c196:	6823      	ldr	r3, [r4, #0]
 801c198:	0699      	lsls	r1, r3, #26
 801c19a:	bf42      	ittt	mi
 801c19c:	6833      	ldrmi	r3, [r6, #0]
 801c19e:	3302      	addmi	r3, #2
 801c1a0:	6033      	strmi	r3, [r6, #0]
 801c1a2:	6825      	ldr	r5, [r4, #0]
 801c1a4:	f015 0506 	ands.w	r5, r5, #6
 801c1a8:	d106      	bne.n	801c1b8 <_printf_common+0x48>
 801c1aa:	f104 0a19 	add.w	sl, r4, #25
 801c1ae:	68e3      	ldr	r3, [r4, #12]
 801c1b0:	6832      	ldr	r2, [r6, #0]
 801c1b2:	1a9b      	subs	r3, r3, r2
 801c1b4:	42ab      	cmp	r3, r5
 801c1b6:	dc2b      	bgt.n	801c210 <_printf_common+0xa0>
 801c1b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801c1bc:	1e13      	subs	r3, r2, #0
 801c1be:	6822      	ldr	r2, [r4, #0]
 801c1c0:	bf18      	it	ne
 801c1c2:	2301      	movne	r3, #1
 801c1c4:	0692      	lsls	r2, r2, #26
 801c1c6:	d430      	bmi.n	801c22a <_printf_common+0xba>
 801c1c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c1cc:	4649      	mov	r1, r9
 801c1ce:	4638      	mov	r0, r7
 801c1d0:	47c0      	blx	r8
 801c1d2:	3001      	adds	r0, #1
 801c1d4:	d023      	beq.n	801c21e <_printf_common+0xae>
 801c1d6:	6823      	ldr	r3, [r4, #0]
 801c1d8:	341a      	adds	r4, #26
 801c1da:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 801c1de:	f003 0306 	and.w	r3, r3, #6
 801c1e2:	2b04      	cmp	r3, #4
 801c1e4:	bf0a      	itet	eq
 801c1e6:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 801c1ea:	2500      	movne	r5, #0
 801c1ec:	6833      	ldreq	r3, [r6, #0]
 801c1ee:	f04f 0600 	mov.w	r6, #0
 801c1f2:	bf08      	it	eq
 801c1f4:	1aed      	subeq	r5, r5, r3
 801c1f6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 801c1fa:	bf08      	it	eq
 801c1fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c200:	4293      	cmp	r3, r2
 801c202:	bfc4      	itt	gt
 801c204:	1a9b      	subgt	r3, r3, r2
 801c206:	18ed      	addgt	r5, r5, r3
 801c208:	42b5      	cmp	r5, r6
 801c20a:	d11a      	bne.n	801c242 <_printf_common+0xd2>
 801c20c:	2000      	movs	r0, #0
 801c20e:	e008      	b.n	801c222 <_printf_common+0xb2>
 801c210:	2301      	movs	r3, #1
 801c212:	4652      	mov	r2, sl
 801c214:	4649      	mov	r1, r9
 801c216:	4638      	mov	r0, r7
 801c218:	47c0      	blx	r8
 801c21a:	3001      	adds	r0, #1
 801c21c:	d103      	bne.n	801c226 <_printf_common+0xb6>
 801c21e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c226:	3501      	adds	r5, #1
 801c228:	e7c1      	b.n	801c1ae <_printf_common+0x3e>
 801c22a:	18e1      	adds	r1, r4, r3
 801c22c:	1c5a      	adds	r2, r3, #1
 801c22e:	2030      	movs	r0, #48	; 0x30
 801c230:	3302      	adds	r3, #2
 801c232:	4422      	add	r2, r4
 801c234:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801c238:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801c23c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801c240:	e7c2      	b.n	801c1c8 <_printf_common+0x58>
 801c242:	2301      	movs	r3, #1
 801c244:	4622      	mov	r2, r4
 801c246:	4649      	mov	r1, r9
 801c248:	4638      	mov	r0, r7
 801c24a:	47c0      	blx	r8
 801c24c:	3001      	adds	r0, #1
 801c24e:	d0e6      	beq.n	801c21e <_printf_common+0xae>
 801c250:	3601      	adds	r6, #1
 801c252:	e7d9      	b.n	801c208 <_printf_common+0x98>

0801c254 <_printf_i>:
 801c254:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c258:	7e0f      	ldrb	r7, [r1, #24]
 801c25a:	4691      	mov	r9, r2
 801c25c:	4680      	mov	r8, r0
 801c25e:	460c      	mov	r4, r1
 801c260:	2f78      	cmp	r7, #120	; 0x78
 801c262:	469a      	mov	sl, r3
 801c264:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c266:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801c26a:	d807      	bhi.n	801c27c <_printf_i+0x28>
 801c26c:	2f62      	cmp	r7, #98	; 0x62
 801c26e:	d80a      	bhi.n	801c286 <_printf_i+0x32>
 801c270:	2f00      	cmp	r7, #0
 801c272:	f000 80d3 	beq.w	801c41c <_printf_i+0x1c8>
 801c276:	2f58      	cmp	r7, #88	; 0x58
 801c278:	f000 80bf 	beq.w	801c3fa <_printf_i+0x1a6>
 801c27c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c280:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801c284:	e03a      	b.n	801c2fc <_printf_i+0xa8>
 801c286:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801c28a:	2b15      	cmp	r3, #21
 801c28c:	d8f6      	bhi.n	801c27c <_printf_i+0x28>
 801c28e:	a101      	add	r1, pc, #4	; (adr r1, 801c294 <_printf_i+0x40>)
 801c290:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c294:	0801c2ed 	.word	0x0801c2ed
 801c298:	0801c301 	.word	0x0801c301
 801c29c:	0801c27d 	.word	0x0801c27d
 801c2a0:	0801c27d 	.word	0x0801c27d
 801c2a4:	0801c27d 	.word	0x0801c27d
 801c2a8:	0801c27d 	.word	0x0801c27d
 801c2ac:	0801c301 	.word	0x0801c301
 801c2b0:	0801c27d 	.word	0x0801c27d
 801c2b4:	0801c27d 	.word	0x0801c27d
 801c2b8:	0801c27d 	.word	0x0801c27d
 801c2bc:	0801c27d 	.word	0x0801c27d
 801c2c0:	0801c403 	.word	0x0801c403
 801c2c4:	0801c32d 	.word	0x0801c32d
 801c2c8:	0801c3bf 	.word	0x0801c3bf
 801c2cc:	0801c27d 	.word	0x0801c27d
 801c2d0:	0801c27d 	.word	0x0801c27d
 801c2d4:	0801c425 	.word	0x0801c425
 801c2d8:	0801c27d 	.word	0x0801c27d
 801c2dc:	0801c32d 	.word	0x0801c32d
 801c2e0:	0801c27d 	.word	0x0801c27d
 801c2e4:	0801c27d 	.word	0x0801c27d
 801c2e8:	0801c3c7 	.word	0x0801c3c7
 801c2ec:	682b      	ldr	r3, [r5, #0]
 801c2ee:	1d1a      	adds	r2, r3, #4
 801c2f0:	681b      	ldr	r3, [r3, #0]
 801c2f2:	602a      	str	r2, [r5, #0]
 801c2f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c2f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c2fc:	2301      	movs	r3, #1
 801c2fe:	e09e      	b.n	801c43e <_printf_i+0x1ea>
 801c300:	6820      	ldr	r0, [r4, #0]
 801c302:	682b      	ldr	r3, [r5, #0]
 801c304:	0607      	lsls	r7, r0, #24
 801c306:	f103 0104 	add.w	r1, r3, #4
 801c30a:	6029      	str	r1, [r5, #0]
 801c30c:	d501      	bpl.n	801c312 <_printf_i+0xbe>
 801c30e:	681e      	ldr	r6, [r3, #0]
 801c310:	e003      	b.n	801c31a <_printf_i+0xc6>
 801c312:	0646      	lsls	r6, r0, #25
 801c314:	d5fb      	bpl.n	801c30e <_printf_i+0xba>
 801c316:	f9b3 6000 	ldrsh.w	r6, [r3]
 801c31a:	2e00      	cmp	r6, #0
 801c31c:	da03      	bge.n	801c326 <_printf_i+0xd2>
 801c31e:	232d      	movs	r3, #45	; 0x2d
 801c320:	4276      	negs	r6, r6
 801c322:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c326:	4859      	ldr	r0, [pc, #356]	; (801c48c <_printf_i+0x238>)
 801c328:	230a      	movs	r3, #10
 801c32a:	e012      	b.n	801c352 <_printf_i+0xfe>
 801c32c:	682b      	ldr	r3, [r5, #0]
 801c32e:	6820      	ldr	r0, [r4, #0]
 801c330:	1d19      	adds	r1, r3, #4
 801c332:	6029      	str	r1, [r5, #0]
 801c334:	0605      	lsls	r5, r0, #24
 801c336:	d501      	bpl.n	801c33c <_printf_i+0xe8>
 801c338:	681e      	ldr	r6, [r3, #0]
 801c33a:	e002      	b.n	801c342 <_printf_i+0xee>
 801c33c:	0641      	lsls	r1, r0, #25
 801c33e:	d5fb      	bpl.n	801c338 <_printf_i+0xe4>
 801c340:	881e      	ldrh	r6, [r3, #0]
 801c342:	2f6f      	cmp	r7, #111	; 0x6f
 801c344:	4851      	ldr	r0, [pc, #324]	; (801c48c <_printf_i+0x238>)
 801c346:	bf0c      	ite	eq
 801c348:	2308      	moveq	r3, #8
 801c34a:	230a      	movne	r3, #10
 801c34c:	2100      	movs	r1, #0
 801c34e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801c352:	6865      	ldr	r5, [r4, #4]
 801c354:	2d00      	cmp	r5, #0
 801c356:	60a5      	str	r5, [r4, #8]
 801c358:	bfa2      	ittt	ge
 801c35a:	6821      	ldrge	r1, [r4, #0]
 801c35c:	f021 0104 	bicge.w	r1, r1, #4
 801c360:	6021      	strge	r1, [r4, #0]
 801c362:	b90e      	cbnz	r6, 801c368 <_printf_i+0x114>
 801c364:	2d00      	cmp	r5, #0
 801c366:	d04a      	beq.n	801c3fe <_printf_i+0x1aa>
 801c368:	4615      	mov	r5, r2
 801c36a:	fbb6 f1f3 	udiv	r1, r6, r3
 801c36e:	fb03 6711 	mls	r7, r3, r1, r6
 801c372:	5dc7      	ldrb	r7, [r0, r7]
 801c374:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801c378:	4637      	mov	r7, r6
 801c37a:	460e      	mov	r6, r1
 801c37c:	42bb      	cmp	r3, r7
 801c37e:	d9f4      	bls.n	801c36a <_printf_i+0x116>
 801c380:	2b08      	cmp	r3, #8
 801c382:	d10b      	bne.n	801c39c <_printf_i+0x148>
 801c384:	6823      	ldr	r3, [r4, #0]
 801c386:	07de      	lsls	r6, r3, #31
 801c388:	d508      	bpl.n	801c39c <_printf_i+0x148>
 801c38a:	6923      	ldr	r3, [r4, #16]
 801c38c:	6861      	ldr	r1, [r4, #4]
 801c38e:	4299      	cmp	r1, r3
 801c390:	bfde      	ittt	le
 801c392:	2330      	movle	r3, #48	; 0x30
 801c394:	f805 3c01 	strble.w	r3, [r5, #-1]
 801c398:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801c39c:	1b52      	subs	r2, r2, r5
 801c39e:	6122      	str	r2, [r4, #16]
 801c3a0:	464b      	mov	r3, r9
 801c3a2:	aa03      	add	r2, sp, #12
 801c3a4:	4621      	mov	r1, r4
 801c3a6:	4640      	mov	r0, r8
 801c3a8:	f8cd a000 	str.w	sl, [sp]
 801c3ac:	f7ff fee0 	bl	801c170 <_printf_common>
 801c3b0:	3001      	adds	r0, #1
 801c3b2:	d149      	bne.n	801c448 <_printf_i+0x1f4>
 801c3b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c3b8:	b004      	add	sp, #16
 801c3ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c3be:	6823      	ldr	r3, [r4, #0]
 801c3c0:	f043 0320 	orr.w	r3, r3, #32
 801c3c4:	6023      	str	r3, [r4, #0]
 801c3c6:	2778      	movs	r7, #120	; 0x78
 801c3c8:	4831      	ldr	r0, [pc, #196]	; (801c490 <_printf_i+0x23c>)
 801c3ca:	6823      	ldr	r3, [r4, #0]
 801c3cc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801c3d0:	061f      	lsls	r7, r3, #24
 801c3d2:	6829      	ldr	r1, [r5, #0]
 801c3d4:	f851 6b04 	ldr.w	r6, [r1], #4
 801c3d8:	d402      	bmi.n	801c3e0 <_printf_i+0x18c>
 801c3da:	065f      	lsls	r7, r3, #25
 801c3dc:	bf48      	it	mi
 801c3de:	b2b6      	uxthmi	r6, r6
 801c3e0:	07df      	lsls	r7, r3, #31
 801c3e2:	6029      	str	r1, [r5, #0]
 801c3e4:	bf44      	itt	mi
 801c3e6:	f043 0320 	orrmi.w	r3, r3, #32
 801c3ea:	6023      	strmi	r3, [r4, #0]
 801c3ec:	b91e      	cbnz	r6, 801c3f6 <_printf_i+0x1a2>
 801c3ee:	6823      	ldr	r3, [r4, #0]
 801c3f0:	f023 0320 	bic.w	r3, r3, #32
 801c3f4:	6023      	str	r3, [r4, #0]
 801c3f6:	2310      	movs	r3, #16
 801c3f8:	e7a8      	b.n	801c34c <_printf_i+0xf8>
 801c3fa:	4824      	ldr	r0, [pc, #144]	; (801c48c <_printf_i+0x238>)
 801c3fc:	e7e5      	b.n	801c3ca <_printf_i+0x176>
 801c3fe:	4615      	mov	r5, r2
 801c400:	e7be      	b.n	801c380 <_printf_i+0x12c>
 801c402:	682b      	ldr	r3, [r5, #0]
 801c404:	6826      	ldr	r6, [r4, #0]
 801c406:	1d18      	adds	r0, r3, #4
 801c408:	6961      	ldr	r1, [r4, #20]
 801c40a:	6028      	str	r0, [r5, #0]
 801c40c:	0635      	lsls	r5, r6, #24
 801c40e:	681b      	ldr	r3, [r3, #0]
 801c410:	d501      	bpl.n	801c416 <_printf_i+0x1c2>
 801c412:	6019      	str	r1, [r3, #0]
 801c414:	e002      	b.n	801c41c <_printf_i+0x1c8>
 801c416:	0670      	lsls	r0, r6, #25
 801c418:	d5fb      	bpl.n	801c412 <_printf_i+0x1be>
 801c41a:	8019      	strh	r1, [r3, #0]
 801c41c:	2300      	movs	r3, #0
 801c41e:	4615      	mov	r5, r2
 801c420:	6123      	str	r3, [r4, #16]
 801c422:	e7bd      	b.n	801c3a0 <_printf_i+0x14c>
 801c424:	682b      	ldr	r3, [r5, #0]
 801c426:	2100      	movs	r1, #0
 801c428:	1d1a      	adds	r2, r3, #4
 801c42a:	602a      	str	r2, [r5, #0]
 801c42c:	681d      	ldr	r5, [r3, #0]
 801c42e:	6862      	ldr	r2, [r4, #4]
 801c430:	4628      	mov	r0, r5
 801c432:	f001 fa7e 	bl	801d932 <memchr>
 801c436:	b108      	cbz	r0, 801c43c <_printf_i+0x1e8>
 801c438:	1b40      	subs	r0, r0, r5
 801c43a:	6060      	str	r0, [r4, #4]
 801c43c:	6863      	ldr	r3, [r4, #4]
 801c43e:	6123      	str	r3, [r4, #16]
 801c440:	2300      	movs	r3, #0
 801c442:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c446:	e7ab      	b.n	801c3a0 <_printf_i+0x14c>
 801c448:	6923      	ldr	r3, [r4, #16]
 801c44a:	462a      	mov	r2, r5
 801c44c:	4649      	mov	r1, r9
 801c44e:	4640      	mov	r0, r8
 801c450:	47d0      	blx	sl
 801c452:	3001      	adds	r0, #1
 801c454:	d0ae      	beq.n	801c3b4 <_printf_i+0x160>
 801c456:	6823      	ldr	r3, [r4, #0]
 801c458:	079b      	lsls	r3, r3, #30
 801c45a:	d413      	bmi.n	801c484 <_printf_i+0x230>
 801c45c:	68e0      	ldr	r0, [r4, #12]
 801c45e:	9b03      	ldr	r3, [sp, #12]
 801c460:	4298      	cmp	r0, r3
 801c462:	bfb8      	it	lt
 801c464:	4618      	movlt	r0, r3
 801c466:	e7a7      	b.n	801c3b8 <_printf_i+0x164>
 801c468:	2301      	movs	r3, #1
 801c46a:	4632      	mov	r2, r6
 801c46c:	4649      	mov	r1, r9
 801c46e:	4640      	mov	r0, r8
 801c470:	47d0      	blx	sl
 801c472:	3001      	adds	r0, #1
 801c474:	d09e      	beq.n	801c3b4 <_printf_i+0x160>
 801c476:	3501      	adds	r5, #1
 801c478:	68e3      	ldr	r3, [r4, #12]
 801c47a:	9903      	ldr	r1, [sp, #12]
 801c47c:	1a5b      	subs	r3, r3, r1
 801c47e:	42ab      	cmp	r3, r5
 801c480:	dcf2      	bgt.n	801c468 <_printf_i+0x214>
 801c482:	e7eb      	b.n	801c45c <_printf_i+0x208>
 801c484:	2500      	movs	r5, #0
 801c486:	f104 0619 	add.w	r6, r4, #25
 801c48a:	e7f5      	b.n	801c478 <_printf_i+0x224>
 801c48c:	0803845e 	.word	0x0803845e
 801c490:	0803846f 	.word	0x0803846f

0801c494 <_scanf_float>:
 801c494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c498:	b087      	sub	sp, #28
 801c49a:	4617      	mov	r7, r2
 801c49c:	468b      	mov	fp, r1
 801c49e:	4680      	mov	r8, r0
 801c4a0:	9303      	str	r3, [sp, #12]
 801c4a2:	460c      	mov	r4, r1
 801c4a4:	688b      	ldr	r3, [r1, #8]
 801c4a6:	1e5a      	subs	r2, r3, #1
 801c4a8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801c4ac:	bf8b      	itete	hi
 801c4ae:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801c4b2:	2300      	movls	r3, #0
 801c4b4:	195b      	addhi	r3, r3, r5
 801c4b6:	9302      	strls	r3, [sp, #8]
 801c4b8:	f04f 0500 	mov.w	r5, #0
 801c4bc:	bf84      	itt	hi
 801c4be:	9302      	strhi	r3, [sp, #8]
 801c4c0:	f240 135d 	movwhi	r3, #349	; 0x15d
 801c4c4:	46aa      	mov	sl, r5
 801c4c6:	46a9      	mov	r9, r5
 801c4c8:	bf88      	it	hi
 801c4ca:	608b      	strhi	r3, [r1, #8]
 801c4cc:	680b      	ldr	r3, [r1, #0]
 801c4ce:	9501      	str	r5, [sp, #4]
 801c4d0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801c4d4:	f84b 3b1c 	str.w	r3, [fp], #28
 801c4d8:	465e      	mov	r6, fp
 801c4da:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801c4de:	68a2      	ldr	r2, [r4, #8]
 801c4e0:	b152      	cbz	r2, 801c4f8 <_scanf_float+0x64>
 801c4e2:	683b      	ldr	r3, [r7, #0]
 801c4e4:	781b      	ldrb	r3, [r3, #0]
 801c4e6:	2b4e      	cmp	r3, #78	; 0x4e
 801c4e8:	d864      	bhi.n	801c5b4 <_scanf_float+0x120>
 801c4ea:	2b40      	cmp	r3, #64	; 0x40
 801c4ec:	d83c      	bhi.n	801c568 <_scanf_float+0xd4>
 801c4ee:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801c4f2:	b2c8      	uxtb	r0, r1
 801c4f4:	280e      	cmp	r0, #14
 801c4f6:	d93a      	bls.n	801c56e <_scanf_float+0xda>
 801c4f8:	f1b9 0f00 	cmp.w	r9, #0
 801c4fc:	d003      	beq.n	801c506 <_scanf_float+0x72>
 801c4fe:	6823      	ldr	r3, [r4, #0]
 801c500:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801c504:	6023      	str	r3, [r4, #0]
 801c506:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801c50a:	f1ba 0f01 	cmp.w	sl, #1
 801c50e:	f200 8113 	bhi.w	801c738 <_scanf_float+0x2a4>
 801c512:	455e      	cmp	r6, fp
 801c514:	f200 8105 	bhi.w	801c722 <_scanf_float+0x28e>
 801c518:	2501      	movs	r5, #1
 801c51a:	4628      	mov	r0, r5
 801c51c:	b007      	add	sp, #28
 801c51e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c522:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801c526:	2a0d      	cmp	r2, #13
 801c528:	d8e6      	bhi.n	801c4f8 <_scanf_float+0x64>
 801c52a:	a101      	add	r1, pc, #4	; (adr r1, 801c530 <_scanf_float+0x9c>)
 801c52c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801c530:	0801c66f 	.word	0x0801c66f
 801c534:	0801c4f9 	.word	0x0801c4f9
 801c538:	0801c4f9 	.word	0x0801c4f9
 801c53c:	0801c4f9 	.word	0x0801c4f9
 801c540:	0801c6cf 	.word	0x0801c6cf
 801c544:	0801c6a7 	.word	0x0801c6a7
 801c548:	0801c4f9 	.word	0x0801c4f9
 801c54c:	0801c4f9 	.word	0x0801c4f9
 801c550:	0801c67d 	.word	0x0801c67d
 801c554:	0801c4f9 	.word	0x0801c4f9
 801c558:	0801c4f9 	.word	0x0801c4f9
 801c55c:	0801c4f9 	.word	0x0801c4f9
 801c560:	0801c4f9 	.word	0x0801c4f9
 801c564:	0801c635 	.word	0x0801c635
 801c568:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801c56c:	e7db      	b.n	801c526 <_scanf_float+0x92>
 801c56e:	290e      	cmp	r1, #14
 801c570:	d8c2      	bhi.n	801c4f8 <_scanf_float+0x64>
 801c572:	a001      	add	r0, pc, #4	; (adr r0, 801c578 <_scanf_float+0xe4>)
 801c574:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801c578:	0801c627 	.word	0x0801c627
 801c57c:	0801c4f9 	.word	0x0801c4f9
 801c580:	0801c627 	.word	0x0801c627
 801c584:	0801c6bb 	.word	0x0801c6bb
 801c588:	0801c4f9 	.word	0x0801c4f9
 801c58c:	0801c5d5 	.word	0x0801c5d5
 801c590:	0801c611 	.word	0x0801c611
 801c594:	0801c611 	.word	0x0801c611
 801c598:	0801c611 	.word	0x0801c611
 801c59c:	0801c611 	.word	0x0801c611
 801c5a0:	0801c611 	.word	0x0801c611
 801c5a4:	0801c611 	.word	0x0801c611
 801c5a8:	0801c611 	.word	0x0801c611
 801c5ac:	0801c611 	.word	0x0801c611
 801c5b0:	0801c611 	.word	0x0801c611
 801c5b4:	2b6e      	cmp	r3, #110	; 0x6e
 801c5b6:	d809      	bhi.n	801c5cc <_scanf_float+0x138>
 801c5b8:	2b60      	cmp	r3, #96	; 0x60
 801c5ba:	d8b2      	bhi.n	801c522 <_scanf_float+0x8e>
 801c5bc:	2b54      	cmp	r3, #84	; 0x54
 801c5be:	d077      	beq.n	801c6b0 <_scanf_float+0x21c>
 801c5c0:	2b59      	cmp	r3, #89	; 0x59
 801c5c2:	d199      	bne.n	801c4f8 <_scanf_float+0x64>
 801c5c4:	2d07      	cmp	r5, #7
 801c5c6:	d197      	bne.n	801c4f8 <_scanf_float+0x64>
 801c5c8:	2508      	movs	r5, #8
 801c5ca:	e029      	b.n	801c620 <_scanf_float+0x18c>
 801c5cc:	2b74      	cmp	r3, #116	; 0x74
 801c5ce:	d06f      	beq.n	801c6b0 <_scanf_float+0x21c>
 801c5d0:	2b79      	cmp	r3, #121	; 0x79
 801c5d2:	e7f6      	b.n	801c5c2 <_scanf_float+0x12e>
 801c5d4:	6821      	ldr	r1, [r4, #0]
 801c5d6:	05c8      	lsls	r0, r1, #23
 801c5d8:	d51a      	bpl.n	801c610 <_scanf_float+0x17c>
 801c5da:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801c5de:	9b02      	ldr	r3, [sp, #8]
 801c5e0:	f109 0901 	add.w	r9, r9, #1
 801c5e4:	6021      	str	r1, [r4, #0]
 801c5e6:	b11b      	cbz	r3, 801c5f0 <_scanf_float+0x15c>
 801c5e8:	3b01      	subs	r3, #1
 801c5ea:	3201      	adds	r2, #1
 801c5ec:	9302      	str	r3, [sp, #8]
 801c5ee:	60a2      	str	r2, [r4, #8]
 801c5f0:	68a3      	ldr	r3, [r4, #8]
 801c5f2:	3b01      	subs	r3, #1
 801c5f4:	60a3      	str	r3, [r4, #8]
 801c5f6:	6923      	ldr	r3, [r4, #16]
 801c5f8:	3301      	adds	r3, #1
 801c5fa:	6123      	str	r3, [r4, #16]
 801c5fc:	687b      	ldr	r3, [r7, #4]
 801c5fe:	3b01      	subs	r3, #1
 801c600:	2b00      	cmp	r3, #0
 801c602:	607b      	str	r3, [r7, #4]
 801c604:	f340 8084 	ble.w	801c710 <_scanf_float+0x27c>
 801c608:	683b      	ldr	r3, [r7, #0]
 801c60a:	3301      	adds	r3, #1
 801c60c:	603b      	str	r3, [r7, #0]
 801c60e:	e766      	b.n	801c4de <_scanf_float+0x4a>
 801c610:	eb1a 0f05 	cmn.w	sl, r5
 801c614:	f47f af70 	bne.w	801c4f8 <_scanf_float+0x64>
 801c618:	6822      	ldr	r2, [r4, #0]
 801c61a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801c61e:	6022      	str	r2, [r4, #0]
 801c620:	f806 3b01 	strb.w	r3, [r6], #1
 801c624:	e7e4      	b.n	801c5f0 <_scanf_float+0x15c>
 801c626:	6822      	ldr	r2, [r4, #0]
 801c628:	0610      	lsls	r0, r2, #24
 801c62a:	f57f af65 	bpl.w	801c4f8 <_scanf_float+0x64>
 801c62e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801c632:	e7f4      	b.n	801c61e <_scanf_float+0x18a>
 801c634:	f1ba 0f00 	cmp.w	sl, #0
 801c638:	d10e      	bne.n	801c658 <_scanf_float+0x1c4>
 801c63a:	f1b9 0f00 	cmp.w	r9, #0
 801c63e:	d10e      	bne.n	801c65e <_scanf_float+0x1ca>
 801c640:	6822      	ldr	r2, [r4, #0]
 801c642:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801c646:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801c64a:	d108      	bne.n	801c65e <_scanf_float+0x1ca>
 801c64c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801c650:	f04f 0a01 	mov.w	sl, #1
 801c654:	6022      	str	r2, [r4, #0]
 801c656:	e7e3      	b.n	801c620 <_scanf_float+0x18c>
 801c658:	f1ba 0f02 	cmp.w	sl, #2
 801c65c:	d055      	beq.n	801c70a <_scanf_float+0x276>
 801c65e:	2d01      	cmp	r5, #1
 801c660:	d002      	beq.n	801c668 <_scanf_float+0x1d4>
 801c662:	2d04      	cmp	r5, #4
 801c664:	f47f af48 	bne.w	801c4f8 <_scanf_float+0x64>
 801c668:	3501      	adds	r5, #1
 801c66a:	b2ed      	uxtb	r5, r5
 801c66c:	e7d8      	b.n	801c620 <_scanf_float+0x18c>
 801c66e:	f1ba 0f01 	cmp.w	sl, #1
 801c672:	f47f af41 	bne.w	801c4f8 <_scanf_float+0x64>
 801c676:	f04f 0a02 	mov.w	sl, #2
 801c67a:	e7d1      	b.n	801c620 <_scanf_float+0x18c>
 801c67c:	b97d      	cbnz	r5, 801c69e <_scanf_float+0x20a>
 801c67e:	f1b9 0f00 	cmp.w	r9, #0
 801c682:	f47f af3c 	bne.w	801c4fe <_scanf_float+0x6a>
 801c686:	6822      	ldr	r2, [r4, #0]
 801c688:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801c68c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801c690:	f47f af39 	bne.w	801c506 <_scanf_float+0x72>
 801c694:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801c698:	2501      	movs	r5, #1
 801c69a:	6022      	str	r2, [r4, #0]
 801c69c:	e7c0      	b.n	801c620 <_scanf_float+0x18c>
 801c69e:	2d03      	cmp	r5, #3
 801c6a0:	d0e2      	beq.n	801c668 <_scanf_float+0x1d4>
 801c6a2:	2d05      	cmp	r5, #5
 801c6a4:	e7de      	b.n	801c664 <_scanf_float+0x1d0>
 801c6a6:	2d02      	cmp	r5, #2
 801c6a8:	f47f af26 	bne.w	801c4f8 <_scanf_float+0x64>
 801c6ac:	2503      	movs	r5, #3
 801c6ae:	e7b7      	b.n	801c620 <_scanf_float+0x18c>
 801c6b0:	2d06      	cmp	r5, #6
 801c6b2:	f47f af21 	bne.w	801c4f8 <_scanf_float+0x64>
 801c6b6:	2507      	movs	r5, #7
 801c6b8:	e7b2      	b.n	801c620 <_scanf_float+0x18c>
 801c6ba:	6822      	ldr	r2, [r4, #0]
 801c6bc:	0591      	lsls	r1, r2, #22
 801c6be:	f57f af1b 	bpl.w	801c4f8 <_scanf_float+0x64>
 801c6c2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801c6c6:	f8cd 9004 	str.w	r9, [sp, #4]
 801c6ca:	6022      	str	r2, [r4, #0]
 801c6cc:	e7a8      	b.n	801c620 <_scanf_float+0x18c>
 801c6ce:	6822      	ldr	r2, [r4, #0]
 801c6d0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801c6d4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801c6d8:	d006      	beq.n	801c6e8 <_scanf_float+0x254>
 801c6da:	0550      	lsls	r0, r2, #21
 801c6dc:	f57f af0c 	bpl.w	801c4f8 <_scanf_float+0x64>
 801c6e0:	f1b9 0f00 	cmp.w	r9, #0
 801c6e4:	f43f af0f 	beq.w	801c506 <_scanf_float+0x72>
 801c6e8:	0591      	lsls	r1, r2, #22
 801c6ea:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801c6ee:	bf58      	it	pl
 801c6f0:	9901      	ldrpl	r1, [sp, #4]
 801c6f2:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801c6f6:	bf58      	it	pl
 801c6f8:	eba9 0101 	subpl.w	r1, r9, r1
 801c6fc:	6022      	str	r2, [r4, #0]
 801c6fe:	f04f 0900 	mov.w	r9, #0
 801c702:	bf58      	it	pl
 801c704:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801c708:	e78a      	b.n	801c620 <_scanf_float+0x18c>
 801c70a:	f04f 0a03 	mov.w	sl, #3
 801c70e:	e787      	b.n	801c620 <_scanf_float+0x18c>
 801c710:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801c714:	4639      	mov	r1, r7
 801c716:	4640      	mov	r0, r8
 801c718:	4798      	blx	r3
 801c71a:	2800      	cmp	r0, #0
 801c71c:	f43f aedf 	beq.w	801c4de <_scanf_float+0x4a>
 801c720:	e6ea      	b.n	801c4f8 <_scanf_float+0x64>
 801c722:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c726:	463a      	mov	r2, r7
 801c728:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801c72c:	4640      	mov	r0, r8
 801c72e:	4798      	blx	r3
 801c730:	6923      	ldr	r3, [r4, #16]
 801c732:	3b01      	subs	r3, #1
 801c734:	6123      	str	r3, [r4, #16]
 801c736:	e6ec      	b.n	801c512 <_scanf_float+0x7e>
 801c738:	1e6b      	subs	r3, r5, #1
 801c73a:	2b06      	cmp	r3, #6
 801c73c:	d825      	bhi.n	801c78a <_scanf_float+0x2f6>
 801c73e:	2d02      	cmp	r5, #2
 801c740:	d836      	bhi.n	801c7b0 <_scanf_float+0x31c>
 801c742:	455e      	cmp	r6, fp
 801c744:	f67f aee8 	bls.w	801c518 <_scanf_float+0x84>
 801c748:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c74c:	463a      	mov	r2, r7
 801c74e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801c752:	4640      	mov	r0, r8
 801c754:	4798      	blx	r3
 801c756:	6923      	ldr	r3, [r4, #16]
 801c758:	3b01      	subs	r3, #1
 801c75a:	6123      	str	r3, [r4, #16]
 801c75c:	e7f1      	b.n	801c742 <_scanf_float+0x2ae>
 801c75e:	9802      	ldr	r0, [sp, #8]
 801c760:	463a      	mov	r2, r7
 801c762:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c766:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801c76a:	9002      	str	r0, [sp, #8]
 801c76c:	4640      	mov	r0, r8
 801c76e:	4798      	blx	r3
 801c770:	6923      	ldr	r3, [r4, #16]
 801c772:	3b01      	subs	r3, #1
 801c774:	6123      	str	r3, [r4, #16]
 801c776:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801c77a:	fa5f fa8a 	uxtb.w	sl, sl
 801c77e:	f1ba 0f02 	cmp.w	sl, #2
 801c782:	d1ec      	bne.n	801c75e <_scanf_float+0x2ca>
 801c784:	3d03      	subs	r5, #3
 801c786:	b2ed      	uxtb	r5, r5
 801c788:	1b76      	subs	r6, r6, r5
 801c78a:	6823      	ldr	r3, [r4, #0]
 801c78c:	05da      	lsls	r2, r3, #23
 801c78e:	d52e      	bpl.n	801c7ee <_scanf_float+0x35a>
 801c790:	055b      	lsls	r3, r3, #21
 801c792:	d510      	bpl.n	801c7b6 <_scanf_float+0x322>
 801c794:	455e      	cmp	r6, fp
 801c796:	f67f aebf 	bls.w	801c518 <_scanf_float+0x84>
 801c79a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c79e:	463a      	mov	r2, r7
 801c7a0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801c7a4:	4640      	mov	r0, r8
 801c7a6:	4798      	blx	r3
 801c7a8:	6923      	ldr	r3, [r4, #16]
 801c7aa:	3b01      	subs	r3, #1
 801c7ac:	6123      	str	r3, [r4, #16]
 801c7ae:	e7f1      	b.n	801c794 <_scanf_float+0x300>
 801c7b0:	46aa      	mov	sl, r5
 801c7b2:	9602      	str	r6, [sp, #8]
 801c7b4:	e7df      	b.n	801c776 <_scanf_float+0x2e2>
 801c7b6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801c7ba:	1e75      	subs	r5, r6, #1
 801c7bc:	6923      	ldr	r3, [r4, #16]
 801c7be:	2965      	cmp	r1, #101	; 0x65
 801c7c0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801c7c4:	6123      	str	r3, [r4, #16]
 801c7c6:	d00c      	beq.n	801c7e2 <_scanf_float+0x34e>
 801c7c8:	2945      	cmp	r1, #69	; 0x45
 801c7ca:	d00a      	beq.n	801c7e2 <_scanf_float+0x34e>
 801c7cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c7d0:	463a      	mov	r2, r7
 801c7d2:	4640      	mov	r0, r8
 801c7d4:	1eb5      	subs	r5, r6, #2
 801c7d6:	4798      	blx	r3
 801c7d8:	6923      	ldr	r3, [r4, #16]
 801c7da:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801c7de:	3b01      	subs	r3, #1
 801c7e0:	6123      	str	r3, [r4, #16]
 801c7e2:	462e      	mov	r6, r5
 801c7e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c7e8:	463a      	mov	r2, r7
 801c7ea:	4640      	mov	r0, r8
 801c7ec:	4798      	blx	r3
 801c7ee:	6825      	ldr	r5, [r4, #0]
 801c7f0:	f015 0510 	ands.w	r5, r5, #16
 801c7f4:	d158      	bne.n	801c8a8 <_scanf_float+0x414>
 801c7f6:	7035      	strb	r5, [r6, #0]
 801c7f8:	6823      	ldr	r3, [r4, #0]
 801c7fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801c7fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c802:	d11c      	bne.n	801c83e <_scanf_float+0x3aa>
 801c804:	9b01      	ldr	r3, [sp, #4]
 801c806:	454b      	cmp	r3, r9
 801c808:	eba3 0209 	sub.w	r2, r3, r9
 801c80c:	d124      	bne.n	801c858 <_scanf_float+0x3c4>
 801c80e:	2200      	movs	r2, #0
 801c810:	4659      	mov	r1, fp
 801c812:	4640      	mov	r0, r8
 801c814:	f000 ff24 	bl	801d660 <_strtod_r>
 801c818:	6821      	ldr	r1, [r4, #0]
 801c81a:	9b03      	ldr	r3, [sp, #12]
 801c81c:	f011 0f02 	tst.w	r1, #2
 801c820:	681b      	ldr	r3, [r3, #0]
 801c822:	ec57 6b10 	vmov	r6, r7, d0
 801c826:	f103 0204 	add.w	r2, r3, #4
 801c82a:	d020      	beq.n	801c86e <_scanf_float+0x3da>
 801c82c:	9903      	ldr	r1, [sp, #12]
 801c82e:	600a      	str	r2, [r1, #0]
 801c830:	681b      	ldr	r3, [r3, #0]
 801c832:	e9c3 6700 	strd	r6, r7, [r3]
 801c836:	68e3      	ldr	r3, [r4, #12]
 801c838:	3301      	adds	r3, #1
 801c83a:	60e3      	str	r3, [r4, #12]
 801c83c:	e66d      	b.n	801c51a <_scanf_float+0x86>
 801c83e:	9b04      	ldr	r3, [sp, #16]
 801c840:	2b00      	cmp	r3, #0
 801c842:	d0e4      	beq.n	801c80e <_scanf_float+0x37a>
 801c844:	9905      	ldr	r1, [sp, #20]
 801c846:	230a      	movs	r3, #10
 801c848:	462a      	mov	r2, r5
 801c84a:	4640      	mov	r0, r8
 801c84c:	3101      	adds	r1, #1
 801c84e:	f000 ff8f 	bl	801d770 <_strtol_r>
 801c852:	9b04      	ldr	r3, [sp, #16]
 801c854:	9e05      	ldr	r6, [sp, #20]
 801c856:	1ac2      	subs	r2, r0, r3
 801c858:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801c85c:	4913      	ldr	r1, [pc, #76]	; (801c8ac <_scanf_float+0x418>)
 801c85e:	429e      	cmp	r6, r3
 801c860:	bf28      	it	cs
 801c862:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801c866:	4630      	mov	r0, r6
 801c868:	f000 f824 	bl	801c8b4 <siprintf>
 801c86c:	e7cf      	b.n	801c80e <_scanf_float+0x37a>
 801c86e:	f011 0f04 	tst.w	r1, #4
 801c872:	9903      	ldr	r1, [sp, #12]
 801c874:	600a      	str	r2, [r1, #0]
 801c876:	d1db      	bne.n	801c830 <_scanf_float+0x39c>
 801c878:	f8d3 8000 	ldr.w	r8, [r3]
 801c87c:	ee10 2a10 	vmov	r2, s0
 801c880:	463b      	mov	r3, r7
 801c882:	ee10 0a10 	vmov	r0, s0
 801c886:	4639      	mov	r1, r7
 801c888:	f7e4 f954 	bl	8000b34 <__aeabi_dcmpun>
 801c88c:	b128      	cbz	r0, 801c89a <_scanf_float+0x406>
 801c88e:	4808      	ldr	r0, [pc, #32]	; (801c8b0 <_scanf_float+0x41c>)
 801c890:	f001 f872 	bl	801d978 <nanf>
 801c894:	ed88 0a00 	vstr	s0, [r8]
 801c898:	e7cd      	b.n	801c836 <_scanf_float+0x3a2>
 801c89a:	4630      	mov	r0, r6
 801c89c:	4639      	mov	r1, r7
 801c89e:	f7e4 f9a7 	bl	8000bf0 <__aeabi_d2f>
 801c8a2:	f8c8 0000 	str.w	r0, [r8]
 801c8a6:	e7c6      	b.n	801c836 <_scanf_float+0x3a2>
 801c8a8:	2500      	movs	r5, #0
 801c8aa:	e636      	b.n	801c51a <_scanf_float+0x86>
 801c8ac:	08038480 	.word	0x08038480
 801c8b0:	0803886f 	.word	0x0803886f

0801c8b4 <siprintf>:
 801c8b4:	b40e      	push	{r1, r2, r3}
 801c8b6:	b500      	push	{lr}
 801c8b8:	b09c      	sub	sp, #112	; 0x70
 801c8ba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801c8be:	ab1d      	add	r3, sp, #116	; 0x74
 801c8c0:	9002      	str	r0, [sp, #8]
 801c8c2:	9006      	str	r0, [sp, #24]
 801c8c4:	9107      	str	r1, [sp, #28]
 801c8c6:	9104      	str	r1, [sp, #16]
 801c8c8:	4808      	ldr	r0, [pc, #32]	; (801c8ec <siprintf+0x38>)
 801c8ca:	4909      	ldr	r1, [pc, #36]	; (801c8f0 <siprintf+0x3c>)
 801c8cc:	f853 2b04 	ldr.w	r2, [r3], #4
 801c8d0:	9105      	str	r1, [sp, #20]
 801c8d2:	a902      	add	r1, sp, #8
 801c8d4:	6800      	ldr	r0, [r0, #0]
 801c8d6:	9301      	str	r3, [sp, #4]
 801c8d8:	f002 fa86 	bl	801ede8 <_svfiprintf_r>
 801c8dc:	9b02      	ldr	r3, [sp, #8]
 801c8de:	2200      	movs	r2, #0
 801c8e0:	701a      	strb	r2, [r3, #0]
 801c8e2:	b01c      	add	sp, #112	; 0x70
 801c8e4:	f85d eb04 	ldr.w	lr, [sp], #4
 801c8e8:	b003      	add	sp, #12
 801c8ea:	4770      	bx	lr
 801c8ec:	200007b0 	.word	0x200007b0
 801c8f0:	ffff0208 	.word	0xffff0208

0801c8f4 <std>:
 801c8f4:	2300      	movs	r3, #0
 801c8f6:	b510      	push	{r4, lr}
 801c8f8:	4604      	mov	r4, r0
 801c8fa:	6083      	str	r3, [r0, #8]
 801c8fc:	8181      	strh	r1, [r0, #12]
 801c8fe:	4619      	mov	r1, r3
 801c900:	6643      	str	r3, [r0, #100]	; 0x64
 801c902:	81c2      	strh	r2, [r0, #14]
 801c904:	2208      	movs	r2, #8
 801c906:	6183      	str	r3, [r0, #24]
 801c908:	e9c0 3300 	strd	r3, r3, [r0]
 801c90c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c910:	305c      	adds	r0, #92	; 0x5c
 801c912:	f000 ffd5 	bl	801d8c0 <memset>
 801c916:	4b0d      	ldr	r3, [pc, #52]	; (801c94c <std+0x58>)
 801c918:	6224      	str	r4, [r4, #32]
 801c91a:	6263      	str	r3, [r4, #36]	; 0x24
 801c91c:	4b0c      	ldr	r3, [pc, #48]	; (801c950 <std+0x5c>)
 801c91e:	62a3      	str	r3, [r4, #40]	; 0x28
 801c920:	4b0c      	ldr	r3, [pc, #48]	; (801c954 <std+0x60>)
 801c922:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c924:	4b0c      	ldr	r3, [pc, #48]	; (801c958 <std+0x64>)
 801c926:	6323      	str	r3, [r4, #48]	; 0x30
 801c928:	4b0c      	ldr	r3, [pc, #48]	; (801c95c <std+0x68>)
 801c92a:	429c      	cmp	r4, r3
 801c92c:	d006      	beq.n	801c93c <std+0x48>
 801c92e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801c932:	4294      	cmp	r4, r2
 801c934:	d002      	beq.n	801c93c <std+0x48>
 801c936:	33d0      	adds	r3, #208	; 0xd0
 801c938:	429c      	cmp	r4, r3
 801c93a:	d105      	bne.n	801c948 <std+0x54>
 801c93c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801c940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c944:	f000 bff2 	b.w	801d92c <__retarget_lock_init_recursive>
 801c948:	bd10      	pop	{r4, pc}
 801c94a:	bf00      	nop
 801c94c:	0801fec3 	.word	0x0801fec3
 801c950:	0801fee5 	.word	0x0801fee5
 801c954:	0801ff1d 	.word	0x0801ff1d
 801c958:	0801ff41 	.word	0x0801ff41
 801c95c:	20035548 	.word	0x20035548

0801c960 <stdio_exit_handler>:
 801c960:	4a02      	ldr	r2, [pc, #8]	; (801c96c <stdio_exit_handler+0xc>)
 801c962:	4903      	ldr	r1, [pc, #12]	; (801c970 <stdio_exit_handler+0x10>)
 801c964:	4803      	ldr	r0, [pc, #12]	; (801c974 <stdio_exit_handler+0x14>)
 801c966:	f000 bf05 	b.w	801d774 <_fwalk_sglue>
 801c96a:	bf00      	nop
 801c96c:	200005ec 	.word	0x200005ec
 801c970:	0801f4e9 	.word	0x0801f4e9
 801c974:	20000764 	.word	0x20000764

0801c978 <cleanup_stdio>:
 801c978:	6841      	ldr	r1, [r0, #4]
 801c97a:	4b0c      	ldr	r3, [pc, #48]	; (801c9ac <cleanup_stdio+0x34>)
 801c97c:	4299      	cmp	r1, r3
 801c97e:	b510      	push	{r4, lr}
 801c980:	4604      	mov	r4, r0
 801c982:	d001      	beq.n	801c988 <cleanup_stdio+0x10>
 801c984:	f002 fdb0 	bl	801f4e8 <_fflush_r>
 801c988:	68a1      	ldr	r1, [r4, #8]
 801c98a:	4b09      	ldr	r3, [pc, #36]	; (801c9b0 <cleanup_stdio+0x38>)
 801c98c:	4299      	cmp	r1, r3
 801c98e:	d002      	beq.n	801c996 <cleanup_stdio+0x1e>
 801c990:	4620      	mov	r0, r4
 801c992:	f002 fda9 	bl	801f4e8 <_fflush_r>
 801c996:	68e1      	ldr	r1, [r4, #12]
 801c998:	4b06      	ldr	r3, [pc, #24]	; (801c9b4 <cleanup_stdio+0x3c>)
 801c99a:	4299      	cmp	r1, r3
 801c99c:	d004      	beq.n	801c9a8 <cleanup_stdio+0x30>
 801c99e:	4620      	mov	r0, r4
 801c9a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c9a4:	f002 bda0 	b.w	801f4e8 <_fflush_r>
 801c9a8:	bd10      	pop	{r4, pc}
 801c9aa:	bf00      	nop
 801c9ac:	20035548 	.word	0x20035548
 801c9b0:	200355b0 	.word	0x200355b0
 801c9b4:	20035618 	.word	0x20035618

0801c9b8 <global_stdio_init.part.0>:
 801c9b8:	b510      	push	{r4, lr}
 801c9ba:	4b0b      	ldr	r3, [pc, #44]	; (801c9e8 <global_stdio_init.part.0+0x30>)
 801c9bc:	2104      	movs	r1, #4
 801c9be:	4c0b      	ldr	r4, [pc, #44]	; (801c9ec <global_stdio_init.part.0+0x34>)
 801c9c0:	4a0b      	ldr	r2, [pc, #44]	; (801c9f0 <global_stdio_init.part.0+0x38>)
 801c9c2:	4620      	mov	r0, r4
 801c9c4:	601a      	str	r2, [r3, #0]
 801c9c6:	2200      	movs	r2, #0
 801c9c8:	f7ff ff94 	bl	801c8f4 <std>
 801c9cc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801c9d0:	2201      	movs	r2, #1
 801c9d2:	2109      	movs	r1, #9
 801c9d4:	f7ff ff8e 	bl	801c8f4 <std>
 801c9d8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801c9dc:	2202      	movs	r2, #2
 801c9de:	2112      	movs	r1, #18
 801c9e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c9e4:	f7ff bf86 	b.w	801c8f4 <std>
 801c9e8:	20035680 	.word	0x20035680
 801c9ec:	20035548 	.word	0x20035548
 801c9f0:	0801c961 	.word	0x0801c961

0801c9f4 <__sfp_lock_acquire>:
 801c9f4:	4801      	ldr	r0, [pc, #4]	; (801c9fc <__sfp_lock_acquire+0x8>)
 801c9f6:	f000 bf9a 	b.w	801d92e <__retarget_lock_acquire_recursive>
 801c9fa:	bf00      	nop
 801c9fc:	20035685 	.word	0x20035685

0801ca00 <__sfp_lock_release>:
 801ca00:	4801      	ldr	r0, [pc, #4]	; (801ca08 <__sfp_lock_release+0x8>)
 801ca02:	f000 bf95 	b.w	801d930 <__retarget_lock_release_recursive>
 801ca06:	bf00      	nop
 801ca08:	20035685 	.word	0x20035685

0801ca0c <__sinit>:
 801ca0c:	b510      	push	{r4, lr}
 801ca0e:	4604      	mov	r4, r0
 801ca10:	f7ff fff0 	bl	801c9f4 <__sfp_lock_acquire>
 801ca14:	6a23      	ldr	r3, [r4, #32]
 801ca16:	b11b      	cbz	r3, 801ca20 <__sinit+0x14>
 801ca18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ca1c:	f7ff bff0 	b.w	801ca00 <__sfp_lock_release>
 801ca20:	4b04      	ldr	r3, [pc, #16]	; (801ca34 <__sinit+0x28>)
 801ca22:	6223      	str	r3, [r4, #32]
 801ca24:	4b04      	ldr	r3, [pc, #16]	; (801ca38 <__sinit+0x2c>)
 801ca26:	681b      	ldr	r3, [r3, #0]
 801ca28:	2b00      	cmp	r3, #0
 801ca2a:	d1f5      	bne.n	801ca18 <__sinit+0xc>
 801ca2c:	f7ff ffc4 	bl	801c9b8 <global_stdio_init.part.0>
 801ca30:	e7f2      	b.n	801ca18 <__sinit+0xc>
 801ca32:	bf00      	nop
 801ca34:	0801c979 	.word	0x0801c979
 801ca38:	20035680 	.word	0x20035680

0801ca3c <sulp>:
 801ca3c:	b570      	push	{r4, r5, r6, lr}
 801ca3e:	4604      	mov	r4, r0
 801ca40:	460d      	mov	r5, r1
 801ca42:	4616      	mov	r6, r2
 801ca44:	ec45 4b10 	vmov	d0, r4, r5
 801ca48:	f003 f8f6 	bl	801fc38 <__ulp>
 801ca4c:	ec51 0b10 	vmov	r0, r1, d0
 801ca50:	b17e      	cbz	r6, 801ca72 <sulp+0x36>
 801ca52:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801ca56:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801ca5a:	2b00      	cmp	r3, #0
 801ca5c:	dd09      	ble.n	801ca72 <sulp+0x36>
 801ca5e:	051b      	lsls	r3, r3, #20
 801ca60:	2400      	movs	r4, #0
 801ca62:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801ca66:	4622      	mov	r2, r4
 801ca68:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801ca6c:	462b      	mov	r3, r5
 801ca6e:	f7e3 fdc7 	bl	8000600 <__aeabi_dmul>
 801ca72:	bd70      	pop	{r4, r5, r6, pc}
 801ca74:	0000      	movs	r0, r0
	...

0801ca78 <_strtod_l>:
 801ca78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca7c:	ed2d 8b02 	vpush	{d8}
 801ca80:	b09b      	sub	sp, #108	; 0x6c
 801ca82:	4604      	mov	r4, r0
 801ca84:	460d      	mov	r5, r1
 801ca86:	f04f 0800 	mov.w	r8, #0
 801ca8a:	9213      	str	r2, [sp, #76]	; 0x4c
 801ca8c:	2200      	movs	r2, #0
 801ca8e:	f04f 0900 	mov.w	r9, #0
 801ca92:	9216      	str	r2, [sp, #88]	; 0x58
 801ca94:	460a      	mov	r2, r1
 801ca96:	9215      	str	r2, [sp, #84]	; 0x54
 801ca98:	7811      	ldrb	r1, [r2, #0]
 801ca9a:	292b      	cmp	r1, #43	; 0x2b
 801ca9c:	d04c      	beq.n	801cb38 <_strtod_l+0xc0>
 801ca9e:	d83a      	bhi.n	801cb16 <_strtod_l+0x9e>
 801caa0:	290d      	cmp	r1, #13
 801caa2:	d834      	bhi.n	801cb0e <_strtod_l+0x96>
 801caa4:	2908      	cmp	r1, #8
 801caa6:	d834      	bhi.n	801cb12 <_strtod_l+0x9a>
 801caa8:	2900      	cmp	r1, #0
 801caaa:	d03d      	beq.n	801cb28 <_strtod_l+0xb0>
 801caac:	2200      	movs	r2, #0
 801caae:	920a      	str	r2, [sp, #40]	; 0x28
 801cab0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801cab2:	7832      	ldrb	r2, [r6, #0]
 801cab4:	2a30      	cmp	r2, #48	; 0x30
 801cab6:	f040 80b4 	bne.w	801cc22 <_strtod_l+0x1aa>
 801caba:	7872      	ldrb	r2, [r6, #1]
 801cabc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 801cac0:	2a58      	cmp	r2, #88	; 0x58
 801cac2:	d170      	bne.n	801cba6 <_strtod_l+0x12e>
 801cac4:	9302      	str	r3, [sp, #8]
 801cac6:	a915      	add	r1, sp, #84	; 0x54
 801cac8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801caca:	4620      	mov	r0, r4
 801cacc:	4a8e      	ldr	r2, [pc, #568]	; (801cd08 <_strtod_l+0x290>)
 801cace:	9301      	str	r3, [sp, #4]
 801cad0:	ab16      	add	r3, sp, #88	; 0x58
 801cad2:	9300      	str	r3, [sp, #0]
 801cad4:	ab17      	add	r3, sp, #92	; 0x5c
 801cad6:	f001 fe3d 	bl	801e754 <__gethex>
 801cada:	f010 070f 	ands.w	r7, r0, #15
 801cade:	4605      	mov	r5, r0
 801cae0:	d005      	beq.n	801caee <_strtod_l+0x76>
 801cae2:	2f06      	cmp	r7, #6
 801cae4:	d12a      	bne.n	801cb3c <_strtod_l+0xc4>
 801cae6:	3601      	adds	r6, #1
 801cae8:	2300      	movs	r3, #0
 801caea:	9615      	str	r6, [sp, #84]	; 0x54
 801caec:	930a      	str	r3, [sp, #40]	; 0x28
 801caee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801caf0:	2b00      	cmp	r3, #0
 801caf2:	f040 8581 	bne.w	801d5f8 <_strtod_l+0xb80>
 801caf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801caf8:	b1db      	cbz	r3, 801cb32 <_strtod_l+0xba>
 801cafa:	4642      	mov	r2, r8
 801cafc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801cb00:	ec43 2b10 	vmov	d0, r2, r3
 801cb04:	b01b      	add	sp, #108	; 0x6c
 801cb06:	ecbd 8b02 	vpop	{d8}
 801cb0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb0e:	2920      	cmp	r1, #32
 801cb10:	d1cc      	bne.n	801caac <_strtod_l+0x34>
 801cb12:	3201      	adds	r2, #1
 801cb14:	e7bf      	b.n	801ca96 <_strtod_l+0x1e>
 801cb16:	292d      	cmp	r1, #45	; 0x2d
 801cb18:	d1c8      	bne.n	801caac <_strtod_l+0x34>
 801cb1a:	2101      	movs	r1, #1
 801cb1c:	910a      	str	r1, [sp, #40]	; 0x28
 801cb1e:	1c51      	adds	r1, r2, #1
 801cb20:	9115      	str	r1, [sp, #84]	; 0x54
 801cb22:	7852      	ldrb	r2, [r2, #1]
 801cb24:	2a00      	cmp	r2, #0
 801cb26:	d1c3      	bne.n	801cab0 <_strtod_l+0x38>
 801cb28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801cb2a:	9515      	str	r5, [sp, #84]	; 0x54
 801cb2c:	2b00      	cmp	r3, #0
 801cb2e:	f040 8561 	bne.w	801d5f4 <_strtod_l+0xb7c>
 801cb32:	4642      	mov	r2, r8
 801cb34:	464b      	mov	r3, r9
 801cb36:	e7e3      	b.n	801cb00 <_strtod_l+0x88>
 801cb38:	2100      	movs	r1, #0
 801cb3a:	e7ef      	b.n	801cb1c <_strtod_l+0xa4>
 801cb3c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801cb3e:	b13a      	cbz	r2, 801cb50 <_strtod_l+0xd8>
 801cb40:	2135      	movs	r1, #53	; 0x35
 801cb42:	a818      	add	r0, sp, #96	; 0x60
 801cb44:	f003 f979 	bl	801fe3a <__copybits>
 801cb48:	9916      	ldr	r1, [sp, #88]	; 0x58
 801cb4a:	4620      	mov	r0, r4
 801cb4c:	f002 fd40 	bl	801f5d0 <_Bfree>
 801cb50:	3f01      	subs	r7, #1
 801cb52:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801cb54:	2f04      	cmp	r7, #4
 801cb56:	d806      	bhi.n	801cb66 <_strtod_l+0xee>
 801cb58:	e8df f007 	tbb	[pc, r7]
 801cb5c:	201d0314 	.word	0x201d0314
 801cb60:	14          	.byte	0x14
 801cb61:	00          	.byte	0x00
 801cb62:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 801cb66:	05e9      	lsls	r1, r5, #23
 801cb68:	bf48      	it	mi
 801cb6a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801cb6e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801cb72:	0d1b      	lsrs	r3, r3, #20
 801cb74:	051b      	lsls	r3, r3, #20
 801cb76:	2b00      	cmp	r3, #0
 801cb78:	d1b9      	bne.n	801caee <_strtod_l+0x76>
 801cb7a:	f000 fead 	bl	801d8d8 <__errno>
 801cb7e:	2322      	movs	r3, #34	; 0x22
 801cb80:	6003      	str	r3, [r0, #0]
 801cb82:	e7b4      	b.n	801caee <_strtod_l+0x76>
 801cb84:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 801cb88:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801cb8c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801cb90:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801cb94:	e7e7      	b.n	801cb66 <_strtod_l+0xee>
 801cb96:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801cd10 <_strtod_l+0x298>
 801cb9a:	e7e4      	b.n	801cb66 <_strtod_l+0xee>
 801cb9c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801cba0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801cba4:	e7df      	b.n	801cb66 <_strtod_l+0xee>
 801cba6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cba8:	1c5a      	adds	r2, r3, #1
 801cbaa:	9215      	str	r2, [sp, #84]	; 0x54
 801cbac:	785b      	ldrb	r3, [r3, #1]
 801cbae:	2b30      	cmp	r3, #48	; 0x30
 801cbb0:	d0f9      	beq.n	801cba6 <_strtod_l+0x12e>
 801cbb2:	2b00      	cmp	r3, #0
 801cbb4:	d09b      	beq.n	801caee <_strtod_l+0x76>
 801cbb6:	2301      	movs	r3, #1
 801cbb8:	f04f 0a00 	mov.w	sl, #0
 801cbbc:	9304      	str	r3, [sp, #16]
 801cbbe:	220a      	movs	r2, #10
 801cbc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cbc2:	46d3      	mov	fp, sl
 801cbc4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801cbc8:	930b      	str	r3, [sp, #44]	; 0x2c
 801cbca:	9815      	ldr	r0, [sp, #84]	; 0x54
 801cbcc:	7806      	ldrb	r6, [r0, #0]
 801cbce:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801cbd2:	b2d9      	uxtb	r1, r3
 801cbd4:	2909      	cmp	r1, #9
 801cbd6:	d926      	bls.n	801cc26 <_strtod_l+0x1ae>
 801cbd8:	2201      	movs	r2, #1
 801cbda:	494c      	ldr	r1, [pc, #304]	; (801cd0c <_strtod_l+0x294>)
 801cbdc:	f000 fe5e 	bl	801d89c <strncmp>
 801cbe0:	2800      	cmp	r0, #0
 801cbe2:	d030      	beq.n	801cc46 <_strtod_l+0x1ce>
 801cbe4:	2000      	movs	r0, #0
 801cbe6:	4632      	mov	r2, r6
 801cbe8:	465e      	mov	r6, fp
 801cbea:	4603      	mov	r3, r0
 801cbec:	9005      	str	r0, [sp, #20]
 801cbee:	2a65      	cmp	r2, #101	; 0x65
 801cbf0:	d001      	beq.n	801cbf6 <_strtod_l+0x17e>
 801cbf2:	2a45      	cmp	r2, #69	; 0x45
 801cbf4:	d113      	bne.n	801cc1e <_strtod_l+0x1a6>
 801cbf6:	b91e      	cbnz	r6, 801cc00 <_strtod_l+0x188>
 801cbf8:	9a04      	ldr	r2, [sp, #16]
 801cbfa:	4302      	orrs	r2, r0
 801cbfc:	d094      	beq.n	801cb28 <_strtod_l+0xb0>
 801cbfe:	2600      	movs	r6, #0
 801cc00:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801cc02:	1c6a      	adds	r2, r5, #1
 801cc04:	9215      	str	r2, [sp, #84]	; 0x54
 801cc06:	786a      	ldrb	r2, [r5, #1]
 801cc08:	2a2b      	cmp	r2, #43	; 0x2b
 801cc0a:	d073      	beq.n	801ccf4 <_strtod_l+0x27c>
 801cc0c:	2a2d      	cmp	r2, #45	; 0x2d
 801cc0e:	d077      	beq.n	801cd00 <_strtod_l+0x288>
 801cc10:	f04f 0c00 	mov.w	ip, #0
 801cc14:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801cc18:	2909      	cmp	r1, #9
 801cc1a:	d97f      	bls.n	801cd1c <_strtod_l+0x2a4>
 801cc1c:	9515      	str	r5, [sp, #84]	; 0x54
 801cc1e:	2700      	movs	r7, #0
 801cc20:	e09e      	b.n	801cd60 <_strtod_l+0x2e8>
 801cc22:	2300      	movs	r3, #0
 801cc24:	e7c8      	b.n	801cbb8 <_strtod_l+0x140>
 801cc26:	f1bb 0f08 	cmp.w	fp, #8
 801cc2a:	f100 0001 	add.w	r0, r0, #1
 801cc2e:	f10b 0b01 	add.w	fp, fp, #1
 801cc32:	bfd4      	ite	le
 801cc34:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801cc36:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 801cc3a:	9015      	str	r0, [sp, #84]	; 0x54
 801cc3c:	bfdc      	itt	le
 801cc3e:	fb02 3301 	mlale	r3, r2, r1, r3
 801cc42:	9309      	strle	r3, [sp, #36]	; 0x24
 801cc44:	e7c1      	b.n	801cbca <_strtod_l+0x152>
 801cc46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cc48:	1c5a      	adds	r2, r3, #1
 801cc4a:	9215      	str	r2, [sp, #84]	; 0x54
 801cc4c:	785a      	ldrb	r2, [r3, #1]
 801cc4e:	f1bb 0f00 	cmp.w	fp, #0
 801cc52:	d036      	beq.n	801ccc2 <_strtod_l+0x24a>
 801cc54:	465e      	mov	r6, fp
 801cc56:	9005      	str	r0, [sp, #20]
 801cc58:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801cc5c:	2b09      	cmp	r3, #9
 801cc5e:	d912      	bls.n	801cc86 <_strtod_l+0x20e>
 801cc60:	2301      	movs	r3, #1
 801cc62:	e7c4      	b.n	801cbee <_strtod_l+0x176>
 801cc64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cc66:	3001      	adds	r0, #1
 801cc68:	1c5a      	adds	r2, r3, #1
 801cc6a:	9215      	str	r2, [sp, #84]	; 0x54
 801cc6c:	785a      	ldrb	r2, [r3, #1]
 801cc6e:	2a30      	cmp	r2, #48	; 0x30
 801cc70:	d0f8      	beq.n	801cc64 <_strtod_l+0x1ec>
 801cc72:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801cc76:	2b08      	cmp	r3, #8
 801cc78:	f200 84c3 	bhi.w	801d602 <_strtod_l+0xb8a>
 801cc7c:	9005      	str	r0, [sp, #20]
 801cc7e:	2000      	movs	r0, #0
 801cc80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cc82:	4606      	mov	r6, r0
 801cc84:	930b      	str	r3, [sp, #44]	; 0x2c
 801cc86:	3a30      	subs	r2, #48	; 0x30
 801cc88:	f100 0301 	add.w	r3, r0, #1
 801cc8c:	d013      	beq.n	801ccb6 <_strtod_l+0x23e>
 801cc8e:	9905      	ldr	r1, [sp, #20]
 801cc90:	eb00 0c06 	add.w	ip, r0, r6
 801cc94:	4419      	add	r1, r3
 801cc96:	4633      	mov	r3, r6
 801cc98:	9105      	str	r1, [sp, #20]
 801cc9a:	210a      	movs	r1, #10
 801cc9c:	4563      	cmp	r3, ip
 801cc9e:	d112      	bne.n	801ccc6 <_strtod_l+0x24e>
 801cca0:	1833      	adds	r3, r6, r0
 801cca2:	3601      	adds	r6, #1
 801cca4:	2b08      	cmp	r3, #8
 801cca6:	4406      	add	r6, r0
 801cca8:	dc1a      	bgt.n	801cce0 <_strtod_l+0x268>
 801ccaa:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ccac:	230a      	movs	r3, #10
 801ccae:	fb03 2301 	mla	r3, r3, r1, r2
 801ccb2:	9309      	str	r3, [sp, #36]	; 0x24
 801ccb4:	2300      	movs	r3, #0
 801ccb6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801ccb8:	4618      	mov	r0, r3
 801ccba:	1c51      	adds	r1, r2, #1
 801ccbc:	9115      	str	r1, [sp, #84]	; 0x54
 801ccbe:	7852      	ldrb	r2, [r2, #1]
 801ccc0:	e7ca      	b.n	801cc58 <_strtod_l+0x1e0>
 801ccc2:	4658      	mov	r0, fp
 801ccc4:	e7d3      	b.n	801cc6e <_strtod_l+0x1f6>
 801ccc6:	2b08      	cmp	r3, #8
 801ccc8:	f103 0301 	add.w	r3, r3, #1
 801cccc:	dc03      	bgt.n	801ccd6 <_strtod_l+0x25e>
 801ccce:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801ccd0:	434f      	muls	r7, r1
 801ccd2:	9709      	str	r7, [sp, #36]	; 0x24
 801ccd4:	e7e2      	b.n	801cc9c <_strtod_l+0x224>
 801ccd6:	2b10      	cmp	r3, #16
 801ccd8:	bfd8      	it	le
 801ccda:	fb01 fa0a 	mulle.w	sl, r1, sl
 801ccde:	e7dd      	b.n	801cc9c <_strtod_l+0x224>
 801cce0:	2e10      	cmp	r6, #16
 801cce2:	bfdc      	itt	le
 801cce4:	230a      	movle	r3, #10
 801cce6:	fb03 2a0a 	mlale	sl, r3, sl, r2
 801ccea:	e7e3      	b.n	801ccb4 <_strtod_l+0x23c>
 801ccec:	2300      	movs	r3, #0
 801ccee:	9305      	str	r3, [sp, #20]
 801ccf0:	2301      	movs	r3, #1
 801ccf2:	e781      	b.n	801cbf8 <_strtod_l+0x180>
 801ccf4:	f04f 0c00 	mov.w	ip, #0
 801ccf8:	1caa      	adds	r2, r5, #2
 801ccfa:	9215      	str	r2, [sp, #84]	; 0x54
 801ccfc:	78aa      	ldrb	r2, [r5, #2]
 801ccfe:	e789      	b.n	801cc14 <_strtod_l+0x19c>
 801cd00:	f04f 0c01 	mov.w	ip, #1
 801cd04:	e7f8      	b.n	801ccf8 <_strtod_l+0x280>
 801cd06:	bf00      	nop
 801cd08:	08038488 	.word	0x08038488
 801cd0c:	08038485 	.word	0x08038485
 801cd10:	7ff00000 	.word	0x7ff00000
 801cd14:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801cd16:	1c51      	adds	r1, r2, #1
 801cd18:	9115      	str	r1, [sp, #84]	; 0x54
 801cd1a:	7852      	ldrb	r2, [r2, #1]
 801cd1c:	2a30      	cmp	r2, #48	; 0x30
 801cd1e:	d0f9      	beq.n	801cd14 <_strtod_l+0x29c>
 801cd20:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801cd24:	2908      	cmp	r1, #8
 801cd26:	f63f af7a 	bhi.w	801cc1e <_strtod_l+0x1a6>
 801cd2a:	3a30      	subs	r2, #48	; 0x30
 801cd2c:	9208      	str	r2, [sp, #32]
 801cd2e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801cd30:	920c      	str	r2, [sp, #48]	; 0x30
 801cd32:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801cd34:	1c57      	adds	r7, r2, #1
 801cd36:	9715      	str	r7, [sp, #84]	; 0x54
 801cd38:	7852      	ldrb	r2, [r2, #1]
 801cd3a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801cd3e:	f1be 0f09 	cmp.w	lr, #9
 801cd42:	d938      	bls.n	801cdb6 <_strtod_l+0x33e>
 801cd44:	990c      	ldr	r1, [sp, #48]	; 0x30
 801cd46:	1a7f      	subs	r7, r7, r1
 801cd48:	2f08      	cmp	r7, #8
 801cd4a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801cd4e:	dc03      	bgt.n	801cd58 <_strtod_l+0x2e0>
 801cd50:	9908      	ldr	r1, [sp, #32]
 801cd52:	428f      	cmp	r7, r1
 801cd54:	bfa8      	it	ge
 801cd56:	460f      	movge	r7, r1
 801cd58:	f1bc 0f00 	cmp.w	ip, #0
 801cd5c:	d000      	beq.n	801cd60 <_strtod_l+0x2e8>
 801cd5e:	427f      	negs	r7, r7
 801cd60:	2e00      	cmp	r6, #0
 801cd62:	d14f      	bne.n	801ce04 <_strtod_l+0x38c>
 801cd64:	9904      	ldr	r1, [sp, #16]
 801cd66:	4301      	orrs	r1, r0
 801cd68:	f47f aec1 	bne.w	801caee <_strtod_l+0x76>
 801cd6c:	2b00      	cmp	r3, #0
 801cd6e:	f47f aedb 	bne.w	801cb28 <_strtod_l+0xb0>
 801cd72:	2a69      	cmp	r2, #105	; 0x69
 801cd74:	d029      	beq.n	801cdca <_strtod_l+0x352>
 801cd76:	dc26      	bgt.n	801cdc6 <_strtod_l+0x34e>
 801cd78:	2a49      	cmp	r2, #73	; 0x49
 801cd7a:	d026      	beq.n	801cdca <_strtod_l+0x352>
 801cd7c:	2a4e      	cmp	r2, #78	; 0x4e
 801cd7e:	f47f aed3 	bne.w	801cb28 <_strtod_l+0xb0>
 801cd82:	499c      	ldr	r1, [pc, #624]	; (801cff4 <_strtod_l+0x57c>)
 801cd84:	a815      	add	r0, sp, #84	; 0x54
 801cd86:	f001 ff25 	bl	801ebd4 <__match>
 801cd8a:	2800      	cmp	r0, #0
 801cd8c:	f43f aecc 	beq.w	801cb28 <_strtod_l+0xb0>
 801cd90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cd92:	781b      	ldrb	r3, [r3, #0]
 801cd94:	2b28      	cmp	r3, #40	; 0x28
 801cd96:	d12f      	bne.n	801cdf8 <_strtod_l+0x380>
 801cd98:	aa18      	add	r2, sp, #96	; 0x60
 801cd9a:	4997      	ldr	r1, [pc, #604]	; (801cff8 <_strtod_l+0x580>)
 801cd9c:	a815      	add	r0, sp, #84	; 0x54
 801cd9e:	f001 ff2d 	bl	801ebfc <__hexnan>
 801cda2:	2805      	cmp	r0, #5
 801cda4:	d128      	bne.n	801cdf8 <_strtod_l+0x380>
 801cda6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801cda8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801cdac:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801cdb0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801cdb4:	e69b      	b.n	801caee <_strtod_l+0x76>
 801cdb6:	9f08      	ldr	r7, [sp, #32]
 801cdb8:	210a      	movs	r1, #10
 801cdba:	fb01 2107 	mla	r1, r1, r7, r2
 801cdbe:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801cdc2:	9208      	str	r2, [sp, #32]
 801cdc4:	e7b5      	b.n	801cd32 <_strtod_l+0x2ba>
 801cdc6:	2a6e      	cmp	r2, #110	; 0x6e
 801cdc8:	e7d9      	b.n	801cd7e <_strtod_l+0x306>
 801cdca:	498c      	ldr	r1, [pc, #560]	; (801cffc <_strtod_l+0x584>)
 801cdcc:	a815      	add	r0, sp, #84	; 0x54
 801cdce:	f001 ff01 	bl	801ebd4 <__match>
 801cdd2:	2800      	cmp	r0, #0
 801cdd4:	f43f aea8 	beq.w	801cb28 <_strtod_l+0xb0>
 801cdd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cdda:	a815      	add	r0, sp, #84	; 0x54
 801cddc:	4988      	ldr	r1, [pc, #544]	; (801d000 <_strtod_l+0x588>)
 801cdde:	3b01      	subs	r3, #1
 801cde0:	9315      	str	r3, [sp, #84]	; 0x54
 801cde2:	f001 fef7 	bl	801ebd4 <__match>
 801cde6:	b910      	cbnz	r0, 801cdee <_strtod_l+0x376>
 801cde8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cdea:	3301      	adds	r3, #1
 801cdec:	9315      	str	r3, [sp, #84]	; 0x54
 801cdee:	f8df 9220 	ldr.w	r9, [pc, #544]	; 801d010 <_strtod_l+0x598>
 801cdf2:	f04f 0800 	mov.w	r8, #0
 801cdf6:	e67a      	b.n	801caee <_strtod_l+0x76>
 801cdf8:	4882      	ldr	r0, [pc, #520]	; (801d004 <_strtod_l+0x58c>)
 801cdfa:	f000 fdb5 	bl	801d968 <nan>
 801cdfe:	ec59 8b10 	vmov	r8, r9, d0
 801ce02:	e674      	b.n	801caee <_strtod_l+0x76>
 801ce04:	9b05      	ldr	r3, [sp, #20]
 801ce06:	f1bb 0f00 	cmp.w	fp, #0
 801ce0a:	bf08      	it	eq
 801ce0c:	46b3      	moveq	fp, r6
 801ce0e:	2e10      	cmp	r6, #16
 801ce10:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ce12:	eba7 0303 	sub.w	r3, r7, r3
 801ce16:	4635      	mov	r5, r6
 801ce18:	bfa8      	it	ge
 801ce1a:	2510      	movge	r5, #16
 801ce1c:	9308      	str	r3, [sp, #32]
 801ce1e:	f7e3 fb75 	bl	800050c <__aeabi_ui2d>
 801ce22:	2e09      	cmp	r6, #9
 801ce24:	4680      	mov	r8, r0
 801ce26:	4689      	mov	r9, r1
 801ce28:	dd13      	ble.n	801ce52 <_strtod_l+0x3da>
 801ce2a:	4b77      	ldr	r3, [pc, #476]	; (801d008 <_strtod_l+0x590>)
 801ce2c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801ce30:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801ce34:	f7e3 fbe4 	bl	8000600 <__aeabi_dmul>
 801ce38:	4680      	mov	r8, r0
 801ce3a:	4689      	mov	r9, r1
 801ce3c:	4650      	mov	r0, sl
 801ce3e:	f7e3 fb65 	bl	800050c <__aeabi_ui2d>
 801ce42:	4602      	mov	r2, r0
 801ce44:	460b      	mov	r3, r1
 801ce46:	4640      	mov	r0, r8
 801ce48:	4649      	mov	r1, r9
 801ce4a:	f7e3 fa23 	bl	8000294 <__adddf3>
 801ce4e:	4680      	mov	r8, r0
 801ce50:	4689      	mov	r9, r1
 801ce52:	2e0f      	cmp	r6, #15
 801ce54:	dc38      	bgt.n	801cec8 <_strtod_l+0x450>
 801ce56:	9b08      	ldr	r3, [sp, #32]
 801ce58:	2b00      	cmp	r3, #0
 801ce5a:	f43f ae48 	beq.w	801caee <_strtod_l+0x76>
 801ce5e:	dd24      	ble.n	801ceaa <_strtod_l+0x432>
 801ce60:	2b16      	cmp	r3, #22
 801ce62:	dc0b      	bgt.n	801ce7c <_strtod_l+0x404>
 801ce64:	4968      	ldr	r1, [pc, #416]	; (801d008 <_strtod_l+0x590>)
 801ce66:	4642      	mov	r2, r8
 801ce68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801ce6c:	464b      	mov	r3, r9
 801ce6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ce72:	f7e3 fbc5 	bl	8000600 <__aeabi_dmul>
 801ce76:	4680      	mov	r8, r0
 801ce78:	4689      	mov	r9, r1
 801ce7a:	e638      	b.n	801caee <_strtod_l+0x76>
 801ce7c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 801ce80:	9a08      	ldr	r2, [sp, #32]
 801ce82:	4293      	cmp	r3, r2
 801ce84:	db20      	blt.n	801cec8 <_strtod_l+0x450>
 801ce86:	f1c6 060f 	rsb	r6, r6, #15
 801ce8a:	4c5f      	ldr	r4, [pc, #380]	; (801d008 <_strtod_l+0x590>)
 801ce8c:	4642      	mov	r2, r8
 801ce8e:	464b      	mov	r3, r9
 801ce90:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 801ce94:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ce98:	f7e3 fbb2 	bl	8000600 <__aeabi_dmul>
 801ce9c:	9b08      	ldr	r3, [sp, #32]
 801ce9e:	1b9e      	subs	r6, r3, r6
 801cea0:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 801cea4:	e9d4 2300 	ldrd	r2, r3, [r4]
 801cea8:	e7e3      	b.n	801ce72 <_strtod_l+0x3fa>
 801ceaa:	9b08      	ldr	r3, [sp, #32]
 801ceac:	3316      	adds	r3, #22
 801ceae:	db0b      	blt.n	801cec8 <_strtod_l+0x450>
 801ceb0:	9b05      	ldr	r3, [sp, #20]
 801ceb2:	4640      	mov	r0, r8
 801ceb4:	4649      	mov	r1, r9
 801ceb6:	1bdf      	subs	r7, r3, r7
 801ceb8:	4b53      	ldr	r3, [pc, #332]	; (801d008 <_strtod_l+0x590>)
 801ceba:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801cebe:	e9d7 2300 	ldrd	r2, r3, [r7]
 801cec2:	f7e3 fcc7 	bl	8000854 <__aeabi_ddiv>
 801cec6:	e7d6      	b.n	801ce76 <_strtod_l+0x3fe>
 801cec8:	1b75      	subs	r5, r6, r5
 801ceca:	9b08      	ldr	r3, [sp, #32]
 801cecc:	441d      	add	r5, r3
 801cece:	2d00      	cmp	r5, #0
 801ced0:	dd70      	ble.n	801cfb4 <_strtod_l+0x53c>
 801ced2:	f015 030f 	ands.w	r3, r5, #15
 801ced6:	d00a      	beq.n	801ceee <_strtod_l+0x476>
 801ced8:	494b      	ldr	r1, [pc, #300]	; (801d008 <_strtod_l+0x590>)
 801ceda:	4642      	mov	r2, r8
 801cedc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801cee0:	464b      	mov	r3, r9
 801cee2:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cee6:	f7e3 fb8b 	bl	8000600 <__aeabi_dmul>
 801ceea:	4680      	mov	r8, r0
 801ceec:	4689      	mov	r9, r1
 801ceee:	f035 050f 	bics.w	r5, r5, #15
 801cef2:	d04d      	beq.n	801cf90 <_strtod_l+0x518>
 801cef4:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 801cef8:	dd22      	ble.n	801cf40 <_strtod_l+0x4c8>
 801cefa:	2500      	movs	r5, #0
 801cefc:	46ab      	mov	fp, r5
 801cefe:	9509      	str	r5, [sp, #36]	; 0x24
 801cf00:	9505      	str	r5, [sp, #20]
 801cf02:	2322      	movs	r3, #34	; 0x22
 801cf04:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801d010 <_strtod_l+0x598>
 801cf08:	f04f 0800 	mov.w	r8, #0
 801cf0c:	6023      	str	r3, [r4, #0]
 801cf0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cf10:	2b00      	cmp	r3, #0
 801cf12:	f43f adec 	beq.w	801caee <_strtod_l+0x76>
 801cf16:	9916      	ldr	r1, [sp, #88]	; 0x58
 801cf18:	4620      	mov	r0, r4
 801cf1a:	f002 fb59 	bl	801f5d0 <_Bfree>
 801cf1e:	9905      	ldr	r1, [sp, #20]
 801cf20:	4620      	mov	r0, r4
 801cf22:	f002 fb55 	bl	801f5d0 <_Bfree>
 801cf26:	4659      	mov	r1, fp
 801cf28:	4620      	mov	r0, r4
 801cf2a:	f002 fb51 	bl	801f5d0 <_Bfree>
 801cf2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801cf30:	4620      	mov	r0, r4
 801cf32:	f002 fb4d 	bl	801f5d0 <_Bfree>
 801cf36:	4629      	mov	r1, r5
 801cf38:	4620      	mov	r0, r4
 801cf3a:	f002 fb49 	bl	801f5d0 <_Bfree>
 801cf3e:	e5d6      	b.n	801caee <_strtod_l+0x76>
 801cf40:	4b32      	ldr	r3, [pc, #200]	; (801d00c <_strtod_l+0x594>)
 801cf42:	112d      	asrs	r5, r5, #4
 801cf44:	4640      	mov	r0, r8
 801cf46:	4649      	mov	r1, r9
 801cf48:	9304      	str	r3, [sp, #16]
 801cf4a:	2300      	movs	r3, #0
 801cf4c:	469a      	mov	sl, r3
 801cf4e:	2d01      	cmp	r5, #1
 801cf50:	dc21      	bgt.n	801cf96 <_strtod_l+0x51e>
 801cf52:	b10b      	cbz	r3, 801cf58 <_strtod_l+0x4e0>
 801cf54:	4680      	mov	r8, r0
 801cf56:	4689      	mov	r9, r1
 801cf58:	492c      	ldr	r1, [pc, #176]	; (801d00c <_strtod_l+0x594>)
 801cf5a:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801cf5e:	4642      	mov	r2, r8
 801cf60:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801cf64:	464b      	mov	r3, r9
 801cf66:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cf6a:	f7e3 fb49 	bl	8000600 <__aeabi_dmul>
 801cf6e:	4b28      	ldr	r3, [pc, #160]	; (801d010 <_strtod_l+0x598>)
 801cf70:	460a      	mov	r2, r1
 801cf72:	4680      	mov	r8, r0
 801cf74:	400b      	ands	r3, r1
 801cf76:	4927      	ldr	r1, [pc, #156]	; (801d014 <_strtod_l+0x59c>)
 801cf78:	428b      	cmp	r3, r1
 801cf7a:	d8be      	bhi.n	801cefa <_strtod_l+0x482>
 801cf7c:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801cf80:	428b      	cmp	r3, r1
 801cf82:	bf86      	itte	hi
 801cf84:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801d018 <_strtod_l+0x5a0>
 801cf88:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 801cf8c:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 801cf90:	2300      	movs	r3, #0
 801cf92:	9304      	str	r3, [sp, #16]
 801cf94:	e07c      	b.n	801d090 <_strtod_l+0x618>
 801cf96:	07ea      	lsls	r2, r5, #31
 801cf98:	d505      	bpl.n	801cfa6 <_strtod_l+0x52e>
 801cf9a:	9b04      	ldr	r3, [sp, #16]
 801cf9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cfa0:	f7e3 fb2e 	bl	8000600 <__aeabi_dmul>
 801cfa4:	2301      	movs	r3, #1
 801cfa6:	9a04      	ldr	r2, [sp, #16]
 801cfa8:	f10a 0a01 	add.w	sl, sl, #1
 801cfac:	106d      	asrs	r5, r5, #1
 801cfae:	3208      	adds	r2, #8
 801cfb0:	9204      	str	r2, [sp, #16]
 801cfb2:	e7cc      	b.n	801cf4e <_strtod_l+0x4d6>
 801cfb4:	d0ec      	beq.n	801cf90 <_strtod_l+0x518>
 801cfb6:	426d      	negs	r5, r5
 801cfb8:	f015 020f 	ands.w	r2, r5, #15
 801cfbc:	d00a      	beq.n	801cfd4 <_strtod_l+0x55c>
 801cfbe:	4b12      	ldr	r3, [pc, #72]	; (801d008 <_strtod_l+0x590>)
 801cfc0:	4640      	mov	r0, r8
 801cfc2:	4649      	mov	r1, r9
 801cfc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801cfc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cfcc:	f7e3 fc42 	bl	8000854 <__aeabi_ddiv>
 801cfd0:	4680      	mov	r8, r0
 801cfd2:	4689      	mov	r9, r1
 801cfd4:	112d      	asrs	r5, r5, #4
 801cfd6:	d0db      	beq.n	801cf90 <_strtod_l+0x518>
 801cfd8:	2d1f      	cmp	r5, #31
 801cfda:	dd1f      	ble.n	801d01c <_strtod_l+0x5a4>
 801cfdc:	2500      	movs	r5, #0
 801cfde:	46ab      	mov	fp, r5
 801cfe0:	9509      	str	r5, [sp, #36]	; 0x24
 801cfe2:	9505      	str	r5, [sp, #20]
 801cfe4:	2322      	movs	r3, #34	; 0x22
 801cfe6:	f04f 0800 	mov.w	r8, #0
 801cfea:	f04f 0900 	mov.w	r9, #0
 801cfee:	6023      	str	r3, [r4, #0]
 801cff0:	e78d      	b.n	801cf0e <_strtod_l+0x496>
 801cff2:	bf00      	nop
 801cff4:	08038459 	.word	0x08038459
 801cff8:	0803849c 	.word	0x0803849c
 801cffc:	08038451 	.word	0x08038451
 801d000:	080385e4 	.word	0x080385e4
 801d004:	0803886f 	.word	0x0803886f
 801d008:	08038760 	.word	0x08038760
 801d00c:	08038738 	.word	0x08038738
 801d010:	7ff00000 	.word	0x7ff00000
 801d014:	7ca00000 	.word	0x7ca00000
 801d018:	7fefffff 	.word	0x7fefffff
 801d01c:	f015 0310 	ands.w	r3, r5, #16
 801d020:	4640      	mov	r0, r8
 801d022:	4649      	mov	r1, r9
 801d024:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 801d3c8 <_strtod_l+0x950>
 801d028:	bf18      	it	ne
 801d02a:	236a      	movne	r3, #106	; 0x6a
 801d02c:	9304      	str	r3, [sp, #16]
 801d02e:	2300      	movs	r3, #0
 801d030:	07ea      	lsls	r2, r5, #31
 801d032:	d504      	bpl.n	801d03e <_strtod_l+0x5c6>
 801d034:	e9da 2300 	ldrd	r2, r3, [sl]
 801d038:	f7e3 fae2 	bl	8000600 <__aeabi_dmul>
 801d03c:	2301      	movs	r3, #1
 801d03e:	106d      	asrs	r5, r5, #1
 801d040:	f10a 0a08 	add.w	sl, sl, #8
 801d044:	d1f4      	bne.n	801d030 <_strtod_l+0x5b8>
 801d046:	b10b      	cbz	r3, 801d04c <_strtod_l+0x5d4>
 801d048:	4680      	mov	r8, r0
 801d04a:	4689      	mov	r9, r1
 801d04c:	9b04      	ldr	r3, [sp, #16]
 801d04e:	b1bb      	cbz	r3, 801d080 <_strtod_l+0x608>
 801d050:	f3c9 520a 	ubfx	r2, r9, #20, #11
 801d054:	4649      	mov	r1, r9
 801d056:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801d05a:	2b00      	cmp	r3, #0
 801d05c:	dd10      	ble.n	801d080 <_strtod_l+0x608>
 801d05e:	2b1f      	cmp	r3, #31
 801d060:	f340 811e 	ble.w	801d2a0 <_strtod_l+0x828>
 801d064:	2b34      	cmp	r3, #52	; 0x34
 801d066:	f04f 0800 	mov.w	r8, #0
 801d06a:	bfdb      	ittet	le
 801d06c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 801d070:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801d074:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801d078:	4093      	lslle	r3, r2
 801d07a:	bfd8      	it	le
 801d07c:	ea03 0901 	andle.w	r9, r3, r1
 801d080:	2200      	movs	r2, #0
 801d082:	2300      	movs	r3, #0
 801d084:	4640      	mov	r0, r8
 801d086:	4649      	mov	r1, r9
 801d088:	f7e3 fd22 	bl	8000ad0 <__aeabi_dcmpeq>
 801d08c:	2800      	cmp	r0, #0
 801d08e:	d1a5      	bne.n	801cfdc <_strtod_l+0x564>
 801d090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d092:	465a      	mov	r2, fp
 801d094:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801d096:	4620      	mov	r0, r4
 801d098:	9300      	str	r3, [sp, #0]
 801d09a:	4633      	mov	r3, r6
 801d09c:	f002 fb02 	bl	801f6a4 <__s2b>
 801d0a0:	9009      	str	r0, [sp, #36]	; 0x24
 801d0a2:	2800      	cmp	r0, #0
 801d0a4:	f43f af29 	beq.w	801cefa <_strtod_l+0x482>
 801d0a8:	9a08      	ldr	r2, [sp, #32]
 801d0aa:	2500      	movs	r5, #0
 801d0ac:	9b05      	ldr	r3, [sp, #20]
 801d0ae:	2a00      	cmp	r2, #0
 801d0b0:	46ab      	mov	fp, r5
 801d0b2:	eba3 0307 	sub.w	r3, r3, r7
 801d0b6:	bfa8      	it	ge
 801d0b8:	2300      	movge	r3, #0
 801d0ba:	930c      	str	r3, [sp, #48]	; 0x30
 801d0bc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801d0c0:	9312      	str	r3, [sp, #72]	; 0x48
 801d0c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d0c4:	4620      	mov	r0, r4
 801d0c6:	6859      	ldr	r1, [r3, #4]
 801d0c8:	f002 fa42 	bl	801f550 <_Balloc>
 801d0cc:	9005      	str	r0, [sp, #20]
 801d0ce:	2800      	cmp	r0, #0
 801d0d0:	f43f af17 	beq.w	801cf02 <_strtod_l+0x48a>
 801d0d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d0d6:	300c      	adds	r0, #12
 801d0d8:	691a      	ldr	r2, [r3, #16]
 801d0da:	f103 010c 	add.w	r1, r3, #12
 801d0de:	3202      	adds	r2, #2
 801d0e0:	0092      	lsls	r2, r2, #2
 801d0e2:	f000 fc34 	bl	801d94e <memcpy>
 801d0e6:	aa18      	add	r2, sp, #96	; 0x60
 801d0e8:	a917      	add	r1, sp, #92	; 0x5c
 801d0ea:	4620      	mov	r0, r4
 801d0ec:	ec49 8b10 	vmov	d0, r8, r9
 801d0f0:	f002 fe16 	bl	801fd20 <__d2b>
 801d0f4:	9016      	str	r0, [sp, #88]	; 0x58
 801d0f6:	ec49 8b18 	vmov	d8, r8, r9
 801d0fa:	2800      	cmp	r0, #0
 801d0fc:	f43f af01 	beq.w	801cf02 <_strtod_l+0x48a>
 801d100:	2101      	movs	r1, #1
 801d102:	4620      	mov	r0, r4
 801d104:	f002 fb66 	bl	801f7d4 <__i2b>
 801d108:	4683      	mov	fp, r0
 801d10a:	2800      	cmp	r0, #0
 801d10c:	f43f aef9 	beq.w	801cf02 <_strtod_l+0x48a>
 801d110:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801d112:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801d114:	2e00      	cmp	r6, #0
 801d116:	bfa9      	itett	ge
 801d118:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 801d11a:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 801d11c:	eb06 0a03 	addge.w	sl, r6, r3
 801d120:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801d122:	bfb8      	it	lt
 801d124:	1b9f      	sublt	r7, r3, r6
 801d126:	9b04      	ldr	r3, [sp, #16]
 801d128:	bfb8      	it	lt
 801d12a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 801d12e:	1af6      	subs	r6, r6, r3
 801d130:	4ba0      	ldr	r3, [pc, #640]	; (801d3b4 <_strtod_l+0x93c>)
 801d132:	4416      	add	r6, r2
 801d134:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801d138:	3e01      	subs	r6, #1
 801d13a:	429e      	cmp	r6, r3
 801d13c:	f280 80c3 	bge.w	801d2c6 <_strtod_l+0x84e>
 801d140:	1b9b      	subs	r3, r3, r6
 801d142:	2101      	movs	r1, #1
 801d144:	2b1f      	cmp	r3, #31
 801d146:	eba2 0203 	sub.w	r2, r2, r3
 801d14a:	f300 80b0 	bgt.w	801d2ae <_strtod_l+0x836>
 801d14e:	fa01 f303 	lsl.w	r3, r1, r3
 801d152:	930e      	str	r3, [sp, #56]	; 0x38
 801d154:	2300      	movs	r3, #0
 801d156:	930d      	str	r3, [sp, #52]	; 0x34
 801d158:	eb0a 0602 	add.w	r6, sl, r2
 801d15c:	9b04      	ldr	r3, [sp, #16]
 801d15e:	4417      	add	r7, r2
 801d160:	45b2      	cmp	sl, r6
 801d162:	441f      	add	r7, r3
 801d164:	4653      	mov	r3, sl
 801d166:	bfa8      	it	ge
 801d168:	4633      	movge	r3, r6
 801d16a:	42bb      	cmp	r3, r7
 801d16c:	bfa8      	it	ge
 801d16e:	463b      	movge	r3, r7
 801d170:	2b00      	cmp	r3, #0
 801d172:	bfc2      	ittt	gt
 801d174:	1af6      	subgt	r6, r6, r3
 801d176:	1aff      	subgt	r7, r7, r3
 801d178:	ebaa 0a03 	subgt.w	sl, sl, r3
 801d17c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d17e:	2b00      	cmp	r3, #0
 801d180:	dd17      	ble.n	801d1b2 <_strtod_l+0x73a>
 801d182:	4659      	mov	r1, fp
 801d184:	461a      	mov	r2, r3
 801d186:	4620      	mov	r0, r4
 801d188:	f002 fbe4 	bl	801f954 <__pow5mult>
 801d18c:	4683      	mov	fp, r0
 801d18e:	2800      	cmp	r0, #0
 801d190:	f43f aeb7 	beq.w	801cf02 <_strtod_l+0x48a>
 801d194:	4601      	mov	r1, r0
 801d196:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801d198:	4620      	mov	r0, r4
 801d19a:	f002 fb31 	bl	801f800 <__multiply>
 801d19e:	900b      	str	r0, [sp, #44]	; 0x2c
 801d1a0:	2800      	cmp	r0, #0
 801d1a2:	f43f aeae 	beq.w	801cf02 <_strtod_l+0x48a>
 801d1a6:	9916      	ldr	r1, [sp, #88]	; 0x58
 801d1a8:	4620      	mov	r0, r4
 801d1aa:	f002 fa11 	bl	801f5d0 <_Bfree>
 801d1ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d1b0:	9316      	str	r3, [sp, #88]	; 0x58
 801d1b2:	2e00      	cmp	r6, #0
 801d1b4:	f300 808c 	bgt.w	801d2d0 <_strtod_l+0x858>
 801d1b8:	9b08      	ldr	r3, [sp, #32]
 801d1ba:	2b00      	cmp	r3, #0
 801d1bc:	dd08      	ble.n	801d1d0 <_strtod_l+0x758>
 801d1be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d1c0:	4620      	mov	r0, r4
 801d1c2:	9905      	ldr	r1, [sp, #20]
 801d1c4:	f002 fbc6 	bl	801f954 <__pow5mult>
 801d1c8:	9005      	str	r0, [sp, #20]
 801d1ca:	2800      	cmp	r0, #0
 801d1cc:	f43f ae99 	beq.w	801cf02 <_strtod_l+0x48a>
 801d1d0:	2f00      	cmp	r7, #0
 801d1d2:	dd08      	ble.n	801d1e6 <_strtod_l+0x76e>
 801d1d4:	463a      	mov	r2, r7
 801d1d6:	9905      	ldr	r1, [sp, #20]
 801d1d8:	4620      	mov	r0, r4
 801d1da:	f002 fc15 	bl	801fa08 <__lshift>
 801d1de:	9005      	str	r0, [sp, #20]
 801d1e0:	2800      	cmp	r0, #0
 801d1e2:	f43f ae8e 	beq.w	801cf02 <_strtod_l+0x48a>
 801d1e6:	f1ba 0f00 	cmp.w	sl, #0
 801d1ea:	dd08      	ble.n	801d1fe <_strtod_l+0x786>
 801d1ec:	4659      	mov	r1, fp
 801d1ee:	4652      	mov	r2, sl
 801d1f0:	4620      	mov	r0, r4
 801d1f2:	f002 fc09 	bl	801fa08 <__lshift>
 801d1f6:	4683      	mov	fp, r0
 801d1f8:	2800      	cmp	r0, #0
 801d1fa:	f43f ae82 	beq.w	801cf02 <_strtod_l+0x48a>
 801d1fe:	9a05      	ldr	r2, [sp, #20]
 801d200:	4620      	mov	r0, r4
 801d202:	9916      	ldr	r1, [sp, #88]	; 0x58
 801d204:	f002 fc88 	bl	801fb18 <__mdiff>
 801d208:	4605      	mov	r5, r0
 801d20a:	2800      	cmp	r0, #0
 801d20c:	f43f ae79 	beq.w	801cf02 <_strtod_l+0x48a>
 801d210:	68c3      	ldr	r3, [r0, #12]
 801d212:	4659      	mov	r1, fp
 801d214:	930b      	str	r3, [sp, #44]	; 0x2c
 801d216:	2300      	movs	r3, #0
 801d218:	60c3      	str	r3, [r0, #12]
 801d21a:	f002 fc61 	bl	801fae0 <__mcmp>
 801d21e:	2800      	cmp	r0, #0
 801d220:	da60      	bge.n	801d2e4 <_strtod_l+0x86c>
 801d222:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d224:	ea53 0308 	orrs.w	r3, r3, r8
 801d228:	f040 8084 	bne.w	801d334 <_strtod_l+0x8bc>
 801d22c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d230:	2b00      	cmp	r3, #0
 801d232:	d17f      	bne.n	801d334 <_strtod_l+0x8bc>
 801d234:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801d238:	0d1b      	lsrs	r3, r3, #20
 801d23a:	051b      	lsls	r3, r3, #20
 801d23c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801d240:	d978      	bls.n	801d334 <_strtod_l+0x8bc>
 801d242:	696b      	ldr	r3, [r5, #20]
 801d244:	b913      	cbnz	r3, 801d24c <_strtod_l+0x7d4>
 801d246:	692b      	ldr	r3, [r5, #16]
 801d248:	2b01      	cmp	r3, #1
 801d24a:	dd73      	ble.n	801d334 <_strtod_l+0x8bc>
 801d24c:	4629      	mov	r1, r5
 801d24e:	2201      	movs	r2, #1
 801d250:	4620      	mov	r0, r4
 801d252:	f002 fbd9 	bl	801fa08 <__lshift>
 801d256:	4659      	mov	r1, fp
 801d258:	4605      	mov	r5, r0
 801d25a:	f002 fc41 	bl	801fae0 <__mcmp>
 801d25e:	2800      	cmp	r0, #0
 801d260:	dd68      	ble.n	801d334 <_strtod_l+0x8bc>
 801d262:	9904      	ldr	r1, [sp, #16]
 801d264:	464b      	mov	r3, r9
 801d266:	4a54      	ldr	r2, [pc, #336]	; (801d3b8 <_strtod_l+0x940>)
 801d268:	2900      	cmp	r1, #0
 801d26a:	f000 8084 	beq.w	801d376 <_strtod_l+0x8fe>
 801d26e:	ea02 0109 	and.w	r1, r2, r9
 801d272:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801d276:	dc7e      	bgt.n	801d376 <_strtod_l+0x8fe>
 801d278:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801d27c:	f77f aeb2 	ble.w	801cfe4 <_strtod_l+0x56c>
 801d280:	4b4e      	ldr	r3, [pc, #312]	; (801d3bc <_strtod_l+0x944>)
 801d282:	4640      	mov	r0, r8
 801d284:	4649      	mov	r1, r9
 801d286:	2200      	movs	r2, #0
 801d288:	f7e3 f9ba 	bl	8000600 <__aeabi_dmul>
 801d28c:	4b4a      	ldr	r3, [pc, #296]	; (801d3b8 <_strtod_l+0x940>)
 801d28e:	4680      	mov	r8, r0
 801d290:	4689      	mov	r9, r1
 801d292:	400b      	ands	r3, r1
 801d294:	2b00      	cmp	r3, #0
 801d296:	f47f ae3e 	bne.w	801cf16 <_strtod_l+0x49e>
 801d29a:	2322      	movs	r3, #34	; 0x22
 801d29c:	6023      	str	r3, [r4, #0]
 801d29e:	e63a      	b.n	801cf16 <_strtod_l+0x49e>
 801d2a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801d2a4:	fa02 f303 	lsl.w	r3, r2, r3
 801d2a8:	ea03 0808 	and.w	r8, r3, r8
 801d2ac:	e6e8      	b.n	801d080 <_strtod_l+0x608>
 801d2ae:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801d2b2:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801d2b6:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801d2ba:	36e2      	adds	r6, #226	; 0xe2
 801d2bc:	fa01 f306 	lsl.w	r3, r1, r6
 801d2c0:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 801d2c4:	e748      	b.n	801d158 <_strtod_l+0x6e0>
 801d2c6:	2100      	movs	r1, #0
 801d2c8:	2301      	movs	r3, #1
 801d2ca:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 801d2ce:	e743      	b.n	801d158 <_strtod_l+0x6e0>
 801d2d0:	4632      	mov	r2, r6
 801d2d2:	9916      	ldr	r1, [sp, #88]	; 0x58
 801d2d4:	4620      	mov	r0, r4
 801d2d6:	f002 fb97 	bl	801fa08 <__lshift>
 801d2da:	9016      	str	r0, [sp, #88]	; 0x58
 801d2dc:	2800      	cmp	r0, #0
 801d2de:	f47f af6b 	bne.w	801d1b8 <_strtod_l+0x740>
 801d2e2:	e60e      	b.n	801cf02 <_strtod_l+0x48a>
 801d2e4:	46ca      	mov	sl, r9
 801d2e6:	d171      	bne.n	801d3cc <_strtod_l+0x954>
 801d2e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d2ea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d2ee:	b352      	cbz	r2, 801d346 <_strtod_l+0x8ce>
 801d2f0:	4a33      	ldr	r2, [pc, #204]	; (801d3c0 <_strtod_l+0x948>)
 801d2f2:	4293      	cmp	r3, r2
 801d2f4:	d12a      	bne.n	801d34c <_strtod_l+0x8d4>
 801d2f6:	9b04      	ldr	r3, [sp, #16]
 801d2f8:	4641      	mov	r1, r8
 801d2fa:	b1fb      	cbz	r3, 801d33c <_strtod_l+0x8c4>
 801d2fc:	4b2e      	ldr	r3, [pc, #184]	; (801d3b8 <_strtod_l+0x940>)
 801d2fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801d302:	ea09 0303 	and.w	r3, r9, r3
 801d306:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801d30a:	d81a      	bhi.n	801d342 <_strtod_l+0x8ca>
 801d30c:	0d1b      	lsrs	r3, r3, #20
 801d30e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801d312:	fa02 f303 	lsl.w	r3, r2, r3
 801d316:	4299      	cmp	r1, r3
 801d318:	d118      	bne.n	801d34c <_strtod_l+0x8d4>
 801d31a:	4b2a      	ldr	r3, [pc, #168]	; (801d3c4 <_strtod_l+0x94c>)
 801d31c:	459a      	cmp	sl, r3
 801d31e:	d102      	bne.n	801d326 <_strtod_l+0x8ae>
 801d320:	3101      	adds	r1, #1
 801d322:	f43f adee 	beq.w	801cf02 <_strtod_l+0x48a>
 801d326:	4b24      	ldr	r3, [pc, #144]	; (801d3b8 <_strtod_l+0x940>)
 801d328:	f04f 0800 	mov.w	r8, #0
 801d32c:	ea0a 0303 	and.w	r3, sl, r3
 801d330:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801d334:	9b04      	ldr	r3, [sp, #16]
 801d336:	2b00      	cmp	r3, #0
 801d338:	d1a2      	bne.n	801d280 <_strtod_l+0x808>
 801d33a:	e5ec      	b.n	801cf16 <_strtod_l+0x49e>
 801d33c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d340:	e7e9      	b.n	801d316 <_strtod_l+0x89e>
 801d342:	4613      	mov	r3, r2
 801d344:	e7e7      	b.n	801d316 <_strtod_l+0x89e>
 801d346:	ea53 0308 	orrs.w	r3, r3, r8
 801d34a:	d08a      	beq.n	801d262 <_strtod_l+0x7ea>
 801d34c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d34e:	b1e3      	cbz	r3, 801d38a <_strtod_l+0x912>
 801d350:	ea13 0f0a 	tst.w	r3, sl
 801d354:	d0ee      	beq.n	801d334 <_strtod_l+0x8bc>
 801d356:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d358:	4640      	mov	r0, r8
 801d35a:	9a04      	ldr	r2, [sp, #16]
 801d35c:	4649      	mov	r1, r9
 801d35e:	b1c3      	cbz	r3, 801d392 <_strtod_l+0x91a>
 801d360:	f7ff fb6c 	bl	801ca3c <sulp>
 801d364:	4602      	mov	r2, r0
 801d366:	460b      	mov	r3, r1
 801d368:	ec51 0b18 	vmov	r0, r1, d8
 801d36c:	f7e2 ff92 	bl	8000294 <__adddf3>
 801d370:	4680      	mov	r8, r0
 801d372:	4689      	mov	r9, r1
 801d374:	e7de      	b.n	801d334 <_strtod_l+0x8bc>
 801d376:	4013      	ands	r3, r2
 801d378:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801d37c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801d380:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801d384:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801d388:	e7d4      	b.n	801d334 <_strtod_l+0x8bc>
 801d38a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d38c:	ea13 0f08 	tst.w	r3, r8
 801d390:	e7e0      	b.n	801d354 <_strtod_l+0x8dc>
 801d392:	f7ff fb53 	bl	801ca3c <sulp>
 801d396:	4602      	mov	r2, r0
 801d398:	460b      	mov	r3, r1
 801d39a:	ec51 0b18 	vmov	r0, r1, d8
 801d39e:	f7e2 ff77 	bl	8000290 <__aeabi_dsub>
 801d3a2:	2200      	movs	r2, #0
 801d3a4:	2300      	movs	r3, #0
 801d3a6:	4680      	mov	r8, r0
 801d3a8:	4689      	mov	r9, r1
 801d3aa:	f7e3 fb91 	bl	8000ad0 <__aeabi_dcmpeq>
 801d3ae:	2800      	cmp	r0, #0
 801d3b0:	d0c0      	beq.n	801d334 <_strtod_l+0x8bc>
 801d3b2:	e617      	b.n	801cfe4 <_strtod_l+0x56c>
 801d3b4:	fffffc02 	.word	0xfffffc02
 801d3b8:	7ff00000 	.word	0x7ff00000
 801d3bc:	39500000 	.word	0x39500000
 801d3c0:	000fffff 	.word	0x000fffff
 801d3c4:	7fefffff 	.word	0x7fefffff
 801d3c8:	080384b0 	.word	0x080384b0
 801d3cc:	4659      	mov	r1, fp
 801d3ce:	4628      	mov	r0, r5
 801d3d0:	f002 fd00 	bl	801fdd4 <__ratio>
 801d3d4:	2200      	movs	r2, #0
 801d3d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801d3da:	ee10 0a10 	vmov	r0, s0
 801d3de:	ec57 6b10 	vmov	r6, r7, d0
 801d3e2:	4639      	mov	r1, r7
 801d3e4:	f7e3 fb88 	bl	8000af8 <__aeabi_dcmple>
 801d3e8:	2800      	cmp	r0, #0
 801d3ea:	d071      	beq.n	801d4d0 <_strtod_l+0xa58>
 801d3ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d3ee:	2b00      	cmp	r3, #0
 801d3f0:	d17c      	bne.n	801d4ec <_strtod_l+0xa74>
 801d3f2:	f1b8 0f00 	cmp.w	r8, #0
 801d3f6:	d15a      	bne.n	801d4ae <_strtod_l+0xa36>
 801d3f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d3fc:	2b00      	cmp	r3, #0
 801d3fe:	d15d      	bne.n	801d4bc <_strtod_l+0xa44>
 801d400:	2200      	movs	r2, #0
 801d402:	4b91      	ldr	r3, [pc, #580]	; (801d648 <_strtod_l+0xbd0>)
 801d404:	4630      	mov	r0, r6
 801d406:	4639      	mov	r1, r7
 801d408:	f7e3 fb6c 	bl	8000ae4 <__aeabi_dcmplt>
 801d40c:	2800      	cmp	r0, #0
 801d40e:	d15c      	bne.n	801d4ca <_strtod_l+0xa52>
 801d410:	4630      	mov	r0, r6
 801d412:	4639      	mov	r1, r7
 801d414:	2200      	movs	r2, #0
 801d416:	4b8d      	ldr	r3, [pc, #564]	; (801d64c <_strtod_l+0xbd4>)
 801d418:	f7e3 f8f2 	bl	8000600 <__aeabi_dmul>
 801d41c:	4606      	mov	r6, r0
 801d41e:	460f      	mov	r7, r1
 801d420:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 801d424:	9606      	str	r6, [sp, #24]
 801d426:	9307      	str	r3, [sp, #28]
 801d428:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d42c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801d430:	4b87      	ldr	r3, [pc, #540]	; (801d650 <_strtod_l+0xbd8>)
 801d432:	ea0a 0303 	and.w	r3, sl, r3
 801d436:	930d      	str	r3, [sp, #52]	; 0x34
 801d438:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d43a:	4b86      	ldr	r3, [pc, #536]	; (801d654 <_strtod_l+0xbdc>)
 801d43c:	429a      	cmp	r2, r3
 801d43e:	f040 8090 	bne.w	801d562 <_strtod_l+0xaea>
 801d442:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 801d446:	ec49 8b10 	vmov	d0, r8, r9
 801d44a:	f002 fbf5 	bl	801fc38 <__ulp>
 801d44e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d452:	ec51 0b10 	vmov	r0, r1, d0
 801d456:	f7e3 f8d3 	bl	8000600 <__aeabi_dmul>
 801d45a:	4642      	mov	r2, r8
 801d45c:	464b      	mov	r3, r9
 801d45e:	f7e2 ff19 	bl	8000294 <__adddf3>
 801d462:	460b      	mov	r3, r1
 801d464:	497a      	ldr	r1, [pc, #488]	; (801d650 <_strtod_l+0xbd8>)
 801d466:	4680      	mov	r8, r0
 801d468:	4a7b      	ldr	r2, [pc, #492]	; (801d658 <_strtod_l+0xbe0>)
 801d46a:	4019      	ands	r1, r3
 801d46c:	4291      	cmp	r1, r2
 801d46e:	d944      	bls.n	801d4fa <_strtod_l+0xa82>
 801d470:	ee18 2a90 	vmov	r2, s17
 801d474:	4b79      	ldr	r3, [pc, #484]	; (801d65c <_strtod_l+0xbe4>)
 801d476:	429a      	cmp	r2, r3
 801d478:	d104      	bne.n	801d484 <_strtod_l+0xa0c>
 801d47a:	ee18 3a10 	vmov	r3, s16
 801d47e:	3301      	adds	r3, #1
 801d480:	f43f ad3f 	beq.w	801cf02 <_strtod_l+0x48a>
 801d484:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 801d65c <_strtod_l+0xbe4>
 801d488:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801d48c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801d48e:	4620      	mov	r0, r4
 801d490:	f002 f89e 	bl	801f5d0 <_Bfree>
 801d494:	9905      	ldr	r1, [sp, #20]
 801d496:	4620      	mov	r0, r4
 801d498:	f002 f89a 	bl	801f5d0 <_Bfree>
 801d49c:	4659      	mov	r1, fp
 801d49e:	4620      	mov	r0, r4
 801d4a0:	f002 f896 	bl	801f5d0 <_Bfree>
 801d4a4:	4629      	mov	r1, r5
 801d4a6:	4620      	mov	r0, r4
 801d4a8:	f002 f892 	bl	801f5d0 <_Bfree>
 801d4ac:	e609      	b.n	801d0c2 <_strtod_l+0x64a>
 801d4ae:	f1b8 0f01 	cmp.w	r8, #1
 801d4b2:	d103      	bne.n	801d4bc <_strtod_l+0xa44>
 801d4b4:	f1b9 0f00 	cmp.w	r9, #0
 801d4b8:	f43f ad94 	beq.w	801cfe4 <_strtod_l+0x56c>
 801d4bc:	2600      	movs	r6, #0
 801d4be:	4f62      	ldr	r7, [pc, #392]	; (801d648 <_strtod_l+0xbd0>)
 801d4c0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 801d618 <_strtod_l+0xba0>
 801d4c4:	ed8d 7b06 	vstr	d7, [sp, #24]
 801d4c8:	e7ae      	b.n	801d428 <_strtod_l+0x9b0>
 801d4ca:	2600      	movs	r6, #0
 801d4cc:	4f5f      	ldr	r7, [pc, #380]	; (801d64c <_strtod_l+0xbd4>)
 801d4ce:	e7a7      	b.n	801d420 <_strtod_l+0x9a8>
 801d4d0:	4b5e      	ldr	r3, [pc, #376]	; (801d64c <_strtod_l+0xbd4>)
 801d4d2:	4630      	mov	r0, r6
 801d4d4:	4639      	mov	r1, r7
 801d4d6:	2200      	movs	r2, #0
 801d4d8:	f7e3 f892 	bl	8000600 <__aeabi_dmul>
 801d4dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d4de:	4606      	mov	r6, r0
 801d4e0:	460f      	mov	r7, r1
 801d4e2:	2b00      	cmp	r3, #0
 801d4e4:	d09c      	beq.n	801d420 <_strtod_l+0x9a8>
 801d4e6:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801d4ea:	e79d      	b.n	801d428 <_strtod_l+0x9b0>
 801d4ec:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 801d620 <_strtod_l+0xba8>
 801d4f0:	ec57 6b17 	vmov	r6, r7, d7
 801d4f4:	ed8d 7b06 	vstr	d7, [sp, #24]
 801d4f8:	e796      	b.n	801d428 <_strtod_l+0x9b0>
 801d4fa:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801d4fe:	9b04      	ldr	r3, [sp, #16]
 801d500:	46ca      	mov	sl, r9
 801d502:	2b00      	cmp	r3, #0
 801d504:	d1c2      	bne.n	801d48c <_strtod_l+0xa14>
 801d506:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801d50a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d50c:	0d1b      	lsrs	r3, r3, #20
 801d50e:	051b      	lsls	r3, r3, #20
 801d510:	429a      	cmp	r2, r3
 801d512:	d1bb      	bne.n	801d48c <_strtod_l+0xa14>
 801d514:	4630      	mov	r0, r6
 801d516:	4639      	mov	r1, r7
 801d518:	f7e3 fbba 	bl	8000c90 <__aeabi_d2lz>
 801d51c:	f7e3 f842 	bl	80005a4 <__aeabi_l2d>
 801d520:	4602      	mov	r2, r0
 801d522:	460b      	mov	r3, r1
 801d524:	4630      	mov	r0, r6
 801d526:	4639      	mov	r1, r7
 801d528:	f7e2 feb2 	bl	8000290 <__aeabi_dsub>
 801d52c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d530:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d532:	4606      	mov	r6, r0
 801d534:	ea43 0308 	orr.w	r3, r3, r8
 801d538:	460f      	mov	r7, r1
 801d53a:	4313      	orrs	r3, r2
 801d53c:	d054      	beq.n	801d5e8 <_strtod_l+0xb70>
 801d53e:	a33a      	add	r3, pc, #232	; (adr r3, 801d628 <_strtod_l+0xbb0>)
 801d540:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d544:	f7e3 face 	bl	8000ae4 <__aeabi_dcmplt>
 801d548:	2800      	cmp	r0, #0
 801d54a:	f47f ace4 	bne.w	801cf16 <_strtod_l+0x49e>
 801d54e:	4630      	mov	r0, r6
 801d550:	4639      	mov	r1, r7
 801d552:	a337      	add	r3, pc, #220	; (adr r3, 801d630 <_strtod_l+0xbb8>)
 801d554:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d558:	f7e3 fae2 	bl	8000b20 <__aeabi_dcmpgt>
 801d55c:	2800      	cmp	r0, #0
 801d55e:	d095      	beq.n	801d48c <_strtod_l+0xa14>
 801d560:	e4d9      	b.n	801cf16 <_strtod_l+0x49e>
 801d562:	9b04      	ldr	r3, [sp, #16]
 801d564:	b333      	cbz	r3, 801d5b4 <_strtod_l+0xb3c>
 801d566:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d568:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801d56c:	d822      	bhi.n	801d5b4 <_strtod_l+0xb3c>
 801d56e:	4630      	mov	r0, r6
 801d570:	4639      	mov	r1, r7
 801d572:	a331      	add	r3, pc, #196	; (adr r3, 801d638 <_strtod_l+0xbc0>)
 801d574:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d578:	f7e3 fabe 	bl	8000af8 <__aeabi_dcmple>
 801d57c:	b1a0      	cbz	r0, 801d5a8 <_strtod_l+0xb30>
 801d57e:	4639      	mov	r1, r7
 801d580:	4630      	mov	r0, r6
 801d582:	f7e3 fb15 	bl	8000bb0 <__aeabi_d2uiz>
 801d586:	2801      	cmp	r0, #1
 801d588:	bf38      	it	cc
 801d58a:	2001      	movcc	r0, #1
 801d58c:	f7e2 ffbe 	bl	800050c <__aeabi_ui2d>
 801d590:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d592:	4606      	mov	r6, r0
 801d594:	460f      	mov	r7, r1
 801d596:	bb23      	cbnz	r3, 801d5e2 <_strtod_l+0xb6a>
 801d598:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d59c:	9010      	str	r0, [sp, #64]	; 0x40
 801d59e:	9311      	str	r3, [sp, #68]	; 0x44
 801d5a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801d5a4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801d5a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d5aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d5ac:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801d5b0:	1a9b      	subs	r3, r3, r2
 801d5b2:	930f      	str	r3, [sp, #60]	; 0x3c
 801d5b4:	eeb0 0a48 	vmov.f32	s0, s16
 801d5b8:	eef0 0a68 	vmov.f32	s1, s17
 801d5bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801d5c0:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801d5c4:	f002 fb38 	bl	801fc38 <__ulp>
 801d5c8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801d5cc:	ec53 2b10 	vmov	r2, r3, d0
 801d5d0:	f7e3 f816 	bl	8000600 <__aeabi_dmul>
 801d5d4:	ec53 2b18 	vmov	r2, r3, d8
 801d5d8:	f7e2 fe5c 	bl	8000294 <__adddf3>
 801d5dc:	4680      	mov	r8, r0
 801d5de:	4689      	mov	r9, r1
 801d5e0:	e78d      	b.n	801d4fe <_strtod_l+0xa86>
 801d5e2:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801d5e6:	e7db      	b.n	801d5a0 <_strtod_l+0xb28>
 801d5e8:	a315      	add	r3, pc, #84	; (adr r3, 801d640 <_strtod_l+0xbc8>)
 801d5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d5ee:	f7e3 fa79 	bl	8000ae4 <__aeabi_dcmplt>
 801d5f2:	e7b3      	b.n	801d55c <_strtod_l+0xae4>
 801d5f4:	2300      	movs	r3, #0
 801d5f6:	930a      	str	r3, [sp, #40]	; 0x28
 801d5f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d5fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d5fc:	6013      	str	r3, [r2, #0]
 801d5fe:	f7ff ba7a 	b.w	801caf6 <_strtod_l+0x7e>
 801d602:	2a65      	cmp	r2, #101	; 0x65
 801d604:	f43f ab72 	beq.w	801ccec <_strtod_l+0x274>
 801d608:	2a45      	cmp	r2, #69	; 0x45
 801d60a:	f43f ab6f 	beq.w	801ccec <_strtod_l+0x274>
 801d60e:	2301      	movs	r3, #1
 801d610:	f7ff bba8 	b.w	801cd64 <_strtod_l+0x2ec>
 801d614:	f3af 8000 	nop.w
 801d618:	00000000 	.word	0x00000000
 801d61c:	bff00000 	.word	0xbff00000
 801d620:	00000000 	.word	0x00000000
 801d624:	3ff00000 	.word	0x3ff00000
 801d628:	94a03595 	.word	0x94a03595
 801d62c:	3fdfffff 	.word	0x3fdfffff
 801d630:	35afe535 	.word	0x35afe535
 801d634:	3fe00000 	.word	0x3fe00000
 801d638:	ffc00000 	.word	0xffc00000
 801d63c:	41dfffff 	.word	0x41dfffff
 801d640:	94a03595 	.word	0x94a03595
 801d644:	3fcfffff 	.word	0x3fcfffff
 801d648:	3ff00000 	.word	0x3ff00000
 801d64c:	3fe00000 	.word	0x3fe00000
 801d650:	7ff00000 	.word	0x7ff00000
 801d654:	7fe00000 	.word	0x7fe00000
 801d658:	7c9fffff 	.word	0x7c9fffff
 801d65c:	7fefffff 	.word	0x7fefffff

0801d660 <_strtod_r>:
 801d660:	4b01      	ldr	r3, [pc, #4]	; (801d668 <_strtod_r+0x8>)
 801d662:	f7ff ba09 	b.w	801ca78 <_strtod_l>
 801d666:	bf00      	nop
 801d668:	200005f8 	.word	0x200005f8

0801d66c <_strtol_l.constprop.0>:
 801d66c:	2b01      	cmp	r3, #1
 801d66e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d672:	d001      	beq.n	801d678 <_strtol_l.constprop.0+0xc>
 801d674:	2b24      	cmp	r3, #36	; 0x24
 801d676:	d906      	bls.n	801d686 <_strtol_l.constprop.0+0x1a>
 801d678:	f000 f92e 	bl	801d8d8 <__errno>
 801d67c:	2316      	movs	r3, #22
 801d67e:	6003      	str	r3, [r0, #0]
 801d680:	2000      	movs	r0, #0
 801d682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d686:	460d      	mov	r5, r1
 801d688:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 801d76c <_strtol_l.constprop.0+0x100>
 801d68c:	462e      	mov	r6, r5
 801d68e:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d692:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801d696:	f017 0708 	ands.w	r7, r7, #8
 801d69a:	d1f7      	bne.n	801d68c <_strtol_l.constprop.0+0x20>
 801d69c:	2c2d      	cmp	r4, #45	; 0x2d
 801d69e:	d132      	bne.n	801d706 <_strtol_l.constprop.0+0x9a>
 801d6a0:	782c      	ldrb	r4, [r5, #0]
 801d6a2:	2701      	movs	r7, #1
 801d6a4:	1cb5      	adds	r5, r6, #2
 801d6a6:	2b00      	cmp	r3, #0
 801d6a8:	d05b      	beq.n	801d762 <_strtol_l.constprop.0+0xf6>
 801d6aa:	2b10      	cmp	r3, #16
 801d6ac:	d109      	bne.n	801d6c2 <_strtol_l.constprop.0+0x56>
 801d6ae:	2c30      	cmp	r4, #48	; 0x30
 801d6b0:	d107      	bne.n	801d6c2 <_strtol_l.constprop.0+0x56>
 801d6b2:	782c      	ldrb	r4, [r5, #0]
 801d6b4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801d6b8:	2c58      	cmp	r4, #88	; 0x58
 801d6ba:	d14d      	bne.n	801d758 <_strtol_l.constprop.0+0xec>
 801d6bc:	786c      	ldrb	r4, [r5, #1]
 801d6be:	2310      	movs	r3, #16
 801d6c0:	3502      	adds	r5, #2
 801d6c2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801d6c6:	f04f 0e00 	mov.w	lr, #0
 801d6ca:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801d6ce:	4676      	mov	r6, lr
 801d6d0:	fbb8 f9f3 	udiv	r9, r8, r3
 801d6d4:	fb03 8a19 	mls	sl, r3, r9, r8
 801d6d8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801d6dc:	f1bc 0f09 	cmp.w	ip, #9
 801d6e0:	d816      	bhi.n	801d710 <_strtol_l.constprop.0+0xa4>
 801d6e2:	4664      	mov	r4, ip
 801d6e4:	42a3      	cmp	r3, r4
 801d6e6:	dd24      	ble.n	801d732 <_strtol_l.constprop.0+0xc6>
 801d6e8:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 801d6ec:	d008      	beq.n	801d700 <_strtol_l.constprop.0+0x94>
 801d6ee:	45b1      	cmp	r9, r6
 801d6f0:	d31c      	bcc.n	801d72c <_strtol_l.constprop.0+0xc0>
 801d6f2:	d101      	bne.n	801d6f8 <_strtol_l.constprop.0+0x8c>
 801d6f4:	45a2      	cmp	sl, r4
 801d6f6:	db19      	blt.n	801d72c <_strtol_l.constprop.0+0xc0>
 801d6f8:	fb06 4603 	mla	r6, r6, r3, r4
 801d6fc:	f04f 0e01 	mov.w	lr, #1
 801d700:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d704:	e7e8      	b.n	801d6d8 <_strtol_l.constprop.0+0x6c>
 801d706:	2c2b      	cmp	r4, #43	; 0x2b
 801d708:	bf04      	itt	eq
 801d70a:	782c      	ldrbeq	r4, [r5, #0]
 801d70c:	1cb5      	addeq	r5, r6, #2
 801d70e:	e7ca      	b.n	801d6a6 <_strtol_l.constprop.0+0x3a>
 801d710:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801d714:	f1bc 0f19 	cmp.w	ip, #25
 801d718:	d801      	bhi.n	801d71e <_strtol_l.constprop.0+0xb2>
 801d71a:	3c37      	subs	r4, #55	; 0x37
 801d71c:	e7e2      	b.n	801d6e4 <_strtol_l.constprop.0+0x78>
 801d71e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801d722:	f1bc 0f19 	cmp.w	ip, #25
 801d726:	d804      	bhi.n	801d732 <_strtol_l.constprop.0+0xc6>
 801d728:	3c57      	subs	r4, #87	; 0x57
 801d72a:	e7db      	b.n	801d6e4 <_strtol_l.constprop.0+0x78>
 801d72c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 801d730:	e7e6      	b.n	801d700 <_strtol_l.constprop.0+0x94>
 801d732:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 801d736:	d105      	bne.n	801d744 <_strtol_l.constprop.0+0xd8>
 801d738:	2322      	movs	r3, #34	; 0x22
 801d73a:	4646      	mov	r6, r8
 801d73c:	6003      	str	r3, [r0, #0]
 801d73e:	b942      	cbnz	r2, 801d752 <_strtol_l.constprop.0+0xe6>
 801d740:	4630      	mov	r0, r6
 801d742:	e79e      	b.n	801d682 <_strtol_l.constprop.0+0x16>
 801d744:	b107      	cbz	r7, 801d748 <_strtol_l.constprop.0+0xdc>
 801d746:	4276      	negs	r6, r6
 801d748:	2a00      	cmp	r2, #0
 801d74a:	d0f9      	beq.n	801d740 <_strtol_l.constprop.0+0xd4>
 801d74c:	f1be 0f00 	cmp.w	lr, #0
 801d750:	d000      	beq.n	801d754 <_strtol_l.constprop.0+0xe8>
 801d752:	1e69      	subs	r1, r5, #1
 801d754:	6011      	str	r1, [r2, #0]
 801d756:	e7f3      	b.n	801d740 <_strtol_l.constprop.0+0xd4>
 801d758:	2430      	movs	r4, #48	; 0x30
 801d75a:	2b00      	cmp	r3, #0
 801d75c:	d1b1      	bne.n	801d6c2 <_strtol_l.constprop.0+0x56>
 801d75e:	2308      	movs	r3, #8
 801d760:	e7af      	b.n	801d6c2 <_strtol_l.constprop.0+0x56>
 801d762:	2c30      	cmp	r4, #48	; 0x30
 801d764:	d0a5      	beq.n	801d6b2 <_strtol_l.constprop.0+0x46>
 801d766:	230a      	movs	r3, #10
 801d768:	e7ab      	b.n	801d6c2 <_strtol_l.constprop.0+0x56>
 801d76a:	bf00      	nop
 801d76c:	080384e1 	.word	0x080384e1

0801d770 <_strtol_r>:
 801d770:	f7ff bf7c 	b.w	801d66c <_strtol_l.constprop.0>

0801d774 <_fwalk_sglue>:
 801d774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d778:	4607      	mov	r7, r0
 801d77a:	4688      	mov	r8, r1
 801d77c:	4614      	mov	r4, r2
 801d77e:	2600      	movs	r6, #0
 801d780:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d784:	f1b9 0901 	subs.w	r9, r9, #1
 801d788:	d505      	bpl.n	801d796 <_fwalk_sglue+0x22>
 801d78a:	6824      	ldr	r4, [r4, #0]
 801d78c:	2c00      	cmp	r4, #0
 801d78e:	d1f7      	bne.n	801d780 <_fwalk_sglue+0xc>
 801d790:	4630      	mov	r0, r6
 801d792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d796:	89ab      	ldrh	r3, [r5, #12]
 801d798:	2b01      	cmp	r3, #1
 801d79a:	d907      	bls.n	801d7ac <_fwalk_sglue+0x38>
 801d79c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d7a0:	3301      	adds	r3, #1
 801d7a2:	d003      	beq.n	801d7ac <_fwalk_sglue+0x38>
 801d7a4:	4629      	mov	r1, r5
 801d7a6:	4638      	mov	r0, r7
 801d7a8:	47c0      	blx	r8
 801d7aa:	4306      	orrs	r6, r0
 801d7ac:	3568      	adds	r5, #104	; 0x68
 801d7ae:	e7e9      	b.n	801d784 <_fwalk_sglue+0x10>

0801d7b0 <iprintf>:
 801d7b0:	b40f      	push	{r0, r1, r2, r3}
 801d7b2:	b507      	push	{r0, r1, r2, lr}
 801d7b4:	4906      	ldr	r1, [pc, #24]	; (801d7d0 <iprintf+0x20>)
 801d7b6:	ab04      	add	r3, sp, #16
 801d7b8:	6808      	ldr	r0, [r1, #0]
 801d7ba:	f853 2b04 	ldr.w	r2, [r3], #4
 801d7be:	6881      	ldr	r1, [r0, #8]
 801d7c0:	9301      	str	r3, [sp, #4]
 801d7c2:	f001 fc39 	bl	801f038 <_vfiprintf_r>
 801d7c6:	b003      	add	sp, #12
 801d7c8:	f85d eb04 	ldr.w	lr, [sp], #4
 801d7cc:	b004      	add	sp, #16
 801d7ce:	4770      	bx	lr
 801d7d0:	200007b0 	.word	0x200007b0

0801d7d4 <putchar>:
 801d7d4:	4b02      	ldr	r3, [pc, #8]	; (801d7e0 <putchar+0xc>)
 801d7d6:	4601      	mov	r1, r0
 801d7d8:	6818      	ldr	r0, [r3, #0]
 801d7da:	6882      	ldr	r2, [r0, #8]
 801d7dc:	f002 bce6 	b.w	80201ac <_putc_r>
 801d7e0:	200007b0 	.word	0x200007b0

0801d7e4 <_puts_r>:
 801d7e4:	6a03      	ldr	r3, [r0, #32]
 801d7e6:	b570      	push	{r4, r5, r6, lr}
 801d7e8:	4605      	mov	r5, r0
 801d7ea:	460e      	mov	r6, r1
 801d7ec:	6884      	ldr	r4, [r0, #8]
 801d7ee:	b90b      	cbnz	r3, 801d7f4 <_puts_r+0x10>
 801d7f0:	f7ff f90c 	bl	801ca0c <__sinit>
 801d7f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d7f6:	07db      	lsls	r3, r3, #31
 801d7f8:	d405      	bmi.n	801d806 <_puts_r+0x22>
 801d7fa:	89a3      	ldrh	r3, [r4, #12]
 801d7fc:	0598      	lsls	r0, r3, #22
 801d7fe:	d402      	bmi.n	801d806 <_puts_r+0x22>
 801d800:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d802:	f000 f894 	bl	801d92e <__retarget_lock_acquire_recursive>
 801d806:	89a3      	ldrh	r3, [r4, #12]
 801d808:	0719      	lsls	r1, r3, #28
 801d80a:	d513      	bpl.n	801d834 <_puts_r+0x50>
 801d80c:	6923      	ldr	r3, [r4, #16]
 801d80e:	b18b      	cbz	r3, 801d834 <_puts_r+0x50>
 801d810:	3e01      	subs	r6, #1
 801d812:	68a3      	ldr	r3, [r4, #8]
 801d814:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801d818:	3b01      	subs	r3, #1
 801d81a:	60a3      	str	r3, [r4, #8]
 801d81c:	b9e9      	cbnz	r1, 801d85a <_puts_r+0x76>
 801d81e:	2b00      	cmp	r3, #0
 801d820:	da2e      	bge.n	801d880 <_puts_r+0x9c>
 801d822:	4622      	mov	r2, r4
 801d824:	210a      	movs	r1, #10
 801d826:	4628      	mov	r0, r5
 801d828:	f002 fbbd 	bl	801ffa6 <__swbuf_r>
 801d82c:	3001      	adds	r0, #1
 801d82e:	d007      	beq.n	801d840 <_puts_r+0x5c>
 801d830:	250a      	movs	r5, #10
 801d832:	e007      	b.n	801d844 <_puts_r+0x60>
 801d834:	4621      	mov	r1, r4
 801d836:	4628      	mov	r0, r5
 801d838:	f002 fbf2 	bl	8020020 <__swsetup_r>
 801d83c:	2800      	cmp	r0, #0
 801d83e:	d0e7      	beq.n	801d810 <_puts_r+0x2c>
 801d840:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801d844:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d846:	07da      	lsls	r2, r3, #31
 801d848:	d405      	bmi.n	801d856 <_puts_r+0x72>
 801d84a:	89a3      	ldrh	r3, [r4, #12]
 801d84c:	059b      	lsls	r3, r3, #22
 801d84e:	d402      	bmi.n	801d856 <_puts_r+0x72>
 801d850:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d852:	f000 f86d 	bl	801d930 <__retarget_lock_release_recursive>
 801d856:	4628      	mov	r0, r5
 801d858:	bd70      	pop	{r4, r5, r6, pc}
 801d85a:	2b00      	cmp	r3, #0
 801d85c:	da04      	bge.n	801d868 <_puts_r+0x84>
 801d85e:	69a2      	ldr	r2, [r4, #24]
 801d860:	429a      	cmp	r2, r3
 801d862:	dc06      	bgt.n	801d872 <_puts_r+0x8e>
 801d864:	290a      	cmp	r1, #10
 801d866:	d004      	beq.n	801d872 <_puts_r+0x8e>
 801d868:	6823      	ldr	r3, [r4, #0]
 801d86a:	1c5a      	adds	r2, r3, #1
 801d86c:	6022      	str	r2, [r4, #0]
 801d86e:	7019      	strb	r1, [r3, #0]
 801d870:	e7cf      	b.n	801d812 <_puts_r+0x2e>
 801d872:	4622      	mov	r2, r4
 801d874:	4628      	mov	r0, r5
 801d876:	f002 fb96 	bl	801ffa6 <__swbuf_r>
 801d87a:	3001      	adds	r0, #1
 801d87c:	d1c9      	bne.n	801d812 <_puts_r+0x2e>
 801d87e:	e7df      	b.n	801d840 <_puts_r+0x5c>
 801d880:	6823      	ldr	r3, [r4, #0]
 801d882:	250a      	movs	r5, #10
 801d884:	1c5a      	adds	r2, r3, #1
 801d886:	6022      	str	r2, [r4, #0]
 801d888:	701d      	strb	r5, [r3, #0]
 801d88a:	e7db      	b.n	801d844 <_puts_r+0x60>

0801d88c <puts>:
 801d88c:	4b02      	ldr	r3, [pc, #8]	; (801d898 <puts+0xc>)
 801d88e:	4601      	mov	r1, r0
 801d890:	6818      	ldr	r0, [r3, #0]
 801d892:	f7ff bfa7 	b.w	801d7e4 <_puts_r>
 801d896:	bf00      	nop
 801d898:	200007b0 	.word	0x200007b0

0801d89c <strncmp>:
 801d89c:	b510      	push	{r4, lr}
 801d89e:	b16a      	cbz	r2, 801d8bc <strncmp+0x20>
 801d8a0:	3901      	subs	r1, #1
 801d8a2:	1884      	adds	r4, r0, r2
 801d8a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d8a8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801d8ac:	429a      	cmp	r2, r3
 801d8ae:	d103      	bne.n	801d8b8 <strncmp+0x1c>
 801d8b0:	42a0      	cmp	r0, r4
 801d8b2:	d001      	beq.n	801d8b8 <strncmp+0x1c>
 801d8b4:	2a00      	cmp	r2, #0
 801d8b6:	d1f5      	bne.n	801d8a4 <strncmp+0x8>
 801d8b8:	1ad0      	subs	r0, r2, r3
 801d8ba:	bd10      	pop	{r4, pc}
 801d8bc:	4610      	mov	r0, r2
 801d8be:	e7fc      	b.n	801d8ba <strncmp+0x1e>

0801d8c0 <memset>:
 801d8c0:	4402      	add	r2, r0
 801d8c2:	4603      	mov	r3, r0
 801d8c4:	4293      	cmp	r3, r2
 801d8c6:	d100      	bne.n	801d8ca <memset+0xa>
 801d8c8:	4770      	bx	lr
 801d8ca:	f803 1b01 	strb.w	r1, [r3], #1
 801d8ce:	e7f9      	b.n	801d8c4 <memset+0x4>

0801d8d0 <_localeconv_r>:
 801d8d0:	4800      	ldr	r0, [pc, #0]	; (801d8d4 <_localeconv_r+0x4>)
 801d8d2:	4770      	bx	lr
 801d8d4:	200006e8 	.word	0x200006e8

0801d8d8 <__errno>:
 801d8d8:	4b01      	ldr	r3, [pc, #4]	; (801d8e0 <__errno+0x8>)
 801d8da:	6818      	ldr	r0, [r3, #0]
 801d8dc:	4770      	bx	lr
 801d8de:	bf00      	nop
 801d8e0:	200007b0 	.word	0x200007b0

0801d8e4 <__libc_init_array>:
 801d8e4:	b570      	push	{r4, r5, r6, lr}
 801d8e6:	4d0d      	ldr	r5, [pc, #52]	; (801d91c <__libc_init_array+0x38>)
 801d8e8:	2600      	movs	r6, #0
 801d8ea:	4c0d      	ldr	r4, [pc, #52]	; (801d920 <__libc_init_array+0x3c>)
 801d8ec:	1b64      	subs	r4, r4, r5
 801d8ee:	10a4      	asrs	r4, r4, #2
 801d8f0:	42a6      	cmp	r6, r4
 801d8f2:	d109      	bne.n	801d908 <__libc_init_array+0x24>
 801d8f4:	4d0b      	ldr	r5, [pc, #44]	; (801d924 <__libc_init_array+0x40>)
 801d8f6:	2600      	movs	r6, #0
 801d8f8:	4c0b      	ldr	r4, [pc, #44]	; (801d928 <__libc_init_array+0x44>)
 801d8fa:	f004 f81f 	bl	802193c <_init>
 801d8fe:	1b64      	subs	r4, r4, r5
 801d900:	10a4      	asrs	r4, r4, #2
 801d902:	42a6      	cmp	r6, r4
 801d904:	d105      	bne.n	801d912 <__libc_init_array+0x2e>
 801d906:	bd70      	pop	{r4, r5, r6, pc}
 801d908:	f855 3b04 	ldr.w	r3, [r5], #4
 801d90c:	3601      	adds	r6, #1
 801d90e:	4798      	blx	r3
 801d910:	e7ee      	b.n	801d8f0 <__libc_init_array+0xc>
 801d912:	f855 3b04 	ldr.w	r3, [r5], #4
 801d916:	3601      	adds	r6, #1
 801d918:	4798      	blx	r3
 801d91a:	e7f2      	b.n	801d902 <__libc_init_array+0x1e>
 801d91c:	080388c0 	.word	0x080388c0
 801d920:	080388c0 	.word	0x080388c0
 801d924:	080388c0 	.word	0x080388c0
 801d928:	080388c4 	.word	0x080388c4

0801d92c <__retarget_lock_init_recursive>:
 801d92c:	4770      	bx	lr

0801d92e <__retarget_lock_acquire_recursive>:
 801d92e:	4770      	bx	lr

0801d930 <__retarget_lock_release_recursive>:
 801d930:	4770      	bx	lr

0801d932 <memchr>:
 801d932:	b2c9      	uxtb	r1, r1
 801d934:	4402      	add	r2, r0
 801d936:	b510      	push	{r4, lr}
 801d938:	4290      	cmp	r0, r2
 801d93a:	4603      	mov	r3, r0
 801d93c:	d101      	bne.n	801d942 <memchr+0x10>
 801d93e:	2300      	movs	r3, #0
 801d940:	e003      	b.n	801d94a <memchr+0x18>
 801d942:	781c      	ldrb	r4, [r3, #0]
 801d944:	3001      	adds	r0, #1
 801d946:	428c      	cmp	r4, r1
 801d948:	d1f6      	bne.n	801d938 <memchr+0x6>
 801d94a:	4618      	mov	r0, r3
 801d94c:	bd10      	pop	{r4, pc}

0801d94e <memcpy>:
 801d94e:	440a      	add	r2, r1
 801d950:	1e43      	subs	r3, r0, #1
 801d952:	4291      	cmp	r1, r2
 801d954:	d100      	bne.n	801d958 <memcpy+0xa>
 801d956:	4770      	bx	lr
 801d958:	b510      	push	{r4, lr}
 801d95a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d95e:	4291      	cmp	r1, r2
 801d960:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d964:	d1f9      	bne.n	801d95a <memcpy+0xc>
 801d966:	bd10      	pop	{r4, pc}

0801d968 <nan>:
 801d968:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801d970 <nan+0x8>
 801d96c:	4770      	bx	lr
 801d96e:	bf00      	nop
 801d970:	00000000 	.word	0x00000000
 801d974:	7ff80000 	.word	0x7ff80000

0801d978 <nanf>:
 801d978:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801d980 <nanf+0x8>
 801d97c:	4770      	bx	lr
 801d97e:	bf00      	nop
 801d980:	7fc00000 	.word	0x7fc00000

0801d984 <quorem>:
 801d984:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d988:	6903      	ldr	r3, [r0, #16]
 801d98a:	4607      	mov	r7, r0
 801d98c:	690c      	ldr	r4, [r1, #16]
 801d98e:	42a3      	cmp	r3, r4
 801d990:	f2c0 8086 	blt.w	801daa0 <quorem+0x11c>
 801d994:	3c01      	subs	r4, #1
 801d996:	f100 0514 	add.w	r5, r0, #20
 801d99a:	f101 0814 	add.w	r8, r1, #20
 801d99e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d9a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d9a6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801d9aa:	9301      	str	r3, [sp, #4]
 801d9ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801d9b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801d9b4:	3301      	adds	r3, #1
 801d9b6:	429a      	cmp	r2, r3
 801d9b8:	fbb2 f6f3 	udiv	r6, r2, r3
 801d9bc:	d335      	bcc.n	801da2a <quorem+0xa6>
 801d9be:	f04f 0e00 	mov.w	lr, #0
 801d9c2:	4640      	mov	r0, r8
 801d9c4:	46ac      	mov	ip, r5
 801d9c6:	46f2      	mov	sl, lr
 801d9c8:	f850 2b04 	ldr.w	r2, [r0], #4
 801d9cc:	b293      	uxth	r3, r2
 801d9ce:	4581      	cmp	r9, r0
 801d9d0:	fb06 e303 	mla	r3, r6, r3, lr
 801d9d4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801d9d8:	ea4f 4213 	mov.w	r2, r3, lsr #16
 801d9dc:	b29b      	uxth	r3, r3
 801d9de:	fb06 220e 	mla	r2, r6, lr, r2
 801d9e2:	ebaa 0303 	sub.w	r3, sl, r3
 801d9e6:	f8dc a000 	ldr.w	sl, [ip]
 801d9ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801d9ee:	fa1f fa8a 	uxth.w	sl, sl
 801d9f2:	b292      	uxth	r2, r2
 801d9f4:	4453      	add	r3, sl
 801d9f6:	9300      	str	r3, [sp, #0]
 801d9f8:	f8dc 3000 	ldr.w	r3, [ip]
 801d9fc:	ebc2 4213 	rsb	r2, r2, r3, lsr #16
 801da00:	9b00      	ldr	r3, [sp, #0]
 801da02:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801da06:	f8bd 3000 	ldrh.w	r3, [sp]
 801da0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801da0e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801da12:	f84c 3b04 	str.w	r3, [ip], #4
 801da16:	d2d7      	bcs.n	801d9c8 <quorem+0x44>
 801da18:	f855 300b 	ldr.w	r3, [r5, fp]
 801da1c:	b92b      	cbnz	r3, 801da2a <quorem+0xa6>
 801da1e:	9b01      	ldr	r3, [sp, #4]
 801da20:	3b04      	subs	r3, #4
 801da22:	429d      	cmp	r5, r3
 801da24:	461a      	mov	r2, r3
 801da26:	d32f      	bcc.n	801da88 <quorem+0x104>
 801da28:	613c      	str	r4, [r7, #16]
 801da2a:	4638      	mov	r0, r7
 801da2c:	f002 f858 	bl	801fae0 <__mcmp>
 801da30:	2800      	cmp	r0, #0
 801da32:	db25      	blt.n	801da80 <quorem+0xfc>
 801da34:	3601      	adds	r6, #1
 801da36:	4629      	mov	r1, r5
 801da38:	2000      	movs	r0, #0
 801da3a:	f858 2b04 	ldr.w	r2, [r8], #4
 801da3e:	f8d1 c000 	ldr.w	ip, [r1]
 801da42:	b293      	uxth	r3, r2
 801da44:	45c1      	cmp	r9, r8
 801da46:	ea4f 4212 	mov.w	r2, r2, lsr #16
 801da4a:	eba0 0303 	sub.w	r3, r0, r3
 801da4e:	fa1f f08c 	uxth.w	r0, ip
 801da52:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801da56:	4403      	add	r3, r0
 801da58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801da5c:	b29b      	uxth	r3, r3
 801da5e:	ea4f 4022 	mov.w	r0, r2, asr #16
 801da62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801da66:	f841 3b04 	str.w	r3, [r1], #4
 801da6a:	d2e6      	bcs.n	801da3a <quorem+0xb6>
 801da6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801da70:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801da74:	b922      	cbnz	r2, 801da80 <quorem+0xfc>
 801da76:	3b04      	subs	r3, #4
 801da78:	429d      	cmp	r5, r3
 801da7a:	461a      	mov	r2, r3
 801da7c:	d30a      	bcc.n	801da94 <quorem+0x110>
 801da7e:	613c      	str	r4, [r7, #16]
 801da80:	4630      	mov	r0, r6
 801da82:	b003      	add	sp, #12
 801da84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da88:	6812      	ldr	r2, [r2, #0]
 801da8a:	3b04      	subs	r3, #4
 801da8c:	2a00      	cmp	r2, #0
 801da8e:	d1cb      	bne.n	801da28 <quorem+0xa4>
 801da90:	3c01      	subs	r4, #1
 801da92:	e7c6      	b.n	801da22 <quorem+0x9e>
 801da94:	6812      	ldr	r2, [r2, #0]
 801da96:	3b04      	subs	r3, #4
 801da98:	2a00      	cmp	r2, #0
 801da9a:	d1f0      	bne.n	801da7e <quorem+0xfa>
 801da9c:	3c01      	subs	r4, #1
 801da9e:	e7eb      	b.n	801da78 <quorem+0xf4>
 801daa0:	2000      	movs	r0, #0
 801daa2:	e7ee      	b.n	801da82 <quorem+0xfe>
 801daa4:	0000      	movs	r0, r0
	...

0801daa8 <_dtoa_r>:
 801daa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801daac:	69c5      	ldr	r5, [r0, #28]
 801daae:	4604      	mov	r4, r0
 801dab0:	ed2d 8b04 	vpush	{d8-d9}
 801dab4:	b093      	sub	sp, #76	; 0x4c
 801dab6:	ec57 6b10 	vmov	r6, r7, d0
 801daba:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801dabe:	9107      	str	r1, [sp, #28]
 801dac0:	920a      	str	r2, [sp, #40]	; 0x28
 801dac2:	930d      	str	r3, [sp, #52]	; 0x34
 801dac4:	ed8d 0b02 	vstr	d0, [sp, #8]
 801dac8:	b975      	cbnz	r5, 801dae8 <_dtoa_r+0x40>
 801daca:	2010      	movs	r0, #16
 801dacc:	f001 fbce 	bl	801f26c <malloc>
 801dad0:	4602      	mov	r2, r0
 801dad2:	61e0      	str	r0, [r4, #28]
 801dad4:	b920      	cbnz	r0, 801dae0 <_dtoa_r+0x38>
 801dad6:	4bae      	ldr	r3, [pc, #696]	; (801dd90 <_dtoa_r+0x2e8>)
 801dad8:	21ef      	movs	r1, #239	; 0xef
 801dada:	48ae      	ldr	r0, [pc, #696]	; (801dd94 <_dtoa_r+0x2ec>)
 801dadc:	f002 fc2c 	bl	8020338 <__assert_func>
 801dae0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801dae4:	6005      	str	r5, [r0, #0]
 801dae6:	60c5      	str	r5, [r0, #12]
 801dae8:	69e3      	ldr	r3, [r4, #28]
 801daea:	6819      	ldr	r1, [r3, #0]
 801daec:	b151      	cbz	r1, 801db04 <_dtoa_r+0x5c>
 801daee:	685a      	ldr	r2, [r3, #4]
 801daf0:	2301      	movs	r3, #1
 801daf2:	4620      	mov	r0, r4
 801daf4:	4093      	lsls	r3, r2
 801daf6:	604a      	str	r2, [r1, #4]
 801daf8:	608b      	str	r3, [r1, #8]
 801dafa:	f001 fd69 	bl	801f5d0 <_Bfree>
 801dafe:	69e3      	ldr	r3, [r4, #28]
 801db00:	2200      	movs	r2, #0
 801db02:	601a      	str	r2, [r3, #0]
 801db04:	1e3b      	subs	r3, r7, #0
 801db06:	bfb7      	itett	lt
 801db08:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801db0c:	2300      	movge	r3, #0
 801db0e:	2201      	movlt	r2, #1
 801db10:	9303      	strlt	r3, [sp, #12]
 801db12:	bfac      	ite	ge
 801db14:	f8c8 3000 	strge.w	r3, [r8]
 801db18:	f8c8 2000 	strlt.w	r2, [r8]
 801db1c:	4b9e      	ldr	r3, [pc, #632]	; (801dd98 <_dtoa_r+0x2f0>)
 801db1e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801db22:	ea33 0308 	bics.w	r3, r3, r8
 801db26:	d11b      	bne.n	801db60 <_dtoa_r+0xb8>
 801db28:	f242 730f 	movw	r3, #9999	; 0x270f
 801db2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801db2e:	6013      	str	r3, [r2, #0]
 801db30:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801db34:	4333      	orrs	r3, r6
 801db36:	f000 8592 	beq.w	801e65e <_dtoa_r+0xbb6>
 801db3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801db3c:	b963      	cbnz	r3, 801db58 <_dtoa_r+0xb0>
 801db3e:	4b97      	ldr	r3, [pc, #604]	; (801dd9c <_dtoa_r+0x2f4>)
 801db40:	e027      	b.n	801db92 <_dtoa_r+0xea>
 801db42:	4b97      	ldr	r3, [pc, #604]	; (801dda0 <_dtoa_r+0x2f8>)
 801db44:	9300      	str	r3, [sp, #0]
 801db46:	3308      	adds	r3, #8
 801db48:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801db4a:	6013      	str	r3, [r2, #0]
 801db4c:	9800      	ldr	r0, [sp, #0]
 801db4e:	b013      	add	sp, #76	; 0x4c
 801db50:	ecbd 8b04 	vpop	{d8-d9}
 801db54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db58:	4b90      	ldr	r3, [pc, #576]	; (801dd9c <_dtoa_r+0x2f4>)
 801db5a:	9300      	str	r3, [sp, #0]
 801db5c:	3303      	adds	r3, #3
 801db5e:	e7f3      	b.n	801db48 <_dtoa_r+0xa0>
 801db60:	ed9d 7b02 	vldr	d7, [sp, #8]
 801db64:	2200      	movs	r2, #0
 801db66:	2300      	movs	r3, #0
 801db68:	ec51 0b17 	vmov	r0, r1, d7
 801db6c:	eeb0 8a47 	vmov.f32	s16, s14
 801db70:	eef0 8a67 	vmov.f32	s17, s15
 801db74:	f7e2 ffac 	bl	8000ad0 <__aeabi_dcmpeq>
 801db78:	4681      	mov	r9, r0
 801db7a:	b160      	cbz	r0, 801db96 <_dtoa_r+0xee>
 801db7c:	2301      	movs	r3, #1
 801db7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801db80:	6013      	str	r3, [r2, #0]
 801db82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801db84:	2b00      	cmp	r3, #0
 801db86:	f000 8567 	beq.w	801e658 <_dtoa_r+0xbb0>
 801db8a:	4b86      	ldr	r3, [pc, #536]	; (801dda4 <_dtoa_r+0x2fc>)
 801db8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801db8e:	6013      	str	r3, [r2, #0]
 801db90:	3b01      	subs	r3, #1
 801db92:	9300      	str	r3, [sp, #0]
 801db94:	e7da      	b.n	801db4c <_dtoa_r+0xa4>
 801db96:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801db9a:	eeb0 0a48 	vmov.f32	s0, s16
 801db9e:	eef0 0a68 	vmov.f32	s1, s17
 801dba2:	aa10      	add	r2, sp, #64	; 0x40
 801dba4:	a911      	add	r1, sp, #68	; 0x44
 801dba6:	4620      	mov	r0, r4
 801dba8:	f002 f8ba 	bl	801fd20 <__d2b>
 801dbac:	4682      	mov	sl, r0
 801dbae:	2d00      	cmp	r5, #0
 801dbb0:	d07d      	beq.n	801dcae <_dtoa_r+0x206>
 801dbb2:	ee18 3a90 	vmov	r3, s17
 801dbb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801dbba:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801dbbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801dbc2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801dbc6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801dbca:	ec51 0b18 	vmov	r0, r1, d8
 801dbce:	4619      	mov	r1, r3
 801dbd0:	2200      	movs	r2, #0
 801dbd2:	4b75      	ldr	r3, [pc, #468]	; (801dda8 <_dtoa_r+0x300>)
 801dbd4:	f7e2 fb5c 	bl	8000290 <__aeabi_dsub>
 801dbd8:	a367      	add	r3, pc, #412	; (adr r3, 801dd78 <_dtoa_r+0x2d0>)
 801dbda:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dbde:	f7e2 fd0f 	bl	8000600 <__aeabi_dmul>
 801dbe2:	a367      	add	r3, pc, #412	; (adr r3, 801dd80 <_dtoa_r+0x2d8>)
 801dbe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dbe8:	f7e2 fb54 	bl	8000294 <__adddf3>
 801dbec:	4606      	mov	r6, r0
 801dbee:	460f      	mov	r7, r1
 801dbf0:	4628      	mov	r0, r5
 801dbf2:	f7e2 fc9b 	bl	800052c <__aeabi_i2d>
 801dbf6:	a364      	add	r3, pc, #400	; (adr r3, 801dd88 <_dtoa_r+0x2e0>)
 801dbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dbfc:	f7e2 fd00 	bl	8000600 <__aeabi_dmul>
 801dc00:	4602      	mov	r2, r0
 801dc02:	460b      	mov	r3, r1
 801dc04:	4630      	mov	r0, r6
 801dc06:	4639      	mov	r1, r7
 801dc08:	f7e2 fb44 	bl	8000294 <__adddf3>
 801dc0c:	4606      	mov	r6, r0
 801dc0e:	460f      	mov	r7, r1
 801dc10:	f7e2 ffa6 	bl	8000b60 <__aeabi_d2iz>
 801dc14:	2200      	movs	r2, #0
 801dc16:	4683      	mov	fp, r0
 801dc18:	2300      	movs	r3, #0
 801dc1a:	4630      	mov	r0, r6
 801dc1c:	4639      	mov	r1, r7
 801dc1e:	f7e2 ff61 	bl	8000ae4 <__aeabi_dcmplt>
 801dc22:	b148      	cbz	r0, 801dc38 <_dtoa_r+0x190>
 801dc24:	4658      	mov	r0, fp
 801dc26:	f7e2 fc81 	bl	800052c <__aeabi_i2d>
 801dc2a:	4632      	mov	r2, r6
 801dc2c:	463b      	mov	r3, r7
 801dc2e:	f7e2 ff4f 	bl	8000ad0 <__aeabi_dcmpeq>
 801dc32:	b908      	cbnz	r0, 801dc38 <_dtoa_r+0x190>
 801dc34:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801dc38:	f1bb 0f16 	cmp.w	fp, #22
 801dc3c:	d857      	bhi.n	801dcee <_dtoa_r+0x246>
 801dc3e:	4b5b      	ldr	r3, [pc, #364]	; (801ddac <_dtoa_r+0x304>)
 801dc40:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801dc44:	ec51 0b18 	vmov	r0, r1, d8
 801dc48:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc4c:	f7e2 ff4a 	bl	8000ae4 <__aeabi_dcmplt>
 801dc50:	2800      	cmp	r0, #0
 801dc52:	d04e      	beq.n	801dcf2 <_dtoa_r+0x24a>
 801dc54:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801dc58:	2300      	movs	r3, #0
 801dc5a:	930c      	str	r3, [sp, #48]	; 0x30
 801dc5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801dc5e:	1b5b      	subs	r3, r3, r5
 801dc60:	1e5a      	subs	r2, r3, #1
 801dc62:	bf4c      	ite	mi
 801dc64:	f1c3 0301 	rsbmi	r3, r3, #1
 801dc68:	2300      	movpl	r3, #0
 801dc6a:	9206      	str	r2, [sp, #24]
 801dc6c:	bf45      	ittet	mi
 801dc6e:	9305      	strmi	r3, [sp, #20]
 801dc70:	2300      	movmi	r3, #0
 801dc72:	9305      	strpl	r3, [sp, #20]
 801dc74:	9306      	strmi	r3, [sp, #24]
 801dc76:	f1bb 0f00 	cmp.w	fp, #0
 801dc7a:	db3c      	blt.n	801dcf6 <_dtoa_r+0x24e>
 801dc7c:	9b06      	ldr	r3, [sp, #24]
 801dc7e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801dc82:	445b      	add	r3, fp
 801dc84:	9306      	str	r3, [sp, #24]
 801dc86:	2300      	movs	r3, #0
 801dc88:	9308      	str	r3, [sp, #32]
 801dc8a:	9b07      	ldr	r3, [sp, #28]
 801dc8c:	2b09      	cmp	r3, #9
 801dc8e:	d868      	bhi.n	801dd62 <_dtoa_r+0x2ba>
 801dc90:	2b05      	cmp	r3, #5
 801dc92:	bfc5      	ittet	gt
 801dc94:	3b04      	subgt	r3, #4
 801dc96:	2500      	movgt	r5, #0
 801dc98:	2501      	movle	r5, #1
 801dc9a:	9307      	strgt	r3, [sp, #28]
 801dc9c:	9b07      	ldr	r3, [sp, #28]
 801dc9e:	3b02      	subs	r3, #2
 801dca0:	2b03      	cmp	r3, #3
 801dca2:	f200 8087 	bhi.w	801ddb4 <_dtoa_r+0x30c>
 801dca6:	e8df f003 	tbb	[pc, r3]
 801dcaa:	3d30      	.short	0x3d30
 801dcac:	5a3b      	.short	0x5a3b
 801dcae:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801dcb2:	441d      	add	r5, r3
 801dcb4:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801dcb8:	2b20      	cmp	r3, #32
 801dcba:	bfc9      	itett	gt
 801dcbc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801dcc0:	f1c3 0320 	rsble	r3, r3, #32
 801dcc4:	fa08 f803 	lslgt.w	r8, r8, r3
 801dcc8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801dccc:	bfd8      	it	le
 801dcce:	fa06 f003 	lslle.w	r0, r6, r3
 801dcd2:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 801dcd6:	bfc4      	itt	gt
 801dcd8:	fa26 f303 	lsrgt.w	r3, r6, r3
 801dcdc:	ea48 0003 	orrgt.w	r0, r8, r3
 801dce0:	f7e2 fc14 	bl	800050c <__aeabi_ui2d>
 801dce4:	2201      	movs	r2, #1
 801dce6:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 801dcea:	920e      	str	r2, [sp, #56]	; 0x38
 801dcec:	e76f      	b.n	801dbce <_dtoa_r+0x126>
 801dcee:	2301      	movs	r3, #1
 801dcf0:	e7b3      	b.n	801dc5a <_dtoa_r+0x1b2>
 801dcf2:	900c      	str	r0, [sp, #48]	; 0x30
 801dcf4:	e7b2      	b.n	801dc5c <_dtoa_r+0x1b4>
 801dcf6:	9b05      	ldr	r3, [sp, #20]
 801dcf8:	eba3 030b 	sub.w	r3, r3, fp
 801dcfc:	9305      	str	r3, [sp, #20]
 801dcfe:	f1cb 0300 	rsb	r3, fp, #0
 801dd02:	9308      	str	r3, [sp, #32]
 801dd04:	2300      	movs	r3, #0
 801dd06:	930b      	str	r3, [sp, #44]	; 0x2c
 801dd08:	e7bf      	b.n	801dc8a <_dtoa_r+0x1e2>
 801dd0a:	2300      	movs	r3, #0
 801dd0c:	9309      	str	r3, [sp, #36]	; 0x24
 801dd0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dd10:	2b00      	cmp	r3, #0
 801dd12:	dc52      	bgt.n	801ddba <_dtoa_r+0x312>
 801dd14:	2301      	movs	r3, #1
 801dd16:	461a      	mov	r2, r3
 801dd18:	9301      	str	r3, [sp, #4]
 801dd1a:	9304      	str	r3, [sp, #16]
 801dd1c:	920a      	str	r2, [sp, #40]	; 0x28
 801dd1e:	e00b      	b.n	801dd38 <_dtoa_r+0x290>
 801dd20:	2301      	movs	r3, #1
 801dd22:	e7f3      	b.n	801dd0c <_dtoa_r+0x264>
 801dd24:	2300      	movs	r3, #0
 801dd26:	9309      	str	r3, [sp, #36]	; 0x24
 801dd28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dd2a:	445b      	add	r3, fp
 801dd2c:	9301      	str	r3, [sp, #4]
 801dd2e:	3301      	adds	r3, #1
 801dd30:	2b01      	cmp	r3, #1
 801dd32:	9304      	str	r3, [sp, #16]
 801dd34:	bfb8      	it	lt
 801dd36:	2301      	movlt	r3, #1
 801dd38:	69e0      	ldr	r0, [r4, #28]
 801dd3a:	2100      	movs	r1, #0
 801dd3c:	2204      	movs	r2, #4
 801dd3e:	f102 0614 	add.w	r6, r2, #20
 801dd42:	429e      	cmp	r6, r3
 801dd44:	d93d      	bls.n	801ddc2 <_dtoa_r+0x31a>
 801dd46:	6041      	str	r1, [r0, #4]
 801dd48:	4620      	mov	r0, r4
 801dd4a:	f001 fc01 	bl	801f550 <_Balloc>
 801dd4e:	9000      	str	r0, [sp, #0]
 801dd50:	2800      	cmp	r0, #0
 801dd52:	d139      	bne.n	801ddc8 <_dtoa_r+0x320>
 801dd54:	4b16      	ldr	r3, [pc, #88]	; (801ddb0 <_dtoa_r+0x308>)
 801dd56:	4602      	mov	r2, r0
 801dd58:	f240 11af 	movw	r1, #431	; 0x1af
 801dd5c:	e6bd      	b.n	801dada <_dtoa_r+0x32>
 801dd5e:	2301      	movs	r3, #1
 801dd60:	e7e1      	b.n	801dd26 <_dtoa_r+0x27e>
 801dd62:	2501      	movs	r5, #1
 801dd64:	2300      	movs	r3, #0
 801dd66:	9509      	str	r5, [sp, #36]	; 0x24
 801dd68:	9307      	str	r3, [sp, #28]
 801dd6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801dd6e:	2200      	movs	r2, #0
 801dd70:	9301      	str	r3, [sp, #4]
 801dd72:	9304      	str	r3, [sp, #16]
 801dd74:	2312      	movs	r3, #18
 801dd76:	e7d1      	b.n	801dd1c <_dtoa_r+0x274>
 801dd78:	636f4361 	.word	0x636f4361
 801dd7c:	3fd287a7 	.word	0x3fd287a7
 801dd80:	8b60c8b3 	.word	0x8b60c8b3
 801dd84:	3fc68a28 	.word	0x3fc68a28
 801dd88:	509f79fb 	.word	0x509f79fb
 801dd8c:	3fd34413 	.word	0x3fd34413
 801dd90:	080385ee 	.word	0x080385ee
 801dd94:	08038605 	.word	0x08038605
 801dd98:	7ff00000 	.word	0x7ff00000
 801dd9c:	080385ea 	.word	0x080385ea
 801dda0:	080385e1 	.word	0x080385e1
 801dda4:	0803845d 	.word	0x0803845d
 801dda8:	3ff80000 	.word	0x3ff80000
 801ddac:	08038760 	.word	0x08038760
 801ddb0:	0803865d 	.word	0x0803865d
 801ddb4:	2301      	movs	r3, #1
 801ddb6:	9309      	str	r3, [sp, #36]	; 0x24
 801ddb8:	e7d7      	b.n	801dd6a <_dtoa_r+0x2c2>
 801ddba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ddbc:	9301      	str	r3, [sp, #4]
 801ddbe:	9304      	str	r3, [sp, #16]
 801ddc0:	e7ba      	b.n	801dd38 <_dtoa_r+0x290>
 801ddc2:	3101      	adds	r1, #1
 801ddc4:	0052      	lsls	r2, r2, #1
 801ddc6:	e7ba      	b.n	801dd3e <_dtoa_r+0x296>
 801ddc8:	69e3      	ldr	r3, [r4, #28]
 801ddca:	9a00      	ldr	r2, [sp, #0]
 801ddcc:	601a      	str	r2, [r3, #0]
 801ddce:	9b04      	ldr	r3, [sp, #16]
 801ddd0:	2b0e      	cmp	r3, #14
 801ddd2:	f200 80a8 	bhi.w	801df26 <_dtoa_r+0x47e>
 801ddd6:	2d00      	cmp	r5, #0
 801ddd8:	f000 80a5 	beq.w	801df26 <_dtoa_r+0x47e>
 801dddc:	f1bb 0f00 	cmp.w	fp, #0
 801dde0:	dd38      	ble.n	801de54 <_dtoa_r+0x3ac>
 801dde2:	f00b 020f 	and.w	r2, fp, #15
 801dde6:	4bbf      	ldr	r3, [pc, #764]	; (801e0e4 <_dtoa_r+0x63c>)
 801dde8:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801ddec:	ea4f 182b 	mov.w	r8, fp, asr #4
 801ddf0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ddf4:	e9d3 6700 	ldrd	r6, r7, [r3]
 801ddf8:	d019      	beq.n	801de2e <_dtoa_r+0x386>
 801ddfa:	4bbb      	ldr	r3, [pc, #748]	; (801e0e8 <_dtoa_r+0x640>)
 801ddfc:	f008 080f 	and.w	r8, r8, #15
 801de00:	2503      	movs	r5, #3
 801de02:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801de06:	ec51 0b18 	vmov	r0, r1, d8
 801de0a:	f7e2 fd23 	bl	8000854 <__aeabi_ddiv>
 801de0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801de12:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 801e0e8 <_dtoa_r+0x640>
 801de16:	f1b8 0f00 	cmp.w	r8, #0
 801de1a:	d10a      	bne.n	801de32 <_dtoa_r+0x38a>
 801de1c:	4632      	mov	r2, r6
 801de1e:	463b      	mov	r3, r7
 801de20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801de24:	f7e2 fd16 	bl	8000854 <__aeabi_ddiv>
 801de28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801de2c:	e02b      	b.n	801de86 <_dtoa_r+0x3de>
 801de2e:	2502      	movs	r5, #2
 801de30:	e7ef      	b.n	801de12 <_dtoa_r+0x36a>
 801de32:	f018 0f01 	tst.w	r8, #1
 801de36:	d008      	beq.n	801de4a <_dtoa_r+0x3a2>
 801de38:	4630      	mov	r0, r6
 801de3a:	4639      	mov	r1, r7
 801de3c:	3501      	adds	r5, #1
 801de3e:	e9d9 2300 	ldrd	r2, r3, [r9]
 801de42:	f7e2 fbdd 	bl	8000600 <__aeabi_dmul>
 801de46:	4606      	mov	r6, r0
 801de48:	460f      	mov	r7, r1
 801de4a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801de4e:	f109 0908 	add.w	r9, r9, #8
 801de52:	e7e0      	b.n	801de16 <_dtoa_r+0x36e>
 801de54:	f000 809f 	beq.w	801df96 <_dtoa_r+0x4ee>
 801de58:	f1cb 0600 	rsb	r6, fp, #0
 801de5c:	4ba1      	ldr	r3, [pc, #644]	; (801e0e4 <_dtoa_r+0x63c>)
 801de5e:	4fa2      	ldr	r7, [pc, #648]	; (801e0e8 <_dtoa_r+0x640>)
 801de60:	2502      	movs	r5, #2
 801de62:	f006 020f 	and.w	r2, r6, #15
 801de66:	1136      	asrs	r6, r6, #4
 801de68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801de6c:	ec51 0b18 	vmov	r0, r1, d8
 801de70:	e9d3 2300 	ldrd	r2, r3, [r3]
 801de74:	f7e2 fbc4 	bl	8000600 <__aeabi_dmul>
 801de78:	2300      	movs	r3, #0
 801de7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801de7e:	2e00      	cmp	r6, #0
 801de80:	d17e      	bne.n	801df80 <_dtoa_r+0x4d8>
 801de82:	2b00      	cmp	r3, #0
 801de84:	d1d0      	bne.n	801de28 <_dtoa_r+0x380>
 801de86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801de88:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801de8c:	2b00      	cmp	r3, #0
 801de8e:	f000 8084 	beq.w	801df9a <_dtoa_r+0x4f2>
 801de92:	2200      	movs	r2, #0
 801de94:	4b95      	ldr	r3, [pc, #596]	; (801e0ec <_dtoa_r+0x644>)
 801de96:	4640      	mov	r0, r8
 801de98:	4649      	mov	r1, r9
 801de9a:	f7e2 fe23 	bl	8000ae4 <__aeabi_dcmplt>
 801de9e:	2800      	cmp	r0, #0
 801dea0:	d07b      	beq.n	801df9a <_dtoa_r+0x4f2>
 801dea2:	9b04      	ldr	r3, [sp, #16]
 801dea4:	2b00      	cmp	r3, #0
 801dea6:	d078      	beq.n	801df9a <_dtoa_r+0x4f2>
 801dea8:	9b01      	ldr	r3, [sp, #4]
 801deaa:	2b00      	cmp	r3, #0
 801deac:	dd39      	ble.n	801df22 <_dtoa_r+0x47a>
 801deae:	2200      	movs	r2, #0
 801deb0:	4b8f      	ldr	r3, [pc, #572]	; (801e0f0 <_dtoa_r+0x648>)
 801deb2:	4640      	mov	r0, r8
 801deb4:	4649      	mov	r1, r9
 801deb6:	f7e2 fba3 	bl	8000600 <__aeabi_dmul>
 801deba:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 801debe:	3501      	adds	r5, #1
 801dec0:	9e01      	ldr	r6, [sp, #4]
 801dec2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801dec6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801deca:	4628      	mov	r0, r5
 801decc:	f7e2 fb2e 	bl	800052c <__aeabi_i2d>
 801ded0:	4642      	mov	r2, r8
 801ded2:	464b      	mov	r3, r9
 801ded4:	f7e2 fb94 	bl	8000600 <__aeabi_dmul>
 801ded8:	4b86      	ldr	r3, [pc, #536]	; (801e0f4 <_dtoa_r+0x64c>)
 801deda:	2200      	movs	r2, #0
 801dedc:	f7e2 f9da 	bl	8000294 <__adddf3>
 801dee0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801dee4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801dee8:	9303      	str	r3, [sp, #12]
 801deea:	2e00      	cmp	r6, #0
 801deec:	d158      	bne.n	801dfa0 <_dtoa_r+0x4f8>
 801deee:	2200      	movs	r2, #0
 801def0:	4b81      	ldr	r3, [pc, #516]	; (801e0f8 <_dtoa_r+0x650>)
 801def2:	4640      	mov	r0, r8
 801def4:	4649      	mov	r1, r9
 801def6:	f7e2 f9cb 	bl	8000290 <__aeabi_dsub>
 801defa:	4680      	mov	r8, r0
 801defc:	4689      	mov	r9, r1
 801defe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801df02:	f7e2 fe0d 	bl	8000b20 <__aeabi_dcmpgt>
 801df06:	2800      	cmp	r0, #0
 801df08:	f040 8296 	bne.w	801e438 <_dtoa_r+0x990>
 801df0c:	4640      	mov	r0, r8
 801df0e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801df12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801df16:	4649      	mov	r1, r9
 801df18:	f7e2 fde4 	bl	8000ae4 <__aeabi_dcmplt>
 801df1c:	2800      	cmp	r0, #0
 801df1e:	f040 8289 	bne.w	801e434 <_dtoa_r+0x98c>
 801df22:	ed8d 8b02 	vstr	d8, [sp, #8]
 801df26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801df28:	2b00      	cmp	r3, #0
 801df2a:	f2c0 814e 	blt.w	801e1ca <_dtoa_r+0x722>
 801df2e:	f1bb 0f0e 	cmp.w	fp, #14
 801df32:	f300 814a 	bgt.w	801e1ca <_dtoa_r+0x722>
 801df36:	4b6b      	ldr	r3, [pc, #428]	; (801e0e4 <_dtoa_r+0x63c>)
 801df38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801df3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 801df40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801df42:	2b00      	cmp	r3, #0
 801df44:	f280 80dc 	bge.w	801e100 <_dtoa_r+0x658>
 801df48:	9b04      	ldr	r3, [sp, #16]
 801df4a:	2b00      	cmp	r3, #0
 801df4c:	f300 80d8 	bgt.w	801e100 <_dtoa_r+0x658>
 801df50:	f040 826f 	bne.w	801e432 <_dtoa_r+0x98a>
 801df54:	2200      	movs	r2, #0
 801df56:	4b68      	ldr	r3, [pc, #416]	; (801e0f8 <_dtoa_r+0x650>)
 801df58:	4640      	mov	r0, r8
 801df5a:	4649      	mov	r1, r9
 801df5c:	f7e2 fb50 	bl	8000600 <__aeabi_dmul>
 801df60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801df64:	f7e2 fdd2 	bl	8000b0c <__aeabi_dcmpge>
 801df68:	9e04      	ldr	r6, [sp, #16]
 801df6a:	4637      	mov	r7, r6
 801df6c:	2800      	cmp	r0, #0
 801df6e:	f040 8245 	bne.w	801e3fc <_dtoa_r+0x954>
 801df72:	9d00      	ldr	r5, [sp, #0]
 801df74:	2331      	movs	r3, #49	; 0x31
 801df76:	f10b 0b01 	add.w	fp, fp, #1
 801df7a:	f805 3b01 	strb.w	r3, [r5], #1
 801df7e:	e241      	b.n	801e404 <_dtoa_r+0x95c>
 801df80:	07f2      	lsls	r2, r6, #31
 801df82:	d505      	bpl.n	801df90 <_dtoa_r+0x4e8>
 801df84:	3501      	adds	r5, #1
 801df86:	e9d7 2300 	ldrd	r2, r3, [r7]
 801df8a:	f7e2 fb39 	bl	8000600 <__aeabi_dmul>
 801df8e:	2301      	movs	r3, #1
 801df90:	1076      	asrs	r6, r6, #1
 801df92:	3708      	adds	r7, #8
 801df94:	e773      	b.n	801de7e <_dtoa_r+0x3d6>
 801df96:	2502      	movs	r5, #2
 801df98:	e775      	b.n	801de86 <_dtoa_r+0x3de>
 801df9a:	465f      	mov	r7, fp
 801df9c:	9e04      	ldr	r6, [sp, #16]
 801df9e:	e792      	b.n	801dec6 <_dtoa_r+0x41e>
 801dfa0:	9900      	ldr	r1, [sp, #0]
 801dfa2:	4b50      	ldr	r3, [pc, #320]	; (801e0e4 <_dtoa_r+0x63c>)
 801dfa4:	4431      	add	r1, r6
 801dfa6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801dfaa:	ed9d 7b02 	vldr	d7, [sp, #8]
 801dfae:	9102      	str	r1, [sp, #8]
 801dfb0:	9909      	ldr	r1, [sp, #36]	; 0x24
 801dfb2:	eeb0 9a47 	vmov.f32	s18, s14
 801dfb6:	eef0 9a67 	vmov.f32	s19, s15
 801dfba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801dfbe:	2900      	cmp	r1, #0
 801dfc0:	d044      	beq.n	801e04c <_dtoa_r+0x5a4>
 801dfc2:	2000      	movs	r0, #0
 801dfc4:	494d      	ldr	r1, [pc, #308]	; (801e0fc <_dtoa_r+0x654>)
 801dfc6:	f7e2 fc45 	bl	8000854 <__aeabi_ddiv>
 801dfca:	ec53 2b19 	vmov	r2, r3, d9
 801dfce:	f7e2 f95f 	bl	8000290 <__aeabi_dsub>
 801dfd2:	9d00      	ldr	r5, [sp, #0]
 801dfd4:	ec41 0b19 	vmov	d9, r0, r1
 801dfd8:	4649      	mov	r1, r9
 801dfda:	4640      	mov	r0, r8
 801dfdc:	f7e2 fdc0 	bl	8000b60 <__aeabi_d2iz>
 801dfe0:	4606      	mov	r6, r0
 801dfe2:	f7e2 faa3 	bl	800052c <__aeabi_i2d>
 801dfe6:	4602      	mov	r2, r0
 801dfe8:	3630      	adds	r6, #48	; 0x30
 801dfea:	460b      	mov	r3, r1
 801dfec:	4640      	mov	r0, r8
 801dfee:	4649      	mov	r1, r9
 801dff0:	f7e2 f94e 	bl	8000290 <__aeabi_dsub>
 801dff4:	f805 6b01 	strb.w	r6, [r5], #1
 801dff8:	4680      	mov	r8, r0
 801dffa:	4689      	mov	r9, r1
 801dffc:	ec53 2b19 	vmov	r2, r3, d9
 801e000:	f7e2 fd70 	bl	8000ae4 <__aeabi_dcmplt>
 801e004:	2800      	cmp	r0, #0
 801e006:	d164      	bne.n	801e0d2 <_dtoa_r+0x62a>
 801e008:	4642      	mov	r2, r8
 801e00a:	464b      	mov	r3, r9
 801e00c:	2000      	movs	r0, #0
 801e00e:	4937      	ldr	r1, [pc, #220]	; (801e0ec <_dtoa_r+0x644>)
 801e010:	f7e2 f93e 	bl	8000290 <__aeabi_dsub>
 801e014:	ec53 2b19 	vmov	r2, r3, d9
 801e018:	f7e2 fd64 	bl	8000ae4 <__aeabi_dcmplt>
 801e01c:	2800      	cmp	r0, #0
 801e01e:	f040 80b6 	bne.w	801e18e <_dtoa_r+0x6e6>
 801e022:	9b02      	ldr	r3, [sp, #8]
 801e024:	429d      	cmp	r5, r3
 801e026:	f43f af7c 	beq.w	801df22 <_dtoa_r+0x47a>
 801e02a:	2200      	movs	r2, #0
 801e02c:	4b30      	ldr	r3, [pc, #192]	; (801e0f0 <_dtoa_r+0x648>)
 801e02e:	ec51 0b19 	vmov	r0, r1, d9
 801e032:	f7e2 fae5 	bl	8000600 <__aeabi_dmul>
 801e036:	2200      	movs	r2, #0
 801e038:	4b2d      	ldr	r3, [pc, #180]	; (801e0f0 <_dtoa_r+0x648>)
 801e03a:	ec41 0b19 	vmov	d9, r0, r1
 801e03e:	4640      	mov	r0, r8
 801e040:	4649      	mov	r1, r9
 801e042:	f7e2 fadd 	bl	8000600 <__aeabi_dmul>
 801e046:	4680      	mov	r8, r0
 801e048:	4689      	mov	r9, r1
 801e04a:	e7c5      	b.n	801dfd8 <_dtoa_r+0x530>
 801e04c:	ec51 0b17 	vmov	r0, r1, d7
 801e050:	f7e2 fad6 	bl	8000600 <__aeabi_dmul>
 801e054:	9b02      	ldr	r3, [sp, #8]
 801e056:	9d00      	ldr	r5, [sp, #0]
 801e058:	930f      	str	r3, [sp, #60]	; 0x3c
 801e05a:	ec41 0b19 	vmov	d9, r0, r1
 801e05e:	4649      	mov	r1, r9
 801e060:	4640      	mov	r0, r8
 801e062:	f7e2 fd7d 	bl	8000b60 <__aeabi_d2iz>
 801e066:	4606      	mov	r6, r0
 801e068:	f7e2 fa60 	bl	800052c <__aeabi_i2d>
 801e06c:	4602      	mov	r2, r0
 801e06e:	460b      	mov	r3, r1
 801e070:	4640      	mov	r0, r8
 801e072:	4649      	mov	r1, r9
 801e074:	3630      	adds	r6, #48	; 0x30
 801e076:	f7e2 f90b 	bl	8000290 <__aeabi_dsub>
 801e07a:	9b02      	ldr	r3, [sp, #8]
 801e07c:	f805 6b01 	strb.w	r6, [r5], #1
 801e080:	4680      	mov	r8, r0
 801e082:	429d      	cmp	r5, r3
 801e084:	4689      	mov	r9, r1
 801e086:	f04f 0200 	mov.w	r2, #0
 801e08a:	d124      	bne.n	801e0d6 <_dtoa_r+0x62e>
 801e08c:	4b1b      	ldr	r3, [pc, #108]	; (801e0fc <_dtoa_r+0x654>)
 801e08e:	ec51 0b19 	vmov	r0, r1, d9
 801e092:	f7e2 f8ff 	bl	8000294 <__adddf3>
 801e096:	4602      	mov	r2, r0
 801e098:	460b      	mov	r3, r1
 801e09a:	4640      	mov	r0, r8
 801e09c:	4649      	mov	r1, r9
 801e09e:	f7e2 fd3f 	bl	8000b20 <__aeabi_dcmpgt>
 801e0a2:	2800      	cmp	r0, #0
 801e0a4:	d173      	bne.n	801e18e <_dtoa_r+0x6e6>
 801e0a6:	2000      	movs	r0, #0
 801e0a8:	4914      	ldr	r1, [pc, #80]	; (801e0fc <_dtoa_r+0x654>)
 801e0aa:	ec53 2b19 	vmov	r2, r3, d9
 801e0ae:	f7e2 f8ef 	bl	8000290 <__aeabi_dsub>
 801e0b2:	4602      	mov	r2, r0
 801e0b4:	460b      	mov	r3, r1
 801e0b6:	4640      	mov	r0, r8
 801e0b8:	4649      	mov	r1, r9
 801e0ba:	f7e2 fd13 	bl	8000ae4 <__aeabi_dcmplt>
 801e0be:	2800      	cmp	r0, #0
 801e0c0:	f43f af2f 	beq.w	801df22 <_dtoa_r+0x47a>
 801e0c4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801e0c6:	1e6b      	subs	r3, r5, #1
 801e0c8:	930f      	str	r3, [sp, #60]	; 0x3c
 801e0ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801e0ce:	2b30      	cmp	r3, #48	; 0x30
 801e0d0:	d0f8      	beq.n	801e0c4 <_dtoa_r+0x61c>
 801e0d2:	46bb      	mov	fp, r7
 801e0d4:	e04a      	b.n	801e16c <_dtoa_r+0x6c4>
 801e0d6:	4b06      	ldr	r3, [pc, #24]	; (801e0f0 <_dtoa_r+0x648>)
 801e0d8:	f7e2 fa92 	bl	8000600 <__aeabi_dmul>
 801e0dc:	4680      	mov	r8, r0
 801e0de:	4689      	mov	r9, r1
 801e0e0:	e7bd      	b.n	801e05e <_dtoa_r+0x5b6>
 801e0e2:	bf00      	nop
 801e0e4:	08038760 	.word	0x08038760
 801e0e8:	08038738 	.word	0x08038738
 801e0ec:	3ff00000 	.word	0x3ff00000
 801e0f0:	40240000 	.word	0x40240000
 801e0f4:	401c0000 	.word	0x401c0000
 801e0f8:	40140000 	.word	0x40140000
 801e0fc:	3fe00000 	.word	0x3fe00000
 801e100:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801e104:	9d00      	ldr	r5, [sp, #0]
 801e106:	4642      	mov	r2, r8
 801e108:	464b      	mov	r3, r9
 801e10a:	4630      	mov	r0, r6
 801e10c:	4639      	mov	r1, r7
 801e10e:	f7e2 fba1 	bl	8000854 <__aeabi_ddiv>
 801e112:	f7e2 fd25 	bl	8000b60 <__aeabi_d2iz>
 801e116:	9001      	str	r0, [sp, #4]
 801e118:	f7e2 fa08 	bl	800052c <__aeabi_i2d>
 801e11c:	4642      	mov	r2, r8
 801e11e:	464b      	mov	r3, r9
 801e120:	f7e2 fa6e 	bl	8000600 <__aeabi_dmul>
 801e124:	4602      	mov	r2, r0
 801e126:	460b      	mov	r3, r1
 801e128:	4630      	mov	r0, r6
 801e12a:	4639      	mov	r1, r7
 801e12c:	f7e2 f8b0 	bl	8000290 <__aeabi_dsub>
 801e130:	9e01      	ldr	r6, [sp, #4]
 801e132:	9f04      	ldr	r7, [sp, #16]
 801e134:	4602      	mov	r2, r0
 801e136:	3630      	adds	r6, #48	; 0x30
 801e138:	460b      	mov	r3, r1
 801e13a:	f805 6b01 	strb.w	r6, [r5], #1
 801e13e:	9e00      	ldr	r6, [sp, #0]
 801e140:	1bae      	subs	r6, r5, r6
 801e142:	42b7      	cmp	r7, r6
 801e144:	d134      	bne.n	801e1b0 <_dtoa_r+0x708>
 801e146:	f7e2 f8a5 	bl	8000294 <__adddf3>
 801e14a:	4642      	mov	r2, r8
 801e14c:	464b      	mov	r3, r9
 801e14e:	4606      	mov	r6, r0
 801e150:	460f      	mov	r7, r1
 801e152:	f7e2 fce5 	bl	8000b20 <__aeabi_dcmpgt>
 801e156:	b9c8      	cbnz	r0, 801e18c <_dtoa_r+0x6e4>
 801e158:	4642      	mov	r2, r8
 801e15a:	464b      	mov	r3, r9
 801e15c:	4630      	mov	r0, r6
 801e15e:	4639      	mov	r1, r7
 801e160:	f7e2 fcb6 	bl	8000ad0 <__aeabi_dcmpeq>
 801e164:	b110      	cbz	r0, 801e16c <_dtoa_r+0x6c4>
 801e166:	9b01      	ldr	r3, [sp, #4]
 801e168:	07db      	lsls	r3, r3, #31
 801e16a:	d40f      	bmi.n	801e18c <_dtoa_r+0x6e4>
 801e16c:	4651      	mov	r1, sl
 801e16e:	4620      	mov	r0, r4
 801e170:	f001 fa2e 	bl	801f5d0 <_Bfree>
 801e174:	2300      	movs	r3, #0
 801e176:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e178:	702b      	strb	r3, [r5, #0]
 801e17a:	f10b 0301 	add.w	r3, fp, #1
 801e17e:	6013      	str	r3, [r2, #0]
 801e180:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e182:	2b00      	cmp	r3, #0
 801e184:	f43f ace2 	beq.w	801db4c <_dtoa_r+0xa4>
 801e188:	601d      	str	r5, [r3, #0]
 801e18a:	e4df      	b.n	801db4c <_dtoa_r+0xa4>
 801e18c:	465f      	mov	r7, fp
 801e18e:	462b      	mov	r3, r5
 801e190:	461d      	mov	r5, r3
 801e192:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801e196:	2a39      	cmp	r2, #57	; 0x39
 801e198:	d106      	bne.n	801e1a8 <_dtoa_r+0x700>
 801e19a:	9a00      	ldr	r2, [sp, #0]
 801e19c:	429a      	cmp	r2, r3
 801e19e:	d1f7      	bne.n	801e190 <_dtoa_r+0x6e8>
 801e1a0:	2230      	movs	r2, #48	; 0x30
 801e1a2:	9900      	ldr	r1, [sp, #0]
 801e1a4:	3701      	adds	r7, #1
 801e1a6:	700a      	strb	r2, [r1, #0]
 801e1a8:	781a      	ldrb	r2, [r3, #0]
 801e1aa:	3201      	adds	r2, #1
 801e1ac:	701a      	strb	r2, [r3, #0]
 801e1ae:	e790      	b.n	801e0d2 <_dtoa_r+0x62a>
 801e1b0:	2200      	movs	r2, #0
 801e1b2:	4ba3      	ldr	r3, [pc, #652]	; (801e440 <_dtoa_r+0x998>)
 801e1b4:	f7e2 fa24 	bl	8000600 <__aeabi_dmul>
 801e1b8:	2200      	movs	r2, #0
 801e1ba:	2300      	movs	r3, #0
 801e1bc:	4606      	mov	r6, r0
 801e1be:	460f      	mov	r7, r1
 801e1c0:	f7e2 fc86 	bl	8000ad0 <__aeabi_dcmpeq>
 801e1c4:	2800      	cmp	r0, #0
 801e1c6:	d09e      	beq.n	801e106 <_dtoa_r+0x65e>
 801e1c8:	e7d0      	b.n	801e16c <_dtoa_r+0x6c4>
 801e1ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e1cc:	2a00      	cmp	r2, #0
 801e1ce:	f000 80ca 	beq.w	801e366 <_dtoa_r+0x8be>
 801e1d2:	9a07      	ldr	r2, [sp, #28]
 801e1d4:	2a01      	cmp	r2, #1
 801e1d6:	f300 80ad 	bgt.w	801e334 <_dtoa_r+0x88c>
 801e1da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e1dc:	2a00      	cmp	r2, #0
 801e1de:	f000 80a5 	beq.w	801e32c <_dtoa_r+0x884>
 801e1e2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801e1e6:	9e08      	ldr	r6, [sp, #32]
 801e1e8:	9d05      	ldr	r5, [sp, #20]
 801e1ea:	9a05      	ldr	r2, [sp, #20]
 801e1ec:	2101      	movs	r1, #1
 801e1ee:	4620      	mov	r0, r4
 801e1f0:	441a      	add	r2, r3
 801e1f2:	9205      	str	r2, [sp, #20]
 801e1f4:	9a06      	ldr	r2, [sp, #24]
 801e1f6:	441a      	add	r2, r3
 801e1f8:	9206      	str	r2, [sp, #24]
 801e1fa:	f001 faeb 	bl	801f7d4 <__i2b>
 801e1fe:	4607      	mov	r7, r0
 801e200:	b165      	cbz	r5, 801e21c <_dtoa_r+0x774>
 801e202:	9b06      	ldr	r3, [sp, #24]
 801e204:	2b00      	cmp	r3, #0
 801e206:	dd09      	ble.n	801e21c <_dtoa_r+0x774>
 801e208:	42ab      	cmp	r3, r5
 801e20a:	9a05      	ldr	r2, [sp, #20]
 801e20c:	bfa8      	it	ge
 801e20e:	462b      	movge	r3, r5
 801e210:	1ad2      	subs	r2, r2, r3
 801e212:	1aed      	subs	r5, r5, r3
 801e214:	9205      	str	r2, [sp, #20]
 801e216:	9a06      	ldr	r2, [sp, #24]
 801e218:	1ad3      	subs	r3, r2, r3
 801e21a:	9306      	str	r3, [sp, #24]
 801e21c:	9b08      	ldr	r3, [sp, #32]
 801e21e:	b1f3      	cbz	r3, 801e25e <_dtoa_r+0x7b6>
 801e220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e222:	2b00      	cmp	r3, #0
 801e224:	f000 80a3 	beq.w	801e36e <_dtoa_r+0x8c6>
 801e228:	2e00      	cmp	r6, #0
 801e22a:	dd10      	ble.n	801e24e <_dtoa_r+0x7a6>
 801e22c:	4639      	mov	r1, r7
 801e22e:	4632      	mov	r2, r6
 801e230:	4620      	mov	r0, r4
 801e232:	f001 fb8f 	bl	801f954 <__pow5mult>
 801e236:	4652      	mov	r2, sl
 801e238:	4601      	mov	r1, r0
 801e23a:	4607      	mov	r7, r0
 801e23c:	4620      	mov	r0, r4
 801e23e:	f001 fadf 	bl	801f800 <__multiply>
 801e242:	4680      	mov	r8, r0
 801e244:	4651      	mov	r1, sl
 801e246:	4620      	mov	r0, r4
 801e248:	46c2      	mov	sl, r8
 801e24a:	f001 f9c1 	bl	801f5d0 <_Bfree>
 801e24e:	9b08      	ldr	r3, [sp, #32]
 801e250:	1b9a      	subs	r2, r3, r6
 801e252:	d004      	beq.n	801e25e <_dtoa_r+0x7b6>
 801e254:	4651      	mov	r1, sl
 801e256:	4620      	mov	r0, r4
 801e258:	f001 fb7c 	bl	801f954 <__pow5mult>
 801e25c:	4682      	mov	sl, r0
 801e25e:	2101      	movs	r1, #1
 801e260:	4620      	mov	r0, r4
 801e262:	f001 fab7 	bl	801f7d4 <__i2b>
 801e266:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e268:	4606      	mov	r6, r0
 801e26a:	2b00      	cmp	r3, #0
 801e26c:	f340 8081 	ble.w	801e372 <_dtoa_r+0x8ca>
 801e270:	461a      	mov	r2, r3
 801e272:	4601      	mov	r1, r0
 801e274:	4620      	mov	r0, r4
 801e276:	f001 fb6d 	bl	801f954 <__pow5mult>
 801e27a:	9b07      	ldr	r3, [sp, #28]
 801e27c:	4606      	mov	r6, r0
 801e27e:	2b01      	cmp	r3, #1
 801e280:	dd7a      	ble.n	801e378 <_dtoa_r+0x8d0>
 801e282:	f04f 0800 	mov.w	r8, #0
 801e286:	6933      	ldr	r3, [r6, #16]
 801e288:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801e28c:	6918      	ldr	r0, [r3, #16]
 801e28e:	f001 fa53 	bl	801f738 <__hi0bits>
 801e292:	f1c0 0020 	rsb	r0, r0, #32
 801e296:	9b06      	ldr	r3, [sp, #24]
 801e298:	4418      	add	r0, r3
 801e29a:	f010 001f 	ands.w	r0, r0, #31
 801e29e:	f000 8094 	beq.w	801e3ca <_dtoa_r+0x922>
 801e2a2:	f1c0 0320 	rsb	r3, r0, #32
 801e2a6:	2b04      	cmp	r3, #4
 801e2a8:	f340 8085 	ble.w	801e3b6 <_dtoa_r+0x90e>
 801e2ac:	f1c0 001c 	rsb	r0, r0, #28
 801e2b0:	9b05      	ldr	r3, [sp, #20]
 801e2b2:	4403      	add	r3, r0
 801e2b4:	4405      	add	r5, r0
 801e2b6:	9305      	str	r3, [sp, #20]
 801e2b8:	9b06      	ldr	r3, [sp, #24]
 801e2ba:	4403      	add	r3, r0
 801e2bc:	9306      	str	r3, [sp, #24]
 801e2be:	9b05      	ldr	r3, [sp, #20]
 801e2c0:	2b00      	cmp	r3, #0
 801e2c2:	dd05      	ble.n	801e2d0 <_dtoa_r+0x828>
 801e2c4:	4651      	mov	r1, sl
 801e2c6:	461a      	mov	r2, r3
 801e2c8:	4620      	mov	r0, r4
 801e2ca:	f001 fb9d 	bl	801fa08 <__lshift>
 801e2ce:	4682      	mov	sl, r0
 801e2d0:	9b06      	ldr	r3, [sp, #24]
 801e2d2:	2b00      	cmp	r3, #0
 801e2d4:	dd05      	ble.n	801e2e2 <_dtoa_r+0x83a>
 801e2d6:	4631      	mov	r1, r6
 801e2d8:	461a      	mov	r2, r3
 801e2da:	4620      	mov	r0, r4
 801e2dc:	f001 fb94 	bl	801fa08 <__lshift>
 801e2e0:	4606      	mov	r6, r0
 801e2e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e2e4:	2b00      	cmp	r3, #0
 801e2e6:	d072      	beq.n	801e3ce <_dtoa_r+0x926>
 801e2e8:	4631      	mov	r1, r6
 801e2ea:	4650      	mov	r0, sl
 801e2ec:	f001 fbf8 	bl	801fae0 <__mcmp>
 801e2f0:	2800      	cmp	r0, #0
 801e2f2:	da6c      	bge.n	801e3ce <_dtoa_r+0x926>
 801e2f4:	2300      	movs	r3, #0
 801e2f6:	4651      	mov	r1, sl
 801e2f8:	220a      	movs	r2, #10
 801e2fa:	4620      	mov	r0, r4
 801e2fc:	f001 f98a 	bl	801f614 <__multadd>
 801e300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e302:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801e306:	4682      	mov	sl, r0
 801e308:	2b00      	cmp	r3, #0
 801e30a:	f000 81af 	beq.w	801e66c <_dtoa_r+0xbc4>
 801e30e:	2300      	movs	r3, #0
 801e310:	4639      	mov	r1, r7
 801e312:	220a      	movs	r2, #10
 801e314:	4620      	mov	r0, r4
 801e316:	f001 f97d 	bl	801f614 <__multadd>
 801e31a:	9b01      	ldr	r3, [sp, #4]
 801e31c:	4607      	mov	r7, r0
 801e31e:	2b00      	cmp	r3, #0
 801e320:	f300 8096 	bgt.w	801e450 <_dtoa_r+0x9a8>
 801e324:	9b07      	ldr	r3, [sp, #28]
 801e326:	2b02      	cmp	r3, #2
 801e328:	dc59      	bgt.n	801e3de <_dtoa_r+0x936>
 801e32a:	e091      	b.n	801e450 <_dtoa_r+0x9a8>
 801e32c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e32e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801e332:	e758      	b.n	801e1e6 <_dtoa_r+0x73e>
 801e334:	9b04      	ldr	r3, [sp, #16]
 801e336:	1e5e      	subs	r6, r3, #1
 801e338:	9b08      	ldr	r3, [sp, #32]
 801e33a:	42b3      	cmp	r3, r6
 801e33c:	bfb7      	itett	lt
 801e33e:	9b08      	ldrlt	r3, [sp, #32]
 801e340:	1b9e      	subge	r6, r3, r6
 801e342:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801e344:	1af3      	sublt	r3, r6, r3
 801e346:	bfbe      	ittt	lt
 801e348:	9608      	strlt	r6, [sp, #32]
 801e34a:	2600      	movlt	r6, #0
 801e34c:	18d2      	addlt	r2, r2, r3
 801e34e:	9b04      	ldr	r3, [sp, #16]
 801e350:	bfb8      	it	lt
 801e352:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801e354:	2b00      	cmp	r3, #0
 801e356:	bfb7      	itett	lt
 801e358:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801e35c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 801e360:	1a9d      	sublt	r5, r3, r2
 801e362:	2300      	movlt	r3, #0
 801e364:	e741      	b.n	801e1ea <_dtoa_r+0x742>
 801e366:	9e08      	ldr	r6, [sp, #32]
 801e368:	9d05      	ldr	r5, [sp, #20]
 801e36a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801e36c:	e748      	b.n	801e200 <_dtoa_r+0x758>
 801e36e:	9a08      	ldr	r2, [sp, #32]
 801e370:	e770      	b.n	801e254 <_dtoa_r+0x7ac>
 801e372:	9b07      	ldr	r3, [sp, #28]
 801e374:	2b01      	cmp	r3, #1
 801e376:	dc19      	bgt.n	801e3ac <_dtoa_r+0x904>
 801e378:	9b02      	ldr	r3, [sp, #8]
 801e37a:	b9bb      	cbnz	r3, 801e3ac <_dtoa_r+0x904>
 801e37c:	9b03      	ldr	r3, [sp, #12]
 801e37e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801e382:	b99b      	cbnz	r3, 801e3ac <_dtoa_r+0x904>
 801e384:	9b03      	ldr	r3, [sp, #12]
 801e386:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e38a:	0d1b      	lsrs	r3, r3, #20
 801e38c:	051b      	lsls	r3, r3, #20
 801e38e:	b183      	cbz	r3, 801e3b2 <_dtoa_r+0x90a>
 801e390:	9b05      	ldr	r3, [sp, #20]
 801e392:	f04f 0801 	mov.w	r8, #1
 801e396:	3301      	adds	r3, #1
 801e398:	9305      	str	r3, [sp, #20]
 801e39a:	9b06      	ldr	r3, [sp, #24]
 801e39c:	3301      	adds	r3, #1
 801e39e:	9306      	str	r3, [sp, #24]
 801e3a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e3a2:	2b00      	cmp	r3, #0
 801e3a4:	f47f af6f 	bne.w	801e286 <_dtoa_r+0x7de>
 801e3a8:	2001      	movs	r0, #1
 801e3aa:	e774      	b.n	801e296 <_dtoa_r+0x7ee>
 801e3ac:	f04f 0800 	mov.w	r8, #0
 801e3b0:	e7f6      	b.n	801e3a0 <_dtoa_r+0x8f8>
 801e3b2:	4698      	mov	r8, r3
 801e3b4:	e7f4      	b.n	801e3a0 <_dtoa_r+0x8f8>
 801e3b6:	d082      	beq.n	801e2be <_dtoa_r+0x816>
 801e3b8:	331c      	adds	r3, #28
 801e3ba:	9a05      	ldr	r2, [sp, #20]
 801e3bc:	441a      	add	r2, r3
 801e3be:	441d      	add	r5, r3
 801e3c0:	9205      	str	r2, [sp, #20]
 801e3c2:	9a06      	ldr	r2, [sp, #24]
 801e3c4:	441a      	add	r2, r3
 801e3c6:	9206      	str	r2, [sp, #24]
 801e3c8:	e779      	b.n	801e2be <_dtoa_r+0x816>
 801e3ca:	4603      	mov	r3, r0
 801e3cc:	e7f4      	b.n	801e3b8 <_dtoa_r+0x910>
 801e3ce:	9b04      	ldr	r3, [sp, #16]
 801e3d0:	2b00      	cmp	r3, #0
 801e3d2:	dc37      	bgt.n	801e444 <_dtoa_r+0x99c>
 801e3d4:	9b07      	ldr	r3, [sp, #28]
 801e3d6:	2b02      	cmp	r3, #2
 801e3d8:	dd34      	ble.n	801e444 <_dtoa_r+0x99c>
 801e3da:	9b04      	ldr	r3, [sp, #16]
 801e3dc:	9301      	str	r3, [sp, #4]
 801e3de:	9b01      	ldr	r3, [sp, #4]
 801e3e0:	b963      	cbnz	r3, 801e3fc <_dtoa_r+0x954>
 801e3e2:	4631      	mov	r1, r6
 801e3e4:	2205      	movs	r2, #5
 801e3e6:	4620      	mov	r0, r4
 801e3e8:	f001 f914 	bl	801f614 <__multadd>
 801e3ec:	4601      	mov	r1, r0
 801e3ee:	4606      	mov	r6, r0
 801e3f0:	4650      	mov	r0, sl
 801e3f2:	f001 fb75 	bl	801fae0 <__mcmp>
 801e3f6:	2800      	cmp	r0, #0
 801e3f8:	f73f adbb 	bgt.w	801df72 <_dtoa_r+0x4ca>
 801e3fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e3fe:	9d00      	ldr	r5, [sp, #0]
 801e400:	ea6f 0b03 	mvn.w	fp, r3
 801e404:	f04f 0800 	mov.w	r8, #0
 801e408:	4631      	mov	r1, r6
 801e40a:	4620      	mov	r0, r4
 801e40c:	f001 f8e0 	bl	801f5d0 <_Bfree>
 801e410:	2f00      	cmp	r7, #0
 801e412:	f43f aeab 	beq.w	801e16c <_dtoa_r+0x6c4>
 801e416:	f1b8 0f00 	cmp.w	r8, #0
 801e41a:	d005      	beq.n	801e428 <_dtoa_r+0x980>
 801e41c:	45b8      	cmp	r8, r7
 801e41e:	d003      	beq.n	801e428 <_dtoa_r+0x980>
 801e420:	4641      	mov	r1, r8
 801e422:	4620      	mov	r0, r4
 801e424:	f001 f8d4 	bl	801f5d0 <_Bfree>
 801e428:	4639      	mov	r1, r7
 801e42a:	4620      	mov	r0, r4
 801e42c:	f001 f8d0 	bl	801f5d0 <_Bfree>
 801e430:	e69c      	b.n	801e16c <_dtoa_r+0x6c4>
 801e432:	2600      	movs	r6, #0
 801e434:	4637      	mov	r7, r6
 801e436:	e7e1      	b.n	801e3fc <_dtoa_r+0x954>
 801e438:	46bb      	mov	fp, r7
 801e43a:	4637      	mov	r7, r6
 801e43c:	e599      	b.n	801df72 <_dtoa_r+0x4ca>
 801e43e:	bf00      	nop
 801e440:	40240000 	.word	0x40240000
 801e444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e446:	2b00      	cmp	r3, #0
 801e448:	f000 80c8 	beq.w	801e5dc <_dtoa_r+0xb34>
 801e44c:	9b04      	ldr	r3, [sp, #16]
 801e44e:	9301      	str	r3, [sp, #4]
 801e450:	2d00      	cmp	r5, #0
 801e452:	dd05      	ble.n	801e460 <_dtoa_r+0x9b8>
 801e454:	4639      	mov	r1, r7
 801e456:	462a      	mov	r2, r5
 801e458:	4620      	mov	r0, r4
 801e45a:	f001 fad5 	bl	801fa08 <__lshift>
 801e45e:	4607      	mov	r7, r0
 801e460:	f1b8 0f00 	cmp.w	r8, #0
 801e464:	d05b      	beq.n	801e51e <_dtoa_r+0xa76>
 801e466:	6879      	ldr	r1, [r7, #4]
 801e468:	4620      	mov	r0, r4
 801e46a:	f001 f871 	bl	801f550 <_Balloc>
 801e46e:	4605      	mov	r5, r0
 801e470:	b928      	cbnz	r0, 801e47e <_dtoa_r+0x9d6>
 801e472:	4b82      	ldr	r3, [pc, #520]	; (801e67c <_dtoa_r+0xbd4>)
 801e474:	4602      	mov	r2, r0
 801e476:	f240 21ef 	movw	r1, #751	; 0x2ef
 801e47a:	f7ff bb2e 	b.w	801dada <_dtoa_r+0x32>
 801e47e:	693a      	ldr	r2, [r7, #16]
 801e480:	f107 010c 	add.w	r1, r7, #12
 801e484:	300c      	adds	r0, #12
 801e486:	3202      	adds	r2, #2
 801e488:	0092      	lsls	r2, r2, #2
 801e48a:	f7ff fa60 	bl	801d94e <memcpy>
 801e48e:	2201      	movs	r2, #1
 801e490:	4629      	mov	r1, r5
 801e492:	4620      	mov	r0, r4
 801e494:	f001 fab8 	bl	801fa08 <__lshift>
 801e498:	9b00      	ldr	r3, [sp, #0]
 801e49a:	46b8      	mov	r8, r7
 801e49c:	4607      	mov	r7, r0
 801e49e:	3301      	adds	r3, #1
 801e4a0:	9304      	str	r3, [sp, #16]
 801e4a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e4a6:	4413      	add	r3, r2
 801e4a8:	9308      	str	r3, [sp, #32]
 801e4aa:	9b02      	ldr	r3, [sp, #8]
 801e4ac:	f003 0301 	and.w	r3, r3, #1
 801e4b0:	9306      	str	r3, [sp, #24]
 801e4b2:	9b04      	ldr	r3, [sp, #16]
 801e4b4:	4631      	mov	r1, r6
 801e4b6:	4650      	mov	r0, sl
 801e4b8:	3b01      	subs	r3, #1
 801e4ba:	9301      	str	r3, [sp, #4]
 801e4bc:	f7ff fa62 	bl	801d984 <quorem>
 801e4c0:	4641      	mov	r1, r8
 801e4c2:	9002      	str	r0, [sp, #8]
 801e4c4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801e4c8:	4650      	mov	r0, sl
 801e4ca:	f001 fb09 	bl	801fae0 <__mcmp>
 801e4ce:	463a      	mov	r2, r7
 801e4d0:	9005      	str	r0, [sp, #20]
 801e4d2:	4631      	mov	r1, r6
 801e4d4:	4620      	mov	r0, r4
 801e4d6:	f001 fb1f 	bl	801fb18 <__mdiff>
 801e4da:	68c2      	ldr	r2, [r0, #12]
 801e4dc:	4605      	mov	r5, r0
 801e4de:	bb02      	cbnz	r2, 801e522 <_dtoa_r+0xa7a>
 801e4e0:	4601      	mov	r1, r0
 801e4e2:	4650      	mov	r0, sl
 801e4e4:	f001 fafc 	bl	801fae0 <__mcmp>
 801e4e8:	4602      	mov	r2, r0
 801e4ea:	4629      	mov	r1, r5
 801e4ec:	4620      	mov	r0, r4
 801e4ee:	9209      	str	r2, [sp, #36]	; 0x24
 801e4f0:	f001 f86e 	bl	801f5d0 <_Bfree>
 801e4f4:	9b07      	ldr	r3, [sp, #28]
 801e4f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e4f8:	9d04      	ldr	r5, [sp, #16]
 801e4fa:	ea43 0102 	orr.w	r1, r3, r2
 801e4fe:	9b06      	ldr	r3, [sp, #24]
 801e500:	4319      	orrs	r1, r3
 801e502:	d110      	bne.n	801e526 <_dtoa_r+0xa7e>
 801e504:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801e508:	d029      	beq.n	801e55e <_dtoa_r+0xab6>
 801e50a:	9b05      	ldr	r3, [sp, #20]
 801e50c:	2b00      	cmp	r3, #0
 801e50e:	dd02      	ble.n	801e516 <_dtoa_r+0xa6e>
 801e510:	9b02      	ldr	r3, [sp, #8]
 801e512:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801e516:	9b01      	ldr	r3, [sp, #4]
 801e518:	f883 9000 	strb.w	r9, [r3]
 801e51c:	e774      	b.n	801e408 <_dtoa_r+0x960>
 801e51e:	4638      	mov	r0, r7
 801e520:	e7ba      	b.n	801e498 <_dtoa_r+0x9f0>
 801e522:	2201      	movs	r2, #1
 801e524:	e7e1      	b.n	801e4ea <_dtoa_r+0xa42>
 801e526:	9b05      	ldr	r3, [sp, #20]
 801e528:	2b00      	cmp	r3, #0
 801e52a:	db04      	blt.n	801e536 <_dtoa_r+0xa8e>
 801e52c:	9907      	ldr	r1, [sp, #28]
 801e52e:	430b      	orrs	r3, r1
 801e530:	9906      	ldr	r1, [sp, #24]
 801e532:	430b      	orrs	r3, r1
 801e534:	d120      	bne.n	801e578 <_dtoa_r+0xad0>
 801e536:	2a00      	cmp	r2, #0
 801e538:	dded      	ble.n	801e516 <_dtoa_r+0xa6e>
 801e53a:	4651      	mov	r1, sl
 801e53c:	2201      	movs	r2, #1
 801e53e:	4620      	mov	r0, r4
 801e540:	f001 fa62 	bl	801fa08 <__lshift>
 801e544:	4631      	mov	r1, r6
 801e546:	4682      	mov	sl, r0
 801e548:	f001 faca 	bl	801fae0 <__mcmp>
 801e54c:	2800      	cmp	r0, #0
 801e54e:	dc03      	bgt.n	801e558 <_dtoa_r+0xab0>
 801e550:	d1e1      	bne.n	801e516 <_dtoa_r+0xa6e>
 801e552:	f019 0f01 	tst.w	r9, #1
 801e556:	d0de      	beq.n	801e516 <_dtoa_r+0xa6e>
 801e558:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801e55c:	d1d8      	bne.n	801e510 <_dtoa_r+0xa68>
 801e55e:	2339      	movs	r3, #57	; 0x39
 801e560:	9a01      	ldr	r2, [sp, #4]
 801e562:	7013      	strb	r3, [r2, #0]
 801e564:	462b      	mov	r3, r5
 801e566:	461d      	mov	r5, r3
 801e568:	3b01      	subs	r3, #1
 801e56a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801e56e:	2a39      	cmp	r2, #57	; 0x39
 801e570:	d06b      	beq.n	801e64a <_dtoa_r+0xba2>
 801e572:	3201      	adds	r2, #1
 801e574:	701a      	strb	r2, [r3, #0]
 801e576:	e747      	b.n	801e408 <_dtoa_r+0x960>
 801e578:	2a00      	cmp	r2, #0
 801e57a:	dd07      	ble.n	801e58c <_dtoa_r+0xae4>
 801e57c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801e580:	d0ed      	beq.n	801e55e <_dtoa_r+0xab6>
 801e582:	f109 0301 	add.w	r3, r9, #1
 801e586:	9a01      	ldr	r2, [sp, #4]
 801e588:	7013      	strb	r3, [r2, #0]
 801e58a:	e73d      	b.n	801e408 <_dtoa_r+0x960>
 801e58c:	9b04      	ldr	r3, [sp, #16]
 801e58e:	9a08      	ldr	r2, [sp, #32]
 801e590:	f803 9c01 	strb.w	r9, [r3, #-1]
 801e594:	4293      	cmp	r3, r2
 801e596:	d042      	beq.n	801e61e <_dtoa_r+0xb76>
 801e598:	4651      	mov	r1, sl
 801e59a:	2300      	movs	r3, #0
 801e59c:	220a      	movs	r2, #10
 801e59e:	4620      	mov	r0, r4
 801e5a0:	f001 f838 	bl	801f614 <__multadd>
 801e5a4:	45b8      	cmp	r8, r7
 801e5a6:	4682      	mov	sl, r0
 801e5a8:	f04f 0300 	mov.w	r3, #0
 801e5ac:	f04f 020a 	mov.w	r2, #10
 801e5b0:	4641      	mov	r1, r8
 801e5b2:	4620      	mov	r0, r4
 801e5b4:	d107      	bne.n	801e5c6 <_dtoa_r+0xb1e>
 801e5b6:	f001 f82d 	bl	801f614 <__multadd>
 801e5ba:	4680      	mov	r8, r0
 801e5bc:	4607      	mov	r7, r0
 801e5be:	9b04      	ldr	r3, [sp, #16]
 801e5c0:	3301      	adds	r3, #1
 801e5c2:	9304      	str	r3, [sp, #16]
 801e5c4:	e775      	b.n	801e4b2 <_dtoa_r+0xa0a>
 801e5c6:	f001 f825 	bl	801f614 <__multadd>
 801e5ca:	4639      	mov	r1, r7
 801e5cc:	4680      	mov	r8, r0
 801e5ce:	2300      	movs	r3, #0
 801e5d0:	220a      	movs	r2, #10
 801e5d2:	4620      	mov	r0, r4
 801e5d4:	f001 f81e 	bl	801f614 <__multadd>
 801e5d8:	4607      	mov	r7, r0
 801e5da:	e7f0      	b.n	801e5be <_dtoa_r+0xb16>
 801e5dc:	9b04      	ldr	r3, [sp, #16]
 801e5de:	9301      	str	r3, [sp, #4]
 801e5e0:	9d00      	ldr	r5, [sp, #0]
 801e5e2:	4631      	mov	r1, r6
 801e5e4:	4650      	mov	r0, sl
 801e5e6:	f7ff f9cd 	bl	801d984 <quorem>
 801e5ea:	9b00      	ldr	r3, [sp, #0]
 801e5ec:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801e5f0:	f805 9b01 	strb.w	r9, [r5], #1
 801e5f4:	1aea      	subs	r2, r5, r3
 801e5f6:	9b01      	ldr	r3, [sp, #4]
 801e5f8:	4293      	cmp	r3, r2
 801e5fa:	dd07      	ble.n	801e60c <_dtoa_r+0xb64>
 801e5fc:	4651      	mov	r1, sl
 801e5fe:	2300      	movs	r3, #0
 801e600:	220a      	movs	r2, #10
 801e602:	4620      	mov	r0, r4
 801e604:	f001 f806 	bl	801f614 <__multadd>
 801e608:	4682      	mov	sl, r0
 801e60a:	e7ea      	b.n	801e5e2 <_dtoa_r+0xb3a>
 801e60c:	9b01      	ldr	r3, [sp, #4]
 801e60e:	f04f 0800 	mov.w	r8, #0
 801e612:	2b00      	cmp	r3, #0
 801e614:	bfcc      	ite	gt
 801e616:	461d      	movgt	r5, r3
 801e618:	2501      	movle	r5, #1
 801e61a:	9b00      	ldr	r3, [sp, #0]
 801e61c:	441d      	add	r5, r3
 801e61e:	4651      	mov	r1, sl
 801e620:	2201      	movs	r2, #1
 801e622:	4620      	mov	r0, r4
 801e624:	f001 f9f0 	bl	801fa08 <__lshift>
 801e628:	4631      	mov	r1, r6
 801e62a:	4682      	mov	sl, r0
 801e62c:	f001 fa58 	bl	801fae0 <__mcmp>
 801e630:	2800      	cmp	r0, #0
 801e632:	dc97      	bgt.n	801e564 <_dtoa_r+0xabc>
 801e634:	d102      	bne.n	801e63c <_dtoa_r+0xb94>
 801e636:	f019 0f01 	tst.w	r9, #1
 801e63a:	d193      	bne.n	801e564 <_dtoa_r+0xabc>
 801e63c:	462b      	mov	r3, r5
 801e63e:	461d      	mov	r5, r3
 801e640:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801e644:	2a30      	cmp	r2, #48	; 0x30
 801e646:	d0fa      	beq.n	801e63e <_dtoa_r+0xb96>
 801e648:	e6de      	b.n	801e408 <_dtoa_r+0x960>
 801e64a:	9a00      	ldr	r2, [sp, #0]
 801e64c:	429a      	cmp	r2, r3
 801e64e:	d18a      	bne.n	801e566 <_dtoa_r+0xabe>
 801e650:	f10b 0b01 	add.w	fp, fp, #1
 801e654:	2331      	movs	r3, #49	; 0x31
 801e656:	e797      	b.n	801e588 <_dtoa_r+0xae0>
 801e658:	4b09      	ldr	r3, [pc, #36]	; (801e680 <_dtoa_r+0xbd8>)
 801e65a:	f7ff ba9a 	b.w	801db92 <_dtoa_r+0xea>
 801e65e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e660:	2b00      	cmp	r3, #0
 801e662:	f47f aa6e 	bne.w	801db42 <_dtoa_r+0x9a>
 801e666:	4b07      	ldr	r3, [pc, #28]	; (801e684 <_dtoa_r+0xbdc>)
 801e668:	f7ff ba93 	b.w	801db92 <_dtoa_r+0xea>
 801e66c:	9b01      	ldr	r3, [sp, #4]
 801e66e:	2b00      	cmp	r3, #0
 801e670:	dcb6      	bgt.n	801e5e0 <_dtoa_r+0xb38>
 801e672:	9b07      	ldr	r3, [sp, #28]
 801e674:	2b02      	cmp	r3, #2
 801e676:	f73f aeb2 	bgt.w	801e3de <_dtoa_r+0x936>
 801e67a:	e7b1      	b.n	801e5e0 <_dtoa_r+0xb38>
 801e67c:	0803865d 	.word	0x0803865d
 801e680:	0803845c 	.word	0x0803845c
 801e684:	080385e1 	.word	0x080385e1

0801e688 <rshift>:
 801e688:	6903      	ldr	r3, [r0, #16]
 801e68a:	114a      	asrs	r2, r1, #5
 801e68c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801e690:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e694:	f100 0414 	add.w	r4, r0, #20
 801e698:	dd45      	ble.n	801e726 <rshift+0x9e>
 801e69a:	f011 011f 	ands.w	r1, r1, #31
 801e69e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801e6a2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801e6a6:	d10c      	bne.n	801e6c2 <rshift+0x3a>
 801e6a8:	f100 0710 	add.w	r7, r0, #16
 801e6ac:	4629      	mov	r1, r5
 801e6ae:	42b1      	cmp	r1, r6
 801e6b0:	d334      	bcc.n	801e71c <rshift+0x94>
 801e6b2:	1a9b      	subs	r3, r3, r2
 801e6b4:	1eea      	subs	r2, r5, #3
 801e6b6:	009b      	lsls	r3, r3, #2
 801e6b8:	4296      	cmp	r6, r2
 801e6ba:	bf38      	it	cc
 801e6bc:	2300      	movcc	r3, #0
 801e6be:	4423      	add	r3, r4
 801e6c0:	e015      	b.n	801e6ee <rshift+0x66>
 801e6c2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801e6c6:	f1c1 0820 	rsb	r8, r1, #32
 801e6ca:	f105 0e04 	add.w	lr, r5, #4
 801e6ce:	46a1      	mov	r9, r4
 801e6d0:	40cf      	lsrs	r7, r1
 801e6d2:	4576      	cmp	r6, lr
 801e6d4:	46f4      	mov	ip, lr
 801e6d6:	d815      	bhi.n	801e704 <rshift+0x7c>
 801e6d8:	1a9a      	subs	r2, r3, r2
 801e6da:	3501      	adds	r5, #1
 801e6dc:	0092      	lsls	r2, r2, #2
 801e6de:	3a04      	subs	r2, #4
 801e6e0:	42ae      	cmp	r6, r5
 801e6e2:	bf38      	it	cc
 801e6e4:	2200      	movcc	r2, #0
 801e6e6:	18a3      	adds	r3, r4, r2
 801e6e8:	50a7      	str	r7, [r4, r2]
 801e6ea:	b107      	cbz	r7, 801e6ee <rshift+0x66>
 801e6ec:	3304      	adds	r3, #4
 801e6ee:	1b1a      	subs	r2, r3, r4
 801e6f0:	42a3      	cmp	r3, r4
 801e6f2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801e6f6:	bf08      	it	eq
 801e6f8:	2300      	moveq	r3, #0
 801e6fa:	6102      	str	r2, [r0, #16]
 801e6fc:	bf08      	it	eq
 801e6fe:	6143      	streq	r3, [r0, #20]
 801e700:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e704:	f8dc c000 	ldr.w	ip, [ip]
 801e708:	fa0c fc08 	lsl.w	ip, ip, r8
 801e70c:	ea4c 0707 	orr.w	r7, ip, r7
 801e710:	f849 7b04 	str.w	r7, [r9], #4
 801e714:	f85e 7b04 	ldr.w	r7, [lr], #4
 801e718:	40cf      	lsrs	r7, r1
 801e71a:	e7da      	b.n	801e6d2 <rshift+0x4a>
 801e71c:	f851 cb04 	ldr.w	ip, [r1], #4
 801e720:	f847 cf04 	str.w	ip, [r7, #4]!
 801e724:	e7c3      	b.n	801e6ae <rshift+0x26>
 801e726:	4623      	mov	r3, r4
 801e728:	e7e1      	b.n	801e6ee <rshift+0x66>

0801e72a <__hexdig_fun>:
 801e72a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801e72e:	2b09      	cmp	r3, #9
 801e730:	d802      	bhi.n	801e738 <__hexdig_fun+0xe>
 801e732:	3820      	subs	r0, #32
 801e734:	b2c0      	uxtb	r0, r0
 801e736:	4770      	bx	lr
 801e738:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801e73c:	2b05      	cmp	r3, #5
 801e73e:	d801      	bhi.n	801e744 <__hexdig_fun+0x1a>
 801e740:	3847      	subs	r0, #71	; 0x47
 801e742:	e7f7      	b.n	801e734 <__hexdig_fun+0xa>
 801e744:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801e748:	2b05      	cmp	r3, #5
 801e74a:	d801      	bhi.n	801e750 <__hexdig_fun+0x26>
 801e74c:	3827      	subs	r0, #39	; 0x27
 801e74e:	e7f1      	b.n	801e734 <__hexdig_fun+0xa>
 801e750:	2000      	movs	r0, #0
 801e752:	4770      	bx	lr

0801e754 <__gethex>:
 801e754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e758:	4617      	mov	r7, r2
 801e75a:	680a      	ldr	r2, [r1, #0]
 801e75c:	b085      	sub	sp, #20
 801e75e:	4681      	mov	r9, r0
 801e760:	f102 0b02 	add.w	fp, r2, #2
 801e764:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801e768:	468a      	mov	sl, r1
 801e76a:	9302      	str	r3, [sp, #8]
 801e76c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801e770:	32fe      	adds	r2, #254	; 0xfe
 801e772:	eb02 030b 	add.w	r3, r2, fp
 801e776:	46d8      	mov	r8, fp
 801e778:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801e77c:	9301      	str	r3, [sp, #4]
 801e77e:	2830      	cmp	r0, #48	; 0x30
 801e780:	d0f7      	beq.n	801e772 <__gethex+0x1e>
 801e782:	f7ff ffd2 	bl	801e72a <__hexdig_fun>
 801e786:	4604      	mov	r4, r0
 801e788:	2800      	cmp	r0, #0
 801e78a:	d137      	bne.n	801e7fc <__gethex+0xa8>
 801e78c:	2201      	movs	r2, #1
 801e78e:	49a7      	ldr	r1, [pc, #668]	; (801ea2c <__gethex+0x2d8>)
 801e790:	4640      	mov	r0, r8
 801e792:	f7ff f883 	bl	801d89c <strncmp>
 801e796:	4606      	mov	r6, r0
 801e798:	2800      	cmp	r0, #0
 801e79a:	d168      	bne.n	801e86e <__gethex+0x11a>
 801e79c:	f898 0001 	ldrb.w	r0, [r8, #1]
 801e7a0:	465d      	mov	r5, fp
 801e7a2:	f7ff ffc2 	bl	801e72a <__hexdig_fun>
 801e7a6:	2800      	cmp	r0, #0
 801e7a8:	d063      	beq.n	801e872 <__gethex+0x11e>
 801e7aa:	465a      	mov	r2, fp
 801e7ac:	7810      	ldrb	r0, [r2, #0]
 801e7ae:	4690      	mov	r8, r2
 801e7b0:	3201      	adds	r2, #1
 801e7b2:	2830      	cmp	r0, #48	; 0x30
 801e7b4:	d0fa      	beq.n	801e7ac <__gethex+0x58>
 801e7b6:	f7ff ffb8 	bl	801e72a <__hexdig_fun>
 801e7ba:	fab0 f480 	clz	r4, r0
 801e7be:	2301      	movs	r3, #1
 801e7c0:	465e      	mov	r6, fp
 801e7c2:	0964      	lsrs	r4, r4, #5
 801e7c4:	9301      	str	r3, [sp, #4]
 801e7c6:	4642      	mov	r2, r8
 801e7c8:	4615      	mov	r5, r2
 801e7ca:	3201      	adds	r2, #1
 801e7cc:	7828      	ldrb	r0, [r5, #0]
 801e7ce:	f7ff ffac 	bl	801e72a <__hexdig_fun>
 801e7d2:	2800      	cmp	r0, #0
 801e7d4:	d1f8      	bne.n	801e7c8 <__gethex+0x74>
 801e7d6:	2201      	movs	r2, #1
 801e7d8:	4994      	ldr	r1, [pc, #592]	; (801ea2c <__gethex+0x2d8>)
 801e7da:	4628      	mov	r0, r5
 801e7dc:	f7ff f85e 	bl	801d89c <strncmp>
 801e7e0:	b978      	cbnz	r0, 801e802 <__gethex+0xae>
 801e7e2:	b946      	cbnz	r6, 801e7f6 <__gethex+0xa2>
 801e7e4:	1c6e      	adds	r6, r5, #1
 801e7e6:	4632      	mov	r2, r6
 801e7e8:	4615      	mov	r5, r2
 801e7ea:	3201      	adds	r2, #1
 801e7ec:	7828      	ldrb	r0, [r5, #0]
 801e7ee:	f7ff ff9c 	bl	801e72a <__hexdig_fun>
 801e7f2:	2800      	cmp	r0, #0
 801e7f4:	d1f8      	bne.n	801e7e8 <__gethex+0x94>
 801e7f6:	1b73      	subs	r3, r6, r5
 801e7f8:	009e      	lsls	r6, r3, #2
 801e7fa:	e004      	b.n	801e806 <__gethex+0xb2>
 801e7fc:	2400      	movs	r4, #0
 801e7fe:	4626      	mov	r6, r4
 801e800:	e7e1      	b.n	801e7c6 <__gethex+0x72>
 801e802:	2e00      	cmp	r6, #0
 801e804:	d1f7      	bne.n	801e7f6 <__gethex+0xa2>
 801e806:	782b      	ldrb	r3, [r5, #0]
 801e808:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801e80c:	2b50      	cmp	r3, #80	; 0x50
 801e80e:	d13d      	bne.n	801e88c <__gethex+0x138>
 801e810:	786b      	ldrb	r3, [r5, #1]
 801e812:	2b2b      	cmp	r3, #43	; 0x2b
 801e814:	d02f      	beq.n	801e876 <__gethex+0x122>
 801e816:	2b2d      	cmp	r3, #45	; 0x2d
 801e818:	d031      	beq.n	801e87e <__gethex+0x12a>
 801e81a:	1c69      	adds	r1, r5, #1
 801e81c:	f04f 0b00 	mov.w	fp, #0
 801e820:	7808      	ldrb	r0, [r1, #0]
 801e822:	f7ff ff82 	bl	801e72a <__hexdig_fun>
 801e826:	1e42      	subs	r2, r0, #1
 801e828:	b2d2      	uxtb	r2, r2
 801e82a:	2a18      	cmp	r2, #24
 801e82c:	d82e      	bhi.n	801e88c <__gethex+0x138>
 801e82e:	f1a0 0210 	sub.w	r2, r0, #16
 801e832:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801e836:	f7ff ff78 	bl	801e72a <__hexdig_fun>
 801e83a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 801e83e:	fa5f fc8c 	uxtb.w	ip, ip
 801e842:	f1bc 0f18 	cmp.w	ip, #24
 801e846:	d91d      	bls.n	801e884 <__gethex+0x130>
 801e848:	f1bb 0f00 	cmp.w	fp, #0
 801e84c:	d000      	beq.n	801e850 <__gethex+0xfc>
 801e84e:	4252      	negs	r2, r2
 801e850:	4416      	add	r6, r2
 801e852:	f8ca 1000 	str.w	r1, [sl]
 801e856:	b1dc      	cbz	r4, 801e890 <__gethex+0x13c>
 801e858:	9b01      	ldr	r3, [sp, #4]
 801e85a:	2b00      	cmp	r3, #0
 801e85c:	bf14      	ite	ne
 801e85e:	f04f 0800 	movne.w	r8, #0
 801e862:	f04f 0806 	moveq.w	r8, #6
 801e866:	4640      	mov	r0, r8
 801e868:	b005      	add	sp, #20
 801e86a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e86e:	4645      	mov	r5, r8
 801e870:	4626      	mov	r6, r4
 801e872:	2401      	movs	r4, #1
 801e874:	e7c7      	b.n	801e806 <__gethex+0xb2>
 801e876:	f04f 0b00 	mov.w	fp, #0
 801e87a:	1ca9      	adds	r1, r5, #2
 801e87c:	e7d0      	b.n	801e820 <__gethex+0xcc>
 801e87e:	f04f 0b01 	mov.w	fp, #1
 801e882:	e7fa      	b.n	801e87a <__gethex+0x126>
 801e884:	230a      	movs	r3, #10
 801e886:	fb03 0002 	mla	r0, r3, r2, r0
 801e88a:	e7d0      	b.n	801e82e <__gethex+0xda>
 801e88c:	4629      	mov	r1, r5
 801e88e:	e7e0      	b.n	801e852 <__gethex+0xfe>
 801e890:	eba5 0308 	sub.w	r3, r5, r8
 801e894:	4621      	mov	r1, r4
 801e896:	3b01      	subs	r3, #1
 801e898:	2b07      	cmp	r3, #7
 801e89a:	dc0a      	bgt.n	801e8b2 <__gethex+0x15e>
 801e89c:	4648      	mov	r0, r9
 801e89e:	f000 fe57 	bl	801f550 <_Balloc>
 801e8a2:	4604      	mov	r4, r0
 801e8a4:	b940      	cbnz	r0, 801e8b8 <__gethex+0x164>
 801e8a6:	4b62      	ldr	r3, [pc, #392]	; (801ea30 <__gethex+0x2dc>)
 801e8a8:	4602      	mov	r2, r0
 801e8aa:	21e4      	movs	r1, #228	; 0xe4
 801e8ac:	4861      	ldr	r0, [pc, #388]	; (801ea34 <__gethex+0x2e0>)
 801e8ae:	f001 fd43 	bl	8020338 <__assert_func>
 801e8b2:	3101      	adds	r1, #1
 801e8b4:	105b      	asrs	r3, r3, #1
 801e8b6:	e7ef      	b.n	801e898 <__gethex+0x144>
 801e8b8:	2300      	movs	r3, #0
 801e8ba:	f100 0a14 	add.w	sl, r0, #20
 801e8be:	495b      	ldr	r1, [pc, #364]	; (801ea2c <__gethex+0x2d8>)
 801e8c0:	469b      	mov	fp, r3
 801e8c2:	f8cd a004 	str.w	sl, [sp, #4]
 801e8c6:	45a8      	cmp	r8, r5
 801e8c8:	d342      	bcc.n	801e950 <__gethex+0x1fc>
 801e8ca:	9801      	ldr	r0, [sp, #4]
 801e8cc:	f840 bb04 	str.w	fp, [r0], #4
 801e8d0:	eba0 000a 	sub.w	r0, r0, sl
 801e8d4:	1080      	asrs	r0, r0, #2
 801e8d6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801e8da:	6120      	str	r0, [r4, #16]
 801e8dc:	4658      	mov	r0, fp
 801e8de:	f000 ff2b 	bl	801f738 <__hi0bits>
 801e8e2:	683d      	ldr	r5, [r7, #0]
 801e8e4:	eba8 0000 	sub.w	r0, r8, r0
 801e8e8:	42a8      	cmp	r0, r5
 801e8ea:	dd59      	ble.n	801e9a0 <__gethex+0x24c>
 801e8ec:	eba0 0805 	sub.w	r8, r0, r5
 801e8f0:	4620      	mov	r0, r4
 801e8f2:	4641      	mov	r1, r8
 801e8f4:	f001 fac4 	bl	801fe80 <__any_on>
 801e8f8:	4683      	mov	fp, r0
 801e8fa:	b1b8      	cbz	r0, 801e92c <__gethex+0x1d8>
 801e8fc:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 801e900:	f04f 0b01 	mov.w	fp, #1
 801e904:	1159      	asrs	r1, r3, #5
 801e906:	f003 021f 	and.w	r2, r3, #31
 801e90a:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801e90e:	fa0b f202 	lsl.w	r2, fp, r2
 801e912:	420a      	tst	r2, r1
 801e914:	d00a      	beq.n	801e92c <__gethex+0x1d8>
 801e916:	455b      	cmp	r3, fp
 801e918:	dd06      	ble.n	801e928 <__gethex+0x1d4>
 801e91a:	f1a8 0102 	sub.w	r1, r8, #2
 801e91e:	4620      	mov	r0, r4
 801e920:	f001 faae 	bl	801fe80 <__any_on>
 801e924:	2800      	cmp	r0, #0
 801e926:	d138      	bne.n	801e99a <__gethex+0x246>
 801e928:	f04f 0b02 	mov.w	fp, #2
 801e92c:	4446      	add	r6, r8
 801e92e:	4641      	mov	r1, r8
 801e930:	4620      	mov	r0, r4
 801e932:	f7ff fea9 	bl	801e688 <rshift>
 801e936:	68bb      	ldr	r3, [r7, #8]
 801e938:	42b3      	cmp	r3, r6
 801e93a:	da41      	bge.n	801e9c0 <__gethex+0x26c>
 801e93c:	4621      	mov	r1, r4
 801e93e:	4648      	mov	r0, r9
 801e940:	f000 fe46 	bl	801f5d0 <_Bfree>
 801e944:	2300      	movs	r3, #0
 801e946:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e948:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801e94c:	6013      	str	r3, [r2, #0]
 801e94e:	e78a      	b.n	801e866 <__gethex+0x112>
 801e950:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801e954:	2a2e      	cmp	r2, #46	; 0x2e
 801e956:	d014      	beq.n	801e982 <__gethex+0x22e>
 801e958:	2b20      	cmp	r3, #32
 801e95a:	d106      	bne.n	801e96a <__gethex+0x216>
 801e95c:	9b01      	ldr	r3, [sp, #4]
 801e95e:	f843 bb04 	str.w	fp, [r3], #4
 801e962:	f04f 0b00 	mov.w	fp, #0
 801e966:	9301      	str	r3, [sp, #4]
 801e968:	465b      	mov	r3, fp
 801e96a:	7828      	ldrb	r0, [r5, #0]
 801e96c:	9303      	str	r3, [sp, #12]
 801e96e:	f7ff fedc 	bl	801e72a <__hexdig_fun>
 801e972:	9b03      	ldr	r3, [sp, #12]
 801e974:	f000 000f 	and.w	r0, r0, #15
 801e978:	4098      	lsls	r0, r3
 801e97a:	3304      	adds	r3, #4
 801e97c:	ea4b 0b00 	orr.w	fp, fp, r0
 801e980:	e7a1      	b.n	801e8c6 <__gethex+0x172>
 801e982:	45a8      	cmp	r8, r5
 801e984:	d8e8      	bhi.n	801e958 <__gethex+0x204>
 801e986:	2201      	movs	r2, #1
 801e988:	4628      	mov	r0, r5
 801e98a:	9303      	str	r3, [sp, #12]
 801e98c:	f7fe ff86 	bl	801d89c <strncmp>
 801e990:	4926      	ldr	r1, [pc, #152]	; (801ea2c <__gethex+0x2d8>)
 801e992:	9b03      	ldr	r3, [sp, #12]
 801e994:	2800      	cmp	r0, #0
 801e996:	d1df      	bne.n	801e958 <__gethex+0x204>
 801e998:	e795      	b.n	801e8c6 <__gethex+0x172>
 801e99a:	f04f 0b03 	mov.w	fp, #3
 801e99e:	e7c5      	b.n	801e92c <__gethex+0x1d8>
 801e9a0:	da0b      	bge.n	801e9ba <__gethex+0x266>
 801e9a2:	eba5 0800 	sub.w	r8, r5, r0
 801e9a6:	4621      	mov	r1, r4
 801e9a8:	4648      	mov	r0, r9
 801e9aa:	4642      	mov	r2, r8
 801e9ac:	eba6 0608 	sub.w	r6, r6, r8
 801e9b0:	f001 f82a 	bl	801fa08 <__lshift>
 801e9b4:	4604      	mov	r4, r0
 801e9b6:	f100 0a14 	add.w	sl, r0, #20
 801e9ba:	f04f 0b00 	mov.w	fp, #0
 801e9be:	e7ba      	b.n	801e936 <__gethex+0x1e2>
 801e9c0:	687b      	ldr	r3, [r7, #4]
 801e9c2:	42b3      	cmp	r3, r6
 801e9c4:	dd74      	ble.n	801eab0 <__gethex+0x35c>
 801e9c6:	1b9e      	subs	r6, r3, r6
 801e9c8:	42b5      	cmp	r5, r6
 801e9ca:	dc35      	bgt.n	801ea38 <__gethex+0x2e4>
 801e9cc:	68fb      	ldr	r3, [r7, #12]
 801e9ce:	2b02      	cmp	r3, #2
 801e9d0:	d023      	beq.n	801ea1a <__gethex+0x2c6>
 801e9d2:	2b03      	cmp	r3, #3
 801e9d4:	d025      	beq.n	801ea22 <__gethex+0x2ce>
 801e9d6:	2b01      	cmp	r3, #1
 801e9d8:	d115      	bne.n	801ea06 <__gethex+0x2b2>
 801e9da:	42b5      	cmp	r5, r6
 801e9dc:	d113      	bne.n	801ea06 <__gethex+0x2b2>
 801e9de:	2d01      	cmp	r5, #1
 801e9e0:	d10b      	bne.n	801e9fa <__gethex+0x2a6>
 801e9e2:	687b      	ldr	r3, [r7, #4]
 801e9e4:	f04f 0862 	mov.w	r8, #98	; 0x62
 801e9e8:	9a02      	ldr	r2, [sp, #8]
 801e9ea:	6013      	str	r3, [r2, #0]
 801e9ec:	2301      	movs	r3, #1
 801e9ee:	6123      	str	r3, [r4, #16]
 801e9f0:	f8ca 3000 	str.w	r3, [sl]
 801e9f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e9f6:	601c      	str	r4, [r3, #0]
 801e9f8:	e735      	b.n	801e866 <__gethex+0x112>
 801e9fa:	1e69      	subs	r1, r5, #1
 801e9fc:	4620      	mov	r0, r4
 801e9fe:	f001 fa3f 	bl	801fe80 <__any_on>
 801ea02:	2800      	cmp	r0, #0
 801ea04:	d1ed      	bne.n	801e9e2 <__gethex+0x28e>
 801ea06:	4621      	mov	r1, r4
 801ea08:	4648      	mov	r0, r9
 801ea0a:	f000 fde1 	bl	801f5d0 <_Bfree>
 801ea0e:	2300      	movs	r3, #0
 801ea10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ea12:	f04f 0850 	mov.w	r8, #80	; 0x50
 801ea16:	6013      	str	r3, [r2, #0]
 801ea18:	e725      	b.n	801e866 <__gethex+0x112>
 801ea1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ea1c:	2b00      	cmp	r3, #0
 801ea1e:	d1f2      	bne.n	801ea06 <__gethex+0x2b2>
 801ea20:	e7df      	b.n	801e9e2 <__gethex+0x28e>
 801ea22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ea24:	2b00      	cmp	r3, #0
 801ea26:	d1dc      	bne.n	801e9e2 <__gethex+0x28e>
 801ea28:	e7ed      	b.n	801ea06 <__gethex+0x2b2>
 801ea2a:	bf00      	nop
 801ea2c:	08038485 	.word	0x08038485
 801ea30:	0803865d 	.word	0x0803865d
 801ea34:	0803866e 	.word	0x0803866e
 801ea38:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 801ea3c:	f1bb 0f00 	cmp.w	fp, #0
 801ea40:	d133      	bne.n	801eaaa <__gethex+0x356>
 801ea42:	f1b8 0f00 	cmp.w	r8, #0
 801ea46:	d004      	beq.n	801ea52 <__gethex+0x2fe>
 801ea48:	4641      	mov	r1, r8
 801ea4a:	4620      	mov	r0, r4
 801ea4c:	f001 fa18 	bl	801fe80 <__any_on>
 801ea50:	4683      	mov	fp, r0
 801ea52:	ea4f 1268 	mov.w	r2, r8, asr #5
 801ea56:	2301      	movs	r3, #1
 801ea58:	f008 081f 	and.w	r8, r8, #31
 801ea5c:	4631      	mov	r1, r6
 801ea5e:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801ea62:	4620      	mov	r0, r4
 801ea64:	fa03 f308 	lsl.w	r3, r3, r8
 801ea68:	1bad      	subs	r5, r5, r6
 801ea6a:	f04f 0802 	mov.w	r8, #2
 801ea6e:	4213      	tst	r3, r2
 801ea70:	bf18      	it	ne
 801ea72:	f04b 0b02 	orrne.w	fp, fp, #2
 801ea76:	f7ff fe07 	bl	801e688 <rshift>
 801ea7a:	687e      	ldr	r6, [r7, #4]
 801ea7c:	f1bb 0f00 	cmp.w	fp, #0
 801ea80:	d04a      	beq.n	801eb18 <__gethex+0x3c4>
 801ea82:	68fb      	ldr	r3, [r7, #12]
 801ea84:	2b02      	cmp	r3, #2
 801ea86:	d016      	beq.n	801eab6 <__gethex+0x362>
 801ea88:	2b03      	cmp	r3, #3
 801ea8a:	d018      	beq.n	801eabe <__gethex+0x36a>
 801ea8c:	2b01      	cmp	r3, #1
 801ea8e:	d109      	bne.n	801eaa4 <__gethex+0x350>
 801ea90:	f01b 0f02 	tst.w	fp, #2
 801ea94:	d006      	beq.n	801eaa4 <__gethex+0x350>
 801ea96:	f8da 3000 	ldr.w	r3, [sl]
 801ea9a:	ea4b 0b03 	orr.w	fp, fp, r3
 801ea9e:	f01b 0f01 	tst.w	fp, #1
 801eaa2:	d10f      	bne.n	801eac4 <__gethex+0x370>
 801eaa4:	f048 0810 	orr.w	r8, r8, #16
 801eaa8:	e036      	b.n	801eb18 <__gethex+0x3c4>
 801eaaa:	f04f 0b01 	mov.w	fp, #1
 801eaae:	e7d0      	b.n	801ea52 <__gethex+0x2fe>
 801eab0:	f04f 0801 	mov.w	r8, #1
 801eab4:	e7e2      	b.n	801ea7c <__gethex+0x328>
 801eab6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801eab8:	f1c3 0301 	rsb	r3, r3, #1
 801eabc:	930f      	str	r3, [sp, #60]	; 0x3c
 801eabe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801eac0:	2b00      	cmp	r3, #0
 801eac2:	d0ef      	beq.n	801eaa4 <__gethex+0x350>
 801eac4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801eac8:	f104 0214 	add.w	r2, r4, #20
 801eacc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801ead0:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801ead4:	9301      	str	r3, [sp, #4]
 801ead6:	2300      	movs	r3, #0
 801ead8:	4694      	mov	ip, r2
 801eada:	f852 1b04 	ldr.w	r1, [r2], #4
 801eade:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 801eae2:	d01e      	beq.n	801eb22 <__gethex+0x3ce>
 801eae4:	3101      	adds	r1, #1
 801eae6:	f8cc 1000 	str.w	r1, [ip]
 801eaea:	f1b8 0f02 	cmp.w	r8, #2
 801eaee:	f104 0214 	add.w	r2, r4, #20
 801eaf2:	d13d      	bne.n	801eb70 <__gethex+0x41c>
 801eaf4:	683b      	ldr	r3, [r7, #0]
 801eaf6:	3b01      	subs	r3, #1
 801eaf8:	42ab      	cmp	r3, r5
 801eafa:	d10b      	bne.n	801eb14 <__gethex+0x3c0>
 801eafc:	1169      	asrs	r1, r5, #5
 801eafe:	2301      	movs	r3, #1
 801eb00:	f005 051f 	and.w	r5, r5, #31
 801eb04:	fa03 f505 	lsl.w	r5, r3, r5
 801eb08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801eb0c:	421d      	tst	r5, r3
 801eb0e:	bf18      	it	ne
 801eb10:	f04f 0801 	movne.w	r8, #1
 801eb14:	f048 0820 	orr.w	r8, r8, #32
 801eb18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801eb1a:	601c      	str	r4, [r3, #0]
 801eb1c:	9b02      	ldr	r3, [sp, #8]
 801eb1e:	601e      	str	r6, [r3, #0]
 801eb20:	e6a1      	b.n	801e866 <__gethex+0x112>
 801eb22:	4290      	cmp	r0, r2
 801eb24:	f842 3c04 	str.w	r3, [r2, #-4]
 801eb28:	d8d6      	bhi.n	801ead8 <__gethex+0x384>
 801eb2a:	68a2      	ldr	r2, [r4, #8]
 801eb2c:	4593      	cmp	fp, r2
 801eb2e:	db17      	blt.n	801eb60 <__gethex+0x40c>
 801eb30:	6861      	ldr	r1, [r4, #4]
 801eb32:	4648      	mov	r0, r9
 801eb34:	3101      	adds	r1, #1
 801eb36:	f000 fd0b 	bl	801f550 <_Balloc>
 801eb3a:	4682      	mov	sl, r0
 801eb3c:	b918      	cbnz	r0, 801eb46 <__gethex+0x3f2>
 801eb3e:	4b1b      	ldr	r3, [pc, #108]	; (801ebac <__gethex+0x458>)
 801eb40:	4602      	mov	r2, r0
 801eb42:	2184      	movs	r1, #132	; 0x84
 801eb44:	e6b2      	b.n	801e8ac <__gethex+0x158>
 801eb46:	6922      	ldr	r2, [r4, #16]
 801eb48:	f104 010c 	add.w	r1, r4, #12
 801eb4c:	300c      	adds	r0, #12
 801eb4e:	3202      	adds	r2, #2
 801eb50:	0092      	lsls	r2, r2, #2
 801eb52:	f7fe fefc 	bl	801d94e <memcpy>
 801eb56:	4621      	mov	r1, r4
 801eb58:	4654      	mov	r4, sl
 801eb5a:	4648      	mov	r0, r9
 801eb5c:	f000 fd38 	bl	801f5d0 <_Bfree>
 801eb60:	6922      	ldr	r2, [r4, #16]
 801eb62:	1c51      	adds	r1, r2, #1
 801eb64:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801eb68:	6121      	str	r1, [r4, #16]
 801eb6a:	2101      	movs	r1, #1
 801eb6c:	6151      	str	r1, [r2, #20]
 801eb6e:	e7bc      	b.n	801eaea <__gethex+0x396>
 801eb70:	6921      	ldr	r1, [r4, #16]
 801eb72:	4559      	cmp	r1, fp
 801eb74:	dd0b      	ble.n	801eb8e <__gethex+0x43a>
 801eb76:	2101      	movs	r1, #1
 801eb78:	4620      	mov	r0, r4
 801eb7a:	f7ff fd85 	bl	801e688 <rshift>
 801eb7e:	3601      	adds	r6, #1
 801eb80:	68bb      	ldr	r3, [r7, #8]
 801eb82:	42b3      	cmp	r3, r6
 801eb84:	f6ff aeda 	blt.w	801e93c <__gethex+0x1e8>
 801eb88:	f04f 0801 	mov.w	r8, #1
 801eb8c:	e7c2      	b.n	801eb14 <__gethex+0x3c0>
 801eb8e:	f015 051f 	ands.w	r5, r5, #31
 801eb92:	d0f9      	beq.n	801eb88 <__gethex+0x434>
 801eb94:	9b01      	ldr	r3, [sp, #4]
 801eb96:	f1c5 0520 	rsb	r5, r5, #32
 801eb9a:	441a      	add	r2, r3
 801eb9c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801eba0:	f000 fdca 	bl	801f738 <__hi0bits>
 801eba4:	42a8      	cmp	r0, r5
 801eba6:	dbe6      	blt.n	801eb76 <__gethex+0x422>
 801eba8:	e7ee      	b.n	801eb88 <__gethex+0x434>
 801ebaa:	bf00      	nop
 801ebac:	0803865d 	.word	0x0803865d

0801ebb0 <L_shift>:
 801ebb0:	f1c2 0208 	rsb	r2, r2, #8
 801ebb4:	0092      	lsls	r2, r2, #2
 801ebb6:	b570      	push	{r4, r5, r6, lr}
 801ebb8:	f1c2 0620 	rsb	r6, r2, #32
 801ebbc:	6843      	ldr	r3, [r0, #4]
 801ebbe:	6804      	ldr	r4, [r0, #0]
 801ebc0:	fa03 f506 	lsl.w	r5, r3, r6
 801ebc4:	40d3      	lsrs	r3, r2
 801ebc6:	432c      	orrs	r4, r5
 801ebc8:	6004      	str	r4, [r0, #0]
 801ebca:	f840 3f04 	str.w	r3, [r0, #4]!
 801ebce:	4288      	cmp	r0, r1
 801ebd0:	d3f4      	bcc.n	801ebbc <L_shift+0xc>
 801ebd2:	bd70      	pop	{r4, r5, r6, pc}

0801ebd4 <__match>:
 801ebd4:	6803      	ldr	r3, [r0, #0]
 801ebd6:	3301      	adds	r3, #1
 801ebd8:	b530      	push	{r4, r5, lr}
 801ebda:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ebde:	b914      	cbnz	r4, 801ebe6 <__match+0x12>
 801ebe0:	6003      	str	r3, [r0, #0]
 801ebe2:	2001      	movs	r0, #1
 801ebe4:	bd30      	pop	{r4, r5, pc}
 801ebe6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ebea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801ebee:	2d19      	cmp	r5, #25
 801ebf0:	bf98      	it	ls
 801ebf2:	3220      	addls	r2, #32
 801ebf4:	42a2      	cmp	r2, r4
 801ebf6:	d0f0      	beq.n	801ebda <__match+0x6>
 801ebf8:	2000      	movs	r0, #0
 801ebfa:	e7f3      	b.n	801ebe4 <__match+0x10>

0801ebfc <__hexnan>:
 801ebfc:	680b      	ldr	r3, [r1, #0]
 801ebfe:	6801      	ldr	r1, [r0, #0]
 801ec00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec04:	115e      	asrs	r6, r3, #5
 801ec06:	f013 031f 	ands.w	r3, r3, #31
 801ec0a:	f04f 0500 	mov.w	r5, #0
 801ec0e:	b087      	sub	sp, #28
 801ec10:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801ec14:	4682      	mov	sl, r0
 801ec16:	4690      	mov	r8, r2
 801ec18:	46ab      	mov	fp, r5
 801ec1a:	bf18      	it	ne
 801ec1c:	3604      	addne	r6, #4
 801ec1e:	9301      	str	r3, [sp, #4]
 801ec20:	9502      	str	r5, [sp, #8]
 801ec22:	1f37      	subs	r7, r6, #4
 801ec24:	f846 5c04 	str.w	r5, [r6, #-4]
 801ec28:	46b9      	mov	r9, r7
 801ec2a:	463c      	mov	r4, r7
 801ec2c:	1c4b      	adds	r3, r1, #1
 801ec2e:	784a      	ldrb	r2, [r1, #1]
 801ec30:	9303      	str	r3, [sp, #12]
 801ec32:	b342      	cbz	r2, 801ec86 <__hexnan+0x8a>
 801ec34:	4610      	mov	r0, r2
 801ec36:	9105      	str	r1, [sp, #20]
 801ec38:	9204      	str	r2, [sp, #16]
 801ec3a:	f7ff fd76 	bl	801e72a <__hexdig_fun>
 801ec3e:	2800      	cmp	r0, #0
 801ec40:	d14f      	bne.n	801ece2 <__hexnan+0xe6>
 801ec42:	9a04      	ldr	r2, [sp, #16]
 801ec44:	9905      	ldr	r1, [sp, #20]
 801ec46:	2a20      	cmp	r2, #32
 801ec48:	d818      	bhi.n	801ec7c <__hexnan+0x80>
 801ec4a:	9b02      	ldr	r3, [sp, #8]
 801ec4c:	459b      	cmp	fp, r3
 801ec4e:	dd13      	ble.n	801ec78 <__hexnan+0x7c>
 801ec50:	454c      	cmp	r4, r9
 801ec52:	d206      	bcs.n	801ec62 <__hexnan+0x66>
 801ec54:	2d07      	cmp	r5, #7
 801ec56:	dc04      	bgt.n	801ec62 <__hexnan+0x66>
 801ec58:	462a      	mov	r2, r5
 801ec5a:	4649      	mov	r1, r9
 801ec5c:	4620      	mov	r0, r4
 801ec5e:	f7ff ffa7 	bl	801ebb0 <L_shift>
 801ec62:	4544      	cmp	r4, r8
 801ec64:	d94f      	bls.n	801ed06 <__hexnan+0x10a>
 801ec66:	2300      	movs	r3, #0
 801ec68:	f1a4 0904 	sub.w	r9, r4, #4
 801ec6c:	f8cd b008 	str.w	fp, [sp, #8]
 801ec70:	f844 3c04 	str.w	r3, [r4, #-4]
 801ec74:	461d      	mov	r5, r3
 801ec76:	464c      	mov	r4, r9
 801ec78:	9903      	ldr	r1, [sp, #12]
 801ec7a:	e7d7      	b.n	801ec2c <__hexnan+0x30>
 801ec7c:	2a29      	cmp	r2, #41	; 0x29
 801ec7e:	d154      	bne.n	801ed2a <__hexnan+0x12e>
 801ec80:	3102      	adds	r1, #2
 801ec82:	f8ca 1000 	str.w	r1, [sl]
 801ec86:	f1bb 0f00 	cmp.w	fp, #0
 801ec8a:	d04e      	beq.n	801ed2a <__hexnan+0x12e>
 801ec8c:	454c      	cmp	r4, r9
 801ec8e:	d206      	bcs.n	801ec9e <__hexnan+0xa2>
 801ec90:	2d07      	cmp	r5, #7
 801ec92:	dc04      	bgt.n	801ec9e <__hexnan+0xa2>
 801ec94:	462a      	mov	r2, r5
 801ec96:	4649      	mov	r1, r9
 801ec98:	4620      	mov	r0, r4
 801ec9a:	f7ff ff89 	bl	801ebb0 <L_shift>
 801ec9e:	4544      	cmp	r4, r8
 801eca0:	d933      	bls.n	801ed0a <__hexnan+0x10e>
 801eca2:	f1a8 0204 	sub.w	r2, r8, #4
 801eca6:	4623      	mov	r3, r4
 801eca8:	f853 1b04 	ldr.w	r1, [r3], #4
 801ecac:	429f      	cmp	r7, r3
 801ecae:	f842 1f04 	str.w	r1, [r2, #4]!
 801ecb2:	d2f9      	bcs.n	801eca8 <__hexnan+0xac>
 801ecb4:	1b3b      	subs	r3, r7, r4
 801ecb6:	3e03      	subs	r6, #3
 801ecb8:	3401      	adds	r4, #1
 801ecba:	2200      	movs	r2, #0
 801ecbc:	f023 0303 	bic.w	r3, r3, #3
 801ecc0:	3304      	adds	r3, #4
 801ecc2:	42a6      	cmp	r6, r4
 801ecc4:	bf38      	it	cc
 801ecc6:	2304      	movcc	r3, #4
 801ecc8:	4443      	add	r3, r8
 801ecca:	f843 2b04 	str.w	r2, [r3], #4
 801ecce:	429f      	cmp	r7, r3
 801ecd0:	d2fb      	bcs.n	801ecca <__hexnan+0xce>
 801ecd2:	683b      	ldr	r3, [r7, #0]
 801ecd4:	b91b      	cbnz	r3, 801ecde <__hexnan+0xe2>
 801ecd6:	4547      	cmp	r7, r8
 801ecd8:	d125      	bne.n	801ed26 <__hexnan+0x12a>
 801ecda:	2301      	movs	r3, #1
 801ecdc:	603b      	str	r3, [r7, #0]
 801ecde:	2005      	movs	r0, #5
 801ece0:	e024      	b.n	801ed2c <__hexnan+0x130>
 801ece2:	3501      	adds	r5, #1
 801ece4:	f10b 0b01 	add.w	fp, fp, #1
 801ece8:	2d08      	cmp	r5, #8
 801ecea:	dd05      	ble.n	801ecf8 <__hexnan+0xfc>
 801ecec:	4544      	cmp	r4, r8
 801ecee:	d9c3      	bls.n	801ec78 <__hexnan+0x7c>
 801ecf0:	2300      	movs	r3, #0
 801ecf2:	3c04      	subs	r4, #4
 801ecf4:	2501      	movs	r5, #1
 801ecf6:	6023      	str	r3, [r4, #0]
 801ecf8:	6822      	ldr	r2, [r4, #0]
 801ecfa:	f000 000f 	and.w	r0, r0, #15
 801ecfe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801ed02:	6020      	str	r0, [r4, #0]
 801ed04:	e7b8      	b.n	801ec78 <__hexnan+0x7c>
 801ed06:	2508      	movs	r5, #8
 801ed08:	e7b6      	b.n	801ec78 <__hexnan+0x7c>
 801ed0a:	9b01      	ldr	r3, [sp, #4]
 801ed0c:	2b00      	cmp	r3, #0
 801ed0e:	d0e0      	beq.n	801ecd2 <__hexnan+0xd6>
 801ed10:	f1c3 0320 	rsb	r3, r3, #32
 801ed14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801ed18:	40da      	lsrs	r2, r3
 801ed1a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801ed1e:	4013      	ands	r3, r2
 801ed20:	f846 3c04 	str.w	r3, [r6, #-4]
 801ed24:	e7d5      	b.n	801ecd2 <__hexnan+0xd6>
 801ed26:	3f04      	subs	r7, #4
 801ed28:	e7d3      	b.n	801ecd2 <__hexnan+0xd6>
 801ed2a:	2004      	movs	r0, #4
 801ed2c:	b007      	add	sp, #28
 801ed2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ed32 <__ssputs_r>:
 801ed32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ed36:	461f      	mov	r7, r3
 801ed38:	688e      	ldr	r6, [r1, #8]
 801ed3a:	4682      	mov	sl, r0
 801ed3c:	460c      	mov	r4, r1
 801ed3e:	42be      	cmp	r6, r7
 801ed40:	4690      	mov	r8, r2
 801ed42:	680b      	ldr	r3, [r1, #0]
 801ed44:	d82c      	bhi.n	801eda0 <__ssputs_r+0x6e>
 801ed46:	898a      	ldrh	r2, [r1, #12]
 801ed48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801ed4c:	d026      	beq.n	801ed9c <__ssputs_r+0x6a>
 801ed4e:	6965      	ldr	r5, [r4, #20]
 801ed50:	6909      	ldr	r1, [r1, #16]
 801ed52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ed56:	eba3 0901 	sub.w	r9, r3, r1
 801ed5a:	1c7b      	adds	r3, r7, #1
 801ed5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801ed60:	444b      	add	r3, r9
 801ed62:	106d      	asrs	r5, r5, #1
 801ed64:	429d      	cmp	r5, r3
 801ed66:	bf38      	it	cc
 801ed68:	461d      	movcc	r5, r3
 801ed6a:	0553      	lsls	r3, r2, #21
 801ed6c:	d527      	bpl.n	801edbe <__ssputs_r+0x8c>
 801ed6e:	4629      	mov	r1, r5
 801ed70:	f000 faa4 	bl	801f2bc <_malloc_r>
 801ed74:	4606      	mov	r6, r0
 801ed76:	b360      	cbz	r0, 801edd2 <__ssputs_r+0xa0>
 801ed78:	464a      	mov	r2, r9
 801ed7a:	6921      	ldr	r1, [r4, #16]
 801ed7c:	f7fe fde7 	bl	801d94e <memcpy>
 801ed80:	89a3      	ldrh	r3, [r4, #12]
 801ed82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801ed86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ed8a:	81a3      	strh	r3, [r4, #12]
 801ed8c:	6126      	str	r6, [r4, #16]
 801ed8e:	444e      	add	r6, r9
 801ed90:	6165      	str	r5, [r4, #20]
 801ed92:	eba5 0509 	sub.w	r5, r5, r9
 801ed96:	6026      	str	r6, [r4, #0]
 801ed98:	463e      	mov	r6, r7
 801ed9a:	60a5      	str	r5, [r4, #8]
 801ed9c:	42be      	cmp	r6, r7
 801ed9e:	d900      	bls.n	801eda2 <__ssputs_r+0x70>
 801eda0:	463e      	mov	r6, r7
 801eda2:	4632      	mov	r2, r6
 801eda4:	4641      	mov	r1, r8
 801eda6:	6820      	ldr	r0, [r4, #0]
 801eda8:	f001 fa34 	bl	8020214 <memmove>
 801edac:	68a3      	ldr	r3, [r4, #8]
 801edae:	2000      	movs	r0, #0
 801edb0:	1b9b      	subs	r3, r3, r6
 801edb2:	60a3      	str	r3, [r4, #8]
 801edb4:	6823      	ldr	r3, [r4, #0]
 801edb6:	4433      	add	r3, r6
 801edb8:	6023      	str	r3, [r4, #0]
 801edba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801edbe:	462a      	mov	r2, r5
 801edc0:	f001 f8c2 	bl	801ff48 <_realloc_r>
 801edc4:	4606      	mov	r6, r0
 801edc6:	2800      	cmp	r0, #0
 801edc8:	d1e0      	bne.n	801ed8c <__ssputs_r+0x5a>
 801edca:	6921      	ldr	r1, [r4, #16]
 801edcc:	4650      	mov	r0, sl
 801edce:	f001 fae7 	bl	80203a0 <_free_r>
 801edd2:	230c      	movs	r3, #12
 801edd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801edd8:	f8ca 3000 	str.w	r3, [sl]
 801eddc:	89a3      	ldrh	r3, [r4, #12]
 801edde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ede2:	81a3      	strh	r3, [r4, #12]
 801ede4:	e7e9      	b.n	801edba <__ssputs_r+0x88>
	...

0801ede8 <_svfiprintf_r>:
 801ede8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801edec:	4698      	mov	r8, r3
 801edee:	898b      	ldrh	r3, [r1, #12]
 801edf0:	b09d      	sub	sp, #116	; 0x74
 801edf2:	4607      	mov	r7, r0
 801edf4:	061b      	lsls	r3, r3, #24
 801edf6:	460d      	mov	r5, r1
 801edf8:	4614      	mov	r4, r2
 801edfa:	d50e      	bpl.n	801ee1a <_svfiprintf_r+0x32>
 801edfc:	690b      	ldr	r3, [r1, #16]
 801edfe:	b963      	cbnz	r3, 801ee1a <_svfiprintf_r+0x32>
 801ee00:	2140      	movs	r1, #64	; 0x40
 801ee02:	f000 fa5b 	bl	801f2bc <_malloc_r>
 801ee06:	6028      	str	r0, [r5, #0]
 801ee08:	6128      	str	r0, [r5, #16]
 801ee0a:	b920      	cbnz	r0, 801ee16 <_svfiprintf_r+0x2e>
 801ee0c:	230c      	movs	r3, #12
 801ee0e:	603b      	str	r3, [r7, #0]
 801ee10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ee14:	e0d0      	b.n	801efb8 <_svfiprintf_r+0x1d0>
 801ee16:	2340      	movs	r3, #64	; 0x40
 801ee18:	616b      	str	r3, [r5, #20]
 801ee1a:	2300      	movs	r3, #0
 801ee1c:	f8cd 800c 	str.w	r8, [sp, #12]
 801ee20:	f04f 0901 	mov.w	r9, #1
 801ee24:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801efd0 <_svfiprintf_r+0x1e8>
 801ee28:	9309      	str	r3, [sp, #36]	; 0x24
 801ee2a:	2320      	movs	r3, #32
 801ee2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ee30:	2330      	movs	r3, #48	; 0x30
 801ee32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ee36:	4623      	mov	r3, r4
 801ee38:	469a      	mov	sl, r3
 801ee3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ee3e:	b10a      	cbz	r2, 801ee44 <_svfiprintf_r+0x5c>
 801ee40:	2a25      	cmp	r2, #37	; 0x25
 801ee42:	d1f9      	bne.n	801ee38 <_svfiprintf_r+0x50>
 801ee44:	ebba 0b04 	subs.w	fp, sl, r4
 801ee48:	d00b      	beq.n	801ee62 <_svfiprintf_r+0x7a>
 801ee4a:	465b      	mov	r3, fp
 801ee4c:	4622      	mov	r2, r4
 801ee4e:	4629      	mov	r1, r5
 801ee50:	4638      	mov	r0, r7
 801ee52:	f7ff ff6e 	bl	801ed32 <__ssputs_r>
 801ee56:	3001      	adds	r0, #1
 801ee58:	f000 80a9 	beq.w	801efae <_svfiprintf_r+0x1c6>
 801ee5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ee5e:	445a      	add	r2, fp
 801ee60:	9209      	str	r2, [sp, #36]	; 0x24
 801ee62:	f89a 3000 	ldrb.w	r3, [sl]
 801ee66:	2b00      	cmp	r3, #0
 801ee68:	f000 80a1 	beq.w	801efae <_svfiprintf_r+0x1c6>
 801ee6c:	2300      	movs	r3, #0
 801ee6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801ee72:	f10a 0a01 	add.w	sl, sl, #1
 801ee76:	9304      	str	r3, [sp, #16]
 801ee78:	9307      	str	r3, [sp, #28]
 801ee7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ee7e:	931a      	str	r3, [sp, #104]	; 0x68
 801ee80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ee84:	4654      	mov	r4, sl
 801ee86:	2205      	movs	r2, #5
 801ee88:	4851      	ldr	r0, [pc, #324]	; (801efd0 <_svfiprintf_r+0x1e8>)
 801ee8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ee8e:	f7fe fd50 	bl	801d932 <memchr>
 801ee92:	9a04      	ldr	r2, [sp, #16]
 801ee94:	b9d8      	cbnz	r0, 801eece <_svfiprintf_r+0xe6>
 801ee96:	06d0      	lsls	r0, r2, #27
 801ee98:	bf44      	itt	mi
 801ee9a:	2320      	movmi	r3, #32
 801ee9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801eea0:	0711      	lsls	r1, r2, #28
 801eea2:	bf44      	itt	mi
 801eea4:	232b      	movmi	r3, #43	; 0x2b
 801eea6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801eeaa:	f89a 3000 	ldrb.w	r3, [sl]
 801eeae:	2b2a      	cmp	r3, #42	; 0x2a
 801eeb0:	d015      	beq.n	801eede <_svfiprintf_r+0xf6>
 801eeb2:	9a07      	ldr	r2, [sp, #28]
 801eeb4:	4654      	mov	r4, sl
 801eeb6:	2000      	movs	r0, #0
 801eeb8:	f04f 0c0a 	mov.w	ip, #10
 801eebc:	4621      	mov	r1, r4
 801eebe:	f811 3b01 	ldrb.w	r3, [r1], #1
 801eec2:	3b30      	subs	r3, #48	; 0x30
 801eec4:	2b09      	cmp	r3, #9
 801eec6:	d94d      	bls.n	801ef64 <_svfiprintf_r+0x17c>
 801eec8:	b1b0      	cbz	r0, 801eef8 <_svfiprintf_r+0x110>
 801eeca:	9207      	str	r2, [sp, #28]
 801eecc:	e014      	b.n	801eef8 <_svfiprintf_r+0x110>
 801eece:	eba0 0308 	sub.w	r3, r0, r8
 801eed2:	46a2      	mov	sl, r4
 801eed4:	fa09 f303 	lsl.w	r3, r9, r3
 801eed8:	4313      	orrs	r3, r2
 801eeda:	9304      	str	r3, [sp, #16]
 801eedc:	e7d2      	b.n	801ee84 <_svfiprintf_r+0x9c>
 801eede:	9b03      	ldr	r3, [sp, #12]
 801eee0:	1d19      	adds	r1, r3, #4
 801eee2:	681b      	ldr	r3, [r3, #0]
 801eee4:	2b00      	cmp	r3, #0
 801eee6:	9103      	str	r1, [sp, #12]
 801eee8:	bfbb      	ittet	lt
 801eeea:	425b      	neglt	r3, r3
 801eeec:	f042 0202 	orrlt.w	r2, r2, #2
 801eef0:	9307      	strge	r3, [sp, #28]
 801eef2:	9307      	strlt	r3, [sp, #28]
 801eef4:	bfb8      	it	lt
 801eef6:	9204      	strlt	r2, [sp, #16]
 801eef8:	7823      	ldrb	r3, [r4, #0]
 801eefa:	2b2e      	cmp	r3, #46	; 0x2e
 801eefc:	d10c      	bne.n	801ef18 <_svfiprintf_r+0x130>
 801eefe:	7863      	ldrb	r3, [r4, #1]
 801ef00:	2b2a      	cmp	r3, #42	; 0x2a
 801ef02:	d134      	bne.n	801ef6e <_svfiprintf_r+0x186>
 801ef04:	9b03      	ldr	r3, [sp, #12]
 801ef06:	3402      	adds	r4, #2
 801ef08:	1d1a      	adds	r2, r3, #4
 801ef0a:	681b      	ldr	r3, [r3, #0]
 801ef0c:	2b00      	cmp	r3, #0
 801ef0e:	9203      	str	r2, [sp, #12]
 801ef10:	bfb8      	it	lt
 801ef12:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801ef16:	9305      	str	r3, [sp, #20]
 801ef18:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801efe0 <_svfiprintf_r+0x1f8>
 801ef1c:	2203      	movs	r2, #3
 801ef1e:	7821      	ldrb	r1, [r4, #0]
 801ef20:	4650      	mov	r0, sl
 801ef22:	f7fe fd06 	bl	801d932 <memchr>
 801ef26:	b138      	cbz	r0, 801ef38 <_svfiprintf_r+0x150>
 801ef28:	eba0 000a 	sub.w	r0, r0, sl
 801ef2c:	2240      	movs	r2, #64	; 0x40
 801ef2e:	9b04      	ldr	r3, [sp, #16]
 801ef30:	3401      	adds	r4, #1
 801ef32:	4082      	lsls	r2, r0
 801ef34:	4313      	orrs	r3, r2
 801ef36:	9304      	str	r3, [sp, #16]
 801ef38:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ef3c:	2206      	movs	r2, #6
 801ef3e:	4825      	ldr	r0, [pc, #148]	; (801efd4 <_svfiprintf_r+0x1ec>)
 801ef40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ef44:	f7fe fcf5 	bl	801d932 <memchr>
 801ef48:	2800      	cmp	r0, #0
 801ef4a:	d038      	beq.n	801efbe <_svfiprintf_r+0x1d6>
 801ef4c:	4b22      	ldr	r3, [pc, #136]	; (801efd8 <_svfiprintf_r+0x1f0>)
 801ef4e:	bb1b      	cbnz	r3, 801ef98 <_svfiprintf_r+0x1b0>
 801ef50:	9b03      	ldr	r3, [sp, #12]
 801ef52:	3307      	adds	r3, #7
 801ef54:	f023 0307 	bic.w	r3, r3, #7
 801ef58:	3308      	adds	r3, #8
 801ef5a:	9303      	str	r3, [sp, #12]
 801ef5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ef5e:	4433      	add	r3, r6
 801ef60:	9309      	str	r3, [sp, #36]	; 0x24
 801ef62:	e768      	b.n	801ee36 <_svfiprintf_r+0x4e>
 801ef64:	fb0c 3202 	mla	r2, ip, r2, r3
 801ef68:	460c      	mov	r4, r1
 801ef6a:	2001      	movs	r0, #1
 801ef6c:	e7a6      	b.n	801eebc <_svfiprintf_r+0xd4>
 801ef6e:	2300      	movs	r3, #0
 801ef70:	3401      	adds	r4, #1
 801ef72:	f04f 0c0a 	mov.w	ip, #10
 801ef76:	4619      	mov	r1, r3
 801ef78:	9305      	str	r3, [sp, #20]
 801ef7a:	4620      	mov	r0, r4
 801ef7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ef80:	3a30      	subs	r2, #48	; 0x30
 801ef82:	2a09      	cmp	r2, #9
 801ef84:	d903      	bls.n	801ef8e <_svfiprintf_r+0x1a6>
 801ef86:	2b00      	cmp	r3, #0
 801ef88:	d0c6      	beq.n	801ef18 <_svfiprintf_r+0x130>
 801ef8a:	9105      	str	r1, [sp, #20]
 801ef8c:	e7c4      	b.n	801ef18 <_svfiprintf_r+0x130>
 801ef8e:	fb0c 2101 	mla	r1, ip, r1, r2
 801ef92:	4604      	mov	r4, r0
 801ef94:	2301      	movs	r3, #1
 801ef96:	e7f0      	b.n	801ef7a <_svfiprintf_r+0x192>
 801ef98:	ab03      	add	r3, sp, #12
 801ef9a:	462a      	mov	r2, r5
 801ef9c:	a904      	add	r1, sp, #16
 801ef9e:	4638      	mov	r0, r7
 801efa0:	9300      	str	r3, [sp, #0]
 801efa2:	4b0e      	ldr	r3, [pc, #56]	; (801efdc <_svfiprintf_r+0x1f4>)
 801efa4:	f7fc feae 	bl	801bd04 <_printf_float>
 801efa8:	1c42      	adds	r2, r0, #1
 801efaa:	4606      	mov	r6, r0
 801efac:	d1d6      	bne.n	801ef5c <_svfiprintf_r+0x174>
 801efae:	89ab      	ldrh	r3, [r5, #12]
 801efb0:	065b      	lsls	r3, r3, #25
 801efb2:	f53f af2d 	bmi.w	801ee10 <_svfiprintf_r+0x28>
 801efb6:	9809      	ldr	r0, [sp, #36]	; 0x24
 801efb8:	b01d      	add	sp, #116	; 0x74
 801efba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801efbe:	ab03      	add	r3, sp, #12
 801efc0:	462a      	mov	r2, r5
 801efc2:	a904      	add	r1, sp, #16
 801efc4:	4638      	mov	r0, r7
 801efc6:	9300      	str	r3, [sp, #0]
 801efc8:	4b04      	ldr	r3, [pc, #16]	; (801efdc <_svfiprintf_r+0x1f4>)
 801efca:	f7fd f943 	bl	801c254 <_printf_i>
 801efce:	e7eb      	b.n	801efa8 <_svfiprintf_r+0x1c0>
 801efd0:	080386ce 	.word	0x080386ce
 801efd4:	080386d8 	.word	0x080386d8
 801efd8:	0801bd05 	.word	0x0801bd05
 801efdc:	0801ed33 	.word	0x0801ed33
 801efe0:	080386d4 	.word	0x080386d4

0801efe4 <__sfputc_r>:
 801efe4:	6893      	ldr	r3, [r2, #8]
 801efe6:	3b01      	subs	r3, #1
 801efe8:	2b00      	cmp	r3, #0
 801efea:	6093      	str	r3, [r2, #8]
 801efec:	b410      	push	{r4}
 801efee:	da08      	bge.n	801f002 <__sfputc_r+0x1e>
 801eff0:	6994      	ldr	r4, [r2, #24]
 801eff2:	42a3      	cmp	r3, r4
 801eff4:	db01      	blt.n	801effa <__sfputc_r+0x16>
 801eff6:	290a      	cmp	r1, #10
 801eff8:	d103      	bne.n	801f002 <__sfputc_r+0x1e>
 801effa:	f85d 4b04 	ldr.w	r4, [sp], #4
 801effe:	f000 bfd2 	b.w	801ffa6 <__swbuf_r>
 801f002:	6813      	ldr	r3, [r2, #0]
 801f004:	1c58      	adds	r0, r3, #1
 801f006:	6010      	str	r0, [r2, #0]
 801f008:	4608      	mov	r0, r1
 801f00a:	7019      	strb	r1, [r3, #0]
 801f00c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f010:	4770      	bx	lr

0801f012 <__sfputs_r>:
 801f012:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f014:	4606      	mov	r6, r0
 801f016:	460f      	mov	r7, r1
 801f018:	4614      	mov	r4, r2
 801f01a:	18d5      	adds	r5, r2, r3
 801f01c:	42ac      	cmp	r4, r5
 801f01e:	d101      	bne.n	801f024 <__sfputs_r+0x12>
 801f020:	2000      	movs	r0, #0
 801f022:	e007      	b.n	801f034 <__sfputs_r+0x22>
 801f024:	463a      	mov	r2, r7
 801f026:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f02a:	4630      	mov	r0, r6
 801f02c:	f7ff ffda 	bl	801efe4 <__sfputc_r>
 801f030:	1c43      	adds	r3, r0, #1
 801f032:	d1f3      	bne.n	801f01c <__sfputs_r+0xa>
 801f034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801f038 <_vfiprintf_r>:
 801f038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f03c:	460d      	mov	r5, r1
 801f03e:	b09d      	sub	sp, #116	; 0x74
 801f040:	4614      	mov	r4, r2
 801f042:	4698      	mov	r8, r3
 801f044:	4606      	mov	r6, r0
 801f046:	b118      	cbz	r0, 801f050 <_vfiprintf_r+0x18>
 801f048:	6a03      	ldr	r3, [r0, #32]
 801f04a:	b90b      	cbnz	r3, 801f050 <_vfiprintf_r+0x18>
 801f04c:	f7fd fcde 	bl	801ca0c <__sinit>
 801f050:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f052:	07d9      	lsls	r1, r3, #31
 801f054:	d405      	bmi.n	801f062 <_vfiprintf_r+0x2a>
 801f056:	89ab      	ldrh	r3, [r5, #12]
 801f058:	059a      	lsls	r2, r3, #22
 801f05a:	d402      	bmi.n	801f062 <_vfiprintf_r+0x2a>
 801f05c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f05e:	f7fe fc66 	bl	801d92e <__retarget_lock_acquire_recursive>
 801f062:	89ab      	ldrh	r3, [r5, #12]
 801f064:	071b      	lsls	r3, r3, #28
 801f066:	d501      	bpl.n	801f06c <_vfiprintf_r+0x34>
 801f068:	692b      	ldr	r3, [r5, #16]
 801f06a:	b99b      	cbnz	r3, 801f094 <_vfiprintf_r+0x5c>
 801f06c:	4629      	mov	r1, r5
 801f06e:	4630      	mov	r0, r6
 801f070:	f000 ffd6 	bl	8020020 <__swsetup_r>
 801f074:	b170      	cbz	r0, 801f094 <_vfiprintf_r+0x5c>
 801f076:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f078:	07dc      	lsls	r4, r3, #31
 801f07a:	d504      	bpl.n	801f086 <_vfiprintf_r+0x4e>
 801f07c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f080:	b01d      	add	sp, #116	; 0x74
 801f082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f086:	89ab      	ldrh	r3, [r5, #12]
 801f088:	0598      	lsls	r0, r3, #22
 801f08a:	d4f7      	bmi.n	801f07c <_vfiprintf_r+0x44>
 801f08c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f08e:	f7fe fc4f 	bl	801d930 <__retarget_lock_release_recursive>
 801f092:	e7f3      	b.n	801f07c <_vfiprintf_r+0x44>
 801f094:	2300      	movs	r3, #0
 801f096:	f8cd 800c 	str.w	r8, [sp, #12]
 801f09a:	f04f 0901 	mov.w	r9, #1
 801f09e:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 801f258 <_vfiprintf_r+0x220>
 801f0a2:	9309      	str	r3, [sp, #36]	; 0x24
 801f0a4:	2320      	movs	r3, #32
 801f0a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f0aa:	2330      	movs	r3, #48	; 0x30
 801f0ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f0b0:	4623      	mov	r3, r4
 801f0b2:	469a      	mov	sl, r3
 801f0b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f0b8:	b10a      	cbz	r2, 801f0be <_vfiprintf_r+0x86>
 801f0ba:	2a25      	cmp	r2, #37	; 0x25
 801f0bc:	d1f9      	bne.n	801f0b2 <_vfiprintf_r+0x7a>
 801f0be:	ebba 0b04 	subs.w	fp, sl, r4
 801f0c2:	d00b      	beq.n	801f0dc <_vfiprintf_r+0xa4>
 801f0c4:	465b      	mov	r3, fp
 801f0c6:	4622      	mov	r2, r4
 801f0c8:	4629      	mov	r1, r5
 801f0ca:	4630      	mov	r0, r6
 801f0cc:	f7ff ffa1 	bl	801f012 <__sfputs_r>
 801f0d0:	3001      	adds	r0, #1
 801f0d2:	f000 80a9 	beq.w	801f228 <_vfiprintf_r+0x1f0>
 801f0d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f0d8:	445a      	add	r2, fp
 801f0da:	9209      	str	r2, [sp, #36]	; 0x24
 801f0dc:	f89a 3000 	ldrb.w	r3, [sl]
 801f0e0:	2b00      	cmp	r3, #0
 801f0e2:	f000 80a1 	beq.w	801f228 <_vfiprintf_r+0x1f0>
 801f0e6:	2300      	movs	r3, #0
 801f0e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801f0ec:	f10a 0a01 	add.w	sl, sl, #1
 801f0f0:	9304      	str	r3, [sp, #16]
 801f0f2:	9307      	str	r3, [sp, #28]
 801f0f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f0f8:	931a      	str	r3, [sp, #104]	; 0x68
 801f0fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f0fe:	4654      	mov	r4, sl
 801f100:	2205      	movs	r2, #5
 801f102:	4855      	ldr	r0, [pc, #340]	; (801f258 <_vfiprintf_r+0x220>)
 801f104:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f108:	f7fe fc13 	bl	801d932 <memchr>
 801f10c:	9a04      	ldr	r2, [sp, #16]
 801f10e:	b9d8      	cbnz	r0, 801f148 <_vfiprintf_r+0x110>
 801f110:	06d1      	lsls	r1, r2, #27
 801f112:	bf44      	itt	mi
 801f114:	2320      	movmi	r3, #32
 801f116:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f11a:	0713      	lsls	r3, r2, #28
 801f11c:	bf44      	itt	mi
 801f11e:	232b      	movmi	r3, #43	; 0x2b
 801f120:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f124:	f89a 3000 	ldrb.w	r3, [sl]
 801f128:	2b2a      	cmp	r3, #42	; 0x2a
 801f12a:	d015      	beq.n	801f158 <_vfiprintf_r+0x120>
 801f12c:	9a07      	ldr	r2, [sp, #28]
 801f12e:	4654      	mov	r4, sl
 801f130:	2000      	movs	r0, #0
 801f132:	f04f 0c0a 	mov.w	ip, #10
 801f136:	4621      	mov	r1, r4
 801f138:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f13c:	3b30      	subs	r3, #48	; 0x30
 801f13e:	2b09      	cmp	r3, #9
 801f140:	d94d      	bls.n	801f1de <_vfiprintf_r+0x1a6>
 801f142:	b1b0      	cbz	r0, 801f172 <_vfiprintf_r+0x13a>
 801f144:	9207      	str	r2, [sp, #28]
 801f146:	e014      	b.n	801f172 <_vfiprintf_r+0x13a>
 801f148:	eba0 0308 	sub.w	r3, r0, r8
 801f14c:	46a2      	mov	sl, r4
 801f14e:	fa09 f303 	lsl.w	r3, r9, r3
 801f152:	4313      	orrs	r3, r2
 801f154:	9304      	str	r3, [sp, #16]
 801f156:	e7d2      	b.n	801f0fe <_vfiprintf_r+0xc6>
 801f158:	9b03      	ldr	r3, [sp, #12]
 801f15a:	1d19      	adds	r1, r3, #4
 801f15c:	681b      	ldr	r3, [r3, #0]
 801f15e:	2b00      	cmp	r3, #0
 801f160:	9103      	str	r1, [sp, #12]
 801f162:	bfbb      	ittet	lt
 801f164:	425b      	neglt	r3, r3
 801f166:	f042 0202 	orrlt.w	r2, r2, #2
 801f16a:	9307      	strge	r3, [sp, #28]
 801f16c:	9307      	strlt	r3, [sp, #28]
 801f16e:	bfb8      	it	lt
 801f170:	9204      	strlt	r2, [sp, #16]
 801f172:	7823      	ldrb	r3, [r4, #0]
 801f174:	2b2e      	cmp	r3, #46	; 0x2e
 801f176:	d10c      	bne.n	801f192 <_vfiprintf_r+0x15a>
 801f178:	7863      	ldrb	r3, [r4, #1]
 801f17a:	2b2a      	cmp	r3, #42	; 0x2a
 801f17c:	d134      	bne.n	801f1e8 <_vfiprintf_r+0x1b0>
 801f17e:	9b03      	ldr	r3, [sp, #12]
 801f180:	3402      	adds	r4, #2
 801f182:	1d1a      	adds	r2, r3, #4
 801f184:	681b      	ldr	r3, [r3, #0]
 801f186:	2b00      	cmp	r3, #0
 801f188:	9203      	str	r2, [sp, #12]
 801f18a:	bfb8      	it	lt
 801f18c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801f190:	9305      	str	r3, [sp, #20]
 801f192:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801f268 <_vfiprintf_r+0x230>
 801f196:	2203      	movs	r2, #3
 801f198:	7821      	ldrb	r1, [r4, #0]
 801f19a:	4650      	mov	r0, sl
 801f19c:	f7fe fbc9 	bl	801d932 <memchr>
 801f1a0:	b138      	cbz	r0, 801f1b2 <_vfiprintf_r+0x17a>
 801f1a2:	eba0 000a 	sub.w	r0, r0, sl
 801f1a6:	2240      	movs	r2, #64	; 0x40
 801f1a8:	9b04      	ldr	r3, [sp, #16]
 801f1aa:	3401      	adds	r4, #1
 801f1ac:	4082      	lsls	r2, r0
 801f1ae:	4313      	orrs	r3, r2
 801f1b0:	9304      	str	r3, [sp, #16]
 801f1b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f1b6:	2206      	movs	r2, #6
 801f1b8:	4828      	ldr	r0, [pc, #160]	; (801f25c <_vfiprintf_r+0x224>)
 801f1ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f1be:	f7fe fbb8 	bl	801d932 <memchr>
 801f1c2:	2800      	cmp	r0, #0
 801f1c4:	d03f      	beq.n	801f246 <_vfiprintf_r+0x20e>
 801f1c6:	4b26      	ldr	r3, [pc, #152]	; (801f260 <_vfiprintf_r+0x228>)
 801f1c8:	bb1b      	cbnz	r3, 801f212 <_vfiprintf_r+0x1da>
 801f1ca:	9b03      	ldr	r3, [sp, #12]
 801f1cc:	3307      	adds	r3, #7
 801f1ce:	f023 0307 	bic.w	r3, r3, #7
 801f1d2:	3308      	adds	r3, #8
 801f1d4:	9303      	str	r3, [sp, #12]
 801f1d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f1d8:	443b      	add	r3, r7
 801f1da:	9309      	str	r3, [sp, #36]	; 0x24
 801f1dc:	e768      	b.n	801f0b0 <_vfiprintf_r+0x78>
 801f1de:	fb0c 3202 	mla	r2, ip, r2, r3
 801f1e2:	460c      	mov	r4, r1
 801f1e4:	2001      	movs	r0, #1
 801f1e6:	e7a6      	b.n	801f136 <_vfiprintf_r+0xfe>
 801f1e8:	2300      	movs	r3, #0
 801f1ea:	3401      	adds	r4, #1
 801f1ec:	f04f 0c0a 	mov.w	ip, #10
 801f1f0:	4619      	mov	r1, r3
 801f1f2:	9305      	str	r3, [sp, #20]
 801f1f4:	4620      	mov	r0, r4
 801f1f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f1fa:	3a30      	subs	r2, #48	; 0x30
 801f1fc:	2a09      	cmp	r2, #9
 801f1fe:	d903      	bls.n	801f208 <_vfiprintf_r+0x1d0>
 801f200:	2b00      	cmp	r3, #0
 801f202:	d0c6      	beq.n	801f192 <_vfiprintf_r+0x15a>
 801f204:	9105      	str	r1, [sp, #20]
 801f206:	e7c4      	b.n	801f192 <_vfiprintf_r+0x15a>
 801f208:	fb0c 2101 	mla	r1, ip, r1, r2
 801f20c:	4604      	mov	r4, r0
 801f20e:	2301      	movs	r3, #1
 801f210:	e7f0      	b.n	801f1f4 <_vfiprintf_r+0x1bc>
 801f212:	ab03      	add	r3, sp, #12
 801f214:	462a      	mov	r2, r5
 801f216:	a904      	add	r1, sp, #16
 801f218:	4630      	mov	r0, r6
 801f21a:	9300      	str	r3, [sp, #0]
 801f21c:	4b11      	ldr	r3, [pc, #68]	; (801f264 <_vfiprintf_r+0x22c>)
 801f21e:	f7fc fd71 	bl	801bd04 <_printf_float>
 801f222:	4607      	mov	r7, r0
 801f224:	1c78      	adds	r0, r7, #1
 801f226:	d1d6      	bne.n	801f1d6 <_vfiprintf_r+0x19e>
 801f228:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f22a:	07d9      	lsls	r1, r3, #31
 801f22c:	d405      	bmi.n	801f23a <_vfiprintf_r+0x202>
 801f22e:	89ab      	ldrh	r3, [r5, #12]
 801f230:	059a      	lsls	r2, r3, #22
 801f232:	d402      	bmi.n	801f23a <_vfiprintf_r+0x202>
 801f234:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f236:	f7fe fb7b 	bl	801d930 <__retarget_lock_release_recursive>
 801f23a:	89ab      	ldrh	r3, [r5, #12]
 801f23c:	065b      	lsls	r3, r3, #25
 801f23e:	f53f af1d 	bmi.w	801f07c <_vfiprintf_r+0x44>
 801f242:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f244:	e71c      	b.n	801f080 <_vfiprintf_r+0x48>
 801f246:	ab03      	add	r3, sp, #12
 801f248:	462a      	mov	r2, r5
 801f24a:	a904      	add	r1, sp, #16
 801f24c:	4630      	mov	r0, r6
 801f24e:	9300      	str	r3, [sp, #0]
 801f250:	4b04      	ldr	r3, [pc, #16]	; (801f264 <_vfiprintf_r+0x22c>)
 801f252:	f7fc ffff 	bl	801c254 <_printf_i>
 801f256:	e7e4      	b.n	801f222 <_vfiprintf_r+0x1ea>
 801f258:	080386ce 	.word	0x080386ce
 801f25c:	080386d8 	.word	0x080386d8
 801f260:	0801bd05 	.word	0x0801bd05
 801f264:	0801f013 	.word	0x0801f013
 801f268:	080386d4 	.word	0x080386d4

0801f26c <malloc>:
 801f26c:	4b02      	ldr	r3, [pc, #8]	; (801f278 <malloc+0xc>)
 801f26e:	4601      	mov	r1, r0
 801f270:	6818      	ldr	r0, [r3, #0]
 801f272:	f000 b823 	b.w	801f2bc <_malloc_r>
 801f276:	bf00      	nop
 801f278:	200007b0 	.word	0x200007b0

0801f27c <sbrk_aligned>:
 801f27c:	b570      	push	{r4, r5, r6, lr}
 801f27e:	4e0e      	ldr	r6, [pc, #56]	; (801f2b8 <sbrk_aligned+0x3c>)
 801f280:	460c      	mov	r4, r1
 801f282:	4605      	mov	r5, r0
 801f284:	6831      	ldr	r1, [r6, #0]
 801f286:	b911      	cbnz	r1, 801f28e <sbrk_aligned+0x12>
 801f288:	f001 f834 	bl	80202f4 <_sbrk_r>
 801f28c:	6030      	str	r0, [r6, #0]
 801f28e:	4621      	mov	r1, r4
 801f290:	4628      	mov	r0, r5
 801f292:	f001 f82f 	bl	80202f4 <_sbrk_r>
 801f296:	1c43      	adds	r3, r0, #1
 801f298:	d00a      	beq.n	801f2b0 <sbrk_aligned+0x34>
 801f29a:	1cc4      	adds	r4, r0, #3
 801f29c:	f024 0403 	bic.w	r4, r4, #3
 801f2a0:	42a0      	cmp	r0, r4
 801f2a2:	d007      	beq.n	801f2b4 <sbrk_aligned+0x38>
 801f2a4:	1a21      	subs	r1, r4, r0
 801f2a6:	4628      	mov	r0, r5
 801f2a8:	f001 f824 	bl	80202f4 <_sbrk_r>
 801f2ac:	3001      	adds	r0, #1
 801f2ae:	d101      	bne.n	801f2b4 <sbrk_aligned+0x38>
 801f2b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801f2b4:	4620      	mov	r0, r4
 801f2b6:	bd70      	pop	{r4, r5, r6, pc}
 801f2b8:	2003568c 	.word	0x2003568c

0801f2bc <_malloc_r>:
 801f2bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f2c0:	1ccd      	adds	r5, r1, #3
 801f2c2:	4607      	mov	r7, r0
 801f2c4:	f025 0503 	bic.w	r5, r5, #3
 801f2c8:	3508      	adds	r5, #8
 801f2ca:	2d0c      	cmp	r5, #12
 801f2cc:	bf38      	it	cc
 801f2ce:	250c      	movcc	r5, #12
 801f2d0:	2d00      	cmp	r5, #0
 801f2d2:	db01      	blt.n	801f2d8 <_malloc_r+0x1c>
 801f2d4:	42a9      	cmp	r1, r5
 801f2d6:	d905      	bls.n	801f2e4 <_malloc_r+0x28>
 801f2d8:	230c      	movs	r3, #12
 801f2da:	2600      	movs	r6, #0
 801f2dc:	603b      	str	r3, [r7, #0]
 801f2de:	4630      	mov	r0, r6
 801f2e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f2e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801f3b8 <_malloc_r+0xfc>
 801f2e8:	f000 f926 	bl	801f538 <__malloc_lock>
 801f2ec:	f8d8 3000 	ldr.w	r3, [r8]
 801f2f0:	461c      	mov	r4, r3
 801f2f2:	bb5c      	cbnz	r4, 801f34c <_malloc_r+0x90>
 801f2f4:	4629      	mov	r1, r5
 801f2f6:	4638      	mov	r0, r7
 801f2f8:	f7ff ffc0 	bl	801f27c <sbrk_aligned>
 801f2fc:	1c43      	adds	r3, r0, #1
 801f2fe:	4604      	mov	r4, r0
 801f300:	d155      	bne.n	801f3ae <_malloc_r+0xf2>
 801f302:	f8d8 4000 	ldr.w	r4, [r8]
 801f306:	4626      	mov	r6, r4
 801f308:	2e00      	cmp	r6, #0
 801f30a:	d145      	bne.n	801f398 <_malloc_r+0xdc>
 801f30c:	2c00      	cmp	r4, #0
 801f30e:	d048      	beq.n	801f3a2 <_malloc_r+0xe6>
 801f310:	6823      	ldr	r3, [r4, #0]
 801f312:	4631      	mov	r1, r6
 801f314:	4638      	mov	r0, r7
 801f316:	eb04 0903 	add.w	r9, r4, r3
 801f31a:	f000 ffeb 	bl	80202f4 <_sbrk_r>
 801f31e:	4581      	cmp	r9, r0
 801f320:	d13f      	bne.n	801f3a2 <_malloc_r+0xe6>
 801f322:	6821      	ldr	r1, [r4, #0]
 801f324:	4638      	mov	r0, r7
 801f326:	1a6d      	subs	r5, r5, r1
 801f328:	4629      	mov	r1, r5
 801f32a:	f7ff ffa7 	bl	801f27c <sbrk_aligned>
 801f32e:	3001      	adds	r0, #1
 801f330:	d037      	beq.n	801f3a2 <_malloc_r+0xe6>
 801f332:	6823      	ldr	r3, [r4, #0]
 801f334:	442b      	add	r3, r5
 801f336:	6023      	str	r3, [r4, #0]
 801f338:	f8d8 3000 	ldr.w	r3, [r8]
 801f33c:	2b00      	cmp	r3, #0
 801f33e:	d038      	beq.n	801f3b2 <_malloc_r+0xf6>
 801f340:	685a      	ldr	r2, [r3, #4]
 801f342:	42a2      	cmp	r2, r4
 801f344:	d12b      	bne.n	801f39e <_malloc_r+0xe2>
 801f346:	2200      	movs	r2, #0
 801f348:	605a      	str	r2, [r3, #4]
 801f34a:	e00f      	b.n	801f36c <_malloc_r+0xb0>
 801f34c:	6822      	ldr	r2, [r4, #0]
 801f34e:	1b52      	subs	r2, r2, r5
 801f350:	d41f      	bmi.n	801f392 <_malloc_r+0xd6>
 801f352:	2a0b      	cmp	r2, #11
 801f354:	d917      	bls.n	801f386 <_malloc_r+0xca>
 801f356:	1961      	adds	r1, r4, r5
 801f358:	42a3      	cmp	r3, r4
 801f35a:	6025      	str	r5, [r4, #0]
 801f35c:	bf18      	it	ne
 801f35e:	6059      	strne	r1, [r3, #4]
 801f360:	6863      	ldr	r3, [r4, #4]
 801f362:	bf08      	it	eq
 801f364:	f8c8 1000 	streq.w	r1, [r8]
 801f368:	5162      	str	r2, [r4, r5]
 801f36a:	604b      	str	r3, [r1, #4]
 801f36c:	f104 060b 	add.w	r6, r4, #11
 801f370:	4638      	mov	r0, r7
 801f372:	f000 f8e7 	bl	801f544 <__malloc_unlock>
 801f376:	1d23      	adds	r3, r4, #4
 801f378:	f026 0607 	bic.w	r6, r6, #7
 801f37c:	1af2      	subs	r2, r6, r3
 801f37e:	d0ae      	beq.n	801f2de <_malloc_r+0x22>
 801f380:	1b9b      	subs	r3, r3, r6
 801f382:	50a3      	str	r3, [r4, r2]
 801f384:	e7ab      	b.n	801f2de <_malloc_r+0x22>
 801f386:	42a3      	cmp	r3, r4
 801f388:	6862      	ldr	r2, [r4, #4]
 801f38a:	d1dd      	bne.n	801f348 <_malloc_r+0x8c>
 801f38c:	f8c8 2000 	str.w	r2, [r8]
 801f390:	e7ec      	b.n	801f36c <_malloc_r+0xb0>
 801f392:	4623      	mov	r3, r4
 801f394:	6864      	ldr	r4, [r4, #4]
 801f396:	e7ac      	b.n	801f2f2 <_malloc_r+0x36>
 801f398:	4634      	mov	r4, r6
 801f39a:	6876      	ldr	r6, [r6, #4]
 801f39c:	e7b4      	b.n	801f308 <_malloc_r+0x4c>
 801f39e:	4613      	mov	r3, r2
 801f3a0:	e7cc      	b.n	801f33c <_malloc_r+0x80>
 801f3a2:	230c      	movs	r3, #12
 801f3a4:	4638      	mov	r0, r7
 801f3a6:	603b      	str	r3, [r7, #0]
 801f3a8:	f000 f8cc 	bl	801f544 <__malloc_unlock>
 801f3ac:	e797      	b.n	801f2de <_malloc_r+0x22>
 801f3ae:	6025      	str	r5, [r4, #0]
 801f3b0:	e7dc      	b.n	801f36c <_malloc_r+0xb0>
 801f3b2:	605b      	str	r3, [r3, #4]
 801f3b4:	deff      	udf	#255	; 0xff
 801f3b6:	bf00      	nop
 801f3b8:	20035688 	.word	0x20035688

0801f3bc <__ascii_mbtowc>:
 801f3bc:	b082      	sub	sp, #8
 801f3be:	b901      	cbnz	r1, 801f3c2 <__ascii_mbtowc+0x6>
 801f3c0:	a901      	add	r1, sp, #4
 801f3c2:	b142      	cbz	r2, 801f3d6 <__ascii_mbtowc+0x1a>
 801f3c4:	b14b      	cbz	r3, 801f3da <__ascii_mbtowc+0x1e>
 801f3c6:	7813      	ldrb	r3, [r2, #0]
 801f3c8:	600b      	str	r3, [r1, #0]
 801f3ca:	7812      	ldrb	r2, [r2, #0]
 801f3cc:	1e10      	subs	r0, r2, #0
 801f3ce:	bf18      	it	ne
 801f3d0:	2001      	movne	r0, #1
 801f3d2:	b002      	add	sp, #8
 801f3d4:	4770      	bx	lr
 801f3d6:	4610      	mov	r0, r2
 801f3d8:	e7fb      	b.n	801f3d2 <__ascii_mbtowc+0x16>
 801f3da:	f06f 0001 	mvn.w	r0, #1
 801f3de:	e7f8      	b.n	801f3d2 <__ascii_mbtowc+0x16>

0801f3e0 <__sflush_r>:
 801f3e0:	898a      	ldrh	r2, [r1, #12]
 801f3e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f3e6:	4605      	mov	r5, r0
 801f3e8:	0710      	lsls	r0, r2, #28
 801f3ea:	460c      	mov	r4, r1
 801f3ec:	d458      	bmi.n	801f4a0 <__sflush_r+0xc0>
 801f3ee:	684b      	ldr	r3, [r1, #4]
 801f3f0:	2b00      	cmp	r3, #0
 801f3f2:	dc05      	bgt.n	801f400 <__sflush_r+0x20>
 801f3f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801f3f6:	2b00      	cmp	r3, #0
 801f3f8:	dc02      	bgt.n	801f400 <__sflush_r+0x20>
 801f3fa:	2000      	movs	r0, #0
 801f3fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f400:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f402:	2e00      	cmp	r6, #0
 801f404:	d0f9      	beq.n	801f3fa <__sflush_r+0x1a>
 801f406:	2300      	movs	r3, #0
 801f408:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801f40c:	682f      	ldr	r7, [r5, #0]
 801f40e:	6a21      	ldr	r1, [r4, #32]
 801f410:	602b      	str	r3, [r5, #0]
 801f412:	d032      	beq.n	801f47a <__sflush_r+0x9a>
 801f414:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801f416:	89a3      	ldrh	r3, [r4, #12]
 801f418:	075a      	lsls	r2, r3, #29
 801f41a:	d505      	bpl.n	801f428 <__sflush_r+0x48>
 801f41c:	6863      	ldr	r3, [r4, #4]
 801f41e:	1ac0      	subs	r0, r0, r3
 801f420:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f422:	b10b      	cbz	r3, 801f428 <__sflush_r+0x48>
 801f424:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801f426:	1ac0      	subs	r0, r0, r3
 801f428:	2300      	movs	r3, #0
 801f42a:	4602      	mov	r2, r0
 801f42c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f42e:	4628      	mov	r0, r5
 801f430:	6a21      	ldr	r1, [r4, #32]
 801f432:	47b0      	blx	r6
 801f434:	1c43      	adds	r3, r0, #1
 801f436:	89a3      	ldrh	r3, [r4, #12]
 801f438:	d106      	bne.n	801f448 <__sflush_r+0x68>
 801f43a:	6829      	ldr	r1, [r5, #0]
 801f43c:	291d      	cmp	r1, #29
 801f43e:	d82b      	bhi.n	801f498 <__sflush_r+0xb8>
 801f440:	4a28      	ldr	r2, [pc, #160]	; (801f4e4 <__sflush_r+0x104>)
 801f442:	410a      	asrs	r2, r1
 801f444:	07d6      	lsls	r6, r2, #31
 801f446:	d427      	bmi.n	801f498 <__sflush_r+0xb8>
 801f448:	2200      	movs	r2, #0
 801f44a:	04d9      	lsls	r1, r3, #19
 801f44c:	6062      	str	r2, [r4, #4]
 801f44e:	6922      	ldr	r2, [r4, #16]
 801f450:	6022      	str	r2, [r4, #0]
 801f452:	d504      	bpl.n	801f45e <__sflush_r+0x7e>
 801f454:	1c42      	adds	r2, r0, #1
 801f456:	d101      	bne.n	801f45c <__sflush_r+0x7c>
 801f458:	682b      	ldr	r3, [r5, #0]
 801f45a:	b903      	cbnz	r3, 801f45e <__sflush_r+0x7e>
 801f45c:	6560      	str	r0, [r4, #84]	; 0x54
 801f45e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f460:	602f      	str	r7, [r5, #0]
 801f462:	2900      	cmp	r1, #0
 801f464:	d0c9      	beq.n	801f3fa <__sflush_r+0x1a>
 801f466:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f46a:	4299      	cmp	r1, r3
 801f46c:	d002      	beq.n	801f474 <__sflush_r+0x94>
 801f46e:	4628      	mov	r0, r5
 801f470:	f000 ff96 	bl	80203a0 <_free_r>
 801f474:	2000      	movs	r0, #0
 801f476:	6360      	str	r0, [r4, #52]	; 0x34
 801f478:	e7c0      	b.n	801f3fc <__sflush_r+0x1c>
 801f47a:	2301      	movs	r3, #1
 801f47c:	4628      	mov	r0, r5
 801f47e:	47b0      	blx	r6
 801f480:	1c41      	adds	r1, r0, #1
 801f482:	d1c8      	bne.n	801f416 <__sflush_r+0x36>
 801f484:	682b      	ldr	r3, [r5, #0]
 801f486:	2b00      	cmp	r3, #0
 801f488:	d0c5      	beq.n	801f416 <__sflush_r+0x36>
 801f48a:	2b1d      	cmp	r3, #29
 801f48c:	d001      	beq.n	801f492 <__sflush_r+0xb2>
 801f48e:	2b16      	cmp	r3, #22
 801f490:	d101      	bne.n	801f496 <__sflush_r+0xb6>
 801f492:	602f      	str	r7, [r5, #0]
 801f494:	e7b1      	b.n	801f3fa <__sflush_r+0x1a>
 801f496:	89a3      	ldrh	r3, [r4, #12]
 801f498:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f49c:	81a3      	strh	r3, [r4, #12]
 801f49e:	e7ad      	b.n	801f3fc <__sflush_r+0x1c>
 801f4a0:	690f      	ldr	r7, [r1, #16]
 801f4a2:	2f00      	cmp	r7, #0
 801f4a4:	d0a9      	beq.n	801f3fa <__sflush_r+0x1a>
 801f4a6:	0793      	lsls	r3, r2, #30
 801f4a8:	680e      	ldr	r6, [r1, #0]
 801f4aa:	600f      	str	r7, [r1, #0]
 801f4ac:	bf0c      	ite	eq
 801f4ae:	694b      	ldreq	r3, [r1, #20]
 801f4b0:	2300      	movne	r3, #0
 801f4b2:	eba6 0807 	sub.w	r8, r6, r7
 801f4b6:	608b      	str	r3, [r1, #8]
 801f4b8:	f1b8 0f00 	cmp.w	r8, #0
 801f4bc:	dd9d      	ble.n	801f3fa <__sflush_r+0x1a>
 801f4be:	4643      	mov	r3, r8
 801f4c0:	463a      	mov	r2, r7
 801f4c2:	6a21      	ldr	r1, [r4, #32]
 801f4c4:	4628      	mov	r0, r5
 801f4c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801f4c8:	47b0      	blx	r6
 801f4ca:	2800      	cmp	r0, #0
 801f4cc:	dc06      	bgt.n	801f4dc <__sflush_r+0xfc>
 801f4ce:	89a3      	ldrh	r3, [r4, #12]
 801f4d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f4d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f4d8:	81a3      	strh	r3, [r4, #12]
 801f4da:	e78f      	b.n	801f3fc <__sflush_r+0x1c>
 801f4dc:	4407      	add	r7, r0
 801f4de:	eba8 0800 	sub.w	r8, r8, r0
 801f4e2:	e7e9      	b.n	801f4b8 <__sflush_r+0xd8>
 801f4e4:	dfbffffe 	.word	0xdfbffffe

0801f4e8 <_fflush_r>:
 801f4e8:	b538      	push	{r3, r4, r5, lr}
 801f4ea:	690b      	ldr	r3, [r1, #16]
 801f4ec:	4605      	mov	r5, r0
 801f4ee:	460c      	mov	r4, r1
 801f4f0:	b913      	cbnz	r3, 801f4f8 <_fflush_r+0x10>
 801f4f2:	2500      	movs	r5, #0
 801f4f4:	4628      	mov	r0, r5
 801f4f6:	bd38      	pop	{r3, r4, r5, pc}
 801f4f8:	b118      	cbz	r0, 801f502 <_fflush_r+0x1a>
 801f4fa:	6a03      	ldr	r3, [r0, #32]
 801f4fc:	b90b      	cbnz	r3, 801f502 <_fflush_r+0x1a>
 801f4fe:	f7fd fa85 	bl	801ca0c <__sinit>
 801f502:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f506:	2b00      	cmp	r3, #0
 801f508:	d0f3      	beq.n	801f4f2 <_fflush_r+0xa>
 801f50a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801f50c:	07d0      	lsls	r0, r2, #31
 801f50e:	d404      	bmi.n	801f51a <_fflush_r+0x32>
 801f510:	0599      	lsls	r1, r3, #22
 801f512:	d402      	bmi.n	801f51a <_fflush_r+0x32>
 801f514:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f516:	f7fe fa0a 	bl	801d92e <__retarget_lock_acquire_recursive>
 801f51a:	4628      	mov	r0, r5
 801f51c:	4621      	mov	r1, r4
 801f51e:	f7ff ff5f 	bl	801f3e0 <__sflush_r>
 801f522:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f524:	4605      	mov	r5, r0
 801f526:	07da      	lsls	r2, r3, #31
 801f528:	d4e4      	bmi.n	801f4f4 <_fflush_r+0xc>
 801f52a:	89a3      	ldrh	r3, [r4, #12]
 801f52c:	059b      	lsls	r3, r3, #22
 801f52e:	d4e1      	bmi.n	801f4f4 <_fflush_r+0xc>
 801f530:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f532:	f7fe f9fd 	bl	801d930 <__retarget_lock_release_recursive>
 801f536:	e7dd      	b.n	801f4f4 <_fflush_r+0xc>

0801f538 <__malloc_lock>:
 801f538:	4801      	ldr	r0, [pc, #4]	; (801f540 <__malloc_lock+0x8>)
 801f53a:	f7fe b9f8 	b.w	801d92e <__retarget_lock_acquire_recursive>
 801f53e:	bf00      	nop
 801f540:	20035684 	.word	0x20035684

0801f544 <__malloc_unlock>:
 801f544:	4801      	ldr	r0, [pc, #4]	; (801f54c <__malloc_unlock+0x8>)
 801f546:	f7fe b9f3 	b.w	801d930 <__retarget_lock_release_recursive>
 801f54a:	bf00      	nop
 801f54c:	20035684 	.word	0x20035684

0801f550 <_Balloc>:
 801f550:	b570      	push	{r4, r5, r6, lr}
 801f552:	69c6      	ldr	r6, [r0, #28]
 801f554:	4604      	mov	r4, r0
 801f556:	460d      	mov	r5, r1
 801f558:	b976      	cbnz	r6, 801f578 <_Balloc+0x28>
 801f55a:	2010      	movs	r0, #16
 801f55c:	f7ff fe86 	bl	801f26c <malloc>
 801f560:	4602      	mov	r2, r0
 801f562:	61e0      	str	r0, [r4, #28]
 801f564:	b920      	cbnz	r0, 801f570 <_Balloc+0x20>
 801f566:	4b18      	ldr	r3, [pc, #96]	; (801f5c8 <_Balloc+0x78>)
 801f568:	216b      	movs	r1, #107	; 0x6b
 801f56a:	4818      	ldr	r0, [pc, #96]	; (801f5cc <_Balloc+0x7c>)
 801f56c:	f000 fee4 	bl	8020338 <__assert_func>
 801f570:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801f574:	6006      	str	r6, [r0, #0]
 801f576:	60c6      	str	r6, [r0, #12]
 801f578:	69e6      	ldr	r6, [r4, #28]
 801f57a:	68f3      	ldr	r3, [r6, #12]
 801f57c:	b183      	cbz	r3, 801f5a0 <_Balloc+0x50>
 801f57e:	69e3      	ldr	r3, [r4, #28]
 801f580:	68db      	ldr	r3, [r3, #12]
 801f582:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801f586:	b9b8      	cbnz	r0, 801f5b8 <_Balloc+0x68>
 801f588:	2101      	movs	r1, #1
 801f58a:	4620      	mov	r0, r4
 801f58c:	fa01 f605 	lsl.w	r6, r1, r5
 801f590:	1d72      	adds	r2, r6, #5
 801f592:	0092      	lsls	r2, r2, #2
 801f594:	f000 feee 	bl	8020374 <_calloc_r>
 801f598:	b160      	cbz	r0, 801f5b4 <_Balloc+0x64>
 801f59a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801f59e:	e00e      	b.n	801f5be <_Balloc+0x6e>
 801f5a0:	2221      	movs	r2, #33	; 0x21
 801f5a2:	2104      	movs	r1, #4
 801f5a4:	4620      	mov	r0, r4
 801f5a6:	f000 fee5 	bl	8020374 <_calloc_r>
 801f5aa:	69e3      	ldr	r3, [r4, #28]
 801f5ac:	60f0      	str	r0, [r6, #12]
 801f5ae:	68db      	ldr	r3, [r3, #12]
 801f5b0:	2b00      	cmp	r3, #0
 801f5b2:	d1e4      	bne.n	801f57e <_Balloc+0x2e>
 801f5b4:	2000      	movs	r0, #0
 801f5b6:	bd70      	pop	{r4, r5, r6, pc}
 801f5b8:	6802      	ldr	r2, [r0, #0]
 801f5ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801f5be:	2300      	movs	r3, #0
 801f5c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801f5c4:	e7f7      	b.n	801f5b6 <_Balloc+0x66>
 801f5c6:	bf00      	nop
 801f5c8:	080385ee 	.word	0x080385ee
 801f5cc:	080386df 	.word	0x080386df

0801f5d0 <_Bfree>:
 801f5d0:	b570      	push	{r4, r5, r6, lr}
 801f5d2:	69c6      	ldr	r6, [r0, #28]
 801f5d4:	4605      	mov	r5, r0
 801f5d6:	460c      	mov	r4, r1
 801f5d8:	b976      	cbnz	r6, 801f5f8 <_Bfree+0x28>
 801f5da:	2010      	movs	r0, #16
 801f5dc:	f7ff fe46 	bl	801f26c <malloc>
 801f5e0:	4602      	mov	r2, r0
 801f5e2:	61e8      	str	r0, [r5, #28]
 801f5e4:	b920      	cbnz	r0, 801f5f0 <_Bfree+0x20>
 801f5e6:	4b09      	ldr	r3, [pc, #36]	; (801f60c <_Bfree+0x3c>)
 801f5e8:	218f      	movs	r1, #143	; 0x8f
 801f5ea:	4809      	ldr	r0, [pc, #36]	; (801f610 <_Bfree+0x40>)
 801f5ec:	f000 fea4 	bl	8020338 <__assert_func>
 801f5f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801f5f4:	6006      	str	r6, [r0, #0]
 801f5f6:	60c6      	str	r6, [r0, #12]
 801f5f8:	b13c      	cbz	r4, 801f60a <_Bfree+0x3a>
 801f5fa:	69eb      	ldr	r3, [r5, #28]
 801f5fc:	6862      	ldr	r2, [r4, #4]
 801f5fe:	68db      	ldr	r3, [r3, #12]
 801f600:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801f604:	6021      	str	r1, [r4, #0]
 801f606:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801f60a:	bd70      	pop	{r4, r5, r6, pc}
 801f60c:	080385ee 	.word	0x080385ee
 801f610:	080386df 	.word	0x080386df

0801f614 <__multadd>:
 801f614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f618:	f101 0c14 	add.w	ip, r1, #20
 801f61c:	4607      	mov	r7, r0
 801f61e:	460c      	mov	r4, r1
 801f620:	461e      	mov	r6, r3
 801f622:	690d      	ldr	r5, [r1, #16]
 801f624:	2000      	movs	r0, #0
 801f626:	f8dc 3000 	ldr.w	r3, [ip]
 801f62a:	3001      	adds	r0, #1
 801f62c:	b299      	uxth	r1, r3
 801f62e:	4285      	cmp	r5, r0
 801f630:	fb02 6101 	mla	r1, r2, r1, r6
 801f634:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801f638:	ea4f 4311 	mov.w	r3, r1, lsr #16
 801f63c:	b289      	uxth	r1, r1
 801f63e:	fb02 3306 	mla	r3, r2, r6, r3
 801f642:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801f646:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801f64a:	f84c 1b04 	str.w	r1, [ip], #4
 801f64e:	dcea      	bgt.n	801f626 <__multadd+0x12>
 801f650:	b30e      	cbz	r6, 801f696 <__multadd+0x82>
 801f652:	68a3      	ldr	r3, [r4, #8]
 801f654:	42ab      	cmp	r3, r5
 801f656:	dc19      	bgt.n	801f68c <__multadd+0x78>
 801f658:	6861      	ldr	r1, [r4, #4]
 801f65a:	4638      	mov	r0, r7
 801f65c:	3101      	adds	r1, #1
 801f65e:	f7ff ff77 	bl	801f550 <_Balloc>
 801f662:	4680      	mov	r8, r0
 801f664:	b928      	cbnz	r0, 801f672 <__multadd+0x5e>
 801f666:	4602      	mov	r2, r0
 801f668:	4b0c      	ldr	r3, [pc, #48]	; (801f69c <__multadd+0x88>)
 801f66a:	21ba      	movs	r1, #186	; 0xba
 801f66c:	480c      	ldr	r0, [pc, #48]	; (801f6a0 <__multadd+0x8c>)
 801f66e:	f000 fe63 	bl	8020338 <__assert_func>
 801f672:	6922      	ldr	r2, [r4, #16]
 801f674:	f104 010c 	add.w	r1, r4, #12
 801f678:	300c      	adds	r0, #12
 801f67a:	3202      	adds	r2, #2
 801f67c:	0092      	lsls	r2, r2, #2
 801f67e:	f7fe f966 	bl	801d94e <memcpy>
 801f682:	4621      	mov	r1, r4
 801f684:	4644      	mov	r4, r8
 801f686:	4638      	mov	r0, r7
 801f688:	f7ff ffa2 	bl	801f5d0 <_Bfree>
 801f68c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801f690:	3501      	adds	r5, #1
 801f692:	615e      	str	r6, [r3, #20]
 801f694:	6125      	str	r5, [r4, #16]
 801f696:	4620      	mov	r0, r4
 801f698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f69c:	0803865d 	.word	0x0803865d
 801f6a0:	080386df 	.word	0x080386df

0801f6a4 <__s2b>:
 801f6a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f6a8:	4615      	mov	r5, r2
 801f6aa:	461f      	mov	r7, r3
 801f6ac:	2209      	movs	r2, #9
 801f6ae:	3308      	adds	r3, #8
 801f6b0:	460c      	mov	r4, r1
 801f6b2:	4606      	mov	r6, r0
 801f6b4:	2100      	movs	r1, #0
 801f6b6:	fb93 f3f2 	sdiv	r3, r3, r2
 801f6ba:	2201      	movs	r2, #1
 801f6bc:	429a      	cmp	r2, r3
 801f6be:	db09      	blt.n	801f6d4 <__s2b+0x30>
 801f6c0:	4630      	mov	r0, r6
 801f6c2:	f7ff ff45 	bl	801f550 <_Balloc>
 801f6c6:	b940      	cbnz	r0, 801f6da <__s2b+0x36>
 801f6c8:	4602      	mov	r2, r0
 801f6ca:	4b19      	ldr	r3, [pc, #100]	; (801f730 <__s2b+0x8c>)
 801f6cc:	21d3      	movs	r1, #211	; 0xd3
 801f6ce:	4819      	ldr	r0, [pc, #100]	; (801f734 <__s2b+0x90>)
 801f6d0:	f000 fe32 	bl	8020338 <__assert_func>
 801f6d4:	0052      	lsls	r2, r2, #1
 801f6d6:	3101      	adds	r1, #1
 801f6d8:	e7f0      	b.n	801f6bc <__s2b+0x18>
 801f6da:	9b08      	ldr	r3, [sp, #32]
 801f6dc:	2d09      	cmp	r5, #9
 801f6de:	6143      	str	r3, [r0, #20]
 801f6e0:	f04f 0301 	mov.w	r3, #1
 801f6e4:	6103      	str	r3, [r0, #16]
 801f6e6:	dd16      	ble.n	801f716 <__s2b+0x72>
 801f6e8:	f104 0909 	add.w	r9, r4, #9
 801f6ec:	442c      	add	r4, r5
 801f6ee:	46c8      	mov	r8, r9
 801f6f0:	f818 3b01 	ldrb.w	r3, [r8], #1
 801f6f4:	4601      	mov	r1, r0
 801f6f6:	220a      	movs	r2, #10
 801f6f8:	4630      	mov	r0, r6
 801f6fa:	3b30      	subs	r3, #48	; 0x30
 801f6fc:	f7ff ff8a 	bl	801f614 <__multadd>
 801f700:	45a0      	cmp	r8, r4
 801f702:	d1f5      	bne.n	801f6f0 <__s2b+0x4c>
 801f704:	f1a5 0408 	sub.w	r4, r5, #8
 801f708:	444c      	add	r4, r9
 801f70a:	1b2d      	subs	r5, r5, r4
 801f70c:	1963      	adds	r3, r4, r5
 801f70e:	42bb      	cmp	r3, r7
 801f710:	db04      	blt.n	801f71c <__s2b+0x78>
 801f712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f716:	340a      	adds	r4, #10
 801f718:	2509      	movs	r5, #9
 801f71a:	e7f6      	b.n	801f70a <__s2b+0x66>
 801f71c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801f720:	4601      	mov	r1, r0
 801f722:	220a      	movs	r2, #10
 801f724:	4630      	mov	r0, r6
 801f726:	3b30      	subs	r3, #48	; 0x30
 801f728:	f7ff ff74 	bl	801f614 <__multadd>
 801f72c:	e7ee      	b.n	801f70c <__s2b+0x68>
 801f72e:	bf00      	nop
 801f730:	0803865d 	.word	0x0803865d
 801f734:	080386df 	.word	0x080386df

0801f738 <__hi0bits>:
 801f738:	0c03      	lsrs	r3, r0, #16
 801f73a:	041b      	lsls	r3, r3, #16
 801f73c:	b9d3      	cbnz	r3, 801f774 <__hi0bits+0x3c>
 801f73e:	0400      	lsls	r0, r0, #16
 801f740:	2310      	movs	r3, #16
 801f742:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801f746:	bf04      	itt	eq
 801f748:	0200      	lsleq	r0, r0, #8
 801f74a:	3308      	addeq	r3, #8
 801f74c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801f750:	bf04      	itt	eq
 801f752:	0100      	lsleq	r0, r0, #4
 801f754:	3304      	addeq	r3, #4
 801f756:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801f75a:	bf04      	itt	eq
 801f75c:	0080      	lsleq	r0, r0, #2
 801f75e:	3302      	addeq	r3, #2
 801f760:	2800      	cmp	r0, #0
 801f762:	db05      	blt.n	801f770 <__hi0bits+0x38>
 801f764:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801f768:	f103 0301 	add.w	r3, r3, #1
 801f76c:	bf08      	it	eq
 801f76e:	2320      	moveq	r3, #32
 801f770:	4618      	mov	r0, r3
 801f772:	4770      	bx	lr
 801f774:	2300      	movs	r3, #0
 801f776:	e7e4      	b.n	801f742 <__hi0bits+0xa>

0801f778 <__lo0bits>:
 801f778:	6803      	ldr	r3, [r0, #0]
 801f77a:	f013 0207 	ands.w	r2, r3, #7
 801f77e:	d00c      	beq.n	801f79a <__lo0bits+0x22>
 801f780:	07d9      	lsls	r1, r3, #31
 801f782:	d422      	bmi.n	801f7ca <__lo0bits+0x52>
 801f784:	079a      	lsls	r2, r3, #30
 801f786:	bf47      	ittee	mi
 801f788:	085b      	lsrmi	r3, r3, #1
 801f78a:	2201      	movmi	r2, #1
 801f78c:	089b      	lsrpl	r3, r3, #2
 801f78e:	2202      	movpl	r2, #2
 801f790:	bf4c      	ite	mi
 801f792:	6003      	strmi	r3, [r0, #0]
 801f794:	6003      	strpl	r3, [r0, #0]
 801f796:	4610      	mov	r0, r2
 801f798:	4770      	bx	lr
 801f79a:	b299      	uxth	r1, r3
 801f79c:	b909      	cbnz	r1, 801f7a2 <__lo0bits+0x2a>
 801f79e:	0c1b      	lsrs	r3, r3, #16
 801f7a0:	2210      	movs	r2, #16
 801f7a2:	b2d9      	uxtb	r1, r3
 801f7a4:	b909      	cbnz	r1, 801f7aa <__lo0bits+0x32>
 801f7a6:	3208      	adds	r2, #8
 801f7a8:	0a1b      	lsrs	r3, r3, #8
 801f7aa:	0719      	lsls	r1, r3, #28
 801f7ac:	bf04      	itt	eq
 801f7ae:	091b      	lsreq	r3, r3, #4
 801f7b0:	3204      	addeq	r2, #4
 801f7b2:	0799      	lsls	r1, r3, #30
 801f7b4:	bf04      	itt	eq
 801f7b6:	089b      	lsreq	r3, r3, #2
 801f7b8:	3202      	addeq	r2, #2
 801f7ba:	07d9      	lsls	r1, r3, #31
 801f7bc:	d403      	bmi.n	801f7c6 <__lo0bits+0x4e>
 801f7be:	085b      	lsrs	r3, r3, #1
 801f7c0:	f102 0201 	add.w	r2, r2, #1
 801f7c4:	d003      	beq.n	801f7ce <__lo0bits+0x56>
 801f7c6:	6003      	str	r3, [r0, #0]
 801f7c8:	e7e5      	b.n	801f796 <__lo0bits+0x1e>
 801f7ca:	2200      	movs	r2, #0
 801f7cc:	e7e3      	b.n	801f796 <__lo0bits+0x1e>
 801f7ce:	2220      	movs	r2, #32
 801f7d0:	e7e1      	b.n	801f796 <__lo0bits+0x1e>
	...

0801f7d4 <__i2b>:
 801f7d4:	b510      	push	{r4, lr}
 801f7d6:	460c      	mov	r4, r1
 801f7d8:	2101      	movs	r1, #1
 801f7da:	f7ff feb9 	bl	801f550 <_Balloc>
 801f7de:	4602      	mov	r2, r0
 801f7e0:	b928      	cbnz	r0, 801f7ee <__i2b+0x1a>
 801f7e2:	4b05      	ldr	r3, [pc, #20]	; (801f7f8 <__i2b+0x24>)
 801f7e4:	f240 1145 	movw	r1, #325	; 0x145
 801f7e8:	4804      	ldr	r0, [pc, #16]	; (801f7fc <__i2b+0x28>)
 801f7ea:	f000 fda5 	bl	8020338 <__assert_func>
 801f7ee:	2301      	movs	r3, #1
 801f7f0:	6144      	str	r4, [r0, #20]
 801f7f2:	6103      	str	r3, [r0, #16]
 801f7f4:	bd10      	pop	{r4, pc}
 801f7f6:	bf00      	nop
 801f7f8:	0803865d 	.word	0x0803865d
 801f7fc:	080386df 	.word	0x080386df

0801f800 <__multiply>:
 801f800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f804:	4691      	mov	r9, r2
 801f806:	690a      	ldr	r2, [r1, #16]
 801f808:	460c      	mov	r4, r1
 801f80a:	b085      	sub	sp, #20
 801f80c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801f810:	429a      	cmp	r2, r3
 801f812:	bfbe      	ittt	lt
 801f814:	460b      	movlt	r3, r1
 801f816:	464c      	movlt	r4, r9
 801f818:	4699      	movlt	r9, r3
 801f81a:	6927      	ldr	r7, [r4, #16]
 801f81c:	68a3      	ldr	r3, [r4, #8]
 801f81e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801f822:	6861      	ldr	r1, [r4, #4]
 801f824:	eb07 060a 	add.w	r6, r7, sl
 801f828:	42b3      	cmp	r3, r6
 801f82a:	bfb8      	it	lt
 801f82c:	3101      	addlt	r1, #1
 801f82e:	f7ff fe8f 	bl	801f550 <_Balloc>
 801f832:	b930      	cbnz	r0, 801f842 <__multiply+0x42>
 801f834:	4602      	mov	r2, r0
 801f836:	4b45      	ldr	r3, [pc, #276]	; (801f94c <__multiply+0x14c>)
 801f838:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801f83c:	4844      	ldr	r0, [pc, #272]	; (801f950 <__multiply+0x150>)
 801f83e:	f000 fd7b 	bl	8020338 <__assert_func>
 801f842:	f100 0514 	add.w	r5, r0, #20
 801f846:	2200      	movs	r2, #0
 801f848:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801f84c:	462b      	mov	r3, r5
 801f84e:	4543      	cmp	r3, r8
 801f850:	d321      	bcc.n	801f896 <__multiply+0x96>
 801f852:	f104 0314 	add.w	r3, r4, #20
 801f856:	f104 0115 	add.w	r1, r4, #21
 801f85a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801f85e:	f109 0314 	add.w	r3, r9, #20
 801f862:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801f866:	9202      	str	r2, [sp, #8]
 801f868:	1b3a      	subs	r2, r7, r4
 801f86a:	3a15      	subs	r2, #21
 801f86c:	f022 0203 	bic.w	r2, r2, #3
 801f870:	3204      	adds	r2, #4
 801f872:	428f      	cmp	r7, r1
 801f874:	bf38      	it	cc
 801f876:	2204      	movcc	r2, #4
 801f878:	9201      	str	r2, [sp, #4]
 801f87a:	9a02      	ldr	r2, [sp, #8]
 801f87c:	9303      	str	r3, [sp, #12]
 801f87e:	429a      	cmp	r2, r3
 801f880:	d80c      	bhi.n	801f89c <__multiply+0x9c>
 801f882:	2e00      	cmp	r6, #0
 801f884:	dd03      	ble.n	801f88e <__multiply+0x8e>
 801f886:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801f88a:	2b00      	cmp	r3, #0
 801f88c:	d05b      	beq.n	801f946 <__multiply+0x146>
 801f88e:	6106      	str	r6, [r0, #16]
 801f890:	b005      	add	sp, #20
 801f892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f896:	f843 2b04 	str.w	r2, [r3], #4
 801f89a:	e7d8      	b.n	801f84e <__multiply+0x4e>
 801f89c:	f8b3 a000 	ldrh.w	sl, [r3]
 801f8a0:	f1ba 0f00 	cmp.w	sl, #0
 801f8a4:	d024      	beq.n	801f8f0 <__multiply+0xf0>
 801f8a6:	f104 0e14 	add.w	lr, r4, #20
 801f8aa:	46a9      	mov	r9, r5
 801f8ac:	f04f 0c00 	mov.w	ip, #0
 801f8b0:	f85e 2b04 	ldr.w	r2, [lr], #4
 801f8b4:	f8d9 1000 	ldr.w	r1, [r9]
 801f8b8:	fa1f fb82 	uxth.w	fp, r2
 801f8bc:	4577      	cmp	r7, lr
 801f8be:	b289      	uxth	r1, r1
 801f8c0:	fb0a 110b 	mla	r1, sl, fp, r1
 801f8c4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801f8c8:	f8d9 2000 	ldr.w	r2, [r9]
 801f8cc:	4461      	add	r1, ip
 801f8ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801f8d2:	fb0a c20b 	mla	r2, sl, fp, ip
 801f8d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801f8da:	b289      	uxth	r1, r1
 801f8dc:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801f8e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801f8e4:	f849 1b04 	str.w	r1, [r9], #4
 801f8e8:	d8e2      	bhi.n	801f8b0 <__multiply+0xb0>
 801f8ea:	9a01      	ldr	r2, [sp, #4]
 801f8ec:	f845 c002 	str.w	ip, [r5, r2]
 801f8f0:	9a03      	ldr	r2, [sp, #12]
 801f8f2:	3304      	adds	r3, #4
 801f8f4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801f8f8:	f1b9 0f00 	cmp.w	r9, #0
 801f8fc:	d021      	beq.n	801f942 <__multiply+0x142>
 801f8fe:	6829      	ldr	r1, [r5, #0]
 801f900:	f104 0c14 	add.w	ip, r4, #20
 801f904:	46ae      	mov	lr, r5
 801f906:	f04f 0a00 	mov.w	sl, #0
 801f90a:	f8bc b000 	ldrh.w	fp, [ip]
 801f90e:	b289      	uxth	r1, r1
 801f910:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801f914:	fb09 220b 	mla	r2, r9, fp, r2
 801f918:	4452      	add	r2, sl
 801f91a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801f91e:	f84e 1b04 	str.w	r1, [lr], #4
 801f922:	f85c 1b04 	ldr.w	r1, [ip], #4
 801f926:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801f92a:	f8be 1000 	ldrh.w	r1, [lr]
 801f92e:	4567      	cmp	r7, ip
 801f930:	fb09 110a 	mla	r1, r9, sl, r1
 801f934:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801f938:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801f93c:	d8e5      	bhi.n	801f90a <__multiply+0x10a>
 801f93e:	9a01      	ldr	r2, [sp, #4]
 801f940:	50a9      	str	r1, [r5, r2]
 801f942:	3504      	adds	r5, #4
 801f944:	e799      	b.n	801f87a <__multiply+0x7a>
 801f946:	3e01      	subs	r6, #1
 801f948:	e79b      	b.n	801f882 <__multiply+0x82>
 801f94a:	bf00      	nop
 801f94c:	0803865d 	.word	0x0803865d
 801f950:	080386df 	.word	0x080386df

0801f954 <__pow5mult>:
 801f954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f958:	4615      	mov	r5, r2
 801f95a:	f012 0203 	ands.w	r2, r2, #3
 801f95e:	4606      	mov	r6, r0
 801f960:	460f      	mov	r7, r1
 801f962:	d007      	beq.n	801f974 <__pow5mult+0x20>
 801f964:	3a01      	subs	r2, #1
 801f966:	4c25      	ldr	r4, [pc, #148]	; (801f9fc <__pow5mult+0xa8>)
 801f968:	2300      	movs	r3, #0
 801f96a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801f96e:	f7ff fe51 	bl	801f614 <__multadd>
 801f972:	4607      	mov	r7, r0
 801f974:	10ad      	asrs	r5, r5, #2
 801f976:	d03d      	beq.n	801f9f4 <__pow5mult+0xa0>
 801f978:	69f4      	ldr	r4, [r6, #28]
 801f97a:	b97c      	cbnz	r4, 801f99c <__pow5mult+0x48>
 801f97c:	2010      	movs	r0, #16
 801f97e:	f7ff fc75 	bl	801f26c <malloc>
 801f982:	4602      	mov	r2, r0
 801f984:	61f0      	str	r0, [r6, #28]
 801f986:	b928      	cbnz	r0, 801f994 <__pow5mult+0x40>
 801f988:	4b1d      	ldr	r3, [pc, #116]	; (801fa00 <__pow5mult+0xac>)
 801f98a:	f240 11b3 	movw	r1, #435	; 0x1b3
 801f98e:	481d      	ldr	r0, [pc, #116]	; (801fa04 <__pow5mult+0xb0>)
 801f990:	f000 fcd2 	bl	8020338 <__assert_func>
 801f994:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801f998:	6004      	str	r4, [r0, #0]
 801f99a:	60c4      	str	r4, [r0, #12]
 801f99c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801f9a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801f9a4:	b94c      	cbnz	r4, 801f9ba <__pow5mult+0x66>
 801f9a6:	f240 2171 	movw	r1, #625	; 0x271
 801f9aa:	4630      	mov	r0, r6
 801f9ac:	f7ff ff12 	bl	801f7d4 <__i2b>
 801f9b0:	2300      	movs	r3, #0
 801f9b2:	4604      	mov	r4, r0
 801f9b4:	f8c8 0008 	str.w	r0, [r8, #8]
 801f9b8:	6003      	str	r3, [r0, #0]
 801f9ba:	f04f 0900 	mov.w	r9, #0
 801f9be:	07eb      	lsls	r3, r5, #31
 801f9c0:	d50a      	bpl.n	801f9d8 <__pow5mult+0x84>
 801f9c2:	4639      	mov	r1, r7
 801f9c4:	4622      	mov	r2, r4
 801f9c6:	4630      	mov	r0, r6
 801f9c8:	f7ff ff1a 	bl	801f800 <__multiply>
 801f9cc:	4680      	mov	r8, r0
 801f9ce:	4639      	mov	r1, r7
 801f9d0:	4630      	mov	r0, r6
 801f9d2:	4647      	mov	r7, r8
 801f9d4:	f7ff fdfc 	bl	801f5d0 <_Bfree>
 801f9d8:	106d      	asrs	r5, r5, #1
 801f9da:	d00b      	beq.n	801f9f4 <__pow5mult+0xa0>
 801f9dc:	6820      	ldr	r0, [r4, #0]
 801f9de:	b938      	cbnz	r0, 801f9f0 <__pow5mult+0x9c>
 801f9e0:	4622      	mov	r2, r4
 801f9e2:	4621      	mov	r1, r4
 801f9e4:	4630      	mov	r0, r6
 801f9e6:	f7ff ff0b 	bl	801f800 <__multiply>
 801f9ea:	6020      	str	r0, [r4, #0]
 801f9ec:	f8c0 9000 	str.w	r9, [r0]
 801f9f0:	4604      	mov	r4, r0
 801f9f2:	e7e4      	b.n	801f9be <__pow5mult+0x6a>
 801f9f4:	4638      	mov	r0, r7
 801f9f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f9fa:	bf00      	nop
 801f9fc:	08038828 	.word	0x08038828
 801fa00:	080385ee 	.word	0x080385ee
 801fa04:	080386df 	.word	0x080386df

0801fa08 <__lshift>:
 801fa08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fa0c:	460c      	mov	r4, r1
 801fa0e:	4607      	mov	r7, r0
 801fa10:	4691      	mov	r9, r2
 801fa12:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801fa16:	6923      	ldr	r3, [r4, #16]
 801fa18:	6849      	ldr	r1, [r1, #4]
 801fa1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801fa1e:	68a3      	ldr	r3, [r4, #8]
 801fa20:	f108 0601 	add.w	r6, r8, #1
 801fa24:	42b3      	cmp	r3, r6
 801fa26:	db0b      	blt.n	801fa40 <__lshift+0x38>
 801fa28:	4638      	mov	r0, r7
 801fa2a:	f7ff fd91 	bl	801f550 <_Balloc>
 801fa2e:	4605      	mov	r5, r0
 801fa30:	b948      	cbnz	r0, 801fa46 <__lshift+0x3e>
 801fa32:	4602      	mov	r2, r0
 801fa34:	4b28      	ldr	r3, [pc, #160]	; (801fad8 <__lshift+0xd0>)
 801fa36:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801fa3a:	4828      	ldr	r0, [pc, #160]	; (801fadc <__lshift+0xd4>)
 801fa3c:	f000 fc7c 	bl	8020338 <__assert_func>
 801fa40:	3101      	adds	r1, #1
 801fa42:	005b      	lsls	r3, r3, #1
 801fa44:	e7ee      	b.n	801fa24 <__lshift+0x1c>
 801fa46:	2300      	movs	r3, #0
 801fa48:	f100 0114 	add.w	r1, r0, #20
 801fa4c:	f100 0210 	add.w	r2, r0, #16
 801fa50:	4618      	mov	r0, r3
 801fa52:	4553      	cmp	r3, sl
 801fa54:	db33      	blt.n	801fabe <__lshift+0xb6>
 801fa56:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801fa5a:	f104 0314 	add.w	r3, r4, #20
 801fa5e:	6920      	ldr	r0, [r4, #16]
 801fa60:	f019 091f 	ands.w	r9, r9, #31
 801fa64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801fa68:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801fa6c:	d02b      	beq.n	801fac6 <__lshift+0xbe>
 801fa6e:	f1c9 0e20 	rsb	lr, r9, #32
 801fa72:	468a      	mov	sl, r1
 801fa74:	2200      	movs	r2, #0
 801fa76:	6818      	ldr	r0, [r3, #0]
 801fa78:	fa00 f009 	lsl.w	r0, r0, r9
 801fa7c:	4310      	orrs	r0, r2
 801fa7e:	f84a 0b04 	str.w	r0, [sl], #4
 801fa82:	f853 2b04 	ldr.w	r2, [r3], #4
 801fa86:	459c      	cmp	ip, r3
 801fa88:	fa22 f20e 	lsr.w	r2, r2, lr
 801fa8c:	d8f3      	bhi.n	801fa76 <__lshift+0x6e>
 801fa8e:	ebac 0304 	sub.w	r3, ip, r4
 801fa92:	f104 0015 	add.w	r0, r4, #21
 801fa96:	3b15      	subs	r3, #21
 801fa98:	f023 0303 	bic.w	r3, r3, #3
 801fa9c:	3304      	adds	r3, #4
 801fa9e:	4584      	cmp	ip, r0
 801faa0:	bf38      	it	cc
 801faa2:	2304      	movcc	r3, #4
 801faa4:	50ca      	str	r2, [r1, r3]
 801faa6:	b10a      	cbz	r2, 801faac <__lshift+0xa4>
 801faa8:	f108 0602 	add.w	r6, r8, #2
 801faac:	3e01      	subs	r6, #1
 801faae:	4638      	mov	r0, r7
 801fab0:	4621      	mov	r1, r4
 801fab2:	612e      	str	r6, [r5, #16]
 801fab4:	f7ff fd8c 	bl	801f5d0 <_Bfree>
 801fab8:	4628      	mov	r0, r5
 801faba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fabe:	3301      	adds	r3, #1
 801fac0:	f842 0f04 	str.w	r0, [r2, #4]!
 801fac4:	e7c5      	b.n	801fa52 <__lshift+0x4a>
 801fac6:	3904      	subs	r1, #4
 801fac8:	f853 2b04 	ldr.w	r2, [r3], #4
 801facc:	459c      	cmp	ip, r3
 801face:	f841 2f04 	str.w	r2, [r1, #4]!
 801fad2:	d8f9      	bhi.n	801fac8 <__lshift+0xc0>
 801fad4:	e7ea      	b.n	801faac <__lshift+0xa4>
 801fad6:	bf00      	nop
 801fad8:	0803865d 	.word	0x0803865d
 801fadc:	080386df 	.word	0x080386df

0801fae0 <__mcmp>:
 801fae0:	6902      	ldr	r2, [r0, #16]
 801fae2:	b530      	push	{r4, r5, lr}
 801fae4:	690c      	ldr	r4, [r1, #16]
 801fae6:	1b12      	subs	r2, r2, r4
 801fae8:	d10e      	bne.n	801fb08 <__mcmp+0x28>
 801faea:	f100 0314 	add.w	r3, r0, #20
 801faee:	3114      	adds	r1, #20
 801faf0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801faf4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801faf8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801fafc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801fb00:	42a5      	cmp	r5, r4
 801fb02:	d003      	beq.n	801fb0c <__mcmp+0x2c>
 801fb04:	d305      	bcc.n	801fb12 <__mcmp+0x32>
 801fb06:	2201      	movs	r2, #1
 801fb08:	4610      	mov	r0, r2
 801fb0a:	bd30      	pop	{r4, r5, pc}
 801fb0c:	4283      	cmp	r3, r0
 801fb0e:	d3f3      	bcc.n	801faf8 <__mcmp+0x18>
 801fb10:	e7fa      	b.n	801fb08 <__mcmp+0x28>
 801fb12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801fb16:	e7f7      	b.n	801fb08 <__mcmp+0x28>

0801fb18 <__mdiff>:
 801fb18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb1c:	460c      	mov	r4, r1
 801fb1e:	4606      	mov	r6, r0
 801fb20:	4611      	mov	r1, r2
 801fb22:	4692      	mov	sl, r2
 801fb24:	4620      	mov	r0, r4
 801fb26:	f7ff ffdb 	bl	801fae0 <__mcmp>
 801fb2a:	1e05      	subs	r5, r0, #0
 801fb2c:	d110      	bne.n	801fb50 <__mdiff+0x38>
 801fb2e:	4629      	mov	r1, r5
 801fb30:	4630      	mov	r0, r6
 801fb32:	f7ff fd0d 	bl	801f550 <_Balloc>
 801fb36:	b930      	cbnz	r0, 801fb46 <__mdiff+0x2e>
 801fb38:	4b3d      	ldr	r3, [pc, #244]	; (801fc30 <__mdiff+0x118>)
 801fb3a:	4602      	mov	r2, r0
 801fb3c:	f240 2137 	movw	r1, #567	; 0x237
 801fb40:	483c      	ldr	r0, [pc, #240]	; (801fc34 <__mdiff+0x11c>)
 801fb42:	f000 fbf9 	bl	8020338 <__assert_func>
 801fb46:	2301      	movs	r3, #1
 801fb48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801fb4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb50:	bfa4      	itt	ge
 801fb52:	4653      	movge	r3, sl
 801fb54:	46a2      	movge	sl, r4
 801fb56:	4630      	mov	r0, r6
 801fb58:	bfa8      	it	ge
 801fb5a:	2500      	movge	r5, #0
 801fb5c:	f8da 1004 	ldr.w	r1, [sl, #4]
 801fb60:	bfac      	ite	ge
 801fb62:	461c      	movge	r4, r3
 801fb64:	2501      	movlt	r5, #1
 801fb66:	f7ff fcf3 	bl	801f550 <_Balloc>
 801fb6a:	b920      	cbnz	r0, 801fb76 <__mdiff+0x5e>
 801fb6c:	4b30      	ldr	r3, [pc, #192]	; (801fc30 <__mdiff+0x118>)
 801fb6e:	4602      	mov	r2, r0
 801fb70:	f240 2145 	movw	r1, #581	; 0x245
 801fb74:	e7e4      	b.n	801fb40 <__mdiff+0x28>
 801fb76:	f8da 7010 	ldr.w	r7, [sl, #16]
 801fb7a:	f104 0914 	add.w	r9, r4, #20
 801fb7e:	6926      	ldr	r6, [r4, #16]
 801fb80:	f100 0814 	add.w	r8, r0, #20
 801fb84:	60c5      	str	r5, [r0, #12]
 801fb86:	f10a 0514 	add.w	r5, sl, #20
 801fb8a:	f10a 0210 	add.w	r2, sl, #16
 801fb8e:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801fb92:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 801fb96:	46c2      	mov	sl, r8
 801fb98:	f04f 0c00 	mov.w	ip, #0
 801fb9c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801fba0:	f859 3b04 	ldr.w	r3, [r9], #4
 801fba4:	fa1f f18b 	uxth.w	r1, fp
 801fba8:	454e      	cmp	r6, r9
 801fbaa:	4461      	add	r1, ip
 801fbac:	fa1f fc83 	uxth.w	ip, r3
 801fbb0:	ea4f 4313 	mov.w	r3, r3, lsr #16
 801fbb4:	eba1 010c 	sub.w	r1, r1, ip
 801fbb8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801fbbc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801fbc0:	b289      	uxth	r1, r1
 801fbc2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 801fbc6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 801fbca:	f84a 1b04 	str.w	r1, [sl], #4
 801fbce:	d8e5      	bhi.n	801fb9c <__mdiff+0x84>
 801fbd0:	1b33      	subs	r3, r6, r4
 801fbd2:	3415      	adds	r4, #21
 801fbd4:	3b15      	subs	r3, #21
 801fbd6:	f023 0303 	bic.w	r3, r3, #3
 801fbda:	3304      	adds	r3, #4
 801fbdc:	42a6      	cmp	r6, r4
 801fbde:	bf38      	it	cc
 801fbe0:	2304      	movcc	r3, #4
 801fbe2:	441d      	add	r5, r3
 801fbe4:	4443      	add	r3, r8
 801fbe6:	462c      	mov	r4, r5
 801fbe8:	461e      	mov	r6, r3
 801fbea:	4574      	cmp	r4, lr
 801fbec:	d30e      	bcc.n	801fc0c <__mdiff+0xf4>
 801fbee:	f10e 0203 	add.w	r2, lr, #3
 801fbf2:	1b52      	subs	r2, r2, r5
 801fbf4:	3d03      	subs	r5, #3
 801fbf6:	f022 0203 	bic.w	r2, r2, #3
 801fbfa:	45ae      	cmp	lr, r5
 801fbfc:	bf38      	it	cc
 801fbfe:	2200      	movcc	r2, #0
 801fc00:	4413      	add	r3, r2
 801fc02:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801fc06:	b18a      	cbz	r2, 801fc2c <__mdiff+0x114>
 801fc08:	6107      	str	r7, [r0, #16]
 801fc0a:	e79f      	b.n	801fb4c <__mdiff+0x34>
 801fc0c:	f854 8b04 	ldr.w	r8, [r4], #4
 801fc10:	fa1f f288 	uxth.w	r2, r8
 801fc14:	4462      	add	r2, ip
 801fc16:	1411      	asrs	r1, r2, #16
 801fc18:	b292      	uxth	r2, r2
 801fc1a:	eb01 4118 	add.w	r1, r1, r8, lsr #16
 801fc1e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801fc22:	ea4f 4c21 	mov.w	ip, r1, asr #16
 801fc26:	f846 2b04 	str.w	r2, [r6], #4
 801fc2a:	e7de      	b.n	801fbea <__mdiff+0xd2>
 801fc2c:	3f01      	subs	r7, #1
 801fc2e:	e7e8      	b.n	801fc02 <__mdiff+0xea>
 801fc30:	0803865d 	.word	0x0803865d
 801fc34:	080386df 	.word	0x080386df

0801fc38 <__ulp>:
 801fc38:	b082      	sub	sp, #8
 801fc3a:	4b11      	ldr	r3, [pc, #68]	; (801fc80 <__ulp+0x48>)
 801fc3c:	ed8d 0b00 	vstr	d0, [sp]
 801fc40:	9a01      	ldr	r2, [sp, #4]
 801fc42:	4013      	ands	r3, r2
 801fc44:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801fc48:	2b00      	cmp	r3, #0
 801fc4a:	dc08      	bgt.n	801fc5e <__ulp+0x26>
 801fc4c:	425b      	negs	r3, r3
 801fc4e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801fc52:	ea4f 5223 	mov.w	r2, r3, asr #20
 801fc56:	da04      	bge.n	801fc62 <__ulp+0x2a>
 801fc58:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801fc5c:	4113      	asrs	r3, r2
 801fc5e:	2200      	movs	r2, #0
 801fc60:	e008      	b.n	801fc74 <__ulp+0x3c>
 801fc62:	f1a2 0314 	sub.w	r3, r2, #20
 801fc66:	2b1e      	cmp	r3, #30
 801fc68:	bfd6      	itet	le
 801fc6a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801fc6e:	2201      	movgt	r2, #1
 801fc70:	40da      	lsrle	r2, r3
 801fc72:	2300      	movs	r3, #0
 801fc74:	4619      	mov	r1, r3
 801fc76:	4610      	mov	r0, r2
 801fc78:	ec41 0b10 	vmov	d0, r0, r1
 801fc7c:	b002      	add	sp, #8
 801fc7e:	4770      	bx	lr
 801fc80:	7ff00000 	.word	0x7ff00000

0801fc84 <__b2d>:
 801fc84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fc88:	6906      	ldr	r6, [r0, #16]
 801fc8a:	f100 0814 	add.w	r8, r0, #20
 801fc8e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801fc92:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801fc96:	1f37      	subs	r7, r6, #4
 801fc98:	4610      	mov	r0, r2
 801fc9a:	f7ff fd4d 	bl	801f738 <__hi0bits>
 801fc9e:	f1c0 0320 	rsb	r3, r0, #32
 801fca2:	280a      	cmp	r0, #10
 801fca4:	600b      	str	r3, [r1, #0]
 801fca6:	491d      	ldr	r1, [pc, #116]	; (801fd1c <__b2d+0x98>)
 801fca8:	dc16      	bgt.n	801fcd8 <__b2d+0x54>
 801fcaa:	f1c0 0c0b 	rsb	ip, r0, #11
 801fcae:	45b8      	cmp	r8, r7
 801fcb0:	f100 0015 	add.w	r0, r0, #21
 801fcb4:	fa22 f30c 	lsr.w	r3, r2, ip
 801fcb8:	fa02 f000 	lsl.w	r0, r2, r0
 801fcbc:	ea43 0501 	orr.w	r5, r3, r1
 801fcc0:	bf34      	ite	cc
 801fcc2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801fcc6:	2300      	movcs	r3, #0
 801fcc8:	fa23 f30c 	lsr.w	r3, r3, ip
 801fccc:	4303      	orrs	r3, r0
 801fcce:	461c      	mov	r4, r3
 801fcd0:	ec45 4b10 	vmov	d0, r4, r5
 801fcd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fcd8:	45b8      	cmp	r8, r7
 801fcda:	bf3a      	itte	cc
 801fcdc:	f1a6 0708 	subcc.w	r7, r6, #8
 801fce0:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801fce4:	2300      	movcs	r3, #0
 801fce6:	380b      	subs	r0, #11
 801fce8:	d014      	beq.n	801fd14 <__b2d+0x90>
 801fcea:	f1c0 0120 	rsb	r1, r0, #32
 801fcee:	4082      	lsls	r2, r0
 801fcf0:	4547      	cmp	r7, r8
 801fcf2:	fa23 f401 	lsr.w	r4, r3, r1
 801fcf6:	fa03 f300 	lsl.w	r3, r3, r0
 801fcfa:	ea42 0204 	orr.w	r2, r2, r4
 801fcfe:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801fd02:	bf8c      	ite	hi
 801fd04:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801fd08:	2200      	movls	r2, #0
 801fd0a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801fd0e:	40ca      	lsrs	r2, r1
 801fd10:	4313      	orrs	r3, r2
 801fd12:	e7dc      	b.n	801fcce <__b2d+0x4a>
 801fd14:	ea42 0501 	orr.w	r5, r2, r1
 801fd18:	e7d9      	b.n	801fcce <__b2d+0x4a>
 801fd1a:	bf00      	nop
 801fd1c:	3ff00000 	.word	0x3ff00000

0801fd20 <__d2b>:
 801fd20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801fd24:	460f      	mov	r7, r1
 801fd26:	2101      	movs	r1, #1
 801fd28:	4616      	mov	r6, r2
 801fd2a:	ec59 8b10 	vmov	r8, r9, d0
 801fd2e:	f7ff fc0f 	bl	801f550 <_Balloc>
 801fd32:	4604      	mov	r4, r0
 801fd34:	b930      	cbnz	r0, 801fd44 <__d2b+0x24>
 801fd36:	4602      	mov	r2, r0
 801fd38:	4b24      	ldr	r3, [pc, #144]	; (801fdcc <__d2b+0xac>)
 801fd3a:	f240 310f 	movw	r1, #783	; 0x30f
 801fd3e:	4824      	ldr	r0, [pc, #144]	; (801fdd0 <__d2b+0xb0>)
 801fd40:	f000 fafa 	bl	8020338 <__assert_func>
 801fd44:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801fd48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801fd4c:	bb2d      	cbnz	r5, 801fd9a <__d2b+0x7a>
 801fd4e:	9301      	str	r3, [sp, #4]
 801fd50:	f1b8 0300 	subs.w	r3, r8, #0
 801fd54:	d026      	beq.n	801fda4 <__d2b+0x84>
 801fd56:	4668      	mov	r0, sp
 801fd58:	9300      	str	r3, [sp, #0]
 801fd5a:	f7ff fd0d 	bl	801f778 <__lo0bits>
 801fd5e:	e9dd 1200 	ldrd	r1, r2, [sp]
 801fd62:	b1e8      	cbz	r0, 801fda0 <__d2b+0x80>
 801fd64:	f1c0 0320 	rsb	r3, r0, #32
 801fd68:	fa02 f303 	lsl.w	r3, r2, r3
 801fd6c:	40c2      	lsrs	r2, r0
 801fd6e:	430b      	orrs	r3, r1
 801fd70:	9201      	str	r2, [sp, #4]
 801fd72:	6163      	str	r3, [r4, #20]
 801fd74:	9b01      	ldr	r3, [sp, #4]
 801fd76:	2b00      	cmp	r3, #0
 801fd78:	61a3      	str	r3, [r4, #24]
 801fd7a:	bf14      	ite	ne
 801fd7c:	2202      	movne	r2, #2
 801fd7e:	2201      	moveq	r2, #1
 801fd80:	6122      	str	r2, [r4, #16]
 801fd82:	b1bd      	cbz	r5, 801fdb4 <__d2b+0x94>
 801fd84:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801fd88:	4405      	add	r5, r0
 801fd8a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801fd8e:	603d      	str	r5, [r7, #0]
 801fd90:	6030      	str	r0, [r6, #0]
 801fd92:	4620      	mov	r0, r4
 801fd94:	b003      	add	sp, #12
 801fd96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fd9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801fd9e:	e7d6      	b.n	801fd4e <__d2b+0x2e>
 801fda0:	6161      	str	r1, [r4, #20]
 801fda2:	e7e7      	b.n	801fd74 <__d2b+0x54>
 801fda4:	a801      	add	r0, sp, #4
 801fda6:	f7ff fce7 	bl	801f778 <__lo0bits>
 801fdaa:	9b01      	ldr	r3, [sp, #4]
 801fdac:	3020      	adds	r0, #32
 801fdae:	2201      	movs	r2, #1
 801fdb0:	6163      	str	r3, [r4, #20]
 801fdb2:	e7e5      	b.n	801fd80 <__d2b+0x60>
 801fdb4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801fdb8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801fdbc:	6038      	str	r0, [r7, #0]
 801fdbe:	6918      	ldr	r0, [r3, #16]
 801fdc0:	f7ff fcba 	bl	801f738 <__hi0bits>
 801fdc4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801fdc8:	e7e2      	b.n	801fd90 <__d2b+0x70>
 801fdca:	bf00      	nop
 801fdcc:	0803865d 	.word	0x0803865d
 801fdd0:	080386df 	.word	0x080386df

0801fdd4 <__ratio>:
 801fdd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fdd8:	4688      	mov	r8, r1
 801fdda:	4681      	mov	r9, r0
 801fddc:	4669      	mov	r1, sp
 801fdde:	f7ff ff51 	bl	801fc84 <__b2d>
 801fde2:	a901      	add	r1, sp, #4
 801fde4:	4640      	mov	r0, r8
 801fde6:	ec55 4b10 	vmov	r4, r5, d0
 801fdea:	f7ff ff4b 	bl	801fc84 <__b2d>
 801fdee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801fdf2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801fdf6:	462f      	mov	r7, r5
 801fdf8:	eba3 0c02 	sub.w	ip, r3, r2
 801fdfc:	e9dd 3200 	ldrd	r3, r2, [sp]
 801fe00:	ec51 0b10 	vmov	r0, r1, d0
 801fe04:	1a9b      	subs	r3, r3, r2
 801fe06:	468b      	mov	fp, r1
 801fe08:	4620      	mov	r0, r4
 801fe0a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801fe0e:	2b00      	cmp	r3, #0
 801fe10:	bfd5      	itete	le
 801fe12:	460a      	movle	r2, r1
 801fe14:	462a      	movgt	r2, r5
 801fe16:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801fe1a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801fe1e:	bfd8      	it	le
 801fe20:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801fe24:	ee10 2a10 	vmov	r2, s0
 801fe28:	4639      	mov	r1, r7
 801fe2a:	465b      	mov	r3, fp
 801fe2c:	f7e0 fd12 	bl	8000854 <__aeabi_ddiv>
 801fe30:	ec41 0b10 	vmov	d0, r0, r1
 801fe34:	b003      	add	sp, #12
 801fe36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fe3a <__copybits>:
 801fe3a:	3901      	subs	r1, #1
 801fe3c:	f102 0314 	add.w	r3, r2, #20
 801fe40:	1149      	asrs	r1, r1, #5
 801fe42:	b570      	push	{r4, r5, r6, lr}
 801fe44:	3101      	adds	r1, #1
 801fe46:	6914      	ldr	r4, [r2, #16]
 801fe48:	1f05      	subs	r5, r0, #4
 801fe4a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801fe4e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801fe52:	42a3      	cmp	r3, r4
 801fe54:	d30c      	bcc.n	801fe70 <__copybits+0x36>
 801fe56:	1aa3      	subs	r3, r4, r2
 801fe58:	3211      	adds	r2, #17
 801fe5a:	3b11      	subs	r3, #17
 801fe5c:	f023 0303 	bic.w	r3, r3, #3
 801fe60:	42a2      	cmp	r2, r4
 801fe62:	bf88      	it	hi
 801fe64:	2300      	movhi	r3, #0
 801fe66:	4418      	add	r0, r3
 801fe68:	2300      	movs	r3, #0
 801fe6a:	4288      	cmp	r0, r1
 801fe6c:	d305      	bcc.n	801fe7a <__copybits+0x40>
 801fe6e:	bd70      	pop	{r4, r5, r6, pc}
 801fe70:	f853 6b04 	ldr.w	r6, [r3], #4
 801fe74:	f845 6f04 	str.w	r6, [r5, #4]!
 801fe78:	e7eb      	b.n	801fe52 <__copybits+0x18>
 801fe7a:	f840 3b04 	str.w	r3, [r0], #4
 801fe7e:	e7f4      	b.n	801fe6a <__copybits+0x30>

0801fe80 <__any_on>:
 801fe80:	f100 0214 	add.w	r2, r0, #20
 801fe84:	114b      	asrs	r3, r1, #5
 801fe86:	6900      	ldr	r0, [r0, #16]
 801fe88:	4298      	cmp	r0, r3
 801fe8a:	b510      	push	{r4, lr}
 801fe8c:	db11      	blt.n	801feb2 <__any_on+0x32>
 801fe8e:	dd0a      	ble.n	801fea6 <__any_on+0x26>
 801fe90:	f011 011f 	ands.w	r1, r1, #31
 801fe94:	d007      	beq.n	801fea6 <__any_on+0x26>
 801fe96:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801fe9a:	fa24 f001 	lsr.w	r0, r4, r1
 801fe9e:	fa00 f101 	lsl.w	r1, r0, r1
 801fea2:	428c      	cmp	r4, r1
 801fea4:	d10b      	bne.n	801febe <__any_on+0x3e>
 801fea6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801feaa:	4293      	cmp	r3, r2
 801feac:	d803      	bhi.n	801feb6 <__any_on+0x36>
 801feae:	2000      	movs	r0, #0
 801feb0:	bd10      	pop	{r4, pc}
 801feb2:	4603      	mov	r3, r0
 801feb4:	e7f7      	b.n	801fea6 <__any_on+0x26>
 801feb6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801feba:	2900      	cmp	r1, #0
 801febc:	d0f5      	beq.n	801feaa <__any_on+0x2a>
 801febe:	2001      	movs	r0, #1
 801fec0:	e7f6      	b.n	801feb0 <__any_on+0x30>

0801fec2 <__sread>:
 801fec2:	b510      	push	{r4, lr}
 801fec4:	460c      	mov	r4, r1
 801fec6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801feca:	f000 fa01 	bl	80202d0 <_read_r>
 801fece:	2800      	cmp	r0, #0
 801fed0:	bfab      	itete	ge
 801fed2:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801fed4:	89a3      	ldrhlt	r3, [r4, #12]
 801fed6:	181b      	addge	r3, r3, r0
 801fed8:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801fedc:	bfac      	ite	ge
 801fede:	6563      	strge	r3, [r4, #84]	; 0x54
 801fee0:	81a3      	strhlt	r3, [r4, #12]
 801fee2:	bd10      	pop	{r4, pc}

0801fee4 <__swrite>:
 801fee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fee8:	461f      	mov	r7, r3
 801feea:	898b      	ldrh	r3, [r1, #12]
 801feec:	4605      	mov	r5, r0
 801feee:	460c      	mov	r4, r1
 801fef0:	05db      	lsls	r3, r3, #23
 801fef2:	4616      	mov	r6, r2
 801fef4:	d505      	bpl.n	801ff02 <__swrite+0x1e>
 801fef6:	2302      	movs	r3, #2
 801fef8:	2200      	movs	r2, #0
 801fefa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fefe:	f000 f9d5 	bl	80202ac <_lseek_r>
 801ff02:	89a3      	ldrh	r3, [r4, #12]
 801ff04:	4632      	mov	r2, r6
 801ff06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ff0a:	4628      	mov	r0, r5
 801ff0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ff10:	81a3      	strh	r3, [r4, #12]
 801ff12:	463b      	mov	r3, r7
 801ff14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ff18:	f000 b9fc 	b.w	8020314 <_write_r>

0801ff1c <__sseek>:
 801ff1c:	b510      	push	{r4, lr}
 801ff1e:	460c      	mov	r4, r1
 801ff20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ff24:	f000 f9c2 	bl	80202ac <_lseek_r>
 801ff28:	1c43      	adds	r3, r0, #1
 801ff2a:	89a3      	ldrh	r3, [r4, #12]
 801ff2c:	bf15      	itete	ne
 801ff2e:	6560      	strne	r0, [r4, #84]	; 0x54
 801ff30:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ff34:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ff38:	81a3      	strheq	r3, [r4, #12]
 801ff3a:	bf18      	it	ne
 801ff3c:	81a3      	strhne	r3, [r4, #12]
 801ff3e:	bd10      	pop	{r4, pc}

0801ff40 <__sclose>:
 801ff40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ff44:	f000 b980 	b.w	8020248 <_close_r>

0801ff48 <_realloc_r>:
 801ff48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ff4c:	4680      	mov	r8, r0
 801ff4e:	4614      	mov	r4, r2
 801ff50:	460e      	mov	r6, r1
 801ff52:	b921      	cbnz	r1, 801ff5e <_realloc_r+0x16>
 801ff54:	4611      	mov	r1, r2
 801ff56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ff5a:	f7ff b9af 	b.w	801f2bc <_malloc_r>
 801ff5e:	b92a      	cbnz	r2, 801ff6c <_realloc_r+0x24>
 801ff60:	4625      	mov	r5, r4
 801ff62:	f000 fa1d 	bl	80203a0 <_free_r>
 801ff66:	4628      	mov	r0, r5
 801ff68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ff6c:	f000 fa64 	bl	8020438 <_malloc_usable_size_r>
 801ff70:	4284      	cmp	r4, r0
 801ff72:	4607      	mov	r7, r0
 801ff74:	d802      	bhi.n	801ff7c <_realloc_r+0x34>
 801ff76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801ff7a:	d812      	bhi.n	801ffa2 <_realloc_r+0x5a>
 801ff7c:	4621      	mov	r1, r4
 801ff7e:	4640      	mov	r0, r8
 801ff80:	f7ff f99c 	bl	801f2bc <_malloc_r>
 801ff84:	4605      	mov	r5, r0
 801ff86:	2800      	cmp	r0, #0
 801ff88:	d0ed      	beq.n	801ff66 <_realloc_r+0x1e>
 801ff8a:	42bc      	cmp	r4, r7
 801ff8c:	4622      	mov	r2, r4
 801ff8e:	4631      	mov	r1, r6
 801ff90:	bf28      	it	cs
 801ff92:	463a      	movcs	r2, r7
 801ff94:	f7fd fcdb 	bl	801d94e <memcpy>
 801ff98:	4631      	mov	r1, r6
 801ff9a:	4640      	mov	r0, r8
 801ff9c:	f000 fa00 	bl	80203a0 <_free_r>
 801ffa0:	e7e1      	b.n	801ff66 <_realloc_r+0x1e>
 801ffa2:	4635      	mov	r5, r6
 801ffa4:	e7df      	b.n	801ff66 <_realloc_r+0x1e>

0801ffa6 <__swbuf_r>:
 801ffa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ffa8:	460e      	mov	r6, r1
 801ffaa:	4614      	mov	r4, r2
 801ffac:	4605      	mov	r5, r0
 801ffae:	b118      	cbz	r0, 801ffb8 <__swbuf_r+0x12>
 801ffb0:	6a03      	ldr	r3, [r0, #32]
 801ffb2:	b90b      	cbnz	r3, 801ffb8 <__swbuf_r+0x12>
 801ffb4:	f7fc fd2a 	bl	801ca0c <__sinit>
 801ffb8:	69a3      	ldr	r3, [r4, #24]
 801ffba:	60a3      	str	r3, [r4, #8]
 801ffbc:	89a3      	ldrh	r3, [r4, #12]
 801ffbe:	071a      	lsls	r2, r3, #28
 801ffc0:	d525      	bpl.n	802000e <__swbuf_r+0x68>
 801ffc2:	6923      	ldr	r3, [r4, #16]
 801ffc4:	b31b      	cbz	r3, 802000e <__swbuf_r+0x68>
 801ffc6:	6823      	ldr	r3, [r4, #0]
 801ffc8:	b2f6      	uxtb	r6, r6
 801ffca:	6922      	ldr	r2, [r4, #16]
 801ffcc:	4637      	mov	r7, r6
 801ffce:	1a98      	subs	r0, r3, r2
 801ffd0:	6963      	ldr	r3, [r4, #20]
 801ffd2:	4283      	cmp	r3, r0
 801ffd4:	dc04      	bgt.n	801ffe0 <__swbuf_r+0x3a>
 801ffd6:	4621      	mov	r1, r4
 801ffd8:	4628      	mov	r0, r5
 801ffda:	f7ff fa85 	bl	801f4e8 <_fflush_r>
 801ffde:	b9e0      	cbnz	r0, 802001a <__swbuf_r+0x74>
 801ffe0:	68a3      	ldr	r3, [r4, #8]
 801ffe2:	3b01      	subs	r3, #1
 801ffe4:	60a3      	str	r3, [r4, #8]
 801ffe6:	6823      	ldr	r3, [r4, #0]
 801ffe8:	1c5a      	adds	r2, r3, #1
 801ffea:	6022      	str	r2, [r4, #0]
 801ffec:	701e      	strb	r6, [r3, #0]
 801ffee:	1c43      	adds	r3, r0, #1
 801fff0:	6962      	ldr	r2, [r4, #20]
 801fff2:	429a      	cmp	r2, r3
 801fff4:	d004      	beq.n	8020000 <__swbuf_r+0x5a>
 801fff6:	89a3      	ldrh	r3, [r4, #12]
 801fff8:	07db      	lsls	r3, r3, #31
 801fffa:	d506      	bpl.n	802000a <__swbuf_r+0x64>
 801fffc:	2e0a      	cmp	r6, #10
 801fffe:	d104      	bne.n	802000a <__swbuf_r+0x64>
 8020000:	4621      	mov	r1, r4
 8020002:	4628      	mov	r0, r5
 8020004:	f7ff fa70 	bl	801f4e8 <_fflush_r>
 8020008:	b938      	cbnz	r0, 802001a <__swbuf_r+0x74>
 802000a:	4638      	mov	r0, r7
 802000c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802000e:	4621      	mov	r1, r4
 8020010:	4628      	mov	r0, r5
 8020012:	f000 f805 	bl	8020020 <__swsetup_r>
 8020016:	2800      	cmp	r0, #0
 8020018:	d0d5      	beq.n	801ffc6 <__swbuf_r+0x20>
 802001a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 802001e:	e7f4      	b.n	802000a <__swbuf_r+0x64>

08020020 <__swsetup_r>:
 8020020:	b538      	push	{r3, r4, r5, lr}
 8020022:	4b2a      	ldr	r3, [pc, #168]	; (80200cc <__swsetup_r+0xac>)
 8020024:	4605      	mov	r5, r0
 8020026:	460c      	mov	r4, r1
 8020028:	6818      	ldr	r0, [r3, #0]
 802002a:	b118      	cbz	r0, 8020034 <__swsetup_r+0x14>
 802002c:	6a03      	ldr	r3, [r0, #32]
 802002e:	b90b      	cbnz	r3, 8020034 <__swsetup_r+0x14>
 8020030:	f7fc fcec 	bl	801ca0c <__sinit>
 8020034:	89a3      	ldrh	r3, [r4, #12]
 8020036:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802003a:	0718      	lsls	r0, r3, #28
 802003c:	d422      	bmi.n	8020084 <__swsetup_r+0x64>
 802003e:	06d9      	lsls	r1, r3, #27
 8020040:	d407      	bmi.n	8020052 <__swsetup_r+0x32>
 8020042:	2309      	movs	r3, #9
 8020044:	602b      	str	r3, [r5, #0]
 8020046:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802004a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802004e:	81a3      	strh	r3, [r4, #12]
 8020050:	e034      	b.n	80200bc <__swsetup_r+0x9c>
 8020052:	0758      	lsls	r0, r3, #29
 8020054:	d512      	bpl.n	802007c <__swsetup_r+0x5c>
 8020056:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020058:	b141      	cbz	r1, 802006c <__swsetup_r+0x4c>
 802005a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802005e:	4299      	cmp	r1, r3
 8020060:	d002      	beq.n	8020068 <__swsetup_r+0x48>
 8020062:	4628      	mov	r0, r5
 8020064:	f000 f99c 	bl	80203a0 <_free_r>
 8020068:	2300      	movs	r3, #0
 802006a:	6363      	str	r3, [r4, #52]	; 0x34
 802006c:	89a3      	ldrh	r3, [r4, #12]
 802006e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8020072:	81a3      	strh	r3, [r4, #12]
 8020074:	2300      	movs	r3, #0
 8020076:	6063      	str	r3, [r4, #4]
 8020078:	6923      	ldr	r3, [r4, #16]
 802007a:	6023      	str	r3, [r4, #0]
 802007c:	89a3      	ldrh	r3, [r4, #12]
 802007e:	f043 0308 	orr.w	r3, r3, #8
 8020082:	81a3      	strh	r3, [r4, #12]
 8020084:	6923      	ldr	r3, [r4, #16]
 8020086:	b94b      	cbnz	r3, 802009c <__swsetup_r+0x7c>
 8020088:	89a3      	ldrh	r3, [r4, #12]
 802008a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802008e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020092:	d003      	beq.n	802009c <__swsetup_r+0x7c>
 8020094:	4621      	mov	r1, r4
 8020096:	4628      	mov	r0, r5
 8020098:	f000 f84c 	bl	8020134 <__smakebuf_r>
 802009c:	89a0      	ldrh	r0, [r4, #12]
 802009e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80200a2:	f010 0301 	ands.w	r3, r0, #1
 80200a6:	d00a      	beq.n	80200be <__swsetup_r+0x9e>
 80200a8:	2300      	movs	r3, #0
 80200aa:	60a3      	str	r3, [r4, #8]
 80200ac:	6963      	ldr	r3, [r4, #20]
 80200ae:	425b      	negs	r3, r3
 80200b0:	61a3      	str	r3, [r4, #24]
 80200b2:	6923      	ldr	r3, [r4, #16]
 80200b4:	b943      	cbnz	r3, 80200c8 <__swsetup_r+0xa8>
 80200b6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80200ba:	d1c4      	bne.n	8020046 <__swsetup_r+0x26>
 80200bc:	bd38      	pop	{r3, r4, r5, pc}
 80200be:	0781      	lsls	r1, r0, #30
 80200c0:	bf58      	it	pl
 80200c2:	6963      	ldrpl	r3, [r4, #20]
 80200c4:	60a3      	str	r3, [r4, #8]
 80200c6:	e7f4      	b.n	80200b2 <__swsetup_r+0x92>
 80200c8:	2000      	movs	r0, #0
 80200ca:	e7f7      	b.n	80200bc <__swsetup_r+0x9c>
 80200cc:	200007b0 	.word	0x200007b0

080200d0 <__ascii_wctomb>:
 80200d0:	b149      	cbz	r1, 80200e6 <__ascii_wctomb+0x16>
 80200d2:	2aff      	cmp	r2, #255	; 0xff
 80200d4:	bf8d      	iteet	hi
 80200d6:	238a      	movhi	r3, #138	; 0x8a
 80200d8:	2001      	movls	r0, #1
 80200da:	700a      	strbls	r2, [r1, #0]
 80200dc:	6003      	strhi	r3, [r0, #0]
 80200de:	bf88      	it	hi
 80200e0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80200e4:	4770      	bx	lr
 80200e6:	4608      	mov	r0, r1
 80200e8:	4770      	bx	lr

080200ea <__swhatbuf_r>:
 80200ea:	b570      	push	{r4, r5, r6, lr}
 80200ec:	460c      	mov	r4, r1
 80200ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80200f2:	b096      	sub	sp, #88	; 0x58
 80200f4:	4615      	mov	r5, r2
 80200f6:	2900      	cmp	r1, #0
 80200f8:	461e      	mov	r6, r3
 80200fa:	da0c      	bge.n	8020116 <__swhatbuf_r+0x2c>
 80200fc:	89a3      	ldrh	r3, [r4, #12]
 80200fe:	2100      	movs	r1, #0
 8020100:	f013 0f80 	tst.w	r3, #128	; 0x80
 8020104:	bf0c      	ite	eq
 8020106:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 802010a:	2340      	movne	r3, #64	; 0x40
 802010c:	2000      	movs	r0, #0
 802010e:	6031      	str	r1, [r6, #0]
 8020110:	602b      	str	r3, [r5, #0]
 8020112:	b016      	add	sp, #88	; 0x58
 8020114:	bd70      	pop	{r4, r5, r6, pc}
 8020116:	466a      	mov	r2, sp
 8020118:	f000 f8a6 	bl	8020268 <_fstat_r>
 802011c:	2800      	cmp	r0, #0
 802011e:	dbed      	blt.n	80200fc <__swhatbuf_r+0x12>
 8020120:	9901      	ldr	r1, [sp, #4]
 8020122:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8020126:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 802012a:	4259      	negs	r1, r3
 802012c:	4159      	adcs	r1, r3
 802012e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020132:	e7eb      	b.n	802010c <__swhatbuf_r+0x22>

08020134 <__smakebuf_r>:
 8020134:	898b      	ldrh	r3, [r1, #12]
 8020136:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8020138:	079d      	lsls	r5, r3, #30
 802013a:	4606      	mov	r6, r0
 802013c:	460c      	mov	r4, r1
 802013e:	d507      	bpl.n	8020150 <__smakebuf_r+0x1c>
 8020140:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8020144:	6023      	str	r3, [r4, #0]
 8020146:	6123      	str	r3, [r4, #16]
 8020148:	2301      	movs	r3, #1
 802014a:	6163      	str	r3, [r4, #20]
 802014c:	b002      	add	sp, #8
 802014e:	bd70      	pop	{r4, r5, r6, pc}
 8020150:	ab01      	add	r3, sp, #4
 8020152:	466a      	mov	r2, sp
 8020154:	f7ff ffc9 	bl	80200ea <__swhatbuf_r>
 8020158:	9900      	ldr	r1, [sp, #0]
 802015a:	4605      	mov	r5, r0
 802015c:	4630      	mov	r0, r6
 802015e:	f7ff f8ad 	bl	801f2bc <_malloc_r>
 8020162:	b948      	cbnz	r0, 8020178 <__smakebuf_r+0x44>
 8020164:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020168:	059a      	lsls	r2, r3, #22
 802016a:	d4ef      	bmi.n	802014c <__smakebuf_r+0x18>
 802016c:	f023 0303 	bic.w	r3, r3, #3
 8020170:	f043 0302 	orr.w	r3, r3, #2
 8020174:	81a3      	strh	r3, [r4, #12]
 8020176:	e7e3      	b.n	8020140 <__smakebuf_r+0xc>
 8020178:	89a3      	ldrh	r3, [r4, #12]
 802017a:	6020      	str	r0, [r4, #0]
 802017c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020180:	6120      	str	r0, [r4, #16]
 8020182:	81a3      	strh	r3, [r4, #12]
 8020184:	9b00      	ldr	r3, [sp, #0]
 8020186:	6163      	str	r3, [r4, #20]
 8020188:	9b01      	ldr	r3, [sp, #4]
 802018a:	b15b      	cbz	r3, 80201a4 <__smakebuf_r+0x70>
 802018c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020190:	4630      	mov	r0, r6
 8020192:	f000 f87b 	bl	802028c <_isatty_r>
 8020196:	b128      	cbz	r0, 80201a4 <__smakebuf_r+0x70>
 8020198:	89a3      	ldrh	r3, [r4, #12]
 802019a:	f023 0303 	bic.w	r3, r3, #3
 802019e:	f043 0301 	orr.w	r3, r3, #1
 80201a2:	81a3      	strh	r3, [r4, #12]
 80201a4:	89a3      	ldrh	r3, [r4, #12]
 80201a6:	431d      	orrs	r5, r3
 80201a8:	81a5      	strh	r5, [r4, #12]
 80201aa:	e7cf      	b.n	802014c <__smakebuf_r+0x18>

080201ac <_putc_r>:
 80201ac:	b570      	push	{r4, r5, r6, lr}
 80201ae:	460d      	mov	r5, r1
 80201b0:	4614      	mov	r4, r2
 80201b2:	4606      	mov	r6, r0
 80201b4:	b118      	cbz	r0, 80201be <_putc_r+0x12>
 80201b6:	6a03      	ldr	r3, [r0, #32]
 80201b8:	b90b      	cbnz	r3, 80201be <_putc_r+0x12>
 80201ba:	f7fc fc27 	bl	801ca0c <__sinit>
 80201be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80201c0:	07d8      	lsls	r0, r3, #31
 80201c2:	d405      	bmi.n	80201d0 <_putc_r+0x24>
 80201c4:	89a3      	ldrh	r3, [r4, #12]
 80201c6:	0599      	lsls	r1, r3, #22
 80201c8:	d402      	bmi.n	80201d0 <_putc_r+0x24>
 80201ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80201cc:	f7fd fbaf 	bl	801d92e <__retarget_lock_acquire_recursive>
 80201d0:	68a3      	ldr	r3, [r4, #8]
 80201d2:	3b01      	subs	r3, #1
 80201d4:	2b00      	cmp	r3, #0
 80201d6:	60a3      	str	r3, [r4, #8]
 80201d8:	da05      	bge.n	80201e6 <_putc_r+0x3a>
 80201da:	69a2      	ldr	r2, [r4, #24]
 80201dc:	4293      	cmp	r3, r2
 80201de:	db12      	blt.n	8020206 <_putc_r+0x5a>
 80201e0:	b2eb      	uxtb	r3, r5
 80201e2:	2b0a      	cmp	r3, #10
 80201e4:	d00f      	beq.n	8020206 <_putc_r+0x5a>
 80201e6:	6823      	ldr	r3, [r4, #0]
 80201e8:	1c5a      	adds	r2, r3, #1
 80201ea:	6022      	str	r2, [r4, #0]
 80201ec:	701d      	strb	r5, [r3, #0]
 80201ee:	b2ed      	uxtb	r5, r5
 80201f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80201f2:	07da      	lsls	r2, r3, #31
 80201f4:	d405      	bmi.n	8020202 <_putc_r+0x56>
 80201f6:	89a3      	ldrh	r3, [r4, #12]
 80201f8:	059b      	lsls	r3, r3, #22
 80201fa:	d402      	bmi.n	8020202 <_putc_r+0x56>
 80201fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80201fe:	f7fd fb97 	bl	801d930 <__retarget_lock_release_recursive>
 8020202:	4628      	mov	r0, r5
 8020204:	bd70      	pop	{r4, r5, r6, pc}
 8020206:	4629      	mov	r1, r5
 8020208:	4622      	mov	r2, r4
 802020a:	4630      	mov	r0, r6
 802020c:	f7ff fecb 	bl	801ffa6 <__swbuf_r>
 8020210:	4605      	mov	r5, r0
 8020212:	e7ed      	b.n	80201f0 <_putc_r+0x44>

08020214 <memmove>:
 8020214:	4288      	cmp	r0, r1
 8020216:	b510      	push	{r4, lr}
 8020218:	eb01 0402 	add.w	r4, r1, r2
 802021c:	d902      	bls.n	8020224 <memmove+0x10>
 802021e:	4284      	cmp	r4, r0
 8020220:	4623      	mov	r3, r4
 8020222:	d807      	bhi.n	8020234 <memmove+0x20>
 8020224:	1e43      	subs	r3, r0, #1
 8020226:	42a1      	cmp	r1, r4
 8020228:	d008      	beq.n	802023c <memmove+0x28>
 802022a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802022e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8020232:	e7f8      	b.n	8020226 <memmove+0x12>
 8020234:	4402      	add	r2, r0
 8020236:	4601      	mov	r1, r0
 8020238:	428a      	cmp	r2, r1
 802023a:	d100      	bne.n	802023e <memmove+0x2a>
 802023c:	bd10      	pop	{r4, pc}
 802023e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8020242:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8020246:	e7f7      	b.n	8020238 <memmove+0x24>

08020248 <_close_r>:
 8020248:	b538      	push	{r3, r4, r5, lr}
 802024a:	2300      	movs	r3, #0
 802024c:	4d05      	ldr	r5, [pc, #20]	; (8020264 <_close_r+0x1c>)
 802024e:	4604      	mov	r4, r0
 8020250:	4608      	mov	r0, r1
 8020252:	602b      	str	r3, [r5, #0]
 8020254:	f000 fa2e 	bl	80206b4 <_close>
 8020258:	1c43      	adds	r3, r0, #1
 802025a:	d102      	bne.n	8020262 <_close_r+0x1a>
 802025c:	682b      	ldr	r3, [r5, #0]
 802025e:	b103      	cbz	r3, 8020262 <_close_r+0x1a>
 8020260:	6023      	str	r3, [r4, #0]
 8020262:	bd38      	pop	{r3, r4, r5, pc}
 8020264:	20035690 	.word	0x20035690

08020268 <_fstat_r>:
 8020268:	b538      	push	{r3, r4, r5, lr}
 802026a:	2300      	movs	r3, #0
 802026c:	4d06      	ldr	r5, [pc, #24]	; (8020288 <_fstat_r+0x20>)
 802026e:	4604      	mov	r4, r0
 8020270:	4608      	mov	r0, r1
 8020272:	4611      	mov	r1, r2
 8020274:	602b      	str	r3, [r5, #0]
 8020276:	f000 fa66 	bl	8020746 <_fstat>
 802027a:	1c43      	adds	r3, r0, #1
 802027c:	d102      	bne.n	8020284 <_fstat_r+0x1c>
 802027e:	682b      	ldr	r3, [r5, #0]
 8020280:	b103      	cbz	r3, 8020284 <_fstat_r+0x1c>
 8020282:	6023      	str	r3, [r4, #0]
 8020284:	bd38      	pop	{r3, r4, r5, pc}
 8020286:	bf00      	nop
 8020288:	20035690 	.word	0x20035690

0802028c <_isatty_r>:
 802028c:	b538      	push	{r3, r4, r5, lr}
 802028e:	2300      	movs	r3, #0
 8020290:	4d05      	ldr	r5, [pc, #20]	; (80202a8 <_isatty_r+0x1c>)
 8020292:	4604      	mov	r4, r0
 8020294:	4608      	mov	r0, r1
 8020296:	602b      	str	r3, [r5, #0]
 8020298:	f000 fbc8 	bl	8020a2c <_isatty>
 802029c:	1c43      	adds	r3, r0, #1
 802029e:	d102      	bne.n	80202a6 <_isatty_r+0x1a>
 80202a0:	682b      	ldr	r3, [r5, #0]
 80202a2:	b103      	cbz	r3, 80202a6 <_isatty_r+0x1a>
 80202a4:	6023      	str	r3, [r4, #0]
 80202a6:	bd38      	pop	{r3, r4, r5, pc}
 80202a8:	20035690 	.word	0x20035690

080202ac <_lseek_r>:
 80202ac:	b538      	push	{r3, r4, r5, lr}
 80202ae:	4604      	mov	r4, r0
 80202b0:	4d06      	ldr	r5, [pc, #24]	; (80202cc <_lseek_r+0x20>)
 80202b2:	4608      	mov	r0, r1
 80202b4:	4611      	mov	r1, r2
 80202b6:	2200      	movs	r2, #0
 80202b8:	602a      	str	r2, [r5, #0]
 80202ba:	461a      	mov	r2, r3
 80202bc:	f000 f9b7 	bl	802062e <_lseek>
 80202c0:	1c43      	adds	r3, r0, #1
 80202c2:	d102      	bne.n	80202ca <_lseek_r+0x1e>
 80202c4:	682b      	ldr	r3, [r5, #0]
 80202c6:	b103      	cbz	r3, 80202ca <_lseek_r+0x1e>
 80202c8:	6023      	str	r3, [r4, #0]
 80202ca:	bd38      	pop	{r3, r4, r5, pc}
 80202cc:	20035690 	.word	0x20035690

080202d0 <_read_r>:
 80202d0:	b538      	push	{r3, r4, r5, lr}
 80202d2:	4604      	mov	r4, r0
 80202d4:	4d06      	ldr	r5, [pc, #24]	; (80202f0 <_read_r+0x20>)
 80202d6:	4608      	mov	r0, r1
 80202d8:	4611      	mov	r1, r2
 80202da:	2200      	movs	r2, #0
 80202dc:	602a      	str	r2, [r5, #0]
 80202de:	461a      	mov	r2, r3
 80202e0:	f000 f94d 	bl	802057e <_read>
 80202e4:	1c43      	adds	r3, r0, #1
 80202e6:	d102      	bne.n	80202ee <_read_r+0x1e>
 80202e8:	682b      	ldr	r3, [r5, #0]
 80202ea:	b103      	cbz	r3, 80202ee <_read_r+0x1e>
 80202ec:	6023      	str	r3, [r4, #0]
 80202ee:	bd38      	pop	{r3, r4, r5, pc}
 80202f0:	20035690 	.word	0x20035690

080202f4 <_sbrk_r>:
 80202f4:	b538      	push	{r3, r4, r5, lr}
 80202f6:	2300      	movs	r3, #0
 80202f8:	4d05      	ldr	r5, [pc, #20]	; (8020310 <_sbrk_r+0x1c>)
 80202fa:	4604      	mov	r4, r0
 80202fc:	4608      	mov	r0, r1
 80202fe:	602b      	str	r3, [r5, #0]
 8020300:	f7fb fc2a 	bl	801bb58 <_sbrk>
 8020304:	1c43      	adds	r3, r0, #1
 8020306:	d102      	bne.n	802030e <_sbrk_r+0x1a>
 8020308:	682b      	ldr	r3, [r5, #0]
 802030a:	b103      	cbz	r3, 802030e <_sbrk_r+0x1a>
 802030c:	6023      	str	r3, [r4, #0]
 802030e:	bd38      	pop	{r3, r4, r5, pc}
 8020310:	20035690 	.word	0x20035690

08020314 <_write_r>:
 8020314:	b538      	push	{r3, r4, r5, lr}
 8020316:	4604      	mov	r4, r0
 8020318:	4d06      	ldr	r5, [pc, #24]	; (8020334 <_write_r+0x20>)
 802031a:	4608      	mov	r0, r1
 802031c:	4611      	mov	r1, r2
 802031e:	2200      	movs	r2, #0
 8020320:	602a      	str	r2, [r5, #0]
 8020322:	461a      	mov	r2, r3
 8020324:	f000 f995 	bl	8020652 <_write>
 8020328:	1c43      	adds	r3, r0, #1
 802032a:	d102      	bne.n	8020332 <_write_r+0x1e>
 802032c:	682b      	ldr	r3, [r5, #0]
 802032e:	b103      	cbz	r3, 8020332 <_write_r+0x1e>
 8020330:	6023      	str	r3, [r4, #0]
 8020332:	bd38      	pop	{r3, r4, r5, pc}
 8020334:	20035690 	.word	0x20035690

08020338 <__assert_func>:
 8020338:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802033a:	4614      	mov	r4, r2
 802033c:	461a      	mov	r2, r3
 802033e:	4b09      	ldr	r3, [pc, #36]	; (8020364 <__assert_func+0x2c>)
 8020340:	4605      	mov	r5, r0
 8020342:	681b      	ldr	r3, [r3, #0]
 8020344:	68d8      	ldr	r0, [r3, #12]
 8020346:	b14c      	cbz	r4, 802035c <__assert_func+0x24>
 8020348:	4b07      	ldr	r3, [pc, #28]	; (8020368 <__assert_func+0x30>)
 802034a:	9100      	str	r1, [sp, #0]
 802034c:	4907      	ldr	r1, [pc, #28]	; (802036c <__assert_func+0x34>)
 802034e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8020352:	462b      	mov	r3, r5
 8020354:	f000 f878 	bl	8020448 <fiprintf>
 8020358:	f000 f888 	bl	802046c <abort>
 802035c:	4b04      	ldr	r3, [pc, #16]	; (8020370 <__assert_func+0x38>)
 802035e:	461c      	mov	r4, r3
 8020360:	e7f3      	b.n	802034a <__assert_func+0x12>
 8020362:	bf00      	nop
 8020364:	200007b0 	.word	0x200007b0
 8020368:	08038834 	.word	0x08038834
 802036c:	08038841 	.word	0x08038841
 8020370:	0803886f 	.word	0x0803886f

08020374 <_calloc_r>:
 8020374:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8020376:	fba1 2402 	umull	r2, r4, r1, r2
 802037a:	b94c      	cbnz	r4, 8020390 <_calloc_r+0x1c>
 802037c:	4611      	mov	r1, r2
 802037e:	9201      	str	r2, [sp, #4]
 8020380:	f7fe ff9c 	bl	801f2bc <_malloc_r>
 8020384:	9a01      	ldr	r2, [sp, #4]
 8020386:	4605      	mov	r5, r0
 8020388:	b930      	cbnz	r0, 8020398 <_calloc_r+0x24>
 802038a:	4628      	mov	r0, r5
 802038c:	b003      	add	sp, #12
 802038e:	bd30      	pop	{r4, r5, pc}
 8020390:	220c      	movs	r2, #12
 8020392:	2500      	movs	r5, #0
 8020394:	6002      	str	r2, [r0, #0]
 8020396:	e7f8      	b.n	802038a <_calloc_r+0x16>
 8020398:	4621      	mov	r1, r4
 802039a:	f7fd fa91 	bl	801d8c0 <memset>
 802039e:	e7f4      	b.n	802038a <_calloc_r+0x16>

080203a0 <_free_r>:
 80203a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80203a2:	2900      	cmp	r1, #0
 80203a4:	d043      	beq.n	802042e <_free_r+0x8e>
 80203a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80203aa:	1f0c      	subs	r4, r1, #4
 80203ac:	9001      	str	r0, [sp, #4]
 80203ae:	2b00      	cmp	r3, #0
 80203b0:	bfb8      	it	lt
 80203b2:	18e4      	addlt	r4, r4, r3
 80203b4:	f7ff f8c0 	bl	801f538 <__malloc_lock>
 80203b8:	4a1e      	ldr	r2, [pc, #120]	; (8020434 <_free_r+0x94>)
 80203ba:	9801      	ldr	r0, [sp, #4]
 80203bc:	6813      	ldr	r3, [r2, #0]
 80203be:	b933      	cbnz	r3, 80203ce <_free_r+0x2e>
 80203c0:	6063      	str	r3, [r4, #4]
 80203c2:	6014      	str	r4, [r2, #0]
 80203c4:	b003      	add	sp, #12
 80203c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80203ca:	f7ff b8bb 	b.w	801f544 <__malloc_unlock>
 80203ce:	42a3      	cmp	r3, r4
 80203d0:	d908      	bls.n	80203e4 <_free_r+0x44>
 80203d2:	6825      	ldr	r5, [r4, #0]
 80203d4:	1961      	adds	r1, r4, r5
 80203d6:	428b      	cmp	r3, r1
 80203d8:	bf01      	itttt	eq
 80203da:	6819      	ldreq	r1, [r3, #0]
 80203dc:	685b      	ldreq	r3, [r3, #4]
 80203de:	1949      	addeq	r1, r1, r5
 80203e0:	6021      	streq	r1, [r4, #0]
 80203e2:	e7ed      	b.n	80203c0 <_free_r+0x20>
 80203e4:	461a      	mov	r2, r3
 80203e6:	685b      	ldr	r3, [r3, #4]
 80203e8:	b10b      	cbz	r3, 80203ee <_free_r+0x4e>
 80203ea:	42a3      	cmp	r3, r4
 80203ec:	d9fa      	bls.n	80203e4 <_free_r+0x44>
 80203ee:	6811      	ldr	r1, [r2, #0]
 80203f0:	1855      	adds	r5, r2, r1
 80203f2:	42a5      	cmp	r5, r4
 80203f4:	d10b      	bne.n	802040e <_free_r+0x6e>
 80203f6:	6824      	ldr	r4, [r4, #0]
 80203f8:	4421      	add	r1, r4
 80203fa:	1854      	adds	r4, r2, r1
 80203fc:	6011      	str	r1, [r2, #0]
 80203fe:	42a3      	cmp	r3, r4
 8020400:	d1e0      	bne.n	80203c4 <_free_r+0x24>
 8020402:	681c      	ldr	r4, [r3, #0]
 8020404:	685b      	ldr	r3, [r3, #4]
 8020406:	440c      	add	r4, r1
 8020408:	6053      	str	r3, [r2, #4]
 802040a:	6014      	str	r4, [r2, #0]
 802040c:	e7da      	b.n	80203c4 <_free_r+0x24>
 802040e:	d902      	bls.n	8020416 <_free_r+0x76>
 8020410:	230c      	movs	r3, #12
 8020412:	6003      	str	r3, [r0, #0]
 8020414:	e7d6      	b.n	80203c4 <_free_r+0x24>
 8020416:	6825      	ldr	r5, [r4, #0]
 8020418:	1961      	adds	r1, r4, r5
 802041a:	428b      	cmp	r3, r1
 802041c:	bf02      	ittt	eq
 802041e:	6819      	ldreq	r1, [r3, #0]
 8020420:	685b      	ldreq	r3, [r3, #4]
 8020422:	1949      	addeq	r1, r1, r5
 8020424:	6063      	str	r3, [r4, #4]
 8020426:	bf08      	it	eq
 8020428:	6021      	streq	r1, [r4, #0]
 802042a:	6054      	str	r4, [r2, #4]
 802042c:	e7ca      	b.n	80203c4 <_free_r+0x24>
 802042e:	b003      	add	sp, #12
 8020430:	bd30      	pop	{r4, r5, pc}
 8020432:	bf00      	nop
 8020434:	20035688 	.word	0x20035688

08020438 <_malloc_usable_size_r>:
 8020438:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802043c:	1f18      	subs	r0, r3, #4
 802043e:	2b00      	cmp	r3, #0
 8020440:	bfbc      	itt	lt
 8020442:	580b      	ldrlt	r3, [r1, r0]
 8020444:	18c0      	addlt	r0, r0, r3
 8020446:	4770      	bx	lr

08020448 <fiprintf>:
 8020448:	b40e      	push	{r1, r2, r3}
 802044a:	b503      	push	{r0, r1, lr}
 802044c:	ab03      	add	r3, sp, #12
 802044e:	4601      	mov	r1, r0
 8020450:	4805      	ldr	r0, [pc, #20]	; (8020468 <fiprintf+0x20>)
 8020452:	f853 2b04 	ldr.w	r2, [r3], #4
 8020456:	6800      	ldr	r0, [r0, #0]
 8020458:	9301      	str	r3, [sp, #4]
 802045a:	f7fe fded 	bl	801f038 <_vfiprintf_r>
 802045e:	b002      	add	sp, #8
 8020460:	f85d eb04 	ldr.w	lr, [sp], #4
 8020464:	b003      	add	sp, #12
 8020466:	4770      	bx	lr
 8020468:	200007b0 	.word	0x200007b0

0802046c <abort>:
 802046c:	2006      	movs	r0, #6
 802046e:	b508      	push	{r3, lr}
 8020470:	f000 f82c 	bl	80204cc <raise>
 8020474:	2001      	movs	r0, #1
 8020476:	f000 faf5 	bl	8020a64 <_exit>

0802047a <_raise_r>:
 802047a:	291f      	cmp	r1, #31
 802047c:	b538      	push	{r3, r4, r5, lr}
 802047e:	4604      	mov	r4, r0
 8020480:	460d      	mov	r5, r1
 8020482:	d904      	bls.n	802048e <_raise_r+0x14>
 8020484:	2316      	movs	r3, #22
 8020486:	6003      	str	r3, [r0, #0]
 8020488:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802048c:	bd38      	pop	{r3, r4, r5, pc}
 802048e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8020490:	b112      	cbz	r2, 8020498 <_raise_r+0x1e>
 8020492:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020496:	b94b      	cbnz	r3, 80204ac <_raise_r+0x32>
 8020498:	4620      	mov	r0, r4
 802049a:	f000 f831 	bl	8020500 <_getpid_r>
 802049e:	462a      	mov	r2, r5
 80204a0:	4601      	mov	r1, r0
 80204a2:	4620      	mov	r0, r4
 80204a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80204a8:	f000 b818 	b.w	80204dc <_kill_r>
 80204ac:	2b01      	cmp	r3, #1
 80204ae:	d00a      	beq.n	80204c6 <_raise_r+0x4c>
 80204b0:	1c59      	adds	r1, r3, #1
 80204b2:	d103      	bne.n	80204bc <_raise_r+0x42>
 80204b4:	2316      	movs	r3, #22
 80204b6:	6003      	str	r3, [r0, #0]
 80204b8:	2001      	movs	r0, #1
 80204ba:	e7e7      	b.n	802048c <_raise_r+0x12>
 80204bc:	2400      	movs	r4, #0
 80204be:	4628      	mov	r0, r5
 80204c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80204c4:	4798      	blx	r3
 80204c6:	2000      	movs	r0, #0
 80204c8:	e7e0      	b.n	802048c <_raise_r+0x12>
	...

080204cc <raise>:
 80204cc:	4b02      	ldr	r3, [pc, #8]	; (80204d8 <raise+0xc>)
 80204ce:	4601      	mov	r1, r0
 80204d0:	6818      	ldr	r0, [r3, #0]
 80204d2:	f7ff bfd2 	b.w	802047a <_raise_r>
 80204d6:	bf00      	nop
 80204d8:	200007b0 	.word	0x200007b0

080204dc <_kill_r>:
 80204dc:	b538      	push	{r3, r4, r5, lr}
 80204de:	2300      	movs	r3, #0
 80204e0:	4d06      	ldr	r5, [pc, #24]	; (80204fc <_kill_r+0x20>)
 80204e2:	4604      	mov	r4, r0
 80204e4:	4608      	mov	r0, r1
 80204e6:	4611      	mov	r1, r2
 80204e8:	602b      	str	r3, [r5, #0]
 80204ea:	f000 fad9 	bl	8020aa0 <_kill>
 80204ee:	1c43      	adds	r3, r0, #1
 80204f0:	d102      	bne.n	80204f8 <_kill_r+0x1c>
 80204f2:	682b      	ldr	r3, [r5, #0]
 80204f4:	b103      	cbz	r3, 80204f8 <_kill_r+0x1c>
 80204f6:	6023      	str	r3, [r4, #0]
 80204f8:	bd38      	pop	{r3, r4, r5, pc}
 80204fa:	bf00      	nop
 80204fc:	20035690 	.word	0x20035690

08020500 <_getpid_r>:
 8020500:	f000 b8fe 	b.w	8020700 <_getpid>

08020504 <findslot>:
 8020504:	4b0a      	ldr	r3, [pc, #40]	; (8020530 <findslot+0x2c>)
 8020506:	b510      	push	{r4, lr}
 8020508:	4604      	mov	r4, r0
 802050a:	6818      	ldr	r0, [r3, #0]
 802050c:	b118      	cbz	r0, 8020516 <findslot+0x12>
 802050e:	6a03      	ldr	r3, [r0, #32]
 8020510:	b90b      	cbnz	r3, 8020516 <findslot+0x12>
 8020512:	f7fc fa7b 	bl	801ca0c <__sinit>
 8020516:	2c13      	cmp	r4, #19
 8020518:	d807      	bhi.n	802052a <findslot+0x26>
 802051a:	4806      	ldr	r0, [pc, #24]	; (8020534 <findslot+0x30>)
 802051c:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8020520:	3201      	adds	r2, #1
 8020522:	d002      	beq.n	802052a <findslot+0x26>
 8020524:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8020528:	bd10      	pop	{r4, pc}
 802052a:	2000      	movs	r0, #0
 802052c:	e7fc      	b.n	8020528 <findslot+0x24>
 802052e:	bf00      	nop
 8020530:	200007b0 	.word	0x200007b0
 8020534:	200356a0 	.word	0x200356a0

08020538 <error>:
 8020538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802053a:	4604      	mov	r4, r0
 802053c:	2613      	movs	r6, #19
 802053e:	f7fd f9cb 	bl	801d8d8 <__errno>
 8020542:	2700      	movs	r7, #0
 8020544:	4605      	mov	r5, r0
 8020546:	4630      	mov	r0, r6
 8020548:	4639      	mov	r1, r7
 802054a:	beab      	bkpt	0x00ab
 802054c:	4606      	mov	r6, r0
 802054e:	4620      	mov	r0, r4
 8020550:	602e      	str	r6, [r5, #0]
 8020552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08020554 <checkerror>:
 8020554:	1c43      	adds	r3, r0, #1
 8020556:	d101      	bne.n	802055c <checkerror+0x8>
 8020558:	f7ff bfee 	b.w	8020538 <error>
 802055c:	4770      	bx	lr

0802055e <_swiread>:
 802055e:	b530      	push	{r4, r5, lr}
 8020560:	b085      	sub	sp, #20
 8020562:	2406      	movs	r4, #6
 8020564:	ad01      	add	r5, sp, #4
 8020566:	9203      	str	r2, [sp, #12]
 8020568:	e9cd 0101 	strd	r0, r1, [sp, #4]
 802056c:	4620      	mov	r0, r4
 802056e:	4629      	mov	r1, r5
 8020570:	beab      	bkpt	0x00ab
 8020572:	4604      	mov	r4, r0
 8020574:	4620      	mov	r0, r4
 8020576:	f7ff ffed 	bl	8020554 <checkerror>
 802057a:	b005      	add	sp, #20
 802057c:	bd30      	pop	{r4, r5, pc}

0802057e <_read>:
 802057e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8020580:	4615      	mov	r5, r2
 8020582:	9101      	str	r1, [sp, #4]
 8020584:	f7ff ffbe 	bl	8020504 <findslot>
 8020588:	4604      	mov	r4, r0
 802058a:	9901      	ldr	r1, [sp, #4]
 802058c:	b938      	cbnz	r0, 802059e <_read+0x20>
 802058e:	f7fd f9a3 	bl	801d8d8 <__errno>
 8020592:	2309      	movs	r3, #9
 8020594:	6003      	str	r3, [r0, #0]
 8020596:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802059a:	b003      	add	sp, #12
 802059c:	bd30      	pop	{r4, r5, pc}
 802059e:	462a      	mov	r2, r5
 80205a0:	6800      	ldr	r0, [r0, #0]
 80205a2:	f7ff ffdc 	bl	802055e <_swiread>
 80205a6:	1c43      	adds	r3, r0, #1
 80205a8:	d0f7      	beq.n	802059a <_read+0x1c>
 80205aa:	1a2a      	subs	r2, r5, r0
 80205ac:	6863      	ldr	r3, [r4, #4]
 80205ae:	4413      	add	r3, r2
 80205b0:	4610      	mov	r0, r2
 80205b2:	6063      	str	r3, [r4, #4]
 80205b4:	e7f1      	b.n	802059a <_read+0x1c>

080205b6 <_swilseek>:
 80205b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80205b8:	460c      	mov	r4, r1
 80205ba:	4616      	mov	r6, r2
 80205bc:	f7ff ffa2 	bl	8020504 <findslot>
 80205c0:	4605      	mov	r5, r0
 80205c2:	b940      	cbnz	r0, 80205d6 <_swilseek+0x20>
 80205c4:	f7fd f988 	bl	801d8d8 <__errno>
 80205c8:	2309      	movs	r3, #9
 80205ca:	6003      	str	r3, [r0, #0]
 80205cc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80205d0:	4620      	mov	r0, r4
 80205d2:	b003      	add	sp, #12
 80205d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80205d6:	2e02      	cmp	r6, #2
 80205d8:	d903      	bls.n	80205e2 <_swilseek+0x2c>
 80205da:	f7fd f97d 	bl	801d8d8 <__errno>
 80205de:	2316      	movs	r3, #22
 80205e0:	e7f3      	b.n	80205ca <_swilseek+0x14>
 80205e2:	2e01      	cmp	r6, #1
 80205e4:	d112      	bne.n	802060c <_swilseek+0x56>
 80205e6:	6843      	ldr	r3, [r0, #4]
 80205e8:	18e4      	adds	r4, r4, r3
 80205ea:	d4f6      	bmi.n	80205da <_swilseek+0x24>
 80205ec:	682b      	ldr	r3, [r5, #0]
 80205ee:	260a      	movs	r6, #10
 80205f0:	466f      	mov	r7, sp
 80205f2:	e9cd 3400 	strd	r3, r4, [sp]
 80205f6:	4630      	mov	r0, r6
 80205f8:	4639      	mov	r1, r7
 80205fa:	beab      	bkpt	0x00ab
 80205fc:	4606      	mov	r6, r0
 80205fe:	4630      	mov	r0, r6
 8020600:	f7ff ffa8 	bl	8020554 <checkerror>
 8020604:	2800      	cmp	r0, #0
 8020606:	dbe1      	blt.n	80205cc <_swilseek+0x16>
 8020608:	606c      	str	r4, [r5, #4]
 802060a:	e7e1      	b.n	80205d0 <_swilseek+0x1a>
 802060c:	2e02      	cmp	r6, #2
 802060e:	6803      	ldr	r3, [r0, #0]
 8020610:	d1ec      	bne.n	80205ec <_swilseek+0x36>
 8020612:	260c      	movs	r6, #12
 8020614:	466f      	mov	r7, sp
 8020616:	9300      	str	r3, [sp, #0]
 8020618:	4630      	mov	r0, r6
 802061a:	4639      	mov	r1, r7
 802061c:	beab      	bkpt	0x00ab
 802061e:	4606      	mov	r6, r0
 8020620:	4630      	mov	r0, r6
 8020622:	f7ff ff97 	bl	8020554 <checkerror>
 8020626:	1c43      	adds	r3, r0, #1
 8020628:	d0d0      	beq.n	80205cc <_swilseek+0x16>
 802062a:	4404      	add	r4, r0
 802062c:	e7de      	b.n	80205ec <_swilseek+0x36>

0802062e <_lseek>:
 802062e:	f7ff bfc2 	b.w	80205b6 <_swilseek>

08020632 <_swiwrite>:
 8020632:	b530      	push	{r4, r5, lr}
 8020634:	b085      	sub	sp, #20
 8020636:	2405      	movs	r4, #5
 8020638:	ad01      	add	r5, sp, #4
 802063a:	9203      	str	r2, [sp, #12]
 802063c:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8020640:	4620      	mov	r0, r4
 8020642:	4629      	mov	r1, r5
 8020644:	beab      	bkpt	0x00ab
 8020646:	4604      	mov	r4, r0
 8020648:	4620      	mov	r0, r4
 802064a:	f7ff ff83 	bl	8020554 <checkerror>
 802064e:	b005      	add	sp, #20
 8020650:	bd30      	pop	{r4, r5, pc}

08020652 <_write>:
 8020652:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8020654:	4615      	mov	r5, r2
 8020656:	9101      	str	r1, [sp, #4]
 8020658:	f7ff ff54 	bl	8020504 <findslot>
 802065c:	4604      	mov	r4, r0
 802065e:	9901      	ldr	r1, [sp, #4]
 8020660:	b930      	cbnz	r0, 8020670 <_write+0x1e>
 8020662:	f7fd f939 	bl	801d8d8 <__errno>
 8020666:	2309      	movs	r3, #9
 8020668:	6003      	str	r3, [r0, #0]
 802066a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802066e:	e012      	b.n	8020696 <_write+0x44>
 8020670:	462a      	mov	r2, r5
 8020672:	6800      	ldr	r0, [r0, #0]
 8020674:	f7ff ffdd 	bl	8020632 <_swiwrite>
 8020678:	2800      	cmp	r0, #0
 802067a:	dbf6      	blt.n	802066a <_write+0x18>
 802067c:	6862      	ldr	r2, [r4, #4]
 802067e:	1a2b      	subs	r3, r5, r0
 8020680:	42a8      	cmp	r0, r5
 8020682:	441a      	add	r2, r3
 8020684:	6062      	str	r2, [r4, #4]
 8020686:	d105      	bne.n	8020694 <_write+0x42>
 8020688:	2000      	movs	r0, #0
 802068a:	b003      	add	sp, #12
 802068c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020690:	f7ff bf52 	b.w	8020538 <error>
 8020694:	4618      	mov	r0, r3
 8020696:	b003      	add	sp, #12
 8020698:	bd30      	pop	{r4, r5, pc}

0802069a <_swiclose>:
 802069a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802069c:	2402      	movs	r4, #2
 802069e:	ad01      	add	r5, sp, #4
 80206a0:	9001      	str	r0, [sp, #4]
 80206a2:	4620      	mov	r0, r4
 80206a4:	4629      	mov	r1, r5
 80206a6:	beab      	bkpt	0x00ab
 80206a8:	4604      	mov	r4, r0
 80206aa:	4620      	mov	r0, r4
 80206ac:	f7ff ff52 	bl	8020554 <checkerror>
 80206b0:	b003      	add	sp, #12
 80206b2:	bd30      	pop	{r4, r5, pc}

080206b4 <_close>:
 80206b4:	b538      	push	{r3, r4, r5, lr}
 80206b6:	4605      	mov	r5, r0
 80206b8:	f7ff ff24 	bl	8020504 <findslot>
 80206bc:	4604      	mov	r4, r0
 80206be:	b930      	cbnz	r0, 80206ce <_close+0x1a>
 80206c0:	f7fd f90a 	bl	801d8d8 <__errno>
 80206c4:	2309      	movs	r3, #9
 80206c6:	6003      	str	r3, [r0, #0]
 80206c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80206cc:	bd38      	pop	{r3, r4, r5, pc}
 80206ce:	3d01      	subs	r5, #1
 80206d0:	2d01      	cmp	r5, #1
 80206d2:	d809      	bhi.n	80206e8 <_close+0x34>
 80206d4:	4b09      	ldr	r3, [pc, #36]	; (80206fc <_close+0x48>)
 80206d6:	689a      	ldr	r2, [r3, #8]
 80206d8:	691b      	ldr	r3, [r3, #16]
 80206da:	429a      	cmp	r2, r3
 80206dc:	d104      	bne.n	80206e8 <_close+0x34>
 80206de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80206e2:	6003      	str	r3, [r0, #0]
 80206e4:	2000      	movs	r0, #0
 80206e6:	e7f1      	b.n	80206cc <_close+0x18>
 80206e8:	6820      	ldr	r0, [r4, #0]
 80206ea:	f7ff ffd6 	bl	802069a <_swiclose>
 80206ee:	2800      	cmp	r0, #0
 80206f0:	d1ec      	bne.n	80206cc <_close+0x18>
 80206f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80206f6:	6023      	str	r3, [r4, #0]
 80206f8:	e7e8      	b.n	80206cc <_close+0x18>
 80206fa:	bf00      	nop
 80206fc:	200356a0 	.word	0x200356a0

08020700 <_getpid>:
 8020700:	2001      	movs	r0, #1
 8020702:	4770      	bx	lr

08020704 <_swistat>:
 8020704:	b570      	push	{r4, r5, r6, lr}
 8020706:	460c      	mov	r4, r1
 8020708:	f7ff fefc 	bl	8020504 <findslot>
 802070c:	4605      	mov	r5, r0
 802070e:	b930      	cbnz	r0, 802071e <_swistat+0x1a>
 8020710:	f7fd f8e2 	bl	801d8d8 <__errno>
 8020714:	2309      	movs	r3, #9
 8020716:	6003      	str	r3, [r0, #0]
 8020718:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802071c:	bd70      	pop	{r4, r5, r6, pc}
 802071e:	6863      	ldr	r3, [r4, #4]
 8020720:	260c      	movs	r6, #12
 8020722:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8020726:	6063      	str	r3, [r4, #4]
 8020728:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802072c:	64a3      	str	r3, [r4, #72]	; 0x48
 802072e:	4630      	mov	r0, r6
 8020730:	4629      	mov	r1, r5
 8020732:	beab      	bkpt	0x00ab
 8020734:	4605      	mov	r5, r0
 8020736:	4628      	mov	r0, r5
 8020738:	f7ff ff0c 	bl	8020554 <checkerror>
 802073c:	1c43      	adds	r3, r0, #1
 802073e:	bf1c      	itt	ne
 8020740:	6120      	strne	r0, [r4, #16]
 8020742:	2000      	movne	r0, #0
 8020744:	e7ea      	b.n	802071c <_swistat+0x18>

08020746 <_fstat>:
 8020746:	460b      	mov	r3, r1
 8020748:	2258      	movs	r2, #88	; 0x58
 802074a:	2100      	movs	r1, #0
 802074c:	b510      	push	{r4, lr}
 802074e:	4604      	mov	r4, r0
 8020750:	4618      	mov	r0, r3
 8020752:	f7fd f8b5 	bl	801d8c0 <memset>
 8020756:	4601      	mov	r1, r0
 8020758:	4620      	mov	r0, r4
 802075a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802075e:	f7ff bfd1 	b.w	8020704 <_swistat>

08020762 <_stat>:
 8020762:	b538      	push	{r3, r4, r5, lr}
 8020764:	460d      	mov	r5, r1
 8020766:	4604      	mov	r4, r0
 8020768:	2258      	movs	r2, #88	; 0x58
 802076a:	2100      	movs	r1, #0
 802076c:	4628      	mov	r0, r5
 802076e:	f7fd f8a7 	bl	801d8c0 <memset>
 8020772:	4620      	mov	r0, r4
 8020774:	2100      	movs	r1, #0
 8020776:	f000 f811 	bl	802079c <_swiopen>
 802077a:	1c43      	adds	r3, r0, #1
 802077c:	4604      	mov	r4, r0
 802077e:	d00b      	beq.n	8020798 <_stat+0x36>
 8020780:	686b      	ldr	r3, [r5, #4]
 8020782:	4629      	mov	r1, r5
 8020784:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8020788:	606b      	str	r3, [r5, #4]
 802078a:	f7ff ffbb 	bl	8020704 <_swistat>
 802078e:	4605      	mov	r5, r0
 8020790:	4620      	mov	r0, r4
 8020792:	462c      	mov	r4, r5
 8020794:	f7ff ff8e 	bl	80206b4 <_close>
 8020798:	4620      	mov	r0, r4
 802079a:	bd38      	pop	{r3, r4, r5, pc}

0802079c <_swiopen>:
 802079c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80207a0:	4607      	mov	r7, r0
 80207a2:	b097      	sub	sp, #92	; 0x5c
 80207a4:	460e      	mov	r6, r1
 80207a6:	2500      	movs	r5, #0
 80207a8:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 802084c <_swiopen+0xb0>
 80207ac:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 80207b0:	1c61      	adds	r1, r4, #1
 80207b2:	d036      	beq.n	8020822 <_swiopen+0x86>
 80207b4:	3501      	adds	r5, #1
 80207b6:	2d14      	cmp	r5, #20
 80207b8:	d1f8      	bne.n	80207ac <_swiopen+0x10>
 80207ba:	f7fd f88d 	bl	801d8d8 <__errno>
 80207be:	2318      	movs	r3, #24
 80207c0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80207c4:	6003      	str	r3, [r0, #0]
 80207c6:	e03c      	b.n	8020842 <_swiopen+0xa6>
 80207c8:	f3c6 4400 	ubfx	r4, r6, #16, #1
 80207cc:	f240 6301 	movw	r3, #1537	; 0x601
 80207d0:	07b2      	lsls	r2, r6, #30
 80207d2:	4638      	mov	r0, r7
 80207d4:	9700      	str	r7, [sp, #0]
 80207d6:	bf48      	it	mi
 80207d8:	f044 0402 	orrmi.w	r4, r4, #2
 80207dc:	421e      	tst	r6, r3
 80207de:	bf18      	it	ne
 80207e0:	f044 0404 	orrne.w	r4, r4, #4
 80207e4:	0733      	lsls	r3, r6, #28
 80207e6:	bf44      	itt	mi
 80207e8:	f024 0404 	bicmi.w	r4, r4, #4
 80207ec:	f044 0408 	orrmi.w	r4, r4, #8
 80207f0:	f7df fd42 	bl	8000278 <strlen>
 80207f4:	e9cd 4001 	strd	r4, r0, [sp, #4]
 80207f8:	2401      	movs	r4, #1
 80207fa:	4620      	mov	r0, r4
 80207fc:	4649      	mov	r1, r9
 80207fe:	beab      	bkpt	0x00ab
 8020800:	4604      	mov	r4, r0
 8020802:	2c00      	cmp	r4, #0
 8020804:	db08      	blt.n	8020818 <_swiopen+0x7c>
 8020806:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 802080a:	2300      	movs	r3, #0
 802080c:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8020810:	462c      	mov	r4, r5
 8020812:	f8c8 3004 	str.w	r3, [r8, #4]
 8020816:	e014      	b.n	8020842 <_swiopen+0xa6>
 8020818:	4620      	mov	r0, r4
 802081a:	f7ff fe8d 	bl	8020538 <error>
 802081e:	4604      	mov	r4, r0
 8020820:	e00f      	b.n	8020842 <_swiopen+0xa6>
 8020822:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8020826:	46e9      	mov	r9, sp
 8020828:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 802082c:	d1cc      	bne.n	80207c8 <_swiopen+0x2c>
 802082e:	4649      	mov	r1, r9
 8020830:	4638      	mov	r0, r7
 8020832:	f7ff ff96 	bl	8020762 <_stat>
 8020836:	3001      	adds	r0, #1
 8020838:	d0c6      	beq.n	80207c8 <_swiopen+0x2c>
 802083a:	f7fd f84d 	bl	801d8d8 <__errno>
 802083e:	2311      	movs	r3, #17
 8020840:	6003      	str	r3, [r0, #0]
 8020842:	4620      	mov	r0, r4
 8020844:	b017      	add	sp, #92	; 0x5c
 8020846:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802084a:	bf00      	nop
 802084c:	200356a0 	.word	0x200356a0

08020850 <_get_semihosting_exts>:
 8020850:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8020854:	4606      	mov	r6, r0
 8020856:	4615      	mov	r5, r2
 8020858:	460f      	mov	r7, r1
 802085a:	482a      	ldr	r0, [pc, #168]	; (8020904 <_get_semihosting_exts+0xb4>)
 802085c:	2100      	movs	r1, #0
 802085e:	f7ff ff9d 	bl	802079c <_swiopen>
 8020862:	4604      	mov	r4, r0
 8020864:	462a      	mov	r2, r5
 8020866:	2100      	movs	r1, #0
 8020868:	4630      	mov	r0, r6
 802086a:	f7fd f829 	bl	801d8c0 <memset>
 802086e:	1c63      	adds	r3, r4, #1
 8020870:	d016      	beq.n	80208a0 <_get_semihosting_exts+0x50>
 8020872:	4620      	mov	r0, r4
 8020874:	f04f 080c 	mov.w	r8, #12
 8020878:	f7ff fe44 	bl	8020504 <findslot>
 802087c:	4681      	mov	r9, r0
 802087e:	4640      	mov	r0, r8
 8020880:	4649      	mov	r1, r9
 8020882:	beab      	bkpt	0x00ab
 8020884:	4680      	mov	r8, r0
 8020886:	4640      	mov	r0, r8
 8020888:	f7ff fe64 	bl	8020554 <checkerror>
 802088c:	2803      	cmp	r0, #3
 802088e:	dd02      	ble.n	8020896 <_get_semihosting_exts+0x46>
 8020890:	1ec3      	subs	r3, r0, #3
 8020892:	42ab      	cmp	r3, r5
 8020894:	dc08      	bgt.n	80208a8 <_get_semihosting_exts+0x58>
 8020896:	4620      	mov	r0, r4
 8020898:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 802089c:	f7ff ff0a 	bl	80206b4 <_close>
 80208a0:	4620      	mov	r0, r4
 80208a2:	b003      	add	sp, #12
 80208a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80208a8:	2204      	movs	r2, #4
 80208aa:	4620      	mov	r0, r4
 80208ac:	eb0d 0102 	add.w	r1, sp, r2
 80208b0:	f7ff fe65 	bl	802057e <_read>
 80208b4:	2803      	cmp	r0, #3
 80208b6:	ddee      	ble.n	8020896 <_get_semihosting_exts+0x46>
 80208b8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80208bc:	2b53      	cmp	r3, #83	; 0x53
 80208be:	d1ea      	bne.n	8020896 <_get_semihosting_exts+0x46>
 80208c0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80208c4:	2b48      	cmp	r3, #72	; 0x48
 80208c6:	d1e6      	bne.n	8020896 <_get_semihosting_exts+0x46>
 80208c8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80208cc:	2b46      	cmp	r3, #70	; 0x46
 80208ce:	d1e2      	bne.n	8020896 <_get_semihosting_exts+0x46>
 80208d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80208d4:	2b42      	cmp	r3, #66	; 0x42
 80208d6:	d1de      	bne.n	8020896 <_get_semihosting_exts+0x46>
 80208d8:	2201      	movs	r2, #1
 80208da:	4639      	mov	r1, r7
 80208dc:	4620      	mov	r0, r4
 80208de:	f7ff fe6a 	bl	80205b6 <_swilseek>
 80208e2:	2800      	cmp	r0, #0
 80208e4:	dbd7      	blt.n	8020896 <_get_semihosting_exts+0x46>
 80208e6:	462a      	mov	r2, r5
 80208e8:	4631      	mov	r1, r6
 80208ea:	4620      	mov	r0, r4
 80208ec:	f7ff fe47 	bl	802057e <_read>
 80208f0:	4605      	mov	r5, r0
 80208f2:	4620      	mov	r0, r4
 80208f4:	f7ff fede 	bl	80206b4 <_close>
 80208f8:	4628      	mov	r0, r5
 80208fa:	f7ff fe2b 	bl	8020554 <checkerror>
 80208fe:	4604      	mov	r4, r0
 8020900:	e7ce      	b.n	80208a0 <_get_semihosting_exts+0x50>
 8020902:	bf00      	nop
 8020904:	08038870 	.word	0x08038870

08020908 <initialise_semihosting_exts>:
 8020908:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802090a:	2100      	movs	r1, #0
 802090c:	2201      	movs	r2, #1
 802090e:	4d09      	ldr	r5, [pc, #36]	; (8020934 <initialise_semihosting_exts+0x2c>)
 8020910:	a801      	add	r0, sp, #4
 8020912:	4c09      	ldr	r4, [pc, #36]	; (8020938 <initialise_semihosting_exts+0x30>)
 8020914:	6029      	str	r1, [r5, #0]
 8020916:	6022      	str	r2, [r4, #0]
 8020918:	f7ff ff9a 	bl	8020850 <_get_semihosting_exts>
 802091c:	2800      	cmp	r0, #0
 802091e:	dd07      	ble.n	8020930 <initialise_semihosting_exts+0x28>
 8020920:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8020924:	f003 0201 	and.w	r2, r3, #1
 8020928:	f003 0302 	and.w	r3, r3, #2
 802092c:	602a      	str	r2, [r5, #0]
 802092e:	6023      	str	r3, [r4, #0]
 8020930:	b003      	add	sp, #12
 8020932:	bd30      	pop	{r4, r5, pc}
 8020934:	200007b4 	.word	0x200007b4
 8020938:	200007b8 	.word	0x200007b8

0802093c <_has_ext_exit_extended>:
 802093c:	b510      	push	{r4, lr}
 802093e:	4c04      	ldr	r4, [pc, #16]	; (8020950 <_has_ext_exit_extended+0x14>)
 8020940:	6823      	ldr	r3, [r4, #0]
 8020942:	2b00      	cmp	r3, #0
 8020944:	da01      	bge.n	802094a <_has_ext_exit_extended+0xe>
 8020946:	f7ff ffdf 	bl	8020908 <initialise_semihosting_exts>
 802094a:	6820      	ldr	r0, [r4, #0]
 802094c:	bd10      	pop	{r4, pc}
 802094e:	bf00      	nop
 8020950:	200007b4 	.word	0x200007b4

08020954 <_has_ext_stdout_stderr>:
 8020954:	b510      	push	{r4, lr}
 8020956:	4c04      	ldr	r4, [pc, #16]	; (8020968 <_has_ext_stdout_stderr+0x14>)
 8020958:	6823      	ldr	r3, [r4, #0]
 802095a:	2b00      	cmp	r3, #0
 802095c:	da01      	bge.n	8020962 <_has_ext_stdout_stderr+0xe>
 802095e:	f7ff ffd3 	bl	8020908 <initialise_semihosting_exts>
 8020962:	6820      	ldr	r0, [r4, #0]
 8020964:	bd10      	pop	{r4, pc}
 8020966:	bf00      	nop
 8020968:	200007b8 	.word	0x200007b8

0802096c <initialise_monitor_handles>:
 802096c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020970:	2303      	movs	r3, #3
 8020972:	b085      	sub	sp, #20
 8020974:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8020a24 <initialise_monitor_handles+0xb8>
 8020978:	2400      	movs	r4, #0
 802097a:	af01      	add	r7, sp, #4
 802097c:	2501      	movs	r5, #1
 802097e:	f8cd 9004 	str.w	r9, [sp, #4]
 8020982:	9303      	str	r3, [sp, #12]
 8020984:	9402      	str	r4, [sp, #8]
 8020986:	4628      	mov	r0, r5
 8020988:	4639      	mov	r1, r7
 802098a:	beab      	bkpt	0x00ab
 802098c:	4605      	mov	r5, r0
 802098e:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8020a28 <initialise_monitor_handles+0xbc>
 8020992:	4623      	mov	r3, r4
 8020994:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8020998:	4c1f      	ldr	r4, [pc, #124]	; (8020a18 <initialise_monitor_handles+0xac>)
 802099a:	f8c8 5000 	str.w	r5, [r8]
 802099e:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80209a2:	3301      	adds	r3, #1
 80209a4:	2b14      	cmp	r3, #20
 80209a6:	d1fa      	bne.n	802099e <initialise_monitor_handles+0x32>
 80209a8:	4d1c      	ldr	r5, [pc, #112]	; (8020a1c <initialise_monitor_handles+0xb0>)
 80209aa:	f7ff ffd3 	bl	8020954 <_has_ext_stdout_stderr>
 80209ae:	b1d0      	cbz	r0, 80209e6 <initialise_monitor_handles+0x7a>
 80209b0:	f04f 0a03 	mov.w	sl, #3
 80209b4:	2304      	movs	r3, #4
 80209b6:	f8cd 9004 	str.w	r9, [sp, #4]
 80209ba:	2601      	movs	r6, #1
 80209bc:	f8cd a00c 	str.w	sl, [sp, #12]
 80209c0:	9302      	str	r3, [sp, #8]
 80209c2:	4630      	mov	r0, r6
 80209c4:	4639      	mov	r1, r7
 80209c6:	beab      	bkpt	0x00ab
 80209c8:	4683      	mov	fp, r0
 80209ca:	4b15      	ldr	r3, [pc, #84]	; (8020a20 <initialise_monitor_handles+0xb4>)
 80209cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80209d0:	f8c3 b000 	str.w	fp, [r3]
 80209d4:	2308      	movs	r3, #8
 80209d6:	f8cd a00c 	str.w	sl, [sp, #12]
 80209da:	9302      	str	r3, [sp, #8]
 80209dc:	4630      	mov	r0, r6
 80209de:	4639      	mov	r1, r7
 80209e0:	beab      	bkpt	0x00ab
 80209e2:	4606      	mov	r6, r0
 80209e4:	602e      	str	r6, [r5, #0]
 80209e6:	682b      	ldr	r3, [r5, #0]
 80209e8:	2600      	movs	r6, #0
 80209ea:	3301      	adds	r3, #1
 80209ec:	6066      	str	r6, [r4, #4]
 80209ee:	bf02      	ittt	eq
 80209f0:	4b0b      	ldreq	r3, [pc, #44]	; (8020a20 <initialise_monitor_handles+0xb4>)
 80209f2:	681b      	ldreq	r3, [r3, #0]
 80209f4:	602b      	streq	r3, [r5, #0]
 80209f6:	f8d8 3000 	ldr.w	r3, [r8]
 80209fa:	6023      	str	r3, [r4, #0]
 80209fc:	f7ff ffaa 	bl	8020954 <_has_ext_stdout_stderr>
 8020a00:	b130      	cbz	r0, 8020a10 <initialise_monitor_handles+0xa4>
 8020a02:	4b07      	ldr	r3, [pc, #28]	; (8020a20 <initialise_monitor_handles+0xb4>)
 8020a04:	681b      	ldr	r3, [r3, #0]
 8020a06:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8020a0a:	682b      	ldr	r3, [r5, #0]
 8020a0c:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8020a10:	b005      	add	sp, #20
 8020a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020a16:	bf00      	nop
 8020a18:	200356a0 	.word	0x200356a0
 8020a1c:	20035694 	.word	0x20035694
 8020a20:	2003569c 	.word	0x2003569c
 8020a24:	08038886 	.word	0x08038886
 8020a28:	20035698 	.word	0x20035698

08020a2c <_isatty>:
 8020a2c:	b570      	push	{r4, r5, r6, lr}
 8020a2e:	f7ff fd69 	bl	8020504 <findslot>
 8020a32:	2509      	movs	r5, #9
 8020a34:	4604      	mov	r4, r0
 8020a36:	b920      	cbnz	r0, 8020a42 <_isatty+0x16>
 8020a38:	f7fc ff4e 	bl	801d8d8 <__errno>
 8020a3c:	6005      	str	r5, [r0, #0]
 8020a3e:	4620      	mov	r0, r4
 8020a40:	bd70      	pop	{r4, r5, r6, pc}
 8020a42:	4628      	mov	r0, r5
 8020a44:	4621      	mov	r1, r4
 8020a46:	beab      	bkpt	0x00ab
 8020a48:	4604      	mov	r4, r0
 8020a4a:	2c01      	cmp	r4, #1
 8020a4c:	d0f7      	beq.n	8020a3e <_isatty+0x12>
 8020a4e:	f7fc ff43 	bl	801d8d8 <__errno>
 8020a52:	2400      	movs	r4, #0
 8020a54:	4605      	mov	r5, r0
 8020a56:	2613      	movs	r6, #19
 8020a58:	4630      	mov	r0, r6
 8020a5a:	4621      	mov	r1, r4
 8020a5c:	beab      	bkpt	0x00ab
 8020a5e:	4606      	mov	r6, r0
 8020a60:	602e      	str	r6, [r5, #0]
 8020a62:	e7ec      	b.n	8020a3e <_isatty+0x12>

08020a64 <_exit>:
 8020a64:	4601      	mov	r1, r0
 8020a66:	4a03      	ldr	r2, [pc, #12]	; (8020a74 <_exit+0x10>)
 8020a68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020a6c:	b508      	push	{r3, lr}
 8020a6e:	f000 f803 	bl	8020a78 <_kill_shared>
 8020a72:	bf00      	nop
 8020a74:	00020026 	.word	0x00020026

08020a78 <_kill_shared>:
 8020a78:	b507      	push	{r0, r1, r2, lr}
 8020a7a:	e9cd 2100 	strd	r2, r1, [sp]
 8020a7e:	f7ff ff5d 	bl	802093c <_has_ext_exit_extended>
 8020a82:	2800      	cmp	r0, #0
 8020a84:	bf14      	ite	ne
 8020a86:	2420      	movne	r4, #32
 8020a88:	2418      	moveq	r4, #24
 8020a8a:	f7ff ff57 	bl	802093c <_has_ext_exit_extended>
 8020a8e:	b120      	cbz	r0, 8020a9a <_kill_shared+0x22>
 8020a90:	466d      	mov	r5, sp
 8020a92:	4620      	mov	r0, r4
 8020a94:	4629      	mov	r1, r5
 8020a96:	beab      	bkpt	0x00ab
 8020a98:	4604      	mov	r4, r0
 8020a9a:	9d00      	ldr	r5, [sp, #0]
 8020a9c:	e7f9      	b.n	8020a92 <_kill_shared+0x1a>
	...

08020aa0 <_kill>:
 8020aa0:	2906      	cmp	r1, #6
 8020aa2:	b508      	push	{r3, lr}
 8020aa4:	bf0c      	ite	eq
 8020aa6:	4a02      	ldreq	r2, [pc, #8]	; (8020ab0 <_kill+0x10>)
 8020aa8:	4a02      	ldrne	r2, [pc, #8]	; (8020ab4 <_kill+0x14>)
 8020aaa:	f7ff ffe5 	bl	8020a78 <_kill_shared>
 8020aae:	bf00      	nop
 8020ab0:	00020023 	.word	0x00020023
 8020ab4:	00020026 	.word	0x00020026

08020ab8 <pow>:
 8020ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020aba:	ec55 4b11 	vmov	r4, r5, d1
 8020abe:	ed2d 8b02 	vpush	{d8}
 8020ac2:	eeb0 8a40 	vmov.f32	s16, s0
 8020ac6:	eef0 8a60 	vmov.f32	s17, s1
 8020aca:	f000 f871 	bl	8020bb0 <__ieee754_pow>
 8020ace:	4622      	mov	r2, r4
 8020ad0:	462b      	mov	r3, r5
 8020ad2:	4620      	mov	r0, r4
 8020ad4:	4629      	mov	r1, r5
 8020ad6:	ec57 6b10 	vmov	r6, r7, d0
 8020ada:	f7e0 f82b 	bl	8000b34 <__aeabi_dcmpun>
 8020ade:	2800      	cmp	r0, #0
 8020ae0:	d13b      	bne.n	8020b5a <pow+0xa2>
 8020ae2:	2200      	movs	r2, #0
 8020ae4:	2300      	movs	r3, #0
 8020ae6:	ec51 0b18 	vmov	r0, r1, d8
 8020aea:	f7df fff1 	bl	8000ad0 <__aeabi_dcmpeq>
 8020aee:	b1b8      	cbz	r0, 8020b20 <pow+0x68>
 8020af0:	2200      	movs	r2, #0
 8020af2:	2300      	movs	r3, #0
 8020af4:	4620      	mov	r0, r4
 8020af6:	4629      	mov	r1, r5
 8020af8:	f7df ffea 	bl	8000ad0 <__aeabi_dcmpeq>
 8020afc:	2800      	cmp	r0, #0
 8020afe:	d146      	bne.n	8020b8e <pow+0xd6>
 8020b00:	ec45 4b10 	vmov	d0, r4, r5
 8020b04:	f000 f848 	bl	8020b98 <finite>
 8020b08:	b338      	cbz	r0, 8020b5a <pow+0xa2>
 8020b0a:	2200      	movs	r2, #0
 8020b0c:	2300      	movs	r3, #0
 8020b0e:	4620      	mov	r0, r4
 8020b10:	4629      	mov	r1, r5
 8020b12:	f7df ffe7 	bl	8000ae4 <__aeabi_dcmplt>
 8020b16:	b300      	cbz	r0, 8020b5a <pow+0xa2>
 8020b18:	f7fc fede 	bl	801d8d8 <__errno>
 8020b1c:	2322      	movs	r3, #34	; 0x22
 8020b1e:	e01b      	b.n	8020b58 <pow+0xa0>
 8020b20:	ec47 6b10 	vmov	d0, r6, r7
 8020b24:	f000 f838 	bl	8020b98 <finite>
 8020b28:	b9e0      	cbnz	r0, 8020b64 <pow+0xac>
 8020b2a:	eeb0 0a48 	vmov.f32	s0, s16
 8020b2e:	eef0 0a68 	vmov.f32	s1, s17
 8020b32:	f000 f831 	bl	8020b98 <finite>
 8020b36:	b1a8      	cbz	r0, 8020b64 <pow+0xac>
 8020b38:	ec45 4b10 	vmov	d0, r4, r5
 8020b3c:	f000 f82c 	bl	8020b98 <finite>
 8020b40:	b180      	cbz	r0, 8020b64 <pow+0xac>
 8020b42:	4632      	mov	r2, r6
 8020b44:	463b      	mov	r3, r7
 8020b46:	4630      	mov	r0, r6
 8020b48:	4639      	mov	r1, r7
 8020b4a:	f7df fff3 	bl	8000b34 <__aeabi_dcmpun>
 8020b4e:	2800      	cmp	r0, #0
 8020b50:	d0e2      	beq.n	8020b18 <pow+0x60>
 8020b52:	f7fc fec1 	bl	801d8d8 <__errno>
 8020b56:	2321      	movs	r3, #33	; 0x21
 8020b58:	6003      	str	r3, [r0, #0]
 8020b5a:	ecbd 8b02 	vpop	{d8}
 8020b5e:	ec47 6b10 	vmov	d0, r6, r7
 8020b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020b64:	2200      	movs	r2, #0
 8020b66:	2300      	movs	r3, #0
 8020b68:	4630      	mov	r0, r6
 8020b6a:	4639      	mov	r1, r7
 8020b6c:	f7df ffb0 	bl	8000ad0 <__aeabi_dcmpeq>
 8020b70:	2800      	cmp	r0, #0
 8020b72:	d0f2      	beq.n	8020b5a <pow+0xa2>
 8020b74:	eeb0 0a48 	vmov.f32	s0, s16
 8020b78:	eef0 0a68 	vmov.f32	s1, s17
 8020b7c:	f000 f80c 	bl	8020b98 <finite>
 8020b80:	2800      	cmp	r0, #0
 8020b82:	d0ea      	beq.n	8020b5a <pow+0xa2>
 8020b84:	ec45 4b10 	vmov	d0, r4, r5
 8020b88:	f000 f806 	bl	8020b98 <finite>
 8020b8c:	e7c3      	b.n	8020b16 <pow+0x5e>
 8020b8e:	2600      	movs	r6, #0
 8020b90:	4f00      	ldr	r7, [pc, #0]	; (8020b94 <pow+0xdc>)
 8020b92:	e7e2      	b.n	8020b5a <pow+0xa2>
 8020b94:	3ff00000 	.word	0x3ff00000

08020b98 <finite>:
 8020b98:	b082      	sub	sp, #8
 8020b9a:	ed8d 0b00 	vstr	d0, [sp]
 8020b9e:	9801      	ldr	r0, [sp, #4]
 8020ba0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8020ba4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8020ba8:	0fc0      	lsrs	r0, r0, #31
 8020baa:	b002      	add	sp, #8
 8020bac:	4770      	bx	lr
	...

08020bb0 <__ieee754_pow>:
 8020bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020bb4:	ed2d 8b06 	vpush	{d8-d10}
 8020bb8:	b089      	sub	sp, #36	; 0x24
 8020bba:	ed8d 1b00 	vstr	d1, [sp]
 8020bbe:	e9dd 2900 	ldrd	r2, r9, [sp]
 8020bc2:	ec57 6b10 	vmov	r6, r7, d0
 8020bc6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8020bca:	ea58 0102 	orrs.w	r1, r8, r2
 8020bce:	d115      	bne.n	8020bfc <__ieee754_pow+0x4c>
 8020bd0:	19b3      	adds	r3, r6, r6
 8020bd2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8020bd6:	4152      	adcs	r2, r2
 8020bd8:	4299      	cmp	r1, r3
 8020bda:	4b89      	ldr	r3, [pc, #548]	; (8020e00 <__ieee754_pow+0x250>)
 8020bdc:	4193      	sbcs	r3, r2
 8020bde:	f080 84d2 	bcs.w	8021586 <__ieee754_pow+0x9d6>
 8020be2:	4630      	mov	r0, r6
 8020be4:	4639      	mov	r1, r7
 8020be6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020bea:	f7df fb53 	bl	8000294 <__adddf3>
 8020bee:	ec41 0b10 	vmov	d0, r0, r1
 8020bf2:	b009      	add	sp, #36	; 0x24
 8020bf4:	ecbd 8b06 	vpop	{d8-d10}
 8020bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020bfc:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8020c00:	4b80      	ldr	r3, [pc, #512]	; (8020e04 <__ieee754_pow+0x254>)
 8020c02:	463d      	mov	r5, r7
 8020c04:	ee10 aa10 	vmov	sl, s0
 8020c08:	429c      	cmp	r4, r3
 8020c0a:	dc06      	bgt.n	8020c1a <__ieee754_pow+0x6a>
 8020c0c:	d101      	bne.n	8020c12 <__ieee754_pow+0x62>
 8020c0e:	2e00      	cmp	r6, #0
 8020c10:	d1e7      	bne.n	8020be2 <__ieee754_pow+0x32>
 8020c12:	4598      	cmp	r8, r3
 8020c14:	dc01      	bgt.n	8020c1a <__ieee754_pow+0x6a>
 8020c16:	d10f      	bne.n	8020c38 <__ieee754_pow+0x88>
 8020c18:	b172      	cbz	r2, 8020c38 <__ieee754_pow+0x88>
 8020c1a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8020c1e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8020c22:	ea55 050a 	orrs.w	r5, r5, sl
 8020c26:	d1dc      	bne.n	8020be2 <__ieee754_pow+0x32>
 8020c28:	e9dd 3200 	ldrd	r3, r2, [sp]
 8020c2c:	18db      	adds	r3, r3, r3
 8020c2e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8020c32:	4152      	adcs	r2, r2
 8020c34:	429d      	cmp	r5, r3
 8020c36:	e7d0      	b.n	8020bda <__ieee754_pow+0x2a>
 8020c38:	2d00      	cmp	r5, #0
 8020c3a:	da3b      	bge.n	8020cb4 <__ieee754_pow+0x104>
 8020c3c:	4b72      	ldr	r3, [pc, #456]	; (8020e08 <__ieee754_pow+0x258>)
 8020c3e:	4598      	cmp	r8, r3
 8020c40:	dc51      	bgt.n	8020ce6 <__ieee754_pow+0x136>
 8020c42:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8020c46:	4598      	cmp	r8, r3
 8020c48:	f340 84ac 	ble.w	80215a4 <__ieee754_pow+0x9f4>
 8020c4c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8020c50:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8020c54:	2b14      	cmp	r3, #20
 8020c56:	dd0f      	ble.n	8020c78 <__ieee754_pow+0xc8>
 8020c58:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8020c5c:	fa22 f103 	lsr.w	r1, r2, r3
 8020c60:	fa01 f303 	lsl.w	r3, r1, r3
 8020c64:	4293      	cmp	r3, r2
 8020c66:	f040 849d 	bne.w	80215a4 <__ieee754_pow+0x9f4>
 8020c6a:	f001 0101 	and.w	r1, r1, #1
 8020c6e:	f1c1 0302 	rsb	r3, r1, #2
 8020c72:	9304      	str	r3, [sp, #16]
 8020c74:	b182      	cbz	r2, 8020c98 <__ieee754_pow+0xe8>
 8020c76:	e05f      	b.n	8020d38 <__ieee754_pow+0x188>
 8020c78:	2a00      	cmp	r2, #0
 8020c7a:	d15b      	bne.n	8020d34 <__ieee754_pow+0x184>
 8020c7c:	f1c3 0314 	rsb	r3, r3, #20
 8020c80:	fa48 f103 	asr.w	r1, r8, r3
 8020c84:	fa01 f303 	lsl.w	r3, r1, r3
 8020c88:	4543      	cmp	r3, r8
 8020c8a:	f040 8488 	bne.w	802159e <__ieee754_pow+0x9ee>
 8020c8e:	f001 0101 	and.w	r1, r1, #1
 8020c92:	f1c1 0302 	rsb	r3, r1, #2
 8020c96:	9304      	str	r3, [sp, #16]
 8020c98:	4b5c      	ldr	r3, [pc, #368]	; (8020e0c <__ieee754_pow+0x25c>)
 8020c9a:	4598      	cmp	r8, r3
 8020c9c:	d132      	bne.n	8020d04 <__ieee754_pow+0x154>
 8020c9e:	f1b9 0f00 	cmp.w	r9, #0
 8020ca2:	f280 8478 	bge.w	8021596 <__ieee754_pow+0x9e6>
 8020ca6:	4632      	mov	r2, r6
 8020ca8:	463b      	mov	r3, r7
 8020caa:	2000      	movs	r0, #0
 8020cac:	4957      	ldr	r1, [pc, #348]	; (8020e0c <__ieee754_pow+0x25c>)
 8020cae:	f7df fdd1 	bl	8000854 <__aeabi_ddiv>
 8020cb2:	e79c      	b.n	8020bee <__ieee754_pow+0x3e>
 8020cb4:	2300      	movs	r3, #0
 8020cb6:	9304      	str	r3, [sp, #16]
 8020cb8:	2a00      	cmp	r2, #0
 8020cba:	d13d      	bne.n	8020d38 <__ieee754_pow+0x188>
 8020cbc:	4b51      	ldr	r3, [pc, #324]	; (8020e04 <__ieee754_pow+0x254>)
 8020cbe:	4598      	cmp	r8, r3
 8020cc0:	d1ea      	bne.n	8020c98 <__ieee754_pow+0xe8>
 8020cc2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8020cc6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8020cca:	ea53 030a 	orrs.w	r3, r3, sl
 8020cce:	f000 845a 	beq.w	8021586 <__ieee754_pow+0x9d6>
 8020cd2:	4b4f      	ldr	r3, [pc, #316]	; (8020e10 <__ieee754_pow+0x260>)
 8020cd4:	429c      	cmp	r4, r3
 8020cd6:	dd08      	ble.n	8020cea <__ieee754_pow+0x13a>
 8020cd8:	f1b9 0f00 	cmp.w	r9, #0
 8020cdc:	f2c0 8457 	blt.w	802158e <__ieee754_pow+0x9de>
 8020ce0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020ce4:	e783      	b.n	8020bee <__ieee754_pow+0x3e>
 8020ce6:	2302      	movs	r3, #2
 8020ce8:	e7e5      	b.n	8020cb6 <__ieee754_pow+0x106>
 8020cea:	f1b9 0f00 	cmp.w	r9, #0
 8020cee:	f04f 0000 	mov.w	r0, #0
 8020cf2:	f04f 0100 	mov.w	r1, #0
 8020cf6:	f6bf af7a 	bge.w	8020bee <__ieee754_pow+0x3e>
 8020cfa:	e9dd 0300 	ldrd	r0, r3, [sp]
 8020cfe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8020d02:	e774      	b.n	8020bee <__ieee754_pow+0x3e>
 8020d04:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8020d08:	d106      	bne.n	8020d18 <__ieee754_pow+0x168>
 8020d0a:	4632      	mov	r2, r6
 8020d0c:	463b      	mov	r3, r7
 8020d0e:	4630      	mov	r0, r6
 8020d10:	4639      	mov	r1, r7
 8020d12:	f7df fc75 	bl	8000600 <__aeabi_dmul>
 8020d16:	e76a      	b.n	8020bee <__ieee754_pow+0x3e>
 8020d18:	4b3e      	ldr	r3, [pc, #248]	; (8020e14 <__ieee754_pow+0x264>)
 8020d1a:	4599      	cmp	r9, r3
 8020d1c:	d10c      	bne.n	8020d38 <__ieee754_pow+0x188>
 8020d1e:	2d00      	cmp	r5, #0
 8020d20:	db0a      	blt.n	8020d38 <__ieee754_pow+0x188>
 8020d22:	ec47 6b10 	vmov	d0, r6, r7
 8020d26:	b009      	add	sp, #36	; 0x24
 8020d28:	ecbd 8b06 	vpop	{d8-d10}
 8020d2c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d30:	f000 bd24 	b.w	802177c <__ieee754_sqrt>
 8020d34:	2300      	movs	r3, #0
 8020d36:	9304      	str	r3, [sp, #16]
 8020d38:	ec47 6b10 	vmov	d0, r6, r7
 8020d3c:	f000 fc96 	bl	802166c <fabs>
 8020d40:	ec51 0b10 	vmov	r0, r1, d0
 8020d44:	f1ba 0f00 	cmp.w	sl, #0
 8020d48:	d129      	bne.n	8020d9e <__ieee754_pow+0x1ee>
 8020d4a:	b124      	cbz	r4, 8020d56 <__ieee754_pow+0x1a6>
 8020d4c:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8020d50:	4b2e      	ldr	r3, [pc, #184]	; (8020e0c <__ieee754_pow+0x25c>)
 8020d52:	429a      	cmp	r2, r3
 8020d54:	d123      	bne.n	8020d9e <__ieee754_pow+0x1ee>
 8020d56:	f1b9 0f00 	cmp.w	r9, #0
 8020d5a:	da05      	bge.n	8020d68 <__ieee754_pow+0x1b8>
 8020d5c:	4602      	mov	r2, r0
 8020d5e:	460b      	mov	r3, r1
 8020d60:	2000      	movs	r0, #0
 8020d62:	492a      	ldr	r1, [pc, #168]	; (8020e0c <__ieee754_pow+0x25c>)
 8020d64:	f7df fd76 	bl	8000854 <__aeabi_ddiv>
 8020d68:	2d00      	cmp	r5, #0
 8020d6a:	f6bf af40 	bge.w	8020bee <__ieee754_pow+0x3e>
 8020d6e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8020d72:	9b04      	ldr	r3, [sp, #16]
 8020d74:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8020d78:	431c      	orrs	r4, r3
 8020d7a:	d108      	bne.n	8020d8e <__ieee754_pow+0x1de>
 8020d7c:	4602      	mov	r2, r0
 8020d7e:	460b      	mov	r3, r1
 8020d80:	4610      	mov	r0, r2
 8020d82:	4619      	mov	r1, r3
 8020d84:	f7df fa84 	bl	8000290 <__aeabi_dsub>
 8020d88:	4602      	mov	r2, r0
 8020d8a:	460b      	mov	r3, r1
 8020d8c:	e78f      	b.n	8020cae <__ieee754_pow+0xfe>
 8020d8e:	9b04      	ldr	r3, [sp, #16]
 8020d90:	2b01      	cmp	r3, #1
 8020d92:	f47f af2c 	bne.w	8020bee <__ieee754_pow+0x3e>
 8020d96:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8020d9a:	4619      	mov	r1, r3
 8020d9c:	e727      	b.n	8020bee <__ieee754_pow+0x3e>
 8020d9e:	0feb      	lsrs	r3, r5, #31
 8020da0:	3b01      	subs	r3, #1
 8020da2:	9306      	str	r3, [sp, #24]
 8020da4:	9a06      	ldr	r2, [sp, #24]
 8020da6:	9b04      	ldr	r3, [sp, #16]
 8020da8:	4313      	orrs	r3, r2
 8020daa:	d102      	bne.n	8020db2 <__ieee754_pow+0x202>
 8020dac:	4632      	mov	r2, r6
 8020dae:	463b      	mov	r3, r7
 8020db0:	e7e6      	b.n	8020d80 <__ieee754_pow+0x1d0>
 8020db2:	4b19      	ldr	r3, [pc, #100]	; (8020e18 <__ieee754_pow+0x268>)
 8020db4:	4598      	cmp	r8, r3
 8020db6:	f340 80fb 	ble.w	8020fb0 <__ieee754_pow+0x400>
 8020dba:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8020dbe:	4598      	cmp	r8, r3
 8020dc0:	4b13      	ldr	r3, [pc, #76]	; (8020e10 <__ieee754_pow+0x260>)
 8020dc2:	dd0c      	ble.n	8020dde <__ieee754_pow+0x22e>
 8020dc4:	429c      	cmp	r4, r3
 8020dc6:	dc0f      	bgt.n	8020de8 <__ieee754_pow+0x238>
 8020dc8:	f1b9 0f00 	cmp.w	r9, #0
 8020dcc:	da0f      	bge.n	8020dee <__ieee754_pow+0x23e>
 8020dce:	2000      	movs	r0, #0
 8020dd0:	b009      	add	sp, #36	; 0x24
 8020dd2:	ecbd 8b06 	vpop	{d8-d10}
 8020dd6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020dda:	f000 bc3e 	b.w	802165a <__math_oflow>
 8020dde:	429c      	cmp	r4, r3
 8020de0:	dbf2      	blt.n	8020dc8 <__ieee754_pow+0x218>
 8020de2:	4b0a      	ldr	r3, [pc, #40]	; (8020e0c <__ieee754_pow+0x25c>)
 8020de4:	429c      	cmp	r4, r3
 8020de6:	dd19      	ble.n	8020e1c <__ieee754_pow+0x26c>
 8020de8:	f1b9 0f00 	cmp.w	r9, #0
 8020dec:	dcef      	bgt.n	8020dce <__ieee754_pow+0x21e>
 8020dee:	2000      	movs	r0, #0
 8020df0:	b009      	add	sp, #36	; 0x24
 8020df2:	ecbd 8b06 	vpop	{d8-d10}
 8020df6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020dfa:	f000 bc25 	b.w	8021648 <__math_uflow>
 8020dfe:	bf00      	nop
 8020e00:	fff00000 	.word	0xfff00000
 8020e04:	7ff00000 	.word	0x7ff00000
 8020e08:	433fffff 	.word	0x433fffff
 8020e0c:	3ff00000 	.word	0x3ff00000
 8020e10:	3fefffff 	.word	0x3fefffff
 8020e14:	3fe00000 	.word	0x3fe00000
 8020e18:	41e00000 	.word	0x41e00000
 8020e1c:	2200      	movs	r2, #0
 8020e1e:	4b60      	ldr	r3, [pc, #384]	; (8020fa0 <__ieee754_pow+0x3f0>)
 8020e20:	f7df fa36 	bl	8000290 <__aeabi_dsub>
 8020e24:	4604      	mov	r4, r0
 8020e26:	460d      	mov	r5, r1
 8020e28:	a353      	add	r3, pc, #332	; (adr r3, 8020f78 <__ieee754_pow+0x3c8>)
 8020e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e2e:	f7df fbe7 	bl	8000600 <__aeabi_dmul>
 8020e32:	4606      	mov	r6, r0
 8020e34:	460f      	mov	r7, r1
 8020e36:	4620      	mov	r0, r4
 8020e38:	4629      	mov	r1, r5
 8020e3a:	a351      	add	r3, pc, #324	; (adr r3, 8020f80 <__ieee754_pow+0x3d0>)
 8020e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e40:	f7df fbde 	bl	8000600 <__aeabi_dmul>
 8020e44:	2200      	movs	r2, #0
 8020e46:	4682      	mov	sl, r0
 8020e48:	468b      	mov	fp, r1
 8020e4a:	4b56      	ldr	r3, [pc, #344]	; (8020fa4 <__ieee754_pow+0x3f4>)
 8020e4c:	4620      	mov	r0, r4
 8020e4e:	4629      	mov	r1, r5
 8020e50:	f7df fbd6 	bl	8000600 <__aeabi_dmul>
 8020e54:	4602      	mov	r2, r0
 8020e56:	460b      	mov	r3, r1
 8020e58:	a14b      	add	r1, pc, #300	; (adr r1, 8020f88 <__ieee754_pow+0x3d8>)
 8020e5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020e5e:	f7df fa17 	bl	8000290 <__aeabi_dsub>
 8020e62:	4622      	mov	r2, r4
 8020e64:	462b      	mov	r3, r5
 8020e66:	f7df fbcb 	bl	8000600 <__aeabi_dmul>
 8020e6a:	4602      	mov	r2, r0
 8020e6c:	460b      	mov	r3, r1
 8020e6e:	2000      	movs	r0, #0
 8020e70:	494d      	ldr	r1, [pc, #308]	; (8020fa8 <__ieee754_pow+0x3f8>)
 8020e72:	f7df fa0d 	bl	8000290 <__aeabi_dsub>
 8020e76:	4680      	mov	r8, r0
 8020e78:	4689      	mov	r9, r1
 8020e7a:	4622      	mov	r2, r4
 8020e7c:	462b      	mov	r3, r5
 8020e7e:	4620      	mov	r0, r4
 8020e80:	4629      	mov	r1, r5
 8020e82:	f7df fbbd 	bl	8000600 <__aeabi_dmul>
 8020e86:	4602      	mov	r2, r0
 8020e88:	460b      	mov	r3, r1
 8020e8a:	4640      	mov	r0, r8
 8020e8c:	4649      	mov	r1, r9
 8020e8e:	f7df fbb7 	bl	8000600 <__aeabi_dmul>
 8020e92:	a33f      	add	r3, pc, #252	; (adr r3, 8020f90 <__ieee754_pow+0x3e0>)
 8020e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e98:	f7df fbb2 	bl	8000600 <__aeabi_dmul>
 8020e9c:	4602      	mov	r2, r0
 8020e9e:	460b      	mov	r3, r1
 8020ea0:	4650      	mov	r0, sl
 8020ea2:	4659      	mov	r1, fp
 8020ea4:	f7df f9f4 	bl	8000290 <__aeabi_dsub>
 8020ea8:	4602      	mov	r2, r0
 8020eaa:	460b      	mov	r3, r1
 8020eac:	4680      	mov	r8, r0
 8020eae:	4689      	mov	r9, r1
 8020eb0:	4630      	mov	r0, r6
 8020eb2:	4639      	mov	r1, r7
 8020eb4:	f7df f9ee 	bl	8000294 <__adddf3>
 8020eb8:	2000      	movs	r0, #0
 8020eba:	4632      	mov	r2, r6
 8020ebc:	463b      	mov	r3, r7
 8020ebe:	4604      	mov	r4, r0
 8020ec0:	460d      	mov	r5, r1
 8020ec2:	f7df f9e5 	bl	8000290 <__aeabi_dsub>
 8020ec6:	4602      	mov	r2, r0
 8020ec8:	460b      	mov	r3, r1
 8020eca:	4640      	mov	r0, r8
 8020ecc:	4649      	mov	r1, r9
 8020ece:	f7df f9df 	bl	8000290 <__aeabi_dsub>
 8020ed2:	9b04      	ldr	r3, [sp, #16]
 8020ed4:	9a06      	ldr	r2, [sp, #24]
 8020ed6:	4682      	mov	sl, r0
 8020ed8:	3b01      	subs	r3, #1
 8020eda:	468b      	mov	fp, r1
 8020edc:	4313      	orrs	r3, r2
 8020ede:	f040 81e7 	bne.w	80212b0 <__ieee754_pow+0x700>
 8020ee2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8020f98 <__ieee754_pow+0x3e8>
 8020ee6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8020eea:	2600      	movs	r6, #0
 8020eec:	eeb0 8a47 	vmov.f32	s16, s14
 8020ef0:	eef0 8a67 	vmov.f32	s17, s15
 8020ef4:	463b      	mov	r3, r7
 8020ef6:	4632      	mov	r2, r6
 8020ef8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020efc:	f7df f9c8 	bl	8000290 <__aeabi_dsub>
 8020f00:	4622      	mov	r2, r4
 8020f02:	462b      	mov	r3, r5
 8020f04:	f7df fb7c 	bl	8000600 <__aeabi_dmul>
 8020f08:	4680      	mov	r8, r0
 8020f0a:	4689      	mov	r9, r1
 8020f0c:	4650      	mov	r0, sl
 8020f0e:	4659      	mov	r1, fp
 8020f10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020f14:	f7df fb74 	bl	8000600 <__aeabi_dmul>
 8020f18:	4602      	mov	r2, r0
 8020f1a:	460b      	mov	r3, r1
 8020f1c:	4640      	mov	r0, r8
 8020f1e:	4649      	mov	r1, r9
 8020f20:	f7df f9b8 	bl	8000294 <__adddf3>
 8020f24:	4680      	mov	r8, r0
 8020f26:	4689      	mov	r9, r1
 8020f28:	4632      	mov	r2, r6
 8020f2a:	463b      	mov	r3, r7
 8020f2c:	4620      	mov	r0, r4
 8020f2e:	4629      	mov	r1, r5
 8020f30:	f7df fb66 	bl	8000600 <__aeabi_dmul>
 8020f34:	460b      	mov	r3, r1
 8020f36:	4604      	mov	r4, r0
 8020f38:	460d      	mov	r5, r1
 8020f3a:	4602      	mov	r2, r0
 8020f3c:	4649      	mov	r1, r9
 8020f3e:	4640      	mov	r0, r8
 8020f40:	f7df f9a8 	bl	8000294 <__adddf3>
 8020f44:	4b19      	ldr	r3, [pc, #100]	; (8020fac <__ieee754_pow+0x3fc>)
 8020f46:	4606      	mov	r6, r0
 8020f48:	460f      	mov	r7, r1
 8020f4a:	4299      	cmp	r1, r3
 8020f4c:	468b      	mov	fp, r1
 8020f4e:	ec45 4b19 	vmov	d9, r4, r5
 8020f52:	f340 82f1 	ble.w	8021538 <__ieee754_pow+0x988>
 8020f56:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8020f5a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8020f5e:	4303      	orrs	r3, r0
 8020f60:	f000 81e4 	beq.w	802132c <__ieee754_pow+0x77c>
 8020f64:	2200      	movs	r2, #0
 8020f66:	2300      	movs	r3, #0
 8020f68:	ec51 0b18 	vmov	r0, r1, d8
 8020f6c:	f7df fdba 	bl	8000ae4 <__aeabi_dcmplt>
 8020f70:	3800      	subs	r0, #0
 8020f72:	bf18      	it	ne
 8020f74:	2001      	movne	r0, #1
 8020f76:	e72b      	b.n	8020dd0 <__ieee754_pow+0x220>
 8020f78:	60000000 	.word	0x60000000
 8020f7c:	3ff71547 	.word	0x3ff71547
 8020f80:	f85ddf44 	.word	0xf85ddf44
 8020f84:	3e54ae0b 	.word	0x3e54ae0b
 8020f88:	55555555 	.word	0x55555555
 8020f8c:	3fd55555 	.word	0x3fd55555
 8020f90:	652b82fe 	.word	0x652b82fe
 8020f94:	3ff71547 	.word	0x3ff71547
 8020f98:	00000000 	.word	0x00000000
 8020f9c:	bff00000 	.word	0xbff00000
 8020fa0:	3ff00000 	.word	0x3ff00000
 8020fa4:	3fd00000 	.word	0x3fd00000
 8020fa8:	3fe00000 	.word	0x3fe00000
 8020fac:	408fffff 	.word	0x408fffff
 8020fb0:	4bd5      	ldr	r3, [pc, #852]	; (8021308 <__ieee754_pow+0x758>)
 8020fb2:	2200      	movs	r2, #0
 8020fb4:	402b      	ands	r3, r5
 8020fb6:	b92b      	cbnz	r3, 8020fc4 <__ieee754_pow+0x414>
 8020fb8:	4bd4      	ldr	r3, [pc, #848]	; (802130c <__ieee754_pow+0x75c>)
 8020fba:	f7df fb21 	bl	8000600 <__aeabi_dmul>
 8020fbe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8020fc2:	460c      	mov	r4, r1
 8020fc4:	1523      	asrs	r3, r4, #20
 8020fc6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8020fca:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8020fce:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8020fd2:	4413      	add	r3, r2
 8020fd4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8020fd8:	9305      	str	r3, [sp, #20]
 8020fda:	4bcd      	ldr	r3, [pc, #820]	; (8021310 <__ieee754_pow+0x760>)
 8020fdc:	429c      	cmp	r4, r3
 8020fde:	dd08      	ble.n	8020ff2 <__ieee754_pow+0x442>
 8020fe0:	4bcc      	ldr	r3, [pc, #816]	; (8021314 <__ieee754_pow+0x764>)
 8020fe2:	429c      	cmp	r4, r3
 8020fe4:	f340 8162 	ble.w	80212ac <__ieee754_pow+0x6fc>
 8020fe8:	9b05      	ldr	r3, [sp, #20]
 8020fea:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8020fee:	3301      	adds	r3, #1
 8020ff0:	9305      	str	r3, [sp, #20]
 8020ff2:	2400      	movs	r4, #0
 8020ff4:	00e3      	lsls	r3, r4, #3
 8020ff6:	4682      	mov	sl, r0
 8020ff8:	4629      	mov	r1, r5
 8020ffa:	46ab      	mov	fp, r5
 8020ffc:	9307      	str	r3, [sp, #28]
 8020ffe:	4bc6      	ldr	r3, [pc, #792]	; (8021318 <__ieee754_pow+0x768>)
 8021000:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8021004:	ed93 7b00 	vldr	d7, [r3]
 8021008:	eeb0 9a47 	vmov.f32	s18, s14
 802100c:	eef0 9a67 	vmov.f32	s19, s15
 8021010:	ec53 2b17 	vmov	r2, r3, d7
 8021014:	f7df f93c 	bl	8000290 <__aeabi_dsub>
 8021018:	4652      	mov	r2, sl
 802101a:	4606      	mov	r6, r0
 802101c:	460f      	mov	r7, r1
 802101e:	462b      	mov	r3, r5
 8021020:	106d      	asrs	r5, r5, #1
 8021022:	ec51 0b19 	vmov	r0, r1, d9
 8021026:	f7df f935 	bl	8000294 <__adddf3>
 802102a:	4602      	mov	r2, r0
 802102c:	460b      	mov	r3, r1
 802102e:	2000      	movs	r0, #0
 8021030:	49ba      	ldr	r1, [pc, #744]	; (802131c <__ieee754_pow+0x76c>)
 8021032:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8021036:	f7df fc0d 	bl	8000854 <__aeabi_ddiv>
 802103a:	4602      	mov	r2, r0
 802103c:	460b      	mov	r3, r1
 802103e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8021042:	ec41 0b1a 	vmov	d10, r0, r1
 8021046:	4630      	mov	r0, r6
 8021048:	4639      	mov	r1, r7
 802104a:	f7df fad9 	bl	8000600 <__aeabi_dmul>
 802104e:	2300      	movs	r3, #0
 8021050:	2200      	movs	r2, #0
 8021052:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8021056:	9302      	str	r3, [sp, #8]
 8021058:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 802105c:	4614      	mov	r4, r2
 802105e:	461d      	mov	r5, r3
 8021060:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8021064:	ec41 0b18 	vmov	d8, r0, r1
 8021068:	4640      	mov	r0, r8
 802106a:	4649      	mov	r1, r9
 802106c:	f7df fac8 	bl	8000600 <__aeabi_dmul>
 8021070:	4602      	mov	r2, r0
 8021072:	460b      	mov	r3, r1
 8021074:	4630      	mov	r0, r6
 8021076:	4639      	mov	r1, r7
 8021078:	f7df f90a 	bl	8000290 <__aeabi_dsub>
 802107c:	4606      	mov	r6, r0
 802107e:	460f      	mov	r7, r1
 8021080:	4620      	mov	r0, r4
 8021082:	4629      	mov	r1, r5
 8021084:	ec53 2b19 	vmov	r2, r3, d9
 8021088:	f7df f902 	bl	8000290 <__aeabi_dsub>
 802108c:	4602      	mov	r2, r0
 802108e:	460b      	mov	r3, r1
 8021090:	4650      	mov	r0, sl
 8021092:	4659      	mov	r1, fp
 8021094:	f7df f8fc 	bl	8000290 <__aeabi_dsub>
 8021098:	4642      	mov	r2, r8
 802109a:	464b      	mov	r3, r9
 802109c:	f7df fab0 	bl	8000600 <__aeabi_dmul>
 80210a0:	4602      	mov	r2, r0
 80210a2:	460b      	mov	r3, r1
 80210a4:	4630      	mov	r0, r6
 80210a6:	4639      	mov	r1, r7
 80210a8:	f7df f8f2 	bl	8000290 <__aeabi_dsub>
 80210ac:	ec53 2b1a 	vmov	r2, r3, d10
 80210b0:	f7df faa6 	bl	8000600 <__aeabi_dmul>
 80210b4:	ec53 2b18 	vmov	r2, r3, d8
 80210b8:	ec41 0b19 	vmov	d9, r0, r1
 80210bc:	ec51 0b18 	vmov	r0, r1, d8
 80210c0:	f7df fa9e 	bl	8000600 <__aeabi_dmul>
 80210c4:	4604      	mov	r4, r0
 80210c6:	460d      	mov	r5, r1
 80210c8:	a37b      	add	r3, pc, #492	; (adr r3, 80212b8 <__ieee754_pow+0x708>)
 80210ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80210ce:	f7df fa97 	bl	8000600 <__aeabi_dmul>
 80210d2:	a37b      	add	r3, pc, #492	; (adr r3, 80212c0 <__ieee754_pow+0x710>)
 80210d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80210d8:	f7df f8dc 	bl	8000294 <__adddf3>
 80210dc:	4622      	mov	r2, r4
 80210de:	462b      	mov	r3, r5
 80210e0:	f7df fa8e 	bl	8000600 <__aeabi_dmul>
 80210e4:	a378      	add	r3, pc, #480	; (adr r3, 80212c8 <__ieee754_pow+0x718>)
 80210e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80210ea:	f7df f8d3 	bl	8000294 <__adddf3>
 80210ee:	4622      	mov	r2, r4
 80210f0:	462b      	mov	r3, r5
 80210f2:	f7df fa85 	bl	8000600 <__aeabi_dmul>
 80210f6:	a376      	add	r3, pc, #472	; (adr r3, 80212d0 <__ieee754_pow+0x720>)
 80210f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80210fc:	f7df f8ca 	bl	8000294 <__adddf3>
 8021100:	4622      	mov	r2, r4
 8021102:	462b      	mov	r3, r5
 8021104:	f7df fa7c 	bl	8000600 <__aeabi_dmul>
 8021108:	a373      	add	r3, pc, #460	; (adr r3, 80212d8 <__ieee754_pow+0x728>)
 802110a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802110e:	f7df f8c1 	bl	8000294 <__adddf3>
 8021112:	4622      	mov	r2, r4
 8021114:	462b      	mov	r3, r5
 8021116:	f7df fa73 	bl	8000600 <__aeabi_dmul>
 802111a:	a371      	add	r3, pc, #452	; (adr r3, 80212e0 <__ieee754_pow+0x730>)
 802111c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021120:	f7df f8b8 	bl	8000294 <__adddf3>
 8021124:	4606      	mov	r6, r0
 8021126:	460f      	mov	r7, r1
 8021128:	4622      	mov	r2, r4
 802112a:	462b      	mov	r3, r5
 802112c:	4620      	mov	r0, r4
 802112e:	4629      	mov	r1, r5
 8021130:	f7df fa66 	bl	8000600 <__aeabi_dmul>
 8021134:	4602      	mov	r2, r0
 8021136:	460b      	mov	r3, r1
 8021138:	4630      	mov	r0, r6
 802113a:	4639      	mov	r1, r7
 802113c:	f7df fa60 	bl	8000600 <__aeabi_dmul>
 8021140:	4642      	mov	r2, r8
 8021142:	4604      	mov	r4, r0
 8021144:	460d      	mov	r5, r1
 8021146:	464b      	mov	r3, r9
 8021148:	ec51 0b18 	vmov	r0, r1, d8
 802114c:	f7df f8a2 	bl	8000294 <__adddf3>
 8021150:	ec53 2b19 	vmov	r2, r3, d9
 8021154:	f7df fa54 	bl	8000600 <__aeabi_dmul>
 8021158:	4622      	mov	r2, r4
 802115a:	462b      	mov	r3, r5
 802115c:	f7df f89a 	bl	8000294 <__adddf3>
 8021160:	4642      	mov	r2, r8
 8021162:	4682      	mov	sl, r0
 8021164:	468b      	mov	fp, r1
 8021166:	464b      	mov	r3, r9
 8021168:	4640      	mov	r0, r8
 802116a:	4649      	mov	r1, r9
 802116c:	f7df fa48 	bl	8000600 <__aeabi_dmul>
 8021170:	2200      	movs	r2, #0
 8021172:	4b6b      	ldr	r3, [pc, #428]	; (8021320 <__ieee754_pow+0x770>)
 8021174:	4606      	mov	r6, r0
 8021176:	460f      	mov	r7, r1
 8021178:	f7df f88c 	bl	8000294 <__adddf3>
 802117c:	4652      	mov	r2, sl
 802117e:	465b      	mov	r3, fp
 8021180:	f7df f888 	bl	8000294 <__adddf3>
 8021184:	2000      	movs	r0, #0
 8021186:	460d      	mov	r5, r1
 8021188:	460b      	mov	r3, r1
 802118a:	4604      	mov	r4, r0
 802118c:	4602      	mov	r2, r0
 802118e:	4649      	mov	r1, r9
 8021190:	4640      	mov	r0, r8
 8021192:	f7df fa35 	bl	8000600 <__aeabi_dmul>
 8021196:	2200      	movs	r2, #0
 8021198:	4680      	mov	r8, r0
 802119a:	4689      	mov	r9, r1
 802119c:	4b60      	ldr	r3, [pc, #384]	; (8021320 <__ieee754_pow+0x770>)
 802119e:	4620      	mov	r0, r4
 80211a0:	4629      	mov	r1, r5
 80211a2:	f7df f875 	bl	8000290 <__aeabi_dsub>
 80211a6:	4632      	mov	r2, r6
 80211a8:	463b      	mov	r3, r7
 80211aa:	f7df f871 	bl	8000290 <__aeabi_dsub>
 80211ae:	4602      	mov	r2, r0
 80211b0:	460b      	mov	r3, r1
 80211b2:	4650      	mov	r0, sl
 80211b4:	4659      	mov	r1, fp
 80211b6:	f7df f86b 	bl	8000290 <__aeabi_dsub>
 80211ba:	ec53 2b18 	vmov	r2, r3, d8
 80211be:	f7df fa1f 	bl	8000600 <__aeabi_dmul>
 80211c2:	4606      	mov	r6, r0
 80211c4:	460f      	mov	r7, r1
 80211c6:	4622      	mov	r2, r4
 80211c8:	462b      	mov	r3, r5
 80211ca:	ec51 0b19 	vmov	r0, r1, d9
 80211ce:	f7df fa17 	bl	8000600 <__aeabi_dmul>
 80211d2:	4602      	mov	r2, r0
 80211d4:	460b      	mov	r3, r1
 80211d6:	4630      	mov	r0, r6
 80211d8:	4639      	mov	r1, r7
 80211da:	f7df f85b 	bl	8000294 <__adddf3>
 80211de:	4606      	mov	r6, r0
 80211e0:	460f      	mov	r7, r1
 80211e2:	4602      	mov	r2, r0
 80211e4:	460b      	mov	r3, r1
 80211e6:	4640      	mov	r0, r8
 80211e8:	4649      	mov	r1, r9
 80211ea:	f7df f853 	bl	8000294 <__adddf3>
 80211ee:	2000      	movs	r0, #0
 80211f0:	460d      	mov	r5, r1
 80211f2:	4604      	mov	r4, r0
 80211f4:	a33c      	add	r3, pc, #240	; (adr r3, 80212e8 <__ieee754_pow+0x738>)
 80211f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80211fa:	f7df fa01 	bl	8000600 <__aeabi_dmul>
 80211fe:	4642      	mov	r2, r8
 8021200:	464b      	mov	r3, r9
 8021202:	ec41 0b18 	vmov	d8, r0, r1
 8021206:	4620      	mov	r0, r4
 8021208:	4629      	mov	r1, r5
 802120a:	f7df f841 	bl	8000290 <__aeabi_dsub>
 802120e:	4602      	mov	r2, r0
 8021210:	460b      	mov	r3, r1
 8021212:	4630      	mov	r0, r6
 8021214:	4639      	mov	r1, r7
 8021216:	f7df f83b 	bl	8000290 <__aeabi_dsub>
 802121a:	a335      	add	r3, pc, #212	; (adr r3, 80212f0 <__ieee754_pow+0x740>)
 802121c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021220:	f7df f9ee 	bl	8000600 <__aeabi_dmul>
 8021224:	4606      	mov	r6, r0
 8021226:	460f      	mov	r7, r1
 8021228:	4620      	mov	r0, r4
 802122a:	4629      	mov	r1, r5
 802122c:	a332      	add	r3, pc, #200	; (adr r3, 80212f8 <__ieee754_pow+0x748>)
 802122e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021232:	f7df f9e5 	bl	8000600 <__aeabi_dmul>
 8021236:	4602      	mov	r2, r0
 8021238:	460b      	mov	r3, r1
 802123a:	4630      	mov	r0, r6
 802123c:	4639      	mov	r1, r7
 802123e:	f7df f829 	bl	8000294 <__adddf3>
 8021242:	9a07      	ldr	r2, [sp, #28]
 8021244:	4b37      	ldr	r3, [pc, #220]	; (8021324 <__ieee754_pow+0x774>)
 8021246:	4413      	add	r3, r2
 8021248:	e9d3 2300 	ldrd	r2, r3, [r3]
 802124c:	f7df f822 	bl	8000294 <__adddf3>
 8021250:	4682      	mov	sl, r0
 8021252:	9805      	ldr	r0, [sp, #20]
 8021254:	468b      	mov	fp, r1
 8021256:	f7df f969 	bl	800052c <__aeabi_i2d>
 802125a:	9a07      	ldr	r2, [sp, #28]
 802125c:	4b32      	ldr	r3, [pc, #200]	; (8021328 <__ieee754_pow+0x778>)
 802125e:	4606      	mov	r6, r0
 8021260:	460f      	mov	r7, r1
 8021262:	4413      	add	r3, r2
 8021264:	4652      	mov	r2, sl
 8021266:	e9d3 8900 	ldrd	r8, r9, [r3]
 802126a:	ec51 0b18 	vmov	r0, r1, d8
 802126e:	465b      	mov	r3, fp
 8021270:	f7df f810 	bl	8000294 <__adddf3>
 8021274:	4642      	mov	r2, r8
 8021276:	464b      	mov	r3, r9
 8021278:	f7df f80c 	bl	8000294 <__adddf3>
 802127c:	4632      	mov	r2, r6
 802127e:	463b      	mov	r3, r7
 8021280:	f7df f808 	bl	8000294 <__adddf3>
 8021284:	2000      	movs	r0, #0
 8021286:	4632      	mov	r2, r6
 8021288:	463b      	mov	r3, r7
 802128a:	4604      	mov	r4, r0
 802128c:	460d      	mov	r5, r1
 802128e:	f7de ffff 	bl	8000290 <__aeabi_dsub>
 8021292:	4642      	mov	r2, r8
 8021294:	464b      	mov	r3, r9
 8021296:	f7de fffb 	bl	8000290 <__aeabi_dsub>
 802129a:	ec53 2b18 	vmov	r2, r3, d8
 802129e:	f7de fff7 	bl	8000290 <__aeabi_dsub>
 80212a2:	4602      	mov	r2, r0
 80212a4:	460b      	mov	r3, r1
 80212a6:	4650      	mov	r0, sl
 80212a8:	4659      	mov	r1, fp
 80212aa:	e610      	b.n	8020ece <__ieee754_pow+0x31e>
 80212ac:	2401      	movs	r4, #1
 80212ae:	e6a1      	b.n	8020ff4 <__ieee754_pow+0x444>
 80212b0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8021300 <__ieee754_pow+0x750>
 80212b4:	e617      	b.n	8020ee6 <__ieee754_pow+0x336>
 80212b6:	bf00      	nop
 80212b8:	4a454eef 	.word	0x4a454eef
 80212bc:	3fca7e28 	.word	0x3fca7e28
 80212c0:	93c9db65 	.word	0x93c9db65
 80212c4:	3fcd864a 	.word	0x3fcd864a
 80212c8:	a91d4101 	.word	0xa91d4101
 80212cc:	3fd17460 	.word	0x3fd17460
 80212d0:	518f264d 	.word	0x518f264d
 80212d4:	3fd55555 	.word	0x3fd55555
 80212d8:	db6fabff 	.word	0xdb6fabff
 80212dc:	3fdb6db6 	.word	0x3fdb6db6
 80212e0:	33333303 	.word	0x33333303
 80212e4:	3fe33333 	.word	0x3fe33333
 80212e8:	e0000000 	.word	0xe0000000
 80212ec:	3feec709 	.word	0x3feec709
 80212f0:	dc3a03fd 	.word	0xdc3a03fd
 80212f4:	3feec709 	.word	0x3feec709
 80212f8:	145b01f5 	.word	0x145b01f5
 80212fc:	be3e2fe0 	.word	0xbe3e2fe0
 8021300:	00000000 	.word	0x00000000
 8021304:	3ff00000 	.word	0x3ff00000
 8021308:	7ff00000 	.word	0x7ff00000
 802130c:	43400000 	.word	0x43400000
 8021310:	0003988e 	.word	0x0003988e
 8021314:	000bb679 	.word	0x000bb679
 8021318:	08038890 	.word	0x08038890
 802131c:	3ff00000 	.word	0x3ff00000
 8021320:	40080000 	.word	0x40080000
 8021324:	080388b0 	.word	0x080388b0
 8021328:	080388a0 	.word	0x080388a0
 802132c:	a3b5      	add	r3, pc, #724	; (adr r3, 8021604 <__ieee754_pow+0xa54>)
 802132e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021332:	4640      	mov	r0, r8
 8021334:	4649      	mov	r1, r9
 8021336:	f7de ffad 	bl	8000294 <__adddf3>
 802133a:	4622      	mov	r2, r4
 802133c:	462b      	mov	r3, r5
 802133e:	ec41 0b1a 	vmov	d10, r0, r1
 8021342:	4630      	mov	r0, r6
 8021344:	4639      	mov	r1, r7
 8021346:	f7de ffa3 	bl	8000290 <__aeabi_dsub>
 802134a:	4602      	mov	r2, r0
 802134c:	460b      	mov	r3, r1
 802134e:	ec51 0b1a 	vmov	r0, r1, d10
 8021352:	f7df fbe5 	bl	8000b20 <__aeabi_dcmpgt>
 8021356:	2800      	cmp	r0, #0
 8021358:	f47f ae04 	bne.w	8020f64 <__ieee754_pow+0x3b4>
 802135c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8021360:	4aa3      	ldr	r2, [pc, #652]	; (80215f0 <__ieee754_pow+0xa40>)
 8021362:	4293      	cmp	r3, r2
 8021364:	f340 8108 	ble.w	8021578 <__ieee754_pow+0x9c8>
 8021368:	151b      	asrs	r3, r3, #20
 802136a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 802136e:	48a1      	ldr	r0, [pc, #644]	; (80215f4 <__ieee754_pow+0xa44>)
 8021370:	f1bb 0f00 	cmp.w	fp, #0
 8021374:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8021378:	f04f 0200 	mov.w	r2, #0
 802137c:	fa4a fa03 	asr.w	sl, sl, r3
 8021380:	44da      	add	sl, fp
 8021382:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8021386:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 802138a:	fa40 f001 	asr.w	r0, r0, r1
 802138e:	f1c1 0114 	rsb	r1, r1, #20
 8021392:	ea00 030a 	and.w	r3, r0, sl
 8021396:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 802139a:	4620      	mov	r0, r4
 802139c:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80213a0:	fa4a fa01 	asr.w	sl, sl, r1
 80213a4:	4629      	mov	r1, r5
 80213a6:	bfb8      	it	lt
 80213a8:	f1ca 0a00 	rsblt	sl, sl, #0
 80213ac:	f7de ff70 	bl	8000290 <__aeabi_dsub>
 80213b0:	ec41 0b19 	vmov	d9, r0, r1
 80213b4:	4642      	mov	r2, r8
 80213b6:	464b      	mov	r3, r9
 80213b8:	ec51 0b19 	vmov	r0, r1, d9
 80213bc:	f7de ff6a 	bl	8000294 <__adddf3>
 80213c0:	2000      	movs	r0, #0
 80213c2:	460d      	mov	r5, r1
 80213c4:	4604      	mov	r4, r0
 80213c6:	a37a      	add	r3, pc, #488	; (adr r3, 80215b0 <__ieee754_pow+0xa00>)
 80213c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80213cc:	f7df f918 	bl	8000600 <__aeabi_dmul>
 80213d0:	4606      	mov	r6, r0
 80213d2:	460f      	mov	r7, r1
 80213d4:	4620      	mov	r0, r4
 80213d6:	4629      	mov	r1, r5
 80213d8:	ec53 2b19 	vmov	r2, r3, d9
 80213dc:	f7de ff58 	bl	8000290 <__aeabi_dsub>
 80213e0:	4602      	mov	r2, r0
 80213e2:	460b      	mov	r3, r1
 80213e4:	4640      	mov	r0, r8
 80213e6:	4649      	mov	r1, r9
 80213e8:	f7de ff52 	bl	8000290 <__aeabi_dsub>
 80213ec:	a372      	add	r3, pc, #456	; (adr r3, 80215b8 <__ieee754_pow+0xa08>)
 80213ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80213f2:	f7df f905 	bl	8000600 <__aeabi_dmul>
 80213f6:	4680      	mov	r8, r0
 80213f8:	4689      	mov	r9, r1
 80213fa:	4620      	mov	r0, r4
 80213fc:	4629      	mov	r1, r5
 80213fe:	a370      	add	r3, pc, #448	; (adr r3, 80215c0 <__ieee754_pow+0xa10>)
 8021400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021404:	f7df f8fc 	bl	8000600 <__aeabi_dmul>
 8021408:	4602      	mov	r2, r0
 802140a:	460b      	mov	r3, r1
 802140c:	4640      	mov	r0, r8
 802140e:	4649      	mov	r1, r9
 8021410:	f7de ff40 	bl	8000294 <__adddf3>
 8021414:	4604      	mov	r4, r0
 8021416:	460d      	mov	r5, r1
 8021418:	4602      	mov	r2, r0
 802141a:	460b      	mov	r3, r1
 802141c:	4630      	mov	r0, r6
 802141e:	4639      	mov	r1, r7
 8021420:	f7de ff38 	bl	8000294 <__adddf3>
 8021424:	4632      	mov	r2, r6
 8021426:	4680      	mov	r8, r0
 8021428:	4689      	mov	r9, r1
 802142a:	463b      	mov	r3, r7
 802142c:	f7de ff30 	bl	8000290 <__aeabi_dsub>
 8021430:	4602      	mov	r2, r0
 8021432:	460b      	mov	r3, r1
 8021434:	4620      	mov	r0, r4
 8021436:	4629      	mov	r1, r5
 8021438:	f7de ff2a 	bl	8000290 <__aeabi_dsub>
 802143c:	4642      	mov	r2, r8
 802143e:	4606      	mov	r6, r0
 8021440:	460f      	mov	r7, r1
 8021442:	464b      	mov	r3, r9
 8021444:	4640      	mov	r0, r8
 8021446:	4649      	mov	r1, r9
 8021448:	f7df f8da 	bl	8000600 <__aeabi_dmul>
 802144c:	4604      	mov	r4, r0
 802144e:	460d      	mov	r5, r1
 8021450:	a35d      	add	r3, pc, #372	; (adr r3, 80215c8 <__ieee754_pow+0xa18>)
 8021452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021456:	f7df f8d3 	bl	8000600 <__aeabi_dmul>
 802145a:	a35d      	add	r3, pc, #372	; (adr r3, 80215d0 <__ieee754_pow+0xa20>)
 802145c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021460:	f7de ff16 	bl	8000290 <__aeabi_dsub>
 8021464:	4622      	mov	r2, r4
 8021466:	462b      	mov	r3, r5
 8021468:	f7df f8ca 	bl	8000600 <__aeabi_dmul>
 802146c:	a35a      	add	r3, pc, #360	; (adr r3, 80215d8 <__ieee754_pow+0xa28>)
 802146e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021472:	f7de ff0f 	bl	8000294 <__adddf3>
 8021476:	4622      	mov	r2, r4
 8021478:	462b      	mov	r3, r5
 802147a:	f7df f8c1 	bl	8000600 <__aeabi_dmul>
 802147e:	a358      	add	r3, pc, #352	; (adr r3, 80215e0 <__ieee754_pow+0xa30>)
 8021480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021484:	f7de ff04 	bl	8000290 <__aeabi_dsub>
 8021488:	4622      	mov	r2, r4
 802148a:	462b      	mov	r3, r5
 802148c:	f7df f8b8 	bl	8000600 <__aeabi_dmul>
 8021490:	a355      	add	r3, pc, #340	; (adr r3, 80215e8 <__ieee754_pow+0xa38>)
 8021492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021496:	f7de fefd 	bl	8000294 <__adddf3>
 802149a:	4622      	mov	r2, r4
 802149c:	462b      	mov	r3, r5
 802149e:	f7df f8af 	bl	8000600 <__aeabi_dmul>
 80214a2:	4602      	mov	r2, r0
 80214a4:	460b      	mov	r3, r1
 80214a6:	4640      	mov	r0, r8
 80214a8:	4649      	mov	r1, r9
 80214aa:	f7de fef1 	bl	8000290 <__aeabi_dsub>
 80214ae:	4604      	mov	r4, r0
 80214b0:	460d      	mov	r5, r1
 80214b2:	4602      	mov	r2, r0
 80214b4:	460b      	mov	r3, r1
 80214b6:	4640      	mov	r0, r8
 80214b8:	4649      	mov	r1, r9
 80214ba:	f7df f8a1 	bl	8000600 <__aeabi_dmul>
 80214be:	2200      	movs	r2, #0
 80214c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80214c4:	ec41 0b19 	vmov	d9, r0, r1
 80214c8:	4620      	mov	r0, r4
 80214ca:	4629      	mov	r1, r5
 80214cc:	f7de fee0 	bl	8000290 <__aeabi_dsub>
 80214d0:	4602      	mov	r2, r0
 80214d2:	460b      	mov	r3, r1
 80214d4:	ec51 0b19 	vmov	r0, r1, d9
 80214d8:	f7df f9bc 	bl	8000854 <__aeabi_ddiv>
 80214dc:	4632      	mov	r2, r6
 80214de:	4604      	mov	r4, r0
 80214e0:	460d      	mov	r5, r1
 80214e2:	463b      	mov	r3, r7
 80214e4:	4640      	mov	r0, r8
 80214e6:	4649      	mov	r1, r9
 80214e8:	f7df f88a 	bl	8000600 <__aeabi_dmul>
 80214ec:	4632      	mov	r2, r6
 80214ee:	463b      	mov	r3, r7
 80214f0:	f7de fed0 	bl	8000294 <__adddf3>
 80214f4:	4602      	mov	r2, r0
 80214f6:	460b      	mov	r3, r1
 80214f8:	4620      	mov	r0, r4
 80214fa:	4629      	mov	r1, r5
 80214fc:	f7de fec8 	bl	8000290 <__aeabi_dsub>
 8021500:	4642      	mov	r2, r8
 8021502:	464b      	mov	r3, r9
 8021504:	f7de fec4 	bl	8000290 <__aeabi_dsub>
 8021508:	460b      	mov	r3, r1
 802150a:	4602      	mov	r2, r0
 802150c:	493a      	ldr	r1, [pc, #232]	; (80215f8 <__ieee754_pow+0xa48>)
 802150e:	2000      	movs	r0, #0
 8021510:	f7de febe 	bl	8000290 <__aeabi_dsub>
 8021514:	ec41 0b10 	vmov	d0, r0, r1
 8021518:	ee10 3a90 	vmov	r3, s1
 802151c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8021520:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8021524:	da2b      	bge.n	802157e <__ieee754_pow+0x9ce>
 8021526:	4650      	mov	r0, sl
 8021528:	f000 f8aa 	bl	8021680 <scalbn>
 802152c:	ec51 0b10 	vmov	r0, r1, d0
 8021530:	ec53 2b18 	vmov	r2, r3, d8
 8021534:	f7ff bbed 	b.w	8020d12 <__ieee754_pow+0x162>
 8021538:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 802153c:	4b2f      	ldr	r3, [pc, #188]	; (80215fc <__ieee754_pow+0xa4c>)
 802153e:	429e      	cmp	r6, r3
 8021540:	f77f af0c 	ble.w	802135c <__ieee754_pow+0x7ac>
 8021544:	4b2e      	ldr	r3, [pc, #184]	; (8021600 <__ieee754_pow+0xa50>)
 8021546:	440b      	add	r3, r1
 8021548:	4303      	orrs	r3, r0
 802154a:	d009      	beq.n	8021560 <__ieee754_pow+0x9b0>
 802154c:	2200      	movs	r2, #0
 802154e:	2300      	movs	r3, #0
 8021550:	ec51 0b18 	vmov	r0, r1, d8
 8021554:	f7df fac6 	bl	8000ae4 <__aeabi_dcmplt>
 8021558:	3800      	subs	r0, #0
 802155a:	bf18      	it	ne
 802155c:	2001      	movne	r0, #1
 802155e:	e447      	b.n	8020df0 <__ieee754_pow+0x240>
 8021560:	4622      	mov	r2, r4
 8021562:	462b      	mov	r3, r5
 8021564:	f7de fe94 	bl	8000290 <__aeabi_dsub>
 8021568:	4642      	mov	r2, r8
 802156a:	464b      	mov	r3, r9
 802156c:	f7df face 	bl	8000b0c <__aeabi_dcmpge>
 8021570:	2800      	cmp	r0, #0
 8021572:	f43f aef3 	beq.w	802135c <__ieee754_pow+0x7ac>
 8021576:	e7e9      	b.n	802154c <__ieee754_pow+0x99c>
 8021578:	f04f 0a00 	mov.w	sl, #0
 802157c:	e71a      	b.n	80213b4 <__ieee754_pow+0x804>
 802157e:	ec51 0b10 	vmov	r0, r1, d0
 8021582:	4619      	mov	r1, r3
 8021584:	e7d4      	b.n	8021530 <__ieee754_pow+0x980>
 8021586:	2000      	movs	r0, #0
 8021588:	491b      	ldr	r1, [pc, #108]	; (80215f8 <__ieee754_pow+0xa48>)
 802158a:	f7ff bb30 	b.w	8020bee <__ieee754_pow+0x3e>
 802158e:	2000      	movs	r0, #0
 8021590:	2100      	movs	r1, #0
 8021592:	f7ff bb2c 	b.w	8020bee <__ieee754_pow+0x3e>
 8021596:	4630      	mov	r0, r6
 8021598:	4639      	mov	r1, r7
 802159a:	f7ff bb28 	b.w	8020bee <__ieee754_pow+0x3e>
 802159e:	9204      	str	r2, [sp, #16]
 80215a0:	f7ff bb7a 	b.w	8020c98 <__ieee754_pow+0xe8>
 80215a4:	2300      	movs	r3, #0
 80215a6:	f7ff bb64 	b.w	8020c72 <__ieee754_pow+0xc2>
 80215aa:	bf00      	nop
 80215ac:	f3af 8000 	nop.w
 80215b0:	00000000 	.word	0x00000000
 80215b4:	3fe62e43 	.word	0x3fe62e43
 80215b8:	fefa39ef 	.word	0xfefa39ef
 80215bc:	3fe62e42 	.word	0x3fe62e42
 80215c0:	0ca86c39 	.word	0x0ca86c39
 80215c4:	be205c61 	.word	0xbe205c61
 80215c8:	72bea4d0 	.word	0x72bea4d0
 80215cc:	3e663769 	.word	0x3e663769
 80215d0:	c5d26bf1 	.word	0xc5d26bf1
 80215d4:	3ebbbd41 	.word	0x3ebbbd41
 80215d8:	af25de2c 	.word	0xaf25de2c
 80215dc:	3f11566a 	.word	0x3f11566a
 80215e0:	16bebd93 	.word	0x16bebd93
 80215e4:	3f66c16c 	.word	0x3f66c16c
 80215e8:	5555553e 	.word	0x5555553e
 80215ec:	3fc55555 	.word	0x3fc55555
 80215f0:	3fe00000 	.word	0x3fe00000
 80215f4:	fff00000 	.word	0xfff00000
 80215f8:	3ff00000 	.word	0x3ff00000
 80215fc:	4090cbff 	.word	0x4090cbff
 8021600:	3f6f3400 	.word	0x3f6f3400
 8021604:	652b82fe 	.word	0x652b82fe
 8021608:	3c971547 	.word	0x3c971547

0802160c <with_errno>:
 802160c:	b570      	push	{r4, r5, r6, lr}
 802160e:	4604      	mov	r4, r0
 8021610:	460d      	mov	r5, r1
 8021612:	4616      	mov	r6, r2
 8021614:	f7fc f960 	bl	801d8d8 <__errno>
 8021618:	4629      	mov	r1, r5
 802161a:	6006      	str	r6, [r0, #0]
 802161c:	4620      	mov	r0, r4
 802161e:	bd70      	pop	{r4, r5, r6, pc}

08021620 <xflow>:
 8021620:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021622:	4614      	mov	r4, r2
 8021624:	461d      	mov	r5, r3
 8021626:	b108      	cbz	r0, 802162c <xflow+0xc>
 8021628:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 802162c:	4620      	mov	r0, r4
 802162e:	4629      	mov	r1, r5
 8021630:	e9cd 2300 	strd	r2, r3, [sp]
 8021634:	e9dd 2300 	ldrd	r2, r3, [sp]
 8021638:	f7de ffe2 	bl	8000600 <__aeabi_dmul>
 802163c:	2222      	movs	r2, #34	; 0x22
 802163e:	b003      	add	sp, #12
 8021640:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021644:	f7ff bfe2 	b.w	802160c <with_errno>

08021648 <__math_uflow>:
 8021648:	b508      	push	{r3, lr}
 802164a:	2200      	movs	r2, #0
 802164c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8021650:	f7ff ffe6 	bl	8021620 <xflow>
 8021654:	ec41 0b10 	vmov	d0, r0, r1
 8021658:	bd08      	pop	{r3, pc}

0802165a <__math_oflow>:
 802165a:	b508      	push	{r3, lr}
 802165c:	2200      	movs	r2, #0
 802165e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8021662:	f7ff ffdd 	bl	8021620 <xflow>
 8021666:	ec41 0b10 	vmov	d0, r0, r1
 802166a:	bd08      	pop	{r3, pc}

0802166c <fabs>:
 802166c:	ec51 0b10 	vmov	r0, r1, d0
 8021670:	ee10 2a10 	vmov	r2, s0
 8021674:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8021678:	ec43 2b10 	vmov	d0, r2, r3
 802167c:	4770      	bx	lr
	...

08021680 <scalbn>:
 8021680:	b570      	push	{r4, r5, r6, lr}
 8021682:	ec55 4b10 	vmov	r4, r5, d0
 8021686:	f3c5 510a 	ubfx	r1, r5, #20, #11
 802168a:	4606      	mov	r6, r0
 802168c:	462b      	mov	r3, r5
 802168e:	b999      	cbnz	r1, 80216b8 <scalbn+0x38>
 8021690:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8021694:	4323      	orrs	r3, r4
 8021696:	d03f      	beq.n	8021718 <scalbn+0x98>
 8021698:	4b35      	ldr	r3, [pc, #212]	; (8021770 <scalbn+0xf0>)
 802169a:	4629      	mov	r1, r5
 802169c:	2200      	movs	r2, #0
 802169e:	ee10 0a10 	vmov	r0, s0
 80216a2:	f7de ffad 	bl	8000600 <__aeabi_dmul>
 80216a6:	4b33      	ldr	r3, [pc, #204]	; (8021774 <scalbn+0xf4>)
 80216a8:	4604      	mov	r4, r0
 80216aa:	460d      	mov	r5, r1
 80216ac:	429e      	cmp	r6, r3
 80216ae:	da10      	bge.n	80216d2 <scalbn+0x52>
 80216b0:	a327      	add	r3, pc, #156	; (adr r3, 8021750 <scalbn+0xd0>)
 80216b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80216b6:	e01f      	b.n	80216f8 <scalbn+0x78>
 80216b8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80216bc:	4291      	cmp	r1, r2
 80216be:	d10c      	bne.n	80216da <scalbn+0x5a>
 80216c0:	ee10 2a10 	vmov	r2, s0
 80216c4:	4620      	mov	r0, r4
 80216c6:	4629      	mov	r1, r5
 80216c8:	f7de fde4 	bl	8000294 <__adddf3>
 80216cc:	4604      	mov	r4, r0
 80216ce:	460d      	mov	r5, r1
 80216d0:	e022      	b.n	8021718 <scalbn+0x98>
 80216d2:	460b      	mov	r3, r1
 80216d4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80216d8:	3936      	subs	r1, #54	; 0x36
 80216da:	f24c 3250 	movw	r2, #50000	; 0xc350
 80216de:	4296      	cmp	r6, r2
 80216e0:	dd0d      	ble.n	80216fe <scalbn+0x7e>
 80216e2:	2d00      	cmp	r5, #0
 80216e4:	a11c      	add	r1, pc, #112	; (adr r1, 8021758 <scalbn+0xd8>)
 80216e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80216ea:	da02      	bge.n	80216f2 <scalbn+0x72>
 80216ec:	a11c      	add	r1, pc, #112	; (adr r1, 8021760 <scalbn+0xe0>)
 80216ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80216f2:	a319      	add	r3, pc, #100	; (adr r3, 8021758 <scalbn+0xd8>)
 80216f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80216f8:	f7de ff82 	bl	8000600 <__aeabi_dmul>
 80216fc:	e7e6      	b.n	80216cc <scalbn+0x4c>
 80216fe:	1872      	adds	r2, r6, r1
 8021700:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8021704:	428a      	cmp	r2, r1
 8021706:	dcec      	bgt.n	80216e2 <scalbn+0x62>
 8021708:	2a00      	cmp	r2, #0
 802170a:	dd08      	ble.n	802171e <scalbn+0x9e>
 802170c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8021710:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8021714:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8021718:	ec45 4b10 	vmov	d0, r4, r5
 802171c:	bd70      	pop	{r4, r5, r6, pc}
 802171e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8021722:	da08      	bge.n	8021736 <scalbn+0xb6>
 8021724:	2d00      	cmp	r5, #0
 8021726:	a10a      	add	r1, pc, #40	; (adr r1, 8021750 <scalbn+0xd0>)
 8021728:	e9d1 0100 	ldrd	r0, r1, [r1]
 802172c:	dac0      	bge.n	80216b0 <scalbn+0x30>
 802172e:	a10e      	add	r1, pc, #56	; (adr r1, 8021768 <scalbn+0xe8>)
 8021730:	e9d1 0100 	ldrd	r0, r1, [r1]
 8021734:	e7bc      	b.n	80216b0 <scalbn+0x30>
 8021736:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802173a:	3236      	adds	r2, #54	; 0x36
 802173c:	4620      	mov	r0, r4
 802173e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8021742:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8021746:	2200      	movs	r2, #0
 8021748:	4b0b      	ldr	r3, [pc, #44]	; (8021778 <scalbn+0xf8>)
 802174a:	e7d5      	b.n	80216f8 <scalbn+0x78>
 802174c:	f3af 8000 	nop.w
 8021750:	c2f8f359 	.word	0xc2f8f359
 8021754:	01a56e1f 	.word	0x01a56e1f
 8021758:	8800759c 	.word	0x8800759c
 802175c:	7e37e43c 	.word	0x7e37e43c
 8021760:	8800759c 	.word	0x8800759c
 8021764:	fe37e43c 	.word	0xfe37e43c
 8021768:	c2f8f359 	.word	0xc2f8f359
 802176c:	81a56e1f 	.word	0x81a56e1f
 8021770:	43500000 	.word	0x43500000
 8021774:	ffff3cb0 	.word	0xffff3cb0
 8021778:	3c900000 	.word	0x3c900000

0802177c <__ieee754_sqrt>:
 802177c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021780:	4e6b      	ldr	r6, [pc, #428]	; (8021930 <__ieee754_sqrt+0x1b4>)
 8021782:	ee10 0a10 	vmov	r0, s0
 8021786:	ee10 2a10 	vmov	r2, s0
 802178a:	ec55 4b10 	vmov	r4, r5, d0
 802178e:	43ae      	bics	r6, r5
 8021790:	4629      	mov	r1, r5
 8021792:	462b      	mov	r3, r5
 8021794:	d10d      	bne.n	80217b2 <__ieee754_sqrt+0x36>
 8021796:	f7de ff33 	bl	8000600 <__aeabi_dmul>
 802179a:	4602      	mov	r2, r0
 802179c:	460b      	mov	r3, r1
 802179e:	4620      	mov	r0, r4
 80217a0:	4629      	mov	r1, r5
 80217a2:	f7de fd77 	bl	8000294 <__adddf3>
 80217a6:	4604      	mov	r4, r0
 80217a8:	460d      	mov	r5, r1
 80217aa:	ec45 4b10 	vmov	d0, r4, r5
 80217ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80217b2:	2d00      	cmp	r5, #0
 80217b4:	dc0b      	bgt.n	80217ce <__ieee754_sqrt+0x52>
 80217b6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80217ba:	4326      	orrs	r6, r4
 80217bc:	d0f5      	beq.n	80217aa <__ieee754_sqrt+0x2e>
 80217be:	b135      	cbz	r5, 80217ce <__ieee754_sqrt+0x52>
 80217c0:	f7de fd66 	bl	8000290 <__aeabi_dsub>
 80217c4:	4602      	mov	r2, r0
 80217c6:	460b      	mov	r3, r1
 80217c8:	f7df f844 	bl	8000854 <__aeabi_ddiv>
 80217cc:	e7eb      	b.n	80217a6 <__ieee754_sqrt+0x2a>
 80217ce:	1509      	asrs	r1, r1, #20
 80217d0:	f000 8091 	beq.w	80218f6 <__ieee754_sqrt+0x17a>
 80217d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80217d8:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80217dc:	07c9      	lsls	r1, r1, #31
 80217de:	f04f 0500 	mov.w	r5, #0
 80217e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80217e6:	ea4f 0666 	mov.w	r6, r6, asr #1
 80217ea:	f04f 0e16 	mov.w	lr, #22
 80217ee:	46ac      	mov	ip, r5
 80217f0:	bf58      	it	pl
 80217f2:	005b      	lslpl	r3, r3, #1
 80217f4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80217f8:	bf5c      	itt	pl
 80217fa:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80217fe:	0052      	lslpl	r2, r2, #1
 8021800:	005b      	lsls	r3, r3, #1
 8021802:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8021806:	0052      	lsls	r2, r2, #1
 8021808:	eb0c 0001 	add.w	r0, ip, r1
 802180c:	4298      	cmp	r0, r3
 802180e:	bfde      	ittt	le
 8021810:	1a1b      	suble	r3, r3, r0
 8021812:	eb00 0c01 	addle.w	ip, r0, r1
 8021816:	186d      	addle	r5, r5, r1
 8021818:	f1be 0e01 	subs.w	lr, lr, #1
 802181c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8021820:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8021824:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8021828:	ea4f 0242 	mov.w	r2, r2, lsl #1
 802182c:	d1ec      	bne.n	8021808 <__ieee754_sqrt+0x8c>
 802182e:	4674      	mov	r4, lr
 8021830:	2720      	movs	r7, #32
 8021832:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8021836:	4563      	cmp	r3, ip
 8021838:	eb01 000e 	add.w	r0, r1, lr
 802183c:	dc02      	bgt.n	8021844 <__ieee754_sqrt+0xc8>
 802183e:	d114      	bne.n	802186a <__ieee754_sqrt+0xee>
 8021840:	4290      	cmp	r0, r2
 8021842:	d812      	bhi.n	802186a <__ieee754_sqrt+0xee>
 8021844:	2800      	cmp	r0, #0
 8021846:	eb00 0e01 	add.w	lr, r0, r1
 802184a:	da59      	bge.n	8021900 <__ieee754_sqrt+0x184>
 802184c:	f1be 0f00 	cmp.w	lr, #0
 8021850:	db56      	blt.n	8021900 <__ieee754_sqrt+0x184>
 8021852:	f10c 0801 	add.w	r8, ip, #1
 8021856:	eba3 030c 	sub.w	r3, r3, ip
 802185a:	4290      	cmp	r0, r2
 802185c:	440c      	add	r4, r1
 802185e:	eba2 0200 	sub.w	r2, r2, r0
 8021862:	bf88      	it	hi
 8021864:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8021868:	46c4      	mov	ip, r8
 802186a:	005b      	lsls	r3, r3, #1
 802186c:	3f01      	subs	r7, #1
 802186e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8021872:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8021876:	ea4f 0242 	mov.w	r2, r2, lsl #1
 802187a:	d1dc      	bne.n	8021836 <__ieee754_sqrt+0xba>
 802187c:	4313      	orrs	r3, r2
 802187e:	d01b      	beq.n	80218b8 <__ieee754_sqrt+0x13c>
 8021880:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8021934 <__ieee754_sqrt+0x1b8>
 8021884:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8021938 <__ieee754_sqrt+0x1bc>
 8021888:	e9da 0100 	ldrd	r0, r1, [sl]
 802188c:	e9db 2300 	ldrd	r2, r3, [fp]
 8021890:	e9da 8900 	ldrd	r8, r9, [sl]
 8021894:	f7de fcfc 	bl	8000290 <__aeabi_dsub>
 8021898:	4602      	mov	r2, r0
 802189a:	460b      	mov	r3, r1
 802189c:	4640      	mov	r0, r8
 802189e:	4649      	mov	r1, r9
 80218a0:	f7df f92a 	bl	8000af8 <__aeabi_dcmple>
 80218a4:	b140      	cbz	r0, 80218b8 <__ieee754_sqrt+0x13c>
 80218a6:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80218aa:	e9da 0100 	ldrd	r0, r1, [sl]
 80218ae:	e9db 2300 	ldrd	r2, r3, [fp]
 80218b2:	d127      	bne.n	8021904 <__ieee754_sqrt+0x188>
 80218b4:	3501      	adds	r5, #1
 80218b6:	463c      	mov	r4, r7
 80218b8:	106a      	asrs	r2, r5, #1
 80218ba:	07e9      	lsls	r1, r5, #31
 80218bc:	ea4f 0354 	mov.w	r3, r4, lsr #1
 80218c0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80218c4:	bf48      	it	mi
 80218c6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80218ca:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80218ce:	461c      	mov	r4, r3
 80218d0:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80218d4:	e769      	b.n	80217aa <__ieee754_sqrt+0x2e>
 80218d6:	0ad3      	lsrs	r3, r2, #11
 80218d8:	3815      	subs	r0, #21
 80218da:	0552      	lsls	r2, r2, #21
 80218dc:	2b00      	cmp	r3, #0
 80218de:	d0fa      	beq.n	80218d6 <__ieee754_sqrt+0x15a>
 80218e0:	02dc      	lsls	r4, r3, #11
 80218e2:	d50a      	bpl.n	80218fa <__ieee754_sqrt+0x17e>
 80218e4:	f1c1 0420 	rsb	r4, r1, #32
 80218e8:	1e4d      	subs	r5, r1, #1
 80218ea:	fa22 f404 	lsr.w	r4, r2, r4
 80218ee:	408a      	lsls	r2, r1
 80218f0:	1b41      	subs	r1, r0, r5
 80218f2:	4323      	orrs	r3, r4
 80218f4:	e76e      	b.n	80217d4 <__ieee754_sqrt+0x58>
 80218f6:	4608      	mov	r0, r1
 80218f8:	e7f0      	b.n	80218dc <__ieee754_sqrt+0x160>
 80218fa:	005b      	lsls	r3, r3, #1
 80218fc:	3101      	adds	r1, #1
 80218fe:	e7ef      	b.n	80218e0 <__ieee754_sqrt+0x164>
 8021900:	46e0      	mov	r8, ip
 8021902:	e7a8      	b.n	8021856 <__ieee754_sqrt+0xda>
 8021904:	e9da 8900 	ldrd	r8, r9, [sl]
 8021908:	f7de fcc4 	bl	8000294 <__adddf3>
 802190c:	4602      	mov	r2, r0
 802190e:	460b      	mov	r3, r1
 8021910:	4640      	mov	r0, r8
 8021912:	4649      	mov	r1, r9
 8021914:	f7df f8e6 	bl	8000ae4 <__aeabi_dcmplt>
 8021918:	b128      	cbz	r0, 8021926 <__ieee754_sqrt+0x1aa>
 802191a:	1ca0      	adds	r0, r4, #2
 802191c:	f104 0402 	add.w	r4, r4, #2
 8021920:	bf08      	it	eq
 8021922:	3501      	addeq	r5, #1
 8021924:	e7c8      	b.n	80218b8 <__ieee754_sqrt+0x13c>
 8021926:	3401      	adds	r4, #1
 8021928:	f024 0401 	bic.w	r4, r4, #1
 802192c:	e7c4      	b.n	80218b8 <__ieee754_sqrt+0x13c>
 802192e:	bf00      	nop
 8021930:	7ff00000 	.word	0x7ff00000
 8021934:	200007c0 	.word	0x200007c0
 8021938:	200007c8 	.word	0x200007c8

0802193c <_init>:
 802193c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802193e:	bf00      	nop
 8021940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021942:	bc08      	pop	{r3}
 8021944:	469e      	mov	lr, r3
 8021946:	4770      	bx	lr

08021948 <_fini>:
 8021948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802194a:	bf00      	nop
 802194c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802194e:	bc08      	pop	{r3}
 8021950:	469e      	mov	lr, r3
 8021952:	4770      	bx	lr
 8021954:	0000      	movs	r0, r0
	...
