
GPIO_EXTI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002340  08000238  08000238  00010238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08002578  08002578  00012578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002650  08002650  00012650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002654  08002654  00012654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000011  20000000  08002658  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000014  08002669  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000034  08002669  00020034  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  00020011  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  00020047  2**0
                  CONTENTS, READONLY
 10 .debug_line   00008c1d  00000000  00000000  0002008a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line_str 000000a6  00000000  00000000  00028ca7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_info   00008027  00000000  00000000  00028d4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001736  00000000  00000000  00030d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d8  00000000  00000000  000324b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00130b6f  00000000  00000000  00032c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005c3  00000000  00000000  001637f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00030de6  00000000  00000000  00163dba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00001e04  00000000  00000000  00194ba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000014 	.word	0x20000014
 8000254:	00000000 	.word	0x00000000
 8000258:	08002560 	.word	0x08002560

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000018 	.word	0x20000018
 8000274:	08002560 	.word	0x08002560

08000278 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000278:	f8df d034 	ldr.w	sp, [pc, #52]	; 80002b0 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800027c:	f000 f9b0 	bl	80005e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000280:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000282:	e003      	b.n	800028c <LoopCopyDataInit>

08000284 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000284:	4b0b      	ldr	r3, [pc, #44]	; (80002b4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000286:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000288:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800028a:	3104      	adds	r1, #4

0800028c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800028c:	480a      	ldr	r0, [pc, #40]	; (80002b8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800028e:	4b0b      	ldr	r3, [pc, #44]	; (80002bc <LoopForever+0xe>)
	adds	r2, r0, r1
 8000290:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000292:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000294:	d3f6      	bcc.n	8000284 <CopyDataInit>
	ldr	r2, =_sbss
 8000296:	4a0a      	ldr	r2, [pc, #40]	; (80002c0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000298:	e002      	b.n	80002a0 <LoopFillZerobss>

0800029a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800029a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800029c:	f842 3b04 	str.w	r3, [r2], #4

080002a0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <LoopForever+0x16>)
	cmp	r2, r3
 80002a2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80002a4:	d3f9      	bcc.n	800029a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80002a6:	f002 f937 	bl	8002518 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80002aa:	f000 f80e 	bl	80002ca <main>

080002ae <LoopForever>:

LoopForever:
    b LoopForever
 80002ae:	e7fe      	b.n	80002ae <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80002b0:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 80002b4:	08002658 	.word	0x08002658
	ldr	r0, =_sdata
 80002b8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80002bc:	20000011 	.word	0x20000011
	ldr	r2, =_sbss
 80002c0:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 80002c4:	20000034 	.word	0x20000034

080002c8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80002c8:	e7fe      	b.n	80002c8 <ADC1_IRQHandler>

080002ca <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002ca:	b580      	push	{r7, lr}
 80002cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ce:	f000 f9bf 	bl	8000650 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002d2:	f000 f80a 	bl	80002ea <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80002d6:	f000 f864 	bl	80003a2 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_ICACHE_Init();
 80002da:	f000 f870 	bl	80003be <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  /* -1- Initialize LEDs mounted on B-U585I-IOT02A board */
  BSP_LED_Init(LED7);
 80002de:	2001      	movs	r0, #1
 80002e0:	f000 f90e 	bl	8000500 <BSP_LED_Init>

  /* -2- Configure External line 13 (connected to PC.13 pin) in interrupt mode */
  EXTI13_IRQHandler_Config();
 80002e4:	f000 f87e 	bl	80003e4 <EXTI13_IRQHandler_Config>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002e8:	e7fe      	b.n	80002e8 <main+0x1e>

080002ea <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ea:	b580      	push	{r7, lr}
 80002ec:	b09e      	sub	sp, #120	; 0x78
 80002ee:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f0:	f107 0318 	add.w	r3, r7, #24
 80002f4:	2260      	movs	r2, #96	; 0x60
 80002f6:	2100      	movs	r1, #0
 80002f8:	4618      	mov	r0, r3
 80002fa:	f002 f905 	bl	8002508 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002fe:	463b      	mov	r3, r7
 8000300:	2200      	movs	r2, #0
 8000302:	601a      	str	r2, [r3, #0]
 8000304:	605a      	str	r2, [r3, #4]
 8000306:	609a      	str	r2, [r3, #8]
 8000308:	60da      	str	r2, [r3, #12]
 800030a:	611a      	str	r2, [r3, #16]
 800030c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800030e:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8000312:	f000 fd9d 	bl	8000e50 <HAL_PWREx_ControlVoltageScaling>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <SystemClock_Config+0x36>
  {
    Error_Handler();
 800031c:	f000 f8a2 	bl	8000464 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000320:	2310      	movs	r3, #16
 8000322:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000324:	2301      	movs	r3, #1
 8000326:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000328:	2310      	movs	r3, #16
 800032a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 800032c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000330:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000332:	2302      	movs	r3, #2
 8000334:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000336:	2301      	movs	r3, #1
 8000338:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 800033a:	2300      	movs	r3, #0
 800033c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800033e:	2301      	movs	r3, #1
 8000340:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000342:	2350      	movs	r3, #80	; 0x50
 8000344:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000346:	2302      	movs	r3, #2
 8000348:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800034a:	2302      	movs	r3, #2
 800034c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 800034e:	2302      	movs	r3, #2
 8000350:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 8000352:	2300      	movs	r3, #0
 8000354:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000356:	2300      	movs	r3, #0
 8000358:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800035a:	f107 0318 	add.w	r3, r7, #24
 800035e:	4618      	mov	r0, r3
 8000360:	f000 fe62 	bl	8001028 <HAL_RCC_OscConfig>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <SystemClock_Config+0x84>
  {
    Error_Handler();
 800036a:	f000 f87b 	bl	8000464 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800036e:	231f      	movs	r3, #31
 8000370:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000372:	2303      	movs	r3, #3
 8000374:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000376:	2300      	movs	r3, #0
 8000378:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800037a:	2300      	movs	r3, #0
 800037c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800037e:	2300      	movs	r3, #0
 8000380:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000382:	2300      	movs	r3, #0
 8000384:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000386:	463b      	mov	r3, r7
 8000388:	2104      	movs	r1, #4
 800038a:	4618      	mov	r0, r3
 800038c:	f001 fd28 	bl	8001de0 <HAL_RCC_ClockConfig>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000396:	f000 f865 	bl	8000464 <Error_Handler>
  }
}
 800039a:	bf00      	nop
 800039c:	3778      	adds	r7, #120	; 0x78
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}

080003a2 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80003a2:	b580      	push	{r7, lr}
 80003a4:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 80003a6:	f000 fe2f 	bl	8001008 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80003aa:	2002      	movs	r0, #2
 80003ac:	f000 fddc 	bl	8000f68 <HAL_PWREx_ConfigSupply>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <SystemPower_Config+0x18>
  {
    Error_Handler();
 80003b6:	f000 f855 	bl	8000464 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 80003ba:	bf00      	nop
 80003bc:	bd80      	pop	{r7, pc}

080003be <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80003be:	b580      	push	{r7, lr}
 80003c0:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80003c2:	2000      	movs	r0, #0
 80003c4:	f000 fd14 	bl	8000df0 <HAL_ICACHE_ConfigAssociativityMode>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80003ce:	f000 f849 	bl	8000464 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80003d2:	f000 fd2d 	bl	8000e30 <HAL_ICACHE_Enable>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80003dc:	f000 f842 	bl	8000464 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80003e0:	bf00      	nop
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <EXTI13_IRQHandler_Config>:
  * @brief  Configures EXTI line 13 (connected to PC.13 pin) in interrupt mode
  * @param  None
  * @retval None
  */
static void EXTI13_IRQHandler_Config(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b086      	sub	sp, #24
 80003e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef   GPIO_InitStructure;


  /* Enable GPIOC clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ea:	4b13      	ldr	r3, [pc, #76]	; (8000438 <EXTI13_IRQHandler_Config+0x54>)
 80003ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80003f0:	4a11      	ldr	r2, [pc, #68]	; (8000438 <EXTI13_IRQHandler_Config+0x54>)
 80003f2:	f043 0304 	orr.w	r3, r3, #4
 80003f6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80003fa:	4b0f      	ldr	r3, [pc, #60]	; (8000438 <EXTI13_IRQHandler_Config+0x54>)
 80003fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000400:	f003 0304 	and.w	r3, r3, #4
 8000404:	603b      	str	r3, [r7, #0]
 8000406:	683b      	ldr	r3, [r7, #0]

  /* Configure PC.13 pin as input floating */
  GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;
 8000408:	4b0c      	ldr	r3, [pc, #48]	; (800043c <EXTI13_IRQHandler_Config+0x58>)
 800040a:	60bb      	str	r3, [r7, #8]


  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800040c:	2300      	movs	r3, #0
 800040e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Pin = BUTTON_USER_PIN;
 8000410:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000414:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	4619      	mov	r1, r3
 800041a:	4809      	ldr	r0, [pc, #36]	; (8000440 <EXTI13_IRQHandler_Config+0x5c>)
 800041c:	f000 faac 	bl	8000978 <HAL_GPIO_Init>


  /* Enable and set line 13 Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(EXTI13_IRQn, 2, 0);
 8000420:	2200      	movs	r2, #0
 8000422:	2102      	movs	r1, #2
 8000424:	2018      	movs	r0, #24
 8000426:	f000 fa72 	bl	800090e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 800042a:	2018      	movs	r0, #24
 800042c:	f000 fa89 	bl	8000942 <HAL_NVIC_EnableIRQ>
}
 8000430:	bf00      	nop
 8000432:	3718      	adds	r7, #24
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	46020c00 	.word	0x46020c00
 800043c:	10210000 	.word	0x10210000
 8000440:	42020800 	.word	0x42020800

08000444 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief EXTI line detection callbacks
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	4603      	mov	r3, r0
 800044c:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == BUTTON_USER_PIN)
 800044e:	88fb      	ldrh	r3, [r7, #6]
 8000450:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000454:	d102      	bne.n	800045c <HAL_GPIO_EXTI_Falling_Callback+0x18>
  {
    /* Toggle LED7 */
    BSP_LED_Toggle(LED7);
 8000456:	2001      	movs	r0, #1
 8000458:	f000 f8a4 	bl	80005a4 <BSP_LED_Toggle>
  }
}
 800045c:	bf00      	nop
 800045e:	3708      	adds	r7, #8
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}

08000464 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while (1)
 8000468:	e7fe      	b.n	8000468 <Error_Handler+0x4>
	...

0800046c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800046c:	b480      	push	{r7}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000472:	4b0a      	ldr	r3, [pc, #40]	; (800049c <HAL_MspInit+0x30>)
 8000474:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000478:	4a08      	ldr	r2, [pc, #32]	; (800049c <HAL_MspInit+0x30>)
 800047a:	f043 0304 	orr.w	r3, r3, #4
 800047e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000482:	4b06      	ldr	r3, [pc, #24]	; (800049c <HAL_MspInit+0x30>)
 8000484:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000488:	f003 0304 	and.w	r3, r3, #4
 800048c:	607b      	str	r3, [r7, #4]
 800048e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000490:	bf00      	nop
 8000492:	370c      	adds	r7, #12
 8000494:	46bd      	mov	sp, r7
 8000496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049a:	4770      	bx	lr
 800049c:	46020c00 	.word	0x46020c00

080004a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80004a4:	bf00      	nop
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr

080004ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004ae:	b480      	push	{r7}
 80004b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004b2:	e7fe      	b.n	80004b2 <HardFault_Handler+0x4>

080004b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <MemManage_Handler+0x4>

080004ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ba:	b480      	push	{r7}
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004be:	bf00      	nop
 80004c0:	46bd      	mov	sp, r7
 80004c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c6:	4770      	bx	lr

080004c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004cc:	bf00      	nop
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr

080004d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004d6:	b480      	push	{r7}
 80004d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004da:	bf00      	nop
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr

080004e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004e8:	f000 f916 	bl	8000718 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004ec:	bf00      	nop
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <EXTI13_IRQHandler>:
  * @brief  This function handles external line 13 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI13_IRQHandler(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_USER_PIN);
 80004f4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80004f8:	f000 fc48 	bl	8000d8c <HAL_GPIO_EXTI_IRQHandler>
}
 80004fc:	bf00      	nop
 80004fe:	bd80      	pop	{r7, pc}

08000500 <BSP_LED_Init>:
  *            @arg  LED6
  *            @arg  LED7
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08a      	sub	sp, #40	; 0x28
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800050a:	2300      	movs	r3, #0
 800050c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  LED6_GPIO_CLK_ENABLE();
 800050e:	4b22      	ldr	r3, [pc, #136]	; (8000598 <BSP_LED_Init+0x98>)
 8000510:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000514:	4a20      	ldr	r2, [pc, #128]	; (8000598 <BSP_LED_Init+0x98>)
 8000516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800051a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800051e:	4b1e      	ldr	r3, [pc, #120]	; (8000598 <BSP_LED_Init+0x98>)
 8000520:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000528:	60fb      	str	r3, [r7, #12]
 800052a:	68fb      	ldr	r3, [r7, #12]
  LED7_GPIO_CLK_ENABLE();
 800052c:	4b1a      	ldr	r3, [pc, #104]	; (8000598 <BSP_LED_Init+0x98>)
 800052e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000532:	4a19      	ldr	r2, [pc, #100]	; (8000598 <BSP_LED_Init+0x98>)
 8000534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000538:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800053c:	4b16      	ldr	r3, [pc, #88]	; (8000598 <BSP_LED_Init+0x98>)
 800053e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 800054a:	2301      	movs	r3, #1
 800054c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800054e:	2300      	movs	r3, #0
 8000550:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000552:	2302      	movs	r3, #2
 8000554:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Pin = LED_PIN [Led];
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	4a10      	ldr	r2, [pc, #64]	; (800059c <BSP_LED_Init+0x9c>)
 800055a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800055e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000560:	79fb      	ldrb	r3, [r7, #7]
 8000562:	4a0f      	ldr	r2, [pc, #60]	; (80005a0 <BSP_LED_Init+0xa0>)
 8000564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000568:	f107 0210 	add.w	r2, r7, #16
 800056c:	4611      	mov	r1, r2
 800056e:	4618      	mov	r0, r3
 8000570:	f000 fa02 	bl	8000978 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN[Led], GPIO_PIN_SET);
 8000574:	79fb      	ldrb	r3, [r7, #7]
 8000576:	4a0a      	ldr	r2, [pc, #40]	; (80005a0 <BSP_LED_Init+0xa0>)
 8000578:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	4a07      	ldr	r2, [pc, #28]	; (800059c <BSP_LED_Init+0x9c>)
 8000580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000584:	b29b      	uxth	r3, r3
 8000586:	2201      	movs	r2, #1
 8000588:	4619      	mov	r1, r3
 800058a:	f000 fbcd 	bl	8000d28 <HAL_GPIO_WritePin>

  return ret;
 800058e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000590:	4618      	mov	r0, r3
 8000592:	3728      	adds	r7, #40	; 0x28
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	46020c00 	.word	0x46020c00
 800059c:	08002578 	.word	0x08002578
 80005a0:	20000000 	.word	0x20000000

080005a4 <BSP_LED_Toggle>:
  *            @arg  LED5
  *            @arg  LED7
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  HAL_GPIO_TogglePin(LED_PORT[Led], (uint16_t)LED_PIN[Led]);
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	4a09      	ldr	r2, [pc, #36]	; (80005d8 <BSP_LED_Toggle+0x34>)
 80005b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	4908      	ldr	r1, [pc, #32]	; (80005dc <BSP_LED_Toggle+0x38>)
 80005ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005be:	b29b      	uxth	r3, r3
 80005c0:	4619      	mov	r1, r3
 80005c2:	4610      	mov	r0, r2
 80005c4:	f000 fbc8 	bl	8000d58 <HAL_GPIO_TogglePin>
  ret = BSP_ERROR_NONE;
 80005c8:	2300      	movs	r3, #0
 80005ca:	60fb      	str	r3, [r7, #12]

  return ret;
 80005cc:	68fb      	ldr	r3, [r7, #12]
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	3710      	adds	r7, #16
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000000 	.word	0x20000000
 80005dc:	08002578 	.word	0x08002578

080005e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80005e4:	4b18      	ldr	r3, [pc, #96]	; (8000648 <SystemInit+0x68>)
 80005e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005ea:	4a17      	ldr	r2, [pc, #92]	; (8000648 <SystemInit+0x68>)
 80005ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80005f4:	4b15      	ldr	r3, [pc, #84]	; (800064c <SystemInit+0x6c>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80005fa:	4b14      	ldr	r3, [pc, #80]	; (800064c <SystemInit+0x6c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000600:	4b12      	ldr	r3, [pc, #72]	; (800064c <SystemInit+0x6c>)
 8000602:	2200      	movs	r2, #0
 8000604:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <SystemInit+0x6c>)
 8000608:	2200      	movs	r2, #0
 800060a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <SystemInit+0x6c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a0e      	ldr	r2, [pc, #56]	; (800064c <SystemInit+0x6c>)
 8000612:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000616:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800061a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 800061c:	4b0b      	ldr	r3, [pc, #44]	; (800064c <SystemInit+0x6c>)
 800061e:	2200      	movs	r2, #0
 8000620:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000622:	4b0a      	ldr	r3, [pc, #40]	; (800064c <SystemInit+0x6c>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a09      	ldr	r2, [pc, #36]	; (800064c <SystemInit+0x6c>)
 8000628:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800062c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800062e:	4b07      	ldr	r3, [pc, #28]	; (800064c <SystemInit+0x6c>)
 8000630:	2200      	movs	r2, #0
 8000632:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000634:	4b04      	ldr	r3, [pc, #16]	; (8000648 <SystemInit+0x68>)
 8000636:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800063a:	609a      	str	r2, [r3, #8]
  #endif
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	e000ed00 	.word	0xe000ed00
 800064c:	46020c00 	.word	0x46020c00

08000650 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000654:	4b11      	ldr	r3, [pc, #68]	; (800069c <HAL_Init+0x4c>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a10      	ldr	r2, [pc, #64]	; (800069c <HAL_Init+0x4c>)
 800065a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800065e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000660:	2003      	movs	r0, #3
 8000662:	f000 f949 	bl	80008f8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000666:	f001 fdad 	bl	80021c4 <HAL_RCC_GetSysClockFreq>
 800066a:	4602      	mov	r2, r0
 800066c:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <HAL_Init+0x50>)
 800066e:	6a1b      	ldr	r3, [r3, #32]
 8000670:	f003 030f 	and.w	r3, r3, #15
 8000674:	490b      	ldr	r1, [pc, #44]	; (80006a4 <HAL_Init+0x54>)
 8000676:	5ccb      	ldrb	r3, [r1, r3]
 8000678:	fa22 f303 	lsr.w	r3, r2, r3
 800067c:	4a0a      	ldr	r2, [pc, #40]	; (80006a8 <HAL_Init+0x58>)
 800067e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000680:	2000      	movs	r0, #0
 8000682:	f000 f813 	bl	80006ac <HAL_InitTick>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 800068c:	2301      	movs	r3, #1
 800068e:	e002      	b.n	8000696 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000690:	f7ff feec 	bl	800046c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000694:	2300      	movs	r3, #0
}
 8000696:	4618      	mov	r0, r3
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40022000 	.word	0x40022000
 80006a0:	46020c00 	.word	0x46020c00
 80006a4:	08002580 	.word	0x08002580
 80006a8:	20000008 	.word	0x20000008

080006ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80006b4:	4b15      	ldr	r3, [pc, #84]	; (800070c <HAL_InitTick+0x60>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d101      	bne.n	80006c0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80006bc:	2301      	movs	r3, #1
 80006be:	e021      	b.n	8000704 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80006c0:	4b13      	ldr	r3, [pc, #76]	; (8000710 <HAL_InitTick+0x64>)
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	4b11      	ldr	r3, [pc, #68]	; (800070c <HAL_InitTick+0x60>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	4619      	mov	r1, r3
 80006ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80006d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 f941 	bl	800095e <HAL_SYSTICK_Config>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80006e2:	2301      	movs	r3, #1
 80006e4:	e00e      	b.n	8000704 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2b0f      	cmp	r3, #15
 80006ea:	d80a      	bhi.n	8000702 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006ec:	2200      	movs	r2, #0
 80006ee:	6879      	ldr	r1, [r7, #4]
 80006f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006f4:	f000 f90b 	bl	800090e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006f8:	4a06      	ldr	r2, [pc, #24]	; (8000714 <HAL_InitTick+0x68>)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006fe:	2300      	movs	r3, #0
 8000700:	e000      	b.n	8000704 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000702:	2301      	movs	r3, #1
}
 8000704:	4618      	mov	r0, r3
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000010 	.word	0x20000010
 8000710:	20000008 	.word	0x20000008
 8000714:	2000000c 	.word	0x2000000c

08000718 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <HAL_IncTick+0x20>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	461a      	mov	r2, r3
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <HAL_IncTick+0x24>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4413      	add	r3, r2
 8000728:	4a04      	ldr	r2, [pc, #16]	; (800073c <HAL_IncTick+0x24>)
 800072a:	6013      	str	r3, [r2, #0]
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	20000010 	.word	0x20000010
 800073c:	20000030 	.word	0x20000030

08000740 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  return uwTick;
 8000744:	4b03      	ldr	r3, [pc, #12]	; (8000754 <HAL_GetTick+0x14>)
 8000746:	681b      	ldr	r3, [r3, #0]
}
 8000748:	4618      	mov	r0, r3
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	20000030 	.word	0x20000030

08000758 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000758:	b480      	push	{r7}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	f003 0307 	and.w	r3, r3, #7
 8000766:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <__NVIC_SetPriorityGrouping+0x44>)
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800076e:	68ba      	ldr	r2, [r7, #8]
 8000770:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000774:	4013      	ands	r3, r2
 8000776:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000780:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800078a:	4a04      	ldr	r2, [pc, #16]	; (800079c <__NVIC_SetPriorityGrouping+0x44>)
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	60d3      	str	r3, [r2, #12]
}
 8000790:	bf00      	nop
 8000792:	3714      	adds	r7, #20
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	e000ed00 	.word	0xe000ed00

080007a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007a4:	4b04      	ldr	r3, [pc, #16]	; (80007b8 <__NVIC_GetPriorityGrouping+0x18>)
 80007a6:	68db      	ldr	r3, [r3, #12]
 80007a8:	0a1b      	lsrs	r3, r3, #8
 80007aa:	f003 0307 	and.w	r3, r3, #7
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	e000ed00 	.word	0xe000ed00

080007bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	db0b      	blt.n	80007e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	f003 021f 	and.w	r2, r3, #31
 80007d4:	4907      	ldr	r1, [pc, #28]	; (80007f4 <__NVIC_EnableIRQ+0x38>)
 80007d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007da:	095b      	lsrs	r3, r3, #5
 80007dc:	2001      	movs	r0, #1
 80007de:	fa00 f202 	lsl.w	r2, r0, r2
 80007e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80007e6:	bf00      	nop
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	e000e100 	.word	0xe000e100

080007f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	6039      	str	r1, [r7, #0]
 8000802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000808:	2b00      	cmp	r3, #0
 800080a:	db0a      	blt.n	8000822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	b2da      	uxtb	r2, r3
 8000810:	490c      	ldr	r1, [pc, #48]	; (8000844 <__NVIC_SetPriority+0x4c>)
 8000812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000816:	0112      	lsls	r2, r2, #4
 8000818:	b2d2      	uxtb	r2, r2
 800081a:	440b      	add	r3, r1
 800081c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000820:	e00a      	b.n	8000838 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	b2da      	uxtb	r2, r3
 8000826:	4908      	ldr	r1, [pc, #32]	; (8000848 <__NVIC_SetPriority+0x50>)
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	f003 030f 	and.w	r3, r3, #15
 800082e:	3b04      	subs	r3, #4
 8000830:	0112      	lsls	r2, r2, #4
 8000832:	b2d2      	uxtb	r2, r2
 8000834:	440b      	add	r3, r1
 8000836:	761a      	strb	r2, [r3, #24]
}
 8000838:	bf00      	nop
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	e000e100 	.word	0xe000e100
 8000848:	e000ed00 	.word	0xe000ed00

0800084c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800084c:	b480      	push	{r7}
 800084e:	b089      	sub	sp, #36	; 0x24
 8000850:	af00      	add	r7, sp, #0
 8000852:	60f8      	str	r0, [r7, #12]
 8000854:	60b9      	str	r1, [r7, #8]
 8000856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	f003 0307 	and.w	r3, r3, #7
 800085e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000860:	69fb      	ldr	r3, [r7, #28]
 8000862:	f1c3 0307 	rsb	r3, r3, #7
 8000866:	2b04      	cmp	r3, #4
 8000868:	bf28      	it	cs
 800086a:	2304      	movcs	r3, #4
 800086c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	3304      	adds	r3, #4
 8000872:	2b06      	cmp	r3, #6
 8000874:	d902      	bls.n	800087c <NVIC_EncodePriority+0x30>
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	3b03      	subs	r3, #3
 800087a:	e000      	b.n	800087e <NVIC_EncodePriority+0x32>
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000880:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000884:	69bb      	ldr	r3, [r7, #24]
 8000886:	fa02 f303 	lsl.w	r3, r2, r3
 800088a:	43da      	mvns	r2, r3
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	401a      	ands	r2, r3
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000894:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	fa01 f303 	lsl.w	r3, r1, r3
 800089e:	43d9      	mvns	r1, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a4:	4313      	orrs	r3, r2
         );
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3724      	adds	r7, #36	; 0x24
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
	...

080008b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	3b01      	subs	r3, #1
 80008c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008c4:	d301      	bcc.n	80008ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008c6:	2301      	movs	r3, #1
 80008c8:	e00f      	b.n	80008ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ca:	4a0a      	ldr	r2, [pc, #40]	; (80008f4 <SysTick_Config+0x40>)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	3b01      	subs	r3, #1
 80008d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008d2:	210f      	movs	r1, #15
 80008d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008d8:	f7ff ff8e 	bl	80007f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008dc:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <SysTick_Config+0x40>)
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008e2:	4b04      	ldr	r3, [pc, #16]	; (80008f4 <SysTick_Config+0x40>)
 80008e4:	2207      	movs	r2, #7
 80008e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008e8:	2300      	movs	r3, #0
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	e000e010 	.word	0xe000e010

080008f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f7ff ff29 	bl	8000758 <__NVIC_SetPriorityGrouping>
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	b086      	sub	sp, #24
 8000912:	af00      	add	r7, sp, #0
 8000914:	4603      	mov	r3, r0
 8000916:	60b9      	str	r1, [r7, #8]
 8000918:	607a      	str	r2, [r7, #4]
 800091a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800091c:	f7ff ff40 	bl	80007a0 <__NVIC_GetPriorityGrouping>
 8000920:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	68b9      	ldr	r1, [r7, #8]
 8000926:	6978      	ldr	r0, [r7, #20]
 8000928:	f7ff ff90 	bl	800084c <NVIC_EncodePriority>
 800092c:	4602      	mov	r2, r0
 800092e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000932:	4611      	mov	r1, r2
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff ff5f 	bl	80007f8 <__NVIC_SetPriority>
}
 800093a:	bf00      	nop
 800093c:	3718      	adds	r7, #24
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	b082      	sub	sp, #8
 8000946:	af00      	add	r7, sp, #0
 8000948:	4603      	mov	r3, r0
 800094a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800094c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff ff33 	bl	80007bc <__NVIC_EnableIRQ>
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b082      	sub	sp, #8
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f7ff ffa4 	bl	80008b4 <SysTick_Config>
 800096c:	4603      	mov	r3, r0
}
 800096e:	4618      	mov	r0, r3
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
	...

08000978 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000978:	b480      	push	{r7}
 800097a:	b089      	sub	sp, #36	; 0x24
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8000982:	2300      	movs	r3, #0
 8000984:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800098a:	e1ba      	b.n	8000d02 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	2101      	movs	r1, #1
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	fa01 f303 	lsl.w	r3, r1, r3
 8000998:	4013      	ands	r3, r2
 800099a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	f000 81aa 	beq.w	8000cfc <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4a55      	ldr	r2, [pc, #340]	; (8000b00 <HAL_GPIO_Init+0x188>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d15d      	bne.n	8000a6c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80009b6:	2201      	movs	r2, #1
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	fa02 f303 	lsl.w	r3, r2, r3
 80009be:	43db      	mvns	r3, r3
 80009c0:	69fa      	ldr	r2, [r7, #28]
 80009c2:	4013      	ands	r3, r2
 80009c4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	f003 0201 	and.w	r2, r3, #1
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	fa02 f303 	lsl.w	r3, r2, r3
 80009d4:	69fa      	ldr	r2, [r7, #28]
 80009d6:	4313      	orrs	r3, r2
 80009d8:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	69fa      	ldr	r2, [r7, #28]
 80009de:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80009e0:	4a48      	ldr	r2, [pc, #288]	; (8000b04 <HAL_GPIO_Init+0x18c>)
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80009e8:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80009ea:	4a46      	ldr	r2, [pc, #280]	; (8000b04 <HAL_GPIO_Init+0x18c>)
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	00db      	lsls	r3, r3, #3
 80009f0:	4413      	add	r3, r2
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80009f6:	69bb      	ldr	r3, [r7, #24]
 80009f8:	08da      	lsrs	r2, r3, #3
 80009fa:	693b      	ldr	r3, [r7, #16]
 80009fc:	3208      	adds	r2, #8
 80009fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a02:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8000a04:	69bb      	ldr	r3, [r7, #24]
 8000a06:	f003 0307 	and.w	r3, r3, #7
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	220f      	movs	r2, #15
 8000a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a12:	43db      	mvns	r3, r3
 8000a14:	69fa      	ldr	r2, [r7, #28]
 8000a16:	4013      	ands	r3, r2
 8000a18:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8000a1a:	69bb      	ldr	r3, [r7, #24]
 8000a1c:	f003 0307 	and.w	r3, r3, #7
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	220b      	movs	r2, #11
 8000a24:	fa02 f303 	lsl.w	r3, r2, r3
 8000a28:	69fa      	ldr	r2, [r7, #28]
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8000a2e:	69bb      	ldr	r3, [r7, #24]
 8000a30:	08da      	lsrs	r2, r3, #3
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	3208      	adds	r2, #8
 8000a36:	69f9      	ldr	r1, [r7, #28]
 8000a38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8000a3c:	693b      	ldr	r3, [r7, #16]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8000a42:	69bb      	ldr	r3, [r7, #24]
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	2203      	movs	r2, #3
 8000a48:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4c:	43db      	mvns	r3, r3
 8000a4e:	69fa      	ldr	r2, [r7, #28]
 8000a50:	4013      	ands	r3, r2
 8000a52:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8000a54:	69bb      	ldr	r3, [r7, #24]
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	2202      	movs	r2, #2
 8000a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5e:	69fa      	ldr	r2, [r7, #28]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	69fa      	ldr	r2, [r7, #28]
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	e067      	b.n	8000b3c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	2b02      	cmp	r3, #2
 8000a72:	d003      	beq.n	8000a7c <HAL_GPIO_Init+0x104>
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	2b12      	cmp	r3, #18
 8000a7a:	d145      	bne.n	8000b08 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	08da      	lsrs	r2, r3, #3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	3208      	adds	r2, #8
 8000a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a88:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	f003 0307 	and.w	r3, r3, #7
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	220f      	movs	r2, #15
 8000a94:	fa02 f303 	lsl.w	r3, r2, r3
 8000a98:	43db      	mvns	r3, r3
 8000a9a:	69fa      	ldr	r2, [r7, #28]
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	691b      	ldr	r3, [r3, #16]
 8000aa4:	f003 020f 	and.w	r2, r3, #15
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	f003 0307 	and.w	r3, r3, #7
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab4:	69fa      	ldr	r2, [r7, #28]
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	08da      	lsrs	r2, r3, #3
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	3208      	adds	r2, #8
 8000ac2:	69f9      	ldr	r1, [r7, #28]
 8000ac4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8000ac8:	693b      	ldr	r3, [r7, #16]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8000ace:	69bb      	ldr	r3, [r7, #24]
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	2203      	movs	r2, #3
 8000ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad8:	43db      	mvns	r3, r3
 8000ada:	69fa      	ldr	r2, [r7, #28]
 8000adc:	4013      	ands	r3, r2
 8000ade:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f003 0203 	and.w	r2, r3, #3
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	fa02 f303 	lsl.w	r3, r2, r3
 8000af0:	69fa      	ldr	r2, [r7, #28]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	69fa      	ldr	r2, [r7, #28]
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	e01e      	b.n	8000b3c <HAL_GPIO_Init+0x1c4>
 8000afe:	bf00      	nop
 8000b00:	46020000 	.word	0x46020000
 8000b04:	080025d0 	.word	0x080025d0
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8000b0e:	69bb      	ldr	r3, [r7, #24]
 8000b10:	005b      	lsls	r3, r3, #1
 8000b12:	2203      	movs	r2, #3
 8000b14:	fa02 f303 	lsl.w	r3, r2, r3
 8000b18:	43db      	mvns	r3, r3
 8000b1a:	69fa      	ldr	r2, [r7, #28]
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	f003 0203 	and.w	r2, r3, #3
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b30:	69fa      	ldr	r2, [r7, #28]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	69fa      	ldr	r2, [r7, #28]
 8000b3a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d00b      	beq.n	8000b5c <HAL_GPIO_Init+0x1e4>
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	2b02      	cmp	r3, #2
 8000b4a:	d007      	beq.n	8000b5c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b50:	2b11      	cmp	r3, #17
 8000b52:	d003      	beq.n	8000b5c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	2b12      	cmp	r3, #18
 8000b5a:	d130      	bne.n	8000bbe <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	689b      	ldr	r3, [r3, #8]
 8000b60:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8000b62:	69bb      	ldr	r3, [r7, #24]
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	2203      	movs	r2, #3
 8000b68:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6c:	43db      	mvns	r3, r3
 8000b6e:	69fa      	ldr	r2, [r7, #28]
 8000b70:	4013      	ands	r3, r2
 8000b72:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	68da      	ldr	r2, [r3, #12]
 8000b78:	69bb      	ldr	r3, [r7, #24]
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b80:	69fa      	ldr	r2, [r7, #28]
 8000b82:	4313      	orrs	r3, r2
 8000b84:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	69fa      	ldr	r2, [r7, #28]
 8000b8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8000b8c:	693b      	ldr	r3, [r7, #16]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8000b92:	2201      	movs	r2, #1
 8000b94:	69bb      	ldr	r3, [r7, #24]
 8000b96:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9a:	43db      	mvns	r3, r3
 8000b9c:	69fa      	ldr	r2, [r7, #28]
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	091b      	lsrs	r3, r3, #4
 8000ba8:	f003 0201 	and.w	r2, r3, #1
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	69fa      	ldr	r2, [r7, #28]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	69fa      	ldr	r2, [r7, #28]
 8000bbc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	2b03      	cmp	r3, #3
 8000bc4:	d017      	beq.n	8000bf6 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8000bc6:	693b      	ldr	r3, [r7, #16]
 8000bc8:	68db      	ldr	r3, [r3, #12]
 8000bca:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	2203      	movs	r2, #3
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	43db      	mvns	r3, r3
 8000bd8:	69fa      	ldr	r2, [r7, #28]
 8000bda:	4013      	ands	r3, r2
 8000bdc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	689a      	ldr	r2, [r3, #8]
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	69fa      	ldr	r2, [r7, #28]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	69fa      	ldr	r2, [r7, #28]
 8000bf4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d07c      	beq.n	8000cfc <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000c02:	4a47      	ldr	r2, [pc, #284]	; (8000d20 <HAL_GPIO_Init+0x3a8>)
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	089b      	lsrs	r3, r3, #2
 8000c08:	3318      	adds	r3, #24
 8000c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c0e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	f003 0303 	and.w	r3, r3, #3
 8000c16:	00db      	lsls	r3, r3, #3
 8000c18:	220f      	movs	r2, #15
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	43db      	mvns	r3, r3
 8000c20:	69fa      	ldr	r2, [r7, #28]
 8000c22:	4013      	ands	r3, r2
 8000c24:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	0a9a      	lsrs	r2, r3, #10
 8000c2a:	4b3e      	ldr	r3, [pc, #248]	; (8000d24 <HAL_GPIO_Init+0x3ac>)
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	697a      	ldr	r2, [r7, #20]
 8000c30:	f002 0203 	and.w	r2, r2, #3
 8000c34:	00d2      	lsls	r2, r2, #3
 8000c36:	4093      	lsls	r3, r2
 8000c38:	69fa      	ldr	r2, [r7, #28]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000c3e:	4938      	ldr	r1, [pc, #224]	; (8000d20 <HAL_GPIO_Init+0x3a8>)
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	089b      	lsrs	r3, r3, #2
 8000c44:	3318      	adds	r3, #24
 8000c46:	69fa      	ldr	r2, [r7, #28]
 8000c48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000c4c:	4b34      	ldr	r3, [pc, #208]	; (8000d20 <HAL_GPIO_Init+0x3a8>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	43db      	mvns	r3, r3
 8000c56:	69fa      	ldr	r2, [r7, #28]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d003      	beq.n	8000c70 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8000c68:	69fa      	ldr	r2, [r7, #28]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8000c70:	4a2b      	ldr	r2, [pc, #172]	; (8000d20 <HAL_GPIO_Init+0x3a8>)
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8000c76:	4b2a      	ldr	r3, [pc, #168]	; (8000d20 <HAL_GPIO_Init+0x3a8>)
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	43db      	mvns	r3, r3
 8000c80:	69fa      	ldr	r2, [r7, #28]
 8000c82:	4013      	ands	r3, r2
 8000c84:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d003      	beq.n	8000c9a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8000c92:	69fa      	ldr	r2, [r7, #28]
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8000c9a:	4a21      	ldr	r2, [pc, #132]	; (8000d20 <HAL_GPIO_Init+0x3a8>)
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8000ca0:	4b1f      	ldr	r3, [pc, #124]	; (8000d20 <HAL_GPIO_Init+0x3a8>)
 8000ca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000ca6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	43db      	mvns	r3, r3
 8000cac:	69fa      	ldr	r2, [r7, #28]
 8000cae:	4013      	ands	r3, r2
 8000cb0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d003      	beq.n	8000cc6 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8000cbe:	69fa      	ldr	r2, [r7, #28]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8000cc6:	4a16      	ldr	r2, [pc, #88]	; (8000d20 <HAL_GPIO_Init+0x3a8>)
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8000cce:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <HAL_GPIO_Init+0x3a8>)
 8000cd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000cd4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	69fa      	ldr	r2, [r7, #28]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d003      	beq.n	8000cf4 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8000cec:	69fa      	ldr	r2, [r7, #28]
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8000cf4:	4a0a      	ldr	r2, [pc, #40]	; (8000d20 <HAL_GPIO_Init+0x3a8>)
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	fa22 f303 	lsr.w	r3, r2, r3
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	f47f ae3d 	bne.w	800098c <HAL_GPIO_Init+0x14>
  }
}
 8000d12:	bf00      	nop
 8000d14:	bf00      	nop
 8000d16:	3724      	adds	r7, #36	; 0x24
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	46022000 	.word	0x46022000
 8000d24:	002f7f7f 	.word	0x002f7f7f

08000d28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	460b      	mov	r3, r1
 8000d32:	807b      	strh	r3, [r7, #2]
 8000d34:	4613      	mov	r3, r2
 8000d36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d38:	787b      	ldrb	r3, [r7, #1]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d003      	beq.n	8000d46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d3e:	887a      	ldrh	r2, [r7, #2]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8000d44:	e002      	b.n	8000d4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8000d46:	887a      	ldrh	r2, [r7, #2]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	460b      	mov	r3, r1
 8000d62:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	695b      	ldr	r3, [r3, #20]
 8000d68:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d6a:	887a      	ldrh	r2, [r7, #2]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	041a      	lsls	r2, r3, #16
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	43d9      	mvns	r1, r3
 8000d76:	887b      	ldrh	r3, [r7, #2]
 8000d78:	400b      	ands	r3, r1
 8000d7a:	431a      	orrs	r2, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	619a      	str	r2, [r3, #24]
}
 8000d80:	bf00      	nop
 8000d82:	3714      	adds	r7, #20
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8000d96:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8000d98:	68da      	ldr	r2, [r3, #12]
 8000d9a:	88fb      	ldrh	r3, [r7, #6]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d006      	beq.n	8000db0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8000da2:	4a0c      	ldr	r2, [pc, #48]	; (8000dd4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8000da4:	88fb      	ldrh	r3, [r7, #6]
 8000da6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8000da8:	88fb      	ldrh	r3, [r7, #6]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f000 f814 	bl	8000dd8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8000db0:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8000db2:	691a      	ldr	r2, [r3, #16]
 8000db4:	88fb      	ldrh	r3, [r7, #6]
 8000db6:	4013      	ands	r3, r2
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d006      	beq.n	8000dca <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8000dbc:	4a05      	ldr	r2, [pc, #20]	; (8000dd4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8000dbe:	88fb      	ldrh	r3, [r7, #6]
 8000dc0:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8000dc2:	88fb      	ldrh	r3, [r7, #6]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fb3d 	bl	8000444 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	46022000 	.word	0x46022000

08000dd8 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8000de2:	bf00      	nop
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
	...

08000df0 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8000dfc:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f003 0301 	and.w	r3, r3, #1
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d002      	beq.n	8000e0e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	73fb      	strb	r3, [r7, #15]
 8000e0c:	e007      	b.n	8000e1e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8000e0e:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f023 0204 	bic.w	r2, r3, #4
 8000e16:	4905      	ldr	r1, [pc, #20]	; (8000e2c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	600b      	str	r3, [r1, #0]
  }

  return status;
 8000e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3714      	adds	r7, #20
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	40030400 	.word	0x40030400

08000e30 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8000e34:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <HAL_ICACHE_Enable+0x1c>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a04      	ldr	r2, [pc, #16]	; (8000e4c <HAL_ICACHE_Enable+0x1c>)
 8000e3a:	f043 0301 	orr.w	r3, r3, #1
 8000e3e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	40030400 	.word	0x40030400

08000e50 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8000e58:	4b39      	ldr	r3, [pc, #228]	; (8000f40 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e60:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8000e62:	68ba      	ldr	r2, [r7, #8]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	429a      	cmp	r2, r3
 8000e68:	d10b      	bne.n	8000e82 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e70:	d905      	bls.n	8000e7e <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8000e72:	4b33      	ldr	r3, [pc, #204]	; (8000f40 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000e74:	68db      	ldr	r3, [r3, #12]
 8000e76:	4a32      	ldr	r2, [pc, #200]	; (8000f40 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000e78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e7c:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	e057      	b.n	8000f32 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e88:	d90a      	bls.n	8000ea0 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8000e8a:	4b2d      	ldr	r3, [pc, #180]	; (8000f40 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000e8c:	68db      	ldr	r3, [r3, #12]
 8000e8e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	4a2a      	ldr	r2, [pc, #168]	; (8000f40 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000e98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e9c:	60d3      	str	r3, [r2, #12]
 8000e9e:	e007      	b.n	8000eb0 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8000ea0:	4b27      	ldr	r3, [pc, #156]	; (8000f40 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8000ea8:	4925      	ldr	r1, [pc, #148]	; (8000f40 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8000eb0:	4b24      	ldr	r3, [pc, #144]	; (8000f44 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a24      	ldr	r2, [pc, #144]	; (8000f48 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8000eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eba:	099b      	lsrs	r3, r3, #6
 8000ebc:	2232      	movs	r2, #50	; 0x32
 8000ebe:	fb02 f303 	mul.w	r3, r2, r3
 8000ec2:	4a21      	ldr	r2, [pc, #132]	; (8000f48 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8000ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec8:	099b      	lsrs	r3, r3, #6
 8000eca:	3301      	adds	r3, #1
 8000ecc:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8000ece:	e002      	b.n	8000ed6 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8000ed6:	4b1a      	ldr	r3, [pc, #104]	; (8000f40 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d102      	bne.n	8000ee8 <HAL_PWREx_ControlVoltageScaling+0x98>
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d1f3      	bne.n	8000ed0 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d01b      	beq.n	8000f26 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8000eee:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a15      	ldr	r2, [pc, #84]	; (8000f48 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8000ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef8:	099b      	lsrs	r3, r3, #6
 8000efa:	2232      	movs	r2, #50	; 0x32
 8000efc:	fb02 f303 	mul.w	r3, r2, r3
 8000f00:	4a11      	ldr	r2, [pc, #68]	; (8000f48 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8000f02:	fba2 2303 	umull	r2, r3, r2, r3
 8000f06:	099b      	lsrs	r3, r3, #6
 8000f08:	3301      	adds	r3, #1
 8000f0a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8000f0c:	e002      	b.n	8000f14 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	3b01      	subs	r3, #1
 8000f12:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8000f14:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d102      	bne.n	8000f26 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d1f3      	bne.n	8000f0e <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d101      	bne.n	8000f30 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	e000      	b.n	8000f32 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3714      	adds	r7, #20
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	46020800 	.word	0x46020800
 8000f44:	20000008 	.word	0x20000008
 8000f48:	10624dd3 	.word	0x10624dd3

08000f4c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8000f50:	4b04      	ldr	r3, [pc, #16]	; (8000f64 <HAL_PWREx_GetVoltageRange+0x18>)
 8000f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	46020800 	.word	0x46020800

08000f68 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8000f70:	4b22      	ldr	r3, [pc, #136]	; (8000ffc <HAL_PWREx_ConfigSupply+0x94>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a22      	ldr	r2, [pc, #136]	; (8001000 <HAL_PWREx_ConfigSupply+0x98>)
 8000f76:	fba2 2303 	umull	r2, r3, r2, r3
 8000f7a:	099b      	lsrs	r3, r3, #6
 8000f7c:	2232      	movs	r2, #50	; 0x32
 8000f7e:	fb02 f303 	mul.w	r3, r2, r3
 8000f82:	4a1f      	ldr	r2, [pc, #124]	; (8001000 <HAL_PWREx_ConfigSupply+0x98>)
 8000f84:	fba2 2303 	umull	r2, r3, r2, r3
 8000f88:	099b      	lsrs	r3, r3, #6
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d113      	bne.n	8000fbc <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8000f94:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <HAL_PWREx_ConfigSupply+0x9c>)
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	4a1a      	ldr	r2, [pc, #104]	; (8001004 <HAL_PWREx_ConfigSupply+0x9c>)
 8000f9a:	f023 0302 	bic.w	r3, r3, #2
 8000f9e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8000fa0:	e002      	b.n	8000fa8 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	3b01      	subs	r3, #1
 8000fa6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8000fa8:	4b16      	ldr	r3, [pc, #88]	; (8001004 <HAL_PWREx_ConfigSupply+0x9c>)
 8000faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fac:	f003 0302 	and.w	r3, r3, #2
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d116      	bne.n	8000fe2 <HAL_PWREx_ConfigSupply+0x7a>
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d1f3      	bne.n	8000fa2 <HAL_PWREx_ConfigSupply+0x3a>
 8000fba:	e012      	b.n	8000fe2 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8000fbc:	4b11      	ldr	r3, [pc, #68]	; (8001004 <HAL_PWREx_ConfigSupply+0x9c>)
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	4a10      	ldr	r2, [pc, #64]	; (8001004 <HAL_PWREx_ConfigSupply+0x9c>)
 8000fc2:	f043 0302 	orr.w	r3, r3, #2
 8000fc6:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8000fc8:	e002      	b.n	8000fd0 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <HAL_PWREx_ConfigSupply+0x9c>)
 8000fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fd4:	f003 0302 	and.w	r3, r3, #2
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d102      	bne.n	8000fe2 <HAL_PWREx_ConfigSupply+0x7a>
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d1f3      	bne.n	8000fca <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d101      	bne.n	8000fec <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e000      	b.n	8000fee <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3714      	adds	r7, #20
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20000008 	.word	0x20000008
 8001000:	10624dd3 	.word	0x10624dd3
 8001004:	46020800 	.word	0x46020800

08001008 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800100e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001010:	4a04      	ldr	r2, [pc, #16]	; (8001024 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001012:	f043 0301 	orr.w	r3, r3, #1
 8001016:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	46020800 	.word	0x46020800

08001028 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08e      	sub	sp, #56	; 0x38
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8001030:	2300      	movs	r3, #0
 8001032:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d102      	bne.n	8001042 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	f000 bec8 	b.w	8001dd2 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001042:	4b99      	ldr	r3, [pc, #612]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	f003 030c 	and.w	r3, r3, #12
 800104a:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800104c:	4b96      	ldr	r3, [pc, #600]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 800104e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001050:	f003 0303 	and.w	r3, r3, #3
 8001054:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0310 	and.w	r3, r3, #16
 800105e:	2b00      	cmp	r3, #0
 8001060:	f000 816c 	beq.w	800133c <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001066:	2b00      	cmp	r3, #0
 8001068:	d007      	beq.n	800107a <HAL_RCC_OscConfig+0x52>
 800106a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800106c:	2b0c      	cmp	r3, #12
 800106e:	f040 80de 	bne.w	800122e <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001074:	2b01      	cmp	r3, #1
 8001076:	f040 80da 	bne.w	800122e <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	69db      	ldr	r3, [r3, #28]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d102      	bne.n	8001088 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	f000 bea5 	b.w	8001dd2 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800108c:	4b86      	ldr	r3, [pc, #536]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d004      	beq.n	80010a2 <HAL_RCC_OscConfig+0x7a>
 8001098:	4b83      	ldr	r3, [pc, #524]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80010a0:	e005      	b.n	80010ae <HAL_RCC_OscConfig+0x86>
 80010a2:	4b81      	ldr	r3, [pc, #516]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 80010a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010a8:	041b      	lsls	r3, r3, #16
 80010aa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d255      	bcs.n	800115e <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80010b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d10a      	bne.n	80010ce <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010bc:	4618      	mov	r0, r3
 80010be:	f001 f99d 	bl	80023fc <RCC_SetFlashLatencyFromMSIRange>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d002      	beq.n	80010ce <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	f000 be82 	b.w	8001dd2 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80010ce:	4b76      	ldr	r3, [pc, #472]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	4a75      	ldr	r2, [pc, #468]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 80010d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80010d8:	6093      	str	r3, [r2, #8]
 80010da:	4b73      	ldr	r3, [pc, #460]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e6:	4970      	ldr	r1, [pc, #448]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 80010e8:	4313      	orrs	r3, r2
 80010ea:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80010f4:	d309      	bcc.n	800110a <HAL_RCC_OscConfig+0xe2>
 80010f6:	4b6c      	ldr	r3, [pc, #432]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	f023 021f 	bic.w	r2, r3, #31
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6a1b      	ldr	r3, [r3, #32]
 8001102:	4969      	ldr	r1, [pc, #420]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 8001104:	4313      	orrs	r3, r2
 8001106:	60cb      	str	r3, [r1, #12]
 8001108:	e07e      	b.n	8001208 <HAL_RCC_OscConfig+0x1e0>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110e:	2b00      	cmp	r3, #0
 8001110:	da0a      	bge.n	8001128 <HAL_RCC_OscConfig+0x100>
 8001112:	4b65      	ldr	r3, [pc, #404]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a1b      	ldr	r3, [r3, #32]
 800111e:	015b      	lsls	r3, r3, #5
 8001120:	4961      	ldr	r1, [pc, #388]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 8001122:	4313      	orrs	r3, r2
 8001124:	60cb      	str	r3, [r1, #12]
 8001126:	e06f      	b.n	8001208 <HAL_RCC_OscConfig+0x1e0>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001130:	d30a      	bcc.n	8001148 <HAL_RCC_OscConfig+0x120>
 8001132:	4b5d      	ldr	r3, [pc, #372]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6a1b      	ldr	r3, [r3, #32]
 800113e:	029b      	lsls	r3, r3, #10
 8001140:	4959      	ldr	r1, [pc, #356]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 8001142:	4313      	orrs	r3, r2
 8001144:	60cb      	str	r3, [r1, #12]
 8001146:	e05f      	b.n	8001208 <HAL_RCC_OscConfig+0x1e0>
 8001148:	4b57      	ldr	r3, [pc, #348]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6a1b      	ldr	r3, [r3, #32]
 8001154:	03db      	lsls	r3, r3, #15
 8001156:	4954      	ldr	r1, [pc, #336]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 8001158:	4313      	orrs	r3, r2
 800115a:	60cb      	str	r3, [r1, #12]
 800115c:	e054      	b.n	8001208 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800115e:	4b52      	ldr	r3, [pc, #328]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	4a51      	ldr	r2, [pc, #324]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 8001164:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001168:	6093      	str	r3, [r2, #8]
 800116a:	4b4f      	ldr	r3, [pc, #316]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001176:	494c      	ldr	r1, [pc, #304]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 8001178:	4313      	orrs	r3, r2
 800117a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001180:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001184:	d309      	bcc.n	800119a <HAL_RCC_OscConfig+0x172>
 8001186:	4b48      	ldr	r3, [pc, #288]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	f023 021f 	bic.w	r2, r3, #31
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6a1b      	ldr	r3, [r3, #32]
 8001192:	4945      	ldr	r1, [pc, #276]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 8001194:	4313      	orrs	r3, r2
 8001196:	60cb      	str	r3, [r1, #12]
 8001198:	e028      	b.n	80011ec <HAL_RCC_OscConfig+0x1c4>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119e:	2b00      	cmp	r3, #0
 80011a0:	da0a      	bge.n	80011b8 <HAL_RCC_OscConfig+0x190>
 80011a2:	4b41      	ldr	r3, [pc, #260]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6a1b      	ldr	r3, [r3, #32]
 80011ae:	015b      	lsls	r3, r3, #5
 80011b0:	493d      	ldr	r1, [pc, #244]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 80011b2:	4313      	orrs	r3, r2
 80011b4:	60cb      	str	r3, [r1, #12]
 80011b6:	e019      	b.n	80011ec <HAL_RCC_OscConfig+0x1c4>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011c0:	d30a      	bcc.n	80011d8 <HAL_RCC_OscConfig+0x1b0>
 80011c2:	4b39      	ldr	r3, [pc, #228]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6a1b      	ldr	r3, [r3, #32]
 80011ce:	029b      	lsls	r3, r3, #10
 80011d0:	4935      	ldr	r1, [pc, #212]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 80011d2:	4313      	orrs	r3, r2
 80011d4:	60cb      	str	r3, [r1, #12]
 80011d6:	e009      	b.n	80011ec <HAL_RCC_OscConfig+0x1c4>
 80011d8:	4b33      	ldr	r3, [pc, #204]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a1b      	ldr	r3, [r3, #32]
 80011e4:	03db      	lsls	r3, r3, #15
 80011e6:	4930      	ldr	r1, [pc, #192]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 80011e8:	4313      	orrs	r3, r2
 80011ea:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80011ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d10a      	bne.n	8001208 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f6:	4618      	mov	r0, r3
 80011f8:	f001 f900 	bl	80023fc <RCC_SetFlashLatencyFromMSIRange>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d002      	beq.n	8001208 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	f000 bde5 	b.w	8001dd2 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8001208:	f001 f8de 	bl	80023c8 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800120c:	4b27      	ldr	r3, [pc, #156]	; (80012ac <HAL_RCC_OscConfig+0x284>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff fa4b 	bl	80006ac <HAL_InitTick>
 8001216:	4603      	mov	r3, r0
 8001218:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 800121c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001220:	2b00      	cmp	r3, #0
 8001222:	f000 808a 	beq.w	800133a <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8001226:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800122a:	f000 bdd2 	b.w	8001dd2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d066      	beq.n	8001304 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8001236:	4b1c      	ldr	r3, [pc, #112]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a1b      	ldr	r2, [pc, #108]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001242:	f7ff fa7d 	bl	8000740 <HAL_GetTick>
 8001246:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001248:	e009      	b.n	800125e <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800124a:	f7ff fa79 	bl	8000740 <HAL_GetTick>
 800124e:	4602      	mov	r2, r0
 8001250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	2b02      	cmp	r3, #2
 8001256:	d902      	bls.n	800125e <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	f000 bdba 	b.w	8001dd2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800125e:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0304 	and.w	r3, r3, #4
 8001266:	2b00      	cmp	r3, #0
 8001268:	d0ef      	beq.n	800124a <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800126a:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	4a0e      	ldr	r2, [pc, #56]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 8001270:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001274:	6093      	str	r3, [r2, #8]
 8001276:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001282:	4909      	ldr	r1, [pc, #36]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 8001284:	4313      	orrs	r3, r2
 8001286:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001290:	d30e      	bcc.n	80012b0 <HAL_RCC_OscConfig+0x288>
 8001292:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	f023 021f 	bic.w	r2, r3, #31
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a1b      	ldr	r3, [r3, #32]
 800129e:	4902      	ldr	r1, [pc, #8]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 80012a0:	4313      	orrs	r3, r2
 80012a2:	60cb      	str	r3, [r1, #12]
 80012a4:	e04a      	b.n	800133c <HAL_RCC_OscConfig+0x314>
 80012a6:	bf00      	nop
 80012a8:	46020c00 	.word	0x46020c00
 80012ac:	2000000c 	.word	0x2000000c
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	da0a      	bge.n	80012ce <HAL_RCC_OscConfig+0x2a6>
 80012b8:	4b98      	ldr	r3, [pc, #608]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a1b      	ldr	r3, [r3, #32]
 80012c4:	015b      	lsls	r3, r3, #5
 80012c6:	4995      	ldr	r1, [pc, #596]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 80012c8:	4313      	orrs	r3, r2
 80012ca:	60cb      	str	r3, [r1, #12]
 80012cc:	e036      	b.n	800133c <HAL_RCC_OscConfig+0x314>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012d6:	d30a      	bcc.n	80012ee <HAL_RCC_OscConfig+0x2c6>
 80012d8:	4b90      	ldr	r3, [pc, #576]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a1b      	ldr	r3, [r3, #32]
 80012e4:	029b      	lsls	r3, r3, #10
 80012e6:	498d      	ldr	r1, [pc, #564]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 80012e8:	4313      	orrs	r3, r2
 80012ea:	60cb      	str	r3, [r1, #12]
 80012ec:	e026      	b.n	800133c <HAL_RCC_OscConfig+0x314>
 80012ee:	4b8b      	ldr	r3, [pc, #556]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6a1b      	ldr	r3, [r3, #32]
 80012fa:	03db      	lsls	r3, r3, #15
 80012fc:	4987      	ldr	r1, [pc, #540]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 80012fe:	4313      	orrs	r3, r2
 8001300:	60cb      	str	r3, [r1, #12]
 8001302:	e01b      	b.n	800133c <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8001304:	4b85      	ldr	r3, [pc, #532]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a84      	ldr	r2, [pc, #528]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 800130a:	f023 0301 	bic.w	r3, r3, #1
 800130e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001310:	f7ff fa16 	bl	8000740 <HAL_GetTick>
 8001314:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001316:	e009      	b.n	800132c <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001318:	f7ff fa12 	bl	8000740 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d902      	bls.n	800132c <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	f000 bd53 	b.w	8001dd2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800132c:	4b7b      	ldr	r3, [pc, #492]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0304 	and.w	r3, r3, #4
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1ef      	bne.n	8001318 <HAL_RCC_OscConfig+0x2f0>
 8001338:	e000      	b.n	800133c <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800133a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	2b00      	cmp	r3, #0
 8001346:	f000 808b 	beq.w	8001460 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800134a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800134c:	2b08      	cmp	r3, #8
 800134e:	d005      	beq.n	800135c <HAL_RCC_OscConfig+0x334>
 8001350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001352:	2b0c      	cmp	r3, #12
 8001354:	d109      	bne.n	800136a <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001358:	2b03      	cmp	r3, #3
 800135a:	d106      	bne.n	800136a <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d17d      	bne.n	8001460 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	f000 bd34 	b.w	8001dd2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001372:	d106      	bne.n	8001382 <HAL_RCC_OscConfig+0x35a>
 8001374:	4b69      	ldr	r3, [pc, #420]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a68      	ldr	r2, [pc, #416]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 800137a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800137e:	6013      	str	r3, [r2, #0]
 8001380:	e041      	b.n	8001406 <HAL_RCC_OscConfig+0x3de>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800138a:	d112      	bne.n	80013b2 <HAL_RCC_OscConfig+0x38a>
 800138c:	4b63      	ldr	r3, [pc, #396]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a62      	ldr	r2, [pc, #392]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 8001392:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	4b60      	ldr	r3, [pc, #384]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a5f      	ldr	r2, [pc, #380]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 800139e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80013a2:	6013      	str	r3, [r2, #0]
 80013a4:	4b5d      	ldr	r3, [pc, #372]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a5c      	ldr	r2, [pc, #368]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 80013aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ae:	6013      	str	r3, [r2, #0]
 80013b0:	e029      	b.n	8001406 <HAL_RCC_OscConfig+0x3de>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80013ba:	d112      	bne.n	80013e2 <HAL_RCC_OscConfig+0x3ba>
 80013bc:	4b57      	ldr	r3, [pc, #348]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a56      	ldr	r2, [pc, #344]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 80013c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013c6:	6013      	str	r3, [r2, #0]
 80013c8:	4b54      	ldr	r3, [pc, #336]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a53      	ldr	r2, [pc, #332]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 80013ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80013d2:	6013      	str	r3, [r2, #0]
 80013d4:	4b51      	ldr	r3, [pc, #324]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a50      	ldr	r2, [pc, #320]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 80013da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013de:	6013      	str	r3, [r2, #0]
 80013e0:	e011      	b.n	8001406 <HAL_RCC_OscConfig+0x3de>
 80013e2:	4b4e      	ldr	r3, [pc, #312]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a4d      	ldr	r2, [pc, #308]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 80013e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	4b4b      	ldr	r3, [pc, #300]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a4a      	ldr	r2, [pc, #296]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 80013f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013f8:	6013      	str	r3, [r2, #0]
 80013fa:	4b48      	ldr	r3, [pc, #288]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a47      	ldr	r2, [pc, #284]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 8001400:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001404:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d014      	beq.n	8001438 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800140e:	f7ff f997 	bl	8000740 <HAL_GetTick>
 8001412:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001414:	e009      	b.n	800142a <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001416:	f7ff f993 	bl	8000740 <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b64      	cmp	r3, #100	; 0x64
 8001422:	d902      	bls.n	800142a <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	f000 bcd4 	b.w	8001dd2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800142a:	4b3c      	ldr	r3, [pc, #240]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d0ef      	beq.n	8001416 <HAL_RCC_OscConfig+0x3ee>
 8001436:	e013      	b.n	8001460 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8001438:	f7ff f982 	bl	8000740 <HAL_GetTick>
 800143c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800143e:	e009      	b.n	8001454 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001440:	f7ff f97e 	bl	8000740 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b64      	cmp	r3, #100	; 0x64
 800144c:	d902      	bls.n	8001454 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	f000 bcbf 	b.w	8001dd2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001454:	4b31      	ldr	r3, [pc, #196]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d1ef      	bne.n	8001440 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d05f      	beq.n	800152c <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800146c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800146e:	2b04      	cmp	r3, #4
 8001470:	d005      	beq.n	800147e <HAL_RCC_OscConfig+0x456>
 8001472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001474:	2b0c      	cmp	r3, #12
 8001476:	d114      	bne.n	80014a2 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800147a:	2b02      	cmp	r3, #2
 800147c:	d111      	bne.n	80014a2 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d102      	bne.n	800148c <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	f000 bca3 	b.w	8001dd2 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800148c:	4b23      	ldr	r3, [pc, #140]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 800148e:	691b      	ldr	r3, [r3, #16]
 8001490:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	691b      	ldr	r3, [r3, #16]
 8001498:	041b      	lsls	r3, r3, #16
 800149a:	4920      	ldr	r1, [pc, #128]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 800149c:	4313      	orrs	r3, r2
 800149e:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80014a0:	e044      	b.n	800152c <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d024      	beq.n	80014f4 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80014aa:	4b1c      	ldr	r3, [pc, #112]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a1b      	ldr	r2, [pc, #108]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 80014b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80014b6:	f7ff f943 	bl	8000740 <HAL_GetTick>
 80014ba:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014bc:	e009      	b.n	80014d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014be:	f7ff f93f 	bl	8000740 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d902      	bls.n	80014d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	f000 bc80 	b.w	8001dd2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014d2:	4b12      	ldr	r3, [pc, #72]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d0ef      	beq.n	80014be <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80014de:	4b0f      	ldr	r3, [pc, #60]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 80014e0:	691b      	ldr	r3, [r3, #16]
 80014e2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	691b      	ldr	r3, [r3, #16]
 80014ea:	041b      	lsls	r3, r3, #16
 80014ec:	490b      	ldr	r1, [pc, #44]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 80014ee:	4313      	orrs	r3, r2
 80014f0:	610b      	str	r3, [r1, #16]
 80014f2:	e01b      	b.n	800152c <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80014f4:	4b09      	ldr	r3, [pc, #36]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a08      	ldr	r2, [pc, #32]	; (800151c <HAL_RCC_OscConfig+0x4f4>)
 80014fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014fe:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001500:	f7ff f91e 	bl	8000740 <HAL_GetTick>
 8001504:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001506:	e00b      	b.n	8001520 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001508:	f7ff f91a 	bl	8000740 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d904      	bls.n	8001520 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	f000 bc5b 	b.w	8001dd2 <HAL_RCC_OscConfig+0xdaa>
 800151c:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001520:	4baf      	ldr	r3, [pc, #700]	; (80017e0 <HAL_RCC_OscConfig+0x7b8>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1ed      	bne.n	8001508 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0308 	and.w	r3, r3, #8
 8001534:	2b00      	cmp	r3, #0
 8001536:	f000 80c8 	beq.w	80016ca <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800153a:	2300      	movs	r3, #0
 800153c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001540:	4ba7      	ldr	r3, [pc, #668]	; (80017e0 <HAL_RCC_OscConfig+0x7b8>)
 8001542:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001546:	f003 0304 	and.w	r3, r3, #4
 800154a:	2b00      	cmp	r3, #0
 800154c:	d111      	bne.n	8001572 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800154e:	4ba4      	ldr	r3, [pc, #656]	; (80017e0 <HAL_RCC_OscConfig+0x7b8>)
 8001550:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001554:	4aa2      	ldr	r2, [pc, #648]	; (80017e0 <HAL_RCC_OscConfig+0x7b8>)
 8001556:	f043 0304 	orr.w	r3, r3, #4
 800155a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800155e:	4ba0      	ldr	r3, [pc, #640]	; (80017e0 <HAL_RCC_OscConfig+0x7b8>)
 8001560:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001564:	f003 0304 	and.w	r3, r3, #4
 8001568:	617b      	str	r3, [r7, #20]
 800156a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800156c:	2301      	movs	r3, #1
 800156e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001572:	4b9c      	ldr	r3, [pc, #624]	; (80017e4 <HAL_RCC_OscConfig+0x7bc>)
 8001574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	2b00      	cmp	r3, #0
 800157c:	d119      	bne.n	80015b2 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800157e:	4b99      	ldr	r3, [pc, #612]	; (80017e4 <HAL_RCC_OscConfig+0x7bc>)
 8001580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001582:	4a98      	ldr	r2, [pc, #608]	; (80017e4 <HAL_RCC_OscConfig+0x7bc>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800158a:	f7ff f8d9 	bl	8000740 <HAL_GetTick>
 800158e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001590:	e009      	b.n	80015a6 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001592:	f7ff f8d5 	bl	8000740 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d902      	bls.n	80015a6 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	f000 bc16 	b.w	8001dd2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80015a6:	4b8f      	ldr	r3, [pc, #572]	; (80017e4 <HAL_RCC_OscConfig+0x7bc>)
 80015a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0ef      	beq.n	8001592 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	695b      	ldr	r3, [r3, #20]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d05f      	beq.n	800167a <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80015ba:	4b89      	ldr	r3, [pc, #548]	; (80017e0 <HAL_RCC_OscConfig+0x7b8>)
 80015bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80015c0:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	699a      	ldr	r2, [r3, #24]
 80015c6:	6a3b      	ldr	r3, [r7, #32]
 80015c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d037      	beq.n	8001640 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80015d0:	6a3b      	ldr	r3, [r7, #32]
 80015d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d006      	beq.n	80015e8 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80015da:	6a3b      	ldr	r3, [r7, #32]
 80015dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d101      	bne.n	80015e8 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e3f4      	b.n	8001dd2 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80015e8:	6a3b      	ldr	r3, [r7, #32]
 80015ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d01b      	beq.n	800162a <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80015f2:	4b7b      	ldr	r3, [pc, #492]	; (80017e0 <HAL_RCC_OscConfig+0x7b8>)
 80015f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80015f8:	4a79      	ldr	r2, [pc, #484]	; (80017e0 <HAL_RCC_OscConfig+0x7b8>)
 80015fa:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80015fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8001602:	f7ff f89d 	bl	8000740 <HAL_GetTick>
 8001606:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001608:	e008      	b.n	800161c <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800160a:	f7ff f899 	bl	8000740 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b05      	cmp	r3, #5
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e3da      	b.n	8001dd2 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800161c:	4b70      	ldr	r3, [pc, #448]	; (80017e0 <HAL_RCC_OscConfig+0x7b8>)
 800161e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001622:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1ef      	bne.n	800160a <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800162a:	4b6d      	ldr	r3, [pc, #436]	; (80017e0 <HAL_RCC_OscConfig+0x7b8>)
 800162c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001630:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	4969      	ldr	r1, [pc, #420]	; (80017e0 <HAL_RCC_OscConfig+0x7b8>)
 800163a:	4313      	orrs	r3, r2
 800163c:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8001640:	4b67      	ldr	r3, [pc, #412]	; (80017e0 <HAL_RCC_OscConfig+0x7b8>)
 8001642:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001646:	4a66      	ldr	r2, [pc, #408]	; (80017e0 <HAL_RCC_OscConfig+0x7b8>)
 8001648:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800164c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8001650:	f7ff f876 	bl	8000740 <HAL_GetTick>
 8001654:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001658:	f7ff f872 	bl	8000740 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b05      	cmp	r3, #5
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e3b3      	b.n	8001dd2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800166a:	4b5d      	ldr	r3, [pc, #372]	; (80017e0 <HAL_RCC_OscConfig+0x7b8>)
 800166c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001670:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d0ef      	beq.n	8001658 <HAL_RCC_OscConfig+0x630>
 8001678:	e01b      	b.n	80016b2 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800167a:	4b59      	ldr	r3, [pc, #356]	; (80017e0 <HAL_RCC_OscConfig+0x7b8>)
 800167c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001680:	4a57      	ldr	r2, [pc, #348]	; (80017e0 <HAL_RCC_OscConfig+0x7b8>)
 8001682:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8001686:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800168a:	f7ff f859 	bl	8000740 <HAL_GetTick>
 800168e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001692:	f7ff f855 	bl	8000740 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b05      	cmp	r3, #5
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e396      	b.n	8001dd2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80016a4:	4b4e      	ldr	r3, [pc, #312]	; (80017e0 <HAL_RCC_OscConfig+0x7b8>)
 80016a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1ef      	bne.n	8001692 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80016b2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d107      	bne.n	80016ca <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016ba:	4b49      	ldr	r3, [pc, #292]	; (80017e0 <HAL_RCC_OscConfig+0x7b8>)
 80016bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016c0:	4a47      	ldr	r2, [pc, #284]	; (80017e0 <HAL_RCC_OscConfig+0x7b8>)
 80016c2:	f023 0304 	bic.w	r3, r3, #4
 80016c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0304 	and.w	r3, r3, #4
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f000 8111 	beq.w	80018fa <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80016d8:	2300      	movs	r3, #0
 80016da:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016de:	4b40      	ldr	r3, [pc, #256]	; (80017e0 <HAL_RCC_OscConfig+0x7b8>)
 80016e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d111      	bne.n	8001710 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ec:	4b3c      	ldr	r3, [pc, #240]	; (80017e0 <HAL_RCC_OscConfig+0x7b8>)
 80016ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016f2:	4a3b      	ldr	r2, [pc, #236]	; (80017e0 <HAL_RCC_OscConfig+0x7b8>)
 80016f4:	f043 0304 	orr.w	r3, r3, #4
 80016f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80016fc:	4b38      	ldr	r3, [pc, #224]	; (80017e0 <HAL_RCC_OscConfig+0x7b8>)
 80016fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001702:	f003 0304 	and.w	r3, r3, #4
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800170a:	2301      	movs	r3, #1
 800170c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001710:	4b34      	ldr	r3, [pc, #208]	; (80017e4 <HAL_RCC_OscConfig+0x7bc>)
 8001712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	2b00      	cmp	r3, #0
 800171a:	d118      	bne.n	800174e <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800171c:	4b31      	ldr	r3, [pc, #196]	; (80017e4 <HAL_RCC_OscConfig+0x7bc>)
 800171e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001720:	4a30      	ldr	r2, [pc, #192]	; (80017e4 <HAL_RCC_OscConfig+0x7bc>)
 8001722:	f043 0301 	orr.w	r3, r3, #1
 8001726:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001728:	f7ff f80a 	bl	8000740 <HAL_GetTick>
 800172c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001730:	f7ff f806 	bl	8000740 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e347      	b.n	8001dd2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001742:	4b28      	ldr	r3, [pc, #160]	; (80017e4 <HAL_RCC_OscConfig+0x7bc>)
 8001744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	2b00      	cmp	r3, #0
 800174c:	d0f0      	beq.n	8001730 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	2b00      	cmp	r3, #0
 8001758:	d01f      	beq.n	800179a <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f003 0304 	and.w	r3, r3, #4
 8001762:	2b00      	cmp	r3, #0
 8001764:	d010      	beq.n	8001788 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001766:	4b1e      	ldr	r3, [pc, #120]	; (80017e0 <HAL_RCC_OscConfig+0x7b8>)
 8001768:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800176c:	4a1c      	ldr	r2, [pc, #112]	; (80017e0 <HAL_RCC_OscConfig+0x7b8>)
 800176e:	f043 0304 	orr.w	r3, r3, #4
 8001772:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001776:	4b1a      	ldr	r3, [pc, #104]	; (80017e0 <HAL_RCC_OscConfig+0x7b8>)
 8001778:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800177c:	4a18      	ldr	r2, [pc, #96]	; (80017e0 <HAL_RCC_OscConfig+0x7b8>)
 800177e:	f043 0301 	orr.w	r3, r3, #1
 8001782:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001786:	e018      	b.n	80017ba <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001788:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <HAL_RCC_OscConfig+0x7b8>)
 800178a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800178e:	4a14      	ldr	r2, [pc, #80]	; (80017e0 <HAL_RCC_OscConfig+0x7b8>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001798:	e00f      	b.n	80017ba <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800179a:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <HAL_RCC_OscConfig+0x7b8>)
 800179c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017a0:	4a0f      	ldr	r2, [pc, #60]	; (80017e0 <HAL_RCC_OscConfig+0x7b8>)
 80017a2:	f023 0301 	bic.w	r3, r3, #1
 80017a6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80017aa:	4b0d      	ldr	r3, [pc, #52]	; (80017e0 <HAL_RCC_OscConfig+0x7b8>)
 80017ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017b0:	4a0b      	ldr	r2, [pc, #44]	; (80017e0 <HAL_RCC_OscConfig+0x7b8>)
 80017b2:	f023 0304 	bic.w	r3, r3, #4
 80017b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d057      	beq.n	8001872 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80017c2:	f7fe ffbd 	bl	8000740 <HAL_GetTick>
 80017c6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017c8:	e00e      	b.n	80017e8 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ca:	f7fe ffb9 	bl	8000740 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d8:	4293      	cmp	r3, r2
 80017da:	d905      	bls.n	80017e8 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e2f8      	b.n	8001dd2 <HAL_RCC_OscConfig+0xdaa>
 80017e0:	46020c00 	.word	0x46020c00
 80017e4:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017e8:	4b9c      	ldr	r3, [pc, #624]	; (8001a5c <HAL_RCC_OscConfig+0xa34>)
 80017ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0e9      	beq.n	80017ca <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d01b      	beq.n	800183a <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001802:	4b96      	ldr	r3, [pc, #600]	; (8001a5c <HAL_RCC_OscConfig+0xa34>)
 8001804:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001808:	4a94      	ldr	r2, [pc, #592]	; (8001a5c <HAL_RCC_OscConfig+0xa34>)
 800180a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800180e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001812:	e00a      	b.n	800182a <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001814:	f7fe ff94 	bl	8000740 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001822:	4293      	cmp	r3, r2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e2d3      	b.n	8001dd2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800182a:	4b8c      	ldr	r3, [pc, #560]	; (8001a5c <HAL_RCC_OscConfig+0xa34>)
 800182c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001830:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001834:	2b00      	cmp	r3, #0
 8001836:	d0ed      	beq.n	8001814 <HAL_RCC_OscConfig+0x7ec>
 8001838:	e053      	b.n	80018e2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800183a:	4b88      	ldr	r3, [pc, #544]	; (8001a5c <HAL_RCC_OscConfig+0xa34>)
 800183c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001840:	4a86      	ldr	r2, [pc, #536]	; (8001a5c <HAL_RCC_OscConfig+0xa34>)
 8001842:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001846:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800184a:	e00a      	b.n	8001862 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800184c:	f7fe ff78 	bl	8000740 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	f241 3288 	movw	r2, #5000	; 0x1388
 800185a:	4293      	cmp	r3, r2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e2b7      	b.n	8001dd2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001862:	4b7e      	ldr	r3, [pc, #504]	; (8001a5c <HAL_RCC_OscConfig+0xa34>)
 8001864:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001868:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800186c:	2b00      	cmp	r3, #0
 800186e:	d1ed      	bne.n	800184c <HAL_RCC_OscConfig+0x824>
 8001870:	e037      	b.n	80018e2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8001872:	f7fe ff65 	bl	8000740 <HAL_GetTick>
 8001876:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001878:	e00a      	b.n	8001890 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800187a:	f7fe ff61 	bl	8000740 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	f241 3288 	movw	r2, #5000	; 0x1388
 8001888:	4293      	cmp	r3, r2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e2a0      	b.n	8001dd2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001890:	4b72      	ldr	r3, [pc, #456]	; (8001a5c <HAL_RCC_OscConfig+0xa34>)
 8001892:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1ed      	bne.n	800187a <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800189e:	4b6f      	ldr	r3, [pc, #444]	; (8001a5c <HAL_RCC_OscConfig+0xa34>)
 80018a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d01a      	beq.n	80018e2 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80018ac:	4b6b      	ldr	r3, [pc, #428]	; (8001a5c <HAL_RCC_OscConfig+0xa34>)
 80018ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018b2:	4a6a      	ldr	r2, [pc, #424]	; (8001a5c <HAL_RCC_OscConfig+0xa34>)
 80018b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018b8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80018bc:	e00a      	b.n	80018d4 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018be:	f7fe ff3f 	bl	8000740 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e27e      	b.n	8001dd2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80018d4:	4b61      	ldr	r3, [pc, #388]	; (8001a5c <HAL_RCC_OscConfig+0xa34>)
 80018d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1ed      	bne.n	80018be <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018e2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d107      	bne.n	80018fa <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018ea:	4b5c      	ldr	r3, [pc, #368]	; (8001a5c <HAL_RCC_OscConfig+0xa34>)
 80018ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018f0:	4a5a      	ldr	r2, [pc, #360]	; (8001a5c <HAL_RCC_OscConfig+0xa34>)
 80018f2:	f023 0304 	bic.w	r3, r3, #4
 80018f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0320 	and.w	r3, r3, #32
 8001902:	2b00      	cmp	r3, #0
 8001904:	d036      	beq.n	8001974 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190a:	2b00      	cmp	r3, #0
 800190c:	d019      	beq.n	8001942 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800190e:	4b53      	ldr	r3, [pc, #332]	; (8001a5c <HAL_RCC_OscConfig+0xa34>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a52      	ldr	r2, [pc, #328]	; (8001a5c <HAL_RCC_OscConfig+0xa34>)
 8001914:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001918:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800191a:	f7fe ff11 	bl	8000740 <HAL_GetTick>
 800191e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001922:	f7fe ff0d 	bl	8000740 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e24e      	b.n	8001dd2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001934:	4b49      	ldr	r3, [pc, #292]	; (8001a5c <HAL_RCC_OscConfig+0xa34>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d0f0      	beq.n	8001922 <HAL_RCC_OscConfig+0x8fa>
 8001940:	e018      	b.n	8001974 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8001942:	4b46      	ldr	r3, [pc, #280]	; (8001a5c <HAL_RCC_OscConfig+0xa34>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a45      	ldr	r2, [pc, #276]	; (8001a5c <HAL_RCC_OscConfig+0xa34>)
 8001948:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800194c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800194e:	f7fe fef7 	bl	8000740 <HAL_GetTick>
 8001952:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001954:	e008      	b.n	8001968 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001956:	f7fe fef3 	bl	8000740 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e234      	b.n	8001dd2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001968:	4b3c      	ldr	r3, [pc, #240]	; (8001a5c <HAL_RCC_OscConfig+0xa34>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1f0      	bne.n	8001956 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800197c:	2b00      	cmp	r3, #0
 800197e:	d036      	beq.n	80019ee <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001984:	2b00      	cmp	r3, #0
 8001986:	d019      	beq.n	80019bc <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8001988:	4b34      	ldr	r3, [pc, #208]	; (8001a5c <HAL_RCC_OscConfig+0xa34>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a33      	ldr	r2, [pc, #204]	; (8001a5c <HAL_RCC_OscConfig+0xa34>)
 800198e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001992:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001994:	f7fe fed4 	bl	8000740 <HAL_GetTick>
 8001998:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800199c:	f7fe fed0 	bl	8000740 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e211      	b.n	8001dd2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80019ae:	4b2b      	ldr	r3, [pc, #172]	; (8001a5c <HAL_RCC_OscConfig+0xa34>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d0f0      	beq.n	800199c <HAL_RCC_OscConfig+0x974>
 80019ba:	e018      	b.n	80019ee <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80019bc:	4b27      	ldr	r3, [pc, #156]	; (8001a5c <HAL_RCC_OscConfig+0xa34>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a26      	ldr	r2, [pc, #152]	; (8001a5c <HAL_RCC_OscConfig+0xa34>)
 80019c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019c6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80019c8:	f7fe feba 	bl	8000740 <HAL_GetTick>
 80019cc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80019d0:	f7fe feb6 	bl	8000740 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e1f7      	b.n	8001dd2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80019e2:	4b1e      	ldr	r3, [pc, #120]	; (8001a5c <HAL_RCC_OscConfig+0xa34>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1f0      	bne.n	80019d0 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d07f      	beq.n	8001afa <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d062      	beq.n	8001ac8 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8001a02:	4b16      	ldr	r3, [pc, #88]	; (8001a5c <HAL_RCC_OscConfig+0xa34>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	4a15      	ldr	r2, [pc, #84]	; (8001a5c <HAL_RCC_OscConfig+0xa34>)
 8001a08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a0c:	6093      	str	r3, [r2, #8]
 8001a0e:	4b13      	ldr	r3, [pc, #76]	; (8001a5c <HAL_RCC_OscConfig+0xa34>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1a:	4910      	ldr	r1, [pc, #64]	; (8001a5c <HAL_RCC_OscConfig+0xa34>)
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a24:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001a28:	d309      	bcc.n	8001a3e <HAL_RCC_OscConfig+0xa16>
 8001a2a:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <HAL_RCC_OscConfig+0xa34>)
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	f023 021f 	bic.w	r2, r3, #31
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a1b      	ldr	r3, [r3, #32]
 8001a36:	4909      	ldr	r1, [pc, #36]	; (8001a5c <HAL_RCC_OscConfig+0xa34>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	60cb      	str	r3, [r1, #12]
 8001a3c:	e02a      	b.n	8001a94 <HAL_RCC_OscConfig+0xa6c>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	da0c      	bge.n	8001a60 <HAL_RCC_OscConfig+0xa38>
 8001a46:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <HAL_RCC_OscConfig+0xa34>)
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a1b      	ldr	r3, [r3, #32]
 8001a52:	015b      	lsls	r3, r3, #5
 8001a54:	4901      	ldr	r1, [pc, #4]	; (8001a5c <HAL_RCC_OscConfig+0xa34>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	60cb      	str	r3, [r1, #12]
 8001a5a:	e01b      	b.n	8001a94 <HAL_RCC_OscConfig+0xa6c>
 8001a5c:	46020c00 	.word	0x46020c00
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a68:	d30a      	bcc.n	8001a80 <HAL_RCC_OscConfig+0xa58>
 8001a6a:	4ba1      	ldr	r3, [pc, #644]	; (8001cf0 <HAL_RCC_OscConfig+0xcc8>)
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a1b      	ldr	r3, [r3, #32]
 8001a76:	029b      	lsls	r3, r3, #10
 8001a78:	499d      	ldr	r1, [pc, #628]	; (8001cf0 <HAL_RCC_OscConfig+0xcc8>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	60cb      	str	r3, [r1, #12]
 8001a7e:	e009      	b.n	8001a94 <HAL_RCC_OscConfig+0xa6c>
 8001a80:	4b9b      	ldr	r3, [pc, #620]	; (8001cf0 <HAL_RCC_OscConfig+0xcc8>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
 8001a8c:	03db      	lsls	r3, r3, #15
 8001a8e:	4998      	ldr	r1, [pc, #608]	; (8001cf0 <HAL_RCC_OscConfig+0xcc8>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8001a94:	4b96      	ldr	r3, [pc, #600]	; (8001cf0 <HAL_RCC_OscConfig+0xcc8>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a95      	ldr	r2, [pc, #596]	; (8001cf0 <HAL_RCC_OscConfig+0xcc8>)
 8001a9a:	f043 0310 	orr.w	r3, r3, #16
 8001a9e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001aa0:	f7fe fe4e 	bl	8000740 <HAL_GetTick>
 8001aa4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8001aa8:	f7fe fe4a 	bl	8000740 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e18b      	b.n	8001dd2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8001aba:	4b8d      	ldr	r3, [pc, #564]	; (8001cf0 <HAL_RCC_OscConfig+0xcc8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0320 	and.w	r3, r3, #32
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0f0      	beq.n	8001aa8 <HAL_RCC_OscConfig+0xa80>
 8001ac6:	e018      	b.n	8001afa <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8001ac8:	4b89      	ldr	r3, [pc, #548]	; (8001cf0 <HAL_RCC_OscConfig+0xcc8>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a88      	ldr	r2, [pc, #544]	; (8001cf0 <HAL_RCC_OscConfig+0xcc8>)
 8001ace:	f023 0310 	bic.w	r3, r3, #16
 8001ad2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001ad4:	f7fe fe34 	bl	8000740 <HAL_GetTick>
 8001ad8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8001adc:	f7fe fe30 	bl	8000740 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e171      	b.n	8001dd2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8001aee:	4b80      	ldr	r3, [pc, #512]	; (8001cf0 <HAL_RCC_OscConfig+0xcc8>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0320 	and.w	r3, r3, #32
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1f0      	bne.n	8001adc <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f000 8166 	beq.w	8001dd0 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8001b04:	2300      	movs	r3, #0
 8001b06:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b0a:	4b79      	ldr	r3, [pc, #484]	; (8001cf0 <HAL_RCC_OscConfig+0xcc8>)
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
 8001b12:	2b0c      	cmp	r3, #12
 8001b14:	f000 80f2 	beq.w	8001cfc <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	f040 80c5 	bne.w	8001cac <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8001b22:	4b73      	ldr	r3, [pc, #460]	; (8001cf0 <HAL_RCC_OscConfig+0xcc8>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a72      	ldr	r2, [pc, #456]	; (8001cf0 <HAL_RCC_OscConfig+0xcc8>)
 8001b28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b2c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001b2e:	f7fe fe07 	bl	8000740 <HAL_GetTick>
 8001b32:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001b34:	e008      	b.n	8001b48 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b36:	f7fe fe03 	bl	8000740 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e144      	b.n	8001dd2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001b48:	4b69      	ldr	r3, [pc, #420]	; (8001cf0 <HAL_RCC_OscConfig+0xcc8>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1f0      	bne.n	8001b36 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b54:	4b66      	ldr	r3, [pc, #408]	; (8001cf0 <HAL_RCC_OscConfig+0xcc8>)
 8001b56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b5a:	f003 0304 	and.w	r3, r3, #4
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d111      	bne.n	8001b86 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8001b62:	4b63      	ldr	r3, [pc, #396]	; (8001cf0 <HAL_RCC_OscConfig+0xcc8>)
 8001b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b68:	4a61      	ldr	r2, [pc, #388]	; (8001cf0 <HAL_RCC_OscConfig+0xcc8>)
 8001b6a:	f043 0304 	orr.w	r3, r3, #4
 8001b6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001b72:	4b5f      	ldr	r3, [pc, #380]	; (8001cf0 <HAL_RCC_OscConfig+0xcc8>)
 8001b74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8001b80:	2301      	movs	r3, #1
 8001b82:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8001b86:	4b5b      	ldr	r3, [pc, #364]	; (8001cf4 <HAL_RCC_OscConfig+0xccc>)
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b8e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001b92:	d102      	bne.n	8001b9a <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8001b94:	2301      	movs	r3, #1
 8001b96:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001b9a:	4b56      	ldr	r3, [pc, #344]	; (8001cf4 <HAL_RCC_OscConfig+0xccc>)
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	4a55      	ldr	r2, [pc, #340]	; (8001cf4 <HAL_RCC_OscConfig+0xccc>)
 8001ba0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ba4:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8001ba6:	4b52      	ldr	r3, [pc, #328]	; (8001cf0 <HAL_RCC_OscConfig+0xcc8>)
 8001ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001baa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001bae:	f023 0303 	bic.w	r3, r3, #3
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001bba:	3a01      	subs	r2, #1
 8001bbc:	0212      	lsls	r2, r2, #8
 8001bbe:	4311      	orrs	r1, r2
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	494a      	ldr	r1, [pc, #296]	; (8001cf0 <HAL_RCC_OscConfig+0xcc8>)
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	628b      	str	r3, [r1, #40]	; 0x28
 8001bcc:	4b48      	ldr	r3, [pc, #288]	; (8001cf0 <HAL_RCC_OscConfig+0xcc8>)
 8001bce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bd0:	4b49      	ldr	r3, [pc, #292]	; (8001cf8 <HAL_RCC_OscConfig+0xcd0>)
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001bd8:	3a01      	subs	r2, #1
 8001bda:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001be2:	3a01      	subs	r2, #1
 8001be4:	0252      	lsls	r2, r2, #9
 8001be6:	b292      	uxth	r2, r2
 8001be8:	4311      	orrs	r1, r2
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001bee:	3a01      	subs	r2, #1
 8001bf0:	0412      	lsls	r2, r2, #16
 8001bf2:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001bf6:	4311      	orrs	r1, r2
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001bfc:	3a01      	subs	r2, #1
 8001bfe:	0612      	lsls	r2, r2, #24
 8001c00:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001c04:	430a      	orrs	r2, r1
 8001c06:	493a      	ldr	r1, [pc, #232]	; (8001cf0 <HAL_RCC_OscConfig+0xcc8>)
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8001c0c:	4b38      	ldr	r3, [pc, #224]	; (8001cf0 <HAL_RCC_OscConfig+0xcc8>)
 8001c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c10:	4a37      	ldr	r2, [pc, #220]	; (8001cf0 <HAL_RCC_OscConfig+0xcc8>)
 8001c12:	f023 0310 	bic.w	r3, r3, #16
 8001c16:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c1c:	4a34      	ldr	r2, [pc, #208]	; (8001cf0 <HAL_RCC_OscConfig+0xcc8>)
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8001c22:	4b33      	ldr	r3, [pc, #204]	; (8001cf0 <HAL_RCC_OscConfig+0xcc8>)
 8001c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c26:	4a32      	ldr	r2, [pc, #200]	; (8001cf0 <HAL_RCC_OscConfig+0xcc8>)
 8001c28:	f043 0310 	orr.w	r3, r3, #16
 8001c2c:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8001c2e:	4b30      	ldr	r3, [pc, #192]	; (8001cf0 <HAL_RCC_OscConfig+0xcc8>)
 8001c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c32:	f023 020c 	bic.w	r2, r3, #12
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3a:	492d      	ldr	r1, [pc, #180]	; (8001cf0 <HAL_RCC_OscConfig+0xcc8>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8001c40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d105      	bne.n	8001c54 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001c48:	4b2a      	ldr	r3, [pc, #168]	; (8001cf4 <HAL_RCC_OscConfig+0xccc>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	4a29      	ldr	r2, [pc, #164]	; (8001cf4 <HAL_RCC_OscConfig+0xccc>)
 8001c4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c52:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8001c54:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d107      	bne.n	8001c6c <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8001c5c:	4b24      	ldr	r3, [pc, #144]	; (8001cf0 <HAL_RCC_OscConfig+0xcc8>)
 8001c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c62:	4a23      	ldr	r2, [pc, #140]	; (8001cf0 <HAL_RCC_OscConfig+0xcc8>)
 8001c64:	f023 0304 	bic.w	r3, r3, #4
 8001c68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001c6c:	4b20      	ldr	r3, [pc, #128]	; (8001cf0 <HAL_RCC_OscConfig+0xcc8>)
 8001c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c70:	4a1f      	ldr	r2, [pc, #124]	; (8001cf0 <HAL_RCC_OscConfig+0xcc8>)
 8001c72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c76:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8001c78:	4b1d      	ldr	r3, [pc, #116]	; (8001cf0 <HAL_RCC_OscConfig+0xcc8>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a1c      	ldr	r2, [pc, #112]	; (8001cf0 <HAL_RCC_OscConfig+0xcc8>)
 8001c7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c82:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001c84:	f7fe fd5c 	bl	8000740 <HAL_GetTick>
 8001c88:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c8c:	f7fe fd58 	bl	8000740 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e099      	b.n	8001dd2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001c9e:	4b14      	ldr	r3, [pc, #80]	; (8001cf0 <HAL_RCC_OscConfig+0xcc8>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d0f0      	beq.n	8001c8c <HAL_RCC_OscConfig+0xc64>
 8001caa:	e091      	b.n	8001dd0 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8001cac:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <HAL_RCC_OscConfig+0xcc8>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a0f      	ldr	r2, [pc, #60]	; (8001cf0 <HAL_RCC_OscConfig+0xcc8>)
 8001cb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cb6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001cb8:	f7fe fd42 	bl	8000740 <HAL_GetTick>
 8001cbc:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc0:	f7fe fd3e 	bl	8000740 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e07f      	b.n	8001dd2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001cd2:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <HAL_RCC_OscConfig+0xcc8>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f0      	bne.n	8001cc0 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8001cde:	4b04      	ldr	r3, [pc, #16]	; (8001cf0 <HAL_RCC_OscConfig+0xcc8>)
 8001ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce2:	4a03      	ldr	r2, [pc, #12]	; (8001cf0 <HAL_RCC_OscConfig+0xcc8>)
 8001ce4:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8001ce8:	f023 0303 	bic.w	r3, r3, #3
 8001cec:	6293      	str	r3, [r2, #40]	; 0x28
 8001cee:	e06f      	b.n	8001dd0 <HAL_RCC_OscConfig+0xda8>
 8001cf0:	46020c00 	.word	0x46020c00
 8001cf4:	46020800 	.word	0x46020800
 8001cf8:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8001cfc:	4b37      	ldr	r3, [pc, #220]	; (8001ddc <HAL_RCC_OscConfig+0xdb4>)
 8001cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d00:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001d02:	4b36      	ldr	r3, [pc, #216]	; (8001ddc <HAL_RCC_OscConfig+0xdb4>)
 8001d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d06:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d039      	beq.n	8001d84 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f003 0203 	and.w	r2, r3, #3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d132      	bne.n	8001d84 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	0a1b      	lsrs	r3, r3, #8
 8001d22:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d129      	bne.n	8001d84 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d122      	bne.n	8001d84 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d48:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d11a      	bne.n	8001d84 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	0a5b      	lsrs	r3, r3, #9
 8001d52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d111      	bne.n	8001d84 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	0c1b      	lsrs	r3, r3, #16
 8001d64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d6c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d108      	bne.n	8001d84 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	0e1b      	lsrs	r3, r3, #24
 8001d76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d7e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d001      	beq.n	8001d88 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e024      	b.n	8001dd2 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001d88:	4b14      	ldr	r3, [pc, #80]	; (8001ddc <HAL_RCC_OscConfig+0xdb4>)
 8001d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d8c:	08db      	lsrs	r3, r3, #3
 8001d8e:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d01a      	beq.n	8001dd0 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8001d9a:	4b10      	ldr	r3, [pc, #64]	; (8001ddc <HAL_RCC_OscConfig+0xdb4>)
 8001d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9e:	4a0f      	ldr	r2, [pc, #60]	; (8001ddc <HAL_RCC_OscConfig+0xdb4>)
 8001da0:	f023 0310 	bic.w	r3, r3, #16
 8001da4:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da6:	f7fe fccb 	bl	8000740 <HAL_GetTick>
 8001daa:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8001dac:	bf00      	nop
 8001dae:	f7fe fcc7 	bl	8000740 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d0f9      	beq.n	8001dae <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dbe:	4a07      	ldr	r2, [pc, #28]	; (8001ddc <HAL_RCC_OscConfig+0xdb4>)
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8001dc4:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <HAL_RCC_OscConfig+0xdb4>)
 8001dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc8:	4a04      	ldr	r2, [pc, #16]	; (8001ddc <HAL_RCC_OscConfig+0xdb4>)
 8001dca:	f043 0310 	orr.w	r3, r3, #16
 8001dce:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3738      	adds	r7, #56	; 0x38
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	46020c00 	.word	0x46020c00

08001de0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e1d9      	b.n	80021a8 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001df4:	4b9b      	ldr	r3, [pc, #620]	; (8002064 <HAL_RCC_ClockConfig+0x284>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 030f 	and.w	r3, r3, #15
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d910      	bls.n	8001e24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e02:	4b98      	ldr	r3, [pc, #608]	; (8002064 <HAL_RCC_ClockConfig+0x284>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f023 020f 	bic.w	r2, r3, #15
 8001e0a:	4996      	ldr	r1, [pc, #600]	; (8002064 <HAL_RCC_ClockConfig+0x284>)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e12:	4b94      	ldr	r3, [pc, #592]	; (8002064 <HAL_RCC_ClockConfig+0x284>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 030f 	and.w	r3, r3, #15
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d001      	beq.n	8001e24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e1c1      	b.n	80021a8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0310 	and.w	r3, r3, #16
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d010      	beq.n	8001e52 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	695a      	ldr	r2, [r3, #20]
 8001e34:	4b8c      	ldr	r3, [pc, #560]	; (8002068 <HAL_RCC_ClockConfig+0x288>)
 8001e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e38:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d908      	bls.n	8001e52 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8001e40:	4b89      	ldr	r3, [pc, #548]	; (8002068 <HAL_RCC_ClockConfig+0x288>)
 8001e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e44:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	4986      	ldr	r1, [pc, #536]	; (8002068 <HAL_RCC_ClockConfig+0x288>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0308 	and.w	r3, r3, #8
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d012      	beq.n	8001e84 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	691a      	ldr	r2, [r3, #16]
 8001e62:	4b81      	ldr	r3, [pc, #516]	; (8002068 <HAL_RCC_ClockConfig+0x288>)
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	091b      	lsrs	r3, r3, #4
 8001e68:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d909      	bls.n	8001e84 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8001e70:	4b7d      	ldr	r3, [pc, #500]	; (8002068 <HAL_RCC_ClockConfig+0x288>)
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	011b      	lsls	r3, r3, #4
 8001e7e:	497a      	ldr	r1, [pc, #488]	; (8002068 <HAL_RCC_ClockConfig+0x288>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0304 	and.w	r3, r3, #4
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d010      	beq.n	8001eb2 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68da      	ldr	r2, [r3, #12]
 8001e94:	4b74      	ldr	r3, [pc, #464]	; (8002068 <HAL_RCC_ClockConfig+0x288>)
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d908      	bls.n	8001eb2 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8001ea0:	4b71      	ldr	r3, [pc, #452]	; (8002068 <HAL_RCC_ClockConfig+0x288>)
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	496e      	ldr	r1, [pc, #440]	; (8002068 <HAL_RCC_ClockConfig+0x288>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d010      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689a      	ldr	r2, [r3, #8]
 8001ec2:	4b69      	ldr	r3, [pc, #420]	; (8002068 <HAL_RCC_ClockConfig+0x288>)
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	f003 030f 	and.w	r3, r3, #15
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d908      	bls.n	8001ee0 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8001ece:	4b66      	ldr	r3, [pc, #408]	; (8002068 <HAL_RCC_ClockConfig+0x288>)
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	f023 020f 	bic.w	r2, r3, #15
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	4963      	ldr	r1, [pc, #396]	; (8002068 <HAL_RCC_ClockConfig+0x288>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 80d2 	beq.w	8002092 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b03      	cmp	r3, #3
 8001ef8:	d143      	bne.n	8001f82 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001efa:	4b5b      	ldr	r3, [pc, #364]	; (8002068 <HAL_RCC_ClockConfig+0x288>)
 8001efc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f00:	f003 0304 	and.w	r3, r3, #4
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d110      	bne.n	8001f2a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001f08:	4b57      	ldr	r3, [pc, #348]	; (8002068 <HAL_RCC_ClockConfig+0x288>)
 8001f0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f0e:	4a56      	ldr	r2, [pc, #344]	; (8002068 <HAL_RCC_ClockConfig+0x288>)
 8001f10:	f043 0304 	orr.w	r3, r3, #4
 8001f14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001f18:	4b53      	ldr	r3, [pc, #332]	; (8002068 <HAL_RCC_ClockConfig+0x288>)
 8001f1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f1e:	f003 0304 	and.w	r3, r3, #4
 8001f22:	60bb      	str	r3, [r7, #8]
 8001f24:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8001f26:	2301      	movs	r3, #1
 8001f28:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8001f2a:	f7fe fc09 	bl	8000740 <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8001f30:	4b4e      	ldr	r3, [pc, #312]	; (800206c <HAL_RCC_ClockConfig+0x28c>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d00f      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8001f3c:	e008      	b.n	8001f50 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8001f3e:	f7fe fbff 	bl	8000740 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e12b      	b.n	80021a8 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8001f50:	4b46      	ldr	r3, [pc, #280]	; (800206c <HAL_RCC_ClockConfig+0x28c>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d0f0      	beq.n	8001f3e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001f5c:	7dfb      	ldrb	r3, [r7, #23]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d107      	bne.n	8001f72 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001f62:	4b41      	ldr	r3, [pc, #260]	; (8002068 <HAL_RCC_ClockConfig+0x288>)
 8001f64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f68:	4a3f      	ldr	r2, [pc, #252]	; (8002068 <HAL_RCC_ClockConfig+0x288>)
 8001f6a:	f023 0304 	bic.w	r3, r3, #4
 8001f6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001f72:	4b3d      	ldr	r3, [pc, #244]	; (8002068 <HAL_RCC_ClockConfig+0x288>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d121      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e112      	b.n	80021a8 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d107      	bne.n	8001f9a <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f8a:	4b37      	ldr	r3, [pc, #220]	; (8002068 <HAL_RCC_ClockConfig+0x288>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d115      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e106      	b.n	80021a8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d107      	bne.n	8001fb2 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001fa2:	4b31      	ldr	r3, [pc, #196]	; (8002068 <HAL_RCC_ClockConfig+0x288>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0304 	and.w	r3, r3, #4
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d109      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e0fa      	b.n	80021a8 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fb2:	4b2d      	ldr	r3, [pc, #180]	; (8002068 <HAL_RCC_ClockConfig+0x288>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e0f2      	b.n	80021a8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8001fc2:	4b29      	ldr	r3, [pc, #164]	; (8002068 <HAL_RCC_ClockConfig+0x288>)
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	f023 0203 	bic.w	r2, r3, #3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	4926      	ldr	r1, [pc, #152]	; (8002068 <HAL_RCC_ClockConfig+0x288>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8001fd4:	f7fe fbb4 	bl	8000740 <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b03      	cmp	r3, #3
 8001fe0:	d112      	bne.n	8002008 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fe2:	e00a      	b.n	8001ffa <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fe4:	f7fe fbac 	bl	8000740 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e0d6      	b.n	80021a8 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ffa:	4b1b      	ldr	r3, [pc, #108]	; (8002068 <HAL_RCC_ClockConfig+0x288>)
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	f003 030c 	and.w	r3, r3, #12
 8002002:	2b0c      	cmp	r3, #12
 8002004:	d1ee      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0x204>
 8002006:	e044      	b.n	8002092 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	2b02      	cmp	r3, #2
 800200e:	d112      	bne.n	8002036 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002010:	e00a      	b.n	8002028 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002012:	f7fe fb95 	bl	8000740 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002020:	4293      	cmp	r3, r2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e0bf      	b.n	80021a8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002028:	4b0f      	ldr	r3, [pc, #60]	; (8002068 <HAL_RCC_ClockConfig+0x288>)
 800202a:	69db      	ldr	r3, [r3, #28]
 800202c:	f003 030c 	and.w	r3, r3, #12
 8002030:	2b08      	cmp	r3, #8
 8002032:	d1ee      	bne.n	8002012 <HAL_RCC_ClockConfig+0x232>
 8002034:	e02d      	b.n	8002092 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d123      	bne.n	8002086 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800203e:	e00a      	b.n	8002056 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002040:	f7fe fb7e 	bl	8000740 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	f241 3288 	movw	r2, #5000	; 0x1388
 800204e:	4293      	cmp	r3, r2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e0a8      	b.n	80021a8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002056:	4b04      	ldr	r3, [pc, #16]	; (8002068 <HAL_RCC_ClockConfig+0x288>)
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	f003 030c 	and.w	r3, r3, #12
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1ee      	bne.n	8002040 <HAL_RCC_ClockConfig+0x260>
 8002062:	e016      	b.n	8002092 <HAL_RCC_ClockConfig+0x2b2>
 8002064:	40022000 	.word	0x40022000
 8002068:	46020c00 	.word	0x46020c00
 800206c:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002070:	f7fe fb66 	bl	8000740 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	f241 3288 	movw	r2, #5000	; 0x1388
 800207e:	4293      	cmp	r3, r2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e090      	b.n	80021a8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002086:	4b4a      	ldr	r3, [pc, #296]	; (80021b0 <HAL_RCC_ClockConfig+0x3d0>)
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	f003 030c 	and.w	r3, r3, #12
 800208e:	2b04      	cmp	r3, #4
 8002090:	d1ee      	bne.n	8002070 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d010      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	689a      	ldr	r2, [r3, #8]
 80020a2:	4b43      	ldr	r3, [pc, #268]	; (80021b0 <HAL_RCC_ClockConfig+0x3d0>)
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d208      	bcs.n	80020c0 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80020ae:	4b40      	ldr	r3, [pc, #256]	; (80021b0 <HAL_RCC_ClockConfig+0x3d0>)
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	f023 020f 	bic.w	r2, r3, #15
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	493d      	ldr	r1, [pc, #244]	; (80021b0 <HAL_RCC_ClockConfig+0x3d0>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020c0:	4b3c      	ldr	r3, [pc, #240]	; (80021b4 <HAL_RCC_ClockConfig+0x3d4>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 030f 	and.w	r3, r3, #15
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d210      	bcs.n	80020f0 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ce:	4b39      	ldr	r3, [pc, #228]	; (80021b4 <HAL_RCC_ClockConfig+0x3d4>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f023 020f 	bic.w	r2, r3, #15
 80020d6:	4937      	ldr	r1, [pc, #220]	; (80021b4 <HAL_RCC_ClockConfig+0x3d4>)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	4313      	orrs	r3, r2
 80020dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020de:	4b35      	ldr	r3, [pc, #212]	; (80021b4 <HAL_RCC_ClockConfig+0x3d4>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 030f 	and.w	r3, r3, #15
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d001      	beq.n	80020f0 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e05b      	b.n	80021a8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d010      	beq.n	800211e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68da      	ldr	r2, [r3, #12]
 8002100:	4b2b      	ldr	r3, [pc, #172]	; (80021b0 <HAL_RCC_ClockConfig+0x3d0>)
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002108:	429a      	cmp	r2, r3
 800210a:	d208      	bcs.n	800211e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800210c:	4b28      	ldr	r3, [pc, #160]	; (80021b0 <HAL_RCC_ClockConfig+0x3d0>)
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	4925      	ldr	r1, [pc, #148]	; (80021b0 <HAL_RCC_ClockConfig+0x3d0>)
 800211a:	4313      	orrs	r3, r2
 800211c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0308 	and.w	r3, r3, #8
 8002126:	2b00      	cmp	r3, #0
 8002128:	d012      	beq.n	8002150 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	691a      	ldr	r2, [r3, #16]
 800212e:	4b20      	ldr	r3, [pc, #128]	; (80021b0 <HAL_RCC_ClockConfig+0x3d0>)
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	091b      	lsrs	r3, r3, #4
 8002134:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002138:	429a      	cmp	r2, r3
 800213a:	d209      	bcs.n	8002150 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800213c:	4b1c      	ldr	r3, [pc, #112]	; (80021b0 <HAL_RCC_ClockConfig+0x3d0>)
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	011b      	lsls	r3, r3, #4
 800214a:	4919      	ldr	r1, [pc, #100]	; (80021b0 <HAL_RCC_ClockConfig+0x3d0>)
 800214c:	4313      	orrs	r3, r2
 800214e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0310 	and.w	r3, r3, #16
 8002158:	2b00      	cmp	r3, #0
 800215a:	d010      	beq.n	800217e <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	695a      	ldr	r2, [r3, #20]
 8002160:	4b13      	ldr	r3, [pc, #76]	; (80021b0 <HAL_RCC_ClockConfig+0x3d0>)
 8002162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002164:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002168:	429a      	cmp	r2, r3
 800216a:	d208      	bcs.n	800217e <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800216c:	4b10      	ldr	r3, [pc, #64]	; (80021b0 <HAL_RCC_ClockConfig+0x3d0>)
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	490d      	ldr	r1, [pc, #52]	; (80021b0 <HAL_RCC_ClockConfig+0x3d0>)
 800217a:	4313      	orrs	r3, r2
 800217c:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800217e:	f000 f821 	bl	80021c4 <HAL_RCC_GetSysClockFreq>
 8002182:	4602      	mov	r2, r0
 8002184:	4b0a      	ldr	r3, [pc, #40]	; (80021b0 <HAL_RCC_ClockConfig+0x3d0>)
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	f003 030f 	and.w	r3, r3, #15
 800218c:	490a      	ldr	r1, [pc, #40]	; (80021b8 <HAL_RCC_ClockConfig+0x3d8>)
 800218e:	5ccb      	ldrb	r3, [r1, r3]
 8002190:	fa22 f303 	lsr.w	r3, r2, r3
 8002194:	4a09      	ldr	r2, [pc, #36]	; (80021bc <HAL_RCC_ClockConfig+0x3dc>)
 8002196:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002198:	4b09      	ldr	r3, [pc, #36]	; (80021c0 <HAL_RCC_ClockConfig+0x3e0>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4618      	mov	r0, r3
 800219e:	f7fe fa85 	bl	80006ac <HAL_InitTick>
 80021a2:	4603      	mov	r3, r0
 80021a4:	73fb      	strb	r3, [r7, #15]

  return status;
 80021a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	46020c00 	.word	0x46020c00
 80021b4:	40022000 	.word	0x40022000
 80021b8:	08002580 	.word	0x08002580
 80021bc:	20000008 	.word	0x20000008
 80021c0:	2000000c 	.word	0x2000000c

080021c4 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b08b      	sub	sp, #44	; 0x2c
 80021c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021d2:	4b78      	ldr	r3, [pc, #480]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	f003 030c 	and.w	r3, r3, #12
 80021da:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021dc:	4b75      	ldr	r3, [pc, #468]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80021de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e0:	f003 0303 	and.w	r3, r3, #3
 80021e4:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d005      	beq.n	80021f8 <HAL_RCC_GetSysClockFreq+0x34>
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	2b0c      	cmp	r3, #12
 80021f0:	d121      	bne.n	8002236 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d11e      	bne.n	8002236 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80021f8:	4b6e      	ldr	r3, [pc, #440]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d107      	bne.n	8002214 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8002204:	4b6b      	ldr	r3, [pc, #428]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002206:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800220a:	0b1b      	lsrs	r3, r3, #12
 800220c:	f003 030f 	and.w	r3, r3, #15
 8002210:	627b      	str	r3, [r7, #36]	; 0x24
 8002212:	e005      	b.n	8002220 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8002214:	4b67      	ldr	r3, [pc, #412]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	0f1b      	lsrs	r3, r3, #28
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002220:	4a65      	ldr	r2, [pc, #404]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002228:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d110      	bne.n	8002252 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002232:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002234:	e00d      	b.n	8002252 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002236:	4b5f      	ldr	r3, [pc, #380]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	f003 030c 	and.w	r3, r3, #12
 800223e:	2b04      	cmp	r3, #4
 8002240:	d102      	bne.n	8002248 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002242:	4b5e      	ldr	r3, [pc, #376]	; (80023bc <HAL_RCC_GetSysClockFreq+0x1f8>)
 8002244:	623b      	str	r3, [r7, #32]
 8002246:	e004      	b.n	8002252 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	2b08      	cmp	r3, #8
 800224c:	d101      	bne.n	8002252 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800224e:	4b5b      	ldr	r3, [pc, #364]	; (80023bc <HAL_RCC_GetSysClockFreq+0x1f8>)
 8002250:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	2b0c      	cmp	r3, #12
 8002256:	f040 80a5 	bne.w	80023a4 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800225a:	4b56      	ldr	r3, [pc, #344]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800225c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002264:	4b53      	ldr	r3, [pc, #332]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002268:	0a1b      	lsrs	r3, r3, #8
 800226a:	f003 030f 	and.w	r3, r3, #15
 800226e:	3301      	adds	r3, #1
 8002270:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002272:	4b50      	ldr	r3, [pc, #320]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002276:	091b      	lsrs	r3, r3, #4
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800227e:	4b4d      	ldr	r3, [pc, #308]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002282:	08db      	lsrs	r3, r3, #3
 8002284:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002288:	68ba      	ldr	r2, [r7, #8]
 800228a:	fb02 f303 	mul.w	r3, r2, r3
 800228e:	ee07 3a90 	vmov	s15, r3
 8002292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002296:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	2b02      	cmp	r3, #2
 800229e:	d003      	beq.n	80022a8 <HAL_RCC_GetSysClockFreq+0xe4>
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	2b03      	cmp	r3, #3
 80022a4:	d022      	beq.n	80022ec <HAL_RCC_GetSysClockFreq+0x128>
 80022a6:	e043      	b.n	8002330 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	ee07 3a90 	vmov	s15, r3
 80022ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022b2:	eddf 6a43 	vldr	s13, [pc, #268]	; 80023c0 <HAL_RCC_GetSysClockFreq+0x1fc>
 80022b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022ba:	4b3e      	ldr	r3, [pc, #248]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80022bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022c2:	ee07 3a90 	vmov	s15, r3
 80022c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80022ca:	ed97 6a01 	vldr	s12, [r7, #4]
 80022ce:	eddf 5a3d 	vldr	s11, [pc, #244]	; 80023c4 <HAL_RCC_GetSysClockFreq+0x200>
 80022d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80022d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80022da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022de:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80022e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80022ea:	e046      	b.n	800237a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	ee07 3a90 	vmov	s15, r3
 80022f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022f6:	eddf 6a32 	vldr	s13, [pc, #200]	; 80023c0 <HAL_RCC_GetSysClockFreq+0x1fc>
 80022fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022fe:	4b2d      	ldr	r3, [pc, #180]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002306:	ee07 3a90 	vmov	s15, r3
 800230a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800230e:	ed97 6a01 	vldr	s12, [r7, #4]
 8002312:	eddf 5a2c 	vldr	s11, [pc, #176]	; 80023c4 <HAL_RCC_GetSysClockFreq+0x200>
 8002316:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800231a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800231e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002322:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800232a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800232e:	e024      	b.n	800237a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002332:	ee07 3a90 	vmov	s15, r3
 8002336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	ee07 3a90 	vmov	s15, r3
 8002340:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002344:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002348:	4b1a      	ldr	r3, [pc, #104]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800234a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800234c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002350:	ee07 3a90 	vmov	s15, r3
 8002354:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002358:	ed97 6a01 	vldr	s12, [r7, #4]
 800235c:	eddf 5a19 	vldr	s11, [pc, #100]	; 80023c4 <HAL_RCC_GetSysClockFreq+0x200>
 8002360:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002364:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002368:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800236c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002370:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002374:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002378:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800237a:	4b0e      	ldr	r3, [pc, #56]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800237c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800237e:	0e1b      	lsrs	r3, r3, #24
 8002380:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002384:	3301      	adds	r3, #1
 8002386:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	ee07 3a90 	vmov	s15, r3
 800238e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002392:	edd7 6a07 	vldr	s13, [r7, #28]
 8002396:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800239a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800239e:	ee17 3a90 	vmov	r3, s15
 80023a2:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80023a4:	6a3b      	ldr	r3, [r7, #32]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	372c      	adds	r7, #44	; 0x2c
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	46020c00 	.word	0x46020c00
 80023b8:	08002590 	.word	0x08002590
 80023bc:	00f42400 	.word	0x00f42400
 80023c0:	4b742400 	.word	0x4b742400
 80023c4:	46000000 	.word	0x46000000

080023c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80023cc:	f7ff fefa 	bl	80021c4 <HAL_RCC_GetSysClockFreq>
 80023d0:	4602      	mov	r2, r0
 80023d2:	4b07      	ldr	r3, [pc, #28]	; (80023f0 <HAL_RCC_GetHCLKFreq+0x28>)
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	f003 030f 	and.w	r3, r3, #15
 80023da:	4906      	ldr	r1, [pc, #24]	; (80023f4 <HAL_RCC_GetHCLKFreq+0x2c>)
 80023dc:	5ccb      	ldrb	r3, [r1, r3]
 80023de:	fa22 f303 	lsr.w	r3, r2, r3
 80023e2:	4a05      	ldr	r2, [pc, #20]	; (80023f8 <HAL_RCC_GetHCLKFreq+0x30>)
 80023e4:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80023e6:	4b04      	ldr	r3, [pc, #16]	; (80023f8 <HAL_RCC_GetHCLKFreq+0x30>)
 80023e8:	681b      	ldr	r3, [r3, #0]
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	46020c00 	.word	0x46020c00
 80023f4:	08002580 	.word	0x08002580
 80023f8:	20000008 	.word	0x20000008

080023fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002404:	4b3e      	ldr	r3, [pc, #248]	; (8002500 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002406:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800240a:	f003 0304 	and.w	r3, r3, #4
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002412:	f7fe fd9b 	bl	8000f4c <HAL_PWREx_GetVoltageRange>
 8002416:	6178      	str	r0, [r7, #20]
 8002418:	e019      	b.n	800244e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800241a:	4b39      	ldr	r3, [pc, #228]	; (8002500 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800241c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002420:	4a37      	ldr	r2, [pc, #220]	; (8002500 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002422:	f043 0304 	orr.w	r3, r3, #4
 8002426:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800242a:	4b35      	ldr	r3, [pc, #212]	; (8002500 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800242c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	60fb      	str	r3, [r7, #12]
 8002436:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002438:	f7fe fd88 	bl	8000f4c <HAL_PWREx_GetVoltageRange>
 800243c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800243e:	4b30      	ldr	r3, [pc, #192]	; (8002500 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002440:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002444:	4a2e      	ldr	r2, [pc, #184]	; (8002500 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002446:	f023 0304 	bic.w	r3, r3, #4
 800244a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002454:	d003      	beq.n	800245e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800245c:	d109      	bne.n	8002472 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002464:	d202      	bcs.n	800246c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8002466:	2301      	movs	r3, #1
 8002468:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800246a:	e033      	b.n	80024d4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800246c:	2300      	movs	r3, #0
 800246e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002470:	e030      	b.n	80024d4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002478:	d208      	bcs.n	800248c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002480:	d102      	bne.n	8002488 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8002482:	2303      	movs	r3, #3
 8002484:	613b      	str	r3, [r7, #16]
 8002486:	e025      	b.n	80024d4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e035      	b.n	80024f8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002492:	d90f      	bls.n	80024b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d109      	bne.n	80024ae <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80024a0:	d902      	bls.n	80024a8 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80024a2:	2300      	movs	r3, #0
 80024a4:	613b      	str	r3, [r7, #16]
 80024a6:	e015      	b.n	80024d4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80024a8:	2301      	movs	r3, #1
 80024aa:	613b      	str	r3, [r7, #16]
 80024ac:	e012      	b.n	80024d4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80024ae:	2300      	movs	r3, #0
 80024b0:	613b      	str	r3, [r7, #16]
 80024b2:	e00f      	b.n	80024d4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024ba:	d109      	bne.n	80024d0 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c2:	d102      	bne.n	80024ca <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80024c4:	2301      	movs	r3, #1
 80024c6:	613b      	str	r3, [r7, #16]
 80024c8:	e004      	b.n	80024d4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80024ca:	2302      	movs	r3, #2
 80024cc:	613b      	str	r3, [r7, #16]
 80024ce:	e001      	b.n	80024d4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80024d0:	2301      	movs	r3, #1
 80024d2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80024d4:	4b0b      	ldr	r3, [pc, #44]	; (8002504 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f023 020f 	bic.w	r2, r3, #15
 80024dc:	4909      	ldr	r1, [pc, #36]	; (8002504 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80024e4:	4b07      	ldr	r3, [pc, #28]	; (8002504 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 030f 	and.w	r3, r3, #15
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d001      	beq.n	80024f6 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e000      	b.n	80024f8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3718      	adds	r7, #24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	46020c00 	.word	0x46020c00
 8002504:	40022000 	.word	0x40022000

08002508 <memset>:
 8002508:	4402      	add	r2, r0
 800250a:	4603      	mov	r3, r0
 800250c:	4293      	cmp	r3, r2
 800250e:	d100      	bne.n	8002512 <memset+0xa>
 8002510:	4770      	bx	lr
 8002512:	f803 1b01 	strb.w	r1, [r3], #1
 8002516:	e7f9      	b.n	800250c <memset+0x4>

08002518 <__libc_init_array>:
 8002518:	b570      	push	{r4, r5, r6, lr}
 800251a:	4d0d      	ldr	r5, [pc, #52]	; (8002550 <__libc_init_array+0x38>)
 800251c:	2600      	movs	r6, #0
 800251e:	4c0d      	ldr	r4, [pc, #52]	; (8002554 <__libc_init_array+0x3c>)
 8002520:	1b64      	subs	r4, r4, r5
 8002522:	10a4      	asrs	r4, r4, #2
 8002524:	42a6      	cmp	r6, r4
 8002526:	d109      	bne.n	800253c <__libc_init_array+0x24>
 8002528:	4d0b      	ldr	r5, [pc, #44]	; (8002558 <__libc_init_array+0x40>)
 800252a:	2600      	movs	r6, #0
 800252c:	4c0b      	ldr	r4, [pc, #44]	; (800255c <__libc_init_array+0x44>)
 800252e:	f000 f817 	bl	8002560 <_init>
 8002532:	1b64      	subs	r4, r4, r5
 8002534:	10a4      	asrs	r4, r4, #2
 8002536:	42a6      	cmp	r6, r4
 8002538:	d105      	bne.n	8002546 <__libc_init_array+0x2e>
 800253a:	bd70      	pop	{r4, r5, r6, pc}
 800253c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002540:	3601      	adds	r6, #1
 8002542:	4798      	blx	r3
 8002544:	e7ee      	b.n	8002524 <__libc_init_array+0xc>
 8002546:	f855 3b04 	ldr.w	r3, [r5], #4
 800254a:	3601      	adds	r6, #1
 800254c:	4798      	blx	r3
 800254e:	e7f2      	b.n	8002536 <__libc_init_array+0x1e>
 8002550:	08002650 	.word	0x08002650
 8002554:	08002650 	.word	0x08002650
 8002558:	08002650 	.word	0x08002650
 800255c:	08002654 	.word	0x08002654

08002560 <_init>:
 8002560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002562:	bf00      	nop
 8002564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002566:	bc08      	pop	{r3}
 8002568:	469e      	mov	lr, r3
 800256a:	4770      	bx	lr

0800256c <_fini>:
 800256c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800256e:	bf00      	nop
 8002570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002572:	bc08      	pop	{r3}
 8002574:	469e      	mov	lr, r3
 8002576:	4770      	bx	lr
