
GPIO_IOToggle_TrustZone_Secure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  0c000000  0c000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bfc  0c000238  0c000238  00010238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  0c001e34  0c001e34  00011e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0c001f04  0c001f04  00011f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0c001f08  0c001f08  00011f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000d  30000000  0c001f0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .gnu.sgstubs  00000020  0c0fe000  0c0fe000  0002e000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .bss          0000002c  30000010  30000010  00030010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  3000003c  3000003c  00030010  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0002e020  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002e056  2**0
                  CONTENTS, READONLY
 11 .debug_line   0000ace7  00000000  00000000  0002e099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line_str 000000bb  00000000  00000000  00038d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00008713  00000000  00000000  00038e3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017ab  00000000  00000000  0004154e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000890  00000000  00000000  00042d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00135d3c  00000000  00000000  00043590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000065f  00000000  00000000  001792cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00031b6f  00000000  00000000  0017992b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00002120  00000000  00000000  001ab49c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0c000238 <__do_global_dtors_aux>:
 c000238:	b510      	push	{r4, lr}
 c00023a:	4c05      	ldr	r4, [pc, #20]	; (c000250 <__do_global_dtors_aux+0x18>)
 c00023c:	7823      	ldrb	r3, [r4, #0]
 c00023e:	b933      	cbnz	r3, c00024e <__do_global_dtors_aux+0x16>
 c000240:	4b04      	ldr	r3, [pc, #16]	; (c000254 <__do_global_dtors_aux+0x1c>)
 c000242:	b113      	cbz	r3, c00024a <__do_global_dtors_aux+0x12>
 c000244:	4804      	ldr	r0, [pc, #16]	; (c000258 <__do_global_dtors_aux+0x20>)
 c000246:	f3af 8000 	nop.w
 c00024a:	2301      	movs	r3, #1
 c00024c:	7023      	strb	r3, [r4, #0]
 c00024e:	bd10      	pop	{r4, pc}
 c000250:	30000010 	.word	0x30000010
 c000254:	00000000 	.word	0x00000000
 c000258:	0c001e1c 	.word	0x0c001e1c

0c00025c <frame_dummy>:
 c00025c:	b508      	push	{r3, lr}
 c00025e:	4b03      	ldr	r3, [pc, #12]	; (c00026c <frame_dummy+0x10>)
 c000260:	b11b      	cbz	r3, c00026a <frame_dummy+0xe>
 c000262:	4903      	ldr	r1, [pc, #12]	; (c000270 <frame_dummy+0x14>)
 c000264:	4803      	ldr	r0, [pc, #12]	; (c000274 <frame_dummy+0x18>)
 c000266:	f3af 8000 	nop.w
 c00026a:	bd08      	pop	{r3, pc}
 c00026c:	00000000 	.word	0x00000000
 c000270:	30000014 	.word	0x30000014
 c000274:	0c001e1c 	.word	0x0c001e1c

0c000278 <__gnu_cmse_nonsecure_call>:
 c000278:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
 c00027c:	4627      	mov	r7, r4
 c00027e:	46a0      	mov	r8, r4
 c000280:	46a1      	mov	r9, r4
 c000282:	46a2      	mov	sl, r4
 c000284:	46a3      	mov	fp, r4
 c000286:	46a4      	mov	ip, r4
 c000288:	ed2d 8b10 	vpush	{d8-d15}
 c00028c:	f04f 0500 	mov.w	r5, #0
 c000290:	ec45 5b18 	vmov	d8, r5, r5
 c000294:	ec45 5a19 	vmov	s18, s19, r5, r5
 c000298:	ec45 5a1a 	vmov	s20, s21, r5, r5
 c00029c:	ec45 5a1b 	vmov	s22, s23, r5, r5
 c0002a0:	ec45 5a1c 	vmov	s24, s25, r5, r5
 c0002a4:	ec45 5a1d 	vmov	s26, s27, r5, r5
 c0002a8:	ec45 5a1e 	vmov	s28, s29, r5, r5
 c0002ac:	ec45 5a1f 	vmov	s30, s31, r5, r5
 c0002b0:	eef1 5a10 	vmrs	r5, fpscr
 c0002b4:	f64f 7660 	movw	r6, #65376	; 0xff60
 c0002b8:	f6c0 76ff 	movt	r6, #4095	; 0xfff
 c0002bc:	4035      	ands	r5, r6
 c0002be:	eee1 5a10 	vmsr	fpscr, r5
 c0002c2:	f384 8800 	msr	CPSR_f, r4
 c0002c6:	4625      	mov	r5, r4
 c0002c8:	4626      	mov	r6, r4
 c0002ca:	47a4      	blxns	r4
 c0002cc:	ecbd 8b10 	vpop	{d8-d15}
 c0002d0:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

0c0002d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 c0002d4:	f8df d034 	ldr.w	sp, [pc, #52]	; c00030c <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 c0002d8:	f000 fca8 	bl	c000c2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 c0002dc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 c0002de:	e003      	b.n	c0002e8 <LoopCopyDataInit>

0c0002e0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 c0002e0:	4b0b      	ldr	r3, [pc, #44]	; (c000310 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 c0002e2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 c0002e4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 c0002e6:	3104      	adds	r1, #4

0c0002e8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 c0002e8:	480a      	ldr	r0, [pc, #40]	; (c000314 <LoopForever+0xa>)
	ldr	r3, =_edata
 c0002ea:	4b0b      	ldr	r3, [pc, #44]	; (c000318 <LoopForever+0xe>)
	adds	r2, r0, r1
 c0002ec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 c0002ee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 c0002f0:	d3f6      	bcc.n	c0002e0 <CopyDataInit>
	ldr	r2, =_sbss
 c0002f2:	4a0a      	ldr	r2, [pc, #40]	; (c00031c <LoopForever+0x12>)
	b	LoopFillZerobss
 c0002f4:	e002      	b.n	c0002fc <LoopFillZerobss>

0c0002f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 c0002f6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 c0002f8:	f842 3b04 	str.w	r3, [r2], #4

0c0002fc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 c0002fc:	4b08      	ldr	r3, [pc, #32]	; (c000320 <LoopForever+0x16>)
	cmp	r2, r3
 c0002fe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 c000300:	d3f9      	bcc.n	c0002f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 c000302:	f001 fd67 	bl	c001dd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 c000306:	f000 f80f 	bl	c000328 <main>

0c00030a <LoopForever>:

LoopForever:
    b LoopForever
 c00030a:	e7fe      	b.n	c00030a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 c00030c:	30040000 	.word	0x30040000
	ldr	r3, =_sidata
 c000310:	0c001f0c 	.word	0x0c001f0c
	ldr	r0, =_sdata
 c000314:	30000000 	.word	0x30000000
	ldr	r3, =_edata
 c000318:	3000000d 	.word	0x3000000d
	ldr	r2, =_sbss
 c00031c:	30000010 	.word	0x30000010
	ldr	r3, = _ebss
 c000320:	3000003c 	.word	0x3000003c

0c000324 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 c000324:	e7fe      	b.n	c000324 <ADC1_IRQHandler>
	...

0c000328 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 c000328:	b580      	push	{r7, lr}
 c00032a:	b088      	sub	sp, #32
 c00032c:	af00      	add	r7, sp, #0
  /* SAU/IDAU, FPU and interrupts secure/non-secure allocation setup done */
  /* in SystemInit() based on partition_stm32u585xx.h file's definitions. */
  /* USER CODE BEGIN 1 */

  /* Enable SecureFault handler (HardFault is default) */
  SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
 c00032e:	4b5f      	ldr	r3, [pc, #380]	; (c0004ac <main+0x184>)
 c000330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c000332:	4a5e      	ldr	r2, [pc, #376]	; (c0004ac <main+0x184>)
 c000334:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 c000338:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 c00033a:	f000 fdef 	bl	c000f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 c00033e:	f000 f90f 	bl	c000560 <SystemPower_Config>
  /* GTZC initialisation */
  MX_GTZC_S_Init();
 c000342:	f000 f91b 	bl	c00057c <MX_GTZC_S_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 c000346:	f000 fb21 	bl	c00098c <MX_GPIO_Init>
  MX_ICACHE_Init();
 c00034a:	f000 fb0b 	bl	c000964 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  SecureInitIODone = 1;
 c00034e:	4b58      	ldr	r3, [pc, #352]	; (c0004b0 <main+0x188>)
 c000350:	2201      	movs	r2, #1
 c000352:	601a      	str	r2, [r3, #0]

  /* All IOs are by default allocated to secure */
  /* Release them all to non-secure except PH.06 (LED6) kept as secure */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 c000354:	4b57      	ldr	r3, [pc, #348]	; (c0004b4 <main+0x18c>)
 c000356:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c00035a:	4a56      	ldr	r2, [pc, #344]	; (c0004b4 <main+0x18c>)
 c00035c:	f043 0301 	orr.w	r3, r3, #1
 c000360:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 c000364:	4b53      	ldr	r3, [pc, #332]	; (c0004b4 <main+0x18c>)
 c000366:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c00036a:	f003 0301 	and.w	r3, r3, #1
 c00036e:	61fb      	str	r3, [r7, #28]
 c000370:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 c000372:	4b50      	ldr	r3, [pc, #320]	; (c0004b4 <main+0x18c>)
 c000374:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c000378:	4a4e      	ldr	r2, [pc, #312]	; (c0004b4 <main+0x18c>)
 c00037a:	f043 0302 	orr.w	r3, r3, #2
 c00037e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 c000382:	4b4c      	ldr	r3, [pc, #304]	; (c0004b4 <main+0x18c>)
 c000384:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c000388:	f003 0302 	and.w	r3, r3, #2
 c00038c:	61bb      	str	r3, [r7, #24]
 c00038e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 c000390:	4b48      	ldr	r3, [pc, #288]	; (c0004b4 <main+0x18c>)
 c000392:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c000396:	4a47      	ldr	r2, [pc, #284]	; (c0004b4 <main+0x18c>)
 c000398:	f043 0304 	orr.w	r3, r3, #4
 c00039c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 c0003a0:	4b44      	ldr	r3, [pc, #272]	; (c0004b4 <main+0x18c>)
 c0003a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c0003a6:	f003 0304 	and.w	r3, r3, #4
 c0003aa:	617b      	str	r3, [r7, #20]
 c0003ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 c0003ae:	4b41      	ldr	r3, [pc, #260]	; (c0004b4 <main+0x18c>)
 c0003b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c0003b4:	4a3f      	ldr	r2, [pc, #252]	; (c0004b4 <main+0x18c>)
 c0003b6:	f043 0308 	orr.w	r3, r3, #8
 c0003ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 c0003be:	4b3d      	ldr	r3, [pc, #244]	; (c0004b4 <main+0x18c>)
 c0003c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c0003c4:	f003 0308 	and.w	r3, r3, #8
 c0003c8:	613b      	str	r3, [r7, #16]
 c0003ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 c0003cc:	4b39      	ldr	r3, [pc, #228]	; (c0004b4 <main+0x18c>)
 c0003ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c0003d2:	4a38      	ldr	r2, [pc, #224]	; (c0004b4 <main+0x18c>)
 c0003d4:	f043 0310 	orr.w	r3, r3, #16
 c0003d8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 c0003dc:	4b35      	ldr	r3, [pc, #212]	; (c0004b4 <main+0x18c>)
 c0003de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c0003e2:	f003 0310 	and.w	r3, r3, #16
 c0003e6:	60fb      	str	r3, [r7, #12]
 c0003e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 c0003ea:	4b32      	ldr	r3, [pc, #200]	; (c0004b4 <main+0x18c>)
 c0003ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c0003f0:	4a30      	ldr	r2, [pc, #192]	; (c0004b4 <main+0x18c>)
 c0003f2:	f043 0320 	orr.w	r3, r3, #32
 c0003f6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 c0003fa:	4b2e      	ldr	r3, [pc, #184]	; (c0004b4 <main+0x18c>)
 c0003fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c000400:	f003 0320 	and.w	r3, r3, #32
 c000404:	60bb      	str	r3, [r7, #8]
 c000406:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 c000408:	4b2a      	ldr	r3, [pc, #168]	; (c0004b4 <main+0x18c>)
 c00040a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c00040e:	4a29      	ldr	r2, [pc, #164]	; (c0004b4 <main+0x18c>)
 c000410:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c000414:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 c000418:	4b26      	ldr	r3, [pc, #152]	; (c0004b4 <main+0x18c>)
 c00041a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c00041e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c000422:	607b      	str	r3, [r7, #4]
 c000424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 c000426:	4b23      	ldr	r3, [pc, #140]	; (c0004b4 <main+0x18c>)
 c000428:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c00042c:	4a21      	ldr	r2, [pc, #132]	; (c0004b4 <main+0x18c>)
 c00042e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c000432:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 c000436:	4b1f      	ldr	r3, [pc, #124]	; (c0004b4 <main+0x18c>)
 c000438:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c00043c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c000440:	603b      	str	r3, [r7, #0]
 c000442:	683b      	ldr	r3, [r7, #0]
  HAL_GPIO_ConfigPinAttributes(GPIOA, GPIO_PIN_ALL, GPIO_PIN_NSEC);
 c000444:	2200      	movs	r2, #0
 c000446:	f64f 71ff 	movw	r1, #65535	; 0xffff
 c00044a:	481b      	ldr	r0, [pc, #108]	; (c0004b8 <main+0x190>)
 c00044c:	f001 f8f8 	bl	c001640 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOB, GPIO_PIN_ALL, GPIO_PIN_NSEC);
 c000450:	2200      	movs	r2, #0
 c000452:	f64f 71ff 	movw	r1, #65535	; 0xffff
 c000456:	4819      	ldr	r0, [pc, #100]	; (c0004bc <main+0x194>)
 c000458:	f001 f8f2 	bl	c001640 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOC, GPIO_PIN_ALL, GPIO_PIN_NSEC);
 c00045c:	2200      	movs	r2, #0
 c00045e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 c000462:	4817      	ldr	r0, [pc, #92]	; (c0004c0 <main+0x198>)
 c000464:	f001 f8ec 	bl	c001640 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOD, GPIO_PIN_ALL, GPIO_PIN_NSEC);
 c000468:	2200      	movs	r2, #0
 c00046a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 c00046e:	4815      	ldr	r0, [pc, #84]	; (c0004c4 <main+0x19c>)
 c000470:	f001 f8e6 	bl	c001640 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOE, GPIO_PIN_ALL, GPIO_PIN_NSEC);
 c000474:	2200      	movs	r2, #0
 c000476:	f64f 71ff 	movw	r1, #65535	; 0xffff
 c00047a:	4813      	ldr	r0, [pc, #76]	; (c0004c8 <main+0x1a0>)
 c00047c:	f001 f8e0 	bl	c001640 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOF, GPIO_PIN_ALL, GPIO_PIN_NSEC);
 c000480:	2200      	movs	r2, #0
 c000482:	f64f 71ff 	movw	r1, #65535	; 0xffff
 c000486:	4811      	ldr	r0, [pc, #68]	; (c0004cc <main+0x1a4>)
 c000488:	f001 f8da 	bl	c001640 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOG, GPIO_PIN_ALL, GPIO_PIN_NSEC);
 c00048c:	2200      	movs	r2, #0
 c00048e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 c000492:	480f      	ldr	r0, [pc, #60]	; (c0004d0 <main+0x1a8>)
 c000494:	f001 f8d4 	bl	c001640 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOH, (GPIO_PIN_ALL & ~(GPIO_PIN_6)), GPIO_PIN_NSEC);
 c000498:	2200      	movs	r2, #0
 c00049a:	f64f 71bf 	movw	r1, #65471	; 0xffbf
 c00049e:	480d      	ldr	r0, [pc, #52]	; (c0004d4 <main+0x1ac>)
 c0004a0:	f001 f8ce 	bl	c001640 <HAL_GPIO_ConfigPinAttributes>

  /* USER CODE END 2 */

  /*************** Setup and jump to non-secure *******************************/

  NonSecure_Init();
 c0004a4:	f000 f818 	bl	c0004d8 <NonSecure_Init>

  /* Non-secure software does not return, this code is not executed */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 c0004a8:	e7fe      	b.n	c0004a8 <main+0x180>
 c0004aa:	bf00      	nop
 c0004ac:	e000ed00 	.word	0xe000ed00
 c0004b0:	3000002c 	.word	0x3000002c
 c0004b4:	56020c00 	.word	0x56020c00
 c0004b8:	52020000 	.word	0x52020000
 c0004bc:	52020400 	.word	0x52020400
 c0004c0:	52020800 	.word	0x52020800
 c0004c4:	52020c00 	.word	0x52020c00
 c0004c8:	52021000 	.word	0x52021000
 c0004cc:	52021400 	.word	0x52021400
 c0004d0:	52021800 	.word	0x52021800
 c0004d4:	52021c00 	.word	0x52021c00

0c0004d8 <NonSecure_Init>:
  *         This function is responsible for Non-secure initialization and switch
  *         to non-secure state
  * @retval None
  */
static void NonSecure_Init(void)
{
 c0004d8:	b590      	push	{r4, r7, lr}
 c0004da:	b083      	sub	sp, #12
 c0004dc:	af00      	add	r7, sp, #0
  funcptr_NS NonSecure_ResetHandler;

  SCB_NS->VTOR = VTOR_TABLE_NS_START_ADDR;
 c0004de:	4b1e      	ldr	r3, [pc, #120]	; (c000558 <NonSecure_Init+0x80>)
 c0004e0:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 c0004e4:	609a      	str	r2, [r3, #8]

  /* Set non-secure main stack (MSP_NS) */
  __TZ_set_MSP_NS((*(uint32_t *)VTOR_TABLE_NS_START_ADDR));
 c0004e6:	f04f 6301 	mov.w	r3, #135266304	; 0x8100000
 c0004ea:	681b      	ldr	r3, [r3, #0]
 c0004ec:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 c0004ee:	683b      	ldr	r3, [r7, #0]
 c0004f0:	f383 8888 	msr	MSP_NS, r3
}
 c0004f4:	bf00      	nop

  /* Get non-secure reset handler */
  NonSecure_ResetHandler = (funcptr_NS)(*((uint32_t *)((VTOR_TABLE_NS_START_ADDR) + 4U)));
 c0004f6:	4b19      	ldr	r3, [pc, #100]	; (c00055c <NonSecure_Init+0x84>)
 c0004f8:	681b      	ldr	r3, [r3, #0]
 c0004fa:	607b      	str	r3, [r7, #4]

  /* Start non-secure state software application */
  NonSecure_ResetHandler();
 c0004fc:	687b      	ldr	r3, [r7, #4]
 c0004fe:	461c      	mov	r4, r3
 c000500:	0864      	lsrs	r4, r4, #1
 c000502:	0064      	lsls	r4, r4, #1
 c000504:	4620      	mov	r0, r4
 c000506:	4621      	mov	r1, r4
 c000508:	4622      	mov	r2, r4
 c00050a:	4623      	mov	r3, r4
 c00050c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c000510:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c000514:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c000518:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c00051c:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c000520:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c000524:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c000528:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c00052c:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c000530:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000534:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000538:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c00053c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c000540:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000544:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000548:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c00054c:	f7ff fe94 	bl	c000278 <__gnu_cmse_nonsecure_call>
}
 c000550:	bf00      	nop
 c000552:	370c      	adds	r7, #12
 c000554:	46bd      	mov	sp, r7
 c000556:	bd90      	pop	{r4, r7, pc}
 c000558:	e002ed00 	.word	0xe002ed00
 c00055c:	08100004 	.word	0x08100004

0c000560 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 c000560:	b580      	push	{r7, lr}
 c000562:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 c000564:	f001 fb1c 	bl	c001ba0 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 c000568:	2002      	movs	r0, #2
 c00056a:	f001 fac9 	bl	c001b00 <HAL_PWREx_ConfigSupply>
 c00056e:	4603      	mov	r3, r0
 c000570:	2b00      	cmp	r3, #0
 c000572:	d001      	beq.n	c000578 <SystemPower_Config+0x18>
  {
    Error_Handler();
 c000574:	f000 fa5c 	bl	c000a30 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 c000578:	bf00      	nop
 c00057a:	bd80      	pop	{r7, pc}

0c00057c <MX_GTZC_S_Init>:
  * @brief GTZC_S Initialization Function
  * @param None
  * @retval None
  */
static void MX_GTZC_S_Init(void)
{
 c00057c:	b580      	push	{r7, lr}
 c00057e:	b0c4      	sub	sp, #272	; 0x110
 c000580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN GTZC_S_Init 0 */

  /* USER CODE END GTZC_S_Init 0 */

  MPCBB_ConfigTypeDef MPCBB_Area_Desc = {0};
 c000582:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000586:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c00058a:	4618      	mov	r0, r3
 c00058c:	f44f 7386 	mov.w	r3, #268	; 0x10c
 c000590:	461a      	mov	r2, r3
 c000592:	2100      	movs	r1, #0
 c000594:	f001 fc16 	bl	c001dc4 <memset>

  /* USER CODE BEGIN GTZC_S_Init 1 */

  /* USER CODE END GTZC_S_Init 1 */
  MPCBB_Area_Desc.SecureRWIllegalMode = GTZC_MPCBB_SRWILADIS_ENABLE;
 c000598:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c00059c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0005a0:	2200      	movs	r2, #0
 c0005a2:	601a      	str	r2, [r3, #0]
  MPCBB_Area_Desc.InvertSecureState = GTZC_MPCBB_INVSECSTATE_NOT_INVERTED;
 c0005a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0005a8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0005ac:	2200      	movs	r2, #0
 c0005ae:	605a      	str	r2, [r3, #4]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0x00000000;
 c0005b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0005b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0005b8:	2200      	movs	r2, #0
 c0005ba:	609a      	str	r2, [r3, #8]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0x00000000;
 c0005bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0005c0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0005c4:	2200      	movs	r2, #0
 c0005c6:	60da      	str	r2, [r3, #12]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0x00000000;
 c0005c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0005cc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0005d0:	2200      	movs	r2, #0
 c0005d2:	611a      	str	r2, [r3, #16]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0x00000000;
 c0005d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0005d8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0005dc:	2200      	movs	r2, #0
 c0005de:	615a      	str	r2, [r3, #20]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0x00000000;
 c0005e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0005e4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0005e8:	2200      	movs	r2, #0
 c0005ea:	619a      	str	r2, [r3, #24]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0x00000000;
 c0005ec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0005f0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0005f4:	2200      	movs	r2, #0
 c0005f6:	61da      	str	r2, [r3, #28]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0x00000000;
 c0005f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0005fc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000600:	2200      	movs	r2, #0
 c000602:	621a      	str	r2, [r3, #32]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0x00000000;
 c000604:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000608:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c00060c:	2200      	movs	r2, #0
 c00060e:	625a      	str	r2, [r3, #36]	; 0x24
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[8] =   0x00000000;
 c000610:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000614:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000618:	2200      	movs	r2, #0
 c00061a:	629a      	str	r2, [r3, #40]	; 0x28
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[9] =   0x00000000;
 c00061c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000620:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000624:	2200      	movs	r2, #0
 c000626:	62da      	str	r2, [r3, #44]	; 0x2c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[10] =   0x00000000;
 c000628:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c00062c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000630:	2200      	movs	r2, #0
 c000632:	631a      	str	r2, [r3, #48]	; 0x30
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[11] =   0x00000000;
 c000634:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000638:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c00063c:	2200      	movs	r2, #0
 c00063e:	635a      	str	r2, [r3, #52]	; 0x34
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[12] =   0x00000000;
 c000640:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000644:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000648:	2200      	movs	r2, #0
 c00064a:	639a      	str	r2, [r3, #56]	; 0x38
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[13] =   0x00000000;
 c00064c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000650:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000654:	2200      	movs	r2, #0
 c000656:	63da      	str	r2, [r3, #60]	; 0x3c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[14] =   0x00000000;
 c000658:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c00065c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000660:	2200      	movs	r2, #0
 c000662:	641a      	str	r2, [r3, #64]	; 0x40
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[15] =   0x00000000;
 c000664:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000668:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c00066c:	2200      	movs	r2, #0
 c00066e:	645a      	str	r2, [r3, #68]	; 0x44
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[16] =   0x00000000;
 c000670:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000674:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000678:	2200      	movs	r2, #0
 c00067a:	649a      	str	r2, [r3, #72]	; 0x48
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[17] =   0x00000000;
 c00067c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000680:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000684:	2200      	movs	r2, #0
 c000686:	64da      	str	r2, [r3, #76]	; 0x4c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[18] =   0x00000000;
 c000688:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c00068c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000690:	2200      	movs	r2, #0
 c000692:	651a      	str	r2, [r3, #80]	; 0x50
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[19] =   0x00000000;
 c000694:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000698:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c00069c:	2200      	movs	r2, #0
 c00069e:	655a      	str	r2, [r3, #84]	; 0x54
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[20] =   0x00000000;
 c0006a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0006a4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0006a8:	2200      	movs	r2, #0
 c0006aa:	659a      	str	r2, [r3, #88]	; 0x58
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[21] =   0x00000000;
 c0006ac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0006b0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0006b4:	2200      	movs	r2, #0
 c0006b6:	65da      	str	r2, [r3, #92]	; 0x5c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[22] =   0x00000000;
 c0006b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0006bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0006c0:	2200      	movs	r2, #0
 c0006c2:	661a      	str	r2, [r3, #96]	; 0x60
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[23] =   0x00000000;
 c0006c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0006c8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0006cc:	2200      	movs	r2, #0
 c0006ce:	665a      	str	r2, [r3, #100]	; 0x64
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[24] =   0x00000000;
 c0006d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0006d4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0006d8:	2200      	movs	r2, #0
 c0006da:	669a      	str	r2, [r3, #104]	; 0x68
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[25] =   0x00000000;
 c0006dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0006e0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0006e4:	2200      	movs	r2, #0
 c0006e6:	66da      	str	r2, [r3, #108]	; 0x6c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[26] =   0x00000000;
 c0006e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0006ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0006f0:	2200      	movs	r2, #0
 c0006f2:	671a      	str	r2, [r3, #112]	; 0x70
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[27] =   0x00000000;
 c0006f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0006f8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0006fc:	2200      	movs	r2, #0
 c0006fe:	675a      	str	r2, [r3, #116]	; 0x74
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[28] =   0x00000000;
 c000700:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000704:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000708:	2200      	movs	r2, #0
 c00070a:	679a      	str	r2, [r3, #120]	; 0x78
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[29] =   0x00000000;
 c00070c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000710:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000714:	2200      	movs	r2, #0
 c000716:	67da      	str	r2, [r3, #124]	; 0x7c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[30] =   0x00000000;
 c000718:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c00071c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000720:	2200      	movs	r2, #0
 c000722:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[31] =   0x00000000;
 c000726:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c00072a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c00072e:	2200      	movs	r2, #0
 c000730:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[0] =   0xFFFFFFFF;
 c000734:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000738:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c00073c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c000740:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[1] =   0xFFFFFFFF;
 c000744:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000748:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c00074c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c000750:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[2] =   0xFFFFFFFF;
 c000754:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000758:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c00075c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c000760:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[3] =   0xFFFFFFFF;
 c000764:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000768:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c00076c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c000770:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[4] =   0xFFFFFFFF;
 c000774:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000778:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c00077c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c000780:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[5] =   0xFFFFFFFF;
 c000784:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000788:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c00078c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c000790:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[6] =   0xFFFFFFFF;
 c000794:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000798:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c00079c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c0007a0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[7] =   0xFFFFFFFF;
 c0007a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0007a8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0007ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c0007b0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[8] =   0xFFFFFFFF;
 c0007b4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0007b8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0007bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c0007c0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[9] =   0xFFFFFFFF;
 c0007c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0007c8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0007cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c0007d0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[10] =   0xFFFFFFFF;
 c0007d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0007d8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0007dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c0007e0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[11] =   0xFFFFFFFF;
 c0007e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0007e8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0007ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c0007f0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[12] =   0xFFFFFFFF;
 c0007f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0007f8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0007fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c000800:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[13] =   0xFFFFFFFF;
 c000804:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000808:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c00080c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c000810:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[14] =   0xFFFFFFFF;
 c000814:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000818:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c00081c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c000820:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[15] =   0xFFFFFFFF;
 c000824:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000828:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c00082c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c000830:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[16] =   0xFFFFFFFF;
 c000834:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000838:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c00083c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c000840:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[17] =   0xFFFFFFFF;
 c000844:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000848:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c00084c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c000850:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[18] =   0xFFFFFFFF;
 c000854:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000858:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c00085c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c000860:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[19] =   0xFFFFFFFF;
 c000864:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000868:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c00086c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c000870:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[20] =   0xFFFFFFFF;
 c000874:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000878:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c00087c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c000880:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[21] =   0xFFFFFFFF;
 c000884:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000888:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c00088c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c000890:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[22] =   0xFFFFFFFF;
 c000894:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000898:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c00089c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c0008a0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[23] =   0xFFFFFFFF;
 c0008a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0008a8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0008ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c0008b0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[24] =   0xFFFFFFFF;
 c0008b4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0008b8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0008bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c0008c0:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[25] =   0xFFFFFFFF;
 c0008c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0008c8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0008cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c0008d0:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[26] =   0xFFFFFFFF;
 c0008d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0008d8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0008dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c0008e0:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[27] =   0xFFFFFFFF;
 c0008e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0008e8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0008ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c0008f0:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[28] =   0xFFFFFFFF;
 c0008f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0008f8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0008fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c000900:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[29] =   0xFFFFFFFF;
 c000904:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000908:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c00090c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c000910:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[30] =   0xFFFFFFFF;
 c000914:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000918:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c00091c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c000920:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[31] =   0xFFFFFFFF;
 c000924:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000928:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c00092c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c000930:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  MPCBB_Area_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c000934:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000938:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c00093c:	2200      	movs	r2, #0
 c00093e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM3_BASE, &MPCBB_Area_Desc) != HAL_OK)
 c000942:	1d3b      	adds	r3, r7, #4
 c000944:	4619      	mov	r1, r3
 c000946:	4806      	ldr	r0, [pc, #24]	; (c000960 <MX_GTZC_S_Init+0x3e4>)
 c000948:	f000 fec4 	bl	c0016d4 <HAL_GTZC_MPCBB_ConfigMem>
 c00094c:	4603      	mov	r3, r0
 c00094e:	2b00      	cmp	r3, #0
 c000950:	d001      	beq.n	c000956 <MX_GTZC_S_Init+0x3da>
  {
    Error_Handler();
 c000952:	f000 f86d 	bl	c000a30 <Error_Handler>
  }
  /* USER CODE BEGIN GTZC_S_Init 2 */

  /* USER CODE END GTZC_S_Init 2 */

}
 c000956:	bf00      	nop
 c000958:	f507 7788 	add.w	r7, r7, #272	; 0x110
 c00095c:	46bd      	mov	sp, r7
 c00095e:	bd80      	pop	{r7, pc}
 c000960:	30040000 	.word	0x30040000

0c000964 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 c000964:	b580      	push	{r7, lr}
 c000966:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 c000968:	2000      	movs	r0, #0
 c00096a:	f001 f899 	bl	c001aa0 <HAL_ICACHE_ConfigAssociativityMode>
 c00096e:	4603      	mov	r3, r0
 c000970:	2b00      	cmp	r3, #0
 c000972:	d001      	beq.n	c000978 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 c000974:	f000 f85c 	bl	c000a30 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 c000978:	f001 f8b2 	bl	c001ae0 <HAL_ICACHE_Enable>
 c00097c:	4603      	mov	r3, r0
 c00097e:	2b00      	cmp	r3, #0
 c000980:	d001      	beq.n	c000986 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 c000982:	f000 f855 	bl	c000a30 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 c000986:	bf00      	nop
 c000988:	bd80      	pop	{r7, pc}
	...

0c00098c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 c00098c:	b580      	push	{r7, lr}
 c00098e:	b086      	sub	sp, #24
 c000990:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c000992:	1d3b      	adds	r3, r7, #4
 c000994:	2200      	movs	r2, #0
 c000996:	601a      	str	r2, [r3, #0]
 c000998:	605a      	str	r2, [r3, #4]
 c00099a:	609a      	str	r2, [r3, #8]
 c00099c:	60da      	str	r2, [r3, #12]
 c00099e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 c0009a0:	4b14      	ldr	r3, [pc, #80]	; (c0009f4 <MX_GPIO_Init+0x68>)
 c0009a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c0009a6:	4a13      	ldr	r2, [pc, #76]	; (c0009f4 <MX_GPIO_Init+0x68>)
 c0009a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c0009ac:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 c0009b0:	4b10      	ldr	r3, [pc, #64]	; (c0009f4 <MX_GPIO_Init+0x68>)
 c0009b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c0009b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c0009ba:	603b      	str	r3, [r7, #0]
 c0009bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 c0009be:	2200      	movs	r2, #0
 c0009c0:	2140      	movs	r1, #64	; 0x40
 c0009c2:	480d      	ldr	r0, [pc, #52]	; (c0009f8 <MX_GPIO_Init+0x6c>)
 c0009c4:	f000 fe0a 	bl	c0015dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED6_Pin */
  GPIO_InitStruct.Pin = LED6_Pin;
 c0009c8:	2340      	movs	r3, #64	; 0x40
 c0009ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 c0009cc:	2301      	movs	r3, #1
 c0009ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 c0009d0:	2300      	movs	r3, #0
 c0009d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 c0009d4:	2303      	movs	r3, #3
 c0009d6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED6_GPIO_Port, &GPIO_InitStruct);
 c0009d8:	1d3b      	adds	r3, r7, #4
 c0009da:	4619      	mov	r1, r3
 c0009dc:	4806      	ldr	r0, [pc, #24]	; (c0009f8 <MX_GPIO_Init+0x6c>)
 c0009de:	f000 fc25 	bl	c00122c <HAL_GPIO_Init>

  /*IO attributes management functions */
  HAL_GPIO_ConfigPinAttributes(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_NSEC);
 c0009e2:	2200      	movs	r2, #0
 c0009e4:	2180      	movs	r1, #128	; 0x80
 c0009e6:	4804      	ldr	r0, [pc, #16]	; (c0009f8 <MX_GPIO_Init+0x6c>)
 c0009e8:	f000 fe2a 	bl	c001640 <HAL_GPIO_ConfigPinAttributes>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 c0009ec:	bf00      	nop
 c0009ee:	3718      	adds	r7, #24
 c0009f0:	46bd      	mov	sp, r7
 c0009f2:	bd80      	pop	{r7, pc}
 c0009f4:	56020c00 	.word	0x56020c00
 c0009f8:	52021c00 	.word	0x52021c00

0c0009fc <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
void HAL_SYSTICK_Callback(void)
{
 c0009fc:	b580      	push	{r7, lr}
 c0009fe:	af00      	add	r7, sp, #0
  if (SecureTimingDelay != 0U)
 c000a00:	4b09      	ldr	r3, [pc, #36]	; (c000a28 <HAL_SYSTICK_Callback+0x2c>)
 c000a02:	681b      	ldr	r3, [r3, #0]
 c000a04:	2b00      	cmp	r3, #0
 c000a06:	d005      	beq.n	c000a14 <HAL_SYSTICK_Callback+0x18>
  {
    SecureTimingDelay--;
 c000a08:	4b07      	ldr	r3, [pc, #28]	; (c000a28 <HAL_SYSTICK_Callback+0x2c>)
 c000a0a:	681b      	ldr	r3, [r3, #0]
 c000a0c:	3b01      	subs	r3, #1
 c000a0e:	4a06      	ldr	r2, [pc, #24]	; (c000a28 <HAL_SYSTICK_Callback+0x2c>)
 c000a10:	6013      	str	r3, [r2, #0]
  {
    /* Toggle PH.06 (LED6) */
    HAL_GPIO_TogglePin(GPIOH, GPIO_PIN_6);
    SecureTimingDelay = SECURE_IO_TOGGLE_DELAY;
  }
}
 c000a12:	e007      	b.n	c000a24 <HAL_SYSTICK_Callback+0x28>
    HAL_GPIO_TogglePin(GPIOH, GPIO_PIN_6);
 c000a14:	2140      	movs	r1, #64	; 0x40
 c000a16:	4805      	ldr	r0, [pc, #20]	; (c000a2c <HAL_SYSTICK_Callback+0x30>)
 c000a18:	f000 fdf8 	bl	c00160c <HAL_GPIO_TogglePin>
    SecureTimingDelay = SECURE_IO_TOGGLE_DELAY;
 c000a1c:	4b02      	ldr	r3, [pc, #8]	; (c000a28 <HAL_SYSTICK_Callback+0x2c>)
 c000a1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 c000a22:	601a      	str	r2, [r3, #0]
}
 c000a24:	bf00      	nop
 c000a26:	bd80      	pop	{r7, pc}
 c000a28:	30000000 	.word	0x30000000
 c000a2c:	52021c00 	.word	0x52021c00

0c000a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 c000a30:	b580      	push	{r7, lr}
 c000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* Insure LED1 is configured */
  if (SecureInitIODone != 0)
 c000a34:	4b05      	ldr	r3, [pc, #20]	; (c000a4c <Error_Handler+0x1c>)
 c000a36:	681b      	ldr	r3, [r3, #0]
 c000a38:	2b00      	cmp	r3, #0
 c000a3a:	d001      	beq.n	c000a40 <Error_Handler+0x10>
  {
    MX_GPIO_Init();
 c000a3c:	f7ff ffa6 	bl	c00098c <MX_GPIO_Init>
  }
  /* LED1 on */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_SET);
 c000a40:	2201      	movs	r2, #1
 c000a42:	2180      	movs	r1, #128	; 0x80
 c000a44:	4802      	ldr	r0, [pc, #8]	; (c000a50 <Error_Handler+0x20>)
 c000a46:	f000 fdc9 	bl	c0015dc <HAL_GPIO_WritePin>

  /* Infinite loop */
  while (1)
 c000a4a:	e7fe      	b.n	c000a4a <Error_Handler+0x1a>
 c000a4c:	3000002c 	.word	0x3000002c
 c000a50:	52021c00 	.word	0x52021c00

0c000a54 <__acle_se_SECURE_RegisterCallback>:
  * @param  CallbackId  callback identifier
  * @param  func        pointer to non-secure function
  * @retval None
  */
CMSE_NS_ENTRY void SECURE_RegisterCallback(SECURE_CallbackIDTypeDef CallbackId, void *func)
{
 c000a54:	b480      	push	{r7}
 c000a56:	b083      	sub	sp, #12
 c000a58:	af00      	add	r7, sp, #0
 c000a5a:	4603      	mov	r3, r0
 c000a5c:	6039      	str	r1, [r7, #0]
 c000a5e:	71fb      	strb	r3, [r7, #7]
  if(func != NULL)
 c000a60:	683b      	ldr	r3, [r7, #0]
 c000a62:	2b00      	cmp	r3, #0
 c000a64:	d00d      	beq.n	c000a82 <__acle_se_SECURE_RegisterCallback+0x2e>
  {
    switch(CallbackId)
 c000a66:	79fb      	ldrb	r3, [r7, #7]
 c000a68:	2b00      	cmp	r3, #0
 c000a6a:	d002      	beq.n	c000a72 <__acle_se_SECURE_RegisterCallback+0x1e>
 c000a6c:	2b01      	cmp	r3, #1
 c000a6e:	d004      	beq.n	c000a7a <__acle_se_SECURE_RegisterCallback+0x26>
      case GTZC_ERROR_CB_ID:             /* GTZC Interrupt occurred */
        pSecureErrorCallback = func;
        break;
      default:
        /* unknown */
        break;
 c000a70:	e007      	b.n	c000a82 <__acle_se_SECURE_RegisterCallback+0x2e>
        pSecureFaultCallback = func;
 c000a72:	4a20      	ldr	r2, [pc, #128]	; (c000af4 <__acle_se_SECURE_RegisterCallback+0xa0>)
 c000a74:	683b      	ldr	r3, [r7, #0]
 c000a76:	6013      	str	r3, [r2, #0]
        break;
 c000a78:	e003      	b.n	c000a82 <__acle_se_SECURE_RegisterCallback+0x2e>
        pSecureErrorCallback = func;
 c000a7a:	4a1f      	ldr	r2, [pc, #124]	; (c000af8 <__acle_se_SECURE_RegisterCallback+0xa4>)
 c000a7c:	683b      	ldr	r3, [r7, #0]
 c000a7e:	6013      	str	r3, [r2, #0]
        break;
 c000a80:	bf00      	nop
    }
  }
}
 c000a82:	bf00      	nop
 c000a84:	370c      	adds	r7, #12
 c000a86:	46bd      	mov	sp, r7
 c000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000a8c:	4670      	mov	r0, lr
 c000a8e:	4671      	mov	r1, lr
 c000a90:	4672      	mov	r2, lr
 c000a92:	4673      	mov	r3, lr
 c000a94:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c000a98:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c000a9c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c000aa0:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c000aa4:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c000aa8:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c000aac:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c000ab0:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000ab4:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c000ab8:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000abc:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000ac0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000ac4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c000ac8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000acc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000ad0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000ad4:	f38e 8c00 	msr	CPSR_fs, lr
 c000ad8:	b410      	push	{r4}
 c000ada:	eef1 ca10 	vmrs	ip, fpscr
 c000ade:	f64f 7460 	movw	r4, #65376	; 0xff60
 c000ae2:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c000ae6:	ea0c 0c04 	and.w	ip, ip, r4
 c000aea:	eee1 ca10 	vmsr	fpscr, ip
 c000aee:	bc10      	pop	{r4}
 c000af0:	46f4      	mov	ip, lr
 c000af2:	4774      	bxns	lr
 c000af4:	30000030 	.word	0x30000030
 c000af8:	30000034 	.word	0x30000034

0c000afc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 c000afc:	b580      	push	{r7, lr}
 c000afe:	b082      	sub	sp, #8
 c000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 c000b02:	4b15      	ldr	r3, [pc, #84]	; (c000b58 <HAL_MspInit+0x5c>)
 c000b04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c000b08:	4a13      	ldr	r2, [pc, #76]	; (c000b58 <HAL_MspInit+0x5c>)
 c000b0a:	f043 0304 	orr.w	r3, r3, #4
 c000b0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 c000b12:	4b11      	ldr	r3, [pc, #68]	; (c000b58 <HAL_MspInit+0x5c>)
 c000b14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c000b18:	f003 0304 	and.w	r3, r3, #4
 c000b1c:	607b      	str	r3, [r7, #4]
 c000b1e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GTZC1_CLK_ENABLE();
 c000b20:	4b0d      	ldr	r3, [pc, #52]	; (c000b58 <HAL_MspInit+0x5c>)
 c000b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c000b26:	4a0c      	ldr	r2, [pc, #48]	; (c000b58 <HAL_MspInit+0x5c>)
 c000b28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 c000b2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 c000b30:	4b09      	ldr	r3, [pc, #36]	; (c000b58 <HAL_MspInit+0x5c>)
 c000b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c000b36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 c000b3a:	603b      	str	r3, [r7, #0]
 c000b3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* GTZC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(GTZC_IRQn, 0, 0);
 c000b3e:	2200      	movs	r2, #0
 c000b40:	2100      	movs	r1, #0
 c000b42:	2008      	movs	r0, #8
 c000b44:	f000 fb3d 	bl	c0011c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(GTZC_IRQn);
 c000b48:	2008      	movs	r0, #8
 c000b4a:	f000 fb54 	bl	c0011f6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 c000b4e:	bf00      	nop
 c000b50:	3708      	adds	r7, #8
 c000b52:	46bd      	mov	sp, r7
 c000b54:	bd80      	pop	{r7, pc}
 c000b56:	bf00      	nop
 c000b58:	56020c00 	.word	0x56020c00

0c000b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 c000b5c:	b480      	push	{r7}
 c000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 c000b60:	e7fe      	b.n	c000b60 <NMI_Handler+0x4>

0c000b62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 c000b62:	b480      	push	{r7}
 c000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 c000b66:	e7fe      	b.n	c000b66 <HardFault_Handler+0x4>

0c000b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 c000b68:	b480      	push	{r7}
 c000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 c000b6c:	e7fe      	b.n	c000b6c <MemManage_Handler+0x4>

0c000b6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 c000b6e:	b480      	push	{r7}
 c000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 c000b72:	e7fe      	b.n	c000b72 <BusFault_Handler+0x4>

0c000b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 c000b74:	b480      	push	{r7}
 c000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 c000b78:	e7fe      	b.n	c000b78 <UsageFault_Handler+0x4>

0c000b7a <SecureFault_Handler>:

/**
  * @brief This function handles Secure fault.
  */
void SecureFault_Handler(void)
{
 c000b7a:	b480      	push	{r7}
 c000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SecureFault_IRQn 0 */

  /* USER CODE END SecureFault_IRQn 0 */
  while (1)
 c000b7e:	e7fe      	b.n	c000b7e <SecureFault_Handler+0x4>

0c000b80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 c000b80:	b480      	push	{r7}
 c000b82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 c000b84:	bf00      	nop
 c000b86:	46bd      	mov	sp, r7
 c000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000b8c:	4770      	bx	lr

0c000b8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 c000b8e:	b480      	push	{r7}
 c000b90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 c000b92:	bf00      	nop
 c000b94:	46bd      	mov	sp, r7
 c000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000b9a:	4770      	bx	lr

0c000b9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 c000b9c:	b480      	push	{r7}
 c000b9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 c000ba0:	bf00      	nop
 c000ba2:	46bd      	mov	sp, r7
 c000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000ba8:	4770      	bx	lr

0c000baa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 c000baa:	b580      	push	{r7, lr}
 c000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 c000bae:	f000 fa19 	bl	c000fe4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Callback();
 c000bb2:	f7ff ff23 	bl	c0009fc <HAL_SYSTICK_Callback>
  /* USER CODE END SysTick_IRQn 1 */
}
 c000bb6:	bf00      	nop
 c000bb8:	bd80      	pop	{r7, pc}

0c000bba <GTZC_IRQHandler>:

/**
  * @brief This function handles Global TrustZone Controller interrupt.
  */
void GTZC_IRQHandler(void)
{
 c000bba:	b580      	push	{r7, lr}
 c000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GTZC_IRQn 0 */

  /* USER CODE END GTZC_IRQn 0 */
  HAL_GTZC_IRQHandler();
 c000bbe:	f000 fe61 	bl	c001884 <HAL_GTZC_IRQHandler>
  /* USER CODE BEGIN GTZC_IRQn 1 */

  /* USER CODE END GTZC_IRQn 1 */
}
 c000bc2:	bf00      	nop
 c000bc4:	bd80      	pop	{r7, pc}
	...

0c000bc8 <TZ_SAU_Setup>:
  \brief   Setup a SAU Region
  \details Writes the region information contained in SAU_Region to the
           registers SAU_RNR, SAU_RBAR, and SAU_RLAR
 */
__STATIC_INLINE void TZ_SAU_Setup (void)
{
 c000bc8:	b480      	push	{r7}
 c000bca:	af00      	add	r7, sp, #0
  /* repeat this for all possible SAU regions */

#endif /* defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U) */

  #if defined (SAU_INIT_CTRL) && (SAU_INIT_CTRL == 1U)
    SAU->CTRL = ((SAU_INIT_CTRL_ENABLE << SAU_CTRL_ENABLE_Pos) & SAU_CTRL_ENABLE_Msk) |
 c000bcc:	4b13      	ldr	r3, [pc, #76]	; (c000c1c <TZ_SAU_Setup+0x54>)
 c000bce:	2202      	movs	r2, #2
 c000bd0:	601a      	str	r2, [r3, #0]
  #endif /* defined (SCB_CSR_AIRCR_INIT) && (SCB_CSR_AIRCR_INIT == 1U) */

  #if defined (__FPU_USED) && (__FPU_USED == 1U) && \
      defined (TZ_FPU_NS_USAGE) && (TZ_FPU_NS_USAGE == 1U)

    SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
 c000bd2:	4b13      	ldr	r3, [pc, #76]	; (c000c20 <TZ_SAU_Setup+0x58>)
 c000bd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c000bd8:	4a11      	ldr	r2, [pc, #68]	; (c000c20 <TZ_SAU_Setup+0x58>)
 c000bda:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 c000bde:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                   ((SCB_NSACR_CP10_11_VAL << SCB_NSACR_CP10_Pos) & (SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk));

    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c000be2:	4b10      	ldr	r3, [pc, #64]	; (c000c24 <TZ_SAU_Setup+0x5c>)
 c000be4:	685b      	ldr	r3, [r3, #4]
                   ((FPU_FPCCR_TS_VAL        << FPU_FPCCR_TS_Pos       ) & FPU_FPCCR_TS_Msk       ) |
 c000be6:	f023 53e0 	bic.w	r3, r3, #469762048	; 0x1c000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c000bea:	4a0e      	ldr	r2, [pc, #56]	; (c000c24 <TZ_SAU_Setup+0x5c>)
                   ((FPU_FPCCR_CLRONRETS_VAL << FPU_FPCCR_CLRONRETS_Pos) & FPU_FPCCR_CLRONRETS_Msk) |
 c000bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c000bf0:	6053      	str	r3, [r2, #4]
                   ((FPU_FPCCR_CLRONRET_VAL  << FPU_FPCCR_CLRONRET_Pos ) & FPU_FPCCR_CLRONRET_Msk );
  #endif

  #if defined (NVIC_INIT_ITNS0) && (NVIC_INIT_ITNS0 == 1U)
    NVIC->ITNS[0] = NVIC_INIT_ITNS0_VAL;
 c000bf2:	4b0d      	ldr	r3, [pc, #52]	; (c000c28 <TZ_SAU_Setup+0x60>)
 c000bf4:	2200      	movs	r2, #0
 c000bf6:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
  #endif

  #if defined (NVIC_INIT_ITNS1) && (NVIC_INIT_ITNS1 == 1U)
    NVIC->ITNS[1] = NVIC_INIT_ITNS1_VAL;
 c000bfa:	4b0b      	ldr	r3, [pc, #44]	; (c000c28 <TZ_SAU_Setup+0x60>)
 c000bfc:	2200      	movs	r2, #0
 c000bfe:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
  #endif

  #if defined (NVIC_INIT_ITNS2) && (NVIC_INIT_ITNS2 == 1U)
    NVIC->ITNS[2] = NVIC_INIT_ITNS2_VAL;
 c000c02:	4b09      	ldr	r3, [pc, #36]	; (c000c28 <TZ_SAU_Setup+0x60>)
 c000c04:	2200      	movs	r2, #0
 c000c06:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  #endif

  #if defined (NVIC_INIT_ITNS3) && (NVIC_INIT_ITNS3 == 1U)
    NVIC->ITNS[3] = NVIC_INIT_ITNS3_VAL;
 c000c0a:	4b07      	ldr	r3, [pc, #28]	; (c000c28 <TZ_SAU_Setup+0x60>)
 c000c0c:	2200      	movs	r2, #0
 c000c0e:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  #endif

}
 c000c12:	bf00      	nop
 c000c14:	46bd      	mov	sp, r7
 c000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000c1a:	4770      	bx	lr
 c000c1c:	e000edd0 	.word	0xe000edd0
 c000c20:	e000ed00 	.word	0xe000ed00
 c000c24:	e000ef30 	.word	0xe000ef30
 c000c28:	e000e100 	.word	0xe000e100

0c000c2c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 c000c2c:	b580      	push	{r7, lr}
 c000c2e:	af00      	add	r7, sp, #0
  /* SAU/IDAU, FPU and Interrupts secure/non-secure allocation settings */
  TZ_SAU_Setup();
 c000c30:	f7ff ffca 	bl	c000bc8 <TZ_SAU_Setup>

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));     /* set CP10 and CP11 Full Access */
 c000c34:	4b1a      	ldr	r3, [pc, #104]	; (c000ca0 <SystemInit+0x74>)
 c000c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c000c3a:	4a19      	ldr	r2, [pc, #100]	; (c000ca0 <SystemInit+0x74>)
 c000c3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c000c40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c000c44:	4b17      	ldr	r3, [pc, #92]	; (c000ca4 <SystemInit+0x78>)
 c000c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c000c4a:	4a16      	ldr	r2, [pc, #88]	; (c000ca4 <SystemInit+0x78>)
 c000c4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c000c50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 c000c54:	4b14      	ldr	r3, [pc, #80]	; (c000ca8 <SystemInit+0x7c>)
 c000c56:	2201      	movs	r2, #1
 c000c58:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 c000c5a:	4b13      	ldr	r3, [pc, #76]	; (c000ca8 <SystemInit+0x7c>)
 c000c5c:	2200      	movs	r2, #0
 c000c5e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 c000c60:	4b11      	ldr	r3, [pc, #68]	; (c000ca8 <SystemInit+0x7c>)
 c000c62:	2200      	movs	r2, #0
 c000c64:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 c000c66:	4b10      	ldr	r3, [pc, #64]	; (c000ca8 <SystemInit+0x7c>)
 c000c68:	2200      	movs	r2, #0
 c000c6a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 c000c6c:	4b0e      	ldr	r3, [pc, #56]	; (c000ca8 <SystemInit+0x7c>)
 c000c6e:	681b      	ldr	r3, [r3, #0]
 c000c70:	4a0d      	ldr	r2, [pc, #52]	; (c000ca8 <SystemInit+0x7c>)
 c000c72:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 c000c76:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 c000c7a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 c000c7c:	4b0a      	ldr	r3, [pc, #40]	; (c000ca8 <SystemInit+0x7c>)
 c000c7e:	2200      	movs	r2, #0
 c000c80:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 c000c82:	4b09      	ldr	r3, [pc, #36]	; (c000ca8 <SystemInit+0x7c>)
 c000c84:	681b      	ldr	r3, [r3, #0]
 c000c86:	4a08      	ldr	r2, [pc, #32]	; (c000ca8 <SystemInit+0x7c>)
 c000c88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 c000c8c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 c000c8e:	4b06      	ldr	r3, [pc, #24]	; (c000ca8 <SystemInit+0x7c>)
 c000c90:	2200      	movs	r2, #0
 c000c92:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 c000c94:	4b02      	ldr	r3, [pc, #8]	; (c000ca0 <SystemInit+0x74>)
 c000c96:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 c000c9a:	609a      	str	r2, [r3, #8]
#endif
}
 c000c9c:	bf00      	nop
 c000c9e:	bd80      	pop	{r7, pc}
 c000ca0:	e000ed00 	.word	0xe000ed00
 c000ca4:	e002ed00 	.word	0xe002ed00
 c000ca8:	56020c00 	.word	0x56020c00

0c000cac <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 c000cac:	b480      	push	{r7}
 c000cae:	b089      	sub	sp, #36	; 0x24
 c000cb0:	af00      	add	r7, sp, #0
  uint32_t pllr, pllsource, pllm , tmp, pllfracen, msirange;
  float_t fracn1, pllvco;

  /* Get MSI Range frequency--------------------------------------------------*/
  if(READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 c000cb2:	4b73      	ldr	r3, [pc, #460]	; (c000e80 <SystemCoreClockUpdate+0x1d4>)
 c000cb4:	689b      	ldr	r3, [r3, #8]
 c000cb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 c000cba:	2b00      	cmp	r3, #0
 c000cbc:	d107      	bne.n	c000cce <SystemCoreClockUpdate+0x22>
  {
    /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 c000cbe:	4b70      	ldr	r3, [pc, #448]	; (c000e80 <SystemCoreClockUpdate+0x1d4>)
 c000cc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 c000cc4:	0b1b      	lsrs	r3, r3, #12
 c000cc6:	f003 030f 	and.w	r3, r3, #15
 c000cca:	61fb      	str	r3, [r7, #28]
 c000ccc:	e005      	b.n	c000cda <SystemCoreClockUpdate+0x2e>
  }
  else
  {
    /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 c000cce:	4b6c      	ldr	r3, [pc, #432]	; (c000e80 <SystemCoreClockUpdate+0x1d4>)
 c000cd0:	689b      	ldr	r3, [r3, #8]
 c000cd2:	0f1b      	lsrs	r3, r3, #28
 c000cd4:	f003 030f 	and.w	r3, r3, #15
 c000cd8:	61fb      	str	r3, [r7, #28]
  }

  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 c000cda:	4a6a      	ldr	r2, [pc, #424]	; (c000e84 <SystemCoreClockUpdate+0x1d8>)
 c000cdc:	69fb      	ldr	r3, [r7, #28]
 c000cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c000ce2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_SWS)
 c000ce4:	4b66      	ldr	r3, [pc, #408]	; (c000e80 <SystemCoreClockUpdate+0x1d4>)
 c000ce6:	69db      	ldr	r3, [r3, #28]
 c000ce8:	f003 030c 	and.w	r3, r3, #12
 c000cec:	2b0c      	cmp	r3, #12
 c000cee:	f200 80ae 	bhi.w	c000e4e <SystemCoreClockUpdate+0x1a2>
 c000cf2:	a201      	add	r2, pc, #4	; (adr r2, c000cf8 <SystemCoreClockUpdate+0x4c>)
 c000cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c000cf8:	0c000d2d 	.word	0x0c000d2d
 c000cfc:	0c000e4f 	.word	0x0c000e4f
 c000d00:	0c000e4f 	.word	0x0c000e4f
 c000d04:	0c000e4f 	.word	0x0c000e4f
 c000d08:	0c000d35 	.word	0x0c000d35
 c000d0c:	0c000e4f 	.word	0x0c000e4f
 c000d10:	0c000e4f 	.word	0x0c000e4f
 c000d14:	0c000e4f 	.word	0x0c000e4f
 c000d18:	0c000d3d 	.word	0x0c000d3d
 c000d1c:	0c000e4f 	.word	0x0c000e4f
 c000d20:	0c000e4f 	.word	0x0c000e4f
 c000d24:	0c000e4f 	.word	0x0c000e4f
 c000d28:	0c000d45 	.word	0x0c000d45
  {
  case 0x00:  /* MSI used as system clock source */
    SystemCoreClock = msirange;
 c000d2c:	4a56      	ldr	r2, [pc, #344]	; (c000e88 <SystemCoreClockUpdate+0x1dc>)
 c000d2e:	69fb      	ldr	r3, [r7, #28]
 c000d30:	6013      	str	r3, [r2, #0]
    break;
 c000d32:	e090      	b.n	c000e56 <SystemCoreClockUpdate+0x1aa>

  case 0x04:  /* HSI used as system clock source */
    SystemCoreClock = HSI_VALUE;
 c000d34:	4b54      	ldr	r3, [pc, #336]	; (c000e88 <SystemCoreClockUpdate+0x1dc>)
 c000d36:	4a55      	ldr	r2, [pc, #340]	; (c000e8c <SystemCoreClockUpdate+0x1e0>)
 c000d38:	601a      	str	r2, [r3, #0]
    break;
 c000d3a:	e08c      	b.n	c000e56 <SystemCoreClockUpdate+0x1aa>

  case 0x08:  /* HSE used as system clock source */
    SystemCoreClock = HSE_VALUE;
 c000d3c:	4b52      	ldr	r3, [pc, #328]	; (c000e88 <SystemCoreClockUpdate+0x1dc>)
 c000d3e:	4a53      	ldr	r2, [pc, #332]	; (c000e8c <SystemCoreClockUpdate+0x1e0>)
 c000d40:	601a      	str	r2, [r3, #0]
    break;
 c000d42:	e088      	b.n	c000e56 <SystemCoreClockUpdate+0x1aa>

  case 0x0C:  /* PLL used as system clock source */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 c000d44:	4b4e      	ldr	r3, [pc, #312]	; (c000e80 <SystemCoreClockUpdate+0x1d4>)
 c000d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c000d48:	f003 0303 	and.w	r3, r3, #3
 c000d4c:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M)>> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 c000d4e:	4b4c      	ldr	r3, [pc, #304]	; (c000e80 <SystemCoreClockUpdate+0x1d4>)
 c000d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c000d52:	0a1b      	lsrs	r3, r3, #8
 c000d54:	f003 030f 	and.w	r3, r3, #15
 c000d58:	3301      	adds	r3, #1
 c000d5a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN)>>RCC_PLL1CFGR_PLL1FRACEN_Pos);
 c000d5c:	4b48      	ldr	r3, [pc, #288]	; (c000e80 <SystemCoreClockUpdate+0x1d4>)
 c000d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c000d60:	091b      	lsrs	r3, r3, #4
 c000d62:	f003 0301 	and.w	r3, r3, #1
 c000d66:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN)>> RCC_PLL1FRACR_PLL1FRACN_Pos));
 c000d68:	4b45      	ldr	r3, [pc, #276]	; (c000e80 <SystemCoreClockUpdate+0x1d4>)
 c000d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c000d6c:	08db      	lsrs	r3, r3, #3
 c000d6e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 c000d72:	68fa      	ldr	r2, [r7, #12]
 c000d74:	fb02 f303 	mul.w	r3, r2, r3
 c000d78:	ee07 3a90 	vmov	s15, r3
 c000d7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c000d80:	edc7 7a02 	vstr	s15, [r7, #8]
 c000d84:	697b      	ldr	r3, [r7, #20]
 c000d86:	2b03      	cmp	r3, #3
 c000d88:	d019      	beq.n	c000dbe <SystemCoreClockUpdate+0x112>
 c000d8a:	697b      	ldr	r3, [r7, #20]
 c000d8c:	2b03      	cmp	r3, #3
 c000d8e:	d822      	bhi.n	c000dd6 <SystemCoreClockUpdate+0x12a>
 c000d90:	697b      	ldr	r3, [r7, #20]
 c000d92:	2b00      	cmp	r3, #0
 c000d94:	d003      	beq.n	c000d9e <SystemCoreClockUpdate+0xf2>
 c000d96:	697b      	ldr	r3, [r7, #20]
 c000d98:	2b02      	cmp	r3, #2
 c000d9a:	d004      	beq.n	c000da6 <SystemCoreClockUpdate+0xfa>
 c000d9c:	e01b      	b.n	c000dd6 <SystemCoreClockUpdate+0x12a>

      switch (pllsource)
      {
      case 0x00:  /* No clock sent to PLL*/
        pllvco = (float_t)0U;
 c000d9e:	f04f 0300 	mov.w	r3, #0
 c000da2:	61bb      	str	r3, [r7, #24]
        break;
 c000da4:	e026      	b.n	c000df4 <SystemCoreClockUpdate+0x148>

      case 0x02:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm);
 c000da6:	693b      	ldr	r3, [r7, #16]
 c000da8:	ee07 3a90 	vmov	s15, r3
 c000dac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 c000db0:	eddf 6a37 	vldr	s13, [pc, #220]	; c000e90 <SystemCoreClockUpdate+0x1e4>
 c000db4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c000db8:	edc7 7a06 	vstr	s15, [r7, #24]
        break;
 c000dbc:	e01a      	b.n	c000df4 <SystemCoreClockUpdate+0x148>

      case 0x03:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm);
 c000dbe:	693b      	ldr	r3, [r7, #16]
 c000dc0:	ee07 3a90 	vmov	s15, r3
 c000dc4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 c000dc8:	eddf 6a31 	vldr	s13, [pc, #196]	; c000e90 <SystemCoreClockUpdate+0x1e4>
 c000dcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c000dd0:	edc7 7a06 	vstr	s15, [r7, #24]
        break;
 c000dd4:	e00e      	b.n	c000df4 <SystemCoreClockUpdate+0x148>

      default:    /* MSI used as PLL clock source */
        pllvco = ((float_t)msirange / (float_t)pllm);
 c000dd6:	69fb      	ldr	r3, [r7, #28]
 c000dd8:	ee07 3a90 	vmov	s15, r3
 c000ddc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c000de0:	693b      	ldr	r3, [r7, #16]
 c000de2:	ee07 3a90 	vmov	s15, r3
 c000de6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 c000dea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c000dee:	edc7 7a06 	vstr	s15, [r7, #24]
        break;
 c000df2:	bf00      	nop
      }

      pllvco = pllvco * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + (fracn1/(float_t)0x2000) + (float_t)1U);
 c000df4:	4b22      	ldr	r3, [pc, #136]	; (c000e80 <SystemCoreClockUpdate+0x1d4>)
 c000df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c000df8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c000dfc:	ee07 3a90 	vmov	s15, r3
 c000e00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 c000e04:	edd7 6a02 	vldr	s13, [r7, #8]
 c000e08:	ed9f 6a22 	vldr	s12, [pc, #136]	; c000e94 <SystemCoreClockUpdate+0x1e8>
 c000e0c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 c000e10:	ee77 7a27 	vadd.f32	s15, s14, s15
 c000e14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000e18:	ee77 7a87 	vadd.f32	s15, s15, s14
 c000e1c:	ed97 7a06 	vldr	s14, [r7, #24]
 c000e20:	ee67 7a27 	vmul.f32	s15, s14, s15
 c000e24:	edc7 7a06 	vstr	s15, [r7, #24]
      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U );
 c000e28:	4b15      	ldr	r3, [pc, #84]	; (c000e80 <SystemCoreClockUpdate+0x1d4>)
 c000e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c000e2c:	0e1b      	lsrs	r3, r3, #24
 c000e2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 c000e32:	3301      	adds	r3, #1
 c000e34:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (uint32_t)((uint32_t)pllvco/pllr);
 c000e36:	edd7 7a06 	vldr	s15, [r7, #24]
 c000e3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 c000e3e:	ee17 2a90 	vmov	r2, s15
 c000e42:	687b      	ldr	r3, [r7, #4]
 c000e44:	fbb2 f3f3 	udiv	r3, r2, r3
 c000e48:	4a0f      	ldr	r2, [pc, #60]	; (c000e88 <SystemCoreClockUpdate+0x1dc>)
 c000e4a:	6013      	str	r3, [r2, #0]
      break;
 c000e4c:	e003      	b.n	c000e56 <SystemCoreClockUpdate+0x1aa>

  default:
    SystemCoreClock = msirange;
 c000e4e:	4a0e      	ldr	r2, [pc, #56]	; (c000e88 <SystemCoreClockUpdate+0x1dc>)
 c000e50:	69fb      	ldr	r3, [r7, #28]
 c000e52:	6013      	str	r3, [r2, #0]
    break;
 c000e54:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos)];
 c000e56:	4b0a      	ldr	r3, [pc, #40]	; (c000e80 <SystemCoreClockUpdate+0x1d4>)
 c000e58:	6a1b      	ldr	r3, [r3, #32]
 c000e5a:	f003 030f 	and.w	r3, r3, #15
 c000e5e:	4a0e      	ldr	r2, [pc, #56]	; (c000e98 <SystemCoreClockUpdate+0x1ec>)
 c000e60:	5cd3      	ldrb	r3, [r2, r3]
 c000e62:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 c000e64:	4b08      	ldr	r3, [pc, #32]	; (c000e88 <SystemCoreClockUpdate+0x1dc>)
 c000e66:	681a      	ldr	r2, [r3, #0]
 c000e68:	683b      	ldr	r3, [r7, #0]
 c000e6a:	fa22 f303 	lsr.w	r3, r2, r3
 c000e6e:	4a06      	ldr	r2, [pc, #24]	; (c000e88 <SystemCoreClockUpdate+0x1dc>)
 c000e70:	6013      	str	r3, [r2, #0]
}
 c000e72:	bf00      	nop
 c000e74:	3724      	adds	r7, #36	; 0x24
 c000e76:	46bd      	mov	sp, r7
 c000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000e7c:	4770      	bx	lr
 c000e7e:	bf00      	nop
 c000e80:	56020c00 	.word	0x56020c00
 c000e84:	0c001e44 	.word	0x0c001e44
 c000e88:	30000004 	.word	0x30000004
 c000e8c:	00f42400 	.word	0x00f42400
 c000e90:	4b742400 	.word	0x4b742400
 c000e94:	46000000 	.word	0x46000000
 c000e98:	0c001e34 	.word	0x0c001e34

0c000e9c <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value (HCLK)
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
 c000e9c:	b580      	push	{r7, lr}
 c000e9e:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
 c000ea0:	f7ff ff04 	bl	c000cac <SystemCoreClockUpdate>

  return SystemCoreClock;
 c000ea4:	4b1c      	ldr	r3, [pc, #112]	; (c000f18 <__acle_se_SECURE_SystemCoreClockUpdate+0x7c>)
 c000ea6:	681b      	ldr	r3, [r3, #0]
}
 c000ea8:	4618      	mov	r0, r3
 c000eaa:	46bd      	mov	sp, r7
 c000eac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c000eb0:	4671      	mov	r1, lr
 c000eb2:	4672      	mov	r2, lr
 c000eb4:	4673      	mov	r3, lr
 c000eb6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c000eba:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c000ebe:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c000ec2:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c000ec6:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c000eca:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c000ece:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c000ed2:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000ed6:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c000eda:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000ede:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000ee2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000ee6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c000eea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000eee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000ef2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000ef6:	f38e 8c00 	msr	CPSR_fs, lr
 c000efa:	b410      	push	{r4}
 c000efc:	eef1 ca10 	vmrs	ip, fpscr
 c000f00:	f64f 7460 	movw	r4, #65376	; 0xff60
 c000f04:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c000f08:	ea0c 0c04 	and.w	ip, ip, r4
 c000f0c:	eee1 ca10 	vmsr	fpscr, ip
 c000f10:	bc10      	pop	{r4}
 c000f12:	46f4      	mov	ip, lr
 c000f14:	4774      	bxns	lr
 c000f16:	bf00      	nop
 c000f18:	30000004 	.word	0x30000004

0c000f1c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 c000f1c:	b580      	push	{r7, lr}
 c000f1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 c000f20:	4b11      	ldr	r3, [pc, #68]	; (c000f68 <HAL_Init+0x4c>)
 c000f22:	681b      	ldr	r3, [r3, #0]
 c000f24:	4a10      	ldr	r2, [pc, #64]	; (c000f68 <HAL_Init+0x4c>)
 c000f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c000f2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 c000f2c:	2003      	movs	r0, #3
 c000f2e:	f000 f93d 	bl	c0011ac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 c000f32:	f000 fe45 	bl	c001bc0 <HAL_RCC_GetSysClockFreq>
 c000f36:	4602      	mov	r2, r0
 c000f38:	4b0c      	ldr	r3, [pc, #48]	; (c000f6c <HAL_Init+0x50>)
 c000f3a:	6a1b      	ldr	r3, [r3, #32]
 c000f3c:	f003 030f 	and.w	r3, r3, #15
 c000f40:	490b      	ldr	r1, [pc, #44]	; (c000f70 <HAL_Init+0x54>)
 c000f42:	5ccb      	ldrb	r3, [r1, r3]
 c000f44:	fa22 f303 	lsr.w	r3, r2, r3
 c000f48:	4a0a      	ldr	r2, [pc, #40]	; (c000f74 <HAL_Init+0x58>)
 c000f4a:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 c000f4c:	200f      	movs	r0, #15
 c000f4e:	f000 f813 	bl	c000f78 <HAL_InitTick>
 c000f52:	4603      	mov	r3, r0
 c000f54:	2b00      	cmp	r3, #0
 c000f56:	d001      	beq.n	c000f5c <HAL_Init+0x40>
  {
    return HAL_ERROR;
 c000f58:	2301      	movs	r3, #1
 c000f5a:	e002      	b.n	c000f62 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 c000f5c:	f7ff fdce 	bl	c000afc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 c000f60:	2300      	movs	r3, #0
}
 c000f62:	4618      	mov	r0, r3
 c000f64:	bd80      	pop	{r7, pc}
 c000f66:	bf00      	nop
 c000f68:	50022000 	.word	0x50022000
 c000f6c:	56020c00 	.word	0x56020c00
 c000f70:	0c001e34 	.word	0x0c001e34
 c000f74:	30000004 	.word	0x30000004

0c000f78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 c000f78:	b580      	push	{r7, lr}
 c000f7a:	b082      	sub	sp, #8
 c000f7c:	af00      	add	r7, sp, #0
 c000f7e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 c000f80:	4b15      	ldr	r3, [pc, #84]	; (c000fd8 <HAL_InitTick+0x60>)
 c000f82:	781b      	ldrb	r3, [r3, #0]
 c000f84:	2b00      	cmp	r3, #0
 c000f86:	d101      	bne.n	c000f8c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 c000f88:	2301      	movs	r3, #1
 c000f8a:	e021      	b.n	c000fd0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 c000f8c:	4b13      	ldr	r3, [pc, #76]	; (c000fdc <HAL_InitTick+0x64>)
 c000f8e:	681a      	ldr	r2, [r3, #0]
 c000f90:	4b11      	ldr	r3, [pc, #68]	; (c000fd8 <HAL_InitTick+0x60>)
 c000f92:	781b      	ldrb	r3, [r3, #0]
 c000f94:	4619      	mov	r1, r3
 c000f96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 c000f9a:	fbb3 f3f1 	udiv	r3, r3, r1
 c000f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 c000fa2:	4618      	mov	r0, r3
 c000fa4:	f000 f935 	bl	c001212 <HAL_SYSTICK_Config>
 c000fa8:	4603      	mov	r3, r0
 c000faa:	2b00      	cmp	r3, #0
 c000fac:	d001      	beq.n	c000fb2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 c000fae:	2301      	movs	r3, #1
 c000fb0:	e00e      	b.n	c000fd0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 c000fb2:	687b      	ldr	r3, [r7, #4]
 c000fb4:	2b0f      	cmp	r3, #15
 c000fb6:	d80a      	bhi.n	c000fce <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 c000fb8:	2200      	movs	r2, #0
 c000fba:	6879      	ldr	r1, [r7, #4]
 c000fbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 c000fc0:	f000 f8ff 	bl	c0011c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 c000fc4:	4a06      	ldr	r2, [pc, #24]	; (c000fe0 <HAL_InitTick+0x68>)
 c000fc6:	687b      	ldr	r3, [r7, #4]
 c000fc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 c000fca:	2300      	movs	r3, #0
 c000fcc:	e000      	b.n	c000fd0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 c000fce:	2301      	movs	r3, #1
}
 c000fd0:	4618      	mov	r0, r3
 c000fd2:	3708      	adds	r7, #8
 c000fd4:	46bd      	mov	sp, r7
 c000fd6:	bd80      	pop	{r7, pc}
 c000fd8:	3000000c 	.word	0x3000000c
 c000fdc:	30000004 	.word	0x30000004
 c000fe0:	30000008 	.word	0x30000008

0c000fe4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 c000fe4:	b480      	push	{r7}
 c000fe6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 c000fe8:	4b06      	ldr	r3, [pc, #24]	; (c001004 <HAL_IncTick+0x20>)
 c000fea:	781b      	ldrb	r3, [r3, #0]
 c000fec:	461a      	mov	r2, r3
 c000fee:	4b06      	ldr	r3, [pc, #24]	; (c001008 <HAL_IncTick+0x24>)
 c000ff0:	681b      	ldr	r3, [r3, #0]
 c000ff2:	4413      	add	r3, r2
 c000ff4:	4a04      	ldr	r2, [pc, #16]	; (c001008 <HAL_IncTick+0x24>)
 c000ff6:	6013      	str	r3, [r2, #0]
}
 c000ff8:	bf00      	nop
 c000ffa:	46bd      	mov	sp, r7
 c000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001000:	4770      	bx	lr
 c001002:	bf00      	nop
 c001004:	3000000c 	.word	0x3000000c
 c001008:	30000038 	.word	0x30000038

0c00100c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c00100c:	b480      	push	{r7}
 c00100e:	b085      	sub	sp, #20
 c001010:	af00      	add	r7, sp, #0
 c001012:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 c001014:	687b      	ldr	r3, [r7, #4]
 c001016:	f003 0307 	and.w	r3, r3, #7
 c00101a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 c00101c:	4b0c      	ldr	r3, [pc, #48]	; (c001050 <__NVIC_SetPriorityGrouping+0x44>)
 c00101e:	68db      	ldr	r3, [r3, #12]
 c001020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 c001022:	68ba      	ldr	r2, [r7, #8]
 c001024:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 c001028:	4013      	ands	r3, r2
 c00102a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 c00102c:	68fb      	ldr	r3, [r7, #12]
 c00102e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 c001030:	68bb      	ldr	r3, [r7, #8]
 c001032:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 c001034:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 c001038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c00103c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 c00103e:	4a04      	ldr	r2, [pc, #16]	; (c001050 <__NVIC_SetPriorityGrouping+0x44>)
 c001040:	68bb      	ldr	r3, [r7, #8]
 c001042:	60d3      	str	r3, [r2, #12]
}
 c001044:	bf00      	nop
 c001046:	3714      	adds	r7, #20
 c001048:	46bd      	mov	sp, r7
 c00104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00104e:	4770      	bx	lr
 c001050:	e000ed00 	.word	0xe000ed00

0c001054 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 c001054:	b480      	push	{r7}
 c001056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 c001058:	4b04      	ldr	r3, [pc, #16]	; (c00106c <__NVIC_GetPriorityGrouping+0x18>)
 c00105a:	68db      	ldr	r3, [r3, #12]
 c00105c:	0a1b      	lsrs	r3, r3, #8
 c00105e:	f003 0307 	and.w	r3, r3, #7
}
 c001062:	4618      	mov	r0, r3
 c001064:	46bd      	mov	sp, r7
 c001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00106a:	4770      	bx	lr
 c00106c:	e000ed00 	.word	0xe000ed00

0c001070 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 c001070:	b480      	push	{r7}
 c001072:	b083      	sub	sp, #12
 c001074:	af00      	add	r7, sp, #0
 c001076:	4603      	mov	r3, r0
 c001078:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c00107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c00107e:	2b00      	cmp	r3, #0
 c001080:	db0b      	blt.n	c00109a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 c001082:	79fb      	ldrb	r3, [r7, #7]
 c001084:	f003 021f 	and.w	r2, r3, #31
 c001088:	4907      	ldr	r1, [pc, #28]	; (c0010a8 <__NVIC_EnableIRQ+0x38>)
 c00108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c00108e:	095b      	lsrs	r3, r3, #5
 c001090:	2001      	movs	r0, #1
 c001092:	fa00 f202 	lsl.w	r2, r0, r2
 c001096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 c00109a:	bf00      	nop
 c00109c:	370c      	adds	r7, #12
 c00109e:	46bd      	mov	sp, r7
 c0010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0010a4:	4770      	bx	lr
 c0010a6:	bf00      	nop
 c0010a8:	e000e100 	.word	0xe000e100

0c0010ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 c0010ac:	b480      	push	{r7}
 c0010ae:	b083      	sub	sp, #12
 c0010b0:	af00      	add	r7, sp, #0
 c0010b2:	4603      	mov	r3, r0
 c0010b4:	6039      	str	r1, [r7, #0]
 c0010b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c0010b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c0010bc:	2b00      	cmp	r3, #0
 c0010be:	db0a      	blt.n	c0010d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c0010c0:	683b      	ldr	r3, [r7, #0]
 c0010c2:	b2da      	uxtb	r2, r3
 c0010c4:	490c      	ldr	r1, [pc, #48]	; (c0010f8 <__NVIC_SetPriority+0x4c>)
 c0010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c0010ca:	0112      	lsls	r2, r2, #4
 c0010cc:	b2d2      	uxtb	r2, r2
 c0010ce:	440b      	add	r3, r1
 c0010d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 c0010d4:	e00a      	b.n	c0010ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c0010d6:	683b      	ldr	r3, [r7, #0]
 c0010d8:	b2da      	uxtb	r2, r3
 c0010da:	4908      	ldr	r1, [pc, #32]	; (c0010fc <__NVIC_SetPriority+0x50>)
 c0010dc:	79fb      	ldrb	r3, [r7, #7]
 c0010de:	f003 030f 	and.w	r3, r3, #15
 c0010e2:	3b04      	subs	r3, #4
 c0010e4:	0112      	lsls	r2, r2, #4
 c0010e6:	b2d2      	uxtb	r2, r2
 c0010e8:	440b      	add	r3, r1
 c0010ea:	761a      	strb	r2, [r3, #24]
}
 c0010ec:	bf00      	nop
 c0010ee:	370c      	adds	r7, #12
 c0010f0:	46bd      	mov	sp, r7
 c0010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0010f6:	4770      	bx	lr
 c0010f8:	e000e100 	.word	0xe000e100
 c0010fc:	e000ed00 	.word	0xe000ed00

0c001100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c001100:	b480      	push	{r7}
 c001102:	b089      	sub	sp, #36	; 0x24
 c001104:	af00      	add	r7, sp, #0
 c001106:	60f8      	str	r0, [r7, #12]
 c001108:	60b9      	str	r1, [r7, #8]
 c00110a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 c00110c:	68fb      	ldr	r3, [r7, #12]
 c00110e:	f003 0307 	and.w	r3, r3, #7
 c001112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 c001114:	69fb      	ldr	r3, [r7, #28]
 c001116:	f1c3 0307 	rsb	r3, r3, #7
 c00111a:	2b04      	cmp	r3, #4
 c00111c:	bf28      	it	cs
 c00111e:	2304      	movcs	r3, #4
 c001120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 c001122:	69fb      	ldr	r3, [r7, #28]
 c001124:	3304      	adds	r3, #4
 c001126:	2b06      	cmp	r3, #6
 c001128:	d902      	bls.n	c001130 <NVIC_EncodePriority+0x30>
 c00112a:	69fb      	ldr	r3, [r7, #28]
 c00112c:	3b03      	subs	r3, #3
 c00112e:	e000      	b.n	c001132 <NVIC_EncodePriority+0x32>
 c001130:	2300      	movs	r3, #0
 c001132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c001134:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c001138:	69bb      	ldr	r3, [r7, #24]
 c00113a:	fa02 f303 	lsl.w	r3, r2, r3
 c00113e:	43da      	mvns	r2, r3
 c001140:	68bb      	ldr	r3, [r7, #8]
 c001142:	401a      	ands	r2, r3
 c001144:	697b      	ldr	r3, [r7, #20]
 c001146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 c001148:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 c00114c:	697b      	ldr	r3, [r7, #20]
 c00114e:	fa01 f303 	lsl.w	r3, r1, r3
 c001152:	43d9      	mvns	r1, r3
 c001154:	687b      	ldr	r3, [r7, #4]
 c001156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c001158:	4313      	orrs	r3, r2
         );
}
 c00115a:	4618      	mov	r0, r3
 c00115c:	3724      	adds	r7, #36	; 0x24
 c00115e:	46bd      	mov	sp, r7
 c001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001164:	4770      	bx	lr
	...

0c001168 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 c001168:	b580      	push	{r7, lr}
 c00116a:	b082      	sub	sp, #8
 c00116c:	af00      	add	r7, sp, #0
 c00116e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 c001170:	687b      	ldr	r3, [r7, #4]
 c001172:	3b01      	subs	r3, #1
 c001174:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c001178:	d301      	bcc.n	c00117e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 c00117a:	2301      	movs	r3, #1
 c00117c:	e00f      	b.n	c00119e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 c00117e:	4a0a      	ldr	r2, [pc, #40]	; (c0011a8 <SysTick_Config+0x40>)
 c001180:	687b      	ldr	r3, [r7, #4]
 c001182:	3b01      	subs	r3, #1
 c001184:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 c001186:	210f      	movs	r1, #15
 c001188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 c00118c:	f7ff ff8e 	bl	c0010ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 c001190:	4b05      	ldr	r3, [pc, #20]	; (c0011a8 <SysTick_Config+0x40>)
 c001192:	2200      	movs	r2, #0
 c001194:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 c001196:	4b04      	ldr	r3, [pc, #16]	; (c0011a8 <SysTick_Config+0x40>)
 c001198:	2207      	movs	r2, #7
 c00119a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 c00119c:	2300      	movs	r3, #0
}
 c00119e:	4618      	mov	r0, r3
 c0011a0:	3708      	adds	r7, #8
 c0011a2:	46bd      	mov	sp, r7
 c0011a4:	bd80      	pop	{r7, pc}
 c0011a6:	bf00      	nop
 c0011a8:	e000e010 	.word	0xe000e010

0c0011ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c0011ac:	b580      	push	{r7, lr}
 c0011ae:	b082      	sub	sp, #8
 c0011b0:	af00      	add	r7, sp, #0
 c0011b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 c0011b4:	6878      	ldr	r0, [r7, #4]
 c0011b6:	f7ff ff29 	bl	c00100c <__NVIC_SetPriorityGrouping>
}
 c0011ba:	bf00      	nop
 c0011bc:	3708      	adds	r7, #8
 c0011be:	46bd      	mov	sp, r7
 c0011c0:	bd80      	pop	{r7, pc}

0c0011c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c0011c2:	b580      	push	{r7, lr}
 c0011c4:	b086      	sub	sp, #24
 c0011c6:	af00      	add	r7, sp, #0
 c0011c8:	4603      	mov	r3, r0
 c0011ca:	60b9      	str	r1, [r7, #8]
 c0011cc:	607a      	str	r2, [r7, #4]
 c0011ce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 c0011d0:	f7ff ff40 	bl	c001054 <__NVIC_GetPriorityGrouping>
 c0011d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 c0011d6:	687a      	ldr	r2, [r7, #4]
 c0011d8:	68b9      	ldr	r1, [r7, #8]
 c0011da:	6978      	ldr	r0, [r7, #20]
 c0011dc:	f7ff ff90 	bl	c001100 <NVIC_EncodePriority>
 c0011e0:	4602      	mov	r2, r0
 c0011e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c0011e6:	4611      	mov	r1, r2
 c0011e8:	4618      	mov	r0, r3
 c0011ea:	f7ff ff5f 	bl	c0010ac <__NVIC_SetPriority>
}
 c0011ee:	bf00      	nop
 c0011f0:	3718      	adds	r7, #24
 c0011f2:	46bd      	mov	sp, r7
 c0011f4:	bd80      	pop	{r7, pc}

0c0011f6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 c0011f6:	b580      	push	{r7, lr}
 c0011f8:	b082      	sub	sp, #8
 c0011fa:	af00      	add	r7, sp, #0
 c0011fc:	4603      	mov	r3, r0
 c0011fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 c001200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c001204:	4618      	mov	r0, r3
 c001206:	f7ff ff33 	bl	c001070 <__NVIC_EnableIRQ>
}
 c00120a:	bf00      	nop
 c00120c:	3708      	adds	r7, #8
 c00120e:	46bd      	mov	sp, r7
 c001210:	bd80      	pop	{r7, pc}

0c001212 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 c001212:	b580      	push	{r7, lr}
 c001214:	b082      	sub	sp, #8
 c001216:	af00      	add	r7, sp, #0
 c001218:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 c00121a:	6878      	ldr	r0, [r7, #4]
 c00121c:	f7ff ffa4 	bl	c001168 <SysTick_Config>
 c001220:	4603      	mov	r3, r0
}
 c001222:	4618      	mov	r0, r3
 c001224:	3708      	adds	r7, #8
 c001226:	46bd      	mov	sp, r7
 c001228:	bd80      	pop	{r7, pc}
	...

0c00122c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 c00122c:	b480      	push	{r7}
 c00122e:	b089      	sub	sp, #36	; 0x24
 c001230:	af00      	add	r7, sp, #0
 c001232:	6078      	str	r0, [r7, #4]
 c001234:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 c001236:	2300      	movs	r3, #0
 c001238:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 c00123a:	687b      	ldr	r3, [r7, #4]
 c00123c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 c00123e:	e1ba      	b.n	c0015b6 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 c001240:	683b      	ldr	r3, [r7, #0]
 c001242:	681a      	ldr	r2, [r3, #0]
 c001244:	2101      	movs	r1, #1
 c001246:	697b      	ldr	r3, [r7, #20]
 c001248:	fa01 f303 	lsl.w	r3, r1, r3
 c00124c:	4013      	ands	r3, r2
 c00124e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 c001250:	697b      	ldr	r3, [r7, #20]
 c001252:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 c001254:	68fb      	ldr	r3, [r7, #12]
 c001256:	2b00      	cmp	r3, #0
 c001258:	f000 81aa 	beq.w	c0015b0 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 c00125c:	687b      	ldr	r3, [r7, #4]
 c00125e:	4a55      	ldr	r2, [pc, #340]	; (c0013b4 <HAL_GPIO_Init+0x188>)
 c001260:	4293      	cmp	r3, r2
 c001262:	d15d      	bne.n	c001320 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 c001264:	687b      	ldr	r3, [r7, #4]
 c001266:	681b      	ldr	r3, [r3, #0]
 c001268:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 c00126a:	2201      	movs	r2, #1
 c00126c:	697b      	ldr	r3, [r7, #20]
 c00126e:	fa02 f303 	lsl.w	r3, r2, r3
 c001272:	43db      	mvns	r3, r3
 c001274:	69fa      	ldr	r2, [r7, #28]
 c001276:	4013      	ands	r3, r2
 c001278:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 c00127a:	683b      	ldr	r3, [r7, #0]
 c00127c:	685b      	ldr	r3, [r3, #4]
 c00127e:	f003 0201 	and.w	r2, r3, #1
 c001282:	697b      	ldr	r3, [r7, #20]
 c001284:	fa02 f303 	lsl.w	r3, r2, r3
 c001288:	69fa      	ldr	r2, [r7, #28]
 c00128a:	4313      	orrs	r3, r2
 c00128c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 c00128e:	687b      	ldr	r3, [r7, #4]
 c001290:	69fa      	ldr	r2, [r7, #28]
 c001292:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 c001294:	4a48      	ldr	r2, [pc, #288]	; (c0013b8 <HAL_GPIO_Init+0x18c>)
 c001296:	697b      	ldr	r3, [r7, #20]
 c001298:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 c00129c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 c00129e:	4a46      	ldr	r2, [pc, #280]	; (c0013b8 <HAL_GPIO_Init+0x18c>)
 c0012a0:	697b      	ldr	r3, [r7, #20]
 c0012a2:	00db      	lsls	r3, r3, #3
 c0012a4:	4413      	add	r3, r2
 c0012a6:	685b      	ldr	r3, [r3, #4]
 c0012a8:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 c0012aa:	69bb      	ldr	r3, [r7, #24]
 c0012ac:	08da      	lsrs	r2, r3, #3
 c0012ae:	693b      	ldr	r3, [r7, #16]
 c0012b0:	3208      	adds	r2, #8
 c0012b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c0012b6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 c0012b8:	69bb      	ldr	r3, [r7, #24]
 c0012ba:	f003 0307 	and.w	r3, r3, #7
 c0012be:	009b      	lsls	r3, r3, #2
 c0012c0:	220f      	movs	r2, #15
 c0012c2:	fa02 f303 	lsl.w	r3, r2, r3
 c0012c6:	43db      	mvns	r3, r3
 c0012c8:	69fa      	ldr	r2, [r7, #28]
 c0012ca:	4013      	ands	r3, r2
 c0012cc:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 c0012ce:	69bb      	ldr	r3, [r7, #24]
 c0012d0:	f003 0307 	and.w	r3, r3, #7
 c0012d4:	009b      	lsls	r3, r3, #2
 c0012d6:	220b      	movs	r2, #11
 c0012d8:	fa02 f303 	lsl.w	r3, r2, r3
 c0012dc:	69fa      	ldr	r2, [r7, #28]
 c0012de:	4313      	orrs	r3, r2
 c0012e0:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 c0012e2:	69bb      	ldr	r3, [r7, #24]
 c0012e4:	08da      	lsrs	r2, r3, #3
 c0012e6:	693b      	ldr	r3, [r7, #16]
 c0012e8:	3208      	adds	r2, #8
 c0012ea:	69f9      	ldr	r1, [r7, #28]
 c0012ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 c0012f0:	693b      	ldr	r3, [r7, #16]
 c0012f2:	681b      	ldr	r3, [r3, #0]
 c0012f4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 c0012f6:	69bb      	ldr	r3, [r7, #24]
 c0012f8:	005b      	lsls	r3, r3, #1
 c0012fa:	2203      	movs	r2, #3
 c0012fc:	fa02 f303 	lsl.w	r3, r2, r3
 c001300:	43db      	mvns	r3, r3
 c001302:	69fa      	ldr	r2, [r7, #28]
 c001304:	4013      	ands	r3, r2
 c001306:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 c001308:	69bb      	ldr	r3, [r7, #24]
 c00130a:	005b      	lsls	r3, r3, #1
 c00130c:	2202      	movs	r2, #2
 c00130e:	fa02 f303 	lsl.w	r3, r2, r3
 c001312:	69fa      	ldr	r2, [r7, #28]
 c001314:	4313      	orrs	r3, r2
 c001316:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 c001318:	693b      	ldr	r3, [r7, #16]
 c00131a:	69fa      	ldr	r2, [r7, #28]
 c00131c:	601a      	str	r2, [r3, #0]
 c00131e:	e067      	b.n	c0013f0 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 c001320:	683b      	ldr	r3, [r7, #0]
 c001322:	685b      	ldr	r3, [r3, #4]
 c001324:	2b02      	cmp	r3, #2
 c001326:	d003      	beq.n	c001330 <HAL_GPIO_Init+0x104>
 c001328:	683b      	ldr	r3, [r7, #0]
 c00132a:	685b      	ldr	r3, [r3, #4]
 c00132c:	2b12      	cmp	r3, #18
 c00132e:	d145      	bne.n	c0013bc <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 c001330:	697b      	ldr	r3, [r7, #20]
 c001332:	08da      	lsrs	r2, r3, #3
 c001334:	687b      	ldr	r3, [r7, #4]
 c001336:	3208      	adds	r2, #8
 c001338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c00133c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 c00133e:	697b      	ldr	r3, [r7, #20]
 c001340:	f003 0307 	and.w	r3, r3, #7
 c001344:	009b      	lsls	r3, r3, #2
 c001346:	220f      	movs	r2, #15
 c001348:	fa02 f303 	lsl.w	r3, r2, r3
 c00134c:	43db      	mvns	r3, r3
 c00134e:	69fa      	ldr	r2, [r7, #28]
 c001350:	4013      	ands	r3, r2
 c001352:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 c001354:	683b      	ldr	r3, [r7, #0]
 c001356:	691b      	ldr	r3, [r3, #16]
 c001358:	f003 020f 	and.w	r2, r3, #15
 c00135c:	697b      	ldr	r3, [r7, #20]
 c00135e:	f003 0307 	and.w	r3, r3, #7
 c001362:	009b      	lsls	r3, r3, #2
 c001364:	fa02 f303 	lsl.w	r3, r2, r3
 c001368:	69fa      	ldr	r2, [r7, #28]
 c00136a:	4313      	orrs	r3, r2
 c00136c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 c00136e:	697b      	ldr	r3, [r7, #20]
 c001370:	08da      	lsrs	r2, r3, #3
 c001372:	687b      	ldr	r3, [r7, #4]
 c001374:	3208      	adds	r2, #8
 c001376:	69f9      	ldr	r1, [r7, #28]
 c001378:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 c00137c:	693b      	ldr	r3, [r7, #16]
 c00137e:	681b      	ldr	r3, [r3, #0]
 c001380:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 c001382:	69bb      	ldr	r3, [r7, #24]
 c001384:	005b      	lsls	r3, r3, #1
 c001386:	2203      	movs	r2, #3
 c001388:	fa02 f303 	lsl.w	r3, r2, r3
 c00138c:	43db      	mvns	r3, r3
 c00138e:	69fa      	ldr	r2, [r7, #28]
 c001390:	4013      	ands	r3, r2
 c001392:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 c001394:	683b      	ldr	r3, [r7, #0]
 c001396:	685b      	ldr	r3, [r3, #4]
 c001398:	f003 0203 	and.w	r2, r3, #3
 c00139c:	69bb      	ldr	r3, [r7, #24]
 c00139e:	005b      	lsls	r3, r3, #1
 c0013a0:	fa02 f303 	lsl.w	r3, r2, r3
 c0013a4:	69fa      	ldr	r2, [r7, #28]
 c0013a6:	4313      	orrs	r3, r2
 c0013a8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 c0013aa:	693b      	ldr	r3, [r7, #16]
 c0013ac:	69fa      	ldr	r2, [r7, #28]
 c0013ae:	601a      	str	r2, [r3, #0]
 c0013b0:	e01e      	b.n	c0013f0 <HAL_GPIO_Init+0x1c4>
 c0013b2:	bf00      	nop
 c0013b4:	56020000 	.word	0x56020000
 c0013b8:	0c001e84 	.word	0x0c001e84
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 c0013bc:	693b      	ldr	r3, [r7, #16]
 c0013be:	681b      	ldr	r3, [r3, #0]
 c0013c0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 c0013c2:	69bb      	ldr	r3, [r7, #24]
 c0013c4:	005b      	lsls	r3, r3, #1
 c0013c6:	2203      	movs	r2, #3
 c0013c8:	fa02 f303 	lsl.w	r3, r2, r3
 c0013cc:	43db      	mvns	r3, r3
 c0013ce:	69fa      	ldr	r2, [r7, #28]
 c0013d0:	4013      	ands	r3, r2
 c0013d2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 c0013d4:	683b      	ldr	r3, [r7, #0]
 c0013d6:	685b      	ldr	r3, [r3, #4]
 c0013d8:	f003 0203 	and.w	r2, r3, #3
 c0013dc:	69bb      	ldr	r3, [r7, #24]
 c0013de:	005b      	lsls	r3, r3, #1
 c0013e0:	fa02 f303 	lsl.w	r3, r2, r3
 c0013e4:	69fa      	ldr	r2, [r7, #28]
 c0013e6:	4313      	orrs	r3, r2
 c0013e8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 c0013ea:	693b      	ldr	r3, [r7, #16]
 c0013ec:	69fa      	ldr	r2, [r7, #28]
 c0013ee:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 c0013f0:	683b      	ldr	r3, [r7, #0]
 c0013f2:	685b      	ldr	r3, [r3, #4]
 c0013f4:	2b01      	cmp	r3, #1
 c0013f6:	d00b      	beq.n	c001410 <HAL_GPIO_Init+0x1e4>
 c0013f8:	683b      	ldr	r3, [r7, #0]
 c0013fa:	685b      	ldr	r3, [r3, #4]
 c0013fc:	2b02      	cmp	r3, #2
 c0013fe:	d007      	beq.n	c001410 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 c001400:	683b      	ldr	r3, [r7, #0]
 c001402:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 c001404:	2b11      	cmp	r3, #17
 c001406:	d003      	beq.n	c001410 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 c001408:	683b      	ldr	r3, [r7, #0]
 c00140a:	685b      	ldr	r3, [r3, #4]
 c00140c:	2b12      	cmp	r3, #18
 c00140e:	d130      	bne.n	c001472 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 c001410:	693b      	ldr	r3, [r7, #16]
 c001412:	689b      	ldr	r3, [r3, #8]
 c001414:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 c001416:	69bb      	ldr	r3, [r7, #24]
 c001418:	005b      	lsls	r3, r3, #1
 c00141a:	2203      	movs	r2, #3
 c00141c:	fa02 f303 	lsl.w	r3, r2, r3
 c001420:	43db      	mvns	r3, r3
 c001422:	69fa      	ldr	r2, [r7, #28]
 c001424:	4013      	ands	r3, r2
 c001426:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 c001428:	683b      	ldr	r3, [r7, #0]
 c00142a:	68da      	ldr	r2, [r3, #12]
 c00142c:	69bb      	ldr	r3, [r7, #24]
 c00142e:	005b      	lsls	r3, r3, #1
 c001430:	fa02 f303 	lsl.w	r3, r2, r3
 c001434:	69fa      	ldr	r2, [r7, #28]
 c001436:	4313      	orrs	r3, r2
 c001438:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 c00143a:	693b      	ldr	r3, [r7, #16]
 c00143c:	69fa      	ldr	r2, [r7, #28]
 c00143e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 c001440:	693b      	ldr	r3, [r7, #16]
 c001442:	685b      	ldr	r3, [r3, #4]
 c001444:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 c001446:	2201      	movs	r2, #1
 c001448:	69bb      	ldr	r3, [r7, #24]
 c00144a:	fa02 f303 	lsl.w	r3, r2, r3
 c00144e:	43db      	mvns	r3, r3
 c001450:	69fa      	ldr	r2, [r7, #28]
 c001452:	4013      	ands	r3, r2
 c001454:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 c001456:	683b      	ldr	r3, [r7, #0]
 c001458:	685b      	ldr	r3, [r3, #4]
 c00145a:	091b      	lsrs	r3, r3, #4
 c00145c:	f003 0201 	and.w	r2, r3, #1
 c001460:	69bb      	ldr	r3, [r7, #24]
 c001462:	fa02 f303 	lsl.w	r3, r2, r3
 c001466:	69fa      	ldr	r2, [r7, #28]
 c001468:	4313      	orrs	r3, r2
 c00146a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 c00146c:	693b      	ldr	r3, [r7, #16]
 c00146e:	69fa      	ldr	r2, [r7, #28]
 c001470:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 c001472:	683b      	ldr	r3, [r7, #0]
 c001474:	685b      	ldr	r3, [r3, #4]
 c001476:	2b03      	cmp	r3, #3
 c001478:	d017      	beq.n	c0014aa <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 c00147a:	693b      	ldr	r3, [r7, #16]
 c00147c:	68db      	ldr	r3, [r3, #12]
 c00147e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 c001480:	69bb      	ldr	r3, [r7, #24]
 c001482:	005b      	lsls	r3, r3, #1
 c001484:	2203      	movs	r2, #3
 c001486:	fa02 f303 	lsl.w	r3, r2, r3
 c00148a:	43db      	mvns	r3, r3
 c00148c:	69fa      	ldr	r2, [r7, #28]
 c00148e:	4013      	ands	r3, r2
 c001490:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 c001492:	683b      	ldr	r3, [r7, #0]
 c001494:	689a      	ldr	r2, [r3, #8]
 c001496:	69bb      	ldr	r3, [r7, #24]
 c001498:	005b      	lsls	r3, r3, #1
 c00149a:	fa02 f303 	lsl.w	r3, r2, r3
 c00149e:	69fa      	ldr	r2, [r7, #28]
 c0014a0:	4313      	orrs	r3, r2
 c0014a2:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 c0014a4:	693b      	ldr	r3, [r7, #16]
 c0014a6:	69fa      	ldr	r2, [r7, #28]
 c0014a8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 c0014aa:	683b      	ldr	r3, [r7, #0]
 c0014ac:	685b      	ldr	r3, [r3, #4]
 c0014ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c0014b2:	2b00      	cmp	r3, #0
 c0014b4:	d07c      	beq.n	c0015b0 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 c0014b6:	4a47      	ldr	r2, [pc, #284]	; (c0015d4 <HAL_GPIO_Init+0x3a8>)
 c0014b8:	697b      	ldr	r3, [r7, #20]
 c0014ba:	089b      	lsrs	r3, r3, #2
 c0014bc:	3318      	adds	r3, #24
 c0014be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c0014c2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 c0014c4:	697b      	ldr	r3, [r7, #20]
 c0014c6:	f003 0303 	and.w	r3, r3, #3
 c0014ca:	00db      	lsls	r3, r3, #3
 c0014cc:	220f      	movs	r2, #15
 c0014ce:	fa02 f303 	lsl.w	r3, r2, r3
 c0014d2:	43db      	mvns	r3, r3
 c0014d4:	69fa      	ldr	r2, [r7, #28]
 c0014d6:	4013      	ands	r3, r2
 c0014d8:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 c0014da:	687b      	ldr	r3, [r7, #4]
 c0014dc:	0a9a      	lsrs	r2, r3, #10
 c0014de:	4b3e      	ldr	r3, [pc, #248]	; (c0015d8 <HAL_GPIO_Init+0x3ac>)
 c0014e0:	4013      	ands	r3, r2
 c0014e2:	697a      	ldr	r2, [r7, #20]
 c0014e4:	f002 0203 	and.w	r2, r2, #3
 c0014e8:	00d2      	lsls	r2, r2, #3
 c0014ea:	4093      	lsls	r3, r2
 c0014ec:	69fa      	ldr	r2, [r7, #28]
 c0014ee:	4313      	orrs	r3, r2
 c0014f0:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 c0014f2:	4938      	ldr	r1, [pc, #224]	; (c0015d4 <HAL_GPIO_Init+0x3a8>)
 c0014f4:	697b      	ldr	r3, [r7, #20]
 c0014f6:	089b      	lsrs	r3, r3, #2
 c0014f8:	3318      	adds	r3, #24
 c0014fa:	69fa      	ldr	r2, [r7, #28]
 c0014fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 c001500:	4b34      	ldr	r3, [pc, #208]	; (c0015d4 <HAL_GPIO_Init+0x3a8>)
 c001502:	681b      	ldr	r3, [r3, #0]
 c001504:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 c001506:	68fb      	ldr	r3, [r7, #12]
 c001508:	43db      	mvns	r3, r3
 c00150a:	69fa      	ldr	r2, [r7, #28]
 c00150c:	4013      	ands	r3, r2
 c00150e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 c001510:	683b      	ldr	r3, [r7, #0]
 c001512:	685b      	ldr	r3, [r3, #4]
 c001514:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c001518:	2b00      	cmp	r3, #0
 c00151a:	d003      	beq.n	c001524 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 c00151c:	69fa      	ldr	r2, [r7, #28]
 c00151e:	68fb      	ldr	r3, [r7, #12]
 c001520:	4313      	orrs	r3, r2
 c001522:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 c001524:	4a2b      	ldr	r2, [pc, #172]	; (c0015d4 <HAL_GPIO_Init+0x3a8>)
 c001526:	69fb      	ldr	r3, [r7, #28]
 c001528:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 c00152a:	4b2a      	ldr	r3, [pc, #168]	; (c0015d4 <HAL_GPIO_Init+0x3a8>)
 c00152c:	685b      	ldr	r3, [r3, #4]
 c00152e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 c001530:	68fb      	ldr	r3, [r7, #12]
 c001532:	43db      	mvns	r3, r3
 c001534:	69fa      	ldr	r2, [r7, #28]
 c001536:	4013      	ands	r3, r2
 c001538:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 c00153a:	683b      	ldr	r3, [r7, #0]
 c00153c:	685b      	ldr	r3, [r3, #4]
 c00153e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 c001542:	2b00      	cmp	r3, #0
 c001544:	d003      	beq.n	c00154e <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 c001546:	69fa      	ldr	r2, [r7, #28]
 c001548:	68fb      	ldr	r3, [r7, #12]
 c00154a:	4313      	orrs	r3, r2
 c00154c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 c00154e:	4a21      	ldr	r2, [pc, #132]	; (c0015d4 <HAL_GPIO_Init+0x3a8>)
 c001550:	69fb      	ldr	r3, [r7, #28]
 c001552:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 c001554:	4b1f      	ldr	r3, [pc, #124]	; (c0015d4 <HAL_GPIO_Init+0x3a8>)
 c001556:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c00155a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 c00155c:	68fb      	ldr	r3, [r7, #12]
 c00155e:	43db      	mvns	r3, r3
 c001560:	69fa      	ldr	r2, [r7, #28]
 c001562:	4013      	ands	r3, r2
 c001564:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 c001566:	683b      	ldr	r3, [r7, #0]
 c001568:	685b      	ldr	r3, [r3, #4]
 c00156a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c00156e:	2b00      	cmp	r3, #0
 c001570:	d003      	beq.n	c00157a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 c001572:	69fa      	ldr	r2, [r7, #28]
 c001574:	68fb      	ldr	r3, [r7, #12]
 c001576:	4313      	orrs	r3, r2
 c001578:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 c00157a:	4a16      	ldr	r2, [pc, #88]	; (c0015d4 <HAL_GPIO_Init+0x3a8>)
 c00157c:	69fb      	ldr	r3, [r7, #28]
 c00157e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 c001582:	4b14      	ldr	r3, [pc, #80]	; (c0015d4 <HAL_GPIO_Init+0x3a8>)
 c001584:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c001588:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 c00158a:	68fb      	ldr	r3, [r7, #12]
 c00158c:	43db      	mvns	r3, r3
 c00158e:	69fa      	ldr	r2, [r7, #28]
 c001590:	4013      	ands	r3, r2
 c001592:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 c001594:	683b      	ldr	r3, [r7, #0]
 c001596:	685b      	ldr	r3, [r3, #4]
 c001598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c00159c:	2b00      	cmp	r3, #0
 c00159e:	d003      	beq.n	c0015a8 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 c0015a0:	69fa      	ldr	r2, [r7, #28]
 c0015a2:	68fb      	ldr	r3, [r7, #12]
 c0015a4:	4313      	orrs	r3, r2
 c0015a6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 c0015a8:	4a0a      	ldr	r2, [pc, #40]	; (c0015d4 <HAL_GPIO_Init+0x3a8>)
 c0015aa:	69fb      	ldr	r3, [r7, #28]
 c0015ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 c0015b0:	697b      	ldr	r3, [r7, #20]
 c0015b2:	3301      	adds	r3, #1
 c0015b4:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 c0015b6:	683b      	ldr	r3, [r7, #0]
 c0015b8:	681a      	ldr	r2, [r3, #0]
 c0015ba:	697b      	ldr	r3, [r7, #20]
 c0015bc:	fa22 f303 	lsr.w	r3, r2, r3
 c0015c0:	2b00      	cmp	r3, #0
 c0015c2:	f47f ae3d 	bne.w	c001240 <HAL_GPIO_Init+0x14>
  }
}
 c0015c6:	bf00      	nop
 c0015c8:	bf00      	nop
 c0015ca:	3724      	adds	r7, #36	; 0x24
 c0015cc:	46bd      	mov	sp, r7
 c0015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0015d2:	4770      	bx	lr
 c0015d4:	56022000 	.word	0x56022000
 c0015d8:	002b7f7f 	.word	0x002b7f7f

0c0015dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 c0015dc:	b480      	push	{r7}
 c0015de:	b083      	sub	sp, #12
 c0015e0:	af00      	add	r7, sp, #0
 c0015e2:	6078      	str	r0, [r7, #4]
 c0015e4:	460b      	mov	r3, r1
 c0015e6:	807b      	strh	r3, [r7, #2]
 c0015e8:	4613      	mov	r3, r2
 c0015ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 c0015ec:	787b      	ldrb	r3, [r7, #1]
 c0015ee:	2b00      	cmp	r3, #0
 c0015f0:	d003      	beq.n	c0015fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 c0015f2:	887a      	ldrh	r2, [r7, #2]
 c0015f4:	687b      	ldr	r3, [r7, #4]
 c0015f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 c0015f8:	e002      	b.n	c001600 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 c0015fa:	887a      	ldrh	r2, [r7, #2]
 c0015fc:	687b      	ldr	r3, [r7, #4]
 c0015fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 c001600:	bf00      	nop
 c001602:	370c      	adds	r7, #12
 c001604:	46bd      	mov	sp, r7
 c001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00160a:	4770      	bx	lr

0c00160c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 c00160c:	b480      	push	{r7}
 c00160e:	b085      	sub	sp, #20
 c001610:	af00      	add	r7, sp, #0
 c001612:	6078      	str	r0, [r7, #4]
 c001614:	460b      	mov	r3, r1
 c001616:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 c001618:	687b      	ldr	r3, [r7, #4]
 c00161a:	695b      	ldr	r3, [r3, #20]
 c00161c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 c00161e:	887a      	ldrh	r2, [r7, #2]
 c001620:	68fb      	ldr	r3, [r7, #12]
 c001622:	4013      	ands	r3, r2
 c001624:	041a      	lsls	r2, r3, #16
 c001626:	68fb      	ldr	r3, [r7, #12]
 c001628:	43d9      	mvns	r1, r3
 c00162a:	887b      	ldrh	r3, [r7, #2]
 c00162c:	400b      	ands	r3, r1
 c00162e:	431a      	orrs	r2, r3
 c001630:	687b      	ldr	r3, [r7, #4]
 c001632:	619a      	str	r2, [r3, #24]
}
 c001634:	bf00      	nop
 c001636:	3714      	adds	r7, #20
 c001638:	46bd      	mov	sp, r7
 c00163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00163e:	4770      	bx	lr

0c001640 <HAL_GPIO_ConfigPinAttributes>:
  * @param  GPIO_Pin: specifies the pin(s) to configure the secure attribute
  * @param  PinAttributes: specifies the pin(s) to be set in secure mode, other being set non secured.
  * @retval None
  */
void HAL_GPIO_ConfigPinAttributes(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint32_t PinAttributes)
{
 c001640:	b480      	push	{r7}
 c001642:	b089      	sub	sp, #36	; 0x24
 c001644:	af00      	add	r7, sp, #0
 c001646:	60f8      	str	r0, [r7, #12]
 c001648:	460b      	mov	r3, r1
 c00164a:	607a      	str	r2, [r7, #4]
 c00164c:	817b      	strh	r3, [r7, #10]
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 c00164e:	2300      	movs	r3, #0
 c001650:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ATTRIBUTES(PinAttributes));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 c001652:	68fb      	ldr	r3, [r7, #12]
 c001654:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 c001656:	e02c      	b.n	c0016b2 <HAL_GPIO_ConfigPinAttributes+0x72>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position);
 c001658:	897a      	ldrh	r2, [r7, #10]
 c00165a:	2101      	movs	r1, #1
 c00165c:	69bb      	ldr	r3, [r7, #24]
 c00165e:	fa01 f303 	lsl.w	r3, r1, r3
 c001662:	4013      	ands	r3, r2
 c001664:	613b      	str	r3, [r7, #16]

    /* Save pin position */
    pin_position = position;
 c001666:	69bb      	ldr	r3, [r7, #24]
 c001668:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 c00166a:	693b      	ldr	r3, [r7, #16]
 c00166c:	2b00      	cmp	r3, #0
 c00166e:	d01d      	beq.n	c0016ac <HAL_GPIO_ConfigPinAttributes+0x6c>
    {
      /* In case of LPGPIO Port */
      if (GPIOx == LPGPIO1)
 c001670:	68fb      	ldr	r3, [r7, #12]
 c001672:	4a16      	ldr	r2, [pc, #88]	; (c0016cc <HAL_GPIO_ConfigPinAttributes+0x8c>)
 c001674:	4293      	cmp	r3, r2
 c001676:	d10a      	bne.n	c00168e <HAL_GPIO_ConfigPinAttributes+0x4e>
      {
        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 c001678:	4a15      	ldr	r2, [pc, #84]	; (c0016d0 <HAL_GPIO_ConfigPinAttributes+0x90>)
 c00167a:	69bb      	ldr	r3, [r7, #24]
 c00167c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 c001680:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 c001682:	4a13      	ldr	r2, [pc, #76]	; (c0016d0 <HAL_GPIO_ConfigPinAttributes+0x90>)
 c001684:	69bb      	ldr	r3, [r7, #24]
 c001686:	00db      	lsls	r3, r3, #3
 c001688:	4413      	add	r3, r2
 c00168a:	685b      	ldr	r3, [r3, #4]
 c00168c:	61fb      	str	r3, [r7, #28]
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
      }

      /* Configure the IO secure attribute */
      MODIFY_REG(p_gpio->SECCFGR, (GPIO_SECCFGR_SEC0 << pin_position), (PinAttributes << pin_position));
 c00168e:	697b      	ldr	r3, [r7, #20]
 c001690:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 c001692:	2101      	movs	r1, #1
 c001694:	69fb      	ldr	r3, [r7, #28]
 c001696:	fa01 f303 	lsl.w	r3, r1, r3
 c00169a:	43db      	mvns	r3, r3
 c00169c:	401a      	ands	r2, r3
 c00169e:	6879      	ldr	r1, [r7, #4]
 c0016a0:	69fb      	ldr	r3, [r7, #28]
 c0016a2:	fa01 f303 	lsl.w	r3, r1, r3
 c0016a6:	431a      	orrs	r2, r3
 c0016a8:	697b      	ldr	r3, [r7, #20]
 c0016aa:	631a      	str	r2, [r3, #48]	; 0x30
    }
    position++;
 c0016ac:	69bb      	ldr	r3, [r7, #24]
 c0016ae:	3301      	adds	r3, #1
 c0016b0:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 c0016b2:	897a      	ldrh	r2, [r7, #10]
 c0016b4:	69bb      	ldr	r3, [r7, #24]
 c0016b6:	fa42 f303 	asr.w	r3, r2, r3
 c0016ba:	2b00      	cmp	r3, #0
 c0016bc:	d1cc      	bne.n	c001658 <HAL_GPIO_ConfigPinAttributes+0x18>
  }
}
 c0016be:	bf00      	nop
 c0016c0:	bf00      	nop
 c0016c2:	3724      	adds	r7, #36	; 0x24
 c0016c4:	46bd      	mov	sp, r7
 c0016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0016ca:	4770      	bx	lr
 c0016cc:	56020000 	.word	0x56020000
 c0016d0:	0c001e84 	.word	0x0c001e84

0c0016d4 <HAL_GTZC_MPCBB_ConfigMem>:
  *         The structure description is available in @ref GTZC_Exported_Types.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_MPCBB_ConfigMem(uint32_t MemBaseAddress,
                                           const MPCBB_ConfigTypeDef *pMPCBB_desc)
{
 c0016d4:	b480      	push	{r7}
 c0016d6:	b089      	sub	sp, #36	; 0x24
 c0016d8:	af00      	add	r7, sp, #0
 c0016da:	6078      	str	r0, [r7, #4]
 c0016dc:	6039      	str	r1, [r7, #0]
  uint32_t mem_size;
  uint32_t size_in_superblocks;
  uint32_t i;

  /* check entry parameters */
  if ((!(IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c0016de:	687b      	ldr	r3, [r7, #4]
 c0016e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c0016e4:	d01b      	beq.n	c00171e <HAL_GTZC_MPCBB_ConfigMem+0x4a>
 c0016e6:	687b      	ldr	r3, [r7, #4]
 c0016e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c0016ec:	d017      	beq.n	c00171e <HAL_GTZC_MPCBB_ConfigMem+0x4a>
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress))
 c0016ee:	687b      	ldr	r3, [r7, #4]
 c0016f0:	4a5c      	ldr	r2, [pc, #368]	; (c001864 <HAL_GTZC_MPCBB_ConfigMem+0x190>)
 c0016f2:	4293      	cmp	r3, r2
 c0016f4:	d013      	beq.n	c00171e <HAL_GTZC_MPCBB_ConfigMem+0x4a>
 c0016f6:	687b      	ldr	r3, [r7, #4]
 c0016f8:	4a5b      	ldr	r2, [pc, #364]	; (c001868 <HAL_GTZC_MPCBB_ConfigMem+0x194>)
 c0016fa:	4293      	cmp	r3, r2
 c0016fc:	d00f      	beq.n	c00171e <HAL_GTZC_MPCBB_ConfigMem+0x4a>
#if defined (SRAM3_BASE)
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM3, MemBaseAddress))
 c0016fe:	687b      	ldr	r3, [r7, #4]
 c001700:	4a5a      	ldr	r2, [pc, #360]	; (c00186c <HAL_GTZC_MPCBB_ConfigMem+0x198>)
 c001702:	4293      	cmp	r3, r2
 c001704:	d00b      	beq.n	c00171e <HAL_GTZC_MPCBB_ConfigMem+0x4a>
 c001706:	687b      	ldr	r3, [r7, #4]
 c001708:	4a59      	ldr	r2, [pc, #356]	; (c001870 <HAL_GTZC_MPCBB_ConfigMem+0x19c>)
 c00170a:	4293      	cmp	r3, r2
 c00170c:	d007      	beq.n	c00171e <HAL_GTZC_MPCBB_ConfigMem+0x4a>
#endif /* SRAM3_BASE */
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM4, MemBaseAddress))
 c00170e:	687b      	ldr	r3, [r7, #4]
 c001710:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 c001714:	d003      	beq.n	c00171e <HAL_GTZC_MPCBB_ConfigMem+0x4a>
 c001716:	687b      	ldr	r3, [r7, #4]
 c001718:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
 c00171c:	d111      	bne.n	c001742 <HAL_GTZC_MPCBB_ConfigMem+0x6e>
#endif /* SRAM5_BASE */
#if defined (SRAM6_BASE)
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM6, MemBaseAddress))
#endif /* SRAM6_BASE */
      )
      || ((pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_ENABLE)
 c00171e:	683b      	ldr	r3, [r7, #0]
 c001720:	681b      	ldr	r3, [r3, #0]
 c001722:	2b00      	cmp	r3, #0
 c001724:	d004      	beq.n	c001730 <HAL_GTZC_MPCBB_ConfigMem+0x5c>
          && (pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_DISABLE))
 c001726:	683b      	ldr	r3, [r7, #0]
 c001728:	681b      	ldr	r3, [r3, #0]
 c00172a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 c00172e:	d108      	bne.n	c001742 <HAL_GTZC_MPCBB_ConfigMem+0x6e>
      || ((pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_NOT_INVERTED)
 c001730:	683b      	ldr	r3, [r7, #0]
 c001732:	685b      	ldr	r3, [r3, #4]
 c001734:	2b00      	cmp	r3, #0
 c001736:	d006      	beq.n	c001746 <HAL_GTZC_MPCBB_ConfigMem+0x72>
          && (pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_INVERTED)))
 c001738:	683b      	ldr	r3, [r7, #0]
 c00173a:	685b      	ldr	r3, [r3, #4]
 c00173c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 c001740:	d001      	beq.n	c001746 <HAL_GTZC_MPCBB_ConfigMem+0x72>
  {
    return HAL_ERROR;
 c001742:	2301      	movs	r3, #1
 c001744:	e088      	b.n	c001858 <HAL_GTZC_MPCBB_ConfigMem+0x184>
  }

  if (IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c001746:	687b      	ldr	r3, [r7, #4]
 c001748:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c00174c:	d003      	beq.n	c001756 <HAL_GTZC_MPCBB_ConfigMem+0x82>
 c00174e:	687b      	ldr	r3, [r7, #4]
 c001750:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c001754:	d105      	bne.n	c001762 <HAL_GTZC_MPCBB_ConfigMem+0x8e>
  {
    mpcbb_ptr = GTZC_MPCBB1;
 c001756:	4b47      	ldr	r3, [pc, #284]	; (c001874 <HAL_GTZC_MPCBB_ConfigMem+0x1a0>)
 c001758:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM1);
 c00175a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 c00175e:	61bb      	str	r3, [r7, #24]
 c001760:	e02b      	b.n	c0017ba <HAL_GTZC_MPCBB_ConfigMem+0xe6>
  }
  else if (IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress))
 c001762:	687b      	ldr	r3, [r7, #4]
 c001764:	4a3f      	ldr	r2, [pc, #252]	; (c001864 <HAL_GTZC_MPCBB_ConfigMem+0x190>)
 c001766:	4293      	cmp	r3, r2
 c001768:	d003      	beq.n	c001772 <HAL_GTZC_MPCBB_ConfigMem+0x9e>
 c00176a:	687b      	ldr	r3, [r7, #4]
 c00176c:	4a3e      	ldr	r2, [pc, #248]	; (c001868 <HAL_GTZC_MPCBB_ConfigMem+0x194>)
 c00176e:	4293      	cmp	r3, r2
 c001770:	d105      	bne.n	c00177e <HAL_GTZC_MPCBB_ConfigMem+0xaa>
  {
    mpcbb_ptr = GTZC_MPCBB2;
 c001772:	4b41      	ldr	r3, [pc, #260]	; (c001878 <HAL_GTZC_MPCBB_ConfigMem+0x1a4>)
 c001774:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM2);
 c001776:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 c00177a:	61bb      	str	r3, [r7, #24]
 c00177c:	e01d      	b.n	c0017ba <HAL_GTZC_MPCBB_ConfigMem+0xe6>
  }
#if defined (SRAM3_BASE)
  else if (IS_GTZC_BASE_ADDRESS(SRAM3, MemBaseAddress))
 c00177e:	687b      	ldr	r3, [r7, #4]
 c001780:	4a3a      	ldr	r2, [pc, #232]	; (c00186c <HAL_GTZC_MPCBB_ConfigMem+0x198>)
 c001782:	4293      	cmp	r3, r2
 c001784:	d003      	beq.n	c00178e <HAL_GTZC_MPCBB_ConfigMem+0xba>
 c001786:	687b      	ldr	r3, [r7, #4]
 c001788:	4a39      	ldr	r2, [pc, #228]	; (c001870 <HAL_GTZC_MPCBB_ConfigMem+0x19c>)
 c00178a:	4293      	cmp	r3, r2
 c00178c:	d105      	bne.n	c00179a <HAL_GTZC_MPCBB_ConfigMem+0xc6>
  {
    mpcbb_ptr = GTZC_MPCBB3;
 c00178e:	4b3b      	ldr	r3, [pc, #236]	; (c00187c <HAL_GTZC_MPCBB_ConfigMem+0x1a8>)
 c001790:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM3);
 c001792:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 c001796:	61bb      	str	r3, [r7, #24]
 c001798:	e00f      	b.n	c0017ba <HAL_GTZC_MPCBB_ConfigMem+0xe6>
  }
#endif /* SRAM3_BASE */
  else if (IS_GTZC_BASE_ADDRESS(SRAM4, MemBaseAddress))
 c00179a:	687b      	ldr	r3, [r7, #4]
 c00179c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 c0017a0:	d003      	beq.n	c0017aa <HAL_GTZC_MPCBB_ConfigMem+0xd6>
 c0017a2:	687b      	ldr	r3, [r7, #4]
 c0017a4:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
 c0017a8:	d105      	bne.n	c0017b6 <HAL_GTZC_MPCBB_ConfigMem+0xe2>
  {
    mpcbb_ptr = GTZC_MPCBB4;
 c0017aa:	4b35      	ldr	r3, [pc, #212]	; (c001880 <HAL_GTZC_MPCBB_ConfigMem+0x1ac>)
 c0017ac:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM4);
 c0017ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 c0017b2:	61bb      	str	r3, [r7, #24]
 c0017b4:	e001      	b.n	c0017ba <HAL_GTZC_MPCBB_ConfigMem+0xe6>
    mem_size = GTZC_MEM_SIZE(SRAM6);
  }
#endif /* SRAM6_BASE */
  else
  {
    return HAL_ERROR;
 c0017b6:	2301      	movs	r3, #1
 c0017b8:	e04e      	b.n	c001858 <HAL_GTZC_MPCBB_ConfigMem+0x184>
  }

  /* translate mem_size in number of super-blocks  */
  size_in_superblocks = (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE);
 c0017ba:	69bb      	ldr	r3, [r7, #24]
 c0017bc:	0b9b      	lsrs	r3, r3, #14
 c0017be:	613b      	str	r3, [r7, #16]

  /* write PRIVCFGR register information */
  for (i = 0U; i < size_in_superblocks; i++)
 c0017c0:	2300      	movs	r3, #0
 c0017c2:	617b      	str	r3, [r7, #20]
 c0017c4:	e00c      	b.n	c0017e0 <HAL_GTZC_MPCBB_ConfigMem+0x10c>
  {
    WRITE_REG(mpcbb_ptr->PRIVCFGR[i],
 c0017c6:	683b      	ldr	r3, [r7, #0]
 c0017c8:	697a      	ldr	r2, [r7, #20]
 c0017ca:	3222      	adds	r2, #34	; 0x22
 c0017cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 c0017d0:	69fb      	ldr	r3, [r7, #28]
 c0017d2:	697a      	ldr	r2, [r7, #20]
 c0017d4:	3280      	adds	r2, #128	; 0x80
 c0017d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c0017da:	697b      	ldr	r3, [r7, #20]
 c0017dc:	3301      	adds	r3, #1
 c0017de:	617b      	str	r3, [r7, #20]
 c0017e0:	697a      	ldr	r2, [r7, #20]
 c0017e2:	693b      	ldr	r3, [r7, #16]
 c0017e4:	429a      	cmp	r2, r3
 c0017e6:	d3ee      	bcc.n	c0017c6 <HAL_GTZC_MPCBB_ConfigMem+0xf2>
#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t size_mask;
  uint32_t reg_value;

  /* write SECCFGR register information */
  for (i = 0U; i < size_in_superblocks; i++)
 c0017e8:	2300      	movs	r3, #0
 c0017ea:	617b      	str	r3, [r7, #20]
 c0017ec:	e00c      	b.n	c001808 <HAL_GTZC_MPCBB_ConfigMem+0x134>
  {
    WRITE_REG(mpcbb_ptr->SECCFGR[i],
 c0017ee:	683b      	ldr	r3, [r7, #0]
 c0017f0:	697a      	ldr	r2, [r7, #20]
 c0017f2:	3202      	adds	r2, #2
 c0017f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 c0017f8:	69fb      	ldr	r3, [r7, #28]
 c0017fa:	697a      	ldr	r2, [r7, #20]
 c0017fc:	3240      	adds	r2, #64	; 0x40
 c0017fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c001802:	697b      	ldr	r3, [r7, #20]
 c001804:	3301      	adds	r3, #1
 c001806:	617b      	str	r3, [r7, #20]
 c001808:	697a      	ldr	r2, [r7, #20]
 c00180a:	693b      	ldr	r3, [r7, #16]
 c00180c:	429a      	cmp	r2, r3
 c00180e:	d3ee      	bcc.n	c0017ee <HAL_GTZC_MPCBB_ConfigMem+0x11a>
    MODIFY_REG(mpcbb_ptr->CFGLOCKR2, 0x000FFFFFUL, pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[1]);
  }
  else
#endif /* GTZC_MPCBB_CFGLOCKR2_SPLCK32_Msk */
  {
    size_mask = (1UL << (size_in_superblocks & 0x1FU)) - 1U;
 c001810:	693b      	ldr	r3, [r7, #16]
 c001812:	f003 031f 	and.w	r3, r3, #31
 c001816:	2201      	movs	r2, #1
 c001818:	fa02 f303 	lsl.w	r3, r2, r3
 c00181c:	3b01      	subs	r3, #1
 c00181e:	60fb      	str	r3, [r7, #12]
  }
  /* limitation: code not portable with memory > 512K */
  MODIFY_REG(mpcbb_ptr->CFGLOCKR1, size_mask, pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[0]);
 c001820:	69fb      	ldr	r3, [r7, #28]
 c001822:	691a      	ldr	r2, [r3, #16]
 c001824:	68fb      	ldr	r3, [r7, #12]
 c001826:	43db      	mvns	r3, r3
 c001828:	401a      	ands	r2, r3
 c00182a:	683b      	ldr	r3, [r7, #0]
 c00182c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 c001830:	431a      	orrs	r2, r3
 c001832:	69fb      	ldr	r3, [r7, #28]
 c001834:	611a      	str	r2, [r3, #16]

  /* write InvertSecureState and SecureRWIllegalMode properties */
  reg_value = pMPCBB_desc->InvertSecureState;
 c001836:	683b      	ldr	r3, [r7, #0]
 c001838:	685b      	ldr	r3, [r3, #4]
 c00183a:	60bb      	str	r3, [r7, #8]
  reg_value |= pMPCBB_desc->SecureRWIllegalMode;
 c00183c:	683b      	ldr	r3, [r7, #0]
 c00183e:	681b      	ldr	r3, [r3, #0]
 c001840:	68ba      	ldr	r2, [r7, #8]
 c001842:	4313      	orrs	r3, r2
 c001844:	60bb      	str	r3, [r7, #8]

  /* write configuration and lock register information */
  MODIFY_REG(mpcbb_ptr->CR,
 c001846:	69fb      	ldr	r3, [r7, #28]
 c001848:	681b      	ldr	r3, [r3, #0]
 c00184a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 c00184e:	68bb      	ldr	r3, [r7, #8]
 c001850:	431a      	orrs	r2, r3
 c001852:	69fb      	ldr	r3, [r7, #28]
 c001854:	601a      	str	r2, [r3, #0]
             GTZC_MPCBB_CR_INVSECSTATE_Msk | GTZC_MPCBB_CR_SRWILADIS_Msk, reg_value);
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 c001856:	2300      	movs	r3, #0
}
 c001858:	4618      	mov	r0, r3
 c00185a:	3724      	adds	r7, #36	; 0x24
 c00185c:	46bd      	mov	sp, r7
 c00185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001862:	4770      	bx	lr
 c001864:	20030000 	.word	0x20030000
 c001868:	30030000 	.word	0x30030000
 c00186c:	20040000 	.word	0x20040000
 c001870:	30040000 	.word	0x30040000
 c001874:	50032c00 	.word	0x50032c00
 c001878:	50033000 	.word	0x50033000
 c00187c:	50033400 	.word	0x50033400
 c001880:	56023800 	.word	0x56023800

0c001884 <HAL_GTZC_IRQHandler>:
/**
  * @brief  This function handles GTZC TZIC interrupt request.
  * @retval None.
  */
void HAL_GTZC_IRQHandler(void)
{
 c001884:	b580      	push	{r7, lr}
 c001886:	b084      	sub	sp, #16
 c001888:	af00      	add	r7, sp, #0
  /*********************************************************************/
  /******************************  TZIC1  ******************************/
  /*********************************************************************/

  /* Get current IT Flags and IT sources value on 1st register of TZIC1 */
  ier_itsources = READ_REG(GTZC_TZIC1_S->IER1);
 c00188a:	4b7e      	ldr	r3, [pc, #504]	; (c001a84 <HAL_GTZC_IRQHandler+0x200>)
 c00188c:	681b      	ldr	r3, [r3, #0]
 c00188e:	60bb      	str	r3, [r7, #8]
  sr_flags      = READ_REG(GTZC_TZIC1_S->SR1);
 c001890:	4b7c      	ldr	r3, [pc, #496]	; (c001a84 <HAL_GTZC_IRQHandler+0x200>)
 c001892:	691b      	ldr	r3, [r3, #16]
 c001894:	607b      	str	r3, [r7, #4]

  /* Get Mask interrupt and then clear them */
  flag = ier_itsources & sr_flags;
 c001896:	68ba      	ldr	r2, [r7, #8]
 c001898:	687b      	ldr	r3, [r7, #4]
 c00189a:	4013      	ands	r3, r2
 c00189c:	603b      	str	r3, [r7, #0]
  if (flag != 0U)
 c00189e:	683b      	ldr	r3, [r7, #0]
 c0018a0:	2b00      	cmp	r3, #0
 c0018a2:	d019      	beq.n	c0018d8 <HAL_GTZC_IRQHandler+0x54>
  {
    WRITE_REG(GTZC_TZIC1_S->FCR1, flag);
 c0018a4:	4a77      	ldr	r2, [pc, #476]	; (c001a84 <HAL_GTZC_IRQHandler+0x200>)
 c0018a6:	683b      	ldr	r3, [r7, #0]
 c0018a8:	6213      	str	r3, [r2, #32]

    /* Loop on flag to check, which ones have been raised */
    position = 0U;
 c0018aa:	2300      	movs	r3, #0
 c0018ac:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c0018ae:	e00d      	b.n	c0018cc <HAL_GTZC_IRQHandler+0x48>
    {
      if ((flag & (1UL << position)) != 0U)
 c0018b0:	683a      	ldr	r2, [r7, #0]
 c0018b2:	68fb      	ldr	r3, [r7, #12]
 c0018b4:	fa22 f303 	lsr.w	r3, r2, r3
 c0018b8:	f003 0301 	and.w	r3, r3, #1
 c0018bc:	2b00      	cmp	r3, #0
 c0018be:	d002      	beq.n	c0018c6 <HAL_GTZC_IRQHandler+0x42>
      {
        HAL_GTZC_TZIC_Callback(GTZC1_PERIPH_REG1 | position);
 c0018c0:	68f8      	ldr	r0, [r7, #12]
 c0018c2:	f000 f8e3 	bl	c001a8c <HAL_GTZC_TZIC_Callback>
      }

      /* Position bit to be updated */
      position++;
 c0018c6:	68fb      	ldr	r3, [r7, #12]
 c0018c8:	3301      	adds	r3, #1
 c0018ca:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c0018cc:	683a      	ldr	r2, [r7, #0]
 c0018ce:	68fb      	ldr	r3, [r7, #12]
 c0018d0:	fa22 f303 	lsr.w	r3, r2, r3
 c0018d4:	2b00      	cmp	r3, #0
 c0018d6:	d1eb      	bne.n	c0018b0 <HAL_GTZC_IRQHandler+0x2c>
    }
  }

  /* Get current IT Flags and IT sources value on 2nd register of TZIC1 */
  ier_itsources = READ_REG(GTZC_TZIC1_S->IER2);
 c0018d8:	4b6a      	ldr	r3, [pc, #424]	; (c001a84 <HAL_GTZC_IRQHandler+0x200>)
 c0018da:	685b      	ldr	r3, [r3, #4]
 c0018dc:	60bb      	str	r3, [r7, #8]
  sr_flags      = READ_REG(GTZC_TZIC1_S->SR2);
 c0018de:	4b69      	ldr	r3, [pc, #420]	; (c001a84 <HAL_GTZC_IRQHandler+0x200>)
 c0018e0:	695b      	ldr	r3, [r3, #20]
 c0018e2:	607b      	str	r3, [r7, #4]

  /* Get Mask interrupt and then clear them */
  flag = ier_itsources & sr_flags;
 c0018e4:	68ba      	ldr	r2, [r7, #8]
 c0018e6:	687b      	ldr	r3, [r7, #4]
 c0018e8:	4013      	ands	r3, r2
 c0018ea:	603b      	str	r3, [r7, #0]
  if (flag != 0U)
 c0018ec:	683b      	ldr	r3, [r7, #0]
 c0018ee:	2b00      	cmp	r3, #0
 c0018f0:	d01c      	beq.n	c00192c <HAL_GTZC_IRQHandler+0xa8>
  {
    WRITE_REG(GTZC_TZIC1_S->FCR2, flag);
 c0018f2:	4a64      	ldr	r2, [pc, #400]	; (c001a84 <HAL_GTZC_IRQHandler+0x200>)
 c0018f4:	683b      	ldr	r3, [r7, #0]
 c0018f6:	6253      	str	r3, [r2, #36]	; 0x24

    /* Loop on flag to check, which ones have been raised */
    position = 0U;
 c0018f8:	2300      	movs	r3, #0
 c0018fa:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c0018fc:	e010      	b.n	c001920 <HAL_GTZC_IRQHandler+0x9c>
    {
      if ((flag & (1UL << position)) != 0U)
 c0018fe:	683a      	ldr	r2, [r7, #0]
 c001900:	68fb      	ldr	r3, [r7, #12]
 c001902:	fa22 f303 	lsr.w	r3, r2, r3
 c001906:	f003 0301 	and.w	r3, r3, #1
 c00190a:	2b00      	cmp	r3, #0
 c00190c:	d005      	beq.n	c00191a <HAL_GTZC_IRQHandler+0x96>
      {
        HAL_GTZC_TZIC_Callback(GTZC1_PERIPH_REG2 | position);
 c00190e:	68fb      	ldr	r3, [r7, #12]
 c001910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c001914:	4618      	mov	r0, r3
 c001916:	f000 f8b9 	bl	c001a8c <HAL_GTZC_TZIC_Callback>
      }

      /* Position bit to be updated */
      position++;
 c00191a:	68fb      	ldr	r3, [r7, #12]
 c00191c:	3301      	adds	r3, #1
 c00191e:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c001920:	683a      	ldr	r2, [r7, #0]
 c001922:	68fb      	ldr	r3, [r7, #12]
 c001924:	fa22 f303 	lsr.w	r3, r2, r3
 c001928:	2b00      	cmp	r3, #0
 c00192a:	d1e8      	bne.n	c0018fe <HAL_GTZC_IRQHandler+0x7a>
    }
  }

  /* Get current IT Flags and IT sources value on 3rd register of TZIC1 */
  ier_itsources = READ_REG(GTZC_TZIC1_S->IER3);
 c00192c:	4b55      	ldr	r3, [pc, #340]	; (c001a84 <HAL_GTZC_IRQHandler+0x200>)
 c00192e:	689b      	ldr	r3, [r3, #8]
 c001930:	60bb      	str	r3, [r7, #8]
  sr_flags      = READ_REG(GTZC_TZIC1_S->SR3);
 c001932:	4b54      	ldr	r3, [pc, #336]	; (c001a84 <HAL_GTZC_IRQHandler+0x200>)
 c001934:	699b      	ldr	r3, [r3, #24]
 c001936:	607b      	str	r3, [r7, #4]

  /* Get Mask interrupt and then clear them */
  flag = ier_itsources & sr_flags;
 c001938:	68ba      	ldr	r2, [r7, #8]
 c00193a:	687b      	ldr	r3, [r7, #4]
 c00193c:	4013      	ands	r3, r2
 c00193e:	603b      	str	r3, [r7, #0]
  if (flag != 0U)
 c001940:	683b      	ldr	r3, [r7, #0]
 c001942:	2b00      	cmp	r3, #0
 c001944:	d01c      	beq.n	c001980 <HAL_GTZC_IRQHandler+0xfc>
  {
    WRITE_REG(GTZC_TZIC1_S->FCR3, flag);
 c001946:	4a4f      	ldr	r2, [pc, #316]	; (c001a84 <HAL_GTZC_IRQHandler+0x200>)
 c001948:	683b      	ldr	r3, [r7, #0]
 c00194a:	6293      	str	r3, [r2, #40]	; 0x28

    /* Loop on flag to check, which ones have been raised */
    position = 0U;
 c00194c:	2300      	movs	r3, #0
 c00194e:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c001950:	e010      	b.n	c001974 <HAL_GTZC_IRQHandler+0xf0>
    {
      if ((flag & (1UL << position)) != 0U)
 c001952:	683a      	ldr	r2, [r7, #0]
 c001954:	68fb      	ldr	r3, [r7, #12]
 c001956:	fa22 f303 	lsr.w	r3, r2, r3
 c00195a:	f003 0301 	and.w	r3, r3, #1
 c00195e:	2b00      	cmp	r3, #0
 c001960:	d005      	beq.n	c00196e <HAL_GTZC_IRQHandler+0xea>
      {
        HAL_GTZC_TZIC_Callback(GTZC1_PERIPH_REG3 | position);
 c001962:	68fb      	ldr	r3, [r7, #12]
 c001964:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 c001968:	4618      	mov	r0, r3
 c00196a:	f000 f88f 	bl	c001a8c <HAL_GTZC_TZIC_Callback>
      }

      /* Position bit to be updated */
      position++;
 c00196e:	68fb      	ldr	r3, [r7, #12]
 c001970:	3301      	adds	r3, #1
 c001972:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c001974:	683a      	ldr	r2, [r7, #0]
 c001976:	68fb      	ldr	r3, [r7, #12]
 c001978:	fa22 f303 	lsr.w	r3, r2, r3
 c00197c:	2b00      	cmp	r3, #0
 c00197e:	d1e8      	bne.n	c001952 <HAL_GTZC_IRQHandler+0xce>
    }
  }

  /* Get current IT Flags and IT sources value on 4th register of TZIC1 */
  ier_itsources = READ_REG(GTZC_TZIC1_S->IER4);
 c001980:	4b40      	ldr	r3, [pc, #256]	; (c001a84 <HAL_GTZC_IRQHandler+0x200>)
 c001982:	68db      	ldr	r3, [r3, #12]
 c001984:	60bb      	str	r3, [r7, #8]
  sr_flags      = READ_REG(GTZC_TZIC1_S->SR4);
 c001986:	4b3f      	ldr	r3, [pc, #252]	; (c001a84 <HAL_GTZC_IRQHandler+0x200>)
 c001988:	69db      	ldr	r3, [r3, #28]
 c00198a:	607b      	str	r3, [r7, #4]

  /* Get Mask interrupt and then clear them */
  flag = ier_itsources & sr_flags;
 c00198c:	68ba      	ldr	r2, [r7, #8]
 c00198e:	687b      	ldr	r3, [r7, #4]
 c001990:	4013      	ands	r3, r2
 c001992:	603b      	str	r3, [r7, #0]
  if (flag != 0U)
 c001994:	683b      	ldr	r3, [r7, #0]
 c001996:	2b00      	cmp	r3, #0
 c001998:	d01c      	beq.n	c0019d4 <HAL_GTZC_IRQHandler+0x150>
  {
    WRITE_REG(GTZC_TZIC1_S->FCR4, flag);
 c00199a:	4a3a      	ldr	r2, [pc, #232]	; (c001a84 <HAL_GTZC_IRQHandler+0x200>)
 c00199c:	683b      	ldr	r3, [r7, #0]
 c00199e:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Loop on flag to check, which ones have been raised */
    position = 0U;
 c0019a0:	2300      	movs	r3, #0
 c0019a2:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c0019a4:	e010      	b.n	c0019c8 <HAL_GTZC_IRQHandler+0x144>
    {
      if ((flag & (1UL << position)) != 0U)
 c0019a6:	683a      	ldr	r2, [r7, #0]
 c0019a8:	68fb      	ldr	r3, [r7, #12]
 c0019aa:	fa22 f303 	lsr.w	r3, r2, r3
 c0019ae:	f003 0301 	and.w	r3, r3, #1
 c0019b2:	2b00      	cmp	r3, #0
 c0019b4:	d005      	beq.n	c0019c2 <HAL_GTZC_IRQHandler+0x13e>
      {
        HAL_GTZC_TZIC_Callback(GTZC1_PERIPH_REG4 | position);
 c0019b6:	68fb      	ldr	r3, [r7, #12]
 c0019b8:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 c0019bc:	4618      	mov	r0, r3
 c0019be:	f000 f865 	bl	c001a8c <HAL_GTZC_TZIC_Callback>
      }

      /* Position bit to be updated */
      position++;
 c0019c2:	68fb      	ldr	r3, [r7, #12]
 c0019c4:	3301      	adds	r3, #1
 c0019c6:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c0019c8:	683a      	ldr	r2, [r7, #0]
 c0019ca:	68fb      	ldr	r3, [r7, #12]
 c0019cc:	fa22 f303 	lsr.w	r3, r2, r3
 c0019d0:	2b00      	cmp	r3, #0
 c0019d2:	d1e8      	bne.n	c0019a6 <HAL_GTZC_IRQHandler+0x122>
  /*********************************************************************/
  /******************************  TZIC2  ******************************/
  /*********************************************************************/

  /* Get current IT Flags and IT sources value on 1st register of TZIC2 */
  ier_itsources = READ_REG(GTZC_TZIC2_S->IER1);
 c0019d4:	4b2c      	ldr	r3, [pc, #176]	; (c001a88 <HAL_GTZC_IRQHandler+0x204>)
 c0019d6:	681b      	ldr	r3, [r3, #0]
 c0019d8:	60bb      	str	r3, [r7, #8]
  sr_flags      = READ_REG(GTZC_TZIC2_S->SR1);
 c0019da:	4b2b      	ldr	r3, [pc, #172]	; (c001a88 <HAL_GTZC_IRQHandler+0x204>)
 c0019dc:	691b      	ldr	r3, [r3, #16]
 c0019de:	607b      	str	r3, [r7, #4]

  /* Get Mask interrupt and then clear them */
  flag = ier_itsources & sr_flags;
 c0019e0:	68ba      	ldr	r2, [r7, #8]
 c0019e2:	687b      	ldr	r3, [r7, #4]
 c0019e4:	4013      	ands	r3, r2
 c0019e6:	603b      	str	r3, [r7, #0]
  if (flag != 0U)
 c0019e8:	683b      	ldr	r3, [r7, #0]
 c0019ea:	2b00      	cmp	r3, #0
 c0019ec:	d01c      	beq.n	c001a28 <HAL_GTZC_IRQHandler+0x1a4>
  {
    WRITE_REG(GTZC_TZIC2_S->FCR1, flag);
 c0019ee:	4a26      	ldr	r2, [pc, #152]	; (c001a88 <HAL_GTZC_IRQHandler+0x204>)
 c0019f0:	683b      	ldr	r3, [r7, #0]
 c0019f2:	6213      	str	r3, [r2, #32]

    /* Loop on flag to check, which ones have been raised */
    position = 0U;
 c0019f4:	2300      	movs	r3, #0
 c0019f6:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c0019f8:	e010      	b.n	c001a1c <HAL_GTZC_IRQHandler+0x198>
    {
      if ((flag & (1UL << position)) != 0U)
 c0019fa:	683a      	ldr	r2, [r7, #0]
 c0019fc:	68fb      	ldr	r3, [r7, #12]
 c0019fe:	fa22 f303 	lsr.w	r3, r2, r3
 c001a02:	f003 0301 	and.w	r3, r3, #1
 c001a06:	2b00      	cmp	r3, #0
 c001a08:	d005      	beq.n	c001a16 <HAL_GTZC_IRQHandler+0x192>
      {
        HAL_GTZC_TZIC_Callback(GTZC2_PERIPH_REG1 | position);
 c001a0a:	68fb      	ldr	r3, [r7, #12]
 c001a0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 c001a10:	4618      	mov	r0, r3
 c001a12:	f000 f83b 	bl	c001a8c <HAL_GTZC_TZIC_Callback>
      }

      /* Position bit to be updated */
      position++;
 c001a16:	68fb      	ldr	r3, [r7, #12]
 c001a18:	3301      	adds	r3, #1
 c001a1a:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c001a1c:	683a      	ldr	r2, [r7, #0]
 c001a1e:	68fb      	ldr	r3, [r7, #12]
 c001a20:	fa22 f303 	lsr.w	r3, r2, r3
 c001a24:	2b00      	cmp	r3, #0
 c001a26:	d1e8      	bne.n	c0019fa <HAL_GTZC_IRQHandler+0x176>
    }
  }

  /* Get current IT Flags and IT sources value on 2nd register of TZIC2 */
  ier_itsources = READ_REG(GTZC_TZIC2_S->IER2);
 c001a28:	4b17      	ldr	r3, [pc, #92]	; (c001a88 <HAL_GTZC_IRQHandler+0x204>)
 c001a2a:	685b      	ldr	r3, [r3, #4]
 c001a2c:	60bb      	str	r3, [r7, #8]
  sr_flags      = READ_REG(GTZC_TZIC2_S->SR2);
 c001a2e:	4b16      	ldr	r3, [pc, #88]	; (c001a88 <HAL_GTZC_IRQHandler+0x204>)
 c001a30:	695b      	ldr	r3, [r3, #20]
 c001a32:	607b      	str	r3, [r7, #4]

  /* Get Mask interrupt and then clear them */
  flag = ier_itsources & sr_flags;
 c001a34:	68ba      	ldr	r2, [r7, #8]
 c001a36:	687b      	ldr	r3, [r7, #4]
 c001a38:	4013      	ands	r3, r2
 c001a3a:	603b      	str	r3, [r7, #0]
  if (flag != 0U)
 c001a3c:	683b      	ldr	r3, [r7, #0]
 c001a3e:	2b00      	cmp	r3, #0
 c001a40:	d01c      	beq.n	c001a7c <HAL_GTZC_IRQHandler+0x1f8>
  {
    WRITE_REG(GTZC_TZIC2_S->FCR2, flag);
 c001a42:	4a11      	ldr	r2, [pc, #68]	; (c001a88 <HAL_GTZC_IRQHandler+0x204>)
 c001a44:	683b      	ldr	r3, [r7, #0]
 c001a46:	6253      	str	r3, [r2, #36]	; 0x24

    /* Loop on flag to check, which ones have been raised */
    position = 0U;
 c001a48:	2300      	movs	r3, #0
 c001a4a:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c001a4c:	e010      	b.n	c001a70 <HAL_GTZC_IRQHandler+0x1ec>
    {
      if ((flag & (1UL << position)) != 0U)
 c001a4e:	683a      	ldr	r2, [r7, #0]
 c001a50:	68fb      	ldr	r3, [r7, #12]
 c001a52:	fa22 f303 	lsr.w	r3, r2, r3
 c001a56:	f003 0301 	and.w	r3, r3, #1
 c001a5a:	2b00      	cmp	r3, #0
 c001a5c:	d005      	beq.n	c001a6a <HAL_GTZC_IRQHandler+0x1e6>
      {
        HAL_GTZC_TZIC_Callback(GTZC2_PERIPH_REG2 | position);
 c001a5e:	68fb      	ldr	r3, [r7, #12]
 c001a60:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 c001a64:	4618      	mov	r0, r3
 c001a66:	f000 f811 	bl	c001a8c <HAL_GTZC_TZIC_Callback>
      }

      /* Position bit to be updated */
      position++;
 c001a6a:	68fb      	ldr	r3, [r7, #12]
 c001a6c:	3301      	adds	r3, #1
 c001a6e:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c001a70:	683a      	ldr	r2, [r7, #0]
 c001a72:	68fb      	ldr	r3, [r7, #12]
 c001a74:	fa22 f303 	lsr.w	r3, r2, r3
 c001a78:	2b00      	cmp	r3, #0
 c001a7a:	d1e8      	bne.n	c001a4e <HAL_GTZC_IRQHandler+0x1ca>
    }
  }
}
 c001a7c:	bf00      	nop
 c001a7e:	3710      	adds	r7, #16
 c001a80:	46bd      	mov	sp, r7
 c001a82:	bd80      	pop	{r7, pc}
 c001a84:	50032800 	.word	0x50032800
 c001a88:	56023400 	.word	0x56023400

0c001a8c <HAL_GTZC_TZIC_Callback>:
  * @param  PeriphId Peripheral identifier triggering the illegal access.
  *         This parameter can be a value of @ref GTZC_TZSC_TZIC_PeriphId
  * @retval None.
  */
__weak void HAL_GTZC_TZIC_Callback(uint32_t PeriphId)
{
 c001a8c:	b480      	push	{r7}
 c001a8e:	b083      	sub	sp, #12
 c001a90:	af00      	add	r7, sp, #0
 c001a92:	6078      	str	r0, [r7, #4]
  UNUSED(PeriphId);

  /* NOTE: This function should not be modified. When the callback is needed,
   * the HAL_GTZC_TZIC_Callback is to be implemented in the user file
   */
}
 c001a94:	bf00      	nop
 c001a96:	370c      	adds	r7, #12
 c001a98:	46bd      	mov	sp, r7
 c001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001a9e:	4770      	bx	lr

0c001aa0 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 c001aa0:	b480      	push	{r7}
 c001aa2:	b085      	sub	sp, #20
 c001aa4:	af00      	add	r7, sp, #0
 c001aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 c001aa8:	2300      	movs	r3, #0
 c001aaa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 c001aac:	4b0b      	ldr	r3, [pc, #44]	; (c001adc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 c001aae:	681b      	ldr	r3, [r3, #0]
 c001ab0:	f003 0301 	and.w	r3, r3, #1
 c001ab4:	2b00      	cmp	r3, #0
 c001ab6:	d002      	beq.n	c001abe <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 c001ab8:	2301      	movs	r3, #1
 c001aba:	73fb      	strb	r3, [r7, #15]
 c001abc:	e007      	b.n	c001ace <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 c001abe:	4b07      	ldr	r3, [pc, #28]	; (c001adc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 c001ac0:	681b      	ldr	r3, [r3, #0]
 c001ac2:	f023 0204 	bic.w	r2, r3, #4
 c001ac6:	4905      	ldr	r1, [pc, #20]	; (c001adc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 c001ac8:	687b      	ldr	r3, [r7, #4]
 c001aca:	4313      	orrs	r3, r2
 c001acc:	600b      	str	r3, [r1, #0]
  }

  return status;
 c001ace:	7bfb      	ldrb	r3, [r7, #15]
}
 c001ad0:	4618      	mov	r0, r3
 c001ad2:	3714      	adds	r7, #20
 c001ad4:	46bd      	mov	sp, r7
 c001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001ada:	4770      	bx	lr
 c001adc:	50030400 	.word	0x50030400

0c001ae0 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 c001ae0:	b480      	push	{r7}
 c001ae2:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 c001ae4:	4b05      	ldr	r3, [pc, #20]	; (c001afc <HAL_ICACHE_Enable+0x1c>)
 c001ae6:	681b      	ldr	r3, [r3, #0]
 c001ae8:	4a04      	ldr	r2, [pc, #16]	; (c001afc <HAL_ICACHE_Enable+0x1c>)
 c001aea:	f043 0301 	orr.w	r3, r3, #1
 c001aee:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 c001af0:	2300      	movs	r3, #0
}
 c001af2:	4618      	mov	r0, r3
 c001af4:	46bd      	mov	sp, r7
 c001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001afa:	4770      	bx	lr
 c001afc:	50030400 	.word	0x50030400

0c001b00 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 c001b00:	b480      	push	{r7}
 c001b02:	b085      	sub	sp, #20
 c001b04:	af00      	add	r7, sp, #0
 c001b06:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 c001b08:	4b22      	ldr	r3, [pc, #136]	; (c001b94 <HAL_PWREx_ConfigSupply+0x94>)
 c001b0a:	681b      	ldr	r3, [r3, #0]
 c001b0c:	4a22      	ldr	r2, [pc, #136]	; (c001b98 <HAL_PWREx_ConfigSupply+0x98>)
 c001b0e:	fba2 2303 	umull	r2, r3, r2, r3
 c001b12:	099b      	lsrs	r3, r3, #6
 c001b14:	2232      	movs	r2, #50	; 0x32
 c001b16:	fb02 f303 	mul.w	r3, r2, r3
 c001b1a:	4a1f      	ldr	r2, [pc, #124]	; (c001b98 <HAL_PWREx_ConfigSupply+0x98>)
 c001b1c:	fba2 2303 	umull	r2, r3, r2, r3
 c001b20:	099b      	lsrs	r3, r3, #6
 c001b22:	3301      	adds	r3, #1
 c001b24:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 c001b26:	687b      	ldr	r3, [r7, #4]
 c001b28:	2b00      	cmp	r3, #0
 c001b2a:	d113      	bne.n	c001b54 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 c001b2c:	4b1b      	ldr	r3, [pc, #108]	; (c001b9c <HAL_PWREx_ConfigSupply+0x9c>)
 c001b2e:	689b      	ldr	r3, [r3, #8]
 c001b30:	4a1a      	ldr	r2, [pc, #104]	; (c001b9c <HAL_PWREx_ConfigSupply+0x9c>)
 c001b32:	f023 0302 	bic.w	r3, r3, #2
 c001b36:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 c001b38:	e002      	b.n	c001b40 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 c001b3a:	68fb      	ldr	r3, [r7, #12]
 c001b3c:	3b01      	subs	r3, #1
 c001b3e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 c001b40:	4b16      	ldr	r3, [pc, #88]	; (c001b9c <HAL_PWREx_ConfigSupply+0x9c>)
 c001b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c001b44:	f003 0302 	and.w	r3, r3, #2
 c001b48:	2b02      	cmp	r3, #2
 c001b4a:	d116      	bne.n	c001b7a <HAL_PWREx_ConfigSupply+0x7a>
 c001b4c:	68fb      	ldr	r3, [r7, #12]
 c001b4e:	2b00      	cmp	r3, #0
 c001b50:	d1f3      	bne.n	c001b3a <HAL_PWREx_ConfigSupply+0x3a>
 c001b52:	e012      	b.n	c001b7a <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 c001b54:	4b11      	ldr	r3, [pc, #68]	; (c001b9c <HAL_PWREx_ConfigSupply+0x9c>)
 c001b56:	689b      	ldr	r3, [r3, #8]
 c001b58:	4a10      	ldr	r2, [pc, #64]	; (c001b9c <HAL_PWREx_ConfigSupply+0x9c>)
 c001b5a:	f043 0302 	orr.w	r3, r3, #2
 c001b5e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 c001b60:	e002      	b.n	c001b68 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 c001b62:	68fb      	ldr	r3, [r7, #12]
 c001b64:	3b01      	subs	r3, #1
 c001b66:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 c001b68:	4b0c      	ldr	r3, [pc, #48]	; (c001b9c <HAL_PWREx_ConfigSupply+0x9c>)
 c001b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c001b6c:	f003 0302 	and.w	r3, r3, #2
 c001b70:	2b00      	cmp	r3, #0
 c001b72:	d102      	bne.n	c001b7a <HAL_PWREx_ConfigSupply+0x7a>
 c001b74:	68fb      	ldr	r3, [r7, #12]
 c001b76:	2b00      	cmp	r3, #0
 c001b78:	d1f3      	bne.n	c001b62 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 c001b7a:	68fb      	ldr	r3, [r7, #12]
 c001b7c:	2b00      	cmp	r3, #0
 c001b7e:	d101      	bne.n	c001b84 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 c001b80:	2303      	movs	r3, #3
 c001b82:	e000      	b.n	c001b86 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 c001b84:	2300      	movs	r3, #0
}
 c001b86:	4618      	mov	r0, r3
 c001b88:	3714      	adds	r7, #20
 c001b8a:	46bd      	mov	sp, r7
 c001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001b90:	4770      	bx	lr
 c001b92:	bf00      	nop
 c001b94:	30000004 	.word	0x30000004
 c001b98:	10624dd3 	.word	0x10624dd3
 c001b9c:	56020800 	.word	0x56020800

0c001ba0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 c001ba0:	b480      	push	{r7}
 c001ba2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 c001ba4:	4b05      	ldr	r3, [pc, #20]	; (c001bbc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 c001ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c001ba8:	4a04      	ldr	r2, [pc, #16]	; (c001bbc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 c001baa:	f043 0301 	orr.w	r3, r3, #1
 c001bae:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 c001bb0:	bf00      	nop
 c001bb2:	46bd      	mov	sp, r7
 c001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001bb8:	4770      	bx	lr
 c001bba:	bf00      	nop
 c001bbc:	56020800 	.word	0x56020800

0c001bc0 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 c001bc0:	b480      	push	{r7}
 c001bc2:	b08b      	sub	sp, #44	; 0x2c
 c001bc4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 c001bc6:	2300      	movs	r3, #0
 c001bc8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 c001bca:	2300      	movs	r3, #0
 c001bcc:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c001bce:	4b78      	ldr	r3, [pc, #480]	; (c001db0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c001bd0:	69db      	ldr	r3, [r3, #28]
 c001bd2:	f003 030c 	and.w	r3, r3, #12
 c001bd6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 c001bd8:	4b75      	ldr	r3, [pc, #468]	; (c001db0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c001bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c001bdc:	f003 0303 	and.w	r3, r3, #3
 c001be0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c001be2:	69bb      	ldr	r3, [r7, #24]
 c001be4:	2b00      	cmp	r3, #0
 c001be6:	d005      	beq.n	c001bf4 <HAL_RCC_GetSysClockFreq+0x34>
 c001be8:	69bb      	ldr	r3, [r7, #24]
 c001bea:	2b0c      	cmp	r3, #12
 c001bec:	d121      	bne.n	c001c32 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 c001bee:	697b      	ldr	r3, [r7, #20]
 c001bf0:	2b01      	cmp	r3, #1
 c001bf2:	d11e      	bne.n	c001c32 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 c001bf4:	4b6e      	ldr	r3, [pc, #440]	; (c001db0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c001bf6:	689b      	ldr	r3, [r3, #8]
 c001bf8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 c001bfc:	2b00      	cmp	r3, #0
 c001bfe:	d107      	bne.n	c001c10 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 c001c00:	4b6b      	ldr	r3, [pc, #428]	; (c001db0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c001c02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 c001c06:	0b1b      	lsrs	r3, r3, #12
 c001c08:	f003 030f 	and.w	r3, r3, #15
 c001c0c:	627b      	str	r3, [r7, #36]	; 0x24
 c001c0e:	e005      	b.n	c001c1c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 c001c10:	4b67      	ldr	r3, [pc, #412]	; (c001db0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c001c12:	689b      	ldr	r3, [r3, #8]
 c001c14:	0f1b      	lsrs	r3, r3, #28
 c001c16:	f003 030f 	and.w	r3, r3, #15
 c001c1a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 c001c1c:	4a65      	ldr	r2, [pc, #404]	; (c001db4 <HAL_RCC_GetSysClockFreq+0x1f4>)
 c001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c001c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c001c24:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c001c26:	69bb      	ldr	r3, [r7, #24]
 c001c28:	2b00      	cmp	r3, #0
 c001c2a:	d110      	bne.n	c001c4e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 c001c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c001c2e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c001c30:	e00d      	b.n	c001c4e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 c001c32:	4b5f      	ldr	r3, [pc, #380]	; (c001db0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c001c34:	69db      	ldr	r3, [r3, #28]
 c001c36:	f003 030c 	and.w	r3, r3, #12
 c001c3a:	2b04      	cmp	r3, #4
 c001c3c:	d102      	bne.n	c001c44 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 c001c3e:	4b5e      	ldr	r3, [pc, #376]	; (c001db8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 c001c40:	623b      	str	r3, [r7, #32]
 c001c42:	e004      	b.n	c001c4e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 c001c44:	69bb      	ldr	r3, [r7, #24]
 c001c46:	2b08      	cmp	r3, #8
 c001c48:	d101      	bne.n	c001c4e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 c001c4a:	4b5b      	ldr	r3, [pc, #364]	; (c001db8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 c001c4c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c001c4e:	69bb      	ldr	r3, [r7, #24]
 c001c50:	2b0c      	cmp	r3, #12
 c001c52:	f040 80a5 	bne.w	c001da0 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 c001c56:	4b56      	ldr	r3, [pc, #344]	; (c001db0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c001c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c001c5a:	f003 0303 	and.w	r3, r3, #3
 c001c5e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 c001c60:	4b53      	ldr	r3, [pc, #332]	; (c001db0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c001c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c001c64:	0a1b      	lsrs	r3, r3, #8
 c001c66:	f003 030f 	and.w	r3, r3, #15
 c001c6a:	3301      	adds	r3, #1
 c001c6c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 c001c6e:	4b50      	ldr	r3, [pc, #320]	; (c001db0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c001c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c001c72:	091b      	lsrs	r3, r3, #4
 c001c74:	f003 0301 	and.w	r3, r3, #1
 c001c78:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 c001c7a:	4b4d      	ldr	r3, [pc, #308]	; (c001db0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c001c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c001c7e:	08db      	lsrs	r3, r3, #3
 c001c80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 c001c84:	68ba      	ldr	r2, [r7, #8]
 c001c86:	fb02 f303 	mul.w	r3, r2, r3
 c001c8a:	ee07 3a90 	vmov	s15, r3
 c001c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c001c92:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 c001c96:	693b      	ldr	r3, [r7, #16]
 c001c98:	2b02      	cmp	r3, #2
 c001c9a:	d003      	beq.n	c001ca4 <HAL_RCC_GetSysClockFreq+0xe4>
 c001c9c:	693b      	ldr	r3, [r7, #16]
 c001c9e:	2b03      	cmp	r3, #3
 c001ca0:	d022      	beq.n	c001ce8 <HAL_RCC_GetSysClockFreq+0x128>
 c001ca2:	e043      	b.n	c001d2c <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c001ca4:	68fb      	ldr	r3, [r7, #12]
 c001ca6:	ee07 3a90 	vmov	s15, r3
 c001caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c001cae:	eddf 6a43 	vldr	s13, [pc, #268]	; c001dbc <HAL_RCC_GetSysClockFreq+0x1fc>
 c001cb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c001cb6:	4b3e      	ldr	r3, [pc, #248]	; (c001db0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c001cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c001cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c001cbe:	ee07 3a90 	vmov	s15, r3
 c001cc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 c001cc6:	ed97 6a01 	vldr	s12, [r7, #4]
 c001cca:	eddf 5a3d 	vldr	s11, [pc, #244]	; c001dc0 <HAL_RCC_GetSysClockFreq+0x200>
 c001cce:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c001cd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 c001cd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c001cda:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c001cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 c001ce2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 c001ce6:	e046      	b.n	c001d76 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c001ce8:	68fb      	ldr	r3, [r7, #12]
 c001cea:	ee07 3a90 	vmov	s15, r3
 c001cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c001cf2:	eddf 6a32 	vldr	s13, [pc, #200]	; c001dbc <HAL_RCC_GetSysClockFreq+0x1fc>
 c001cf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c001cfa:	4b2d      	ldr	r3, [pc, #180]	; (c001db0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c001cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c001cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c001d02:	ee07 3a90 	vmov	s15, r3
 c001d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 c001d0a:	ed97 6a01 	vldr	s12, [r7, #4]
 c001d0e:	eddf 5a2c 	vldr	s11, [pc, #176]	; c001dc0 <HAL_RCC_GetSysClockFreq+0x200>
 c001d12:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c001d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 c001d1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c001d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c001d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 c001d26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 c001d2a:	e024      	b.n	c001d76 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c001d2e:	ee07 3a90 	vmov	s15, r3
 c001d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c001d36:	68fb      	ldr	r3, [r7, #12]
 c001d38:	ee07 3a90 	vmov	s15, r3
 c001d3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c001d40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c001d44:	4b1a      	ldr	r3, [pc, #104]	; (c001db0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c001d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c001d48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c001d4c:	ee07 3a90 	vmov	s15, r3
 c001d50:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 c001d54:	ed97 6a01 	vldr	s12, [r7, #4]
 c001d58:	eddf 5a19 	vldr	s11, [pc, #100]	; c001dc0 <HAL_RCC_GetSysClockFreq+0x200>
 c001d5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c001d60:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 c001d64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c001d68:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c001d6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 c001d70:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 c001d74:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 c001d76:	4b0e      	ldr	r3, [pc, #56]	; (c001db0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c001d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c001d7a:	0e1b      	lsrs	r3, r3, #24
 c001d7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 c001d80:	3301      	adds	r3, #1
 c001d82:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 c001d84:	683b      	ldr	r3, [r7, #0]
 c001d86:	ee07 3a90 	vmov	s15, r3
 c001d8a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 c001d8e:	edd7 6a07 	vldr	s13, [r7, #28]
 c001d92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c001d96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 c001d9a:	ee17 3a90 	vmov	r3, s15
 c001d9e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 c001da0:	6a3b      	ldr	r3, [r7, #32]
}
 c001da2:	4618      	mov	r0, r3
 c001da4:	372c      	adds	r7, #44	; 0x2c
 c001da6:	46bd      	mov	sp, r7
 c001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001dac:	4770      	bx	lr
 c001dae:	bf00      	nop
 c001db0:	56020c00 	.word	0x56020c00
 c001db4:	0c001e44 	.word	0x0c001e44
 c001db8:	00f42400 	.word	0x00f42400
 c001dbc:	4b742400 	.word	0x4b742400
 c001dc0:	46000000 	.word	0x46000000

0c001dc4 <memset>:
 c001dc4:	4402      	add	r2, r0
 c001dc6:	4603      	mov	r3, r0
 c001dc8:	4293      	cmp	r3, r2
 c001dca:	d100      	bne.n	c001dce <memset+0xa>
 c001dcc:	4770      	bx	lr
 c001dce:	f803 1b01 	strb.w	r1, [r3], #1
 c001dd2:	e7f9      	b.n	c001dc8 <memset+0x4>

0c001dd4 <__libc_init_array>:
 c001dd4:	b570      	push	{r4, r5, r6, lr}
 c001dd6:	4d0d      	ldr	r5, [pc, #52]	; (c001e0c <__libc_init_array+0x38>)
 c001dd8:	2600      	movs	r6, #0
 c001dda:	4c0d      	ldr	r4, [pc, #52]	; (c001e10 <__libc_init_array+0x3c>)
 c001ddc:	1b64      	subs	r4, r4, r5
 c001dde:	10a4      	asrs	r4, r4, #2
 c001de0:	42a6      	cmp	r6, r4
 c001de2:	d109      	bne.n	c001df8 <__libc_init_array+0x24>
 c001de4:	4d0b      	ldr	r5, [pc, #44]	; (c001e14 <__libc_init_array+0x40>)
 c001de6:	2600      	movs	r6, #0
 c001de8:	4c0b      	ldr	r4, [pc, #44]	; (c001e18 <__libc_init_array+0x44>)
 c001dea:	f000 f817 	bl	c001e1c <_init>
 c001dee:	1b64      	subs	r4, r4, r5
 c001df0:	10a4      	asrs	r4, r4, #2
 c001df2:	42a6      	cmp	r6, r4
 c001df4:	d105      	bne.n	c001e02 <__libc_init_array+0x2e>
 c001df6:	bd70      	pop	{r4, r5, r6, pc}
 c001df8:	f855 3b04 	ldr.w	r3, [r5], #4
 c001dfc:	3601      	adds	r6, #1
 c001dfe:	4798      	blx	r3
 c001e00:	e7ee      	b.n	c001de0 <__libc_init_array+0xc>
 c001e02:	f855 3b04 	ldr.w	r3, [r5], #4
 c001e06:	3601      	adds	r6, #1
 c001e08:	4798      	blx	r3
 c001e0a:	e7f2      	b.n	c001df2 <__libc_init_array+0x1e>
 c001e0c:	0c001f04 	.word	0x0c001f04
 c001e10:	0c001f04 	.word	0x0c001f04
 c001e14:	0c001f04 	.word	0x0c001f04
 c001e18:	0c001f08 	.word	0x0c001f08

0c001e1c <_init>:
 c001e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c001e1e:	bf00      	nop
 c001e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c001e22:	bc08      	pop	{r3}
 c001e24:	469e      	mov	lr, r3
 c001e26:	4770      	bx	lr

0c001e28 <_fini>:
 c001e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c001e2a:	bf00      	nop
 c001e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c001e2e:	bc08      	pop	{r3}
 c001e30:	469e      	mov	lr, r3
 c001e32:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

0c0fe000 <SECURE_SystemCoreClockUpdate>:
 c0fe000:	e97f e97f 	sg
 c0fe004:	f702 bf4a 	b.w	c000e9c <__acle_se_SECURE_SystemCoreClockUpdate>

0c0fe008 <SECURE_RegisterCallback>:
 c0fe008:	e97f e97f 	sg
 c0fe00c:	f702 bd22 	b.w	c000a54 <__acle_se_SECURE_RegisterCallback>
	...
