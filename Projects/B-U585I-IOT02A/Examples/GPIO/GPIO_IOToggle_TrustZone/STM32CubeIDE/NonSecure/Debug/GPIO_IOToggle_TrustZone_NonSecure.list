
GPIO_IOToggle_TrustZone_NonSecure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002008  08100238  08100238  00010238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08102240  08102240  00012240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08102310  08102310  00012310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08102314  08102314  00012314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000d  20040000  08102318  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000024  20040010  08102325  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20040034  08102325  00020034  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  0002000d  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  00020043  2**0
                  CONTENTS, READONLY
 10 .debug_line   0000745f  00000000  00000000  00020086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line_str 000000be  00000000  00000000  000274e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_info   00005ff7  00000000  00000000  000275a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001107  00000000  00000000  0002d59a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000688  00000000  00000000  0002e6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0012f55a  00000000  00000000  0002ed30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004cd  00000000  00000000  0015e28a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000305e8  00000000  00000000  0015e757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000018e0  00000000  00000000  0018ed40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100238 <__do_global_dtors_aux>:
 8100238:	b510      	push	{r4, lr}
 810023a:	4c05      	ldr	r4, [pc, #20]	; (8100250 <__do_global_dtors_aux+0x18>)
 810023c:	7823      	ldrb	r3, [r4, #0]
 810023e:	b933      	cbnz	r3, 810024e <__do_global_dtors_aux+0x16>
 8100240:	4b04      	ldr	r3, [pc, #16]	; (8100254 <__do_global_dtors_aux+0x1c>)
 8100242:	b113      	cbz	r3, 810024a <__do_global_dtors_aux+0x12>
 8100244:	4804      	ldr	r0, [pc, #16]	; (8100258 <__do_global_dtors_aux+0x20>)
 8100246:	f3af 8000 	nop.w
 810024a:	2301      	movs	r3, #1
 810024c:	7023      	strb	r3, [r4, #0]
 810024e:	bd10      	pop	{r4, pc}
 8100250:	20040010 	.word	0x20040010
 8100254:	00000000 	.word	0x00000000
 8100258:	0810221c 	.word	0x0810221c

0810025c <frame_dummy>:
 810025c:	b508      	push	{r3, lr}
 810025e:	4b03      	ldr	r3, [pc, #12]	; (810026c <frame_dummy+0x10>)
 8100260:	b11b      	cbz	r3, 810026a <frame_dummy+0xe>
 8100262:	4903      	ldr	r1, [pc, #12]	; (8100270 <frame_dummy+0x14>)
 8100264:	4803      	ldr	r0, [pc, #12]	; (8100274 <frame_dummy+0x18>)
 8100266:	f3af 8000 	nop.w
 810026a:	bd08      	pop	{r3, pc}
 810026c:	00000000 	.word	0x00000000
 8100270:	20040014 	.word	0x20040014
 8100274:	0810221c 	.word	0x0810221c

08100278 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8100278:	f8df d034 	ldr.w	sp, [pc, #52]	; 81002b0 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 810027c:	f000 f92c 	bl	81004d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8100280:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8100282:	e003      	b.n	810028c <LoopCopyDataInit>

08100284 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8100284:	4b0b      	ldr	r3, [pc, #44]	; (81002b4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8100286:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8100288:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 810028a:	3104      	adds	r1, #4

0810028c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 810028c:	480a      	ldr	r0, [pc, #40]	; (81002b8 <LoopForever+0xa>)
	ldr	r3, =_edata
 810028e:	4b0b      	ldr	r3, [pc, #44]	; (81002bc <LoopForever+0xe>)
	adds	r2, r0, r1
 8100290:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8100292:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8100294:	d3f6      	bcc.n	8100284 <CopyDataInit>
	ldr	r2, =_sbss
 8100296:	4a0a      	ldr	r2, [pc, #40]	; (81002c0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8100298:	e002      	b.n	81002a0 <LoopFillZerobss>

0810029a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 810029a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 810029c:	f842 3b04 	str.w	r3, [r2], #4

081002a0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 81002a0:	4b08      	ldr	r3, [pc, #32]	; (81002c4 <LoopForever+0x16>)
	cmp	r2, r3
 81002a2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 81002a4:	d3f9      	bcc.n	810029a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81002a6:	f001 ff95 	bl	81021d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 81002aa:	f000 f80f 	bl	81002cc <main>

081002ae <LoopForever>:

LoopForever:
    b LoopForever
 81002ae:	e7fe      	b.n	81002ae <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 81002b0:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 81002b4:	08102318 	.word	0x08102318
	ldr	r0, =_sdata
 81002b8:	20040000 	.word	0x20040000
	ldr	r3, =_edata
 81002bc:	2004000d 	.word	0x2004000d
	ldr	r2, =_sbss
 81002c0:	20040010 	.word	0x20040010
	ldr	r3, = _ebss
 81002c4:	20040034 	.word	0x20040034

081002c8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 81002c8:	e7fe      	b.n	81002c8 <ADC1_IRQHandler>
	...

081002cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81002cc:	b580      	push	{r7, lr}
 81002ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81002d0:	f000 f90a 	bl	81004e8 <HAL_Init>

  /* USER CODE BEGIN Init */

  /* Register SecureFault callback defined in non-secure and to be called by secure handler */
  SECURE_RegisterCallback(SECURE_FAULT_CB_ID, (void *)SecureFault_Callback);
 81002d4:	4907      	ldr	r1, [pc, #28]	; (81002f4 <main+0x28>)
 81002d6:	2000      	movs	r0, #0
 81002d8:	f001 ffae 	bl	8102238 <__SECURE_RegisterCallback_veneer>

  /* Register SecureError callback defined in non-secure and to be called by secure handler */
  SECURE_RegisterCallback(GTZC_ERROR_CB_ID, (void *)SecureError_Callback);
 81002dc:	4906      	ldr	r1, [pc, #24]	; (81002f8 <main+0x2c>)
 81002de:	2001      	movs	r0, #1
 81002e0:	f001 ffaa 	bl	8102238 <__SECURE_RegisterCallback_veneer>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 81002e4:	f000 f80c 	bl	8100300 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81002e8:	f000 f854 	bl	8100394 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  NonSecureInitIODone = 1;
 81002ec:	4b03      	ldr	r3, [pc, #12]	; (81002fc <main+0x30>)
 81002ee:	2201      	movs	r2, #1
 81002f0:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 81002f2:	e7fe      	b.n	81002f2 <main+0x26>
 81002f4:	08100431 	.word	0x08100431
 81002f8:	0810043d 	.word	0x0810043d
 81002fc:	2004002c 	.word	0x2004002c

08100300 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8100300:	b580      	push	{r7, lr}
 8100302:	b09e      	sub	sp, #120	; 0x78
 8100304:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8100306:	f107 0318 	add.w	r3, r7, #24
 810030a:	2260      	movs	r2, #96	; 0x60
 810030c:	2100      	movs	r1, #0
 810030e:	4618      	mov	r0, r3
 8100310:	f001 ff58 	bl	81021c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8100314:	463b      	mov	r3, r7
 8100316:	2200      	movs	r2, #0
 8100318:	601a      	str	r2, [r3, #0]
 810031a:	605a      	str	r2, [r3, #4]
 810031c:	609a      	str	r2, [r3, #8]
 810031e:	60da      	str	r2, [r3, #12]
 8100320:	611a      	str	r2, [r3, #16]
 8100322:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 8100324:	2000      	movs	r0, #0
 8100326:	f000 fc51 	bl	8100bcc <HAL_PWREx_ControlVoltageScaling>
 810032a:	4603      	mov	r3, r0
 810032c:	2b00      	cmp	r3, #0
 810032e:	d001      	beq.n	8100334 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8100330:	f000 f88a 	bl	8100448 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8100334:	2310      	movs	r3, #16
 8100336:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8100338:	2301      	movs	r3, #1
 810033a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 810033c:	2310      	movs	r3, #16
 810033e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8100340:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8100344:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8100346:	2300      	movs	r3, #0
 8100348:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 810034a:	f107 0318 	add.w	r3, r7, #24
 810034e:	4618      	mov	r0, r3
 8100350:	f000 fcc8 	bl	8100ce4 <HAL_RCC_OscConfig>
 8100354:	4603      	mov	r3, r0
 8100356:	2b00      	cmp	r3, #0
 8100358:	d001      	beq.n	810035e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 810035a:	f000 f875 	bl	8100448 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 810035e:	231f      	movs	r3, #31
 8100360:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8100362:	2300      	movs	r3, #0
 8100364:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8100366:	2300      	movs	r3, #0
 8100368:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 810036a:	2300      	movs	r3, #0
 810036c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 810036e:	2300      	movs	r3, #0
 8100370:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8100372:	2300      	movs	r3, #0
 8100374:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8100376:	463b      	mov	r3, r7
 8100378:	2100      	movs	r1, #0
 810037a:	4618      	mov	r0, r3
 810037c:	f001 fb8e 	bl	8101a9c <HAL_RCC_ClockConfig>
 8100380:	4603      	mov	r3, r0
 8100382:	2b00      	cmp	r3, #0
 8100384:	d001      	beq.n	810038a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8100386:	f000 f85f 	bl	8100448 <Error_Handler>
  }
}
 810038a:	bf00      	nop
 810038c:	3778      	adds	r7, #120	; 0x78
 810038e:	46bd      	mov	sp, r7
 8100390:	bd80      	pop	{r7, pc}
	...

08100394 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8100394:	b580      	push	{r7, lr}
 8100396:	b086      	sub	sp, #24
 8100398:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810039a:	1d3b      	adds	r3, r7, #4
 810039c:	2200      	movs	r2, #0
 810039e:	601a      	str	r2, [r3, #0]
 81003a0:	605a      	str	r2, [r3, #4]
 81003a2:	609a      	str	r2, [r3, #8]
 81003a4:	60da      	str	r2, [r3, #12]
 81003a6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 81003a8:	4b12      	ldr	r3, [pc, #72]	; (81003f4 <MX_GPIO_Init+0x60>)
 81003aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81003ae:	4a11      	ldr	r2, [pc, #68]	; (81003f4 <MX_GPIO_Init+0x60>)
 81003b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 81003b4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 81003b8:	4b0e      	ldr	r3, [pc, #56]	; (81003f4 <MX_GPIO_Init+0x60>)
 81003ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81003be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81003c2:	603b      	str	r3, [r7, #0]
 81003c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 81003c6:	2200      	movs	r2, #0
 81003c8:	2180      	movs	r1, #128	; 0x80
 81003ca:	480b      	ldr	r0, [pc, #44]	; (81003f8 <MX_GPIO_Init+0x64>)
 81003cc:	f000 fbcc 	bl	8100b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED7_Pin */
  GPIO_InitStruct.Pin = LED7_Pin;
 81003d0:	2380      	movs	r3, #128	; 0x80
 81003d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81003d4:	2301      	movs	r3, #1
 81003d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81003d8:	2300      	movs	r3, #0
 81003da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81003dc:	2303      	movs	r3, #3
 81003de:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED7_GPIO_Port, &GPIO_InitStruct);
 81003e0:	1d3b      	adds	r3, r7, #4
 81003e2:	4619      	mov	r1, r3
 81003e4:	4804      	ldr	r0, [pc, #16]	; (81003f8 <MX_GPIO_Init+0x64>)
 81003e6:	f000 f9e7 	bl	81007b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 81003ea:	bf00      	nop
 81003ec:	3718      	adds	r7, #24
 81003ee:	46bd      	mov	sp, r7
 81003f0:	bd80      	pop	{r7, pc}
 81003f2:	bf00      	nop
 81003f4:	46020c00 	.word	0x46020c00
 81003f8:	42021c00 	.word	0x42021c00

081003fc <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
void HAL_SYSTICK_Callback(void)
{
 81003fc:	b580      	push	{r7, lr}
 81003fe:	af00      	add	r7, sp, #0
  if (NonSecureTimingDelay != 0U)
 8100400:	4b09      	ldr	r3, [pc, #36]	; (8100428 <HAL_SYSTICK_Callback+0x2c>)
 8100402:	681b      	ldr	r3, [r3, #0]
 8100404:	2b00      	cmp	r3, #0
 8100406:	d005      	beq.n	8100414 <HAL_SYSTICK_Callback+0x18>
  {
    NonSecureTimingDelay--;
 8100408:	4b07      	ldr	r3, [pc, #28]	; (8100428 <HAL_SYSTICK_Callback+0x2c>)
 810040a:	681b      	ldr	r3, [r3, #0]
 810040c:	3b01      	subs	r3, #1
 810040e:	4a06      	ldr	r2, [pc, #24]	; (8100428 <HAL_SYSTICK_Callback+0x2c>)
 8100410:	6013      	str	r3, [r2, #0]
  {
    /* Toggle PH.07 (LED7) */
    HAL_GPIO_TogglePin(GPIOH, GPIO_PIN_7);
    NonSecureTimingDelay = NONSECURE_IO_TOGGLE_DELAY;
  }
}
 8100412:	e007      	b.n	8100424 <HAL_SYSTICK_Callback+0x28>
    HAL_GPIO_TogglePin(GPIOH, GPIO_PIN_7);
 8100414:	2180      	movs	r1, #128	; 0x80
 8100416:	4805      	ldr	r0, [pc, #20]	; (810042c <HAL_SYSTICK_Callback+0x30>)
 8100418:	f000 fbbe 	bl	8100b98 <HAL_GPIO_TogglePin>
    NonSecureTimingDelay = NONSECURE_IO_TOGGLE_DELAY;
 810041c:	4b02      	ldr	r3, [pc, #8]	; (8100428 <HAL_SYSTICK_Callback+0x2c>)
 810041e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8100422:	601a      	str	r2, [r3, #0]
}
 8100424:	bf00      	nop
 8100426:	bd80      	pop	{r7, pc}
 8100428:	20040000 	.word	0x20040000
 810042c:	42021c00 	.word	0x42021c00

08100430 <SecureFault_Callback>:
  *         done by the non-secure application with non-secure callable API
  *         SECURE_RegisterCallback(SECURE_FAULT_CB_ID, (void *)SecureFault_Callback);
  * @retval None
  */
void SecureFault_Callback(void)
{
 8100430:	b580      	push	{r7, lr}
 8100432:	af00      	add	r7, sp, #0
  /* Go to error infinite loop when Secure fault generated by IDAU/SAU check */
  /* because of illegal access */
  Error_Handler();
 8100434:	f000 f808 	bl	8100448 <Error_Handler>
}
 8100438:	bf00      	nop
 810043a:	bd80      	pop	{r7, pc}

0810043c <SecureError_Callback>:
  *         done by the non-secure application with non-secure callable API
  *         SECURE_RegisterCallback(GTZC_ERROR_CB_ID, (void *)SecureError_Callback);
  * @retval None
  */
void SecureError_Callback(void)
{
 810043c:	b580      	push	{r7, lr}
 810043e:	af00      	add	r7, sp, #0
  /* Go to error infinite loop when Secure error generated by GTZC check */
  /* because of illegal access */
  Error_Handler();
 8100440:	f000 f802 	bl	8100448 <Error_Handler>
}
 8100444:	bf00      	nop
 8100446:	bd80      	pop	{r7, pc}

08100448 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100448:	b580      	push	{r7, lr}
 810044a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* Insure LED2 is configured */
  if (NonSecureInitIODone != 0)
 810044c:	4b05      	ldr	r3, [pc, #20]	; (8100464 <Error_Handler+0x1c>)
 810044e:	681b      	ldr	r3, [r3, #0]
 8100450:	2b00      	cmp	r3, #0
 8100452:	d001      	beq.n	8100458 <Error_Handler+0x10>
  {
    MX_GPIO_Init();
 8100454:	f7ff ff9e 	bl	8100394 <MX_GPIO_Init>
  }
  /* LED7 on */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_SET);
 8100458:	2201      	movs	r2, #1
 810045a:	2180      	movs	r1, #128	; 0x80
 810045c:	4802      	ldr	r0, [pc, #8]	; (8100468 <Error_Handler+0x20>)
 810045e:	f000 fb83 	bl	8100b68 <HAL_GPIO_WritePin>

  /* Infinite loop */
  while (1)
 8100462:	e7fe      	b.n	8100462 <Error_Handler+0x1a>
 8100464:	2004002c 	.word	0x2004002c
 8100468:	42021c00 	.word	0x42021c00

0810046c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 810046c:	b480      	push	{r7}
 810046e:	b083      	sub	sp, #12
 8100470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8100472:	4b0a      	ldr	r3, [pc, #40]	; (810049c <HAL_MspInit+0x30>)
 8100474:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8100478:	4a08      	ldr	r2, [pc, #32]	; (810049c <HAL_MspInit+0x30>)
 810047a:	f043 0304 	orr.w	r3, r3, #4
 810047e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8100482:	4b06      	ldr	r3, [pc, #24]	; (810049c <HAL_MspInit+0x30>)
 8100484:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8100488:	f003 0304 	and.w	r3, r3, #4
 810048c:	607b      	str	r3, [r7, #4]
 810048e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100490:	bf00      	nop
 8100492:	370c      	adds	r7, #12
 8100494:	46bd      	mov	sp, r7
 8100496:	f85d 7b04 	ldr.w	r7, [sp], #4
 810049a:	4770      	bx	lr
 810049c:	46020c00 	.word	0x46020c00

081004a0 <MemManage_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81004a0:	b480      	push	{r7}
 81004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81004a4:	e7fe      	b.n	81004a4 <MemManage_Handler+0x4>

081004a6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81004a6:	b480      	push	{r7}
 81004a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81004aa:	e7fe      	b.n	81004aa <UsageFault_Handler+0x4>

081004ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 81004ac:	b480      	push	{r7}
 81004ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81004b0:	bf00      	nop
 81004b2:	46bd      	mov	sp, r7
 81004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81004b8:	4770      	bx	lr

081004ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81004ba:	b480      	push	{r7}
 81004bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81004be:	bf00      	nop
 81004c0:	46bd      	mov	sp, r7
 81004c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81004c6:	4770      	bx	lr

081004c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81004c8:	b580      	push	{r7, lr}
 81004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81004cc:	f000 f870 	bl	81005b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Callback();
 81004d0:	f7ff ff94 	bl	81003fc <HAL_SYSTICK_Callback>
  /* USER CODE END SysTick_IRQn 1 */
}
 81004d4:	bf00      	nop
 81004d6:	bd80      	pop	{r7, pc}

081004d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 81004d8:	b480      	push	{r7}
 81004da:	af00      	add	r7, sp, #0
  /* Nothing done in non-secure */

  /* Non-secure main application shall call SystemCoreClockUpdate() to update */
  /* the SystemCoreClock variable to insure non-secure application relies on  */
  /* the initial clock reference set by secure application.                   */
}
 81004dc:	bf00      	nop
 81004de:	46bd      	mov	sp, r7
 81004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81004e4:	4770      	bx	lr
	...

081004e8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81004e8:	b580      	push	{r7, lr}
 81004ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 81004ec:	4b11      	ldr	r3, [pc, #68]	; (8100534 <HAL_Init+0x4c>)
 81004ee:	681b      	ldr	r3, [r3, #0]
 81004f0:	4a10      	ldr	r2, [pc, #64]	; (8100534 <HAL_Init+0x4c>)
 81004f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81004f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81004f8:	2003      	movs	r0, #3
 81004fa:	f000 f92b 	bl	8100754 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 81004fe:	f001 fcbf 	bl	8101e80 <HAL_RCC_GetSysClockFreq>
 8100502:	4602      	mov	r2, r0
 8100504:	4b0c      	ldr	r3, [pc, #48]	; (8100538 <HAL_Init+0x50>)
 8100506:	6a1b      	ldr	r3, [r3, #32]
 8100508:	f003 030f 	and.w	r3, r3, #15
 810050c:	490b      	ldr	r1, [pc, #44]	; (810053c <HAL_Init+0x54>)
 810050e:	5ccb      	ldrb	r3, [r1, r3]
 8100510:	fa22 f303 	lsr.w	r3, r2, r3
 8100514:	4a0a      	ldr	r2, [pc, #40]	; (8100540 <HAL_Init+0x58>)
 8100516:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100518:	200f      	movs	r0, #15
 810051a:	f000 f813 	bl	8100544 <HAL_InitTick>
 810051e:	4603      	mov	r3, r0
 8100520:	2b00      	cmp	r3, #0
 8100522:	d001      	beq.n	8100528 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8100524:	2301      	movs	r3, #1
 8100526:	e002      	b.n	810052e <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8100528:	f7ff ffa0 	bl	810046c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810052c:	2300      	movs	r3, #0
}
 810052e:	4618      	mov	r0, r3
 8100530:	bd80      	pop	{r7, pc}
 8100532:	bf00      	nop
 8100534:	40022000 	.word	0x40022000
 8100538:	46020c00 	.word	0x46020c00
 810053c:	08102240 	.word	0x08102240
 8100540:	20040004 	.word	0x20040004

08100544 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100544:	b580      	push	{r7, lr}
 8100546:	b082      	sub	sp, #8
 8100548:	af00      	add	r7, sp, #0
 810054a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 810054c:	4b15      	ldr	r3, [pc, #84]	; (81005a4 <HAL_InitTick+0x60>)
 810054e:	781b      	ldrb	r3, [r3, #0]
 8100550:	2b00      	cmp	r3, #0
 8100552:	d101      	bne.n	8100558 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8100554:	2301      	movs	r3, #1
 8100556:	e021      	b.n	810059c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8100558:	4b13      	ldr	r3, [pc, #76]	; (81005a8 <HAL_InitTick+0x64>)
 810055a:	681a      	ldr	r2, [r3, #0]
 810055c:	4b11      	ldr	r3, [pc, #68]	; (81005a4 <HAL_InitTick+0x60>)
 810055e:	781b      	ldrb	r3, [r3, #0]
 8100560:	4619      	mov	r1, r3
 8100562:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8100566:	fbb3 f3f1 	udiv	r3, r3, r1
 810056a:	fbb2 f3f3 	udiv	r3, r2, r3
 810056e:	4618      	mov	r0, r3
 8100570:	f000 f915 	bl	810079e <HAL_SYSTICK_Config>
 8100574:	4603      	mov	r3, r0
 8100576:	2b00      	cmp	r3, #0
 8100578:	d001      	beq.n	810057e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 810057a:	2301      	movs	r3, #1
 810057c:	e00e      	b.n	810059c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 810057e:	687b      	ldr	r3, [r7, #4]
 8100580:	2b0f      	cmp	r3, #15
 8100582:	d80a      	bhi.n	810059a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8100584:	2200      	movs	r2, #0
 8100586:	6879      	ldr	r1, [r7, #4]
 8100588:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810058c:	f000 f8ed 	bl	810076a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8100590:	4a06      	ldr	r2, [pc, #24]	; (81005ac <HAL_InitTick+0x68>)
 8100592:	687b      	ldr	r3, [r7, #4]
 8100594:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8100596:	2300      	movs	r3, #0
 8100598:	e000      	b.n	810059c <HAL_InitTick+0x58>
    return HAL_ERROR;
 810059a:	2301      	movs	r3, #1
}
 810059c:	4618      	mov	r0, r3
 810059e:	3708      	adds	r7, #8
 81005a0:	46bd      	mov	sp, r7
 81005a2:	bd80      	pop	{r7, pc}
 81005a4:	2004000c 	.word	0x2004000c
 81005a8:	20040004 	.word	0x20040004
 81005ac:	20040008 	.word	0x20040008

081005b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81005b0:	b480      	push	{r7}
 81005b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81005b4:	4b06      	ldr	r3, [pc, #24]	; (81005d0 <HAL_IncTick+0x20>)
 81005b6:	781b      	ldrb	r3, [r3, #0]
 81005b8:	461a      	mov	r2, r3
 81005ba:	4b06      	ldr	r3, [pc, #24]	; (81005d4 <HAL_IncTick+0x24>)
 81005bc:	681b      	ldr	r3, [r3, #0]
 81005be:	4413      	add	r3, r2
 81005c0:	4a04      	ldr	r2, [pc, #16]	; (81005d4 <HAL_IncTick+0x24>)
 81005c2:	6013      	str	r3, [r2, #0]
}
 81005c4:	bf00      	nop
 81005c6:	46bd      	mov	sp, r7
 81005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81005cc:	4770      	bx	lr
 81005ce:	bf00      	nop
 81005d0:	2004000c 	.word	0x2004000c
 81005d4:	20040030 	.word	0x20040030

081005d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81005d8:	b480      	push	{r7}
 81005da:	af00      	add	r7, sp, #0
  return uwTick;
 81005dc:	4b03      	ldr	r3, [pc, #12]	; (81005ec <HAL_GetTick+0x14>)
 81005de:	681b      	ldr	r3, [r3, #0]
}
 81005e0:	4618      	mov	r0, r3
 81005e2:	46bd      	mov	sp, r7
 81005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81005e8:	4770      	bx	lr
 81005ea:	bf00      	nop
 81005ec:	20040030 	.word	0x20040030

081005f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81005f0:	b480      	push	{r7}
 81005f2:	b085      	sub	sp, #20
 81005f4:	af00      	add	r7, sp, #0
 81005f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81005f8:	687b      	ldr	r3, [r7, #4]
 81005fa:	f003 0307 	and.w	r3, r3, #7
 81005fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100600:	4b0c      	ldr	r3, [pc, #48]	; (8100634 <__NVIC_SetPriorityGrouping+0x44>)
 8100602:	68db      	ldr	r3, [r3, #12]
 8100604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8100606:	68ba      	ldr	r2, [r7, #8]
 8100608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 810060c:	4013      	ands	r3, r2
 810060e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100610:	68fb      	ldr	r3, [r7, #12]
 8100612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100614:	68bb      	ldr	r3, [r7, #8]
 8100616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8100618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 810061c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8100620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8100622:	4a04      	ldr	r2, [pc, #16]	; (8100634 <__NVIC_SetPriorityGrouping+0x44>)
 8100624:	68bb      	ldr	r3, [r7, #8]
 8100626:	60d3      	str	r3, [r2, #12]
}
 8100628:	bf00      	nop
 810062a:	3714      	adds	r7, #20
 810062c:	46bd      	mov	sp, r7
 810062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100632:	4770      	bx	lr
 8100634:	e000ed00 	.word	0xe000ed00

08100638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8100638:	b480      	push	{r7}
 810063a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 810063c:	4b04      	ldr	r3, [pc, #16]	; (8100650 <__NVIC_GetPriorityGrouping+0x18>)
 810063e:	68db      	ldr	r3, [r3, #12]
 8100640:	0a1b      	lsrs	r3, r3, #8
 8100642:	f003 0307 	and.w	r3, r3, #7
}
 8100646:	4618      	mov	r0, r3
 8100648:	46bd      	mov	sp, r7
 810064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810064e:	4770      	bx	lr
 8100650:	e000ed00 	.word	0xe000ed00

08100654 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8100654:	b480      	push	{r7}
 8100656:	b083      	sub	sp, #12
 8100658:	af00      	add	r7, sp, #0
 810065a:	4603      	mov	r3, r0
 810065c:	6039      	str	r1, [r7, #0]
 810065e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8100660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8100664:	2b00      	cmp	r3, #0
 8100666:	db0a      	blt.n	810067e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100668:	683b      	ldr	r3, [r7, #0]
 810066a:	b2da      	uxtb	r2, r3
 810066c:	490c      	ldr	r1, [pc, #48]	; (81006a0 <__NVIC_SetPriority+0x4c>)
 810066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8100672:	0112      	lsls	r2, r2, #4
 8100674:	b2d2      	uxtb	r2, r2
 8100676:	440b      	add	r3, r1
 8100678:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 810067c:	e00a      	b.n	8100694 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810067e:	683b      	ldr	r3, [r7, #0]
 8100680:	b2da      	uxtb	r2, r3
 8100682:	4908      	ldr	r1, [pc, #32]	; (81006a4 <__NVIC_SetPriority+0x50>)
 8100684:	79fb      	ldrb	r3, [r7, #7]
 8100686:	f003 030f 	and.w	r3, r3, #15
 810068a:	3b04      	subs	r3, #4
 810068c:	0112      	lsls	r2, r2, #4
 810068e:	b2d2      	uxtb	r2, r2
 8100690:	440b      	add	r3, r1
 8100692:	761a      	strb	r2, [r3, #24]
}
 8100694:	bf00      	nop
 8100696:	370c      	adds	r7, #12
 8100698:	46bd      	mov	sp, r7
 810069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810069e:	4770      	bx	lr
 81006a0:	e000e100 	.word	0xe000e100
 81006a4:	e000ed00 	.word	0xe000ed00

081006a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81006a8:	b480      	push	{r7}
 81006aa:	b089      	sub	sp, #36	; 0x24
 81006ac:	af00      	add	r7, sp, #0
 81006ae:	60f8      	str	r0, [r7, #12]
 81006b0:	60b9      	str	r1, [r7, #8]
 81006b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81006b4:	68fb      	ldr	r3, [r7, #12]
 81006b6:	f003 0307 	and.w	r3, r3, #7
 81006ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81006bc:	69fb      	ldr	r3, [r7, #28]
 81006be:	f1c3 0307 	rsb	r3, r3, #7
 81006c2:	2b04      	cmp	r3, #4
 81006c4:	bf28      	it	cs
 81006c6:	2304      	movcs	r3, #4
 81006c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81006ca:	69fb      	ldr	r3, [r7, #28]
 81006cc:	3304      	adds	r3, #4
 81006ce:	2b06      	cmp	r3, #6
 81006d0:	d902      	bls.n	81006d8 <NVIC_EncodePriority+0x30>
 81006d2:	69fb      	ldr	r3, [r7, #28]
 81006d4:	3b03      	subs	r3, #3
 81006d6:	e000      	b.n	81006da <NVIC_EncodePriority+0x32>
 81006d8:	2300      	movs	r3, #0
 81006da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81006dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 81006e0:	69bb      	ldr	r3, [r7, #24]
 81006e2:	fa02 f303 	lsl.w	r3, r2, r3
 81006e6:	43da      	mvns	r2, r3
 81006e8:	68bb      	ldr	r3, [r7, #8]
 81006ea:	401a      	ands	r2, r3
 81006ec:	697b      	ldr	r3, [r7, #20]
 81006ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81006f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 81006f4:	697b      	ldr	r3, [r7, #20]
 81006f6:	fa01 f303 	lsl.w	r3, r1, r3
 81006fa:	43d9      	mvns	r1, r3
 81006fc:	687b      	ldr	r3, [r7, #4]
 81006fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100700:	4313      	orrs	r3, r2
         );
}
 8100702:	4618      	mov	r0, r3
 8100704:	3724      	adds	r7, #36	; 0x24
 8100706:	46bd      	mov	sp, r7
 8100708:	f85d 7b04 	ldr.w	r7, [sp], #4
 810070c:	4770      	bx	lr
	...

08100710 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8100710:	b580      	push	{r7, lr}
 8100712:	b082      	sub	sp, #8
 8100714:	af00      	add	r7, sp, #0
 8100716:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8100718:	687b      	ldr	r3, [r7, #4]
 810071a:	3b01      	subs	r3, #1
 810071c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8100720:	d301      	bcc.n	8100726 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8100722:	2301      	movs	r3, #1
 8100724:	e00f      	b.n	8100746 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8100726:	4a0a      	ldr	r2, [pc, #40]	; (8100750 <SysTick_Config+0x40>)
 8100728:	687b      	ldr	r3, [r7, #4]
 810072a:	3b01      	subs	r3, #1
 810072c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 810072e:	210f      	movs	r1, #15
 8100730:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8100734:	f7ff ff8e 	bl	8100654 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8100738:	4b05      	ldr	r3, [pc, #20]	; (8100750 <SysTick_Config+0x40>)
 810073a:	2200      	movs	r2, #0
 810073c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 810073e:	4b04      	ldr	r3, [pc, #16]	; (8100750 <SysTick_Config+0x40>)
 8100740:	2207      	movs	r2, #7
 8100742:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8100744:	2300      	movs	r3, #0
}
 8100746:	4618      	mov	r0, r3
 8100748:	3708      	adds	r7, #8
 810074a:	46bd      	mov	sp, r7
 810074c:	bd80      	pop	{r7, pc}
 810074e:	bf00      	nop
 8100750:	e000e010 	.word	0xe000e010

08100754 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100754:	b580      	push	{r7, lr}
 8100756:	b082      	sub	sp, #8
 8100758:	af00      	add	r7, sp, #0
 810075a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 810075c:	6878      	ldr	r0, [r7, #4]
 810075e:	f7ff ff47 	bl	81005f0 <__NVIC_SetPriorityGrouping>
}
 8100762:	bf00      	nop
 8100764:	3708      	adds	r7, #8
 8100766:	46bd      	mov	sp, r7
 8100768:	bd80      	pop	{r7, pc}

0810076a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810076a:	b580      	push	{r7, lr}
 810076c:	b086      	sub	sp, #24
 810076e:	af00      	add	r7, sp, #0
 8100770:	4603      	mov	r3, r0
 8100772:	60b9      	str	r1, [r7, #8]
 8100774:	607a      	str	r2, [r7, #4]
 8100776:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8100778:	f7ff ff5e 	bl	8100638 <__NVIC_GetPriorityGrouping>
 810077c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810077e:	687a      	ldr	r2, [r7, #4]
 8100780:	68b9      	ldr	r1, [r7, #8]
 8100782:	6978      	ldr	r0, [r7, #20]
 8100784:	f7ff ff90 	bl	81006a8 <NVIC_EncodePriority>
 8100788:	4602      	mov	r2, r0
 810078a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810078e:	4611      	mov	r1, r2
 8100790:	4618      	mov	r0, r3
 8100792:	f7ff ff5f 	bl	8100654 <__NVIC_SetPriority>
}
 8100796:	bf00      	nop
 8100798:	3718      	adds	r7, #24
 810079a:	46bd      	mov	sp, r7
 810079c:	bd80      	pop	{r7, pc}

0810079e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 810079e:	b580      	push	{r7, lr}
 81007a0:	b082      	sub	sp, #8
 81007a2:	af00      	add	r7, sp, #0
 81007a4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 81007a6:	6878      	ldr	r0, [r7, #4]
 81007a8:	f7ff ffb2 	bl	8100710 <SysTick_Config>
 81007ac:	4603      	mov	r3, r0
}
 81007ae:	4618      	mov	r0, r3
 81007b0:	3708      	adds	r7, #8
 81007b2:	46bd      	mov	sp, r7
 81007b4:	bd80      	pop	{r7, pc}
	...

081007b8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 81007b8:	b480      	push	{r7}
 81007ba:	b089      	sub	sp, #36	; 0x24
 81007bc:	af00      	add	r7, sp, #0
 81007be:	6078      	str	r0, [r7, #4]
 81007c0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 81007c2:	2300      	movs	r3, #0
 81007c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 81007c6:	687b      	ldr	r3, [r7, #4]
 81007c8:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 81007ca:	e1ba      	b.n	8100b42 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 81007cc:	683b      	ldr	r3, [r7, #0]
 81007ce:	681a      	ldr	r2, [r3, #0]
 81007d0:	2101      	movs	r1, #1
 81007d2:	697b      	ldr	r3, [r7, #20]
 81007d4:	fa01 f303 	lsl.w	r3, r1, r3
 81007d8:	4013      	ands	r3, r2
 81007da:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 81007dc:	697b      	ldr	r3, [r7, #20]
 81007de:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 81007e0:	68fb      	ldr	r3, [r7, #12]
 81007e2:	2b00      	cmp	r3, #0
 81007e4:	f000 81aa 	beq.w	8100b3c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 81007e8:	687b      	ldr	r3, [r7, #4]
 81007ea:	4a55      	ldr	r2, [pc, #340]	; (8100940 <HAL_GPIO_Init+0x188>)
 81007ec:	4293      	cmp	r3, r2
 81007ee:	d15d      	bne.n	81008ac <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 81007f0:	687b      	ldr	r3, [r7, #4]
 81007f2:	681b      	ldr	r3, [r3, #0]
 81007f4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 81007f6:	2201      	movs	r2, #1
 81007f8:	697b      	ldr	r3, [r7, #20]
 81007fa:	fa02 f303 	lsl.w	r3, r2, r3
 81007fe:	43db      	mvns	r3, r3
 8100800:	69fa      	ldr	r2, [r7, #28]
 8100802:	4013      	ands	r3, r2
 8100804:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8100806:	683b      	ldr	r3, [r7, #0]
 8100808:	685b      	ldr	r3, [r3, #4]
 810080a:	f003 0201 	and.w	r2, r3, #1
 810080e:	697b      	ldr	r3, [r7, #20]
 8100810:	fa02 f303 	lsl.w	r3, r2, r3
 8100814:	69fa      	ldr	r2, [r7, #28]
 8100816:	4313      	orrs	r3, r2
 8100818:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 810081a:	687b      	ldr	r3, [r7, #4]
 810081c:	69fa      	ldr	r2, [r7, #28]
 810081e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8100820:	4a48      	ldr	r2, [pc, #288]	; (8100944 <HAL_GPIO_Init+0x18c>)
 8100822:	697b      	ldr	r3, [r7, #20]
 8100824:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8100828:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 810082a:	4a46      	ldr	r2, [pc, #280]	; (8100944 <HAL_GPIO_Init+0x18c>)
 810082c:	697b      	ldr	r3, [r7, #20]
 810082e:	00db      	lsls	r3, r3, #3
 8100830:	4413      	add	r3, r2
 8100832:	685b      	ldr	r3, [r3, #4]
 8100834:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8100836:	69bb      	ldr	r3, [r7, #24]
 8100838:	08da      	lsrs	r2, r3, #3
 810083a:	693b      	ldr	r3, [r7, #16]
 810083c:	3208      	adds	r2, #8
 810083e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8100842:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8100844:	69bb      	ldr	r3, [r7, #24]
 8100846:	f003 0307 	and.w	r3, r3, #7
 810084a:	009b      	lsls	r3, r3, #2
 810084c:	220f      	movs	r2, #15
 810084e:	fa02 f303 	lsl.w	r3, r2, r3
 8100852:	43db      	mvns	r3, r3
 8100854:	69fa      	ldr	r2, [r7, #28]
 8100856:	4013      	ands	r3, r2
 8100858:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 810085a:	69bb      	ldr	r3, [r7, #24]
 810085c:	f003 0307 	and.w	r3, r3, #7
 8100860:	009b      	lsls	r3, r3, #2
 8100862:	220b      	movs	r2, #11
 8100864:	fa02 f303 	lsl.w	r3, r2, r3
 8100868:	69fa      	ldr	r2, [r7, #28]
 810086a:	4313      	orrs	r3, r2
 810086c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 810086e:	69bb      	ldr	r3, [r7, #24]
 8100870:	08da      	lsrs	r2, r3, #3
 8100872:	693b      	ldr	r3, [r7, #16]
 8100874:	3208      	adds	r2, #8
 8100876:	69f9      	ldr	r1, [r7, #28]
 8100878:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 810087c:	693b      	ldr	r3, [r7, #16]
 810087e:	681b      	ldr	r3, [r3, #0]
 8100880:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8100882:	69bb      	ldr	r3, [r7, #24]
 8100884:	005b      	lsls	r3, r3, #1
 8100886:	2203      	movs	r2, #3
 8100888:	fa02 f303 	lsl.w	r3, r2, r3
 810088c:	43db      	mvns	r3, r3
 810088e:	69fa      	ldr	r2, [r7, #28]
 8100890:	4013      	ands	r3, r2
 8100892:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8100894:	69bb      	ldr	r3, [r7, #24]
 8100896:	005b      	lsls	r3, r3, #1
 8100898:	2202      	movs	r2, #2
 810089a:	fa02 f303 	lsl.w	r3, r2, r3
 810089e:	69fa      	ldr	r2, [r7, #28]
 81008a0:	4313      	orrs	r3, r2
 81008a2:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 81008a4:	693b      	ldr	r3, [r7, #16]
 81008a6:	69fa      	ldr	r2, [r7, #28]
 81008a8:	601a      	str	r2, [r3, #0]
 81008aa:	e067      	b.n	810097c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 81008ac:	683b      	ldr	r3, [r7, #0]
 81008ae:	685b      	ldr	r3, [r3, #4]
 81008b0:	2b02      	cmp	r3, #2
 81008b2:	d003      	beq.n	81008bc <HAL_GPIO_Init+0x104>
 81008b4:	683b      	ldr	r3, [r7, #0]
 81008b6:	685b      	ldr	r3, [r3, #4]
 81008b8:	2b12      	cmp	r3, #18
 81008ba:	d145      	bne.n	8100948 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 81008bc:	697b      	ldr	r3, [r7, #20]
 81008be:	08da      	lsrs	r2, r3, #3
 81008c0:	687b      	ldr	r3, [r7, #4]
 81008c2:	3208      	adds	r2, #8
 81008c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81008c8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 81008ca:	697b      	ldr	r3, [r7, #20]
 81008cc:	f003 0307 	and.w	r3, r3, #7
 81008d0:	009b      	lsls	r3, r3, #2
 81008d2:	220f      	movs	r2, #15
 81008d4:	fa02 f303 	lsl.w	r3, r2, r3
 81008d8:	43db      	mvns	r3, r3
 81008da:	69fa      	ldr	r2, [r7, #28]
 81008dc:	4013      	ands	r3, r2
 81008de:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 81008e0:	683b      	ldr	r3, [r7, #0]
 81008e2:	691b      	ldr	r3, [r3, #16]
 81008e4:	f003 020f 	and.w	r2, r3, #15
 81008e8:	697b      	ldr	r3, [r7, #20]
 81008ea:	f003 0307 	and.w	r3, r3, #7
 81008ee:	009b      	lsls	r3, r3, #2
 81008f0:	fa02 f303 	lsl.w	r3, r2, r3
 81008f4:	69fa      	ldr	r2, [r7, #28]
 81008f6:	4313      	orrs	r3, r2
 81008f8:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 81008fa:	697b      	ldr	r3, [r7, #20]
 81008fc:	08da      	lsrs	r2, r3, #3
 81008fe:	687b      	ldr	r3, [r7, #4]
 8100900:	3208      	adds	r2, #8
 8100902:	69f9      	ldr	r1, [r7, #28]
 8100904:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8100908:	693b      	ldr	r3, [r7, #16]
 810090a:	681b      	ldr	r3, [r3, #0]
 810090c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 810090e:	69bb      	ldr	r3, [r7, #24]
 8100910:	005b      	lsls	r3, r3, #1
 8100912:	2203      	movs	r2, #3
 8100914:	fa02 f303 	lsl.w	r3, r2, r3
 8100918:	43db      	mvns	r3, r3
 810091a:	69fa      	ldr	r2, [r7, #28]
 810091c:	4013      	ands	r3, r2
 810091e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8100920:	683b      	ldr	r3, [r7, #0]
 8100922:	685b      	ldr	r3, [r3, #4]
 8100924:	f003 0203 	and.w	r2, r3, #3
 8100928:	69bb      	ldr	r3, [r7, #24]
 810092a:	005b      	lsls	r3, r3, #1
 810092c:	fa02 f303 	lsl.w	r3, r2, r3
 8100930:	69fa      	ldr	r2, [r7, #28]
 8100932:	4313      	orrs	r3, r2
 8100934:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8100936:	693b      	ldr	r3, [r7, #16]
 8100938:	69fa      	ldr	r2, [r7, #28]
 810093a:	601a      	str	r2, [r3, #0]
 810093c:	e01e      	b.n	810097c <HAL_GPIO_Init+0x1c4>
 810093e:	bf00      	nop
 8100940:	46020000 	.word	0x46020000
 8100944:	08102290 	.word	0x08102290
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8100948:	693b      	ldr	r3, [r7, #16]
 810094a:	681b      	ldr	r3, [r3, #0]
 810094c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 810094e:	69bb      	ldr	r3, [r7, #24]
 8100950:	005b      	lsls	r3, r3, #1
 8100952:	2203      	movs	r2, #3
 8100954:	fa02 f303 	lsl.w	r3, r2, r3
 8100958:	43db      	mvns	r3, r3
 810095a:	69fa      	ldr	r2, [r7, #28]
 810095c:	4013      	ands	r3, r2
 810095e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8100960:	683b      	ldr	r3, [r7, #0]
 8100962:	685b      	ldr	r3, [r3, #4]
 8100964:	f003 0203 	and.w	r2, r3, #3
 8100968:	69bb      	ldr	r3, [r7, #24]
 810096a:	005b      	lsls	r3, r3, #1
 810096c:	fa02 f303 	lsl.w	r3, r2, r3
 8100970:	69fa      	ldr	r2, [r7, #28]
 8100972:	4313      	orrs	r3, r2
 8100974:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8100976:	693b      	ldr	r3, [r7, #16]
 8100978:	69fa      	ldr	r2, [r7, #28]
 810097a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 810097c:	683b      	ldr	r3, [r7, #0]
 810097e:	685b      	ldr	r3, [r3, #4]
 8100980:	2b01      	cmp	r3, #1
 8100982:	d00b      	beq.n	810099c <HAL_GPIO_Init+0x1e4>
 8100984:	683b      	ldr	r3, [r7, #0]
 8100986:	685b      	ldr	r3, [r3, #4]
 8100988:	2b02      	cmp	r3, #2
 810098a:	d007      	beq.n	810099c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 810098c:	683b      	ldr	r3, [r7, #0]
 810098e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8100990:	2b11      	cmp	r3, #17
 8100992:	d003      	beq.n	810099c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8100994:	683b      	ldr	r3, [r7, #0]
 8100996:	685b      	ldr	r3, [r3, #4]
 8100998:	2b12      	cmp	r3, #18
 810099a:	d130      	bne.n	81009fe <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 810099c:	693b      	ldr	r3, [r7, #16]
 810099e:	689b      	ldr	r3, [r3, #8]
 81009a0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 81009a2:	69bb      	ldr	r3, [r7, #24]
 81009a4:	005b      	lsls	r3, r3, #1
 81009a6:	2203      	movs	r2, #3
 81009a8:	fa02 f303 	lsl.w	r3, r2, r3
 81009ac:	43db      	mvns	r3, r3
 81009ae:	69fa      	ldr	r2, [r7, #28]
 81009b0:	4013      	ands	r3, r2
 81009b2:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 81009b4:	683b      	ldr	r3, [r7, #0]
 81009b6:	68da      	ldr	r2, [r3, #12]
 81009b8:	69bb      	ldr	r3, [r7, #24]
 81009ba:	005b      	lsls	r3, r3, #1
 81009bc:	fa02 f303 	lsl.w	r3, r2, r3
 81009c0:	69fa      	ldr	r2, [r7, #28]
 81009c2:	4313      	orrs	r3, r2
 81009c4:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 81009c6:	693b      	ldr	r3, [r7, #16]
 81009c8:	69fa      	ldr	r2, [r7, #28]
 81009ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 81009cc:	693b      	ldr	r3, [r7, #16]
 81009ce:	685b      	ldr	r3, [r3, #4]
 81009d0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 81009d2:	2201      	movs	r2, #1
 81009d4:	69bb      	ldr	r3, [r7, #24]
 81009d6:	fa02 f303 	lsl.w	r3, r2, r3
 81009da:	43db      	mvns	r3, r3
 81009dc:	69fa      	ldr	r2, [r7, #28]
 81009de:	4013      	ands	r3, r2
 81009e0:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 81009e2:	683b      	ldr	r3, [r7, #0]
 81009e4:	685b      	ldr	r3, [r3, #4]
 81009e6:	091b      	lsrs	r3, r3, #4
 81009e8:	f003 0201 	and.w	r2, r3, #1
 81009ec:	69bb      	ldr	r3, [r7, #24]
 81009ee:	fa02 f303 	lsl.w	r3, r2, r3
 81009f2:	69fa      	ldr	r2, [r7, #28]
 81009f4:	4313      	orrs	r3, r2
 81009f6:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 81009f8:	693b      	ldr	r3, [r7, #16]
 81009fa:	69fa      	ldr	r2, [r7, #28]
 81009fc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 81009fe:	683b      	ldr	r3, [r7, #0]
 8100a00:	685b      	ldr	r3, [r3, #4]
 8100a02:	2b03      	cmp	r3, #3
 8100a04:	d017      	beq.n	8100a36 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8100a06:	693b      	ldr	r3, [r7, #16]
 8100a08:	68db      	ldr	r3, [r3, #12]
 8100a0a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8100a0c:	69bb      	ldr	r3, [r7, #24]
 8100a0e:	005b      	lsls	r3, r3, #1
 8100a10:	2203      	movs	r2, #3
 8100a12:	fa02 f303 	lsl.w	r3, r2, r3
 8100a16:	43db      	mvns	r3, r3
 8100a18:	69fa      	ldr	r2, [r7, #28]
 8100a1a:	4013      	ands	r3, r2
 8100a1c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8100a1e:	683b      	ldr	r3, [r7, #0]
 8100a20:	689a      	ldr	r2, [r3, #8]
 8100a22:	69bb      	ldr	r3, [r7, #24]
 8100a24:	005b      	lsls	r3, r3, #1
 8100a26:	fa02 f303 	lsl.w	r3, r2, r3
 8100a2a:	69fa      	ldr	r2, [r7, #28]
 8100a2c:	4313      	orrs	r3, r2
 8100a2e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8100a30:	693b      	ldr	r3, [r7, #16]
 8100a32:	69fa      	ldr	r2, [r7, #28]
 8100a34:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8100a36:	683b      	ldr	r3, [r7, #0]
 8100a38:	685b      	ldr	r3, [r3, #4]
 8100a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8100a3e:	2b00      	cmp	r3, #0
 8100a40:	d07c      	beq.n	8100b3c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8100a42:	4a47      	ldr	r2, [pc, #284]	; (8100b60 <HAL_GPIO_Init+0x3a8>)
 8100a44:	697b      	ldr	r3, [r7, #20]
 8100a46:	089b      	lsrs	r3, r3, #2
 8100a48:	3318      	adds	r3, #24
 8100a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100a4e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8100a50:	697b      	ldr	r3, [r7, #20]
 8100a52:	f003 0303 	and.w	r3, r3, #3
 8100a56:	00db      	lsls	r3, r3, #3
 8100a58:	220f      	movs	r2, #15
 8100a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8100a5e:	43db      	mvns	r3, r3
 8100a60:	69fa      	ldr	r2, [r7, #28]
 8100a62:	4013      	ands	r3, r2
 8100a64:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8100a66:	687b      	ldr	r3, [r7, #4]
 8100a68:	0a9a      	lsrs	r2, r3, #10
 8100a6a:	4b3e      	ldr	r3, [pc, #248]	; (8100b64 <HAL_GPIO_Init+0x3ac>)
 8100a6c:	4013      	ands	r3, r2
 8100a6e:	697a      	ldr	r2, [r7, #20]
 8100a70:	f002 0203 	and.w	r2, r2, #3
 8100a74:	00d2      	lsls	r2, r2, #3
 8100a76:	4093      	lsls	r3, r2
 8100a78:	69fa      	ldr	r2, [r7, #28]
 8100a7a:	4313      	orrs	r3, r2
 8100a7c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8100a7e:	4938      	ldr	r1, [pc, #224]	; (8100b60 <HAL_GPIO_Init+0x3a8>)
 8100a80:	697b      	ldr	r3, [r7, #20]
 8100a82:	089b      	lsrs	r3, r3, #2
 8100a84:	3318      	adds	r3, #24
 8100a86:	69fa      	ldr	r2, [r7, #28]
 8100a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8100a8c:	4b34      	ldr	r3, [pc, #208]	; (8100b60 <HAL_GPIO_Init+0x3a8>)
 8100a8e:	681b      	ldr	r3, [r3, #0]
 8100a90:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8100a92:	68fb      	ldr	r3, [r7, #12]
 8100a94:	43db      	mvns	r3, r3
 8100a96:	69fa      	ldr	r2, [r7, #28]
 8100a98:	4013      	ands	r3, r2
 8100a9a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8100a9c:	683b      	ldr	r3, [r7, #0]
 8100a9e:	685b      	ldr	r3, [r3, #4]
 8100aa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8100aa4:	2b00      	cmp	r3, #0
 8100aa6:	d003      	beq.n	8100ab0 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8100aa8:	69fa      	ldr	r2, [r7, #28]
 8100aaa:	68fb      	ldr	r3, [r7, #12]
 8100aac:	4313      	orrs	r3, r2
 8100aae:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8100ab0:	4a2b      	ldr	r2, [pc, #172]	; (8100b60 <HAL_GPIO_Init+0x3a8>)
 8100ab2:	69fb      	ldr	r3, [r7, #28]
 8100ab4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8100ab6:	4b2a      	ldr	r3, [pc, #168]	; (8100b60 <HAL_GPIO_Init+0x3a8>)
 8100ab8:	685b      	ldr	r3, [r3, #4]
 8100aba:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8100abc:	68fb      	ldr	r3, [r7, #12]
 8100abe:	43db      	mvns	r3, r3
 8100ac0:	69fa      	ldr	r2, [r7, #28]
 8100ac2:	4013      	ands	r3, r2
 8100ac4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8100ac6:	683b      	ldr	r3, [r7, #0]
 8100ac8:	685b      	ldr	r3, [r3, #4]
 8100aca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8100ace:	2b00      	cmp	r3, #0
 8100ad0:	d003      	beq.n	8100ada <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8100ad2:	69fa      	ldr	r2, [r7, #28]
 8100ad4:	68fb      	ldr	r3, [r7, #12]
 8100ad6:	4313      	orrs	r3, r2
 8100ad8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8100ada:	4a21      	ldr	r2, [pc, #132]	; (8100b60 <HAL_GPIO_Init+0x3a8>)
 8100adc:	69fb      	ldr	r3, [r7, #28]
 8100ade:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8100ae0:	4b1f      	ldr	r3, [pc, #124]	; (8100b60 <HAL_GPIO_Init+0x3a8>)
 8100ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8100ae6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8100ae8:	68fb      	ldr	r3, [r7, #12]
 8100aea:	43db      	mvns	r3, r3
 8100aec:	69fa      	ldr	r2, [r7, #28]
 8100aee:	4013      	ands	r3, r2
 8100af0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8100af2:	683b      	ldr	r3, [r7, #0]
 8100af4:	685b      	ldr	r3, [r3, #4]
 8100af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8100afa:	2b00      	cmp	r3, #0
 8100afc:	d003      	beq.n	8100b06 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8100afe:	69fa      	ldr	r2, [r7, #28]
 8100b00:	68fb      	ldr	r3, [r7, #12]
 8100b02:	4313      	orrs	r3, r2
 8100b04:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8100b06:	4a16      	ldr	r2, [pc, #88]	; (8100b60 <HAL_GPIO_Init+0x3a8>)
 8100b08:	69fb      	ldr	r3, [r7, #28]
 8100b0a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8100b0e:	4b14      	ldr	r3, [pc, #80]	; (8100b60 <HAL_GPIO_Init+0x3a8>)
 8100b10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8100b14:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8100b16:	68fb      	ldr	r3, [r7, #12]
 8100b18:	43db      	mvns	r3, r3
 8100b1a:	69fa      	ldr	r2, [r7, #28]
 8100b1c:	4013      	ands	r3, r2
 8100b1e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8100b20:	683b      	ldr	r3, [r7, #0]
 8100b22:	685b      	ldr	r3, [r3, #4]
 8100b24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8100b28:	2b00      	cmp	r3, #0
 8100b2a:	d003      	beq.n	8100b34 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8100b2c:	69fa      	ldr	r2, [r7, #28]
 8100b2e:	68fb      	ldr	r3, [r7, #12]
 8100b30:	4313      	orrs	r3, r2
 8100b32:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8100b34:	4a0a      	ldr	r2, [pc, #40]	; (8100b60 <HAL_GPIO_Init+0x3a8>)
 8100b36:	69fb      	ldr	r3, [r7, #28]
 8100b38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8100b3c:	697b      	ldr	r3, [r7, #20]
 8100b3e:	3301      	adds	r3, #1
 8100b40:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8100b42:	683b      	ldr	r3, [r7, #0]
 8100b44:	681a      	ldr	r2, [r3, #0]
 8100b46:	697b      	ldr	r3, [r7, #20]
 8100b48:	fa22 f303 	lsr.w	r3, r2, r3
 8100b4c:	2b00      	cmp	r3, #0
 8100b4e:	f47f ae3d 	bne.w	81007cc <HAL_GPIO_Init+0x14>
  }
}
 8100b52:	bf00      	nop
 8100b54:	bf00      	nop
 8100b56:	3724      	adds	r7, #36	; 0x24
 8100b58:	46bd      	mov	sp, r7
 8100b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b5e:	4770      	bx	lr
 8100b60:	46022000 	.word	0x46022000
 8100b64:	002f7f7f 	.word	0x002f7f7f

08100b68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8100b68:	b480      	push	{r7}
 8100b6a:	b083      	sub	sp, #12
 8100b6c:	af00      	add	r7, sp, #0
 8100b6e:	6078      	str	r0, [r7, #4]
 8100b70:	460b      	mov	r3, r1
 8100b72:	807b      	strh	r3, [r7, #2]
 8100b74:	4613      	mov	r3, r2
 8100b76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8100b78:	787b      	ldrb	r3, [r7, #1]
 8100b7a:	2b00      	cmp	r3, #0
 8100b7c:	d003      	beq.n	8100b86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8100b7e:	887a      	ldrh	r2, [r7, #2]
 8100b80:	687b      	ldr	r3, [r7, #4]
 8100b82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8100b84:	e002      	b.n	8100b8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8100b86:	887a      	ldrh	r2, [r7, #2]
 8100b88:	687b      	ldr	r3, [r7, #4]
 8100b8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8100b8c:	bf00      	nop
 8100b8e:	370c      	adds	r7, #12
 8100b90:	46bd      	mov	sp, r7
 8100b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b96:	4770      	bx	lr

08100b98 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8100b98:	b480      	push	{r7}
 8100b9a:	b085      	sub	sp, #20
 8100b9c:	af00      	add	r7, sp, #0
 8100b9e:	6078      	str	r0, [r7, #4]
 8100ba0:	460b      	mov	r3, r1
 8100ba2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8100ba4:	687b      	ldr	r3, [r7, #4]
 8100ba6:	695b      	ldr	r3, [r3, #20]
 8100ba8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8100baa:	887a      	ldrh	r2, [r7, #2]
 8100bac:	68fb      	ldr	r3, [r7, #12]
 8100bae:	4013      	ands	r3, r2
 8100bb0:	041a      	lsls	r2, r3, #16
 8100bb2:	68fb      	ldr	r3, [r7, #12]
 8100bb4:	43d9      	mvns	r1, r3
 8100bb6:	887b      	ldrh	r3, [r7, #2]
 8100bb8:	400b      	ands	r3, r1
 8100bba:	431a      	orrs	r2, r3
 8100bbc:	687b      	ldr	r3, [r7, #4]
 8100bbe:	619a      	str	r2, [r3, #24]
}
 8100bc0:	bf00      	nop
 8100bc2:	3714      	adds	r7, #20
 8100bc4:	46bd      	mov	sp, r7
 8100bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100bca:	4770      	bx	lr

08100bcc <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8100bcc:	b480      	push	{r7}
 8100bce:	b085      	sub	sp, #20
 8100bd0:	af00      	add	r7, sp, #0
 8100bd2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8100bd4:	4b39      	ldr	r3, [pc, #228]	; (8100cbc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8100bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8100bd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8100bdc:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8100bde:	68ba      	ldr	r2, [r7, #8]
 8100be0:	687b      	ldr	r3, [r7, #4]
 8100be2:	429a      	cmp	r2, r3
 8100be4:	d10b      	bne.n	8100bfe <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8100be6:	687b      	ldr	r3, [r7, #4]
 8100be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8100bec:	d905      	bls.n	8100bfa <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8100bee:	4b33      	ldr	r3, [pc, #204]	; (8100cbc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8100bf0:	68db      	ldr	r3, [r3, #12]
 8100bf2:	4a32      	ldr	r2, [pc, #200]	; (8100cbc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8100bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8100bf8:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8100bfa:	2300      	movs	r3, #0
 8100bfc:	e057      	b.n	8100cae <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8100bfe:	687b      	ldr	r3, [r7, #4]
 8100c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8100c04:	d90a      	bls.n	8100c1c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8100c06:	4b2d      	ldr	r3, [pc, #180]	; (8100cbc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8100c08:	68db      	ldr	r3, [r3, #12]
 8100c0a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8100c0e:	687b      	ldr	r3, [r7, #4]
 8100c10:	4313      	orrs	r3, r2
 8100c12:	4a2a      	ldr	r2, [pc, #168]	; (8100cbc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8100c14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8100c18:	60d3      	str	r3, [r2, #12]
 8100c1a:	e007      	b.n	8100c2c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8100c1c:	4b27      	ldr	r3, [pc, #156]	; (8100cbc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8100c1e:	68db      	ldr	r3, [r3, #12]
 8100c20:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8100c24:	4925      	ldr	r1, [pc, #148]	; (8100cbc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8100c26:	687b      	ldr	r3, [r7, #4]
 8100c28:	4313      	orrs	r3, r2
 8100c2a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8100c2c:	4b24      	ldr	r3, [pc, #144]	; (8100cc0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8100c2e:	681b      	ldr	r3, [r3, #0]
 8100c30:	4a24      	ldr	r2, [pc, #144]	; (8100cc4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8100c32:	fba2 2303 	umull	r2, r3, r2, r3
 8100c36:	099b      	lsrs	r3, r3, #6
 8100c38:	2232      	movs	r2, #50	; 0x32
 8100c3a:	fb02 f303 	mul.w	r3, r2, r3
 8100c3e:	4a21      	ldr	r2, [pc, #132]	; (8100cc4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8100c40:	fba2 2303 	umull	r2, r3, r2, r3
 8100c44:	099b      	lsrs	r3, r3, #6
 8100c46:	3301      	adds	r3, #1
 8100c48:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8100c4a:	e002      	b.n	8100c52 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8100c4c:	68fb      	ldr	r3, [r7, #12]
 8100c4e:	3b01      	subs	r3, #1
 8100c50:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8100c52:	4b1a      	ldr	r3, [pc, #104]	; (8100cbc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8100c54:	68db      	ldr	r3, [r3, #12]
 8100c56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8100c5a:	2b00      	cmp	r3, #0
 8100c5c:	d102      	bne.n	8100c64 <HAL_PWREx_ControlVoltageScaling+0x98>
 8100c5e:	68fb      	ldr	r3, [r7, #12]
 8100c60:	2b00      	cmp	r3, #0
 8100c62:	d1f3      	bne.n	8100c4c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8100c64:	68fb      	ldr	r3, [r7, #12]
 8100c66:	2b00      	cmp	r3, #0
 8100c68:	d01b      	beq.n	8100ca2 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8100c6a:	4b15      	ldr	r3, [pc, #84]	; (8100cc0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8100c6c:	681b      	ldr	r3, [r3, #0]
 8100c6e:	4a15      	ldr	r2, [pc, #84]	; (8100cc4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8100c70:	fba2 2303 	umull	r2, r3, r2, r3
 8100c74:	099b      	lsrs	r3, r3, #6
 8100c76:	2232      	movs	r2, #50	; 0x32
 8100c78:	fb02 f303 	mul.w	r3, r2, r3
 8100c7c:	4a11      	ldr	r2, [pc, #68]	; (8100cc4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8100c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8100c82:	099b      	lsrs	r3, r3, #6
 8100c84:	3301      	adds	r3, #1
 8100c86:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8100c88:	e002      	b.n	8100c90 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8100c8a:	68fb      	ldr	r3, [r7, #12]
 8100c8c:	3b01      	subs	r3, #1
 8100c8e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8100c90:	4b0a      	ldr	r3, [pc, #40]	; (8100cbc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8100c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8100c94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8100c98:	2b00      	cmp	r3, #0
 8100c9a:	d102      	bne.n	8100ca2 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8100c9c:	68fb      	ldr	r3, [r7, #12]
 8100c9e:	2b00      	cmp	r3, #0
 8100ca0:	d1f3      	bne.n	8100c8a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8100ca2:	68fb      	ldr	r3, [r7, #12]
 8100ca4:	2b00      	cmp	r3, #0
 8100ca6:	d101      	bne.n	8100cac <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8100ca8:	2303      	movs	r3, #3
 8100caa:	e000      	b.n	8100cae <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8100cac:	2300      	movs	r3, #0
}
 8100cae:	4618      	mov	r0, r3
 8100cb0:	3714      	adds	r7, #20
 8100cb2:	46bd      	mov	sp, r7
 8100cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100cb8:	4770      	bx	lr
 8100cba:	bf00      	nop
 8100cbc:	46020800 	.word	0x46020800
 8100cc0:	20040004 	.word	0x20040004
 8100cc4:	10624dd3 	.word	0x10624dd3

08100cc8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8100cc8:	b480      	push	{r7}
 8100cca:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8100ccc:	4b04      	ldr	r3, [pc, #16]	; (8100ce0 <HAL_PWREx_GetVoltageRange+0x18>)
 8100cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8100cd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8100cd4:	4618      	mov	r0, r3
 8100cd6:	46bd      	mov	sp, r7
 8100cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100cdc:	4770      	bx	lr
 8100cde:	bf00      	nop
 8100ce0:	46020800 	.word	0x46020800

08100ce4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8100ce4:	b580      	push	{r7, lr}
 8100ce6:	b08e      	sub	sp, #56	; 0x38
 8100ce8:	af00      	add	r7, sp, #0
 8100cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8100cec:	2300      	movs	r3, #0
 8100cee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8100cf2:	687b      	ldr	r3, [r7, #4]
 8100cf4:	2b00      	cmp	r3, #0
 8100cf6:	d102      	bne.n	8100cfe <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8100cf8:	2301      	movs	r3, #1
 8100cfa:	f000 bec8 	b.w	8101a8e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8100cfe:	4b99      	ldr	r3, [pc, #612]	; (8100f64 <HAL_RCC_OscConfig+0x280>)
 8100d00:	69db      	ldr	r3, [r3, #28]
 8100d02:	f003 030c 	and.w	r3, r3, #12
 8100d06:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8100d08:	4b96      	ldr	r3, [pc, #600]	; (8100f64 <HAL_RCC_OscConfig+0x280>)
 8100d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8100d0c:	f003 0303 	and.w	r3, r3, #3
 8100d10:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8100d12:	687b      	ldr	r3, [r7, #4]
 8100d14:	681b      	ldr	r3, [r3, #0]
 8100d16:	f003 0310 	and.w	r3, r3, #16
 8100d1a:	2b00      	cmp	r3, #0
 8100d1c:	f000 816c 	beq.w	8100ff8 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8100d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8100d22:	2b00      	cmp	r3, #0
 8100d24:	d007      	beq.n	8100d36 <HAL_RCC_OscConfig+0x52>
 8100d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8100d28:	2b0c      	cmp	r3, #12
 8100d2a:	f040 80de 	bne.w	8100eea <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8100d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8100d30:	2b01      	cmp	r3, #1
 8100d32:	f040 80da 	bne.w	8100eea <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8100d36:	687b      	ldr	r3, [r7, #4]
 8100d38:	69db      	ldr	r3, [r3, #28]
 8100d3a:	2b00      	cmp	r3, #0
 8100d3c:	d102      	bne.n	8100d44 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8100d3e:	2301      	movs	r3, #1
 8100d40:	f000 bea5 	b.w	8101a8e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8100d44:	687b      	ldr	r3, [r7, #4]
 8100d46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8100d48:	4b86      	ldr	r3, [pc, #536]	; (8100f64 <HAL_RCC_OscConfig+0x280>)
 8100d4a:	689b      	ldr	r3, [r3, #8]
 8100d4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8100d50:	2b00      	cmp	r3, #0
 8100d52:	d004      	beq.n	8100d5e <HAL_RCC_OscConfig+0x7a>
 8100d54:	4b83      	ldr	r3, [pc, #524]	; (8100f64 <HAL_RCC_OscConfig+0x280>)
 8100d56:	689b      	ldr	r3, [r3, #8]
 8100d58:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8100d5c:	e005      	b.n	8100d6a <HAL_RCC_OscConfig+0x86>
 8100d5e:	4b81      	ldr	r3, [pc, #516]	; (8100f64 <HAL_RCC_OscConfig+0x280>)
 8100d60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100d64:	041b      	lsls	r3, r3, #16
 8100d66:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8100d6a:	4293      	cmp	r3, r2
 8100d6c:	d255      	bcs.n	8100e1a <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8100d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8100d70:	2b00      	cmp	r3, #0
 8100d72:	d10a      	bne.n	8100d8a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8100d74:	687b      	ldr	r3, [r7, #4]
 8100d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8100d78:	4618      	mov	r0, r3
 8100d7a:	f001 f99d 	bl	81020b8 <RCC_SetFlashLatencyFromMSIRange>
 8100d7e:	4603      	mov	r3, r0
 8100d80:	2b00      	cmp	r3, #0
 8100d82:	d002      	beq.n	8100d8a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8100d84:	2301      	movs	r3, #1
 8100d86:	f000 be82 	b.w	8101a8e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8100d8a:	4b76      	ldr	r3, [pc, #472]	; (8100f64 <HAL_RCC_OscConfig+0x280>)
 8100d8c:	689b      	ldr	r3, [r3, #8]
 8100d8e:	4a75      	ldr	r2, [pc, #468]	; (8100f64 <HAL_RCC_OscConfig+0x280>)
 8100d90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8100d94:	6093      	str	r3, [r2, #8]
 8100d96:	4b73      	ldr	r3, [pc, #460]	; (8100f64 <HAL_RCC_OscConfig+0x280>)
 8100d98:	689b      	ldr	r3, [r3, #8]
 8100d9a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8100d9e:	687b      	ldr	r3, [r7, #4]
 8100da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8100da2:	4970      	ldr	r1, [pc, #448]	; (8100f64 <HAL_RCC_OscConfig+0x280>)
 8100da4:	4313      	orrs	r3, r2
 8100da6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8100da8:	687b      	ldr	r3, [r7, #4]
 8100daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8100dac:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8100db0:	d309      	bcc.n	8100dc6 <HAL_RCC_OscConfig+0xe2>
 8100db2:	4b6c      	ldr	r3, [pc, #432]	; (8100f64 <HAL_RCC_OscConfig+0x280>)
 8100db4:	68db      	ldr	r3, [r3, #12]
 8100db6:	f023 021f 	bic.w	r2, r3, #31
 8100dba:	687b      	ldr	r3, [r7, #4]
 8100dbc:	6a1b      	ldr	r3, [r3, #32]
 8100dbe:	4969      	ldr	r1, [pc, #420]	; (8100f64 <HAL_RCC_OscConfig+0x280>)
 8100dc0:	4313      	orrs	r3, r2
 8100dc2:	60cb      	str	r3, [r1, #12]
 8100dc4:	e07e      	b.n	8100ec4 <HAL_RCC_OscConfig+0x1e0>
 8100dc6:	687b      	ldr	r3, [r7, #4]
 8100dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8100dca:	2b00      	cmp	r3, #0
 8100dcc:	da0a      	bge.n	8100de4 <HAL_RCC_OscConfig+0x100>
 8100dce:	4b65      	ldr	r3, [pc, #404]	; (8100f64 <HAL_RCC_OscConfig+0x280>)
 8100dd0:	68db      	ldr	r3, [r3, #12]
 8100dd2:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8100dd6:	687b      	ldr	r3, [r7, #4]
 8100dd8:	6a1b      	ldr	r3, [r3, #32]
 8100dda:	015b      	lsls	r3, r3, #5
 8100ddc:	4961      	ldr	r1, [pc, #388]	; (8100f64 <HAL_RCC_OscConfig+0x280>)
 8100dde:	4313      	orrs	r3, r2
 8100de0:	60cb      	str	r3, [r1, #12]
 8100de2:	e06f      	b.n	8100ec4 <HAL_RCC_OscConfig+0x1e0>
 8100de4:	687b      	ldr	r3, [r7, #4]
 8100de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8100de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8100dec:	d30a      	bcc.n	8100e04 <HAL_RCC_OscConfig+0x120>
 8100dee:	4b5d      	ldr	r3, [pc, #372]	; (8100f64 <HAL_RCC_OscConfig+0x280>)
 8100df0:	68db      	ldr	r3, [r3, #12]
 8100df2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8100df6:	687b      	ldr	r3, [r7, #4]
 8100df8:	6a1b      	ldr	r3, [r3, #32]
 8100dfa:	029b      	lsls	r3, r3, #10
 8100dfc:	4959      	ldr	r1, [pc, #356]	; (8100f64 <HAL_RCC_OscConfig+0x280>)
 8100dfe:	4313      	orrs	r3, r2
 8100e00:	60cb      	str	r3, [r1, #12]
 8100e02:	e05f      	b.n	8100ec4 <HAL_RCC_OscConfig+0x1e0>
 8100e04:	4b57      	ldr	r3, [pc, #348]	; (8100f64 <HAL_RCC_OscConfig+0x280>)
 8100e06:	68db      	ldr	r3, [r3, #12]
 8100e08:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8100e0c:	687b      	ldr	r3, [r7, #4]
 8100e0e:	6a1b      	ldr	r3, [r3, #32]
 8100e10:	03db      	lsls	r3, r3, #15
 8100e12:	4954      	ldr	r1, [pc, #336]	; (8100f64 <HAL_RCC_OscConfig+0x280>)
 8100e14:	4313      	orrs	r3, r2
 8100e16:	60cb      	str	r3, [r1, #12]
 8100e18:	e054      	b.n	8100ec4 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8100e1a:	4b52      	ldr	r3, [pc, #328]	; (8100f64 <HAL_RCC_OscConfig+0x280>)
 8100e1c:	689b      	ldr	r3, [r3, #8]
 8100e1e:	4a51      	ldr	r2, [pc, #324]	; (8100f64 <HAL_RCC_OscConfig+0x280>)
 8100e20:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8100e24:	6093      	str	r3, [r2, #8]
 8100e26:	4b4f      	ldr	r3, [pc, #316]	; (8100f64 <HAL_RCC_OscConfig+0x280>)
 8100e28:	689b      	ldr	r3, [r3, #8]
 8100e2a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8100e2e:	687b      	ldr	r3, [r7, #4]
 8100e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8100e32:	494c      	ldr	r1, [pc, #304]	; (8100f64 <HAL_RCC_OscConfig+0x280>)
 8100e34:	4313      	orrs	r3, r2
 8100e36:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8100e38:	687b      	ldr	r3, [r7, #4]
 8100e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8100e3c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8100e40:	d309      	bcc.n	8100e56 <HAL_RCC_OscConfig+0x172>
 8100e42:	4b48      	ldr	r3, [pc, #288]	; (8100f64 <HAL_RCC_OscConfig+0x280>)
 8100e44:	68db      	ldr	r3, [r3, #12]
 8100e46:	f023 021f 	bic.w	r2, r3, #31
 8100e4a:	687b      	ldr	r3, [r7, #4]
 8100e4c:	6a1b      	ldr	r3, [r3, #32]
 8100e4e:	4945      	ldr	r1, [pc, #276]	; (8100f64 <HAL_RCC_OscConfig+0x280>)
 8100e50:	4313      	orrs	r3, r2
 8100e52:	60cb      	str	r3, [r1, #12]
 8100e54:	e028      	b.n	8100ea8 <HAL_RCC_OscConfig+0x1c4>
 8100e56:	687b      	ldr	r3, [r7, #4]
 8100e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8100e5a:	2b00      	cmp	r3, #0
 8100e5c:	da0a      	bge.n	8100e74 <HAL_RCC_OscConfig+0x190>
 8100e5e:	4b41      	ldr	r3, [pc, #260]	; (8100f64 <HAL_RCC_OscConfig+0x280>)
 8100e60:	68db      	ldr	r3, [r3, #12]
 8100e62:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8100e66:	687b      	ldr	r3, [r7, #4]
 8100e68:	6a1b      	ldr	r3, [r3, #32]
 8100e6a:	015b      	lsls	r3, r3, #5
 8100e6c:	493d      	ldr	r1, [pc, #244]	; (8100f64 <HAL_RCC_OscConfig+0x280>)
 8100e6e:	4313      	orrs	r3, r2
 8100e70:	60cb      	str	r3, [r1, #12]
 8100e72:	e019      	b.n	8100ea8 <HAL_RCC_OscConfig+0x1c4>
 8100e74:	687b      	ldr	r3, [r7, #4]
 8100e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8100e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8100e7c:	d30a      	bcc.n	8100e94 <HAL_RCC_OscConfig+0x1b0>
 8100e7e:	4b39      	ldr	r3, [pc, #228]	; (8100f64 <HAL_RCC_OscConfig+0x280>)
 8100e80:	68db      	ldr	r3, [r3, #12]
 8100e82:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8100e86:	687b      	ldr	r3, [r7, #4]
 8100e88:	6a1b      	ldr	r3, [r3, #32]
 8100e8a:	029b      	lsls	r3, r3, #10
 8100e8c:	4935      	ldr	r1, [pc, #212]	; (8100f64 <HAL_RCC_OscConfig+0x280>)
 8100e8e:	4313      	orrs	r3, r2
 8100e90:	60cb      	str	r3, [r1, #12]
 8100e92:	e009      	b.n	8100ea8 <HAL_RCC_OscConfig+0x1c4>
 8100e94:	4b33      	ldr	r3, [pc, #204]	; (8100f64 <HAL_RCC_OscConfig+0x280>)
 8100e96:	68db      	ldr	r3, [r3, #12]
 8100e98:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8100e9c:	687b      	ldr	r3, [r7, #4]
 8100e9e:	6a1b      	ldr	r3, [r3, #32]
 8100ea0:	03db      	lsls	r3, r3, #15
 8100ea2:	4930      	ldr	r1, [pc, #192]	; (8100f64 <HAL_RCC_OscConfig+0x280>)
 8100ea4:	4313      	orrs	r3, r2
 8100ea6:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8100ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8100eaa:	2b00      	cmp	r3, #0
 8100eac:	d10a      	bne.n	8100ec4 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8100eae:	687b      	ldr	r3, [r7, #4]
 8100eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8100eb2:	4618      	mov	r0, r3
 8100eb4:	f001 f900 	bl	81020b8 <RCC_SetFlashLatencyFromMSIRange>
 8100eb8:	4603      	mov	r3, r0
 8100eba:	2b00      	cmp	r3, #0
 8100ebc:	d002      	beq.n	8100ec4 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8100ebe:	2301      	movs	r3, #1
 8100ec0:	f000 bde5 	b.w	8101a8e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8100ec4:	f001 f8de 	bl	8102084 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8100ec8:	4b27      	ldr	r3, [pc, #156]	; (8100f68 <HAL_RCC_OscConfig+0x284>)
 8100eca:	681b      	ldr	r3, [r3, #0]
 8100ecc:	4618      	mov	r0, r3
 8100ece:	f7ff fb39 	bl	8100544 <HAL_InitTick>
 8100ed2:	4603      	mov	r3, r0
 8100ed4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8100ed8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8100edc:	2b00      	cmp	r3, #0
 8100ede:	f000 808a 	beq.w	8100ff6 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8100ee2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8100ee6:	f000 bdd2 	b.w	8101a8e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8100eea:	687b      	ldr	r3, [r7, #4]
 8100eec:	69db      	ldr	r3, [r3, #28]
 8100eee:	2b00      	cmp	r3, #0
 8100ef0:	d066      	beq.n	8100fc0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8100ef2:	4b1c      	ldr	r3, [pc, #112]	; (8100f64 <HAL_RCC_OscConfig+0x280>)
 8100ef4:	681b      	ldr	r3, [r3, #0]
 8100ef6:	4a1b      	ldr	r2, [pc, #108]	; (8100f64 <HAL_RCC_OscConfig+0x280>)
 8100ef8:	f043 0301 	orr.w	r3, r3, #1
 8100efc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8100efe:	f7ff fb6b 	bl	81005d8 <HAL_GetTick>
 8100f02:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8100f04:	e009      	b.n	8100f1a <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8100f06:	f7ff fb67 	bl	81005d8 <HAL_GetTick>
 8100f0a:	4602      	mov	r2, r0
 8100f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8100f0e:	1ad3      	subs	r3, r2, r3
 8100f10:	2b02      	cmp	r3, #2
 8100f12:	d902      	bls.n	8100f1a <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8100f14:	2303      	movs	r3, #3
 8100f16:	f000 bdba 	b.w	8101a8e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8100f1a:	4b12      	ldr	r3, [pc, #72]	; (8100f64 <HAL_RCC_OscConfig+0x280>)
 8100f1c:	681b      	ldr	r3, [r3, #0]
 8100f1e:	f003 0304 	and.w	r3, r3, #4
 8100f22:	2b00      	cmp	r3, #0
 8100f24:	d0ef      	beq.n	8100f06 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8100f26:	4b0f      	ldr	r3, [pc, #60]	; (8100f64 <HAL_RCC_OscConfig+0x280>)
 8100f28:	689b      	ldr	r3, [r3, #8]
 8100f2a:	4a0e      	ldr	r2, [pc, #56]	; (8100f64 <HAL_RCC_OscConfig+0x280>)
 8100f2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8100f30:	6093      	str	r3, [r2, #8]
 8100f32:	4b0c      	ldr	r3, [pc, #48]	; (8100f64 <HAL_RCC_OscConfig+0x280>)
 8100f34:	689b      	ldr	r3, [r3, #8]
 8100f36:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8100f3a:	687b      	ldr	r3, [r7, #4]
 8100f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8100f3e:	4909      	ldr	r1, [pc, #36]	; (8100f64 <HAL_RCC_OscConfig+0x280>)
 8100f40:	4313      	orrs	r3, r2
 8100f42:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8100f44:	687b      	ldr	r3, [r7, #4]
 8100f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8100f48:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8100f4c:	d30e      	bcc.n	8100f6c <HAL_RCC_OscConfig+0x288>
 8100f4e:	4b05      	ldr	r3, [pc, #20]	; (8100f64 <HAL_RCC_OscConfig+0x280>)
 8100f50:	68db      	ldr	r3, [r3, #12]
 8100f52:	f023 021f 	bic.w	r2, r3, #31
 8100f56:	687b      	ldr	r3, [r7, #4]
 8100f58:	6a1b      	ldr	r3, [r3, #32]
 8100f5a:	4902      	ldr	r1, [pc, #8]	; (8100f64 <HAL_RCC_OscConfig+0x280>)
 8100f5c:	4313      	orrs	r3, r2
 8100f5e:	60cb      	str	r3, [r1, #12]
 8100f60:	e04a      	b.n	8100ff8 <HAL_RCC_OscConfig+0x314>
 8100f62:	bf00      	nop
 8100f64:	46020c00 	.word	0x46020c00
 8100f68:	20040008 	.word	0x20040008
 8100f6c:	687b      	ldr	r3, [r7, #4]
 8100f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8100f70:	2b00      	cmp	r3, #0
 8100f72:	da0a      	bge.n	8100f8a <HAL_RCC_OscConfig+0x2a6>
 8100f74:	4b98      	ldr	r3, [pc, #608]	; (81011d8 <HAL_RCC_OscConfig+0x4f4>)
 8100f76:	68db      	ldr	r3, [r3, #12]
 8100f78:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8100f7c:	687b      	ldr	r3, [r7, #4]
 8100f7e:	6a1b      	ldr	r3, [r3, #32]
 8100f80:	015b      	lsls	r3, r3, #5
 8100f82:	4995      	ldr	r1, [pc, #596]	; (81011d8 <HAL_RCC_OscConfig+0x4f4>)
 8100f84:	4313      	orrs	r3, r2
 8100f86:	60cb      	str	r3, [r1, #12]
 8100f88:	e036      	b.n	8100ff8 <HAL_RCC_OscConfig+0x314>
 8100f8a:	687b      	ldr	r3, [r7, #4]
 8100f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8100f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8100f92:	d30a      	bcc.n	8100faa <HAL_RCC_OscConfig+0x2c6>
 8100f94:	4b90      	ldr	r3, [pc, #576]	; (81011d8 <HAL_RCC_OscConfig+0x4f4>)
 8100f96:	68db      	ldr	r3, [r3, #12]
 8100f98:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8100f9c:	687b      	ldr	r3, [r7, #4]
 8100f9e:	6a1b      	ldr	r3, [r3, #32]
 8100fa0:	029b      	lsls	r3, r3, #10
 8100fa2:	498d      	ldr	r1, [pc, #564]	; (81011d8 <HAL_RCC_OscConfig+0x4f4>)
 8100fa4:	4313      	orrs	r3, r2
 8100fa6:	60cb      	str	r3, [r1, #12]
 8100fa8:	e026      	b.n	8100ff8 <HAL_RCC_OscConfig+0x314>
 8100faa:	4b8b      	ldr	r3, [pc, #556]	; (81011d8 <HAL_RCC_OscConfig+0x4f4>)
 8100fac:	68db      	ldr	r3, [r3, #12]
 8100fae:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8100fb2:	687b      	ldr	r3, [r7, #4]
 8100fb4:	6a1b      	ldr	r3, [r3, #32]
 8100fb6:	03db      	lsls	r3, r3, #15
 8100fb8:	4987      	ldr	r1, [pc, #540]	; (81011d8 <HAL_RCC_OscConfig+0x4f4>)
 8100fba:	4313      	orrs	r3, r2
 8100fbc:	60cb      	str	r3, [r1, #12]
 8100fbe:	e01b      	b.n	8100ff8 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8100fc0:	4b85      	ldr	r3, [pc, #532]	; (81011d8 <HAL_RCC_OscConfig+0x4f4>)
 8100fc2:	681b      	ldr	r3, [r3, #0]
 8100fc4:	4a84      	ldr	r2, [pc, #528]	; (81011d8 <HAL_RCC_OscConfig+0x4f4>)
 8100fc6:	f023 0301 	bic.w	r3, r3, #1
 8100fca:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8100fcc:	f7ff fb04 	bl	81005d8 <HAL_GetTick>
 8100fd0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8100fd2:	e009      	b.n	8100fe8 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8100fd4:	f7ff fb00 	bl	81005d8 <HAL_GetTick>
 8100fd8:	4602      	mov	r2, r0
 8100fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8100fdc:	1ad3      	subs	r3, r2, r3
 8100fde:	2b02      	cmp	r3, #2
 8100fe0:	d902      	bls.n	8100fe8 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8100fe2:	2303      	movs	r3, #3
 8100fe4:	f000 bd53 	b.w	8101a8e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8100fe8:	4b7b      	ldr	r3, [pc, #492]	; (81011d8 <HAL_RCC_OscConfig+0x4f4>)
 8100fea:	681b      	ldr	r3, [r3, #0]
 8100fec:	f003 0304 	and.w	r3, r3, #4
 8100ff0:	2b00      	cmp	r3, #0
 8100ff2:	d1ef      	bne.n	8100fd4 <HAL_RCC_OscConfig+0x2f0>
 8100ff4:	e000      	b.n	8100ff8 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8100ff6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8100ff8:	687b      	ldr	r3, [r7, #4]
 8100ffa:	681b      	ldr	r3, [r3, #0]
 8100ffc:	f003 0301 	and.w	r3, r3, #1
 8101000:	2b00      	cmp	r3, #0
 8101002:	f000 808b 	beq.w	810111c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8101006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101008:	2b08      	cmp	r3, #8
 810100a:	d005      	beq.n	8101018 <HAL_RCC_OscConfig+0x334>
 810100c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810100e:	2b0c      	cmp	r3, #12
 8101010:	d109      	bne.n	8101026 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8101012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101014:	2b03      	cmp	r3, #3
 8101016:	d106      	bne.n	8101026 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8101018:	687b      	ldr	r3, [r7, #4]
 810101a:	685b      	ldr	r3, [r3, #4]
 810101c:	2b00      	cmp	r3, #0
 810101e:	d17d      	bne.n	810111c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8101020:	2301      	movs	r3, #1
 8101022:	f000 bd34 	b.w	8101a8e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8101026:	687b      	ldr	r3, [r7, #4]
 8101028:	685b      	ldr	r3, [r3, #4]
 810102a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810102e:	d106      	bne.n	810103e <HAL_RCC_OscConfig+0x35a>
 8101030:	4b69      	ldr	r3, [pc, #420]	; (81011d8 <HAL_RCC_OscConfig+0x4f4>)
 8101032:	681b      	ldr	r3, [r3, #0]
 8101034:	4a68      	ldr	r2, [pc, #416]	; (81011d8 <HAL_RCC_OscConfig+0x4f4>)
 8101036:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 810103a:	6013      	str	r3, [r2, #0]
 810103c:	e041      	b.n	81010c2 <HAL_RCC_OscConfig+0x3de>
 810103e:	687b      	ldr	r3, [r7, #4]
 8101040:	685b      	ldr	r3, [r3, #4]
 8101042:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8101046:	d112      	bne.n	810106e <HAL_RCC_OscConfig+0x38a>
 8101048:	4b63      	ldr	r3, [pc, #396]	; (81011d8 <HAL_RCC_OscConfig+0x4f4>)
 810104a:	681b      	ldr	r3, [r3, #0]
 810104c:	4a62      	ldr	r2, [pc, #392]	; (81011d8 <HAL_RCC_OscConfig+0x4f4>)
 810104e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8101052:	6013      	str	r3, [r2, #0]
 8101054:	4b60      	ldr	r3, [pc, #384]	; (81011d8 <HAL_RCC_OscConfig+0x4f4>)
 8101056:	681b      	ldr	r3, [r3, #0]
 8101058:	4a5f      	ldr	r2, [pc, #380]	; (81011d8 <HAL_RCC_OscConfig+0x4f4>)
 810105a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 810105e:	6013      	str	r3, [r2, #0]
 8101060:	4b5d      	ldr	r3, [pc, #372]	; (81011d8 <HAL_RCC_OscConfig+0x4f4>)
 8101062:	681b      	ldr	r3, [r3, #0]
 8101064:	4a5c      	ldr	r2, [pc, #368]	; (81011d8 <HAL_RCC_OscConfig+0x4f4>)
 8101066:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 810106a:	6013      	str	r3, [r2, #0]
 810106c:	e029      	b.n	81010c2 <HAL_RCC_OscConfig+0x3de>
 810106e:	687b      	ldr	r3, [r7, #4]
 8101070:	685b      	ldr	r3, [r3, #4]
 8101072:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8101076:	d112      	bne.n	810109e <HAL_RCC_OscConfig+0x3ba>
 8101078:	4b57      	ldr	r3, [pc, #348]	; (81011d8 <HAL_RCC_OscConfig+0x4f4>)
 810107a:	681b      	ldr	r3, [r3, #0]
 810107c:	4a56      	ldr	r2, [pc, #344]	; (81011d8 <HAL_RCC_OscConfig+0x4f4>)
 810107e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8101082:	6013      	str	r3, [r2, #0]
 8101084:	4b54      	ldr	r3, [pc, #336]	; (81011d8 <HAL_RCC_OscConfig+0x4f4>)
 8101086:	681b      	ldr	r3, [r3, #0]
 8101088:	4a53      	ldr	r2, [pc, #332]	; (81011d8 <HAL_RCC_OscConfig+0x4f4>)
 810108a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810108e:	6013      	str	r3, [r2, #0]
 8101090:	4b51      	ldr	r3, [pc, #324]	; (81011d8 <HAL_RCC_OscConfig+0x4f4>)
 8101092:	681b      	ldr	r3, [r3, #0]
 8101094:	4a50      	ldr	r2, [pc, #320]	; (81011d8 <HAL_RCC_OscConfig+0x4f4>)
 8101096:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 810109a:	6013      	str	r3, [r2, #0]
 810109c:	e011      	b.n	81010c2 <HAL_RCC_OscConfig+0x3de>
 810109e:	4b4e      	ldr	r3, [pc, #312]	; (81011d8 <HAL_RCC_OscConfig+0x4f4>)
 81010a0:	681b      	ldr	r3, [r3, #0]
 81010a2:	4a4d      	ldr	r2, [pc, #308]	; (81011d8 <HAL_RCC_OscConfig+0x4f4>)
 81010a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81010a8:	6013      	str	r3, [r2, #0]
 81010aa:	4b4b      	ldr	r3, [pc, #300]	; (81011d8 <HAL_RCC_OscConfig+0x4f4>)
 81010ac:	681b      	ldr	r3, [r3, #0]
 81010ae:	4a4a      	ldr	r2, [pc, #296]	; (81011d8 <HAL_RCC_OscConfig+0x4f4>)
 81010b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 81010b4:	6013      	str	r3, [r2, #0]
 81010b6:	4b48      	ldr	r3, [pc, #288]	; (81011d8 <HAL_RCC_OscConfig+0x4f4>)
 81010b8:	681b      	ldr	r3, [r3, #0]
 81010ba:	4a47      	ldr	r2, [pc, #284]	; (81011d8 <HAL_RCC_OscConfig+0x4f4>)
 81010bc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 81010c0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 81010c2:	687b      	ldr	r3, [r7, #4]
 81010c4:	685b      	ldr	r3, [r3, #4]
 81010c6:	2b00      	cmp	r3, #0
 81010c8:	d014      	beq.n	81010f4 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 81010ca:	f7ff fa85 	bl	81005d8 <HAL_GetTick>
 81010ce:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 81010d0:	e009      	b.n	81010e6 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 81010d2:	f7ff fa81 	bl	81005d8 <HAL_GetTick>
 81010d6:	4602      	mov	r2, r0
 81010d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81010da:	1ad3      	subs	r3, r2, r3
 81010dc:	2b64      	cmp	r3, #100	; 0x64
 81010de:	d902      	bls.n	81010e6 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 81010e0:	2303      	movs	r3, #3
 81010e2:	f000 bcd4 	b.w	8101a8e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 81010e6:	4b3c      	ldr	r3, [pc, #240]	; (81011d8 <HAL_RCC_OscConfig+0x4f4>)
 81010e8:	681b      	ldr	r3, [r3, #0]
 81010ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81010ee:	2b00      	cmp	r3, #0
 81010f0:	d0ef      	beq.n	81010d2 <HAL_RCC_OscConfig+0x3ee>
 81010f2:	e013      	b.n	810111c <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 81010f4:	f7ff fa70 	bl	81005d8 <HAL_GetTick>
 81010f8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 81010fa:	e009      	b.n	8101110 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 81010fc:	f7ff fa6c 	bl	81005d8 <HAL_GetTick>
 8101100:	4602      	mov	r2, r0
 8101102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101104:	1ad3      	subs	r3, r2, r3
 8101106:	2b64      	cmp	r3, #100	; 0x64
 8101108:	d902      	bls.n	8101110 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 810110a:	2303      	movs	r3, #3
 810110c:	f000 bcbf 	b.w	8101a8e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8101110:	4b31      	ldr	r3, [pc, #196]	; (81011d8 <HAL_RCC_OscConfig+0x4f4>)
 8101112:	681b      	ldr	r3, [r3, #0]
 8101114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8101118:	2b00      	cmp	r3, #0
 810111a:	d1ef      	bne.n	81010fc <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 810111c:	687b      	ldr	r3, [r7, #4]
 810111e:	681b      	ldr	r3, [r3, #0]
 8101120:	f003 0302 	and.w	r3, r3, #2
 8101124:	2b00      	cmp	r3, #0
 8101126:	d05f      	beq.n	81011e8 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8101128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810112a:	2b04      	cmp	r3, #4
 810112c:	d005      	beq.n	810113a <HAL_RCC_OscConfig+0x456>
 810112e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101130:	2b0c      	cmp	r3, #12
 8101132:	d114      	bne.n	810115e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8101134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101136:	2b02      	cmp	r3, #2
 8101138:	d111      	bne.n	810115e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 810113a:	687b      	ldr	r3, [r7, #4]
 810113c:	68db      	ldr	r3, [r3, #12]
 810113e:	2b00      	cmp	r3, #0
 8101140:	d102      	bne.n	8101148 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8101142:	2301      	movs	r3, #1
 8101144:	f000 bca3 	b.w	8101a8e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8101148:	4b23      	ldr	r3, [pc, #140]	; (81011d8 <HAL_RCC_OscConfig+0x4f4>)
 810114a:	691b      	ldr	r3, [r3, #16]
 810114c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8101150:	687b      	ldr	r3, [r7, #4]
 8101152:	691b      	ldr	r3, [r3, #16]
 8101154:	041b      	lsls	r3, r3, #16
 8101156:	4920      	ldr	r1, [pc, #128]	; (81011d8 <HAL_RCC_OscConfig+0x4f4>)
 8101158:	4313      	orrs	r3, r2
 810115a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 810115c:	e044      	b.n	81011e8 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 810115e:	687b      	ldr	r3, [r7, #4]
 8101160:	68db      	ldr	r3, [r3, #12]
 8101162:	2b00      	cmp	r3, #0
 8101164:	d024      	beq.n	81011b0 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8101166:	4b1c      	ldr	r3, [pc, #112]	; (81011d8 <HAL_RCC_OscConfig+0x4f4>)
 8101168:	681b      	ldr	r3, [r3, #0]
 810116a:	4a1b      	ldr	r2, [pc, #108]	; (81011d8 <HAL_RCC_OscConfig+0x4f4>)
 810116c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8101170:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8101172:	f7ff fa31 	bl	81005d8 <HAL_GetTick>
 8101176:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8101178:	e009      	b.n	810118e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 810117a:	f7ff fa2d 	bl	81005d8 <HAL_GetTick>
 810117e:	4602      	mov	r2, r0
 8101180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101182:	1ad3      	subs	r3, r2, r3
 8101184:	2b02      	cmp	r3, #2
 8101186:	d902      	bls.n	810118e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8101188:	2303      	movs	r3, #3
 810118a:	f000 bc80 	b.w	8101a8e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 810118e:	4b12      	ldr	r3, [pc, #72]	; (81011d8 <HAL_RCC_OscConfig+0x4f4>)
 8101190:	681b      	ldr	r3, [r3, #0]
 8101192:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8101196:	2b00      	cmp	r3, #0
 8101198:	d0ef      	beq.n	810117a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 810119a:	4b0f      	ldr	r3, [pc, #60]	; (81011d8 <HAL_RCC_OscConfig+0x4f4>)
 810119c:	691b      	ldr	r3, [r3, #16]
 810119e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 81011a2:	687b      	ldr	r3, [r7, #4]
 81011a4:	691b      	ldr	r3, [r3, #16]
 81011a6:	041b      	lsls	r3, r3, #16
 81011a8:	490b      	ldr	r1, [pc, #44]	; (81011d8 <HAL_RCC_OscConfig+0x4f4>)
 81011aa:	4313      	orrs	r3, r2
 81011ac:	610b      	str	r3, [r1, #16]
 81011ae:	e01b      	b.n	81011e8 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 81011b0:	4b09      	ldr	r3, [pc, #36]	; (81011d8 <HAL_RCC_OscConfig+0x4f4>)
 81011b2:	681b      	ldr	r3, [r3, #0]
 81011b4:	4a08      	ldr	r2, [pc, #32]	; (81011d8 <HAL_RCC_OscConfig+0x4f4>)
 81011b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81011ba:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 81011bc:	f7ff fa0c 	bl	81005d8 <HAL_GetTick>
 81011c0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 81011c2:	e00b      	b.n	81011dc <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 81011c4:	f7ff fa08 	bl	81005d8 <HAL_GetTick>
 81011c8:	4602      	mov	r2, r0
 81011ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81011cc:	1ad3      	subs	r3, r2, r3
 81011ce:	2b02      	cmp	r3, #2
 81011d0:	d904      	bls.n	81011dc <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 81011d2:	2303      	movs	r3, #3
 81011d4:	f000 bc5b 	b.w	8101a8e <HAL_RCC_OscConfig+0xdaa>
 81011d8:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 81011dc:	4baf      	ldr	r3, [pc, #700]	; (810149c <HAL_RCC_OscConfig+0x7b8>)
 81011de:	681b      	ldr	r3, [r3, #0]
 81011e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 81011e4:	2b00      	cmp	r3, #0
 81011e6:	d1ed      	bne.n	81011c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 81011e8:	687b      	ldr	r3, [r7, #4]
 81011ea:	681b      	ldr	r3, [r3, #0]
 81011ec:	f003 0308 	and.w	r3, r3, #8
 81011f0:	2b00      	cmp	r3, #0
 81011f2:	f000 80c8 	beq.w	8101386 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 81011f6:	2300      	movs	r3, #0
 81011f8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 81011fc:	4ba7      	ldr	r3, [pc, #668]	; (810149c <HAL_RCC_OscConfig+0x7b8>)
 81011fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8101202:	f003 0304 	and.w	r3, r3, #4
 8101206:	2b00      	cmp	r3, #0
 8101208:	d111      	bne.n	810122e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 810120a:	4ba4      	ldr	r3, [pc, #656]	; (810149c <HAL_RCC_OscConfig+0x7b8>)
 810120c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8101210:	4aa2      	ldr	r2, [pc, #648]	; (810149c <HAL_RCC_OscConfig+0x7b8>)
 8101212:	f043 0304 	orr.w	r3, r3, #4
 8101216:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 810121a:	4ba0      	ldr	r3, [pc, #640]	; (810149c <HAL_RCC_OscConfig+0x7b8>)
 810121c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8101220:	f003 0304 	and.w	r3, r3, #4
 8101224:	617b      	str	r3, [r7, #20]
 8101226:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8101228:	2301      	movs	r3, #1
 810122a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 810122e:	4b9c      	ldr	r3, [pc, #624]	; (81014a0 <HAL_RCC_OscConfig+0x7bc>)
 8101230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101232:	f003 0301 	and.w	r3, r3, #1
 8101236:	2b00      	cmp	r3, #0
 8101238:	d119      	bne.n	810126e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 810123a:	4b99      	ldr	r3, [pc, #612]	; (81014a0 <HAL_RCC_OscConfig+0x7bc>)
 810123c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810123e:	4a98      	ldr	r2, [pc, #608]	; (81014a0 <HAL_RCC_OscConfig+0x7bc>)
 8101240:	f043 0301 	orr.w	r3, r3, #1
 8101244:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8101246:	f7ff f9c7 	bl	81005d8 <HAL_GetTick>
 810124a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 810124c:	e009      	b.n	8101262 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 810124e:	f7ff f9c3 	bl	81005d8 <HAL_GetTick>
 8101252:	4602      	mov	r2, r0
 8101254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101256:	1ad3      	subs	r3, r2, r3
 8101258:	2b02      	cmp	r3, #2
 810125a:	d902      	bls.n	8101262 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 810125c:	2303      	movs	r3, #3
 810125e:	f000 bc16 	b.w	8101a8e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8101262:	4b8f      	ldr	r3, [pc, #572]	; (81014a0 <HAL_RCC_OscConfig+0x7bc>)
 8101264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101266:	f003 0301 	and.w	r3, r3, #1
 810126a:	2b00      	cmp	r3, #0
 810126c:	d0ef      	beq.n	810124e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 810126e:	687b      	ldr	r3, [r7, #4]
 8101270:	695b      	ldr	r3, [r3, #20]
 8101272:	2b00      	cmp	r3, #0
 8101274:	d05f      	beq.n	8101336 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8101276:	4b89      	ldr	r3, [pc, #548]	; (810149c <HAL_RCC_OscConfig+0x7b8>)
 8101278:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810127c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 810127e:	687b      	ldr	r3, [r7, #4]
 8101280:	699a      	ldr	r2, [r3, #24]
 8101282:	6a3b      	ldr	r3, [r7, #32]
 8101284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8101288:	429a      	cmp	r2, r3
 810128a:	d037      	beq.n	81012fc <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 810128c:	6a3b      	ldr	r3, [r7, #32]
 810128e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8101292:	2b00      	cmp	r3, #0
 8101294:	d006      	beq.n	81012a4 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8101296:	6a3b      	ldr	r3, [r7, #32]
 8101298:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 810129c:	2b00      	cmp	r3, #0
 810129e:	d101      	bne.n	81012a4 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 81012a0:	2301      	movs	r3, #1
 81012a2:	e3f4      	b.n	8101a8e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 81012a4:	6a3b      	ldr	r3, [r7, #32]
 81012a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 81012aa:	2b00      	cmp	r3, #0
 81012ac:	d01b      	beq.n	81012e6 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 81012ae:	4b7b      	ldr	r3, [pc, #492]	; (810149c <HAL_RCC_OscConfig+0x7b8>)
 81012b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81012b4:	4a79      	ldr	r2, [pc, #484]	; (810149c <HAL_RCC_OscConfig+0x7b8>)
 81012b6:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 81012ba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 81012be:	f7ff f98b 	bl	81005d8 <HAL_GetTick>
 81012c2:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 81012c4:	e008      	b.n	81012d8 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 81012c6:	f7ff f987 	bl	81005d8 <HAL_GetTick>
 81012ca:	4602      	mov	r2, r0
 81012cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81012ce:	1ad3      	subs	r3, r2, r3
 81012d0:	2b05      	cmp	r3, #5
 81012d2:	d901      	bls.n	81012d8 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 81012d4:	2303      	movs	r3, #3
 81012d6:	e3da      	b.n	8101a8e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 81012d8:	4b70      	ldr	r3, [pc, #448]	; (810149c <HAL_RCC_OscConfig+0x7b8>)
 81012da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81012de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81012e2:	2b00      	cmp	r3, #0
 81012e4:	d1ef      	bne.n	81012c6 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 81012e6:	4b6d      	ldr	r3, [pc, #436]	; (810149c <HAL_RCC_OscConfig+0x7b8>)
 81012e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81012ec:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 81012f0:	687b      	ldr	r3, [r7, #4]
 81012f2:	699b      	ldr	r3, [r3, #24]
 81012f4:	4969      	ldr	r1, [pc, #420]	; (810149c <HAL_RCC_OscConfig+0x7b8>)
 81012f6:	4313      	orrs	r3, r2
 81012f8:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 81012fc:	4b67      	ldr	r3, [pc, #412]	; (810149c <HAL_RCC_OscConfig+0x7b8>)
 81012fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101302:	4a66      	ldr	r2, [pc, #408]	; (810149c <HAL_RCC_OscConfig+0x7b8>)
 8101304:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8101308:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 810130c:	f7ff f964 	bl	81005d8 <HAL_GetTick>
 8101310:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8101312:	e008      	b.n	8101326 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8101314:	f7ff f960 	bl	81005d8 <HAL_GetTick>
 8101318:	4602      	mov	r2, r0
 810131a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810131c:	1ad3      	subs	r3, r2, r3
 810131e:	2b05      	cmp	r3, #5
 8101320:	d901      	bls.n	8101326 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8101322:	2303      	movs	r3, #3
 8101324:	e3b3      	b.n	8101a8e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8101326:	4b5d      	ldr	r3, [pc, #372]	; (810149c <HAL_RCC_OscConfig+0x7b8>)
 8101328:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810132c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8101330:	2b00      	cmp	r3, #0
 8101332:	d0ef      	beq.n	8101314 <HAL_RCC_OscConfig+0x630>
 8101334:	e01b      	b.n	810136e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8101336:	4b59      	ldr	r3, [pc, #356]	; (810149c <HAL_RCC_OscConfig+0x7b8>)
 8101338:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810133c:	4a57      	ldr	r2, [pc, #348]	; (810149c <HAL_RCC_OscConfig+0x7b8>)
 810133e:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8101342:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8101346:	f7ff f947 	bl	81005d8 <HAL_GetTick>
 810134a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 810134c:	e008      	b.n	8101360 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 810134e:	f7ff f943 	bl	81005d8 <HAL_GetTick>
 8101352:	4602      	mov	r2, r0
 8101354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101356:	1ad3      	subs	r3, r2, r3
 8101358:	2b05      	cmp	r3, #5
 810135a:	d901      	bls.n	8101360 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 810135c:	2303      	movs	r3, #3
 810135e:	e396      	b.n	8101a8e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8101360:	4b4e      	ldr	r3, [pc, #312]	; (810149c <HAL_RCC_OscConfig+0x7b8>)
 8101362:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101366:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810136a:	2b00      	cmp	r3, #0
 810136c:	d1ef      	bne.n	810134e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 810136e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8101372:	2b01      	cmp	r3, #1
 8101374:	d107      	bne.n	8101386 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8101376:	4b49      	ldr	r3, [pc, #292]	; (810149c <HAL_RCC_OscConfig+0x7b8>)
 8101378:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 810137c:	4a47      	ldr	r2, [pc, #284]	; (810149c <HAL_RCC_OscConfig+0x7b8>)
 810137e:	f023 0304 	bic.w	r3, r3, #4
 8101382:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8101386:	687b      	ldr	r3, [r7, #4]
 8101388:	681b      	ldr	r3, [r3, #0]
 810138a:	f003 0304 	and.w	r3, r3, #4
 810138e:	2b00      	cmp	r3, #0
 8101390:	f000 8111 	beq.w	81015b6 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8101394:	2300      	movs	r3, #0
 8101396:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 810139a:	4b40      	ldr	r3, [pc, #256]	; (810149c <HAL_RCC_OscConfig+0x7b8>)
 810139c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81013a0:	f003 0304 	and.w	r3, r3, #4
 81013a4:	2b00      	cmp	r3, #0
 81013a6:	d111      	bne.n	81013cc <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 81013a8:	4b3c      	ldr	r3, [pc, #240]	; (810149c <HAL_RCC_OscConfig+0x7b8>)
 81013aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81013ae:	4a3b      	ldr	r2, [pc, #236]	; (810149c <HAL_RCC_OscConfig+0x7b8>)
 81013b0:	f043 0304 	orr.w	r3, r3, #4
 81013b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 81013b8:	4b38      	ldr	r3, [pc, #224]	; (810149c <HAL_RCC_OscConfig+0x7b8>)
 81013ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81013be:	f003 0304 	and.w	r3, r3, #4
 81013c2:	613b      	str	r3, [r7, #16]
 81013c4:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 81013c6:	2301      	movs	r3, #1
 81013c8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 81013cc:	4b34      	ldr	r3, [pc, #208]	; (81014a0 <HAL_RCC_OscConfig+0x7bc>)
 81013ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81013d0:	f003 0301 	and.w	r3, r3, #1
 81013d4:	2b00      	cmp	r3, #0
 81013d6:	d118      	bne.n	810140a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 81013d8:	4b31      	ldr	r3, [pc, #196]	; (81014a0 <HAL_RCC_OscConfig+0x7bc>)
 81013da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81013dc:	4a30      	ldr	r2, [pc, #192]	; (81014a0 <HAL_RCC_OscConfig+0x7bc>)
 81013de:	f043 0301 	orr.w	r3, r3, #1
 81013e2:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 81013e4:	f7ff f8f8 	bl	81005d8 <HAL_GetTick>
 81013e8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 81013ea:	e008      	b.n	81013fe <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 81013ec:	f7ff f8f4 	bl	81005d8 <HAL_GetTick>
 81013f0:	4602      	mov	r2, r0
 81013f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81013f4:	1ad3      	subs	r3, r2, r3
 81013f6:	2b02      	cmp	r3, #2
 81013f8:	d901      	bls.n	81013fe <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 81013fa:	2303      	movs	r3, #3
 81013fc:	e347      	b.n	8101a8e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 81013fe:	4b28      	ldr	r3, [pc, #160]	; (81014a0 <HAL_RCC_OscConfig+0x7bc>)
 8101400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101402:	f003 0301 	and.w	r3, r3, #1
 8101406:	2b00      	cmp	r3, #0
 8101408:	d0f0      	beq.n	81013ec <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 810140a:	687b      	ldr	r3, [r7, #4]
 810140c:	689b      	ldr	r3, [r3, #8]
 810140e:	f003 0301 	and.w	r3, r3, #1
 8101412:	2b00      	cmp	r3, #0
 8101414:	d01f      	beq.n	8101456 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8101416:	687b      	ldr	r3, [r7, #4]
 8101418:	689b      	ldr	r3, [r3, #8]
 810141a:	f003 0304 	and.w	r3, r3, #4
 810141e:	2b00      	cmp	r3, #0
 8101420:	d010      	beq.n	8101444 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8101422:	4b1e      	ldr	r3, [pc, #120]	; (810149c <HAL_RCC_OscConfig+0x7b8>)
 8101424:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101428:	4a1c      	ldr	r2, [pc, #112]	; (810149c <HAL_RCC_OscConfig+0x7b8>)
 810142a:	f043 0304 	orr.w	r3, r3, #4
 810142e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8101432:	4b1a      	ldr	r3, [pc, #104]	; (810149c <HAL_RCC_OscConfig+0x7b8>)
 8101434:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101438:	4a18      	ldr	r2, [pc, #96]	; (810149c <HAL_RCC_OscConfig+0x7b8>)
 810143a:	f043 0301 	orr.w	r3, r3, #1
 810143e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101442:	e018      	b.n	8101476 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8101444:	4b15      	ldr	r3, [pc, #84]	; (810149c <HAL_RCC_OscConfig+0x7b8>)
 8101446:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810144a:	4a14      	ldr	r2, [pc, #80]	; (810149c <HAL_RCC_OscConfig+0x7b8>)
 810144c:	f043 0301 	orr.w	r3, r3, #1
 8101450:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101454:	e00f      	b.n	8101476 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8101456:	4b11      	ldr	r3, [pc, #68]	; (810149c <HAL_RCC_OscConfig+0x7b8>)
 8101458:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810145c:	4a0f      	ldr	r2, [pc, #60]	; (810149c <HAL_RCC_OscConfig+0x7b8>)
 810145e:	f023 0301 	bic.w	r3, r3, #1
 8101462:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8101466:	4b0d      	ldr	r3, [pc, #52]	; (810149c <HAL_RCC_OscConfig+0x7b8>)
 8101468:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810146c:	4a0b      	ldr	r2, [pc, #44]	; (810149c <HAL_RCC_OscConfig+0x7b8>)
 810146e:	f023 0304 	bic.w	r3, r3, #4
 8101472:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8101476:	687b      	ldr	r3, [r7, #4]
 8101478:	689b      	ldr	r3, [r3, #8]
 810147a:	2b00      	cmp	r3, #0
 810147c:	d057      	beq.n	810152e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 810147e:	f7ff f8ab 	bl	81005d8 <HAL_GetTick>
 8101482:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8101484:	e00e      	b.n	81014a4 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8101486:	f7ff f8a7 	bl	81005d8 <HAL_GetTick>
 810148a:	4602      	mov	r2, r0
 810148c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810148e:	1ad3      	subs	r3, r2, r3
 8101490:	f241 3288 	movw	r2, #5000	; 0x1388
 8101494:	4293      	cmp	r3, r2
 8101496:	d905      	bls.n	81014a4 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8101498:	2303      	movs	r3, #3
 810149a:	e2f8      	b.n	8101a8e <HAL_RCC_OscConfig+0xdaa>
 810149c:	46020c00 	.word	0x46020c00
 81014a0:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 81014a4:	4b9c      	ldr	r3, [pc, #624]	; (8101718 <HAL_RCC_OscConfig+0xa34>)
 81014a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81014aa:	f003 0302 	and.w	r3, r3, #2
 81014ae:	2b00      	cmp	r3, #0
 81014b0:	d0e9      	beq.n	8101486 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 81014b2:	687b      	ldr	r3, [r7, #4]
 81014b4:	689b      	ldr	r3, [r3, #8]
 81014b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81014ba:	2b00      	cmp	r3, #0
 81014bc:	d01b      	beq.n	81014f6 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 81014be:	4b96      	ldr	r3, [pc, #600]	; (8101718 <HAL_RCC_OscConfig+0xa34>)
 81014c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81014c4:	4a94      	ldr	r2, [pc, #592]	; (8101718 <HAL_RCC_OscConfig+0xa34>)
 81014c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 81014ca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 81014ce:	e00a      	b.n	81014e6 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 81014d0:	f7ff f882 	bl	81005d8 <HAL_GetTick>
 81014d4:	4602      	mov	r2, r0
 81014d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81014d8:	1ad3      	subs	r3, r2, r3
 81014da:	f241 3288 	movw	r2, #5000	; 0x1388
 81014de:	4293      	cmp	r3, r2
 81014e0:	d901      	bls.n	81014e6 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 81014e2:	2303      	movs	r3, #3
 81014e4:	e2d3      	b.n	8101a8e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 81014e6:	4b8c      	ldr	r3, [pc, #560]	; (8101718 <HAL_RCC_OscConfig+0xa34>)
 81014e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81014ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 81014f0:	2b00      	cmp	r3, #0
 81014f2:	d0ed      	beq.n	81014d0 <HAL_RCC_OscConfig+0x7ec>
 81014f4:	e053      	b.n	810159e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 81014f6:	4b88      	ldr	r3, [pc, #544]	; (8101718 <HAL_RCC_OscConfig+0xa34>)
 81014f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81014fc:	4a86      	ldr	r2, [pc, #536]	; (8101718 <HAL_RCC_OscConfig+0xa34>)
 81014fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8101502:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8101506:	e00a      	b.n	810151e <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8101508:	f7ff f866 	bl	81005d8 <HAL_GetTick>
 810150c:	4602      	mov	r2, r0
 810150e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101510:	1ad3      	subs	r3, r2, r3
 8101512:	f241 3288 	movw	r2, #5000	; 0x1388
 8101516:	4293      	cmp	r3, r2
 8101518:	d901      	bls.n	810151e <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 810151a:	2303      	movs	r3, #3
 810151c:	e2b7      	b.n	8101a8e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 810151e:	4b7e      	ldr	r3, [pc, #504]	; (8101718 <HAL_RCC_OscConfig+0xa34>)
 8101520:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101524:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8101528:	2b00      	cmp	r3, #0
 810152a:	d1ed      	bne.n	8101508 <HAL_RCC_OscConfig+0x824>
 810152c:	e037      	b.n	810159e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 810152e:	f7ff f853 	bl	81005d8 <HAL_GetTick>
 8101532:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8101534:	e00a      	b.n	810154c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8101536:	f7ff f84f 	bl	81005d8 <HAL_GetTick>
 810153a:	4602      	mov	r2, r0
 810153c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810153e:	1ad3      	subs	r3, r2, r3
 8101540:	f241 3288 	movw	r2, #5000	; 0x1388
 8101544:	4293      	cmp	r3, r2
 8101546:	d901      	bls.n	810154c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8101548:	2303      	movs	r3, #3
 810154a:	e2a0      	b.n	8101a8e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 810154c:	4b72      	ldr	r3, [pc, #456]	; (8101718 <HAL_RCC_OscConfig+0xa34>)
 810154e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101552:	f003 0302 	and.w	r3, r3, #2
 8101556:	2b00      	cmp	r3, #0
 8101558:	d1ed      	bne.n	8101536 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 810155a:	4b6f      	ldr	r3, [pc, #444]	; (8101718 <HAL_RCC_OscConfig+0xa34>)
 810155c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101564:	2b00      	cmp	r3, #0
 8101566:	d01a      	beq.n	810159e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8101568:	4b6b      	ldr	r3, [pc, #428]	; (8101718 <HAL_RCC_OscConfig+0xa34>)
 810156a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810156e:	4a6a      	ldr	r2, [pc, #424]	; (8101718 <HAL_RCC_OscConfig+0xa34>)
 8101570:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8101574:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8101578:	e00a      	b.n	8101590 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 810157a:	f7ff f82d 	bl	81005d8 <HAL_GetTick>
 810157e:	4602      	mov	r2, r0
 8101580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101582:	1ad3      	subs	r3, r2, r3
 8101584:	f241 3288 	movw	r2, #5000	; 0x1388
 8101588:	4293      	cmp	r3, r2
 810158a:	d901      	bls.n	8101590 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 810158c:	2303      	movs	r3, #3
 810158e:	e27e      	b.n	8101a8e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8101590:	4b61      	ldr	r3, [pc, #388]	; (8101718 <HAL_RCC_OscConfig+0xa34>)
 8101592:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101596:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810159a:	2b00      	cmp	r3, #0
 810159c:	d1ed      	bne.n	810157a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 810159e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 81015a2:	2b01      	cmp	r3, #1
 81015a4:	d107      	bne.n	81015b6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 81015a6:	4b5c      	ldr	r3, [pc, #368]	; (8101718 <HAL_RCC_OscConfig+0xa34>)
 81015a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81015ac:	4a5a      	ldr	r2, [pc, #360]	; (8101718 <HAL_RCC_OscConfig+0xa34>)
 81015ae:	f023 0304 	bic.w	r3, r3, #4
 81015b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 81015b6:	687b      	ldr	r3, [r7, #4]
 81015b8:	681b      	ldr	r3, [r3, #0]
 81015ba:	f003 0320 	and.w	r3, r3, #32
 81015be:	2b00      	cmp	r3, #0
 81015c0:	d036      	beq.n	8101630 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 81015c2:	687b      	ldr	r3, [r7, #4]
 81015c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81015c6:	2b00      	cmp	r3, #0
 81015c8:	d019      	beq.n	81015fe <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 81015ca:	4b53      	ldr	r3, [pc, #332]	; (8101718 <HAL_RCC_OscConfig+0xa34>)
 81015cc:	681b      	ldr	r3, [r3, #0]
 81015ce:	4a52      	ldr	r2, [pc, #328]	; (8101718 <HAL_RCC_OscConfig+0xa34>)
 81015d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 81015d4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 81015d6:	f7fe ffff 	bl	81005d8 <HAL_GetTick>
 81015da:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 81015dc:	e008      	b.n	81015f0 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 81015de:	f7fe fffb 	bl	81005d8 <HAL_GetTick>
 81015e2:	4602      	mov	r2, r0
 81015e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81015e6:	1ad3      	subs	r3, r2, r3
 81015e8:	2b02      	cmp	r3, #2
 81015ea:	d901      	bls.n	81015f0 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 81015ec:	2303      	movs	r3, #3
 81015ee:	e24e      	b.n	8101a8e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 81015f0:	4b49      	ldr	r3, [pc, #292]	; (8101718 <HAL_RCC_OscConfig+0xa34>)
 81015f2:	681b      	ldr	r3, [r3, #0]
 81015f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 81015f8:	2b00      	cmp	r3, #0
 81015fa:	d0f0      	beq.n	81015de <HAL_RCC_OscConfig+0x8fa>
 81015fc:	e018      	b.n	8101630 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 81015fe:	4b46      	ldr	r3, [pc, #280]	; (8101718 <HAL_RCC_OscConfig+0xa34>)
 8101600:	681b      	ldr	r3, [r3, #0]
 8101602:	4a45      	ldr	r2, [pc, #276]	; (8101718 <HAL_RCC_OscConfig+0xa34>)
 8101604:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8101608:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 810160a:	f7fe ffe5 	bl	81005d8 <HAL_GetTick>
 810160e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8101610:	e008      	b.n	8101624 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8101612:	f7fe ffe1 	bl	81005d8 <HAL_GetTick>
 8101616:	4602      	mov	r2, r0
 8101618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810161a:	1ad3      	subs	r3, r2, r3
 810161c:	2b02      	cmp	r3, #2
 810161e:	d901      	bls.n	8101624 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8101620:	2303      	movs	r3, #3
 8101622:	e234      	b.n	8101a8e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8101624:	4b3c      	ldr	r3, [pc, #240]	; (8101718 <HAL_RCC_OscConfig+0xa34>)
 8101626:	681b      	ldr	r3, [r3, #0]
 8101628:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 810162c:	2b00      	cmp	r3, #0
 810162e:	d1f0      	bne.n	8101612 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8101630:	687b      	ldr	r3, [r7, #4]
 8101632:	681b      	ldr	r3, [r3, #0]
 8101634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101638:	2b00      	cmp	r3, #0
 810163a:	d036      	beq.n	81016aa <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 810163c:	687b      	ldr	r3, [r7, #4]
 810163e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101640:	2b00      	cmp	r3, #0
 8101642:	d019      	beq.n	8101678 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8101644:	4b34      	ldr	r3, [pc, #208]	; (8101718 <HAL_RCC_OscConfig+0xa34>)
 8101646:	681b      	ldr	r3, [r3, #0]
 8101648:	4a33      	ldr	r2, [pc, #204]	; (8101718 <HAL_RCC_OscConfig+0xa34>)
 810164a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 810164e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8101650:	f7fe ffc2 	bl	81005d8 <HAL_GetTick>
 8101654:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8101656:	e008      	b.n	810166a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8101658:	f7fe ffbe 	bl	81005d8 <HAL_GetTick>
 810165c:	4602      	mov	r2, r0
 810165e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101660:	1ad3      	subs	r3, r2, r3
 8101662:	2b02      	cmp	r3, #2
 8101664:	d901      	bls.n	810166a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8101666:	2303      	movs	r3, #3
 8101668:	e211      	b.n	8101a8e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 810166a:	4b2b      	ldr	r3, [pc, #172]	; (8101718 <HAL_RCC_OscConfig+0xa34>)
 810166c:	681b      	ldr	r3, [r3, #0]
 810166e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8101672:	2b00      	cmp	r3, #0
 8101674:	d0f0      	beq.n	8101658 <HAL_RCC_OscConfig+0x974>
 8101676:	e018      	b.n	81016aa <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8101678:	4b27      	ldr	r3, [pc, #156]	; (8101718 <HAL_RCC_OscConfig+0xa34>)
 810167a:	681b      	ldr	r3, [r3, #0]
 810167c:	4a26      	ldr	r2, [pc, #152]	; (8101718 <HAL_RCC_OscConfig+0xa34>)
 810167e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8101682:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8101684:	f7fe ffa8 	bl	81005d8 <HAL_GetTick>
 8101688:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 810168a:	e008      	b.n	810169e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 810168c:	f7fe ffa4 	bl	81005d8 <HAL_GetTick>
 8101690:	4602      	mov	r2, r0
 8101692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101694:	1ad3      	subs	r3, r2, r3
 8101696:	2b02      	cmp	r3, #2
 8101698:	d901      	bls.n	810169e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 810169a:	2303      	movs	r3, #3
 810169c:	e1f7      	b.n	8101a8e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 810169e:	4b1e      	ldr	r3, [pc, #120]	; (8101718 <HAL_RCC_OscConfig+0xa34>)
 81016a0:	681b      	ldr	r3, [r3, #0]
 81016a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81016a6:	2b00      	cmp	r3, #0
 81016a8:	d1f0      	bne.n	810168c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 81016aa:	687b      	ldr	r3, [r7, #4]
 81016ac:	681b      	ldr	r3, [r3, #0]
 81016ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81016b2:	2b00      	cmp	r3, #0
 81016b4:	d07f      	beq.n	81017b6 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 81016b6:	687b      	ldr	r3, [r7, #4]
 81016b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81016ba:	2b00      	cmp	r3, #0
 81016bc:	d062      	beq.n	8101784 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 81016be:	4b16      	ldr	r3, [pc, #88]	; (8101718 <HAL_RCC_OscConfig+0xa34>)
 81016c0:	689b      	ldr	r3, [r3, #8]
 81016c2:	4a15      	ldr	r2, [pc, #84]	; (8101718 <HAL_RCC_OscConfig+0xa34>)
 81016c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 81016c8:	6093      	str	r3, [r2, #8]
 81016ca:	4b13      	ldr	r3, [pc, #76]	; (8101718 <HAL_RCC_OscConfig+0xa34>)
 81016cc:	689b      	ldr	r3, [r3, #8]
 81016ce:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 81016d2:	687b      	ldr	r3, [r7, #4]
 81016d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81016d6:	4910      	ldr	r1, [pc, #64]	; (8101718 <HAL_RCC_OscConfig+0xa34>)
 81016d8:	4313      	orrs	r3, r2
 81016da:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 81016dc:	687b      	ldr	r3, [r7, #4]
 81016de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81016e0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 81016e4:	d309      	bcc.n	81016fa <HAL_RCC_OscConfig+0xa16>
 81016e6:	4b0c      	ldr	r3, [pc, #48]	; (8101718 <HAL_RCC_OscConfig+0xa34>)
 81016e8:	68db      	ldr	r3, [r3, #12]
 81016ea:	f023 021f 	bic.w	r2, r3, #31
 81016ee:	687b      	ldr	r3, [r7, #4]
 81016f0:	6a1b      	ldr	r3, [r3, #32]
 81016f2:	4909      	ldr	r1, [pc, #36]	; (8101718 <HAL_RCC_OscConfig+0xa34>)
 81016f4:	4313      	orrs	r3, r2
 81016f6:	60cb      	str	r3, [r1, #12]
 81016f8:	e02a      	b.n	8101750 <HAL_RCC_OscConfig+0xa6c>
 81016fa:	687b      	ldr	r3, [r7, #4]
 81016fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81016fe:	2b00      	cmp	r3, #0
 8101700:	da0c      	bge.n	810171c <HAL_RCC_OscConfig+0xa38>
 8101702:	4b05      	ldr	r3, [pc, #20]	; (8101718 <HAL_RCC_OscConfig+0xa34>)
 8101704:	68db      	ldr	r3, [r3, #12]
 8101706:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 810170a:	687b      	ldr	r3, [r7, #4]
 810170c:	6a1b      	ldr	r3, [r3, #32]
 810170e:	015b      	lsls	r3, r3, #5
 8101710:	4901      	ldr	r1, [pc, #4]	; (8101718 <HAL_RCC_OscConfig+0xa34>)
 8101712:	4313      	orrs	r3, r2
 8101714:	60cb      	str	r3, [r1, #12]
 8101716:	e01b      	b.n	8101750 <HAL_RCC_OscConfig+0xa6c>
 8101718:	46020c00 	.word	0x46020c00
 810171c:	687b      	ldr	r3, [r7, #4]
 810171e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101724:	d30a      	bcc.n	810173c <HAL_RCC_OscConfig+0xa58>
 8101726:	4ba1      	ldr	r3, [pc, #644]	; (81019ac <HAL_RCC_OscConfig+0xcc8>)
 8101728:	68db      	ldr	r3, [r3, #12]
 810172a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 810172e:	687b      	ldr	r3, [r7, #4]
 8101730:	6a1b      	ldr	r3, [r3, #32]
 8101732:	029b      	lsls	r3, r3, #10
 8101734:	499d      	ldr	r1, [pc, #628]	; (81019ac <HAL_RCC_OscConfig+0xcc8>)
 8101736:	4313      	orrs	r3, r2
 8101738:	60cb      	str	r3, [r1, #12]
 810173a:	e009      	b.n	8101750 <HAL_RCC_OscConfig+0xa6c>
 810173c:	4b9b      	ldr	r3, [pc, #620]	; (81019ac <HAL_RCC_OscConfig+0xcc8>)
 810173e:	68db      	ldr	r3, [r3, #12]
 8101740:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8101744:	687b      	ldr	r3, [r7, #4]
 8101746:	6a1b      	ldr	r3, [r3, #32]
 8101748:	03db      	lsls	r3, r3, #15
 810174a:	4998      	ldr	r1, [pc, #608]	; (81019ac <HAL_RCC_OscConfig+0xcc8>)
 810174c:	4313      	orrs	r3, r2
 810174e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8101750:	4b96      	ldr	r3, [pc, #600]	; (81019ac <HAL_RCC_OscConfig+0xcc8>)
 8101752:	681b      	ldr	r3, [r3, #0]
 8101754:	4a95      	ldr	r2, [pc, #596]	; (81019ac <HAL_RCC_OscConfig+0xcc8>)
 8101756:	f043 0310 	orr.w	r3, r3, #16
 810175a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 810175c:	f7fe ff3c 	bl	81005d8 <HAL_GetTick>
 8101760:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8101762:	e008      	b.n	8101776 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8101764:	f7fe ff38 	bl	81005d8 <HAL_GetTick>
 8101768:	4602      	mov	r2, r0
 810176a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810176c:	1ad3      	subs	r3, r2, r3
 810176e:	2b02      	cmp	r3, #2
 8101770:	d901      	bls.n	8101776 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8101772:	2303      	movs	r3, #3
 8101774:	e18b      	b.n	8101a8e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8101776:	4b8d      	ldr	r3, [pc, #564]	; (81019ac <HAL_RCC_OscConfig+0xcc8>)
 8101778:	681b      	ldr	r3, [r3, #0]
 810177a:	f003 0320 	and.w	r3, r3, #32
 810177e:	2b00      	cmp	r3, #0
 8101780:	d0f0      	beq.n	8101764 <HAL_RCC_OscConfig+0xa80>
 8101782:	e018      	b.n	81017b6 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8101784:	4b89      	ldr	r3, [pc, #548]	; (81019ac <HAL_RCC_OscConfig+0xcc8>)
 8101786:	681b      	ldr	r3, [r3, #0]
 8101788:	4a88      	ldr	r2, [pc, #544]	; (81019ac <HAL_RCC_OscConfig+0xcc8>)
 810178a:	f023 0310 	bic.w	r3, r3, #16
 810178e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8101790:	f7fe ff22 	bl	81005d8 <HAL_GetTick>
 8101794:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8101796:	e008      	b.n	81017aa <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8101798:	f7fe ff1e 	bl	81005d8 <HAL_GetTick>
 810179c:	4602      	mov	r2, r0
 810179e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81017a0:	1ad3      	subs	r3, r2, r3
 81017a2:	2b02      	cmp	r3, #2
 81017a4:	d901      	bls.n	81017aa <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 81017a6:	2303      	movs	r3, #3
 81017a8:	e171      	b.n	8101a8e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 81017aa:	4b80      	ldr	r3, [pc, #512]	; (81019ac <HAL_RCC_OscConfig+0xcc8>)
 81017ac:	681b      	ldr	r3, [r3, #0]
 81017ae:	f003 0320 	and.w	r3, r3, #32
 81017b2:	2b00      	cmp	r3, #0
 81017b4:	d1f0      	bne.n	8101798 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 81017b6:	687b      	ldr	r3, [r7, #4]
 81017b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81017ba:	2b00      	cmp	r3, #0
 81017bc:	f000 8166 	beq.w	8101a8c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 81017c0:	2300      	movs	r3, #0
 81017c2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 81017c6:	4b79      	ldr	r3, [pc, #484]	; (81019ac <HAL_RCC_OscConfig+0xcc8>)
 81017c8:	69db      	ldr	r3, [r3, #28]
 81017ca:	f003 030c 	and.w	r3, r3, #12
 81017ce:	2b0c      	cmp	r3, #12
 81017d0:	f000 80f2 	beq.w	81019b8 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 81017d4:	687b      	ldr	r3, [r7, #4]
 81017d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81017d8:	2b02      	cmp	r3, #2
 81017da:	f040 80c5 	bne.w	8101968 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 81017de:	4b73      	ldr	r3, [pc, #460]	; (81019ac <HAL_RCC_OscConfig+0xcc8>)
 81017e0:	681b      	ldr	r3, [r3, #0]
 81017e2:	4a72      	ldr	r2, [pc, #456]	; (81019ac <HAL_RCC_OscConfig+0xcc8>)
 81017e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 81017e8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 81017ea:	f7fe fef5 	bl	81005d8 <HAL_GetTick>
 81017ee:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 81017f0:	e008      	b.n	8101804 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 81017f2:	f7fe fef1 	bl	81005d8 <HAL_GetTick>
 81017f6:	4602      	mov	r2, r0
 81017f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81017fa:	1ad3      	subs	r3, r2, r3
 81017fc:	2b02      	cmp	r3, #2
 81017fe:	d901      	bls.n	8101804 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8101800:	2303      	movs	r3, #3
 8101802:	e144      	b.n	8101a8e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8101804:	4b69      	ldr	r3, [pc, #420]	; (81019ac <HAL_RCC_OscConfig+0xcc8>)
 8101806:	681b      	ldr	r3, [r3, #0]
 8101808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810180c:	2b00      	cmp	r3, #0
 810180e:	d1f0      	bne.n	81017f2 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8101810:	4b66      	ldr	r3, [pc, #408]	; (81019ac <HAL_RCC_OscConfig+0xcc8>)
 8101812:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8101816:	f003 0304 	and.w	r3, r3, #4
 810181a:	2b00      	cmp	r3, #0
 810181c:	d111      	bne.n	8101842 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 810181e:	4b63      	ldr	r3, [pc, #396]	; (81019ac <HAL_RCC_OscConfig+0xcc8>)
 8101820:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8101824:	4a61      	ldr	r2, [pc, #388]	; (81019ac <HAL_RCC_OscConfig+0xcc8>)
 8101826:	f043 0304 	orr.w	r3, r3, #4
 810182a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 810182e:	4b5f      	ldr	r3, [pc, #380]	; (81019ac <HAL_RCC_OscConfig+0xcc8>)
 8101830:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8101834:	f003 0304 	and.w	r3, r3, #4
 8101838:	60fb      	str	r3, [r7, #12]
 810183a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 810183c:	2301      	movs	r3, #1
 810183e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8101842:	4b5b      	ldr	r3, [pc, #364]	; (81019b0 <HAL_RCC_OscConfig+0xccc>)
 8101844:	68db      	ldr	r3, [r3, #12]
 8101846:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810184a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810184e:	d102      	bne.n	8101856 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8101850:	2301      	movs	r3, #1
 8101852:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8101856:	4b56      	ldr	r3, [pc, #344]	; (81019b0 <HAL_RCC_OscConfig+0xccc>)
 8101858:	68db      	ldr	r3, [r3, #12]
 810185a:	4a55      	ldr	r2, [pc, #340]	; (81019b0 <HAL_RCC_OscConfig+0xccc>)
 810185c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8101860:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8101862:	4b52      	ldr	r3, [pc, #328]	; (81019ac <HAL_RCC_OscConfig+0xcc8>)
 8101864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101866:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810186a:	f023 0303 	bic.w	r3, r3, #3
 810186e:	687a      	ldr	r2, [r7, #4]
 8101870:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8101872:	687a      	ldr	r2, [r7, #4]
 8101874:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8101876:	3a01      	subs	r2, #1
 8101878:	0212      	lsls	r2, r2, #8
 810187a:	4311      	orrs	r1, r2
 810187c:	687a      	ldr	r2, [r7, #4]
 810187e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8101880:	430a      	orrs	r2, r1
 8101882:	494a      	ldr	r1, [pc, #296]	; (81019ac <HAL_RCC_OscConfig+0xcc8>)
 8101884:	4313      	orrs	r3, r2
 8101886:	628b      	str	r3, [r1, #40]	; 0x28
 8101888:	4b48      	ldr	r3, [pc, #288]	; (81019ac <HAL_RCC_OscConfig+0xcc8>)
 810188a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810188c:	4b49      	ldr	r3, [pc, #292]	; (81019b4 <HAL_RCC_OscConfig+0xcd0>)
 810188e:	4013      	ands	r3, r2
 8101890:	687a      	ldr	r2, [r7, #4]
 8101892:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8101894:	3a01      	subs	r2, #1
 8101896:	f3c2 0108 	ubfx	r1, r2, #0, #9
 810189a:	687a      	ldr	r2, [r7, #4]
 810189c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 810189e:	3a01      	subs	r2, #1
 81018a0:	0252      	lsls	r2, r2, #9
 81018a2:	b292      	uxth	r2, r2
 81018a4:	4311      	orrs	r1, r2
 81018a6:	687a      	ldr	r2, [r7, #4]
 81018a8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 81018aa:	3a01      	subs	r2, #1
 81018ac:	0412      	lsls	r2, r2, #16
 81018ae:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 81018b2:	4311      	orrs	r1, r2
 81018b4:	687a      	ldr	r2, [r7, #4]
 81018b6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 81018b8:	3a01      	subs	r2, #1
 81018ba:	0612      	lsls	r2, r2, #24
 81018bc:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 81018c0:	430a      	orrs	r2, r1
 81018c2:	493a      	ldr	r1, [pc, #232]	; (81019ac <HAL_RCC_OscConfig+0xcc8>)
 81018c4:	4313      	orrs	r3, r2
 81018c6:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 81018c8:	4b38      	ldr	r3, [pc, #224]	; (81019ac <HAL_RCC_OscConfig+0xcc8>)
 81018ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81018cc:	4a37      	ldr	r2, [pc, #220]	; (81019ac <HAL_RCC_OscConfig+0xcc8>)
 81018ce:	f023 0310 	bic.w	r3, r3, #16
 81018d2:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 81018d4:	687b      	ldr	r3, [r7, #4]
 81018d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81018d8:	4a34      	ldr	r2, [pc, #208]	; (81019ac <HAL_RCC_OscConfig+0xcc8>)
 81018da:	00db      	lsls	r3, r3, #3
 81018dc:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 81018de:	4b33      	ldr	r3, [pc, #204]	; (81019ac <HAL_RCC_OscConfig+0xcc8>)
 81018e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81018e2:	4a32      	ldr	r2, [pc, #200]	; (81019ac <HAL_RCC_OscConfig+0xcc8>)
 81018e4:	f043 0310 	orr.w	r3, r3, #16
 81018e8:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 81018ea:	4b30      	ldr	r3, [pc, #192]	; (81019ac <HAL_RCC_OscConfig+0xcc8>)
 81018ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81018ee:	f023 020c 	bic.w	r2, r3, #12
 81018f2:	687b      	ldr	r3, [r7, #4]
 81018f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81018f6:	492d      	ldr	r1, [pc, #180]	; (81019ac <HAL_RCC_OscConfig+0xcc8>)
 81018f8:	4313      	orrs	r3, r2
 81018fa:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 81018fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8101900:	2b01      	cmp	r3, #1
 8101902:	d105      	bne.n	8101910 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8101904:	4b2a      	ldr	r3, [pc, #168]	; (81019b0 <HAL_RCC_OscConfig+0xccc>)
 8101906:	68db      	ldr	r3, [r3, #12]
 8101908:	4a29      	ldr	r2, [pc, #164]	; (81019b0 <HAL_RCC_OscConfig+0xccc>)
 810190a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 810190e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8101910:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8101914:	2b01      	cmp	r3, #1
 8101916:	d107      	bne.n	8101928 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8101918:	4b24      	ldr	r3, [pc, #144]	; (81019ac <HAL_RCC_OscConfig+0xcc8>)
 810191a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 810191e:	4a23      	ldr	r2, [pc, #140]	; (81019ac <HAL_RCC_OscConfig+0xcc8>)
 8101920:	f023 0304 	bic.w	r3, r3, #4
 8101924:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8101928:	4b20      	ldr	r3, [pc, #128]	; (81019ac <HAL_RCC_OscConfig+0xcc8>)
 810192a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810192c:	4a1f      	ldr	r2, [pc, #124]	; (81019ac <HAL_RCC_OscConfig+0xcc8>)
 810192e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8101932:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8101934:	4b1d      	ldr	r3, [pc, #116]	; (81019ac <HAL_RCC_OscConfig+0xcc8>)
 8101936:	681b      	ldr	r3, [r3, #0]
 8101938:	4a1c      	ldr	r2, [pc, #112]	; (81019ac <HAL_RCC_OscConfig+0xcc8>)
 810193a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 810193e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8101940:	f7fe fe4a 	bl	81005d8 <HAL_GetTick>
 8101944:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8101946:	e008      	b.n	810195a <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8101948:	f7fe fe46 	bl	81005d8 <HAL_GetTick>
 810194c:	4602      	mov	r2, r0
 810194e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101950:	1ad3      	subs	r3, r2, r3
 8101952:	2b02      	cmp	r3, #2
 8101954:	d901      	bls.n	810195a <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8101956:	2303      	movs	r3, #3
 8101958:	e099      	b.n	8101a8e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 810195a:	4b14      	ldr	r3, [pc, #80]	; (81019ac <HAL_RCC_OscConfig+0xcc8>)
 810195c:	681b      	ldr	r3, [r3, #0]
 810195e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101962:	2b00      	cmp	r3, #0
 8101964:	d0f0      	beq.n	8101948 <HAL_RCC_OscConfig+0xc64>
 8101966:	e091      	b.n	8101a8c <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8101968:	4b10      	ldr	r3, [pc, #64]	; (81019ac <HAL_RCC_OscConfig+0xcc8>)
 810196a:	681b      	ldr	r3, [r3, #0]
 810196c:	4a0f      	ldr	r2, [pc, #60]	; (81019ac <HAL_RCC_OscConfig+0xcc8>)
 810196e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8101972:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8101974:	f7fe fe30 	bl	81005d8 <HAL_GetTick>
 8101978:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 810197a:	e008      	b.n	810198e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 810197c:	f7fe fe2c 	bl	81005d8 <HAL_GetTick>
 8101980:	4602      	mov	r2, r0
 8101982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101984:	1ad3      	subs	r3, r2, r3
 8101986:	2b02      	cmp	r3, #2
 8101988:	d901      	bls.n	810198e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 810198a:	2303      	movs	r3, #3
 810198c:	e07f      	b.n	8101a8e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 810198e:	4b07      	ldr	r3, [pc, #28]	; (81019ac <HAL_RCC_OscConfig+0xcc8>)
 8101990:	681b      	ldr	r3, [r3, #0]
 8101992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101996:	2b00      	cmp	r3, #0
 8101998:	d1f0      	bne.n	810197c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 810199a:	4b04      	ldr	r3, [pc, #16]	; (81019ac <HAL_RCC_OscConfig+0xcc8>)
 810199c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810199e:	4a03      	ldr	r2, [pc, #12]	; (81019ac <HAL_RCC_OscConfig+0xcc8>)
 81019a0:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 81019a4:	f023 0303 	bic.w	r3, r3, #3
 81019a8:	6293      	str	r3, [r2, #40]	; 0x28
 81019aa:	e06f      	b.n	8101a8c <HAL_RCC_OscConfig+0xda8>
 81019ac:	46020c00 	.word	0x46020c00
 81019b0:	46020800 	.word	0x46020800
 81019b4:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 81019b8:	4b37      	ldr	r3, [pc, #220]	; (8101a98 <HAL_RCC_OscConfig+0xdb4>)
 81019ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81019bc:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 81019be:	4b36      	ldr	r3, [pc, #216]	; (8101a98 <HAL_RCC_OscConfig+0xdb4>)
 81019c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81019c2:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 81019c4:	687b      	ldr	r3, [r7, #4]
 81019c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81019c8:	2b01      	cmp	r3, #1
 81019ca:	d039      	beq.n	8101a40 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 81019cc:	69fb      	ldr	r3, [r7, #28]
 81019ce:	f003 0203 	and.w	r2, r3, #3
 81019d2:	687b      	ldr	r3, [r7, #4]
 81019d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 81019d6:	429a      	cmp	r2, r3
 81019d8:	d132      	bne.n	8101a40 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 81019da:	69fb      	ldr	r3, [r7, #28]
 81019dc:	0a1b      	lsrs	r3, r3, #8
 81019de:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 81019e2:	687b      	ldr	r3, [r7, #4]
 81019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81019e6:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 81019e8:	429a      	cmp	r2, r3
 81019ea:	d129      	bne.n	8101a40 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 81019ec:	69fb      	ldr	r3, [r7, #28]
 81019ee:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 81019f2:	687b      	ldr	r3, [r7, #4]
 81019f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 81019f6:	429a      	cmp	r2, r3
 81019f8:	d122      	bne.n	8101a40 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 81019fa:	69bb      	ldr	r3, [r7, #24]
 81019fc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8101a00:	687b      	ldr	r3, [r7, #4]
 8101a02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8101a04:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8101a06:	429a      	cmp	r2, r3
 8101a08:	d11a      	bne.n	8101a40 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8101a0a:	69bb      	ldr	r3, [r7, #24]
 8101a0c:	0a5b      	lsrs	r3, r3, #9
 8101a0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8101a12:	687b      	ldr	r3, [r7, #4]
 8101a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8101a16:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8101a18:	429a      	cmp	r2, r3
 8101a1a:	d111      	bne.n	8101a40 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8101a1c:	69bb      	ldr	r3, [r7, #24]
 8101a1e:	0c1b      	lsrs	r3, r3, #16
 8101a20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8101a24:	687b      	ldr	r3, [r7, #4]
 8101a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101a28:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8101a2a:	429a      	cmp	r2, r3
 8101a2c:	d108      	bne.n	8101a40 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8101a2e:	69bb      	ldr	r3, [r7, #24]
 8101a30:	0e1b      	lsrs	r3, r3, #24
 8101a32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8101a36:	687b      	ldr	r3, [r7, #4]
 8101a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101a3a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8101a3c:	429a      	cmp	r2, r3
 8101a3e:	d001      	beq.n	8101a44 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8101a40:	2301      	movs	r3, #1
 8101a42:	e024      	b.n	8101a8e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8101a44:	4b14      	ldr	r3, [pc, #80]	; (8101a98 <HAL_RCC_OscConfig+0xdb4>)
 8101a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8101a48:	08db      	lsrs	r3, r3, #3
 8101a4a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8101a4e:	687b      	ldr	r3, [r7, #4]
 8101a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8101a52:	429a      	cmp	r2, r3
 8101a54:	d01a      	beq.n	8101a8c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8101a56:	4b10      	ldr	r3, [pc, #64]	; (8101a98 <HAL_RCC_OscConfig+0xdb4>)
 8101a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101a5a:	4a0f      	ldr	r2, [pc, #60]	; (8101a98 <HAL_RCC_OscConfig+0xdb4>)
 8101a5c:	f023 0310 	bic.w	r3, r3, #16
 8101a60:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8101a62:	f7fe fdb9 	bl	81005d8 <HAL_GetTick>
 8101a66:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8101a68:	bf00      	nop
 8101a6a:	f7fe fdb5 	bl	81005d8 <HAL_GetTick>
 8101a6e:	4602      	mov	r2, r0
 8101a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101a72:	4293      	cmp	r3, r2
 8101a74:	d0f9      	beq.n	8101a6a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8101a76:	687b      	ldr	r3, [r7, #4]
 8101a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101a7a:	4a07      	ldr	r2, [pc, #28]	; (8101a98 <HAL_RCC_OscConfig+0xdb4>)
 8101a7c:	00db      	lsls	r3, r3, #3
 8101a7e:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8101a80:	4b05      	ldr	r3, [pc, #20]	; (8101a98 <HAL_RCC_OscConfig+0xdb4>)
 8101a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101a84:	4a04      	ldr	r2, [pc, #16]	; (8101a98 <HAL_RCC_OscConfig+0xdb4>)
 8101a86:	f043 0310 	orr.w	r3, r3, #16
 8101a8a:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8101a8c:	2300      	movs	r3, #0
}
 8101a8e:	4618      	mov	r0, r3
 8101a90:	3738      	adds	r7, #56	; 0x38
 8101a92:	46bd      	mov	sp, r7
 8101a94:	bd80      	pop	{r7, pc}
 8101a96:	bf00      	nop
 8101a98:	46020c00 	.word	0x46020c00

08101a9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8101a9c:	b580      	push	{r7, lr}
 8101a9e:	b086      	sub	sp, #24
 8101aa0:	af00      	add	r7, sp, #0
 8101aa2:	6078      	str	r0, [r7, #4]
 8101aa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8101aa6:	687b      	ldr	r3, [r7, #4]
 8101aa8:	2b00      	cmp	r3, #0
 8101aaa:	d101      	bne.n	8101ab0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8101aac:	2301      	movs	r3, #1
 8101aae:	e1d9      	b.n	8101e64 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8101ab0:	4b9b      	ldr	r3, [pc, #620]	; (8101d20 <HAL_RCC_ClockConfig+0x284>)
 8101ab2:	681b      	ldr	r3, [r3, #0]
 8101ab4:	f003 030f 	and.w	r3, r3, #15
 8101ab8:	683a      	ldr	r2, [r7, #0]
 8101aba:	429a      	cmp	r2, r3
 8101abc:	d910      	bls.n	8101ae0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8101abe:	4b98      	ldr	r3, [pc, #608]	; (8101d20 <HAL_RCC_ClockConfig+0x284>)
 8101ac0:	681b      	ldr	r3, [r3, #0]
 8101ac2:	f023 020f 	bic.w	r2, r3, #15
 8101ac6:	4996      	ldr	r1, [pc, #600]	; (8101d20 <HAL_RCC_ClockConfig+0x284>)
 8101ac8:	683b      	ldr	r3, [r7, #0]
 8101aca:	4313      	orrs	r3, r2
 8101acc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8101ace:	4b94      	ldr	r3, [pc, #592]	; (8101d20 <HAL_RCC_ClockConfig+0x284>)
 8101ad0:	681b      	ldr	r3, [r3, #0]
 8101ad2:	f003 030f 	and.w	r3, r3, #15
 8101ad6:	683a      	ldr	r2, [r7, #0]
 8101ad8:	429a      	cmp	r2, r3
 8101ada:	d001      	beq.n	8101ae0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8101adc:	2301      	movs	r3, #1
 8101ade:	e1c1      	b.n	8101e64 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8101ae0:	687b      	ldr	r3, [r7, #4]
 8101ae2:	681b      	ldr	r3, [r3, #0]
 8101ae4:	f003 0310 	and.w	r3, r3, #16
 8101ae8:	2b00      	cmp	r3, #0
 8101aea:	d010      	beq.n	8101b0e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8101aec:	687b      	ldr	r3, [r7, #4]
 8101aee:	695a      	ldr	r2, [r3, #20]
 8101af0:	4b8c      	ldr	r3, [pc, #560]	; (8101d24 <HAL_RCC_ClockConfig+0x288>)
 8101af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101af4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8101af8:	429a      	cmp	r2, r3
 8101afa:	d908      	bls.n	8101b0e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8101afc:	4b89      	ldr	r3, [pc, #548]	; (8101d24 <HAL_RCC_ClockConfig+0x288>)
 8101afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101b00:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8101b04:	687b      	ldr	r3, [r7, #4]
 8101b06:	695b      	ldr	r3, [r3, #20]
 8101b08:	4986      	ldr	r1, [pc, #536]	; (8101d24 <HAL_RCC_ClockConfig+0x288>)
 8101b0a:	4313      	orrs	r3, r2
 8101b0c:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8101b0e:	687b      	ldr	r3, [r7, #4]
 8101b10:	681b      	ldr	r3, [r3, #0]
 8101b12:	f003 0308 	and.w	r3, r3, #8
 8101b16:	2b00      	cmp	r3, #0
 8101b18:	d012      	beq.n	8101b40 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8101b1a:	687b      	ldr	r3, [r7, #4]
 8101b1c:	691a      	ldr	r2, [r3, #16]
 8101b1e:	4b81      	ldr	r3, [pc, #516]	; (8101d24 <HAL_RCC_ClockConfig+0x288>)
 8101b20:	6a1b      	ldr	r3, [r3, #32]
 8101b22:	091b      	lsrs	r3, r3, #4
 8101b24:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8101b28:	429a      	cmp	r2, r3
 8101b2a:	d909      	bls.n	8101b40 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8101b2c:	4b7d      	ldr	r3, [pc, #500]	; (8101d24 <HAL_RCC_ClockConfig+0x288>)
 8101b2e:	6a1b      	ldr	r3, [r3, #32]
 8101b30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8101b34:	687b      	ldr	r3, [r7, #4]
 8101b36:	691b      	ldr	r3, [r3, #16]
 8101b38:	011b      	lsls	r3, r3, #4
 8101b3a:	497a      	ldr	r1, [pc, #488]	; (8101d24 <HAL_RCC_ClockConfig+0x288>)
 8101b3c:	4313      	orrs	r3, r2
 8101b3e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8101b40:	687b      	ldr	r3, [r7, #4]
 8101b42:	681b      	ldr	r3, [r3, #0]
 8101b44:	f003 0304 	and.w	r3, r3, #4
 8101b48:	2b00      	cmp	r3, #0
 8101b4a:	d010      	beq.n	8101b6e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8101b4c:	687b      	ldr	r3, [r7, #4]
 8101b4e:	68da      	ldr	r2, [r3, #12]
 8101b50:	4b74      	ldr	r3, [pc, #464]	; (8101d24 <HAL_RCC_ClockConfig+0x288>)
 8101b52:	6a1b      	ldr	r3, [r3, #32]
 8101b54:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8101b58:	429a      	cmp	r2, r3
 8101b5a:	d908      	bls.n	8101b6e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8101b5c:	4b71      	ldr	r3, [pc, #452]	; (8101d24 <HAL_RCC_ClockConfig+0x288>)
 8101b5e:	6a1b      	ldr	r3, [r3, #32]
 8101b60:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8101b64:	687b      	ldr	r3, [r7, #4]
 8101b66:	68db      	ldr	r3, [r3, #12]
 8101b68:	496e      	ldr	r1, [pc, #440]	; (8101d24 <HAL_RCC_ClockConfig+0x288>)
 8101b6a:	4313      	orrs	r3, r2
 8101b6c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8101b6e:	687b      	ldr	r3, [r7, #4]
 8101b70:	681b      	ldr	r3, [r3, #0]
 8101b72:	f003 0302 	and.w	r3, r3, #2
 8101b76:	2b00      	cmp	r3, #0
 8101b78:	d010      	beq.n	8101b9c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8101b7a:	687b      	ldr	r3, [r7, #4]
 8101b7c:	689a      	ldr	r2, [r3, #8]
 8101b7e:	4b69      	ldr	r3, [pc, #420]	; (8101d24 <HAL_RCC_ClockConfig+0x288>)
 8101b80:	6a1b      	ldr	r3, [r3, #32]
 8101b82:	f003 030f 	and.w	r3, r3, #15
 8101b86:	429a      	cmp	r2, r3
 8101b88:	d908      	bls.n	8101b9c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8101b8a:	4b66      	ldr	r3, [pc, #408]	; (8101d24 <HAL_RCC_ClockConfig+0x288>)
 8101b8c:	6a1b      	ldr	r3, [r3, #32]
 8101b8e:	f023 020f 	bic.w	r2, r3, #15
 8101b92:	687b      	ldr	r3, [r7, #4]
 8101b94:	689b      	ldr	r3, [r3, #8]
 8101b96:	4963      	ldr	r1, [pc, #396]	; (8101d24 <HAL_RCC_ClockConfig+0x288>)
 8101b98:	4313      	orrs	r3, r2
 8101b9a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8101b9c:	687b      	ldr	r3, [r7, #4]
 8101b9e:	681b      	ldr	r3, [r3, #0]
 8101ba0:	f003 0301 	and.w	r3, r3, #1
 8101ba4:	2b00      	cmp	r3, #0
 8101ba6:	f000 80d2 	beq.w	8101d4e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8101baa:	2300      	movs	r3, #0
 8101bac:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8101bae:	687b      	ldr	r3, [r7, #4]
 8101bb0:	685b      	ldr	r3, [r3, #4]
 8101bb2:	2b03      	cmp	r3, #3
 8101bb4:	d143      	bne.n	8101c3e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8101bb6:	4b5b      	ldr	r3, [pc, #364]	; (8101d24 <HAL_RCC_ClockConfig+0x288>)
 8101bb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8101bbc:	f003 0304 	and.w	r3, r3, #4
 8101bc0:	2b00      	cmp	r3, #0
 8101bc2:	d110      	bne.n	8101be6 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8101bc4:	4b57      	ldr	r3, [pc, #348]	; (8101d24 <HAL_RCC_ClockConfig+0x288>)
 8101bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8101bca:	4a56      	ldr	r2, [pc, #344]	; (8101d24 <HAL_RCC_ClockConfig+0x288>)
 8101bcc:	f043 0304 	orr.w	r3, r3, #4
 8101bd0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8101bd4:	4b53      	ldr	r3, [pc, #332]	; (8101d24 <HAL_RCC_ClockConfig+0x288>)
 8101bd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8101bda:	f003 0304 	and.w	r3, r3, #4
 8101bde:	60bb      	str	r3, [r7, #8]
 8101be0:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8101be2:	2301      	movs	r3, #1
 8101be4:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8101be6:	f7fe fcf7 	bl	81005d8 <HAL_GetTick>
 8101bea:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8101bec:	4b4e      	ldr	r3, [pc, #312]	; (8101d28 <HAL_RCC_ClockConfig+0x28c>)
 8101bee:	68db      	ldr	r3, [r3, #12]
 8101bf0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8101bf4:	2b00      	cmp	r3, #0
 8101bf6:	d00f      	beq.n	8101c18 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8101bf8:	e008      	b.n	8101c0c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8101bfa:	f7fe fced 	bl	81005d8 <HAL_GetTick>
 8101bfe:	4602      	mov	r2, r0
 8101c00:	693b      	ldr	r3, [r7, #16]
 8101c02:	1ad3      	subs	r3, r2, r3
 8101c04:	2b02      	cmp	r3, #2
 8101c06:	d901      	bls.n	8101c0c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8101c08:	2303      	movs	r3, #3
 8101c0a:	e12b      	b.n	8101e64 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8101c0c:	4b46      	ldr	r3, [pc, #280]	; (8101d28 <HAL_RCC_ClockConfig+0x28c>)
 8101c0e:	68db      	ldr	r3, [r3, #12]
 8101c10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101c14:	2b00      	cmp	r3, #0
 8101c16:	d0f0      	beq.n	8101bfa <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8101c18:	7dfb      	ldrb	r3, [r7, #23]
 8101c1a:	2b01      	cmp	r3, #1
 8101c1c:	d107      	bne.n	8101c2e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8101c1e:	4b41      	ldr	r3, [pc, #260]	; (8101d24 <HAL_RCC_ClockConfig+0x288>)
 8101c20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8101c24:	4a3f      	ldr	r2, [pc, #252]	; (8101d24 <HAL_RCC_ClockConfig+0x288>)
 8101c26:	f023 0304 	bic.w	r3, r3, #4
 8101c2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8101c2e:	4b3d      	ldr	r3, [pc, #244]	; (8101d24 <HAL_RCC_ClockConfig+0x288>)
 8101c30:	681b      	ldr	r3, [r3, #0]
 8101c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101c36:	2b00      	cmp	r3, #0
 8101c38:	d121      	bne.n	8101c7e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8101c3a:	2301      	movs	r3, #1
 8101c3c:	e112      	b.n	8101e64 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8101c3e:	687b      	ldr	r3, [r7, #4]
 8101c40:	685b      	ldr	r3, [r3, #4]
 8101c42:	2b02      	cmp	r3, #2
 8101c44:	d107      	bne.n	8101c56 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8101c46:	4b37      	ldr	r3, [pc, #220]	; (8101d24 <HAL_RCC_ClockConfig+0x288>)
 8101c48:	681b      	ldr	r3, [r3, #0]
 8101c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8101c4e:	2b00      	cmp	r3, #0
 8101c50:	d115      	bne.n	8101c7e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8101c52:	2301      	movs	r3, #1
 8101c54:	e106      	b.n	8101e64 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8101c56:	687b      	ldr	r3, [r7, #4]
 8101c58:	685b      	ldr	r3, [r3, #4]
 8101c5a:	2b00      	cmp	r3, #0
 8101c5c:	d107      	bne.n	8101c6e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8101c5e:	4b31      	ldr	r3, [pc, #196]	; (8101d24 <HAL_RCC_ClockConfig+0x288>)
 8101c60:	681b      	ldr	r3, [r3, #0]
 8101c62:	f003 0304 	and.w	r3, r3, #4
 8101c66:	2b00      	cmp	r3, #0
 8101c68:	d109      	bne.n	8101c7e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8101c6a:	2301      	movs	r3, #1
 8101c6c:	e0fa      	b.n	8101e64 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8101c6e:	4b2d      	ldr	r3, [pc, #180]	; (8101d24 <HAL_RCC_ClockConfig+0x288>)
 8101c70:	681b      	ldr	r3, [r3, #0]
 8101c72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8101c76:	2b00      	cmp	r3, #0
 8101c78:	d101      	bne.n	8101c7e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8101c7a:	2301      	movs	r3, #1
 8101c7c:	e0f2      	b.n	8101e64 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8101c7e:	4b29      	ldr	r3, [pc, #164]	; (8101d24 <HAL_RCC_ClockConfig+0x288>)
 8101c80:	69db      	ldr	r3, [r3, #28]
 8101c82:	f023 0203 	bic.w	r2, r3, #3
 8101c86:	687b      	ldr	r3, [r7, #4]
 8101c88:	685b      	ldr	r3, [r3, #4]
 8101c8a:	4926      	ldr	r1, [pc, #152]	; (8101d24 <HAL_RCC_ClockConfig+0x288>)
 8101c8c:	4313      	orrs	r3, r2
 8101c8e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8101c90:	f7fe fca2 	bl	81005d8 <HAL_GetTick>
 8101c94:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8101c96:	687b      	ldr	r3, [r7, #4]
 8101c98:	685b      	ldr	r3, [r3, #4]
 8101c9a:	2b03      	cmp	r3, #3
 8101c9c:	d112      	bne.n	8101cc4 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8101c9e:	e00a      	b.n	8101cb6 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8101ca0:	f7fe fc9a 	bl	81005d8 <HAL_GetTick>
 8101ca4:	4602      	mov	r2, r0
 8101ca6:	693b      	ldr	r3, [r7, #16]
 8101ca8:	1ad3      	subs	r3, r2, r3
 8101caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8101cae:	4293      	cmp	r3, r2
 8101cb0:	d901      	bls.n	8101cb6 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8101cb2:	2303      	movs	r3, #3
 8101cb4:	e0d6      	b.n	8101e64 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8101cb6:	4b1b      	ldr	r3, [pc, #108]	; (8101d24 <HAL_RCC_ClockConfig+0x288>)
 8101cb8:	69db      	ldr	r3, [r3, #28]
 8101cba:	f003 030c 	and.w	r3, r3, #12
 8101cbe:	2b0c      	cmp	r3, #12
 8101cc0:	d1ee      	bne.n	8101ca0 <HAL_RCC_ClockConfig+0x204>
 8101cc2:	e044      	b.n	8101d4e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8101cc4:	687b      	ldr	r3, [r7, #4]
 8101cc6:	685b      	ldr	r3, [r3, #4]
 8101cc8:	2b02      	cmp	r3, #2
 8101cca:	d112      	bne.n	8101cf2 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8101ccc:	e00a      	b.n	8101ce4 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8101cce:	f7fe fc83 	bl	81005d8 <HAL_GetTick>
 8101cd2:	4602      	mov	r2, r0
 8101cd4:	693b      	ldr	r3, [r7, #16]
 8101cd6:	1ad3      	subs	r3, r2, r3
 8101cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8101cdc:	4293      	cmp	r3, r2
 8101cde:	d901      	bls.n	8101ce4 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8101ce0:	2303      	movs	r3, #3
 8101ce2:	e0bf      	b.n	8101e64 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8101ce4:	4b0f      	ldr	r3, [pc, #60]	; (8101d24 <HAL_RCC_ClockConfig+0x288>)
 8101ce6:	69db      	ldr	r3, [r3, #28]
 8101ce8:	f003 030c 	and.w	r3, r3, #12
 8101cec:	2b08      	cmp	r3, #8
 8101cee:	d1ee      	bne.n	8101cce <HAL_RCC_ClockConfig+0x232>
 8101cf0:	e02d      	b.n	8101d4e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8101cf2:	687b      	ldr	r3, [r7, #4]
 8101cf4:	685b      	ldr	r3, [r3, #4]
 8101cf6:	2b00      	cmp	r3, #0
 8101cf8:	d123      	bne.n	8101d42 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8101cfa:	e00a      	b.n	8101d12 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8101cfc:	f7fe fc6c 	bl	81005d8 <HAL_GetTick>
 8101d00:	4602      	mov	r2, r0
 8101d02:	693b      	ldr	r3, [r7, #16]
 8101d04:	1ad3      	subs	r3, r2, r3
 8101d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8101d0a:	4293      	cmp	r3, r2
 8101d0c:	d901      	bls.n	8101d12 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8101d0e:	2303      	movs	r3, #3
 8101d10:	e0a8      	b.n	8101e64 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8101d12:	4b04      	ldr	r3, [pc, #16]	; (8101d24 <HAL_RCC_ClockConfig+0x288>)
 8101d14:	69db      	ldr	r3, [r3, #28]
 8101d16:	f003 030c 	and.w	r3, r3, #12
 8101d1a:	2b00      	cmp	r3, #0
 8101d1c:	d1ee      	bne.n	8101cfc <HAL_RCC_ClockConfig+0x260>
 8101d1e:	e016      	b.n	8101d4e <HAL_RCC_ClockConfig+0x2b2>
 8101d20:	40022000 	.word	0x40022000
 8101d24:	46020c00 	.word	0x46020c00
 8101d28:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8101d2c:	f7fe fc54 	bl	81005d8 <HAL_GetTick>
 8101d30:	4602      	mov	r2, r0
 8101d32:	693b      	ldr	r3, [r7, #16]
 8101d34:	1ad3      	subs	r3, r2, r3
 8101d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8101d3a:	4293      	cmp	r3, r2
 8101d3c:	d901      	bls.n	8101d42 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8101d3e:	2303      	movs	r3, #3
 8101d40:	e090      	b.n	8101e64 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8101d42:	4b4a      	ldr	r3, [pc, #296]	; (8101e6c <HAL_RCC_ClockConfig+0x3d0>)
 8101d44:	69db      	ldr	r3, [r3, #28]
 8101d46:	f003 030c 	and.w	r3, r3, #12
 8101d4a:	2b04      	cmp	r3, #4
 8101d4c:	d1ee      	bne.n	8101d2c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8101d4e:	687b      	ldr	r3, [r7, #4]
 8101d50:	681b      	ldr	r3, [r3, #0]
 8101d52:	f003 0302 	and.w	r3, r3, #2
 8101d56:	2b00      	cmp	r3, #0
 8101d58:	d010      	beq.n	8101d7c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8101d5a:	687b      	ldr	r3, [r7, #4]
 8101d5c:	689a      	ldr	r2, [r3, #8]
 8101d5e:	4b43      	ldr	r3, [pc, #268]	; (8101e6c <HAL_RCC_ClockConfig+0x3d0>)
 8101d60:	6a1b      	ldr	r3, [r3, #32]
 8101d62:	f003 030f 	and.w	r3, r3, #15
 8101d66:	429a      	cmp	r2, r3
 8101d68:	d208      	bcs.n	8101d7c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8101d6a:	4b40      	ldr	r3, [pc, #256]	; (8101e6c <HAL_RCC_ClockConfig+0x3d0>)
 8101d6c:	6a1b      	ldr	r3, [r3, #32]
 8101d6e:	f023 020f 	bic.w	r2, r3, #15
 8101d72:	687b      	ldr	r3, [r7, #4]
 8101d74:	689b      	ldr	r3, [r3, #8]
 8101d76:	493d      	ldr	r1, [pc, #244]	; (8101e6c <HAL_RCC_ClockConfig+0x3d0>)
 8101d78:	4313      	orrs	r3, r2
 8101d7a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8101d7c:	4b3c      	ldr	r3, [pc, #240]	; (8101e70 <HAL_RCC_ClockConfig+0x3d4>)
 8101d7e:	681b      	ldr	r3, [r3, #0]
 8101d80:	f003 030f 	and.w	r3, r3, #15
 8101d84:	683a      	ldr	r2, [r7, #0]
 8101d86:	429a      	cmp	r2, r3
 8101d88:	d210      	bcs.n	8101dac <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8101d8a:	4b39      	ldr	r3, [pc, #228]	; (8101e70 <HAL_RCC_ClockConfig+0x3d4>)
 8101d8c:	681b      	ldr	r3, [r3, #0]
 8101d8e:	f023 020f 	bic.w	r2, r3, #15
 8101d92:	4937      	ldr	r1, [pc, #220]	; (8101e70 <HAL_RCC_ClockConfig+0x3d4>)
 8101d94:	683b      	ldr	r3, [r7, #0]
 8101d96:	4313      	orrs	r3, r2
 8101d98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8101d9a:	4b35      	ldr	r3, [pc, #212]	; (8101e70 <HAL_RCC_ClockConfig+0x3d4>)
 8101d9c:	681b      	ldr	r3, [r3, #0]
 8101d9e:	f003 030f 	and.w	r3, r3, #15
 8101da2:	683a      	ldr	r2, [r7, #0]
 8101da4:	429a      	cmp	r2, r3
 8101da6:	d001      	beq.n	8101dac <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8101da8:	2301      	movs	r3, #1
 8101daa:	e05b      	b.n	8101e64 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8101dac:	687b      	ldr	r3, [r7, #4]
 8101dae:	681b      	ldr	r3, [r3, #0]
 8101db0:	f003 0304 	and.w	r3, r3, #4
 8101db4:	2b00      	cmp	r3, #0
 8101db6:	d010      	beq.n	8101dda <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8101db8:	687b      	ldr	r3, [r7, #4]
 8101dba:	68da      	ldr	r2, [r3, #12]
 8101dbc:	4b2b      	ldr	r3, [pc, #172]	; (8101e6c <HAL_RCC_ClockConfig+0x3d0>)
 8101dbe:	6a1b      	ldr	r3, [r3, #32]
 8101dc0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8101dc4:	429a      	cmp	r2, r3
 8101dc6:	d208      	bcs.n	8101dda <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8101dc8:	4b28      	ldr	r3, [pc, #160]	; (8101e6c <HAL_RCC_ClockConfig+0x3d0>)
 8101dca:	6a1b      	ldr	r3, [r3, #32]
 8101dcc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8101dd0:	687b      	ldr	r3, [r7, #4]
 8101dd2:	68db      	ldr	r3, [r3, #12]
 8101dd4:	4925      	ldr	r1, [pc, #148]	; (8101e6c <HAL_RCC_ClockConfig+0x3d0>)
 8101dd6:	4313      	orrs	r3, r2
 8101dd8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8101dda:	687b      	ldr	r3, [r7, #4]
 8101ddc:	681b      	ldr	r3, [r3, #0]
 8101dde:	f003 0308 	and.w	r3, r3, #8
 8101de2:	2b00      	cmp	r3, #0
 8101de4:	d012      	beq.n	8101e0c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8101de6:	687b      	ldr	r3, [r7, #4]
 8101de8:	691a      	ldr	r2, [r3, #16]
 8101dea:	4b20      	ldr	r3, [pc, #128]	; (8101e6c <HAL_RCC_ClockConfig+0x3d0>)
 8101dec:	6a1b      	ldr	r3, [r3, #32]
 8101dee:	091b      	lsrs	r3, r3, #4
 8101df0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8101df4:	429a      	cmp	r2, r3
 8101df6:	d209      	bcs.n	8101e0c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8101df8:	4b1c      	ldr	r3, [pc, #112]	; (8101e6c <HAL_RCC_ClockConfig+0x3d0>)
 8101dfa:	6a1b      	ldr	r3, [r3, #32]
 8101dfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8101e00:	687b      	ldr	r3, [r7, #4]
 8101e02:	691b      	ldr	r3, [r3, #16]
 8101e04:	011b      	lsls	r3, r3, #4
 8101e06:	4919      	ldr	r1, [pc, #100]	; (8101e6c <HAL_RCC_ClockConfig+0x3d0>)
 8101e08:	4313      	orrs	r3, r2
 8101e0a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8101e0c:	687b      	ldr	r3, [r7, #4]
 8101e0e:	681b      	ldr	r3, [r3, #0]
 8101e10:	f003 0310 	and.w	r3, r3, #16
 8101e14:	2b00      	cmp	r3, #0
 8101e16:	d010      	beq.n	8101e3a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8101e18:	687b      	ldr	r3, [r7, #4]
 8101e1a:	695a      	ldr	r2, [r3, #20]
 8101e1c:	4b13      	ldr	r3, [pc, #76]	; (8101e6c <HAL_RCC_ClockConfig+0x3d0>)
 8101e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101e20:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8101e24:	429a      	cmp	r2, r3
 8101e26:	d208      	bcs.n	8101e3a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8101e28:	4b10      	ldr	r3, [pc, #64]	; (8101e6c <HAL_RCC_ClockConfig+0x3d0>)
 8101e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101e2c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8101e30:	687b      	ldr	r3, [r7, #4]
 8101e32:	695b      	ldr	r3, [r3, #20]
 8101e34:	490d      	ldr	r1, [pc, #52]	; (8101e6c <HAL_RCC_ClockConfig+0x3d0>)
 8101e36:	4313      	orrs	r3, r2
 8101e38:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8101e3a:	f000 f821 	bl	8101e80 <HAL_RCC_GetSysClockFreq>
 8101e3e:	4602      	mov	r2, r0
 8101e40:	4b0a      	ldr	r3, [pc, #40]	; (8101e6c <HAL_RCC_ClockConfig+0x3d0>)
 8101e42:	6a1b      	ldr	r3, [r3, #32]
 8101e44:	f003 030f 	and.w	r3, r3, #15
 8101e48:	490a      	ldr	r1, [pc, #40]	; (8101e74 <HAL_RCC_ClockConfig+0x3d8>)
 8101e4a:	5ccb      	ldrb	r3, [r1, r3]
 8101e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8101e50:	4a09      	ldr	r2, [pc, #36]	; (8101e78 <HAL_RCC_ClockConfig+0x3dc>)
 8101e52:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8101e54:	4b09      	ldr	r3, [pc, #36]	; (8101e7c <HAL_RCC_ClockConfig+0x3e0>)
 8101e56:	681b      	ldr	r3, [r3, #0]
 8101e58:	4618      	mov	r0, r3
 8101e5a:	f7fe fb73 	bl	8100544 <HAL_InitTick>
 8101e5e:	4603      	mov	r3, r0
 8101e60:	73fb      	strb	r3, [r7, #15]

  return status;
 8101e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8101e64:	4618      	mov	r0, r3
 8101e66:	3718      	adds	r7, #24
 8101e68:	46bd      	mov	sp, r7
 8101e6a:	bd80      	pop	{r7, pc}
 8101e6c:	46020c00 	.word	0x46020c00
 8101e70:	40022000 	.word	0x40022000
 8101e74:	08102240 	.word	0x08102240
 8101e78:	20040004 	.word	0x20040004
 8101e7c:	20040008 	.word	0x20040008

08101e80 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8101e80:	b480      	push	{r7}
 8101e82:	b08b      	sub	sp, #44	; 0x2c
 8101e84:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8101e86:	2300      	movs	r3, #0
 8101e88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8101e8a:	2300      	movs	r3, #0
 8101e8c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8101e8e:	4b78      	ldr	r3, [pc, #480]	; (8102070 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8101e90:	69db      	ldr	r3, [r3, #28]
 8101e92:	f003 030c 	and.w	r3, r3, #12
 8101e96:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8101e98:	4b75      	ldr	r3, [pc, #468]	; (8102070 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8101e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101e9c:	f003 0303 	and.w	r3, r3, #3
 8101ea0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8101ea2:	69bb      	ldr	r3, [r7, #24]
 8101ea4:	2b00      	cmp	r3, #0
 8101ea6:	d005      	beq.n	8101eb4 <HAL_RCC_GetSysClockFreq+0x34>
 8101ea8:	69bb      	ldr	r3, [r7, #24]
 8101eaa:	2b0c      	cmp	r3, #12
 8101eac:	d121      	bne.n	8101ef2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8101eae:	697b      	ldr	r3, [r7, #20]
 8101eb0:	2b01      	cmp	r3, #1
 8101eb2:	d11e      	bne.n	8101ef2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8101eb4:	4b6e      	ldr	r3, [pc, #440]	; (8102070 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8101eb6:	689b      	ldr	r3, [r3, #8]
 8101eb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8101ebc:	2b00      	cmp	r3, #0
 8101ebe:	d107      	bne.n	8101ed0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8101ec0:	4b6b      	ldr	r3, [pc, #428]	; (8102070 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8101ec2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101ec6:	0b1b      	lsrs	r3, r3, #12
 8101ec8:	f003 030f 	and.w	r3, r3, #15
 8101ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8101ece:	e005      	b.n	8101edc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8101ed0:	4b67      	ldr	r3, [pc, #412]	; (8102070 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8101ed2:	689b      	ldr	r3, [r3, #8]
 8101ed4:	0f1b      	lsrs	r3, r3, #28
 8101ed6:	f003 030f 	and.w	r3, r3, #15
 8101eda:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8101edc:	4a65      	ldr	r2, [pc, #404]	; (8102074 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8101ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8101ee4:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8101ee6:	69bb      	ldr	r3, [r7, #24]
 8101ee8:	2b00      	cmp	r3, #0
 8101eea:	d110      	bne.n	8101f0e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8101eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101eee:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8101ef0:	e00d      	b.n	8101f0e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8101ef2:	4b5f      	ldr	r3, [pc, #380]	; (8102070 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8101ef4:	69db      	ldr	r3, [r3, #28]
 8101ef6:	f003 030c 	and.w	r3, r3, #12
 8101efa:	2b04      	cmp	r3, #4
 8101efc:	d102      	bne.n	8101f04 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8101efe:	4b5e      	ldr	r3, [pc, #376]	; (8102078 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8101f00:	623b      	str	r3, [r7, #32]
 8101f02:	e004      	b.n	8101f0e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8101f04:	69bb      	ldr	r3, [r7, #24]
 8101f06:	2b08      	cmp	r3, #8
 8101f08:	d101      	bne.n	8101f0e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8101f0a:	4b5b      	ldr	r3, [pc, #364]	; (8102078 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8101f0c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8101f0e:	69bb      	ldr	r3, [r7, #24]
 8101f10:	2b0c      	cmp	r3, #12
 8101f12:	f040 80a5 	bne.w	8102060 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8101f16:	4b56      	ldr	r3, [pc, #344]	; (8102070 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8101f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101f1a:	f003 0303 	and.w	r3, r3, #3
 8101f1e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8101f20:	4b53      	ldr	r3, [pc, #332]	; (8102070 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8101f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101f24:	0a1b      	lsrs	r3, r3, #8
 8101f26:	f003 030f 	and.w	r3, r3, #15
 8101f2a:	3301      	adds	r3, #1
 8101f2c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8101f2e:	4b50      	ldr	r3, [pc, #320]	; (8102070 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8101f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101f32:	091b      	lsrs	r3, r3, #4
 8101f34:	f003 0301 	and.w	r3, r3, #1
 8101f38:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8101f3a:	4b4d      	ldr	r3, [pc, #308]	; (8102070 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8101f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8101f3e:	08db      	lsrs	r3, r3, #3
 8101f40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8101f44:	68ba      	ldr	r2, [r7, #8]
 8101f46:	fb02 f303 	mul.w	r3, r2, r3
 8101f4a:	ee07 3a90 	vmov	s15, r3
 8101f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101f52:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8101f56:	693b      	ldr	r3, [r7, #16]
 8101f58:	2b02      	cmp	r3, #2
 8101f5a:	d003      	beq.n	8101f64 <HAL_RCC_GetSysClockFreq+0xe4>
 8101f5c:	693b      	ldr	r3, [r7, #16]
 8101f5e:	2b03      	cmp	r3, #3
 8101f60:	d022      	beq.n	8101fa8 <HAL_RCC_GetSysClockFreq+0x128>
 8101f62:	e043      	b.n	8101fec <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8101f64:	68fb      	ldr	r3, [r7, #12]
 8101f66:	ee07 3a90 	vmov	s15, r3
 8101f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101f6e:	eddf 6a43 	vldr	s13, [pc, #268]	; 810207c <HAL_RCC_GetSysClockFreq+0x1fc>
 8101f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101f76:	4b3e      	ldr	r3, [pc, #248]	; (8102070 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8101f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8101f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101f7e:	ee07 3a90 	vmov	s15, r3
 8101f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8101f86:	ed97 6a01 	vldr	s12, [r7, #4]
 8101f8a:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8102080 <HAL_RCC_GetSysClockFreq+0x200>
 8101f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8101f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8101f96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8101f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101fa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101fa6:	e046      	b.n	8102036 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8101fa8:	68fb      	ldr	r3, [r7, #12]
 8101faa:	ee07 3a90 	vmov	s15, r3
 8101fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101fb2:	eddf 6a32 	vldr	s13, [pc, #200]	; 810207c <HAL_RCC_GetSysClockFreq+0x1fc>
 8101fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101fba:	4b2d      	ldr	r3, [pc, #180]	; (8102070 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8101fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8101fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101fc2:	ee07 3a90 	vmov	s15, r3
 8101fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8101fca:	ed97 6a01 	vldr	s12, [r7, #4]
 8101fce:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8102080 <HAL_RCC_GetSysClockFreq+0x200>
 8101fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8101fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8101fda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8101fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101fe6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101fea:	e024      	b.n	8102036 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8101fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101fee:	ee07 3a90 	vmov	s15, r3
 8101ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101ff6:	68fb      	ldr	r3, [r7, #12]
 8101ff8:	ee07 3a90 	vmov	s15, r3
 8101ffc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102000:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102004:	4b1a      	ldr	r3, [pc, #104]	; (8102070 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8102006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8102008:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810200c:	ee07 3a90 	vmov	s15, r3
 8102010:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8102014:	ed97 6a01 	vldr	s12, [r7, #4]
 8102018:	eddf 5a19 	vldr	s11, [pc, #100]	; 8102080 <HAL_RCC_GetSysClockFreq+0x200>
 810201c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8102020:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8102024:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102028:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 810202c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102030:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102034:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8102036:	4b0e      	ldr	r3, [pc, #56]	; (8102070 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8102038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810203a:	0e1b      	lsrs	r3, r3, #24
 810203c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102040:	3301      	adds	r3, #1
 8102042:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8102044:	683b      	ldr	r3, [r7, #0]
 8102046:	ee07 3a90 	vmov	s15, r3
 810204a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 810204e:	edd7 6a07 	vldr	s13, [r7, #28]
 8102052:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102056:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810205a:	ee17 3a90 	vmov	r3, s15
 810205e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8102060:	6a3b      	ldr	r3, [r7, #32]
}
 8102062:	4618      	mov	r0, r3
 8102064:	372c      	adds	r7, #44	; 0x2c
 8102066:	46bd      	mov	sp, r7
 8102068:	f85d 7b04 	ldr.w	r7, [sp], #4
 810206c:	4770      	bx	lr
 810206e:	bf00      	nop
 8102070:	46020c00 	.word	0x46020c00
 8102074:	08102250 	.word	0x08102250
 8102078:	00f42400 	.word	0x00f42400
 810207c:	4b742400 	.word	0x4b742400
 8102080:	46000000 	.word	0x46000000

08102084 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8102084:	b580      	push	{r7, lr}
 8102086:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8102088:	f7ff fefa 	bl	8101e80 <HAL_RCC_GetSysClockFreq>
 810208c:	4602      	mov	r2, r0
 810208e:	4b07      	ldr	r3, [pc, #28]	; (81020ac <HAL_RCC_GetHCLKFreq+0x28>)
 8102090:	6a1b      	ldr	r3, [r3, #32]
 8102092:	f003 030f 	and.w	r3, r3, #15
 8102096:	4906      	ldr	r1, [pc, #24]	; (81020b0 <HAL_RCC_GetHCLKFreq+0x2c>)
 8102098:	5ccb      	ldrb	r3, [r1, r3]
 810209a:	fa22 f303 	lsr.w	r3, r2, r3
 810209e:	4a05      	ldr	r2, [pc, #20]	; (81020b4 <HAL_RCC_GetHCLKFreq+0x30>)
 81020a0:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 81020a2:	4b04      	ldr	r3, [pc, #16]	; (81020b4 <HAL_RCC_GetHCLKFreq+0x30>)
 81020a4:	681b      	ldr	r3, [r3, #0]
}
 81020a6:	4618      	mov	r0, r3
 81020a8:	bd80      	pop	{r7, pc}
 81020aa:	bf00      	nop
 81020ac:	46020c00 	.word	0x46020c00
 81020b0:	08102240 	.word	0x08102240
 81020b4:	20040004 	.word	0x20040004

081020b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 81020b8:	b580      	push	{r7, lr}
 81020ba:	b086      	sub	sp, #24
 81020bc:	af00      	add	r7, sp, #0
 81020be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 81020c0:	4b3e      	ldr	r3, [pc, #248]	; (81021bc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 81020c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81020c6:	f003 0304 	and.w	r3, r3, #4
 81020ca:	2b00      	cmp	r3, #0
 81020cc:	d003      	beq.n	81020d6 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 81020ce:	f7fe fdfb 	bl	8100cc8 <HAL_PWREx_GetVoltageRange>
 81020d2:	6178      	str	r0, [r7, #20]
 81020d4:	e019      	b.n	810210a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 81020d6:	4b39      	ldr	r3, [pc, #228]	; (81021bc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 81020d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81020dc:	4a37      	ldr	r2, [pc, #220]	; (81021bc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 81020de:	f043 0304 	orr.w	r3, r3, #4
 81020e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 81020e6:	4b35      	ldr	r3, [pc, #212]	; (81021bc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 81020e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81020ec:	f003 0304 	and.w	r3, r3, #4
 81020f0:	60fb      	str	r3, [r7, #12]
 81020f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 81020f4:	f7fe fde8 	bl	8100cc8 <HAL_PWREx_GetVoltageRange>
 81020f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 81020fa:	4b30      	ldr	r3, [pc, #192]	; (81021bc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 81020fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8102100:	4a2e      	ldr	r2, [pc, #184]	; (81021bc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8102102:	f023 0304 	bic.w	r3, r3, #4
 8102106:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 810210a:	697b      	ldr	r3, [r7, #20]
 810210c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8102110:	d003      	beq.n	810211a <RCC_SetFlashLatencyFromMSIRange+0x62>
 8102112:	697b      	ldr	r3, [r7, #20]
 8102114:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8102118:	d109      	bne.n	810212e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 810211a:	687b      	ldr	r3, [r7, #4]
 810211c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102120:	d202      	bcs.n	8102128 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8102122:	2301      	movs	r3, #1
 8102124:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8102126:	e033      	b.n	8102190 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8102128:	2300      	movs	r3, #0
 810212a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 810212c:	e030      	b.n	8102190 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 810212e:	687b      	ldr	r3, [r7, #4]
 8102130:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102134:	d208      	bcs.n	8102148 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8102136:	697b      	ldr	r3, [r7, #20]
 8102138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810213c:	d102      	bne.n	8102144 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 810213e:	2303      	movs	r3, #3
 8102140:	613b      	str	r3, [r7, #16]
 8102142:	e025      	b.n	8102190 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8102144:	2301      	movs	r3, #1
 8102146:	e035      	b.n	81021b4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8102148:	687b      	ldr	r3, [r7, #4]
 810214a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810214e:	d90f      	bls.n	8102170 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8102150:	697b      	ldr	r3, [r7, #20]
 8102152:	2b00      	cmp	r3, #0
 8102154:	d109      	bne.n	810216a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8102156:	687b      	ldr	r3, [r7, #4]
 8102158:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810215c:	d902      	bls.n	8102164 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 810215e:	2300      	movs	r3, #0
 8102160:	613b      	str	r3, [r7, #16]
 8102162:	e015      	b.n	8102190 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8102164:	2301      	movs	r3, #1
 8102166:	613b      	str	r3, [r7, #16]
 8102168:	e012      	b.n	8102190 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 810216a:	2300      	movs	r3, #0
 810216c:	613b      	str	r3, [r7, #16]
 810216e:	e00f      	b.n	8102190 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8102170:	687b      	ldr	r3, [r7, #4]
 8102172:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102176:	d109      	bne.n	810218c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8102178:	697b      	ldr	r3, [r7, #20]
 810217a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810217e:	d102      	bne.n	8102186 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8102180:	2301      	movs	r3, #1
 8102182:	613b      	str	r3, [r7, #16]
 8102184:	e004      	b.n	8102190 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8102186:	2302      	movs	r3, #2
 8102188:	613b      	str	r3, [r7, #16]
 810218a:	e001      	b.n	8102190 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 810218c:	2301      	movs	r3, #1
 810218e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8102190:	4b0b      	ldr	r3, [pc, #44]	; (81021c0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8102192:	681b      	ldr	r3, [r3, #0]
 8102194:	f023 020f 	bic.w	r2, r3, #15
 8102198:	4909      	ldr	r1, [pc, #36]	; (81021c0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 810219a:	693b      	ldr	r3, [r7, #16]
 810219c:	4313      	orrs	r3, r2
 810219e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 81021a0:	4b07      	ldr	r3, [pc, #28]	; (81021c0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 81021a2:	681b      	ldr	r3, [r3, #0]
 81021a4:	f003 030f 	and.w	r3, r3, #15
 81021a8:	693a      	ldr	r2, [r7, #16]
 81021aa:	429a      	cmp	r2, r3
 81021ac:	d001      	beq.n	81021b2 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 81021ae:	2301      	movs	r3, #1
 81021b0:	e000      	b.n	81021b4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 81021b2:	2300      	movs	r3, #0
}
 81021b4:	4618      	mov	r0, r3
 81021b6:	3718      	adds	r7, #24
 81021b8:	46bd      	mov	sp, r7
 81021ba:	bd80      	pop	{r7, pc}
 81021bc:	46020c00 	.word	0x46020c00
 81021c0:	40022000 	.word	0x40022000

081021c4 <memset>:
 81021c4:	4402      	add	r2, r0
 81021c6:	4603      	mov	r3, r0
 81021c8:	4293      	cmp	r3, r2
 81021ca:	d100      	bne.n	81021ce <memset+0xa>
 81021cc:	4770      	bx	lr
 81021ce:	f803 1b01 	strb.w	r1, [r3], #1
 81021d2:	e7f9      	b.n	81021c8 <memset+0x4>

081021d4 <__libc_init_array>:
 81021d4:	b570      	push	{r4, r5, r6, lr}
 81021d6:	4d0d      	ldr	r5, [pc, #52]	; (810220c <__libc_init_array+0x38>)
 81021d8:	2600      	movs	r6, #0
 81021da:	4c0d      	ldr	r4, [pc, #52]	; (8102210 <__libc_init_array+0x3c>)
 81021dc:	1b64      	subs	r4, r4, r5
 81021de:	10a4      	asrs	r4, r4, #2
 81021e0:	42a6      	cmp	r6, r4
 81021e2:	d109      	bne.n	81021f8 <__libc_init_array+0x24>
 81021e4:	4d0b      	ldr	r5, [pc, #44]	; (8102214 <__libc_init_array+0x40>)
 81021e6:	2600      	movs	r6, #0
 81021e8:	4c0b      	ldr	r4, [pc, #44]	; (8102218 <__libc_init_array+0x44>)
 81021ea:	f000 f817 	bl	810221c <_init>
 81021ee:	1b64      	subs	r4, r4, r5
 81021f0:	10a4      	asrs	r4, r4, #2
 81021f2:	42a6      	cmp	r6, r4
 81021f4:	d105      	bne.n	8102202 <__libc_init_array+0x2e>
 81021f6:	bd70      	pop	{r4, r5, r6, pc}
 81021f8:	f855 3b04 	ldr.w	r3, [r5], #4
 81021fc:	3601      	adds	r6, #1
 81021fe:	4798      	blx	r3
 8102200:	e7ee      	b.n	81021e0 <__libc_init_array+0xc>
 8102202:	f855 3b04 	ldr.w	r3, [r5], #4
 8102206:	3601      	adds	r6, #1
 8102208:	4798      	blx	r3
 810220a:	e7f2      	b.n	81021f2 <__libc_init_array+0x1e>
 810220c:	08102310 	.word	0x08102310
 8102210:	08102310 	.word	0x08102310
 8102214:	08102310 	.word	0x08102310
 8102218:	08102314 	.word	0x08102314

0810221c <_init>:
 810221c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810221e:	bf00      	nop
 8102220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8102222:	bc08      	pop	{r3}
 8102224:	469e      	mov	lr, r3
 8102226:	4770      	bx	lr

08102228 <_fini>:
 8102228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810222a:	bf00      	nop
 810222c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810222e:	bc08      	pop	{r3}
 8102230:	469e      	mov	lr, r3
 8102232:	4770      	bx	lr
 8102234:	0000      	movs	r0, r0
	...

08102238 <__SECURE_RegisterCallback_veneer>:
 8102238:	f85f f000 	ldr.w	pc, [pc]	; 810223c <__SECURE_RegisterCallback_veneer+0x4>
 810223c:	0c0fe009 	.word	0x0c0fe009
