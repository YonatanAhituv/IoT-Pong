
ADF_AudioSoundDetector.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000541c  08000238  08000238  00010238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08005654  08005654  00015654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800572c  0800572c  0001572c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005730  08005730  00015730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000011  20000000  08005734  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000011c4  20000014  08005745  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200011d8  08005745  000211d8  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  00020011  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  00020047  2**0
                  CONTENTS, READONLY
 10 .debug_line   00012929  00000000  00000000  0002008a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line_str 000000b1  00000000  00000000  000329b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_info   0000fe07  00000000  00000000  00032a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002421  00000000  00000000  0004286b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  00044c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015e49d  00000000  00000000  00045a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a49  00000000  00000000  001a3eb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000362a5  00000000  00000000  001a48fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000036e0  00000000  00000000  001daba4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000014 	.word	0x20000014
 8000254:	00000000 	.word	0x00000000
 8000258:	0800563c 	.word	0x0800563c

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000018 	.word	0x20000018
 8000274:	0800563c 	.word	0x0800563c

08000278 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000278:	f8df d034 	ldr.w	sp, [pc, #52]	; 80002b0 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800027c:	f000 fbba 	bl	80009f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000280:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000282:	e003      	b.n	800028c <LoopCopyDataInit>

08000284 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000284:	4b0b      	ldr	r3, [pc, #44]	; (80002b4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000286:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000288:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800028a:	3104      	adds	r1, #4

0800028c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800028c:	480a      	ldr	r0, [pc, #40]	; (80002b8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800028e:	4b0b      	ldr	r3, [pc, #44]	; (80002bc <LoopForever+0xe>)
	adds	r2, r0, r1
 8000290:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000292:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000294:	d3f6      	bcc.n	8000284 <CopyDataInit>
	ldr	r2, =_sbss
 8000296:	4a0a      	ldr	r2, [pc, #40]	; (80002c0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000298:	e002      	b.n	80002a0 <LoopFillZerobss>

0800029a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800029a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800029c:	f842 3b04 	str.w	r3, [r2], #4

080002a0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <LoopForever+0x16>)
	cmp	r2, r3
 80002a2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80002a4:	d3f9      	bcc.n	800029a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80002a6:	f005 f9a5 	bl	80055f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80002aa:	f000 f85f 	bl	800036c <main>

080002ae <LoopForever>:

LoopForever:
    b LoopForever
 80002ae:	e7fe      	b.n	80002ae <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80002b0:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 80002b4:	08005734 	.word	0x08005734
	ldr	r0, =_sdata
 80002b8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80002bc:	20000011 	.word	0x20000011
	ldr	r2, =_sbss
 80002c0:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 80002c4:	200011d8 	.word	0x200011d8

080002c8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80002c8:	e7fe      	b.n	80002c8 <ADC1_IRQHandler>
	...

080002cc <MX_MDFQueue_Config>:
  * @brief  DMA Linked-list MDFQueue configuration
  * @param  None
  * @retval None
  */
HAL_StatusTypeDef MX_MDFQueue_Config(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b09c      	sub	sp, #112	; 0x70
 80002d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef ret = HAL_OK;
 80002d2:	2300      	movs	r3, #0
 80002d4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  /* DMA node configuration declaration */
  DMA_NodeConfTypeDef pNodeConfig;

  /* Set node configuration ################################################*/
  pNodeConfig.NodeType = DMA_LPDMA_LINEAR_NODE;
 80002d8:	2311      	movs	r3, #17
 80002da:	603b      	str	r3, [r7, #0]
  pNodeConfig.Init.Request = LPDMA1_REQUEST_ADF1_FLT0;
 80002dc:	230a      	movs	r3, #10
 80002de:	607b      	str	r3, [r7, #4]
  pNodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80002e0:	2300      	movs	r3, #0
 80002e2:	60bb      	str	r3, [r7, #8]
  pNodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80002e4:	2300      	movs	r3, #0
 80002e6:	60fb      	str	r3, [r7, #12]
  pNodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 80002e8:	2300      	movs	r3, #0
 80002ea:	613b      	str	r3, [r7, #16]
  pNodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 80002ec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80002f0:	617b      	str	r3, [r7, #20]
  pNodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 80002f2:	2302      	movs	r3, #2
 80002f4:	61bb      	str	r3, [r7, #24]
  pNodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 80002f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80002fa:	61fb      	str	r3, [r7, #28]
  pNodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80002fc:	2300      	movs	r3, #0
 80002fe:	633b      	str	r3, [r7, #48]	; 0x30
  pNodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8000300:	2300      	movs	r3, #0
 8000302:	647b      	str	r3, [r7, #68]	; 0x44
  pNodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8000304:	2300      	movs	r3, #0
 8000306:	63fb      	str	r3, [r7, #60]	; 0x3c
  pNodeConfig.SrcAddress = 0;
 8000308:	2300      	movs	r3, #0
 800030a:	663b      	str	r3, [r7, #96]	; 0x60
  pNodeConfig.DstAddress = 0;
 800030c:	2300      	movs	r3, #0
 800030e:	667b      	str	r3, [r7, #100]	; 0x64
  pNodeConfig.DataSize = 0;
 8000310:	2300      	movs	r3, #0
 8000312:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Build MDFNode Node */
  ret |= HAL_DMAEx_List_BuildNode(&pNodeConfig, &MDFNode);
 8000314:	463b      	mov	r3, r7
 8000316:	4913      	ldr	r1, [pc, #76]	; (8000364 <MX_MDFQueue_Config+0x98>)
 8000318:	4618      	mov	r0, r3
 800031a:	f001 f933 	bl	8001584 <HAL_DMAEx_List_BuildNode>
 800031e:	4603      	mov	r3, r0
 8000320:	461a      	mov	r2, r3
 8000322:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000326:	4313      	orrs	r3, r2
 8000328:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  /* Insert MDFNode to Queue */
  ret |= HAL_DMAEx_List_InsertNode_Tail(&MDFQueue, &MDFNode);
 800032c:	490d      	ldr	r1, [pc, #52]	; (8000364 <MX_MDFQueue_Config+0x98>)
 800032e:	480e      	ldr	r0, [pc, #56]	; (8000368 <MX_MDFQueue_Config+0x9c>)
 8000330:	f001 f93e 	bl	80015b0 <HAL_DMAEx_List_InsertNode_Tail>
 8000334:	4603      	mov	r3, r0
 8000336:	461a      	mov	r2, r3
 8000338:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800033c:	4313      	orrs	r3, r2
 800033e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  ret |= HAL_DMAEx_List_SetCircularMode(&MDFQueue);
 8000342:	4809      	ldr	r0, [pc, #36]	; (8000368 <MX_MDFQueue_Config+0x9c>)
 8000344:	f001 f9ac 	bl	80016a0 <HAL_DMAEx_List_SetCircularMode>
 8000348:	4603      	mov	r3, r0
 800034a:	461a      	mov	r2, r3
 800034c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000350:	4313      	orrs	r3, r2
 8000352:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

   return ret;
 8000356:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800035a:	4618      	mov	r0, r3
 800035c:	3770      	adds	r7, #112	; 0x70
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	20000030 	.word	0x20000030
 8000368:	20000054 	.word	0x20000054

0800036c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000370:	f000 fb78 	bl	8000a64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000374:	f000 f836 	bl	80003e4 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000378:	f000 f895 	bl	80004a6 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800037c:	f000 f97a 	bl	8000674 <MX_GPIO_Init>
  MX_LPDMA1_Init();
 8000380:	f000 f92e 	bl	80005e0 <MX_LPDMA1_Init>
  MX_ADF1_Init();
 8000384:	f000 f89e 	bl	80004c4 <MX_ADF1_Init>
  MX_ICACHE_Init();
 8000388:	f000 f916 	bl	80005b8 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  BSP_LED_Init(LED_GREEN);
 800038c:	2001      	movs	r0, #1
 800038e:	f000 fac1 	bl	8000914 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000392:	2000      	movs	r0, #0
 8000394:	f000 fabe 	bl	8000914 <BSP_LED_Init>
  MX_MDFQueue_Config();
 8000398:	f7ff ff98 	bl	80002cc <MX_MDFQueue_Config>

  /* Link SAI queue to DMA channel */
  HAL_DMAEx_List_LinkQ(&handle_LPDMA1_Channel0, &MDFQueue);
 800039c:	490c      	ldr	r1, [pc, #48]	; (80003d0 <main+0x64>)
 800039e:	480d      	ldr	r0, [pc, #52]	; (80003d4 <main+0x68>)
 80003a0:	f001 f9de 	bl	8001760 <HAL_DMAEx_List_LinkQ>

  /* Associate the DMA handle */
  __HAL_LINKDMA(&AdfHandle0, hdma, handle_LPDMA1_Channel0);
 80003a4:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <main+0x6c>)
 80003a6:	4a0b      	ldr	r2, [pc, #44]	; (80003d4 <main+0x68>)
 80003a8:	639a      	str	r2, [r3, #56]	; 0x38
 80003aa:	4b0a      	ldr	r3, [pc, #40]	; (80003d4 <main+0x68>)
 80003ac:	4a0a      	ldr	r2, [pc, #40]	; (80003d8 <main+0x6c>)
 80003ae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Configure MDF DMA */
  MDF_DMAConfig();
 80003b0:	f000 f97a 	bl	80006a8 <MDF_DMAConfig>

  /* Start MDF Acquisition */
  if (HAL_MDF_AcqStart_DMA(&AdfHandle0, &AdfFilterConfig0, &DMAConfig) != HAL_OK)
 80003b4:	4a09      	ldr	r2, [pc, #36]	; (80003dc <main+0x70>)
 80003b6:	490a      	ldr	r1, [pc, #40]	; (80003e0 <main+0x74>)
 80003b8:	4807      	ldr	r0, [pc, #28]	; (80003d8 <main+0x6c>)
 80003ba:	f002 f9df 	bl	800277c <HAL_MDF_AcqStart_DMA>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <main+0x5c>
  {
    Error_Handler();
 80003c4:	f000 f9ad 	bl	8000722 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* Enter the system to Stop 2 mode */
    EnterLowPowerMode();
 80003c8:	f000 f984 	bl	80006d4 <EnterLowPowerMode>
 80003cc:	e7fc      	b.n	80003c8 <main+0x5c>
 80003ce:	bf00      	nop
 80003d0:	20000054 	.word	0x20000054
 80003d4:	2000012c 	.word	0x2000012c
 80003d8:	2000006c 	.word	0x2000006c
 80003dc:	200001a4 	.word	0x200001a4
 80003e0:	200000b0 	.word	0x200000b0

080003e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b09e      	sub	sp, #120	; 0x78
 80003e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ea:	f107 0318 	add.w	r3, r7, #24
 80003ee:	2260      	movs	r2, #96	; 0x60
 80003f0:	2100      	movs	r1, #0
 80003f2:	4618      	mov	r0, r3
 80003f4:	f005 f8f6 	bl	80055e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003f8:	463b      	mov	r3, r7
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]
 80003fe:	605a      	str	r2, [r3, #4]
 8000400:	609a      	str	r2, [r3, #8]
 8000402:	60da      	str	r2, [r3, #12]
 8000404:	611a      	str	r2, [r3, #16]
 8000406:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000408:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 800040c:	f002 fe52 	bl	80030b4 <HAL_PWREx_ControlVoltageScaling>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000416:	f000 f984 	bl	8000722 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI|RCC_OSCILLATORTYPE_MSIK;
 800041a:	2350      	movs	r3, #80	; 0x50
 800041c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800041e:	2301      	movs	r3, #1
 8000420:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000422:	2310      	movs	r3, #16
 8000424:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000426:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800042a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.MSIKClockRange = RCC_MSIKRANGE_3;
 800042c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000430:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIKState = RCC_MSIK_ON;
 8000432:	2310      	movs	r3, #16
 8000434:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000436:	2302      	movs	r3, #2
 8000438:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800043a:	2301      	movs	r3, #1
 800043c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 800043e:	2300      	movs	r3, #0
 8000440:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000442:	2301      	movs	r3, #1
 8000444:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000446:	2350      	movs	r3, #80	; 0x50
 8000448:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 800044a:	2302      	movs	r3, #2
 800044c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800044e:	2302      	movs	r3, #2
 8000450:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000452:	2302      	movs	r3, #2
 8000454:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 8000456:	2300      	movs	r3, #0
 8000458:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800045a:	2300      	movs	r3, #0
 800045c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800045e:	f107 0318 	add.w	r3, r7, #24
 8000462:	4618      	mov	r0, r3
 8000464:	f002 ff5e 	bl	8003324 <HAL_RCC_OscConfig>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800046e:	f000 f958 	bl	8000722 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000472:	231f      	movs	r3, #31
 8000474:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000476:	2303      	movs	r3, #3
 8000478:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800047a:	2300      	movs	r3, #0
 800047c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800047e:	2300      	movs	r3, #0
 8000480:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000482:	2300      	movs	r3, #0
 8000484:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000486:	2300      	movs	r3, #0
 8000488:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800048a:	463b      	mov	r3, r7
 800048c:	2104      	movs	r1, #4
 800048e:	4618      	mov	r0, r3
 8000490:	f003 fe24 	bl	80040dc <HAL_RCC_ClockConfig>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800049a:	f000 f942 	bl	8000722 <Error_Handler>
  }
}
 800049e:	bf00      	nop
 80004a0:	3778      	adds	r7, #120	; 0x78
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}

080004a6 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80004a6:	b580      	push	{r7, lr}
 80004a8:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 80004aa:	f002 ff2b 	bl	8003304 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80004ae:	2002      	movs	r0, #2
 80004b0:	f002 fe8c 	bl	80031cc <HAL_PWREx_ConfigSupply>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <SystemPower_Config+0x18>
  {
    Error_Handler();
 80004ba:	f000 f932 	bl	8000722 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 80004be:	bf00      	nop
 80004c0:	bd80      	pop	{r7, pc}
	...

080004c4 <MX_ADF1_Init>:
  * @brief ADF1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADF1_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END ADF1_Init 1 */

  /**
    AdfHandle0 structure initialization and HAL_MDF_Init function call
  */
  AdfHandle0.Instance = ADF1_Filter0;
 80004c8:	4b38      	ldr	r3, [pc, #224]	; (80005ac <MX_ADF1_Init+0xe8>)
 80004ca:	4a39      	ldr	r2, [pc, #228]	; (80005b0 <MX_ADF1_Init+0xec>)
 80004cc:	601a      	str	r2, [r3, #0]
  AdfHandle0.Init.CommonParam.ProcClockDivider = 1;
 80004ce:	4b37      	ldr	r3, [pc, #220]	; (80005ac <MX_ADF1_Init+0xe8>)
 80004d0:	2201      	movs	r2, #1
 80004d2:	609a      	str	r2, [r3, #8]
  AdfHandle0.Init.CommonParam.OutputClock.Activation = ENABLE;
 80004d4:	4b35      	ldr	r3, [pc, #212]	; (80005ac <MX_ADF1_Init+0xe8>)
 80004d6:	2201      	movs	r2, #1
 80004d8:	731a      	strb	r2, [r3, #12]
  AdfHandle0.Init.CommonParam.OutputClock.Pins = MDF_OUTPUT_CLOCK_0;
 80004da:	4b34      	ldr	r3, [pc, #208]	; (80005ac <MX_ADF1_Init+0xe8>)
 80004dc:	2220      	movs	r2, #32
 80004de:	611a      	str	r2, [r3, #16]
  AdfHandle0.Init.CommonParam.OutputClock.Divider = 4;
 80004e0:	4b32      	ldr	r3, [pc, #200]	; (80005ac <MX_ADF1_Init+0xe8>)
 80004e2:	2204      	movs	r2, #4
 80004e4:	615a      	str	r2, [r3, #20]
  AdfHandle0.Init.CommonParam.OutputClock.Trigger.Activation = DISABLE;
 80004e6:	4b31      	ldr	r3, [pc, #196]	; (80005ac <MX_ADF1_Init+0xe8>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	761a      	strb	r2, [r3, #24]
  AdfHandle0.Init.SerialInterface.Activation = ENABLE;
 80004ec:	4b2f      	ldr	r3, [pc, #188]	; (80005ac <MX_ADF1_Init+0xe8>)
 80004ee:	2201      	movs	r2, #1
 80004f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  AdfHandle0.Init.SerialInterface.Mode = MDF_SITF_NORMAL_SPI_MODE;
 80004f4:	4b2d      	ldr	r3, [pc, #180]	; (80005ac <MX_ADF1_Init+0xe8>)
 80004f6:	2210      	movs	r2, #16
 80004f8:	629a      	str	r2, [r3, #40]	; 0x28
  AdfHandle0.Init.SerialInterface.ClockSource = MDF_SITF_CCK0_SOURCE;
 80004fa:	4b2c      	ldr	r3, [pc, #176]	; (80005ac <MX_ADF1_Init+0xe8>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	62da      	str	r2, [r3, #44]	; 0x2c
  AdfHandle0.Init.SerialInterface.Threshold = 31;
 8000500:	4b2a      	ldr	r3, [pc, #168]	; (80005ac <MX_ADF1_Init+0xe8>)
 8000502:	221f      	movs	r2, #31
 8000504:	631a      	str	r2, [r3, #48]	; 0x30
  AdfHandle0.Init.FilterBistream = MDF_BITSTREAM0_FALLING;
 8000506:	4b29      	ldr	r3, [pc, #164]	; (80005ac <MX_ADF1_Init+0xe8>)
 8000508:	2201      	movs	r2, #1
 800050a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_MDF_Init(&AdfHandle0) != HAL_OK)
 800050c:	4827      	ldr	r0, [pc, #156]	; (80005ac <MX_ADF1_Init+0xe8>)
 800050e:	f001 ffdd 	bl	80024cc <HAL_MDF_Init>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <MX_ADF1_Init+0x58>
  {
    Error_Handler();
 8000518:	f000 f903 	bl	8000722 <Error_Handler>
  /**
    AdfFilterConfig0 structure initialization

    WARNING : only structure is filled, no specific init function call for filter
  */
  AdfFilterConfig0.DataSource = MDF_DATA_SOURCE_BSMX;
 800051c:	4b25      	ldr	r3, [pc, #148]	; (80005b4 <MX_ADF1_Init+0xf0>)
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
  AdfFilterConfig0.Delay = 0;
 8000522:	4b24      	ldr	r3, [pc, #144]	; (80005b4 <MX_ADF1_Init+0xf0>)
 8000524:	2200      	movs	r2, #0
 8000526:	605a      	str	r2, [r3, #4]
  AdfFilterConfig0.CicMode = MDF_ONE_FILTER_SINC4;
 8000528:	4b22      	ldr	r3, [pc, #136]	; (80005b4 <MX_ADF1_Init+0xf0>)
 800052a:	2240      	movs	r2, #64	; 0x40
 800052c:	609a      	str	r2, [r3, #8]
  AdfFilterConfig0.DecimationRatio = 64;
 800052e:	4b21      	ldr	r3, [pc, #132]	; (80005b4 <MX_ADF1_Init+0xf0>)
 8000530:	2240      	movs	r2, #64	; 0x40
 8000532:	60da      	str	r2, [r3, #12]
  AdfFilterConfig0.Gain = 0;
 8000534:	4b1f      	ldr	r3, [pc, #124]	; (80005b4 <MX_ADF1_Init+0xf0>)
 8000536:	2200      	movs	r2, #0
 8000538:	615a      	str	r2, [r3, #20]
  AdfFilterConfig0.ReshapeFilter.Activation = DISABLE;
 800053a:	4b1e      	ldr	r3, [pc, #120]	; (80005b4 <MX_ADF1_Init+0xf0>)
 800053c:	2200      	movs	r2, #0
 800053e:	761a      	strb	r2, [r3, #24]
  AdfFilterConfig0.HighPassFilter.Activation = DISABLE;
 8000540:	4b1c      	ldr	r3, [pc, #112]	; (80005b4 <MX_ADF1_Init+0xf0>)
 8000542:	2200      	movs	r2, #0
 8000544:	f883 2020 	strb.w	r2, [r3, #32]
  AdfFilterConfig0.SoundActivity.Activation = ENABLE;
 8000548:	4b1a      	ldr	r3, [pc, #104]	; (80005b4 <MX_ADF1_Init+0xf0>)
 800054a:	2201      	movs	r2, #1
 800054c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  AdfFilterConfig0.SoundActivity.Mode = MDF_SAD_VOICE_ACTIVITY_DETECTOR;
 8000550:	4b18      	ldr	r3, [pc, #96]	; (80005b4 <MX_ADF1_Init+0xf0>)
 8000552:	2200      	movs	r2, #0
 8000554:	639a      	str	r2, [r3, #56]	; 0x38
  AdfFilterConfig0.SoundActivity.FrameSize = MDF_SAD_8_PCM_SAMPLES;
 8000556:	4b17      	ldr	r3, [pc, #92]	; (80005b4 <MX_ADF1_Init+0xf0>)
 8000558:	2200      	movs	r2, #0
 800055a:	63da      	str	r2, [r3, #60]	; 0x3c
  AdfFilterConfig0.SoundActivity.Hysteresis = DISABLE;
 800055c:	4b15      	ldr	r3, [pc, #84]	; (80005b4 <MX_ADF1_Init+0xf0>)
 800055e:	2200      	movs	r2, #0
 8000560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  AdfFilterConfig0.SoundActivity.SoundTriggerEvent = MDF_SAD_ENTER_DETECT;
 8000564:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <MX_ADF1_Init+0xf0>)
 8000566:	2200      	movs	r2, #0
 8000568:	645a      	str	r2, [r3, #68]	; 0x44
  AdfFilterConfig0.SoundActivity.DataMemoryTransfer = MDF_SAD_MEMORY_TRANSFER_ALWAYS;
 800056a:	4b12      	ldr	r3, [pc, #72]	; (80005b4 <MX_ADF1_Init+0xf0>)
 800056c:	2206      	movs	r2, #6
 800056e:	649a      	str	r2, [r3, #72]	; 0x48
  AdfFilterConfig0.SoundActivity.MinNoiseLevel = 200;
 8000570:	4b10      	ldr	r3, [pc, #64]	; (80005b4 <MX_ADF1_Init+0xf0>)
 8000572:	22c8      	movs	r2, #200	; 0xc8
 8000574:	64da      	str	r2, [r3, #76]	; 0x4c
  AdfFilterConfig0.SoundActivity.HangoverWindow = MDF_SAD_HANGOVER_4_FRAMES;
 8000576:	4b0f      	ldr	r3, [pc, #60]	; (80005b4 <MX_ADF1_Init+0xf0>)
 8000578:	2200      	movs	r2, #0
 800057a:	651a      	str	r2, [r3, #80]	; 0x50
  AdfFilterConfig0.SoundActivity.LearningFrames = MDF_SAD_LEARNING_2_FRAMES;
 800057c:	4b0d      	ldr	r3, [pc, #52]	; (80005b4 <MX_ADF1_Init+0xf0>)
 800057e:	2200      	movs	r2, #0
 8000580:	655a      	str	r2, [r3, #84]	; 0x54
  AdfFilterConfig0.SoundActivity.AmbientNoiseSlope = 0;
 8000582:	4b0c      	ldr	r3, [pc, #48]	; (80005b4 <MX_ADF1_Init+0xf0>)
 8000584:	2200      	movs	r2, #0
 8000586:	659a      	str	r2, [r3, #88]	; 0x58
  AdfFilterConfig0.SoundActivity.SignalNoiseThreshold = MDF_SAD_SIGNAL_NOISE_18DB;
 8000588:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <MX_ADF1_Init+0xf0>)
 800058a:	2205      	movs	r2, #5
 800058c:	65da      	str	r2, [r3, #92]	; 0x5c
  AdfFilterConfig0.SoundActivity.SoundLevelInterrupt = DISABLE;
 800058e:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <MX_ADF1_Init+0xf0>)
 8000590:	2200      	movs	r2, #0
 8000592:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  AdfFilterConfig0.AcquisitionMode = MDF_MODE_ASYNC_CONT;
 8000596:	4b07      	ldr	r3, [pc, #28]	; (80005b4 <MX_ADF1_Init+0xf0>)
 8000598:	2200      	movs	r2, #0
 800059a:	665a      	str	r2, [r3, #100]	; 0x64
  AdfFilterConfig0.FifoThreshold = MDF_FIFO_THRESHOLD_NOT_EMPTY;
 800059c:	4b05      	ldr	r3, [pc, #20]	; (80005b4 <MX_ADF1_Init+0xf0>)
 800059e:	2200      	movs	r2, #0
 80005a0:	669a      	str	r2, [r3, #104]	; 0x68
  AdfFilterConfig0.DiscardSamples = 0;
 80005a2:	4b04      	ldr	r3, [pc, #16]	; (80005b4 <MX_ADF1_Init+0xf0>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* USER CODE BEGIN ADF1_Init 2 */

  /* USER CODE END ADF1_Init 2 */

}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	2000006c 	.word	0x2000006c
 80005b0:	46024080 	.word	0x46024080
 80005b4:	200000b0 	.word	0x200000b0

080005b8 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80005bc:	2000      	movs	r0, #0
 80005be:	f001 ff55 	bl	800246c <HAL_ICACHE_ConfigAssociativityMode>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80005c8:	f000 f8ab 	bl	8000722 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80005cc:	f001 ff6e 	bl	80024ac <HAL_ICACHE_Enable>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80005d6:	f000 f8a4 	bl	8000722 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
	...

080005e0 <MX_LPDMA1_Init>:
  * @brief LPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPDMA1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPDMA1_Init 0 */

  /* USER CODE END LPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_LPDMA1_CLK_ENABLE();
 80005e6:	4b20      	ldr	r3, [pc, #128]	; (8000668 <MX_LPDMA1_Init+0x88>)
 80005e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80005ec:	4a1e      	ldr	r2, [pc, #120]	; (8000668 <MX_LPDMA1_Init+0x88>)
 80005ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80005f6:	4b1c      	ldr	r3, [pc, #112]	; (8000668 <MX_LPDMA1_Init+0x88>)
 80005f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80005fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]

  /* LPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(LPDMA1_Channel0_IRQn, 0, 0);
 8000604:	2200      	movs	r2, #0
 8000606:	2100      	movs	r1, #0
 8000608:	2072      	movs	r0, #114	; 0x72
 800060a:	f000 fb8a 	bl	8000d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPDMA1_Channel0_IRQn);
 800060e:	2072      	movs	r0, #114	; 0x72
 8000610:	f000 fba1 	bl	8000d56 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN LPDMA1_Init 1 */

  /* USER CODE END LPDMA1_Init 1 */
  handle_LPDMA1_Channel0.Instance = LPDMA1_Channel0;
 8000614:	4b15      	ldr	r3, [pc, #84]	; (800066c <MX_LPDMA1_Init+0x8c>)
 8000616:	4a16      	ldr	r2, [pc, #88]	; (8000670 <MX_LPDMA1_Init+0x90>)
 8000618:	601a      	str	r2, [r3, #0]
  handle_LPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 800061a:	4b14      	ldr	r3, [pc, #80]	; (800066c <MX_LPDMA1_Init+0x8c>)
 800061c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000620:	639a      	str	r2, [r3, #56]	; 0x38
  handle_LPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8000622:	4b12      	ldr	r3, [pc, #72]	; (800066c <MX_LPDMA1_Init+0x8c>)
 8000624:	2200      	movs	r2, #0
 8000626:	63da      	str	r2, [r3, #60]	; 0x3c
  handle_LPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT1;
 8000628:	4b10      	ldr	r3, [pc, #64]	; (800066c <MX_LPDMA1_Init+0x8c>)
 800062a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800062e:	641a      	str	r2, [r3, #64]	; 0x40
  handle_LPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 8000630:	4b0e      	ldr	r3, [pc, #56]	; (800066c <MX_LPDMA1_Init+0x8c>)
 8000632:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8000636:	645a      	str	r2, [r3, #68]	; 0x44
  handle_LPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <MX_LPDMA1_Init+0x8c>)
 800063a:	2281      	movs	r2, #129	; 0x81
 800063c:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_DMAEx_List_Init(&handle_LPDMA1_Channel0) != HAL_OK)
 800063e:	480b      	ldr	r0, [pc, #44]	; (800066c <MX_LPDMA1_Init+0x8c>)
 8000640:	f000 fde0 	bl	8001204 <HAL_DMAEx_List_Init>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_LPDMA1_Init+0x6e>
  {
    Error_Handler();
 800064a:	f000 f86a 	bl	8000722 <Error_Handler>
  }
  if (HAL_DMA_ConfigChannelAttributes(&handle_LPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 800064e:	2110      	movs	r1, #16
 8000650:	4806      	ldr	r0, [pc, #24]	; (800066c <MX_LPDMA1_Init+0x8c>)
 8000652:	f000 fd76 	bl	8001142 <HAL_DMA_ConfigChannelAttributes>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_LPDMA1_Init+0x80>
  {
    Error_Handler();
 800065c:	f000 f861 	bl	8000722 <Error_Handler>
  }
  /* USER CODE BEGIN LPDMA1_Init 2 */

  /* USER CODE END LPDMA1_Init 2 */

}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	46020c00 	.word	0x46020c00
 800066c:	2000012c 	.word	0x2000012c
 8000670:	46025050 	.word	0x46025050

08000674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800067a:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <MX_GPIO_Init+0x30>)
 800067c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000680:	4a08      	ldr	r2, [pc, #32]	; (80006a4 <MX_GPIO_Init+0x30>)
 8000682:	f043 0310 	orr.w	r3, r3, #16
 8000686:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800068a:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_GPIO_Init+0x30>)
 800068c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000690:	f003 0310 	and.w	r3, r3, #16
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000698:	bf00      	nop
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	46020c00 	.word	0x46020c00

080006a8 <MDF_DMAConfig>:
  * @brief  MDF DMA configuration
  * @param  None
  * @retval None
  */
static void MDF_DMAConfig(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  /* Initialize DMA configuration parameters */
  DMAConfig.Address                              = (uint32_t)&RecBuff[0];
 80006ac:	4a07      	ldr	r2, [pc, #28]	; (80006cc <MDF_DMAConfig+0x24>)
 80006ae:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <MDF_DMAConfig+0x28>)
 80006b0:	601a      	str	r2, [r3, #0]
  DMAConfig.DataLength                           = (REC_BUFF_SIZE * 4U);
 80006b2:	4b07      	ldr	r3, [pc, #28]	; (80006d0 <MDF_DMAConfig+0x28>)
 80006b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006b8:	605a      	str	r2, [r3, #4]
  DMAConfig.MsbOnly                              = DISABLE;
 80006ba:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <MDF_DMAConfig+0x28>)
 80006bc:	2200      	movs	r2, #0
 80006be:	721a      	strb	r2, [r3, #8]
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	200001b0 	.word	0x200001b0
 80006d0:	200001a4 	.word	0x200001a4

080006d4 <EnterLowPowerMode>:
  * @brief  Enter low power mode
  * @param  None
  * @retval None
  */
static void EnterLowPowerMode(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
    /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006da:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <EnterLowPowerMode+0x34>)
 80006dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80006e0:	4a09      	ldr	r2, [pc, #36]	; (8000708 <EnterLowPowerMode+0x34>)
 80006e2:	f043 0304 	orr.w	r3, r3, #4
 80006e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80006ea:	4b07      	ldr	r3, [pc, #28]	; (8000708 <EnterLowPowerMode+0x34>)
 80006ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80006f0:	f003 0304 	and.w	r3, r3, #4
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]

  /* Enter the system to STOP2 mode */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80006f8:	2001      	movs	r0, #1
 80006fa:	f002 fdb7 	bl	800326c <HAL_PWREx_EnterSTOP2Mode>
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	46020c00 	.word	0x46020c00

0800070c <HAL_MDF_SadCallback>:
  * @brief  MDF sound activity detector callback.
  * @param  hmdf MDF handle.
  * @retval None.
  */
void HAL_MDF_SadCallback(MDF_HandleTypeDef *hmdf)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  BSP_LED_Toggle(LED_GREEN);
 8000714:	2001      	movs	r0, #1
 8000716:	f000 f94f 	bl	80009b8 <BSP_LED_Toggle>
}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}

08000722 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000726:	b672      	cpsid	i
}
 8000728:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800072a:	e7fe      	b.n	800072a <Error_Handler+0x8>

0800072c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000732:	4b0a      	ldr	r3, [pc, #40]	; (800075c <HAL_MspInit+0x30>)
 8000734:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000738:	4a08      	ldr	r2, [pc, #32]	; (800075c <HAL_MspInit+0x30>)
 800073a:	f043 0304 	orr.w	r3, r3, #4
 800073e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <HAL_MspInit+0x30>)
 8000744:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000748:	f003 0304 	and.w	r3, r3, #4
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000750:	bf00      	nop
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	46020c00 	.word	0x46020c00

08000760 <HAL_MDF_MspInit>:
* This function configures the hardware resources used in this example
* @param hmdf: MDF handle pointer
* @retval None
*/
void HAL_MDF_MspInit(MDF_HandleTypeDef* hmdf)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b0bc      	sub	sp, #240	; 0xf0
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000768:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000778:	f107 0310 	add.w	r3, r7, #16
 800077c:	22c8      	movs	r2, #200	; 0xc8
 800077e:	2100      	movs	r1, #0
 8000780:	4618      	mov	r0, r3
 8000782:	f004 ff2f 	bl	80055e4 <memset>
  if(IS_ADF_INSTANCE(hmdf->Instance))
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a40      	ldr	r2, [pc, #256]	; (800088c <HAL_MDF_MspInit+0x12c>)
 800078c:	4293      	cmp	r3, r2
 800078e:	d179      	bne.n	8000884 <HAL_MDF_MspInit+0x124>
  {
  /* USER CODE BEGIN ADF1_MspInit 0 */
  __HAL_RCC_ADF1_CLKAM_ENABLE();
 8000790:	4b3f      	ldr	r3, [pc, #252]	; (8000890 <HAL_MDF_MspInit+0x130>)
 8000792:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000796:	4a3e      	ldr	r2, [pc, #248]	; (8000890 <HAL_MDF_MspInit+0x130>)
 8000798:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800079c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
  __HAL_RCC_LPDMA1_CLKAM_ENABLE();
 80007a0:	4b3b      	ldr	r3, [pc, #236]	; (8000890 <HAL_MDF_MspInit+0x130>)
 80007a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007a6:	4a3a      	ldr	r2, [pc, #232]	; (8000890 <HAL_MDF_MspInit+0x130>)
 80007a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
  __HAL_RCC_LPGPIO1_CLKAM_ENABLE();
 80007b0:	4b37      	ldr	r3, [pc, #220]	; (8000890 <HAL_MDF_MspInit+0x130>)
 80007b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007b6:	4a36      	ldr	r2, [pc, #216]	; (8000890 <HAL_MDF_MspInit+0x130>)
 80007b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80007bc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
  __HAL_RCC_SRAM4_CLKAM_ENABLE();
 80007c0:	4b33      	ldr	r3, [pc, #204]	; (8000890 <HAL_MDF_MspInit+0x130>)
 80007c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007c6:	4a32      	ldr	r2, [pc, #200]	; (8000890 <HAL_MDF_MspInit+0x130>)
 80007c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007cc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
   __HAL_RCC_MSIKSTOP_ENABLE();
 80007d0:	4b2f      	ldr	r3, [pc, #188]	; (8000890 <HAL_MDF_MspInit+0x130>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a2e      	ldr	r2, [pc, #184]	; (8000890 <HAL_MDF_MspInit+0x130>)
 80007d6:	f043 0302 	orr.w	r3, r3, #2
 80007da:	6013      	str	r3, [r2, #0]
  HAL_PWREx_EnableVddIO2();
 80007dc:	f002 fd72 	bl	80032c4 <HAL_PWREx_EnableVddIO2>
  HAL_PWREx_EnableVddA();
 80007e0:	f002 fd80 	bl	80032e4 <HAL_PWREx_EnableVddA>
  
  /* USER CODE END ADF1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADF1;
 80007e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80007e8:	f04f 0300 	mov.w	r3, #0
 80007ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Adf1ClockSelection = RCC_ADF1CLKSOURCE_MSIK;
 80007f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80007f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007f8:	f107 0310 	add.w	r3, r7, #16
 80007fc:	4618      	mov	r0, r3
 80007fe:	f004 f801 	bl	8004804 <HAL_RCCEx_PeriphCLKConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <HAL_MDF_MspInit+0xac>
    {
      Error_Handler();
 8000808:	f7ff ff8b 	bl	8000722 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADF1_CLK_ENABLE();
 800080c:	4b20      	ldr	r3, [pc, #128]	; (8000890 <HAL_MDF_MspInit+0x130>)
 800080e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000812:	4a1f      	ldr	r2, [pc, #124]	; (8000890 <HAL_MDF_MspInit+0x130>)
 8000814:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000818:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800081c:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <HAL_MDF_MspInit+0x130>)
 800081e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800082a:	4b19      	ldr	r3, [pc, #100]	; (8000890 <HAL_MDF_MspInit+0x130>)
 800082c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000830:	4a17      	ldr	r2, [pc, #92]	; (8000890 <HAL_MDF_MspInit+0x130>)
 8000832:	f043 0310 	orr.w	r3, r3, #16
 8000836:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800083a:	4b15      	ldr	r3, [pc, #84]	; (8000890 <HAL_MDF_MspInit+0x130>)
 800083c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000840:	f003 0310 	and.w	r3, r3, #16
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	68bb      	ldr	r3, [r7, #8]
    /**ADF1 GPIO Configuration
    PE10     ------> ADF1_SDI0
    PE9     ------> ADF1_CCK0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000848:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800084c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000850:	2302      	movs	r3, #2
 8000852:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085c:	2300      	movs	r3, #0
 800085e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 8000862:	2303      	movs	r3, #3
 8000864:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000868:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800086c:	4619      	mov	r1, r3
 800086e:	4809      	ldr	r0, [pc, #36]	; (8000894 <HAL_MDF_MspInit+0x134>)
 8000870:	f001 fbf2 	bl	8002058 <HAL_GPIO_Init>

    /* ADF1 interrupt Init */
    HAL_NVIC_SetPriority(ADF1_IRQn, 0, 0);
 8000874:	2200      	movs	r2, #0
 8000876:	2100      	movs	r1, #0
 8000878:	2070      	movs	r0, #112	; 0x70
 800087a:	f000 fa52 	bl	8000d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADF1_IRQn);
 800087e:	2070      	movs	r0, #112	; 0x70
 8000880:	f000 fa69 	bl	8000d56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADF1_MspInit 1 */

  /* USER CODE END ADF1_MspInit 1 */
  }

}
 8000884:	bf00      	nop
 8000886:	37f0      	adds	r7, #240	; 0xf0
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	46024080 	.word	0x46024080
 8000890:	46020c00 	.word	0x46020c00
 8000894:	42021000 	.word	0x42021000

08000898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800089c:	e7fe      	b.n	800089c <NMI_Handler+0x4>

0800089e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a2:	e7fe      	b.n	80008a2 <HardFault_Handler+0x4>

080008a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <MemManage_Handler+0x4>

080008aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ae:	e7fe      	b.n	80008ae <BusFault_Handler+0x4>

080008b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <UsageFault_Handler+0x4>

080008b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr

080008d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e4:	f000 f922 	bl	8000b2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}

080008ec <ADF1_IRQHandler>:

/**
  * @brief This function handles ADF interrupt.
  */
void ADF1_IRQHandler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADF1_IRQn 0 */

  /* USER CODE END ADF1_IRQn 0 */
  HAL_MDF_IRQHandler(&AdfHandle0);
 80008f0:	4802      	ldr	r0, [pc, #8]	; (80008fc <ADF1_IRQHandler+0x10>)
 80008f2:	f002 f896 	bl	8002a22 <HAL_MDF_IRQHandler>
  /* USER CODE BEGIN ADF1_IRQn 1 */

  /* USER CODE END ADF1_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	2000006c 	.word	0x2000006c

08000900 <LPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles LPDMA1 SmartRun Channel 0 global interrupt.
  */
void LPDMA1_Channel0_IRQHandler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPDMA1_Channel0_IRQn 0 */

  /* USER CODE END LPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_LPDMA1_Channel0);
 8000904:	4802      	ldr	r0, [pc, #8]	; (8000910 <LPDMA1_Channel0_IRQHandler+0x10>)
 8000906:	f000 faa0 	bl	8000e4a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN LPDMA1_Channel0_IRQn 1 */

  /* USER CODE END LPDMA1_Channel0_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	2000012c 	.word	0x2000012c

08000914 <BSP_LED_Init>:
  *            @arg  LED6
  *            @arg  LED7
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08a      	sub	sp, #40	; 0x28
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  LED6_GPIO_CLK_ENABLE();
 8000922:	4b22      	ldr	r3, [pc, #136]	; (80009ac <BSP_LED_Init+0x98>)
 8000924:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000928:	4a20      	ldr	r2, [pc, #128]	; (80009ac <BSP_LED_Init+0x98>)
 800092a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800092e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000932:	4b1e      	ldr	r3, [pc, #120]	; (80009ac <BSP_LED_Init+0x98>)
 8000934:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	68fb      	ldr	r3, [r7, #12]
  LED7_GPIO_CLK_ENABLE();
 8000940:	4b1a      	ldr	r3, [pc, #104]	; (80009ac <BSP_LED_Init+0x98>)
 8000942:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000946:	4a19      	ldr	r2, [pc, #100]	; (80009ac <BSP_LED_Init+0x98>)
 8000948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800094c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000950:	4b16      	ldr	r3, [pc, #88]	; (80009ac <BSP_LED_Init+0x98>)
 8000952:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 800095e:	2301      	movs	r3, #1
 8000960:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000966:	2302      	movs	r3, #2
 8000968:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Pin = LED_PIN [Led];
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	4a10      	ldr	r2, [pc, #64]	; (80009b0 <BSP_LED_Init+0x9c>)
 800096e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000972:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	4a0f      	ldr	r2, [pc, #60]	; (80009b4 <BSP_LED_Init+0xa0>)
 8000978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800097c:	f107 0210 	add.w	r2, r7, #16
 8000980:	4611      	mov	r1, r2
 8000982:	4618      	mov	r0, r3
 8000984:	f001 fb68 	bl	8002058 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN[Led], GPIO_PIN_SET);
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	4a0a      	ldr	r2, [pc, #40]	; (80009b4 <BSP_LED_Init+0xa0>)
 800098c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	4a07      	ldr	r2, [pc, #28]	; (80009b0 <BSP_LED_Init+0x9c>)
 8000994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000998:	b29b      	uxth	r3, r3
 800099a:	2201      	movs	r2, #1
 800099c:	4619      	mov	r1, r3
 800099e:	f001 fd33 	bl	8002408 <HAL_GPIO_WritePin>

  return ret;
 80009a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3728      	adds	r7, #40	; 0x28
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	46020c00 	.word	0x46020c00
 80009b0:	08005654 	.word	0x08005654
 80009b4:	20000000 	.word	0x20000000

080009b8 <BSP_LED_Toggle>:
  *            @arg  LED5
  *            @arg  LED7
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  HAL_GPIO_TogglePin(LED_PORT[Led], (uint16_t)LED_PIN[Led]);
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	4a09      	ldr	r2, [pc, #36]	; (80009ec <BSP_LED_Toggle+0x34>)
 80009c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	4908      	ldr	r1, [pc, #32]	; (80009f0 <BSP_LED_Toggle+0x38>)
 80009ce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009d2:	b29b      	uxth	r3, r3
 80009d4:	4619      	mov	r1, r3
 80009d6:	4610      	mov	r0, r2
 80009d8:	f001 fd2e 	bl	8002438 <HAL_GPIO_TogglePin>
  ret = BSP_ERROR_NONE;
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]

  return ret;
 80009e0:	68fb      	ldr	r3, [r7, #12]
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000000 	.word	0x20000000
 80009f0:	08005654 	.word	0x08005654

080009f4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009f8:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <SystemInit+0x68>)
 80009fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009fe:	4a17      	ldr	r2, [pc, #92]	; (8000a5c <SystemInit+0x68>)
 8000a00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000a08:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <SystemInit+0x6c>)
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000a0e:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <SystemInit+0x6c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <SystemInit+0x6c>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000a1a:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <SystemInit+0x6c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000a20:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <SystemInit+0x6c>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a0e      	ldr	r2, [pc, #56]	; (8000a60 <SystemInit+0x6c>)
 8000a26:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000a2a:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000a2e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000a30:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <SystemInit+0x6c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000a36:	4b0a      	ldr	r3, [pc, #40]	; (8000a60 <SystemInit+0x6c>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a09      	ldr	r2, [pc, #36]	; (8000a60 <SystemInit+0x6c>)
 8000a3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a40:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000a42:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <SystemInit+0x6c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a48:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <SystemInit+0x68>)
 8000a4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a4e:	609a      	str	r2, [r3, #8]
  #endif
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	e000ed00 	.word	0xe000ed00
 8000a60:	46020c00 	.word	0x46020c00

08000a64 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a68:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <HAL_Init+0x4c>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a10      	ldr	r2, [pc, #64]	; (8000ab0 <HAL_Init+0x4c>)
 8000a6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a74:	2003      	movs	r0, #3
 8000a76:	f000 f949 	bl	8000d0c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000a7a:	f003 fd21 	bl	80044c0 <HAL_RCC_GetSysClockFreq>
 8000a7e:	4602      	mov	r2, r0
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <HAL_Init+0x50>)
 8000a82:	6a1b      	ldr	r3, [r3, #32]
 8000a84:	f003 030f 	and.w	r3, r3, #15
 8000a88:	490b      	ldr	r1, [pc, #44]	; (8000ab8 <HAL_Init+0x54>)
 8000a8a:	5ccb      	ldrb	r3, [r1, r3]
 8000a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8000a90:	4a0a      	ldr	r2, [pc, #40]	; (8000abc <HAL_Init+0x58>)
 8000a92:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a94:	200f      	movs	r0, #15
 8000a96:	f000 f813 	bl	8000ac0 <HAL_InitTick>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	e002      	b.n	8000aaa <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa4:	f7ff fe42 	bl	800072c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40022000 	.word	0x40022000
 8000ab4:	46020c00 	.word	0x46020c00
 8000ab8:	0800565c 	.word	0x0800565c
 8000abc:	20000008 	.word	0x20000008

08000ac0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000ac8:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <HAL_InitTick+0x60>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d101      	bne.n	8000ad4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	e021      	b.n	8000b18 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ad4:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <HAL_InitTick+0x64>)
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <HAL_InitTick+0x60>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	4619      	mov	r1, r3
 8000ade:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ae2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 f941 	bl	8000d72 <HAL_SYSTICK_Config>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
 8000af8:	e00e      	b.n	8000b18 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2b0f      	cmp	r3, #15
 8000afe:	d80a      	bhi.n	8000b16 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b00:	2200      	movs	r2, #0
 8000b02:	6879      	ldr	r1, [r7, #4]
 8000b04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b08:	f000 f90b 	bl	8000d22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b0c:	4a06      	ldr	r2, [pc, #24]	; (8000b28 <HAL_InitTick+0x68>)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b12:	2300      	movs	r3, #0
 8000b14:	e000      	b.n	8000b18 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000010 	.word	0x20000010
 8000b24:	20000008 	.word	0x20000008
 8000b28:	2000000c 	.word	0x2000000c

08000b2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <HAL_IncTick+0x20>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	461a      	mov	r2, r3
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_IncTick+0x24>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <HAL_IncTick+0x24>)
 8000b3e:	6013      	str	r3, [r2, #0]
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	20000010 	.word	0x20000010
 8000b50:	200011b0 	.word	0x200011b0

08000b54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  return uwTick;
 8000b58:	4b03      	ldr	r3, [pc, #12]	; (8000b68 <HAL_GetTick+0x14>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	200011b0 	.word	0x200011b0

08000b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f003 0307 	and.w	r3, r3, #7
 8000b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b82:	68ba      	ldr	r2, [r7, #8]
 8000b84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b88:	4013      	ands	r3, r2
 8000b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b9e:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	60d3      	str	r3, [r2, #12]
}
 8000ba4:	bf00      	nop
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb8:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <__NVIC_GetPriorityGrouping+0x18>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	0a1b      	lsrs	r3, r3, #8
 8000bbe:	f003 0307 	and.w	r3, r3, #7
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	db0b      	blt.n	8000bfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	f003 021f 	and.w	r2, r3, #31
 8000be8:	4907      	ldr	r1, [pc, #28]	; (8000c08 <__NVIC_EnableIRQ+0x38>)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	095b      	lsrs	r3, r3, #5
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bfa:	bf00      	nop
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	e000e100 	.word	0xe000e100

08000c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	6039      	str	r1, [r7, #0]
 8000c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	db0a      	blt.n	8000c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	490c      	ldr	r1, [pc, #48]	; (8000c58 <__NVIC_SetPriority+0x4c>)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	0112      	lsls	r2, r2, #4
 8000c2c:	b2d2      	uxtb	r2, r2
 8000c2e:	440b      	add	r3, r1
 8000c30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c34:	e00a      	b.n	8000c4c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	4908      	ldr	r1, [pc, #32]	; (8000c5c <__NVIC_SetPriority+0x50>)
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	f003 030f 	and.w	r3, r3, #15
 8000c42:	3b04      	subs	r3, #4
 8000c44:	0112      	lsls	r2, r2, #4
 8000c46:	b2d2      	uxtb	r2, r2
 8000c48:	440b      	add	r3, r1
 8000c4a:	761a      	strb	r2, [r3, #24]
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000e100 	.word	0xe000e100
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b089      	sub	sp, #36	; 0x24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	f1c3 0307 	rsb	r3, r3, #7
 8000c7a:	2b04      	cmp	r3, #4
 8000c7c:	bf28      	it	cs
 8000c7e:	2304      	movcs	r3, #4
 8000c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	3304      	adds	r3, #4
 8000c86:	2b06      	cmp	r3, #6
 8000c88:	d902      	bls.n	8000c90 <NVIC_EncodePriority+0x30>
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	3b03      	subs	r3, #3
 8000c8e:	e000      	b.n	8000c92 <NVIC_EncodePriority+0x32>
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	43da      	mvns	r2, r3
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb2:	43d9      	mvns	r1, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb8:	4313      	orrs	r3, r2
         );
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3724      	adds	r7, #36	; 0x24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
	...

08000cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cd8:	d301      	bcc.n	8000cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e00f      	b.n	8000cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cde:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <SysTick_Config+0x40>)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ce6:	210f      	movs	r1, #15
 8000ce8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cec:	f7ff ff8e 	bl	8000c0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cf0:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <SysTick_Config+0x40>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cf6:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <SysTick_Config+0x40>)
 8000cf8:	2207      	movs	r2, #7
 8000cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	e000e010 	.word	0xe000e010

08000d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f7ff ff29 	bl	8000b6c <__NVIC_SetPriorityGrouping>
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b086      	sub	sp, #24
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	4603      	mov	r3, r0
 8000d2a:	60b9      	str	r1, [r7, #8]
 8000d2c:	607a      	str	r2, [r7, #4]
 8000d2e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d30:	f7ff ff40 	bl	8000bb4 <__NVIC_GetPriorityGrouping>
 8000d34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	68b9      	ldr	r1, [r7, #8]
 8000d3a:	6978      	ldr	r0, [r7, #20]
 8000d3c:	f7ff ff90 	bl	8000c60 <NVIC_EncodePriority>
 8000d40:	4602      	mov	r2, r0
 8000d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d46:	4611      	mov	r1, r2
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff ff5f 	bl	8000c0c <__NVIC_SetPriority>
}
 8000d4e:	bf00      	nop
 8000d50:	3718      	adds	r7, #24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff ff33 	bl	8000bd0 <__NVIC_EnableIRQ>
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b082      	sub	sp, #8
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f7ff ffa4 	bl	8000cc8 <SysTick_Config>
 8000d80:	4603      	mov	r3, r0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b084      	sub	sp, #16
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	60f8      	str	r0, [r7, #12]
 8000d92:	60b9      	str	r1, [r7, #8]
 8000d94:	607a      	str	r2, [r7, #4]
 8000d96:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d101      	bne.n	8000da2 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e04f      	b.n	8000e42 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d101      	bne.n	8000db0 <HAL_DMA_Start_IT+0x26>
 8000dac:	2302      	movs	r3, #2
 8000dae:	e048      	b.n	8000e42 <HAL_DMA_Start_IT+0xb8>
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	2201      	movs	r2, #1
 8000db4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d136      	bne.n	8000e32 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	2202      	movs	r2, #2
 8000dc8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	68b9      	ldr	r1, [r7, #8]
 8000dd8:	68f8      	ldr	r0, [r7, #12]
 8000dda:	f000 f9ee 	bl	80011ba <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	695a      	ldr	r2, [r3, #20]
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 8000dec:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d007      	beq.n	8000e06 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	695a      	ldr	r2, [r3, #20]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e04:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d007      	beq.n	8000e1e <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	695a      	ldr	r2, [r3, #20]
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000e1c:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	695a      	ldr	r2, [r3, #20]
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f042 0201 	orr.w	r2, r2, #1
 8000e2c:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	e007      	b.n	8000e42 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	2240      	movs	r2, #64	; 0x40
 8000e36:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 8000e40:	2301      	movs	r3, #1
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b086      	sub	sp, #24
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000e5a:	f023 030f 	bic.w	r3, r3, #15
 8000e5e:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e68:	3b50      	subs	r3, #80	; 0x50
 8000e6a:	09db      	lsrs	r3, r3, #7
 8000e6c:	f003 031f 	and.w	r3, r3, #31
 8000e70:	2201      	movs	r2, #1
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	f000 8156 	beq.w	8001136 <HAL_DMA_IRQHandler+0x2ec>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	691b      	ldr	r3, [r3, #16]
 8000e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d011      	beq.n	8000ebc <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d00a      	beq.n	8000ebc <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eae:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb4:	f043 0201 	orr.w	r2, r3, #1
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	691b      	ldr	r3, [r3, #16]
 8000ec2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d011      	beq.n	8000eee <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	695b      	ldr	r3, [r3, #20]
 8000ed0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d00a      	beq.n	8000eee <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ee0:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee6:	f043 0202 	orr.w	r2, r3, #2
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	691b      	ldr	r3, [r3, #16]
 8000ef4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d011      	beq.n	8000f20 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	695b      	ldr	r3, [r3, #20]
 8000f02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d00a      	beq.n	8000f20 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f12:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f18:	f043 0204 	orr.w	r2, r3, #4
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	691b      	ldr	r3, [r3, #16]
 8000f26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d011      	beq.n	8000f52 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	695b      	ldr	r3, [r3, #20]
 8000f34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d00a      	beq.n	8000f52 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f44:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f4a:	f043 0208 	orr.w	r2, r3, #8
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	691b      	ldr	r3, [r3, #16]
 8000f58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d013      	beq.n	8000f88 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d00c      	beq.n	8000f88 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f76:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d003      	beq.n	8000f88 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	691b      	ldr	r3, [r3, #16]
 8000f8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d05a      	beq.n	800104c <HAL_DMA_IRQHandler+0x202>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	695b      	ldr	r3, [r3, #20]
 8000f9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d053      	beq.n	800104c <HAL_DMA_IRQHandler+0x202>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fac:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	d13c      	bne.n	8001034 <HAL_DMA_IRQHandler+0x1ea>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	695a      	ldr	r2, [r3, #20]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000fc8:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	695a      	ldr	r2, [r3, #20]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f042 0202 	orr.w	r2, r2, #2
 8000fd8:	615a      	str	r2, [r3, #20]

        /* Wait one clock cycle to ensure that the reset of DMA channel is done before checking the enable bit */
        __NOP();
 8000fda:	bf00      	nop

        if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	695b      	ldr	r3, [r3, #20]
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d004      	beq.n	8000ff4 <HAL_DMA_IRQHandler+0x1aa>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_ERROR;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2203      	movs	r2, #3
 8000fee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8000ff2:	e003      	b.n	8000ffc <HAL_DMA_IRQHandler+0x1b2>
        }
        else
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001004:	2b00      	cmp	r3, #0
 8001006:	d007      	beq.n	8001018 <HAL_DMA_IRQHandler+0x1ce>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800100c:	2201      	movs	r2, #1
 800100e:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2200      	movs	r2, #0
 8001016:	649a      	str	r2, [r3, #72]	; 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2200      	movs	r2, #0
 800101c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001024:	2b00      	cmp	r3, #0
 8001026:	f000 8088 	beq.w	800113a <HAL_DMA_IRQHandler+0x2f0>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	4798      	blx	r3
        }

        return;
 8001032:	e082      	b.n	800113a <HAL_DMA_IRQHandler+0x2f0>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2205      	movs	r2, #5
 8001038:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001040:	2b00      	cmp	r3, #0
 8001042:	d003      	beq.n	800104c <HAL_DMA_IRQHandler+0x202>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	691b      	ldr	r3, [r3, #16]
 8001052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001056:	2b00      	cmp	r3, #0
 8001058:	d039      	beq.n	80010ce <HAL_DMA_IRQHandler+0x284>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	695b      	ldr	r3, [r3, #20]
 8001060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001064:	2b00      	cmp	r3, #0
 8001066:	d032      	beq.n	80010ce <HAL_DMA_IRQHandler+0x284>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800106c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001070:	2b00      	cmp	r3, #0
 8001072:	d012      	beq.n	800109a <HAL_DMA_IRQHandler+0x250>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800107a:	2b00      	cmp	r3, #0
 800107c:	d116      	bne.n	80010ac <HAL_DMA_IRQHandler+0x262>
        {
          if (hdma->Instance->CBR1 == 0U)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001084:	2b00      	cmp	r3, #0
 8001086:	d111      	bne.n	80010ac <HAL_DMA_IRQHandler+0x262>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2201      	movs	r2, #1
 800108c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001094:	2201      	movs	r2, #1
 8001096:	731a      	strb	r2, [r3, #12]
 8001098:	e008      	b.n	80010ac <HAL_DMA_IRQHandler+0x262>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d103      	bne.n	80010ac <HAL_DMA_IRQHandler+0x262>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2201      	movs	r2, #1
 80010a8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80010b4:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <HAL_DMA_IRQHandler+0x284>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d032      	beq.n	800113c <HAL_DMA_IRQHandler+0x2f2>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	695a      	ldr	r2, [r3, #20]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f042 0202 	orr.w	r2, r2, #2
 80010e4:	615a      	str	r2, [r3, #20]

    /* Wait one clock cycle to ensure that the reset of DMA channel is done before checking the enable bit */
    __NOP();
 80010e6:	bf00      	nop

    if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d004      	beq.n	8001100 <HAL_DMA_IRQHandler+0x2b6>
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2203      	movs	r2, #3
 80010fa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80010fe:	e003      	b.n	8001108 <HAL_DMA_IRQHandler+0x2be>
    }
    else
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_READY;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2201      	movs	r2, #1
 8001104:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    }

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800110c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <HAL_DMA_IRQHandler+0x2d2>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001118:	2201      	movs	r2, #1
 800111a:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001128:	2b00      	cmp	r3, #0
 800112a:	d007      	beq.n	800113c <HAL_DMA_IRQHandler+0x2f2>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	4798      	blx	r3
 8001134:	e002      	b.n	800113c <HAL_DMA_IRQHandler+0x2f2>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8001136:	bf00      	nop
 8001138:	e000      	b.n	800113c <HAL_DMA_IRQHandler+0x2f2>
        return;
 800113a:	bf00      	nop
    }
  }
}
 800113c:	3718      	adds	r7, #24
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8001142:	b480      	push	{r7}
 8001144:	b085      	sub	sp, #20
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
 800114a:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d101      	bne.n	8001156 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e02b      	b.n	80011ae <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800115e:	f023 030f 	bic.w	r3, r3, #15
 8001162:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800116c:	3b50      	subs	r3, #80	; 0x50
 800116e:	09db      	lsrs	r3, r3, #7
 8001170:	f003 031f 	and.w	r3, r3, #31
 8001174:	2201      	movs	r2, #1
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	f003 0310 	and.w	r3, r3, #16
 8001182:	2b00      	cmp	r3, #0
 8001184:	d012      	beq.n	80011ac <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	f003 0311 	and.w	r3, r3, #17
 800118c:	2b11      	cmp	r3, #17
 800118e:	d106      	bne.n	800119e <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	685a      	ldr	r2, [r3, #4]
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	431a      	orrs	r2, r3
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	e006      	b.n	80011ac <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	43db      	mvns	r3, r3
 80011a6:	401a      	ands	r2, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3714      	adds	r7, #20
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b085      	sub	sp, #20
 80011be:	af00      	add	r7, sp, #0
 80011c0:	60f8      	str	r0, [r7, #12]
 80011c2:	60b9      	str	r1, [r7, #8]
 80011c4:	607a      	str	r2, [r7, #4]
 80011c6:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ce:	0c1b      	lsrs	r3, r3, #16
 80011d0:	041b      	lsls	r3, r3, #16
 80011d2:	683a      	ldr	r2, [r7, #0]
 80011d4:	b291      	uxth	r1, r2
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	6812      	ldr	r2, [r2, #0]
 80011da:	430b      	orrs	r3, r1
 80011dc:	6493      	str	r3, [r2, #72]	; 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80011e6:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	68ba      	ldr	r2, [r7, #8]
 80011ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80011f8:	bf00      	nop
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 800120c:	f7ff fca2 	bl	8000b54 <HAL_GetTick>
 8001210:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d101      	bne.n	800121c <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e0db      	b.n	80013d4 <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a6e      	ldr	r2, [pc, #440]	; (80013dc <HAL_DMAEx_List_Init+0x1d8>)
 8001222:	4293      	cmp	r3, r2
 8001224:	f000 809f 	beq.w	8001366 <HAL_DMAEx_List_Init+0x162>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a6c      	ldr	r2, [pc, #432]	; (80013e0 <HAL_DMAEx_List_Init+0x1dc>)
 800122e:	4293      	cmp	r3, r2
 8001230:	f000 8099 	beq.w	8001366 <HAL_DMAEx_List_Init+0x162>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a6a      	ldr	r2, [pc, #424]	; (80013e4 <HAL_DMAEx_List_Init+0x1e0>)
 800123a:	4293      	cmp	r3, r2
 800123c:	f000 8093 	beq.w	8001366 <HAL_DMAEx_List_Init+0x162>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a68      	ldr	r2, [pc, #416]	; (80013e8 <HAL_DMAEx_List_Init+0x1e4>)
 8001246:	4293      	cmp	r3, r2
 8001248:	f000 808d 	beq.w	8001366 <HAL_DMAEx_List_Init+0x162>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a66      	ldr	r2, [pc, #408]	; (80013ec <HAL_DMAEx_List_Init+0x1e8>)
 8001252:	4293      	cmp	r3, r2
 8001254:	f000 8087 	beq.w	8001366 <HAL_DMAEx_List_Init+0x162>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a64      	ldr	r2, [pc, #400]	; (80013f0 <HAL_DMAEx_List_Init+0x1ec>)
 800125e:	4293      	cmp	r3, r2
 8001260:	f000 8081 	beq.w	8001366 <HAL_DMAEx_List_Init+0x162>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a62      	ldr	r2, [pc, #392]	; (80013f4 <HAL_DMAEx_List_Init+0x1f0>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d07b      	beq.n	8001366 <HAL_DMAEx_List_Init+0x162>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a61      	ldr	r2, [pc, #388]	; (80013f8 <HAL_DMAEx_List_Init+0x1f4>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d076      	beq.n	8001366 <HAL_DMAEx_List_Init+0x162>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a5f      	ldr	r2, [pc, #380]	; (80013fc <HAL_DMAEx_List_Init+0x1f8>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d071      	beq.n	8001366 <HAL_DMAEx_List_Init+0x162>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a5e      	ldr	r2, [pc, #376]	; (8001400 <HAL_DMAEx_List_Init+0x1fc>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d06c      	beq.n	8001366 <HAL_DMAEx_List_Init+0x162>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a5c      	ldr	r2, [pc, #368]	; (8001404 <HAL_DMAEx_List_Init+0x200>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d067      	beq.n	8001366 <HAL_DMAEx_List_Init+0x162>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a5b      	ldr	r2, [pc, #364]	; (8001408 <HAL_DMAEx_List_Init+0x204>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d062      	beq.n	8001366 <HAL_DMAEx_List_Init+0x162>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a59      	ldr	r2, [pc, #356]	; (800140c <HAL_DMAEx_List_Init+0x208>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d05d      	beq.n	8001366 <HAL_DMAEx_List_Init+0x162>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a58      	ldr	r2, [pc, #352]	; (8001410 <HAL_DMAEx_List_Init+0x20c>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d058      	beq.n	8001366 <HAL_DMAEx_List_Init+0x162>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a56      	ldr	r2, [pc, #344]	; (8001414 <HAL_DMAEx_List_Init+0x210>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d053      	beq.n	8001366 <HAL_DMAEx_List_Init+0x162>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a55      	ldr	r2, [pc, #340]	; (8001418 <HAL_DMAEx_List_Init+0x214>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d04e      	beq.n	8001366 <HAL_DMAEx_List_Init+0x162>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a53      	ldr	r2, [pc, #332]	; (800141c <HAL_DMAEx_List_Init+0x218>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d049      	beq.n	8001366 <HAL_DMAEx_List_Init+0x162>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a52      	ldr	r2, [pc, #328]	; (8001420 <HAL_DMAEx_List_Init+0x21c>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d044      	beq.n	8001366 <HAL_DMAEx_List_Init+0x162>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a50      	ldr	r2, [pc, #320]	; (8001424 <HAL_DMAEx_List_Init+0x220>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d03f      	beq.n	8001366 <HAL_DMAEx_List_Init+0x162>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a4f      	ldr	r2, [pc, #316]	; (8001428 <HAL_DMAEx_List_Init+0x224>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d03a      	beq.n	8001366 <HAL_DMAEx_List_Init+0x162>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a4d      	ldr	r2, [pc, #308]	; (800142c <HAL_DMAEx_List_Init+0x228>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d035      	beq.n	8001366 <HAL_DMAEx_List_Init+0x162>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a4c      	ldr	r2, [pc, #304]	; (8001430 <HAL_DMAEx_List_Init+0x22c>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d030      	beq.n	8001366 <HAL_DMAEx_List_Init+0x162>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a4a      	ldr	r2, [pc, #296]	; (8001434 <HAL_DMAEx_List_Init+0x230>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d02b      	beq.n	8001366 <HAL_DMAEx_List_Init+0x162>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a49      	ldr	r2, [pc, #292]	; (8001438 <HAL_DMAEx_List_Init+0x234>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d026      	beq.n	8001366 <HAL_DMAEx_List_Init+0x162>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a47      	ldr	r2, [pc, #284]	; (800143c <HAL_DMAEx_List_Init+0x238>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d021      	beq.n	8001366 <HAL_DMAEx_List_Init+0x162>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a46      	ldr	r2, [pc, #280]	; (8001440 <HAL_DMAEx_List_Init+0x23c>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d01c      	beq.n	8001366 <HAL_DMAEx_List_Init+0x162>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a44      	ldr	r2, [pc, #272]	; (8001444 <HAL_DMAEx_List_Init+0x240>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d017      	beq.n	8001366 <HAL_DMAEx_List_Init+0x162>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a43      	ldr	r2, [pc, #268]	; (8001448 <HAL_DMAEx_List_Init+0x244>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d012      	beq.n	8001366 <HAL_DMAEx_List_Init+0x162>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a41      	ldr	r2, [pc, #260]	; (800144c <HAL_DMAEx_List_Init+0x248>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d00d      	beq.n	8001366 <HAL_DMAEx_List_Init+0x162>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a40      	ldr	r2, [pc, #256]	; (8001450 <HAL_DMAEx_List_Init+0x24c>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d008      	beq.n	8001366 <HAL_DMAEx_List_Init+0x162>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a3e      	ldr	r2, [pc, #248]	; (8001454 <HAL_DMAEx_List_Init+0x250>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d003      	beq.n	8001366 <HAL_DMAEx_List_Init+0x162>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a3d      	ldr	r2, [pc, #244]	; (8001458 <HAL_DMAEx_List_Init+0x254>)
 8001364:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2202      	movs	r2, #2
 8001372:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	695a      	ldr	r2, [r3, #20]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f042 0206 	orr.w	r2, r2, #6
 8001384:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8001386:	e00f      	b.n	80013a8 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8001388:	f7ff fbe4 	bl	8000b54 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b05      	cmp	r3, #5
 8001394:	d908      	bls.n	80013a8 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2210      	movs	r2, #16
 800139a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2203      	movs	r2, #3
 80013a0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e015      	b.n	80013d4 <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1e8      	bne.n	8001388 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f000 fa68 	bl	800188c <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2201      	movs	r2, #1
 80013ce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3710      	adds	r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40020050 	.word	0x40020050
 80013e0:	50020050 	.word	0x50020050
 80013e4:	400200d0 	.word	0x400200d0
 80013e8:	500200d0 	.word	0x500200d0
 80013ec:	40020150 	.word	0x40020150
 80013f0:	50020150 	.word	0x50020150
 80013f4:	400201d0 	.word	0x400201d0
 80013f8:	500201d0 	.word	0x500201d0
 80013fc:	40020250 	.word	0x40020250
 8001400:	50020250 	.word	0x50020250
 8001404:	400202d0 	.word	0x400202d0
 8001408:	500202d0 	.word	0x500202d0
 800140c:	40020350 	.word	0x40020350
 8001410:	50020350 	.word	0x50020350
 8001414:	400203d0 	.word	0x400203d0
 8001418:	500203d0 	.word	0x500203d0
 800141c:	40020450 	.word	0x40020450
 8001420:	50020450 	.word	0x50020450
 8001424:	400204d0 	.word	0x400204d0
 8001428:	500204d0 	.word	0x500204d0
 800142c:	40020550 	.word	0x40020550
 8001430:	50020550 	.word	0x50020550
 8001434:	400205d0 	.word	0x400205d0
 8001438:	500205d0 	.word	0x500205d0
 800143c:	40020650 	.word	0x40020650
 8001440:	50020650 	.word	0x50020650
 8001444:	400206d0 	.word	0x400206d0
 8001448:	500206d0 	.word	0x500206d0
 800144c:	40020750 	.word	0x40020750
 8001450:	50020750 	.word	0x50020750
 8001454:	400207d0 	.word	0x400207d0
 8001458:	500207d0 	.word	0x500207d0

0800145c <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <HAL_DMAEx_List_Start_IT+0x16>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800146e:	2b00      	cmp	r3, #0
 8001470:	d101      	bne.n	8001476 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e082      	b.n	800157c <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800147c:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	695b      	ldr	r3, [r3, #20]
 8001484:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001488:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 800148a:	7dfb      	ldrb	r3, [r7, #23]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d005      	beq.n	800149c <HAL_DMAEx_List_Start_IT+0x40>
 8001490:	7dfb      	ldrb	r3, [r7, #23]
 8001492:	2b02      	cmp	r3, #2
 8001494:	d16a      	bne.n	800156c <HAL_DMAEx_List_Start_IT+0x110>
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d067      	beq.n	800156c <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d157      	bne.n	8001558 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d101      	bne.n	80014b6 <HAL_DMAEx_List_Start_IT+0x5a>
 80014b2:	2302      	movs	r3, #2
 80014b4:	e062      	b.n	800157c <HAL_DMAEx_List_Start_IT+0x120>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2201      	movs	r2, #1
 80014ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2202      	movs	r2, #2
 80014c2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ca:	2202      	movs	r2, #2
 80014cc:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	659a      	str	r2, [r3, #88]	; 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014d8:	2200      	movs	r2, #0
 80014da:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	695a      	ldr	r2, [r3, #20]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 80014ea:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d007      	beq.n	8001504 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	695a      	ldr	r2, [r3, #20]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001502:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001508:	2b00      	cmp	r3, #0
 800150a:	d007      	beq.n	800151c <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	695a      	ldr	r2, [r3, #20]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800151a:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f107 010c 	add.w	r1, r7, #12
 8001526:	2200      	movs	r2, #0
 8001528:	4618      	mov	r0, r3
 800152a:	f000 fcc5 	bl	8001eb8 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4619      	mov	r1, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	0c0b      	lsrs	r3, r1, #16
 800153c:	041b      	lsls	r3, r3, #16
 800153e:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	461a      	mov	r2, r3
 8001548:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800154c:	4013      	ands	r3, r2
 800154e:	68f9      	ldr	r1, [r7, #12]
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	6812      	ldr	r2, [r2, #0]
 8001554:	430b      	orrs	r3, r1
 8001556:	67d3      	str	r3, [r2, #124]	; 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	695a      	ldr	r2, [r3, #20]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f042 0201 	orr.w	r2, r2, #1
 8001566:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8001568:	2300      	movs	r3, #0
 800156a:	e007      	b.n	800157c <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2240      	movs	r2, #64	; 0x40
 8001570:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
}
 800157c:	4618      	mov	r0, r3
 800157e:	3718      	adds	r7, #24
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d002      	beq.n	800159a <HAL_DMAEx_List_BuildNode+0x16>
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d101      	bne.n	800159e <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e004      	b.n	80015a8 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 800159e:	6839      	ldr	r1, [r7, #0]
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f000 facb 	bl	8001b3c <DMA_List_BuildNode>

  return HAL_OK;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <HAL_DMAEx_List_InsertNode_Tail>:
  *                     configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode_Tail(DMA_QListTypeDef *const pQList,
                                                 DMA_NodeTypeDef *const pNewNode)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	; 0x28
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d002      	beq.n	80015c6 <HAL_DMAEx_List_InsertNode_Tail+0x16>
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <HAL_DMAEx_List_InsertNode_Tail+0x1a>
  {
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e066      	b.n	8001698 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d104      	bne.n	80015dc <HAL_DMAEx_List_InsertNode_Tail+0x2c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2204      	movs	r2, #4
 80015d6:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e05d      	b.n	8001698 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pNewNode, NULL) != 0U)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2200      	movs	r2, #0
 80015e2:	6839      	ldr	r1, [r7, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f000 fbfb 	bl	8001de0 <DMA_List_CheckNodesBaseAddresses>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d004      	beq.n	80015fa <HAL_DMAEx_List_InsertNode_Tail+0x4a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2205      	movs	r2, #5
 80015f4:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e04e      	b.n	8001698 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pNewNode, NULL) != 0U)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2200      	movs	r2, #0
 8001600:	6839      	ldr	r1, [r7, #0]
 8001602:	4618      	mov	r0, r3
 8001604:	f000 fc1c 	bl	8001e40 <DMA_List_CheckNodesTypes>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d004      	beq.n	8001618 <HAL_DMAEx_List_InsertNode_Tail+0x68>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2204      	movs	r2, #4
 8001612:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e03f      	b.n	8001698 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Empty queue */
  if (pQList->Head == NULL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d103      	bne.n	8001628 <HAL_DMAEx_List_InsertNode_Tail+0x78>
  {
    pQList->Head = pNewNode;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	683a      	ldr	r2, [r7, #0]
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	e02b      	b.n	8001680 <HAL_DMAEx_List_InsertNode_Tail+0xd0>
  }
  /* Not empty queue */
  else
  {
    /* Get CLLR register mask and offset */
    DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8001628:	f107 0220 	add.w	r2, r7, #32
 800162c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001630:	4619      	mov	r1, r3
 8001632:	6838      	ldr	r0, [r7, #0]
 8001634:	f000 fc40 	bl	8001eb8 <DMA_List_GetCLLRNodeInfo>

    /* Find node and get its position in selected queue */
    node_info.cllr_offset = cllr_offset;
 8001638:	6a3b      	ldr	r3, [r7, #32]
 800163a:	60fb      	str	r3, [r7, #12]
    (void)DMA_List_FindNode(pQList, NULL, &node_info);
 800163c:	f107 030c 	add.w	r3, r7, #12
 8001640:	461a      	mov	r2, r3
 8001642:	2100      	movs	r1, #0
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f000 fc67 	bl	8001f18 <DMA_List_FindNode>

    /* Check if queue is circular */
    if (pQList->FirstCircularNode != NULL)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d00b      	beq.n	800166a <HAL_DMAEx_List_InsertNode_Tail+0xba>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	461a      	mov	r2, r3
 8001658:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800165c:	4013      	ands	r3, r2
 800165e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001660:	6a3a      	ldr	r2, [r7, #32]
 8001662:	4319      	orrs	r1, r3
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8001670:	4013      	ands	r3, r2
 8001672:	6a79      	ldr	r1, [r7, #36]	; 0x24
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4610      	mov	r0, r2
 8001678:	6a3a      	ldr	r2, [r7, #32]
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 800167a:	430b      	orrs	r3, r1
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 800167c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  /* Increment queue node number */
  pQList->NodeNumber++;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	1c5a      	adds	r2, r3, #1
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	609a      	str	r2, [r3, #8]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2201      	movs	r2, #1
 8001694:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8001696:	2300      	movs	r3, #0
}
 8001698:	4618      	mov	r0, r3
 800169a:	3728      	adds	r7, #40	; 0x28
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08a      	sub	sp, #40	; 0x28
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e052      	b.n	8001758 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d104      	bne.n	80016c4 <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2202      	movs	r2, #2
 80016be:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e049      	b.n	8001758 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d00c      	beq.n	80016e6 <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685a      	ldr	r2, [r3, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d101      	bne.n	80016dc <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 80016d8:	2300      	movs	r3, #0
 80016da:	e03d      	b.n	8001758 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2204      	movs	r2, #4
 80016e0:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e038      	b.n	8001758 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	695b      	ldr	r3, [r3, #20]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d104      	bne.n	80016f8 <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2204      	movs	r2, #4
 80016f2:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e02f      	b.n	8001758 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2202      	movs	r2, #2
 80016fc:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f107 0220 	add.w	r2, r7, #32
 800170c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001710:	4618      	mov	r0, r3
 8001712:	f000 fbd1 	bl	8001eb8 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 8001716:	6a3b      	ldr	r3, [r7, #32]
 8001718:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 800171a:	f107 030c 	add.w	r3, r7, #12
 800171e:	461a      	mov	r2, r3
 8001720:	2100      	movs	r1, #0
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f000 fbf8 	bl	8001f18 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	461a      	mov	r2, r3
 800172e:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8001732:	4013      	ands	r3, r2
 8001734:	6a79      	ldr	r1, [r7, #36]	; 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4610      	mov	r0, r2
 800173a:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 800173c:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 800173e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2201      	movs	r2, #1
 8001754:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8001756:	2300      	movs	r3, #0
}
 8001758:	4618      	mov	r0, r3
 800175a:	3728      	adds	r7, #40	; 0x28
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d002      	beq.n	8001776 <HAL_DMAEx_List_LinkQ+0x16>
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d101      	bne.n	800177a <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e072      	b.n	8001860 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001780:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d002      	beq.n	8001794 <HAL_DMAEx_List_LinkQ+0x34>
 800178e:	7bfb      	ldrb	r3, [r7, #15]
 8001790:	2b05      	cmp	r3, #5
 8001792:	d108      	bne.n	80017a6 <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2240      	movs	r2, #64	; 0x40
 8001798:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e05c      	b.n	8001860 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	7b1b      	ldrb	r3, [r3, #12]
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d104      	bne.n	80017ba <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	2201      	movs	r2, #1
 80017b4:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e052      	b.n	8001860 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a2b      	ldr	r2, [pc, #172]	; (800186c <HAL_DMAEx_List_LinkQ+0x10c>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d022      	beq.n	800180a <HAL_DMAEx_List_LinkQ+0xaa>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a29      	ldr	r2, [pc, #164]	; (8001870 <HAL_DMAEx_List_LinkQ+0x110>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d01d      	beq.n	800180a <HAL_DMAEx_List_LinkQ+0xaa>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a28      	ldr	r2, [pc, #160]	; (8001874 <HAL_DMAEx_List_LinkQ+0x114>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d018      	beq.n	800180a <HAL_DMAEx_List_LinkQ+0xaa>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a26      	ldr	r2, [pc, #152]	; (8001878 <HAL_DMAEx_List_LinkQ+0x118>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d013      	beq.n	800180a <HAL_DMAEx_List_LinkQ+0xaa>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a25      	ldr	r2, [pc, #148]	; (800187c <HAL_DMAEx_List_LinkQ+0x11c>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d00e      	beq.n	800180a <HAL_DMAEx_List_LinkQ+0xaa>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a23      	ldr	r2, [pc, #140]	; (8001880 <HAL_DMAEx_List_LinkQ+0x120>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d009      	beq.n	800180a <HAL_DMAEx_List_LinkQ+0xaa>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a22      	ldr	r2, [pc, #136]	; (8001884 <HAL_DMAEx_List_LinkQ+0x124>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d004      	beq.n	800180a <HAL_DMAEx_List_LinkQ+0xaa>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a20      	ldr	r2, [pc, #128]	; (8001888 <HAL_DMAEx_List_LinkQ+0x128>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d101      	bne.n	800180e <HAL_DMAEx_List_LinkQ+0xae>
 800180a:	2301      	movs	r3, #1
 800180c:	e000      	b.n	8001810 <HAL_DMAEx_List_LinkQ+0xb0>
 800180e:	2300      	movs	r3, #0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d10b      	bne.n	800182c <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6a1b      	ldr	r3, [r3, #32]
 800181a:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 800181e:	2b00      	cmp	r3, #0
 8001820:	d004      	beq.n	800182c <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	2203      	movs	r2, #3
 8001826:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e019      	b.n	8001860 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001830:	2b81      	cmp	r3, #129	; 0x81
 8001832:	d108      	bne.n	8001846 <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d10d      	bne.n	8001858 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	2204      	movs	r2, #4
 8001840:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e00c      	b.n	8001860 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d004      	beq.n	8001858 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	2204      	movs	r2, #4
 8001852:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e003      	b.n	8001860 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	675a      	str	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	3714      	adds	r7, #20
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	40020650 	.word	0x40020650
 8001870:	50020650 	.word	0x50020650
 8001874:	400206d0 	.word	0x400206d0
 8001878:	500206d0 	.word	0x500206d0
 800187c:	40020750 	.word	0x40020750
 8001880:	50020750 	.word	0x50020750
 8001884:	400207d0 	.word	0x400207d0
 8001888:	500207d0 	.word	0x500207d0

0800188c <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800189c:	4313      	orrs	r3, r2
 800189e:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a85      	ldr	r2, [pc, #532]	; (8001abc <DMA_List_Init+0x230>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	f000 80a0 	beq.w	80019ec <DMA_List_Init+0x160>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a83      	ldr	r2, [pc, #524]	; (8001ac0 <DMA_List_Init+0x234>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	f000 809a 	beq.w	80019ec <DMA_List_Init+0x160>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a81      	ldr	r2, [pc, #516]	; (8001ac4 <DMA_List_Init+0x238>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	f000 8094 	beq.w	80019ec <DMA_List_Init+0x160>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a7f      	ldr	r2, [pc, #508]	; (8001ac8 <DMA_List_Init+0x23c>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	f000 808e 	beq.w	80019ec <DMA_List_Init+0x160>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a7d      	ldr	r2, [pc, #500]	; (8001acc <DMA_List_Init+0x240>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	f000 8088 	beq.w	80019ec <DMA_List_Init+0x160>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a7b      	ldr	r2, [pc, #492]	; (8001ad0 <DMA_List_Init+0x244>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	f000 8082 	beq.w	80019ec <DMA_List_Init+0x160>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a79      	ldr	r2, [pc, #484]	; (8001ad4 <DMA_List_Init+0x248>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d07c      	beq.n	80019ec <DMA_List_Init+0x160>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a78      	ldr	r2, [pc, #480]	; (8001ad8 <DMA_List_Init+0x24c>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d077      	beq.n	80019ec <DMA_List_Init+0x160>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a76      	ldr	r2, [pc, #472]	; (8001adc <DMA_List_Init+0x250>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d072      	beq.n	80019ec <DMA_List_Init+0x160>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a75      	ldr	r2, [pc, #468]	; (8001ae0 <DMA_List_Init+0x254>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d06d      	beq.n	80019ec <DMA_List_Init+0x160>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a73      	ldr	r2, [pc, #460]	; (8001ae4 <DMA_List_Init+0x258>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d068      	beq.n	80019ec <DMA_List_Init+0x160>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a72      	ldr	r2, [pc, #456]	; (8001ae8 <DMA_List_Init+0x25c>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d063      	beq.n	80019ec <DMA_List_Init+0x160>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a70      	ldr	r2, [pc, #448]	; (8001aec <DMA_List_Init+0x260>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d05e      	beq.n	80019ec <DMA_List_Init+0x160>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a6f      	ldr	r2, [pc, #444]	; (8001af0 <DMA_List_Init+0x264>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d059      	beq.n	80019ec <DMA_List_Init+0x160>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a6d      	ldr	r2, [pc, #436]	; (8001af4 <DMA_List_Init+0x268>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d054      	beq.n	80019ec <DMA_List_Init+0x160>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a6c      	ldr	r2, [pc, #432]	; (8001af8 <DMA_List_Init+0x26c>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d04f      	beq.n	80019ec <DMA_List_Init+0x160>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a6a      	ldr	r2, [pc, #424]	; (8001afc <DMA_List_Init+0x270>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d04a      	beq.n	80019ec <DMA_List_Init+0x160>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a69      	ldr	r2, [pc, #420]	; (8001b00 <DMA_List_Init+0x274>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d045      	beq.n	80019ec <DMA_List_Init+0x160>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a67      	ldr	r2, [pc, #412]	; (8001b04 <DMA_List_Init+0x278>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d040      	beq.n	80019ec <DMA_List_Init+0x160>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a66      	ldr	r2, [pc, #408]	; (8001b08 <DMA_List_Init+0x27c>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d03b      	beq.n	80019ec <DMA_List_Init+0x160>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a64      	ldr	r2, [pc, #400]	; (8001b0c <DMA_List_Init+0x280>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d036      	beq.n	80019ec <DMA_List_Init+0x160>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a63      	ldr	r2, [pc, #396]	; (8001b10 <DMA_List_Init+0x284>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d031      	beq.n	80019ec <DMA_List_Init+0x160>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a61      	ldr	r2, [pc, #388]	; (8001b14 <DMA_List_Init+0x288>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d02c      	beq.n	80019ec <DMA_List_Init+0x160>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a60      	ldr	r2, [pc, #384]	; (8001b18 <DMA_List_Init+0x28c>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d027      	beq.n	80019ec <DMA_List_Init+0x160>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a5e      	ldr	r2, [pc, #376]	; (8001b1c <DMA_List_Init+0x290>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d022      	beq.n	80019ec <DMA_List_Init+0x160>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a5d      	ldr	r2, [pc, #372]	; (8001b20 <DMA_List_Init+0x294>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d01d      	beq.n	80019ec <DMA_List_Init+0x160>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a5b      	ldr	r2, [pc, #364]	; (8001b24 <DMA_List_Init+0x298>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d018      	beq.n	80019ec <DMA_List_Init+0x160>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a5a      	ldr	r2, [pc, #360]	; (8001b28 <DMA_List_Init+0x29c>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d013      	beq.n	80019ec <DMA_List_Init+0x160>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a58      	ldr	r2, [pc, #352]	; (8001b2c <DMA_List_Init+0x2a0>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d00e      	beq.n	80019ec <DMA_List_Init+0x160>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a57      	ldr	r2, [pc, #348]	; (8001b30 <DMA_List_Init+0x2a4>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d009      	beq.n	80019ec <DMA_List_Init+0x160>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a55      	ldr	r2, [pc, #340]	; (8001b34 <DMA_List_Init+0x2a8>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d004      	beq.n	80019ec <DMA_List_Init+0x160>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a54      	ldr	r2, [pc, #336]	; (8001b38 <DMA_List_Init+0x2ac>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d101      	bne.n	80019f0 <DMA_List_Init+0x164>
 80019ec:	2301      	movs	r3, #1
 80019ee:	e000      	b.n	80019f2 <DMA_List_Init+0x166>
 80019f0:	2300      	movs	r3, #0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d004      	beq.n	8001a00 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	f423 0143 	bic.w	r1, r3, #12779520	; 0xc30000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	430a      	orrs	r2, r1
 8001a12:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001a24:	645a      	str	r2, [r3, #68]	; 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2200      	movs	r2, #0
 8001a34:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	651a      	str	r2, [r3, #80]	; 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a36      	ldr	r2, [pc, #216]	; (8001b1c <DMA_List_Init+0x290>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d022      	beq.n	8001a8e <DMA_List_Init+0x202>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a34      	ldr	r2, [pc, #208]	; (8001b20 <DMA_List_Init+0x294>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d01d      	beq.n	8001a8e <DMA_List_Init+0x202>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a33      	ldr	r2, [pc, #204]	; (8001b24 <DMA_List_Init+0x298>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d018      	beq.n	8001a8e <DMA_List_Init+0x202>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a31      	ldr	r2, [pc, #196]	; (8001b28 <DMA_List_Init+0x29c>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d013      	beq.n	8001a8e <DMA_List_Init+0x202>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a30      	ldr	r2, [pc, #192]	; (8001b2c <DMA_List_Init+0x2a0>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d00e      	beq.n	8001a8e <DMA_List_Init+0x202>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a2e      	ldr	r2, [pc, #184]	; (8001b30 <DMA_List_Init+0x2a4>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d009      	beq.n	8001a8e <DMA_List_Init+0x202>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a2d      	ldr	r2, [pc, #180]	; (8001b34 <DMA_List_Init+0x2a8>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d004      	beq.n	8001a8e <DMA_List_Init+0x202>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a2b      	ldr	r2, [pc, #172]	; (8001b38 <DMA_List_Init+0x2ac>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d101      	bne.n	8001a92 <DMA_List_Init+0x206>
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e000      	b.n	8001a94 <DMA_List_Init+0x208>
 8001a92:	2300      	movs	r3, #0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d007      	beq.n	8001aa8 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2200      	movs	r2, #0
 8001aae:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8001ab0:	bf00      	nop
 8001ab2:	3714      	adds	r7, #20
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	40020050 	.word	0x40020050
 8001ac0:	50020050 	.word	0x50020050
 8001ac4:	400200d0 	.word	0x400200d0
 8001ac8:	500200d0 	.word	0x500200d0
 8001acc:	40020150 	.word	0x40020150
 8001ad0:	50020150 	.word	0x50020150
 8001ad4:	400201d0 	.word	0x400201d0
 8001ad8:	500201d0 	.word	0x500201d0
 8001adc:	40020250 	.word	0x40020250
 8001ae0:	50020250 	.word	0x50020250
 8001ae4:	400202d0 	.word	0x400202d0
 8001ae8:	500202d0 	.word	0x500202d0
 8001aec:	40020350 	.word	0x40020350
 8001af0:	50020350 	.word	0x50020350
 8001af4:	400203d0 	.word	0x400203d0
 8001af8:	500203d0 	.word	0x500203d0
 8001afc:	40020450 	.word	0x40020450
 8001b00:	50020450 	.word	0x50020450
 8001b04:	400204d0 	.word	0x400204d0
 8001b08:	500204d0 	.word	0x500204d0
 8001b0c:	40020550 	.word	0x40020550
 8001b10:	50020550 	.word	0x50020550
 8001b14:	400205d0 	.word	0x400205d0
 8001b18:	500205d0 	.word	0x500205d0
 8001b1c:	40020650 	.word	0x40020650
 8001b20:	50020650 	.word	0x50020650
 8001b24:	400206d0 	.word	0x400206d0
 8001b28:	500206d0 	.word	0x500206d0
 8001b2c:	40020750 	.word	0x40020750
 8001b30:	50020750 	.word	0x50020750
 8001b34:	400207d0 	.word	0x400207d0
 8001b38:	500207d0 	.word	0x500207d0

08001b3c <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8001b4e:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8001b54:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8001b5a:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8001b60:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0320 	and.w	r3, r3, #32
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d017      	beq.n	8001ba2 <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b7e:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b84:	3b01      	subs	r3, #1
 8001b86:	051b      	lsls	r3, r3, #20
 8001b88:	f003 737c 	and.w	r3, r3, #66060288	; 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8001b8c:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b92:	3b01      	subs	r3, #1
 8001b94:	011b      	lsls	r3, r3, #4
 8001b96:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8001b9a:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8001b9c:	431a      	orrs	r2, r3
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6859      	ldr	r1, [r3, #4]
 8001baa:	f240 237f 	movw	r3, #639	; 0x27f
 8001bae:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8001bb0:	431a      	orrs	r2, r3
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bbe:	d10c      	bne.n	8001bda <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0320 	and.w	r3, r3, #32
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d011      	beq.n	8001bf0 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	605a      	str	r2, [r3, #4]
 8001bd8:	e00a      	b.n	8001bf0 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001be2:	d105      	bne.n	8001bf0 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00f      	beq.n	8001c18 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c04:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c0a:	041b      	lsls	r3, r3, #16
 8001c0c:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8001c10:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8001c12:	431a      	orrs	r2, r3
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d04e      	beq.n	8001ccc <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c36:	3b01      	subs	r3, #1
 8001c38:	0419      	lsls	r1, r3, #16
 8001c3a:	4b67      	ldr	r3, [pc, #412]	; (8001dd8 <DMA_List_BuildNode+0x29c>)
 8001c3c:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	da06      	bge.n	8001c5a <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	e005      	b.n	8001c66 <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	da06      	bge.n	8001c7c <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	609a      	str	r2, [r3, #8]
 8001c7a:	e005      	b.n	8001c88 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	da06      	bge.n	8001c9e <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	e005      	b.n	8001caa <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	da06      	bge.n	8001cc0 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	609a      	str	r2, [r3, #8]
 8001cbe:	e005      	b.n	8001ccc <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d059      	beq.n	8001d9c <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	da09      	bge.n	8001d04 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cf4:	425b      	negs	r3, r3
 8001cf6:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	615a      	str	r2, [r3, #20]
 8001d02:	e005      	b.n	8001d10 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d08:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	da0d      	bge.n	8001d34 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d1c:	425b      	negs	r3, r3
 8001d1e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	695a      	ldr	r2, [r3, #20]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	0419      	lsls	r1, r3, #16
 8001d28:	4b2c      	ldr	r3, [pc, #176]	; (8001ddc <DMA_List_BuildNode+0x2a0>)
 8001d2a:	400b      	ands	r3, r1
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	615a      	str	r2, [r3, #20]
 8001d32:	e009      	b.n	8001d48 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d3c:	0419      	lsls	r1, r3, #16
 8001d3e:	4b27      	ldr	r3, [pc, #156]	; (8001ddc <DMA_List_BuildNode+0x2a0>)
 8001d40:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8001d42:	431a      	orrs	r2, r3
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	da08      	bge.n	8001d62 <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d54:	425b      	negs	r3, r3
 8001d56:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	619a      	str	r2, [r3, #24]
 8001d60:	e004      	b.n	8001d6c <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d66:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	da0b      	bge.n	8001d8c <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d78:	425b      	negs	r3, r3
 8001d7a:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8001d84:	431a      	orrs	r2, r3
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	619a      	str	r2, [r3, #24]
 8001d8a:	e007      	b.n	8001d9c <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d94:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8001d96:	431a      	orrs	r2, r3
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d006      	beq.n	8001dbe <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	f443 62e0 	orr.w	r2, r3, #1792	; 0x700
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8001dbc:	e005      	b.n	8001dca <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	f443 62a0 	orr.w	r2, r3, #1280	; 0x500
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	621a      	str	r2, [r3, #32]
}
 8001dca:	bf00      	nop
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	07ff0000 	.word	0x07ff0000
 8001ddc:	1fff0000 	.word	0x1fff0000

08001de0 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b087      	sub	sp, #28
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	431a      	orrs	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	0c1b      	lsrs	r3, r3, #16
 8001df8:	041b      	lsls	r3, r3, #16
 8001dfa:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d002      	beq.n	8001e0c <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	617b      	str	r3, [r7, #20]
 8001e0a:	e00a      	b.n	8001e22 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d002      	beq.n	8001e18 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	617b      	str	r3, [r7, #20]
 8001e16:	e004      	b.n	8001e22 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	0c1b      	lsrs	r3, r3, #16
 8001e26:	041b      	lsls	r3, r3, #16
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d001      	beq.n	8001e32 <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	371c      	adds	r7, #28
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b087      	sub	sp, #28
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d004      	beq.n	8001e60 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6a1b      	ldr	r3, [r3, #32]
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	617b      	str	r3, [r7, #20]
 8001e5e:	e00e      	b.n	8001e7e <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d004      	beq.n	8001e70 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	6a1b      	ldr	r3, [r3, #32]
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	617b      	str	r3, [r7, #20]
 8001e6e:	e006      	b.n	8001e7e <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a1b      	ldr	r3, [r3, #32]
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d007      	beq.n	8001e94 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d001      	beq.n	8001e94 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8001e90:	2302      	movs	r3, #2
 8001e92:	e00b      	b.n	8001eac <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d007      	beq.n	8001eaa <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	697a      	ldr	r2, [r7, #20]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d001      	beq.n	8001eaa <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e000      	b.n	8001eac <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	371c      	adds	r7, #28
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00c      	beq.n	8001eea <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d002      	beq.n	8001edc <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	4a0d      	ldr	r2, [pc, #52]	; (8001f10 <DMA_List_GetCLLRNodeInfo+0x58>)
 8001eda:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00f      	beq.n	8001f02 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2207      	movs	r2, #7
 8001ee6:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8001ee8:	e00b      	b.n	8001f02 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d002      	beq.n	8001ef6 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	4a08      	ldr	r2, [pc, #32]	; (8001f14 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8001ef4:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d002      	beq.n	8001f02 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2205      	movs	r2, #5
 8001f00:	601a      	str	r2, [r3, #0]
}
 8001f02:	bf00      	nop
 8001f04:	3714      	adds	r7, #20
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	fe010000 	.word	0xfe010000
 8001f14:	f8010000 	.word	0xf8010000

08001f18 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b089      	sub	sp, #36	; 0x24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d142      	bne.n	8001fc2 <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8001f3c:	e01d      	b.n	8001f7a <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d107      	bne.n	8001f54 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	461a      	mov	r2, r3
 8001f4a:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8001f4e:	4013      	ands	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
 8001f52:	e00f      	b.n	8001f74 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	0c1b      	lsrs	r3, r3, #16
 8001f5e:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4413      	add	r3, r2
 8001f64:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8001f6c:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8001f70:	4013      	ands	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	3301      	adds	r3, #1
 8001f78:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	69fa      	ldr	r2, [r7, #28]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d3dc      	bcc.n	8001f3e <DMA_List_FindNode+0x26>
 8001f84:	e029      	b.n	8001fda <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d107      	bne.n	8001f9c <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	461a      	mov	r2, r3
 8001f92:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8001f96:	4013      	ands	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
 8001f9a:	e00f      	b.n	8001fbc <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	0c1b      	lsrs	r3, r3, #16
 8001fa6:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4413      	add	r3, r2
 8001fac:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8001fb4:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	69fa      	ldr	r2, [r7, #28]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d206      	bcs.n	8001fda <DMA_List_FindNode+0xc2>
 8001fcc:	68ba      	ldr	r2, [r7, #8]
 8001fce:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d1d5      	bne.n	8001f86 <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d008      	beq.n	8001ff2 <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8001fe0:	68ba      	ldr	r2, [r7, #8]
 8001fe2:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d001      	beq.n	8001ff2 <DMA_List_FindNode+0xda>
    {
      return 1U;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e02b      	b.n	800204a <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	69fa      	ldr	r2, [r7, #28]
 8001ff6:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	0c1b      	lsrs	r3, r3, #16
 8001ffe:	041b      	lsls	r3, r3, #16
 8002000:	697a      	ldr	r2, [r7, #20]
 8002002:	431a      	orrs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	0c1b      	lsrs	r3, r3, #16
 800200e:	041b      	lsls	r3, r3, #16
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	431a      	orrs	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	461a      	mov	r2, r3
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d00f      	beq.n	8002048 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	461a      	mov	r2, r3
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002034:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8002038:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	0c1b      	lsrs	r3, r3, #16
 8002040:	041b      	lsls	r3, r3, #16
 8002042:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3724      	adds	r7, #36	; 0x24
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
	...

08002058 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002058:	b480      	push	{r7}
 800205a:	b089      	sub	sp, #36	; 0x24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8002062:	2300      	movs	r3, #0
 8002064:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800206a:	e1ba      	b.n	80023e2 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	2101      	movs	r1, #1
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	fa01 f303 	lsl.w	r3, r1, r3
 8002078:	4013      	ands	r3, r2
 800207a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2b00      	cmp	r3, #0
 8002084:	f000 81aa 	beq.w	80023dc <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a55      	ldr	r2, [pc, #340]	; (80021e0 <HAL_GPIO_Init+0x188>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d15d      	bne.n	800214c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8002096:	2201      	movs	r2, #1
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	43db      	mvns	r3, r3
 80020a0:	69fa      	ldr	r2, [r7, #28]
 80020a2:	4013      	ands	r3, r2
 80020a4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f003 0201 	and.w	r2, r3, #1
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	69fa      	ldr	r2, [r7, #28]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69fa      	ldr	r2, [r7, #28]
 80020be:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80020c0:	4a48      	ldr	r2, [pc, #288]	; (80021e4 <HAL_GPIO_Init+0x18c>)
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80020c8:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80020ca:	4a46      	ldr	r2, [pc, #280]	; (80021e4 <HAL_GPIO_Init+0x18c>)
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	4413      	add	r3, r2
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	08da      	lsrs	r2, r3, #3
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	3208      	adds	r2, #8
 80020de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020e2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	220f      	movs	r2, #15
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43db      	mvns	r3, r3
 80020f4:	69fa      	ldr	r2, [r7, #28]
 80020f6:	4013      	ands	r3, r2
 80020f8:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	f003 0307 	and.w	r3, r3, #7
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	220b      	movs	r2, #11
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	69fa      	ldr	r2, [r7, #28]
 800210a:	4313      	orrs	r3, r2
 800210c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	08da      	lsrs	r2, r3, #3
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	3208      	adds	r2, #8
 8002116:	69f9      	ldr	r1, [r7, #28]
 8002118:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	2203      	movs	r2, #3
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	69fa      	ldr	r2, [r7, #28]
 8002130:	4013      	ands	r3, r2
 8002132:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	2202      	movs	r2, #2
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	69fa      	ldr	r2, [r7, #28]
 8002140:	4313      	orrs	r3, r2
 8002142:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	69fa      	ldr	r2, [r7, #28]
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	e067      	b.n	800221c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	2b02      	cmp	r3, #2
 8002152:	d003      	beq.n	800215c <HAL_GPIO_Init+0x104>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	2b12      	cmp	r3, #18
 800215a:	d145      	bne.n	80021e8 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	08da      	lsrs	r2, r3, #3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3208      	adds	r2, #8
 8002164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002168:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	220f      	movs	r2, #15
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	69fa      	ldr	r2, [r7, #28]
 800217c:	4013      	ands	r3, r2
 800217e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	f003 020f 	and.w	r2, r3, #15
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	69fa      	ldr	r2, [r7, #28]
 8002196:	4313      	orrs	r3, r2
 8002198:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	08da      	lsrs	r2, r3, #3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	3208      	adds	r2, #8
 80021a2:	69f9      	ldr	r1, [r7, #28]
 80021a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	2203      	movs	r2, #3
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	69fa      	ldr	r2, [r7, #28]
 80021bc:	4013      	ands	r3, r2
 80021be:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f003 0203 	and.w	r2, r3, #3
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	69fa      	ldr	r2, [r7, #28]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	69fa      	ldr	r2, [r7, #28]
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	e01e      	b.n	800221c <HAL_GPIO_Init+0x1c4>
 80021de:	bf00      	nop
 80021e0:	46020000 	.word	0x46020000
 80021e4:	080056ac 	.word	0x080056ac
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	2203      	movs	r2, #3
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	69fa      	ldr	r2, [r7, #28]
 80021fc:	4013      	ands	r3, r2
 80021fe:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 0203 	and.w	r2, r3, #3
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	69fa      	ldr	r2, [r7, #28]
 8002212:	4313      	orrs	r3, r2
 8002214:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	69fa      	ldr	r2, [r7, #28]
 800221a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d00b      	beq.n	800223c <HAL_GPIO_Init+0x1e4>
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	2b02      	cmp	r3, #2
 800222a:	d007      	beq.n	800223c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002230:	2b11      	cmp	r3, #17
 8002232:	d003      	beq.n	800223c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	2b12      	cmp	r3, #18
 800223a:	d130      	bne.n	800229e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	2203      	movs	r2, #3
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	43db      	mvns	r3, r3
 800224e:	69fa      	ldr	r2, [r7, #28]
 8002250:	4013      	ands	r3, r2
 8002252:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	68da      	ldr	r2, [r3, #12]
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	69fa      	ldr	r2, [r7, #28]
 8002262:	4313      	orrs	r3, r2
 8002264:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	69fa      	ldr	r2, [r7, #28]
 800226a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8002272:	2201      	movs	r2, #1
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	43db      	mvns	r3, r3
 800227c:	69fa      	ldr	r2, [r7, #28]
 800227e:	4013      	ands	r3, r2
 8002280:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	091b      	lsrs	r3, r3, #4
 8002288:	f003 0201 	and.w	r2, r3, #1
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	69fa      	ldr	r2, [r7, #28]
 8002294:	4313      	orrs	r3, r2
 8002296:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	69fa      	ldr	r2, [r7, #28]
 800229c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b03      	cmp	r3, #3
 80022a4:	d017      	beq.n	80022d6 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	2203      	movs	r2, #3
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	43db      	mvns	r3, r3
 80022b8:	69fa      	ldr	r2, [r7, #28]
 80022ba:	4013      	ands	r3, r2
 80022bc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	689a      	ldr	r2, [r3, #8]
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	69fa      	ldr	r2, [r7, #28]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	69fa      	ldr	r2, [r7, #28]
 80022d4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d07c      	beq.n	80023dc <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80022e2:	4a47      	ldr	r2, [pc, #284]	; (8002400 <HAL_GPIO_Init+0x3a8>)
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	089b      	lsrs	r3, r3, #2
 80022e8:	3318      	adds	r3, #24
 80022ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ee:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	f003 0303 	and.w	r3, r3, #3
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	220f      	movs	r2, #15
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43db      	mvns	r3, r3
 8002300:	69fa      	ldr	r2, [r7, #28]
 8002302:	4013      	ands	r3, r2
 8002304:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	0a9a      	lsrs	r2, r3, #10
 800230a:	4b3e      	ldr	r3, [pc, #248]	; (8002404 <HAL_GPIO_Init+0x3ac>)
 800230c:	4013      	ands	r3, r2
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	f002 0203 	and.w	r2, r2, #3
 8002314:	00d2      	lsls	r2, r2, #3
 8002316:	4093      	lsls	r3, r2
 8002318:	69fa      	ldr	r2, [r7, #28]
 800231a:	4313      	orrs	r3, r2
 800231c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800231e:	4938      	ldr	r1, [pc, #224]	; (8002400 <HAL_GPIO_Init+0x3a8>)
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	089b      	lsrs	r3, r3, #2
 8002324:	3318      	adds	r3, #24
 8002326:	69fa      	ldr	r2, [r7, #28]
 8002328:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800232c:	4b34      	ldr	r3, [pc, #208]	; (8002400 <HAL_GPIO_Init+0x3a8>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	43db      	mvns	r3, r3
 8002336:	69fa      	ldr	r2, [r7, #28]
 8002338:	4013      	ands	r3, r2
 800233a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d003      	beq.n	8002350 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8002348:	69fa      	ldr	r2, [r7, #28]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	4313      	orrs	r3, r2
 800234e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8002350:	4a2b      	ldr	r2, [pc, #172]	; (8002400 <HAL_GPIO_Init+0x3a8>)
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002356:	4b2a      	ldr	r3, [pc, #168]	; (8002400 <HAL_GPIO_Init+0x3a8>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	43db      	mvns	r3, r3
 8002360:	69fa      	ldr	r2, [r7, #28]
 8002362:	4013      	ands	r3, r2
 8002364:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8002372:	69fa      	ldr	r2, [r7, #28]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	4313      	orrs	r3, r2
 8002378:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800237a:	4a21      	ldr	r2, [pc, #132]	; (8002400 <HAL_GPIO_Init+0x3a8>)
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002380:	4b1f      	ldr	r3, [pc, #124]	; (8002400 <HAL_GPIO_Init+0x3a8>)
 8002382:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002386:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	43db      	mvns	r3, r3
 800238c:	69fa      	ldr	r2, [r7, #28]
 800238e:	4013      	ands	r3, r2
 8002390:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d003      	beq.n	80023a6 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800239e:	69fa      	ldr	r2, [r7, #28]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80023a6:	4a16      	ldr	r2, [pc, #88]	; (8002400 <HAL_GPIO_Init+0x3a8>)
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 80023ae:	4b14      	ldr	r3, [pc, #80]	; (8002400 <HAL_GPIO_Init+0x3a8>)
 80023b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023b4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	43db      	mvns	r3, r3
 80023ba:	69fa      	ldr	r2, [r7, #28]
 80023bc:	4013      	ands	r3, r2
 80023be:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d003      	beq.n	80023d4 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80023cc:	69fa      	ldr	r2, [r7, #28]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80023d4:	4a0a      	ldr	r2, [pc, #40]	; (8002400 <HAL_GPIO_Init+0x3a8>)
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	3301      	adds	r3, #1
 80023e0:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	fa22 f303 	lsr.w	r3, r2, r3
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f47f ae3d 	bne.w	800206c <HAL_GPIO_Init+0x14>
  }
}
 80023f2:	bf00      	nop
 80023f4:	bf00      	nop
 80023f6:	3724      	adds	r7, #36	; 0x24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	46022000 	.word	0x46022000
 8002404:	002f7f7f 	.word	0x002f7f7f

08002408 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	807b      	strh	r3, [r7, #2]
 8002414:	4613      	mov	r3, r2
 8002416:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002418:	787b      	ldrb	r3, [r7, #1]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800241e:	887a      	ldrh	r2, [r7, #2]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8002424:	e002      	b.n	800242c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8002426:	887a      	ldrh	r2, [r7, #2]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	460b      	mov	r3, r1
 8002442:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	695b      	ldr	r3, [r3, #20]
 8002448:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800244a:	887a      	ldrh	r2, [r7, #2]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	4013      	ands	r3, r2
 8002450:	041a      	lsls	r2, r3, #16
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	43d9      	mvns	r1, r3
 8002456:	887b      	ldrh	r3, [r7, #2]
 8002458:	400b      	ands	r3, r1
 800245a:	431a      	orrs	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	619a      	str	r2, [r3, #24]
}
 8002460:	bf00      	nop
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002474:	2300      	movs	r3, #0
 8002476:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002478:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	2b00      	cmp	r3, #0
 8002482:	d002      	beq.n	800248a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	73fb      	strb	r3, [r7, #15]
 8002488:	e007      	b.n	800249a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800248a:	4b07      	ldr	r3, [pc, #28]	; (80024a8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f023 0204 	bic.w	r2, r3, #4
 8002492:	4905      	ldr	r1, [pc, #20]	; (80024a8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4313      	orrs	r3, r2
 8002498:	600b      	str	r3, [r1, #0]
  }

  return status;
 800249a:	7bfb      	ldrb	r3, [r7, #15]
}
 800249c:	4618      	mov	r0, r3
 800249e:	3714      	adds	r7, #20
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	40030400 	.word	0x40030400

080024ac <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80024b0:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <HAL_ICACHE_Enable+0x1c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a04      	ldr	r2, [pc, #16]	; (80024c8 <HAL_ICACHE_Enable+0x1c>)
 80024b6:	f043 0301 	orr.w	r3, r3, #1
 80024ba:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	40030400 	.word	0x40030400

080024cc <HAL_MDF_Init>:
  *         in the MDF_InitTypeDef structure and initialize the associated handle.
  * @param  hmdf MDF handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_MDF_Init(MDF_HandleTypeDef *hmdf)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024d4:	2300      	movs	r3, #0
 80024d6:	73fb      	strb	r3, [r7, #15]

  /* Check MDF handle */
  if (hmdf == NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d102      	bne.n	80024e4 <HAL_MDF_Init+0x18>
  {
    status = HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	73fb      	strb	r3, [r7, #15]
 80024e2:	e141      	b.n	8002768 <HAL_MDF_Init+0x29c>
    assert_param(IS_MDF_ALL_INSTANCE(hmdf->Instance));
    assert_param(IS_MDF_FILTER_BITSTREAM(hmdf->Init.FilterBistream));
    assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.SerialInterface.Activation));

    /* Check that instance has not been already initialized */
    if (a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] != NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f000 fbc1 	bl	8002c70 <MDF_GetHandleNumberFromInstance>
 80024ee:	4603      	mov	r3, r0
 80024f0:	4a86      	ldr	r2, [pc, #536]	; (800270c <HAL_MDF_Init+0x240>)
 80024f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d002      	beq.n	8002500 <HAL_MDF_Init+0x34>
    {
      status = HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	73fb      	strb	r3, [r7, #15]
 80024fe:	e133      	b.n	8002768 <HAL_MDF_Init+0x29c>
        hmdf->MspInitCallback = HAL_MDF_MspInit;
      }
      hmdf->MspInitCallback(hmdf);
#else /* USE_HAL_MDF_REGISTER_CALLBACKS */
      /* Call MDF MSP init function */
      HAL_MDF_MspInit(hmdf);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f7fe f92d 	bl	8000760 <HAL_MDF_MspInit>
#endif /* USE_HAL_MDF_REGISTER_CALLBACKS */

      /* Configure common parameters only for first MDF or ADF instance */
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 8002506:	4b82      	ldr	r3, [pc, #520]	; (8002710 <HAL_MDF_Init+0x244>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d11d      	bne.n	800254a <HAL_MDF_Init+0x7e>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a80      	ldr	r2, [pc, #512]	; (8002714 <HAL_MDF_Init+0x248>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d023      	beq.n	8002560 <HAL_MDF_Init+0x94>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a7e      	ldr	r2, [pc, #504]	; (8002718 <HAL_MDF_Init+0x24c>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d01e      	beq.n	8002560 <HAL_MDF_Init+0x94>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a7d      	ldr	r2, [pc, #500]	; (800271c <HAL_MDF_Init+0x250>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d019      	beq.n	8002560 <HAL_MDF_Init+0x94>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a7b      	ldr	r2, [pc, #492]	; (8002720 <HAL_MDF_Init+0x254>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d014      	beq.n	8002560 <HAL_MDF_Init+0x94>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a7a      	ldr	r2, [pc, #488]	; (8002724 <HAL_MDF_Init+0x258>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d00f      	beq.n	8002560 <HAL_MDF_Init+0x94>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a78      	ldr	r2, [pc, #480]	; (8002728 <HAL_MDF_Init+0x25c>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d00a      	beq.n	8002560 <HAL_MDF_Init+0x94>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 800254a:	4b78      	ldr	r3, [pc, #480]	; (800272c <HAL_MDF_Init+0x260>)
 800254c:	681b      	ldr	r3, [r3, #0]
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 800254e:	2b00      	cmp	r3, #0
 8002550:	f040 8090 	bne.w	8002674 <HAL_MDF_Init+0x1a8>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a75      	ldr	r2, [pc, #468]	; (8002730 <HAL_MDF_Init+0x264>)
 800255a:	4293      	cmp	r3, r2
 800255c:	f040 808a 	bne.w	8002674 <HAL_MDF_Init+0x1a8>
      {
        MDF_TypeDef *mdfBase;
        /* Get MDF base according instance */
        mdfBase = (IS_ADF_INSTANCE(hmdf->Instance)) ? ADF1 : MDF1;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a72      	ldr	r2, [pc, #456]	; (8002730 <HAL_MDF_Init+0x264>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d101      	bne.n	800256e <HAL_MDF_Init+0xa2>
 800256a:	4b72      	ldr	r3, [pc, #456]	; (8002734 <HAL_MDF_Init+0x268>)
 800256c:	e000      	b.n	8002570 <HAL_MDF_Init+0xa4>
 800256e:	4b72      	ldr	r3, [pc, #456]	; (8002738 <HAL_MDF_Init+0x26c>)
 8002570:	60bb      	str	r3, [r7, #8]

        /* Check clock generator status */
        if ((mdfBase->CKGCR & MDF_CKGCR_CCKACTIVE) != 0U)
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	da02      	bge.n	8002580 <HAL_MDF_Init+0xb4>
        {
          status = HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	73fb      	strb	r3, [r7, #15]
 800257e:	e079      	b.n	8002674 <HAL_MDF_Init+0x1a8>
        }
        else
        {
          /* Configure number of interleaved filters for MDF instance */
          if (IS_MDF_INSTANCE(hmdf->Instance))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a63      	ldr	r2, [pc, #396]	; (8002714 <HAL_MDF_Init+0x248>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d018      	beq.n	80025bc <HAL_MDF_Init+0xf0>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a62      	ldr	r2, [pc, #392]	; (8002718 <HAL_MDF_Init+0x24c>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d013      	beq.n	80025bc <HAL_MDF_Init+0xf0>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a60      	ldr	r2, [pc, #384]	; (800271c <HAL_MDF_Init+0x250>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d00e      	beq.n	80025bc <HAL_MDF_Init+0xf0>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a5f      	ldr	r2, [pc, #380]	; (8002720 <HAL_MDF_Init+0x254>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d009      	beq.n	80025bc <HAL_MDF_Init+0xf0>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a5d      	ldr	r2, [pc, #372]	; (8002724 <HAL_MDF_Init+0x258>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d004      	beq.n	80025bc <HAL_MDF_Init+0xf0>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a5c      	ldr	r2, [pc, #368]	; (8002728 <HAL_MDF_Init+0x25c>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d10d      	bne.n	80025d8 <HAL_MDF_Init+0x10c>
          {
            assert_param(IS_MDF_INTERLEAVED_FILTERS(hmdf->Init.CommonParam.InterleavedFilters));
            mdfBase->GCR &= ~(MDF_GCR_ILVNB);
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	601a      	str	r2, [r3, #0]
            mdfBase->GCR |= (hmdf->Init.CommonParam.InterleavedFilters << MDF_GCR_ILVNB_Pos);
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	011b      	lsls	r3, r3, #4
 80025d2:	431a      	orrs	r2, r3
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	601a      	str	r2, [r3, #0]

          /* Configure processing clock divider, output clock divider,
             output clock pins and output clock generation trigger */
          assert_param(IS_MDF_PROC_CLOCK_DIVIDER(hmdf->Init.CommonParam.ProcClockDivider));
          assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Activation));
          mdfBase->CKGCR = 0U;
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	2200      	movs	r2, #0
 80025dc:	605a      	str	r2, [r3, #4]
          mdfBase->CKGCR |= ((hmdf->Init.CommonParam.ProcClockDivider - 1U) << MDF_CKGCR_PROCDIV_Pos);
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	3b01      	subs	r3, #1
 80025e8:	061b      	lsls	r3, r3, #24
 80025ea:	431a      	orrs	r2, r3
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	605a      	str	r2, [r3, #4]
          if (hmdf->Init.CommonParam.OutputClock.Activation == ENABLE)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	7b1b      	ldrb	r3, [r3, #12]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d137      	bne.n	8002668 <HAL_MDF_Init+0x19c>
          {
            assert_param(IS_MDF_OUTPUT_CLOCK_PINS(hmdf->Init.CommonParam.OutputClock.Pins));
            assert_param(IS_MDF_OUTPUT_CLOCK_DIVIDER(hmdf->Init.CommonParam.OutputClock.Divider));
            assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Trigger.Activation));
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	3b01      	subs	r3, #1
 8002602:	0419      	lsls	r1, r3, #16
                               hmdf->Init.CommonParam.OutputClock.Pins |
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	691b      	ldr	r3, [r3, #16]
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8002608:	4319      	orrs	r1, r3
                               (hmdf->Init.CommonParam.OutputClock.Pins >> 4U));
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	091b      	lsrs	r3, r3, #4
                               hmdf->Init.CommonParam.OutputClock.Pins |
 8002610:	430b      	orrs	r3, r1
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8002612:	431a      	orrs	r2, r3
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	605a      	str	r2, [r3, #4]
            if (hmdf->Init.CommonParam.OutputClock.Trigger.Activation == ENABLE)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	7e1b      	ldrb	r3, [r3, #24]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d123      	bne.n	8002668 <HAL_MDF_Init+0x19c>
            {
              if (IS_MDF_INSTANCE(hmdf->Instance))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a3b      	ldr	r2, [pc, #236]	; (8002714 <HAL_MDF_Init+0x248>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d012      	beq.n	8002650 <HAL_MDF_Init+0x184>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a3a      	ldr	r2, [pc, #232]	; (8002718 <HAL_MDF_Init+0x24c>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d00d      	beq.n	8002650 <HAL_MDF_Init+0x184>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a38      	ldr	r2, [pc, #224]	; (800271c <HAL_MDF_Init+0x250>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d008      	beq.n	8002650 <HAL_MDF_Init+0x184>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a37      	ldr	r2, [pc, #220]	; (8002720 <HAL_MDF_Init+0x254>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d003      	beq.n	8002650 <HAL_MDF_Init+0x184>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a35      	ldr	r2, [pc, #212]	; (8002724 <HAL_MDF_Init+0x258>)
 800264e:	4293      	cmp	r3, r2
              else /* ADF instance */
              {
                assert_param(IS_ADF_OUTPUT_CLOCK_TRIGGER_SOURCE(hmdf->Init.CommonParam.OutputClock.Trigger.Source));
              }
              assert_param(IS_MDF_OUTPUT_CLOCK_TRIGGER_EDGE(hmdf->Init.CommonParam.OutputClock.Trigger.Edge));
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	685a      	ldr	r2, [r3, #4]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	69d9      	ldr	r1, [r3, #28]
                                 hmdf->Init.CommonParam.OutputClock.Trigger.Edge |
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a1b      	ldr	r3, [r3, #32]
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 800265c:	430b      	orrs	r3, r1
 800265e:	4313      	orrs	r3, r2
 8002660:	f043 0210 	orr.w	r2, r3, #16
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	605a      	str	r2, [r3, #4]
                                 MDF_CKGCR_CKGMOD);
            }
          }

          /* Activate clock generator */
          mdfBase->CKGCR |= MDF_CKGCR_CKDEN;
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f043 0201 	orr.w	r2, r3, #1
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	605a      	str	r2, [r3, #4]
        }
      }

      /* Configure serial interface */
      if ((status == HAL_OK) && (hmdf->Init.SerialInterface.Activation == ENABLE))
 8002674:	7bfb      	ldrb	r3, [r7, #15]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d128      	bne.n	80026cc <HAL_MDF_Init+0x200>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002680:	2b01      	cmp	r3, #1
 8002682:	d123      	bne.n	80026cc <HAL_MDF_Init+0x200>
      {
        /* Check serial interface status */
        if ((hmdf->Instance->SITFCR & MDF_SITFCR_SITFACTIVE) != 0U)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2b00      	cmp	r3, #0
 800268c:	da02      	bge.n	8002694 <HAL_MDF_Init+0x1c8>
        {
          status = HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	73fb      	strb	r3, [r7, #15]
 8002692:	e01b      	b.n	80026cc <HAL_MDF_Init+0x200>
        {
          /* Configure mode, clock source and threshold */
          assert_param(IS_MDF_SITF_MODE(hmdf->Init.SerialInterface.Mode));
          assert_param(IS_MDF_SITF_CLOCK_SOURCE(hmdf->Init.SerialInterface.ClockSource));
          assert_param(IS_MDF_SITF_THRESHOLD(hmdf->Init.SerialInterface.Threshold));
          hmdf->Instance->SITFCR = 0U;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6819      	ldr	r1, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	021a      	lsls	r2, r3, #8
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 80026ac:	431a      	orrs	r2, r3
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b2:	431a      	orrs	r2, r3
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	430a      	orrs	r2, r1
 80026ba:	601a      	str	r2, [r3, #0]

          /* Activate serial interface */
          hmdf->Instance->SITFCR |= MDF_SITFCR_SITFEN;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f042 0201 	orr.w	r2, r2, #1
 80026ca:	601a      	str	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 80026cc:	7bfb      	ldrb	r3, [r7, #15]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d14a      	bne.n	8002768 <HAL_MDF_Init+0x29c>
      {
        /* Configure filter bitstream */
        hmdf->Instance->BSMXCR &= ~(MDF_BSMXCR_BSSEL);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 021f 	bic.w	r2, r2, #31
 80026e0:	605a      	str	r2, [r3, #4]
        hmdf->Instance->BSMXCR |= hmdf->Init.FilterBistream;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6859      	ldr	r1, [r3, #4]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	430a      	orrs	r2, r1
 80026f2:	605a      	str	r2, [r3, #4]

        /* Update instance counter and table */
        if (IS_ADF_INSTANCE(hmdf->Instance))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a0d      	ldr	r2, [pc, #52]	; (8002730 <HAL_MDF_Init+0x264>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d11e      	bne.n	800273c <HAL_MDF_Init+0x270>
        {
          v_adf1InstanceCounter++;
 80026fe:	4b0b      	ldr	r3, [pc, #44]	; (800272c <HAL_MDF_Init+0x260>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	3301      	adds	r3, #1
 8002704:	4a09      	ldr	r2, [pc, #36]	; (800272c <HAL_MDF_Init+0x260>)
 8002706:	6013      	str	r3, [r2, #0]
 8002708:	e01d      	b.n	8002746 <HAL_MDF_Init+0x27a>
 800270a:	bf00      	nop
 800270c:	200011bc 	.word	0x200011bc
 8002710:	200011b4 	.word	0x200011b4
 8002714:	40025080 	.word	0x40025080
 8002718:	40025100 	.word	0x40025100
 800271c:	40025180 	.word	0x40025180
 8002720:	40025200 	.word	0x40025200
 8002724:	40025280 	.word	0x40025280
 8002728:	40025300 	.word	0x40025300
 800272c:	200011b8 	.word	0x200011b8
 8002730:	46024080 	.word	0x46024080
 8002734:	46024000 	.word	0x46024000
 8002738:	40025000 	.word	0x40025000
        }
        else /* MDF instance */
        {
          v_mdf1InstanceCounter++;
 800273c:	4b0d      	ldr	r3, [pc, #52]	; (8002774 <HAL_MDF_Init+0x2a8>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	3301      	adds	r3, #1
 8002742:	4a0c      	ldr	r2, [pc, #48]	; (8002774 <HAL_MDF_Init+0x2a8>)
 8002744:	6013      	str	r3, [r2, #0]
        }
        a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] = hmdf;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f000 fa90 	bl	8002c70 <MDF_GetHandleNumberFromInstance>
 8002750:	4602      	mov	r2, r0
 8002752:	4909      	ldr	r1, [pc, #36]	; (8002778 <HAL_MDF_Init+0x2ac>)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

        /* Update error code and state */
        hmdf->ErrorCode = MDF_ERROR_NONE;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	641a      	str	r2, [r3, #64]	; 0x40
        hmdf->State     = HAL_MDF_STATE_READY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      }
    }
  }

  /* Return function status */
  return status;
 8002768:	7bfb      	ldrb	r3, [r7, #15]
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	200011b4 	.word	0x200011b4
 8002778:	200011bc 	.word	0x200011bc

0800277c <HAL_MDF_AcqStart_DMA>:
  * @param  pDmaConfig DMA configuration parameters.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_MDF_AcqStart_DMA(MDF_HandleTypeDef *hmdf, const MDF_FilterConfigTypeDef *pFilterConfig,
                                       const MDF_DmaConfigTypeDef *pDmaConfig)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002788:	2300      	movs	r3, #0
 800278a:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  if ((pFilterConfig == NULL) || (pDmaConfig == NULL))
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d002      	beq.n	8002798 <HAL_MDF_AcqStart_DMA+0x1c>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d102      	bne.n	800279e <HAL_MDF_AcqStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	75fb      	strb	r3, [r7, #23]
 800279c:	e0fd      	b.n	800299a <HAL_MDF_AcqStart_DMA+0x21e>
    }
    else
    {
      assert_param(IS_MDF_ACQUISITION_MODE(pFilterConfig->AcquisitionMode));
    }
    if ((IS_ADF_INSTANCE(hmdf->Instance)) && (pFilterConfig->SoundActivity.Activation == ENABLE) &&
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a80      	ldr	r2, [pc, #512]	; (80029a4 <HAL_MDF_AcqStart_DMA+0x228>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d113      	bne.n	80027d0 <HAL_MDF_AcqStart_DMA+0x54>
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d10e      	bne.n	80027d0 <HAL_MDF_AcqStart_DMA+0x54>
        ((pFilterConfig->AcquisitionMode == MDF_MODE_ASYNC_SINGLE) ||
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    if ((IS_ADF_INSTANCE(hmdf->Instance)) && (pFilterConfig->SoundActivity.Activation == ENABLE) &&
 80027b6:	2b10      	cmp	r3, #16
 80027b8:	d007      	beq.n	80027ca <HAL_MDF_AcqStart_DMA+0x4e>
         (pFilterConfig->AcquisitionMode == MDF_MODE_SYNC_SINGLE) ||
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
        ((pFilterConfig->AcquisitionMode == MDF_MODE_ASYNC_SINGLE) ||
 80027be:	2b30      	cmp	r3, #48	; 0x30
 80027c0:	d003      	beq.n	80027ca <HAL_MDF_AcqStart_DMA+0x4e>
         (pFilterConfig->AcquisitionMode == MDF_MODE_WINDOW_CONT)))
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
         (pFilterConfig->AcquisitionMode == MDF_MODE_SYNC_SINGLE) ||
 80027c6:	2b40      	cmp	r3, #64	; 0x40
 80027c8:	d102      	bne.n	80027d0 <HAL_MDF_AcqStart_DMA+0x54>
    {
      status = HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	75fb      	strb	r3, [r7, #23]
 80027ce:	e023      	b.n	8002818 <HAL_MDF_AcqStart_DMA+0x9c>
    }
    else if (pFilterConfig->AcquisitionMode == MDF_MODE_SYNC_SNAPSHOT)
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027d4:	2b50      	cmp	r3, #80	; 0x50
 80027d6:	d102      	bne.n	80027de <HAL_MDF_AcqStart_DMA+0x62>
    {
      status = HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	75fb      	strb	r3, [r7, #23]
 80027dc:	e01c      	b.n	8002818 <HAL_MDF_AcqStart_DMA+0x9c>
    }
    /* Check state */
    else if (hmdf->State != HAL_MDF_STATE_READY)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d002      	beq.n	80027f0 <HAL_MDF_AcqStart_DMA+0x74>
    {
      status = HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	75fb      	strb	r3, [r7, #23]
 80027ee:	e013      	b.n	8002818 <HAL_MDF_AcqStart_DMA+0x9c>
    }
    /* Check filter status */
    else if ((hmdf->Instance->DFLTCR & MDF_DFLTCR_DFLTACTIVE) != 0U)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	da02      	bge.n	8002800 <HAL_MDF_AcqStart_DMA+0x84>
    {
      status = HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	75fb      	strb	r3, [r7, #23]
 80027fe:	e00b      	b.n	8002818 <HAL_MDF_AcqStart_DMA+0x9c>
    }
    else
    {
      /* For ADF instance, check SAD status */
      if (IS_ADF_INSTANCE(hmdf->Instance))
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a67      	ldr	r2, [pc, #412]	; (80029a4 <HAL_MDF_AcqStart_DMA+0x228>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d106      	bne.n	8002818 <HAL_MDF_AcqStart_DMA+0x9c>
      {
        if ((hmdf->Instance->SADCR & MDF_SADCR_SADACTIVE) != 0U)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002810:	2b00      	cmp	r3, #0
 8002812:	da01      	bge.n	8002818 <HAL_MDF_AcqStart_DMA+0x9c>
        {
          status = HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	75fb      	strb	r3, [r7, #23]
        }
      }
    }

    if (status == HAL_OK)
 8002818:	7dfb      	ldrb	r3, [r7, #23]
 800281a:	2b00      	cmp	r3, #0
 800281c:	f040 80bd 	bne.w	800299a <HAL_MDF_AcqStart_DMA+0x21e>
    {
      /* For MDF instance, check OLD status and main filter order */
      assert_param(IS_MDF_CIC_MODE(pFilterConfig->CicMode));
      if (IS_MDF_INSTANCE(hmdf->Instance))
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a60      	ldr	r2, [pc, #384]	; (80029a8 <HAL_MDF_AcqStart_DMA+0x22c>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d018      	beq.n	800285c <HAL_MDF_AcqStart_DMA+0xe0>
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a5f      	ldr	r2, [pc, #380]	; (80029ac <HAL_MDF_AcqStart_DMA+0x230>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d013      	beq.n	800285c <HAL_MDF_AcqStart_DMA+0xe0>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a5d      	ldr	r2, [pc, #372]	; (80029b0 <HAL_MDF_AcqStart_DMA+0x234>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d00e      	beq.n	800285c <HAL_MDF_AcqStart_DMA+0xe0>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a5c      	ldr	r2, [pc, #368]	; (80029b4 <HAL_MDF_AcqStart_DMA+0x238>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d009      	beq.n	800285c <HAL_MDF_AcqStart_DMA+0xe0>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a5a      	ldr	r2, [pc, #360]	; (80029b8 <HAL_MDF_AcqStart_DMA+0x23c>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d004      	beq.n	800285c <HAL_MDF_AcqStart_DMA+0xe0>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a59      	ldr	r2, [pc, #356]	; (80029bc <HAL_MDF_AcqStart_DMA+0x240>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d10a      	bne.n	8002872 <HAL_MDF_AcqStart_DMA+0xf6>
      {
        if (((hmdf->Instance->OLDCR & MDF_OLDCR_OLDACTIVE) != 0U) && (pFilterConfig->CicMode >= MDF_ONE_FILTER_SINC4))
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	2b00      	cmp	r3, #0
 8002864:	da05      	bge.n	8002872 <HAL_MDF_AcqStart_DMA+0xf6>
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	2b3f      	cmp	r3, #63	; 0x3f
 800286c:	d901      	bls.n	8002872 <HAL_MDF_AcqStart_DMA+0xf6>
        {
          status = HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	75fb      	strb	r3, [r7, #23]
        }
      }

      if (status == HAL_OK)
 8002872:	7dfb      	ldrb	r3, [r7, #23]
 8002874:	2b00      	cmp	r3, #0
 8002876:	f040 8090 	bne.w	800299a <HAL_MDF_AcqStart_DMA+0x21e>
      {
        uint32_t SrcAddress;

        if (pFilterConfig->ReshapeFilter.Activation == ENABLE)
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	7e1b      	ldrb	r3, [r3, #24]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d107      	bne.n	8002892 <HAL_MDF_AcqStart_DMA+0x116>
        {
          /* Enable reshape filter overrun interrupt */
          hmdf->Instance->DFLTIER |= MDF_DFLTIER_RFOVRIE;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002890:	62da      	str	r2, [r3, #44]	; 0x2c
        }

        /* Enable saturation interrupt */
        hmdf->Instance->DFLTIER |= MDF_DFLTIER_SATIE;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028a0:	62da      	str	r2, [r3, #44]	; 0x2c

        if ((IS_ADF_INSTANCE(hmdf->Instance)) && (pFilterConfig->SoundActivity.Activation == ENABLE))
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a3f      	ldr	r2, [pc, #252]	; (80029a4 <HAL_MDF_AcqStart_DMA+0x228>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d115      	bne.n	80028d8 <HAL_MDF_AcqStart_DMA+0x15c>
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d110      	bne.n	80028d8 <HAL_MDF_AcqStart_DMA+0x15c>
        {
          /* Enable sound level value ready and sound activity detection interrupts */
          assert_param(IS_FUNCTIONAL_STATE(pFilterConfig->SoundActivity.SoundLevelInterrupt));
          hmdf->Instance->DFLTIER |= (pFilterConfig->SoundActivity.SoundLevelInterrupt == ENABLE) ?
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
                                     (MDF_DFLTIER_SDLVLIE | MDF_DFLTIER_SDDETIE) :
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d102      	bne.n	80028cc <HAL_MDF_AcqStart_DMA+0x150>
 80028c6:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80028ca:	e001      	b.n	80028d0 <HAL_MDF_AcqStart_DMA+0x154>
 80028cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
          hmdf->Instance->DFLTIER |= (pFilterConfig->SoundActivity.SoundLevelInterrupt == ENABLE) ?
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	62da      	str	r2, [r3, #44]	; 0x2c
                                     MDF_DFLTIER_SDDETIE;
        }

        /* Enable MDF DMA requests */
        hmdf->Instance->DFLTCR = MDF_DFLTCR_DMAEN;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2202      	movs	r2, #2
 80028de:	609a      	str	r2, [r3, #8]

        /* Start DMA transfer */
        hmdf->hdma->XferCpltCallback     = MDF_DmaXferCpltCallback;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e4:	4a36      	ldr	r2, [pc, #216]	; (80029c0 <HAL_MDF_AcqStart_DMA+0x244>)
 80028e6:	661a      	str	r2, [r3, #96]	; 0x60
        hmdf->hdma->XferHalfCpltCallback = MDF_DmaXferHalfCpltCallback;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ec:	4a35      	ldr	r2, [pc, #212]	; (80029c4 <HAL_MDF_AcqStart_DMA+0x248>)
 80028ee:	665a      	str	r2, [r3, #100]	; 0x64
        hmdf->hdma->XferErrorCallback    = MDF_DmaErrorCallback;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f4:	4a34      	ldr	r2, [pc, #208]	; (80029c8 <HAL_MDF_AcqStart_DMA+0x24c>)
 80028f6:	669a      	str	r2, [r3, #104]	; 0x68
        SrcAddress = (pDmaConfig->MsbOnly == ENABLE) ? (((uint32_t) &hmdf->Instance->DFLTDR) + 2U) :
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	7a1b      	ldrb	r3, [r3, #8]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d104      	bne.n	800290a <HAL_MDF_AcqStart_DMA+0x18e>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	3370      	adds	r3, #112	; 0x70
 8002906:	3302      	adds	r3, #2
 8002908:	e002      	b.n	8002910 <HAL_MDF_AcqStart_DMA+0x194>
                     (uint32_t) &hmdf->Instance->DFLTDR;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	3370      	adds	r3, #112	; 0x70
        SrcAddress = (pDmaConfig->MsbOnly == ENABLE) ? (((uint32_t) &hmdf->Instance->DFLTDR) + 2U) :
 8002910:	613b      	str	r3, [r7, #16]
        if ((hmdf->hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800291c:	2b00      	cmp	r3, #0
 800291e:	d023      	beq.n	8002968 <HAL_MDF_AcqStart_DMA+0x1ec>
        {
          if (hmdf->hdma->LinkedListQueue != NULL)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002926:	2b00      	cmp	r3, #0
 8002928:	d01b      	beq.n	8002962 <HAL_MDF_AcqStart_DMA+0x1e6>
          {
            hmdf->hdma->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = pDmaConfig->DataLength;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	6852      	ldr	r2, [r2, #4]
 8002936:	609a      	str	r2, [r3, #8]
            hmdf->hdma->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = SrcAddress;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	60da      	str	r2, [r3, #12]
            hmdf->hdma->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pDmaConfig->Address;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	6812      	ldr	r2, [r2, #0]
 8002950:	611a      	str	r2, [r3, #16]

            status = HAL_DMAEx_List_Start_IT(hmdf->hdma);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002956:	4618      	mov	r0, r3
 8002958:	f7fe fd80 	bl	800145c <HAL_DMAEx_List_Start_IT>
 800295c:	4603      	mov	r3, r0
 800295e:	75fb      	strb	r3, [r7, #23]
 8002960:	e00d      	b.n	800297e <HAL_MDF_AcqStart_DMA+0x202>
          }
          else
          {
            status = HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	75fb      	strb	r3, [r7, #23]
 8002966:	e00a      	b.n	800297e <HAL_MDF_AcqStart_DMA+0x202>
          }
        }
        else
        {
          status = HAL_DMA_Start_IT(hmdf->hdma, SrcAddress, pDmaConfig->Address, pDmaConfig->DataLength);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	6939      	ldr	r1, [r7, #16]
 8002976:	f7fe fa08 	bl	8000d8a <HAL_DMA_Start_IT>
 800297a:	4603      	mov	r3, r0
 800297c:	75fb      	strb	r3, [r7, #23]
        }
        if (status != HAL_OK)
 800297e:	7dfb      	ldrb	r3, [r7, #23]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d006      	beq.n	8002992 <HAL_MDF_AcqStart_DMA+0x216>
        {
          /* Update state */
          hmdf->State = HAL_MDF_STATE_ERROR;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	22ff      	movs	r2, #255	; 0xff
 8002988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          status = HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	75fb      	strb	r3, [r7, #23]
 8002990:	e003      	b.n	800299a <HAL_MDF_AcqStart_DMA+0x21e>
        }
        else
        {
          /* Configure filter and start acquisition */
          MDF_AcqStart(hmdf, pFilterConfig);
 8002992:	68b9      	ldr	r1, [r7, #8]
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f000 f9af 	bl	8002cf8 <MDF_AcqStart>
      }
    }
  }

  /* Return function status */
  return status;
 800299a:	7dfb      	ldrb	r3, [r7, #23]
}
 800299c:	4618      	mov	r0, r3
 800299e:	3718      	adds	r7, #24
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	46024080 	.word	0x46024080
 80029a8:	40025080 	.word	0x40025080
 80029ac:	40025100 	.word	0x40025100
 80029b0:	40025180 	.word	0x40025180
 80029b4:	40025200 	.word	0x40025200
 80029b8:	40025280 	.word	0x40025280
 80029bc:	40025300 	.word	0x40025300
 80029c0:	08003045 	.word	0x08003045
 80029c4:	08003071 	.word	0x08003071
 80029c8:	0800308d 	.word	0x0800308d

080029cc <HAL_MDF_AcqCpltCallback>:
  * @brief  MDF acquisition complete callback.
  * @param  hmdf MDF handle.
  * @retval None.
  */
__weak void HAL_MDF_AcqCpltCallback(MDF_HandleTypeDef *hmdf)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hmdf);

  /* NOTE : This function should not be modified, when the function is needed,
            the HAL_MDF_AcqCpltCallback could be implemented in the user file */
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <HAL_MDF_AcqHalfCpltCallback>:
  * @brief  MDF acquisition half complete callback.
  * @param  hmdf MDF handle.
  * @retval None.
  */
__weak void HAL_MDF_AcqHalfCpltCallback(MDF_HandleTypeDef *hmdf)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hmdf);

  /* NOTE : This function should not be modified, when the function is needed,
            the HAL_MDF_AcqHalfCpltCallback could be implemented in the user file */
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <HAL_MDF_SndLvlCallback>:
  * @param  AmbientNoise Ambient noise value computed by sound activity detector.
  *         This parameter can be a value between Min_Data = 0 and Max_Data = 32767.
  * @retval None.
  */
__weak void HAL_MDF_SndLvlCallback(MDF_HandleTypeDef *hmdf, uint32_t SoundLevel, uint32_t AmbientNoise)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
  UNUSED(SoundLevel);
  UNUSED(AmbientNoise);

  /* NOTE : This function should not be modified, when the function is needed,
            the HAL_MDF_SndLvlCallback could be implemented in the user file */
}
 8002a00:	bf00      	nop
 8002a02:	3714      	adds	r7, #20
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <HAL_MDF_OldCallback>:
  * @param  ThresholdInfo Threshold information of out-off limit detection.
  *         This parameter can be a value of @ref MDF_OldThresholdInfo.
  * @retval None.
  */
__weak void HAL_MDF_OldCallback(MDF_HandleTypeDef *hmdf, uint32_t ThresholdInfo)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  UNUSED(hmdf);
  UNUSED(ThresholdInfo);

  /* NOTE : This function should not be modified, when the function is needed,
            the HAL_MDF_OldCallback could be implemented in the user file */
}
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr

08002a22 <HAL_MDF_IRQHandler>:
  * @brief  This function handles the MDF interrupts.
  * @param  hmdf MDF handle.
  * @retval None.
  */
void HAL_MDF_IRQHandler(MDF_HandleTypeDef *hmdf)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b088      	sub	sp, #32
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
  uint32_t tmp_reg1;
  uint32_t tmp_reg2;
  uint32_t interrupts;

  /* Read current flags and interrupts and determine which ones occur */
  tmp_reg1 = hmdf->Instance->DFLTIER;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a30:	61bb      	str	r3, [r7, #24]
  tmp_reg2 = hmdf->Instance->DFLTISR;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a38:	617b      	str	r3, [r7, #20]
  interrupts = (tmp_reg1 & tmp_reg2);
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	613b      	str	r3, [r7, #16]

  /* Check if data overflow occurs */
  if ((interrupts & MDF_DFLTISR_DOVRF) == MDF_DFLTISR_DOVRF)
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d011      	beq.n	8002a70 <HAL_MDF_IRQHandler+0x4e>
  {
    /* Clear data overflow flag */
    hmdf->Instance->DFLTISR |= MDF_DFLTISR_DOVRF;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0202 	orr.w	r2, r2, #2
 8002a5a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Update error code */
    hmdf->ErrorCode |= MDF_ERROR_ACQUISITION_OVERFLOW;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a60:	f043 0201 	orr.w	r2, r3, #1
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call error callback */
#if (USE_HAL_MDF_REGISTER_CALLBACKS == 1)
    hmdf->ErrorCallback(hmdf);
#else /* USE_HAL_MDF_REGISTER_CALLBACKS */
    HAL_MDF_ErrorCallback(hmdf);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 f8f7 	bl	8002c5c <HAL_MDF_ErrorCallback>
#else /* USE_HAL_MDF_REGISTER_CALLBACKS */
      HAL_MDF_SndLvlCallback(hmdf, sound_level, ambient_noise);
#endif /* USE_HAL_MDF_REGISTER_CALLBACKS */
    }
  }
}
 8002a6e:	e0f1      	b.n	8002c54 <HAL_MDF_IRQHandler+0x232>
  else if ((interrupts & MDF_DFLTISR_SSOVRF) == MDF_DFLTISR_SSOVRF)
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d011      	beq.n	8002a9e <HAL_MDF_IRQHandler+0x7c>
    hmdf->Instance->DFLTISR |= MDF_DFLTISR_SSOVRF;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a88:	631a      	str	r2, [r3, #48]	; 0x30
    hmdf->ErrorCode |= MDF_ERROR_ACQUISITION_OVERFLOW;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	f043 0201 	orr.w	r2, r3, #1
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_MDF_ErrorCallback(hmdf);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 f8e0 	bl	8002c5c <HAL_MDF_ErrorCallback>
}
 8002a9c:	e0da      	b.n	8002c54 <HAL_MDF_IRQHandler+0x232>
  else if ((interrupts & MDF_DFLTISR_FTHF) == MDF_DFLTISR_FTHF)
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00f      	beq.n	8002ac8 <HAL_MDF_IRQHandler+0xa6>
    HAL_MDF_AcqCpltCallback(hmdf);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f7ff ff8f 	bl	80029cc <HAL_MDF_AcqCpltCallback>
    if ((hmdf->Instance->DFLTCR & MDF_DFLTCR_ACQMOD) == MDF_MODE_ASYNC_SINGLE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ab8:	2b10      	cmp	r3, #16
 8002aba:	f040 80cb 	bne.w	8002c54 <HAL_MDF_IRQHandler+0x232>
      hmdf->State = HAL_MDF_STATE_READY;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002ac6:	e0c5      	b.n	8002c54 <HAL_MDF_IRQHandler+0x232>
  else if ((interrupts & MDF_DFLTISR_SSDRF) == MDF_DFLTISR_SSDRF)
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	f003 0304 	and.w	r3, r3, #4
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00b      	beq.n	8002aea <HAL_MDF_IRQHandler+0xc8>
    hmdf->Instance->DFLTISR |= MDF_DFLTISR_SSDRF;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f042 0204 	orr.w	r2, r2, #4
 8002ae0:	631a      	str	r2, [r3, #48]	; 0x30
    HAL_MDF_AcqCpltCallback(hmdf);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7ff ff72 	bl	80029cc <HAL_MDF_AcqCpltCallback>
}
 8002ae8:	e0b4      	b.n	8002c54 <HAL_MDF_IRQHandler+0x232>
  else if ((interrupts & MDF_DFLTISR_RFOVRF) == MDF_DFLTISR_RFOVRF)
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d011      	beq.n	8002b18 <HAL_MDF_IRQHandler+0xf6>
    hmdf->Instance->DFLTISR |= MDF_DFLTISR_RFOVRF;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b02:	631a      	str	r2, [r3, #48]	; 0x30
    hmdf->ErrorCode |= MDF_ERROR_RSF_OVERRUN;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	f043 0202 	orr.w	r2, r3, #2
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_MDF_ErrorCallback(hmdf);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 f8a3 	bl	8002c5c <HAL_MDF_ErrorCallback>
}
 8002b16:	e09d      	b.n	8002c54 <HAL_MDF_IRQHandler+0x232>
  else if ((interrupts & MDF_DFLTISR_CKABF) == MDF_DFLTISR_CKABF)
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d011      	beq.n	8002b46 <HAL_MDF_IRQHandler+0x124>
    hmdf->Instance->DFLTISR |= MDF_DFLTISR_CKABF;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b30:	631a      	str	r2, [r3, #48]	; 0x30
    hmdf->ErrorCode |= MDF_ERROR_CLOCK_ABSENCE;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	f043 0204 	orr.w	r2, r3, #4
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_MDF_ErrorCallback(hmdf);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f88c 	bl	8002c5c <HAL_MDF_ErrorCallback>
}
 8002b44:	e086      	b.n	8002c54 <HAL_MDF_IRQHandler+0x232>
  else if ((interrupts & MDF_DFLTISR_SATF) == MDF_DFLTISR_SATF)
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d011      	beq.n	8002b74 <HAL_MDF_IRQHandler+0x152>
    hmdf->Instance->DFLTISR |= MDF_DFLTISR_SATF;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b5e:	631a      	str	r2, [r3, #48]	; 0x30
    hmdf->ErrorCode |= MDF_ERROR_SATURATION;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	f043 0210 	orr.w	r2, r3, #16
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_MDF_ErrorCallback(hmdf);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 f875 	bl	8002c5c <HAL_MDF_ErrorCallback>
}
 8002b72:	e06f      	b.n	8002c54 <HAL_MDF_IRQHandler+0x232>
  else if ((interrupts & MDF_DFLTISR_SCDF) == MDF_DFLTISR_SCDF)
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d011      	beq.n	8002ba2 <HAL_MDF_IRQHandler+0x180>
    hmdf->Instance->DFLTISR |= MDF_DFLTISR_SCDF;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b8c:	631a      	str	r2, [r3, #48]	; 0x30
    hmdf->ErrorCode |= MDF_ERROR_SHORT_CIRCUIT;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	f043 0208 	orr.w	r2, r3, #8
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_MDF_ErrorCallback(hmdf);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f85e 	bl	8002c5c <HAL_MDF_ErrorCallback>
}
 8002ba0:	e058      	b.n	8002c54 <HAL_MDF_IRQHandler+0x232>
  else if ((interrupts & MDF_DFLTISR_OLDF) == MDF_DFLTISR_OLDF)
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	f003 0310 	and.w	r3, r3, #16
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d028      	beq.n	8002bfe <HAL_MDF_IRQHandler+0x1dc>
    if ((hmdf->Instance->DFLTISR & (MDF_DFLTISR_THLF | MDF_DFLTISR_THHF)) == 0U)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d102      	bne.n	8002bc0 <HAL_MDF_IRQHandler+0x19e>
      threshold_info = MDF_OLD_IN_THRESHOLDS;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	61fb      	str	r3, [r7, #28]
 8002bbe:	e00b      	b.n	8002bd8 <HAL_MDF_IRQHandler+0x1b6>
    else if ((hmdf->Instance->DFLTISR & MDF_DFLTISR_THLF) == MDF_DFLTISR_THLF)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	f003 0320 	and.w	r3, r3, #32
 8002bca:	2b20      	cmp	r3, #32
 8002bcc:	d102      	bne.n	8002bd4 <HAL_MDF_IRQHandler+0x1b2>
      threshold_info = MDF_OLD_LOW_THRESHOLD;
 8002bce:	2302      	movs	r3, #2
 8002bd0:	61fb      	str	r3, [r7, #28]
 8002bd2:	e001      	b.n	8002bd8 <HAL_MDF_IRQHandler+0x1b6>
      threshold_info = MDF_OLD_HIGH_THRESHOLD;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	61fb      	str	r3, [r7, #28]
    hmdf->Instance->DFLTISR |= MDF_DFLTISR_OLDF;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0210 	orr.w	r2, r2, #16
 8002be6:	631a      	str	r2, [r3, #48]	; 0x30
    hmdf->ErrorCode |= MDF_ERROR_OUT_OFF_LIMIT;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bec:	f043 0220 	orr.w	r2, r3, #32
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_MDF_OldCallback(hmdf, threshold_info);
 8002bf4:	69f9      	ldr	r1, [r7, #28]
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7ff ff08 	bl	8002a0c <HAL_MDF_OldCallback>
}
 8002bfc:	e02a      	b.n	8002c54 <HAL_MDF_IRQHandler+0x232>
  else if ((interrupts & MDF_DFLTISR_SDDETF) == MDF_DFLTISR_SDDETF)
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00b      	beq.n	8002c20 <HAL_MDF_IRQHandler+0x1fe>
    hmdf->Instance->DFLTISR |= MDF_DFLTISR_SDDETF;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c16:	631a      	str	r2, [r3, #48]	; 0x30
    HAL_MDF_SadCallback(hmdf);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f7fd fd77 	bl	800070c <HAL_MDF_SadCallback>
}
 8002c1e:	e019      	b.n	8002c54 <HAL_MDF_IRQHandler+0x232>
    if ((interrupts & MDF_DFLTISR_SDLVLF) == MDF_DFLTISR_SDLVLF)
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d014      	beq.n	8002c54 <HAL_MDF_IRQHandler+0x232>
      sound_level = hmdf->Instance->SADSDLVR;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c30:	60fb      	str	r3, [r7, #12]
      ambient_noise = hmdf->Instance->SADANLVR;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c38:	60bb      	str	r3, [r7, #8]
      hmdf->Instance->DFLTISR |= MDF_DFLTISR_SDLVLF;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c48:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_MDF_SndLvlCallback(hmdf, sound_level, ambient_noise);
 8002c4a:	68ba      	ldr	r2, [r7, #8]
 8002c4c:	68f9      	ldr	r1, [r7, #12]
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7ff fed0 	bl	80029f4 <HAL_MDF_SndLvlCallback>
}
 8002c54:	bf00      	nop
 8002c56:	3720      	adds	r7, #32
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <HAL_MDF_ErrorCallback>:
  * @brief  MDF error callback.
  * @param  hmdf MDF handle.
  * @retval None.
  */
__weak void HAL_MDF_ErrorCallback(MDF_HandleTypeDef *hmdf)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hmdf);

  /* NOTE : This function should not be modified, when the function is needed,
            the HAL_MDF_ErrorCallback could be implemented in the user file */
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <MDF_GetHandleNumberFromInstance>:
  * @brief  This function allows to get the handle number from instance.
  * @param  pInstance MDF instance.
  * @retval Instance number.
  */
static uint32_t MDF_GetHandleNumberFromInstance(const MDF_Filter_TypeDef *const pInstance)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t handle_number;

  /* Get handle number from instance */
  if (pInstance == MDF1_Filter0)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a19      	ldr	r2, [pc, #100]	; (8002ce0 <MDF_GetHandleNumberFromInstance+0x70>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d102      	bne.n	8002c86 <MDF_GetHandleNumberFromInstance+0x16>
  {
    handle_number = 0U;
 8002c80:	2300      	movs	r3, #0
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	e024      	b.n	8002cd0 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter1)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a16      	ldr	r2, [pc, #88]	; (8002ce4 <MDF_GetHandleNumberFromInstance+0x74>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d102      	bne.n	8002c94 <MDF_GetHandleNumberFromInstance+0x24>
  {
    handle_number = 1U;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	60fb      	str	r3, [r7, #12]
 8002c92:	e01d      	b.n	8002cd0 <MDF_GetHandleNumberFromInstance+0x60>
  }
#if !defined(STM32U535xx) && !defined(STM32U545xx)
  else if (pInstance == MDF1_Filter2)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a14      	ldr	r2, [pc, #80]	; (8002ce8 <MDF_GetHandleNumberFromInstance+0x78>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d102      	bne.n	8002ca2 <MDF_GetHandleNumberFromInstance+0x32>
  {
    handle_number = 2U;
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	e016      	b.n	8002cd0 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter3)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a11      	ldr	r2, [pc, #68]	; (8002cec <MDF_GetHandleNumberFromInstance+0x7c>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d102      	bne.n	8002cb0 <MDF_GetHandleNumberFromInstance+0x40>
  {
    handle_number = 3U;
 8002caa:	2303      	movs	r3, #3
 8002cac:	60fb      	str	r3, [r7, #12]
 8002cae:	e00f      	b.n	8002cd0 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter4)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a0f      	ldr	r2, [pc, #60]	; (8002cf0 <MDF_GetHandleNumberFromInstance+0x80>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d102      	bne.n	8002cbe <MDF_GetHandleNumberFromInstance+0x4e>
  {
    handle_number = 4U;
 8002cb8:	2304      	movs	r3, #4
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	e008      	b.n	8002cd0 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter5)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a0c      	ldr	r2, [pc, #48]	; (8002cf4 <MDF_GetHandleNumberFromInstance+0x84>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d102      	bne.n	8002ccc <MDF_GetHandleNumberFromInstance+0x5c>
  {
    handle_number = 5U;
 8002cc6:	2305      	movs	r3, #5
 8002cc8:	60fb      	str	r3, [r7, #12]
 8002cca:	e001      	b.n	8002cd0 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else /* ADF1_Filter0 */
  {
    handle_number = 6U;
 8002ccc:	2306      	movs	r3, #6
 8002cce:	60fb      	str	r3, [r7, #12]
  {
    handle_number = 2U;
  }
#endif /* !defined(STM32U535xx) && !defined(STM32U545xx) */

  return handle_number;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3714      	adds	r7, #20
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	40025080 	.word	0x40025080
 8002ce4:	40025100 	.word	0x40025100
 8002ce8:	40025180 	.word	0x40025180
 8002cec:	40025200 	.word	0x40025200
 8002cf0:	40025280 	.word	0x40025280
 8002cf4:	40025300 	.word	0x40025300

08002cf8 <MDF_AcqStart>:
  * @param  hmdf MDF handle.
  * @param  pFilterConfig Filter configuration parameters.
  * @retval None.
  */
static void MDF_AcqStart(MDF_HandleTypeDef *const hmdf, const MDF_FilterConfigTypeDef *const pFilterConfig)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  uint32_t register_gain_value;

  /* Configure acquisition mode, discard samples, trigger and fifo threshold */
  assert_param(IS_MDF_DISCARD_SAMPLES(pFilterConfig->DiscardSamples));
  assert_param(IS_MDF_FIFO_THRESHOLD(pFilterConfig->FifoThreshold));
  if ((pFilterConfig->AcquisitionMode == MDF_MODE_ASYNC_CONT) ||
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d003      	beq.n	8002d12 <MDF_AcqStart+0x1a>
      (pFilterConfig->AcquisitionMode == MDF_MODE_ASYNC_SINGLE))
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  if ((pFilterConfig->AcquisitionMode == MDF_MODE_ASYNC_CONT) ||
 8002d0e:	2b10      	cmp	r3, #16
 8002d10:	d110      	bne.n	8002d34 <MDF_AcqStart+0x3c>
  {
    /* Trigger parameters are not used */
    hmdf->Instance->DFLTCR |= (pFilterConfig->AcquisitionMode | pFilterConfig->FifoThreshold |
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6899      	ldr	r1, [r3, #8]
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d20:	431a      	orrs	r2, r3
                               (pFilterConfig->DiscardSamples << MDF_DFLTCR_NBDIS_Pos));
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d26:	051b      	lsls	r3, r3, #20
    hmdf->Instance->DFLTCR |= (pFilterConfig->AcquisitionMode | pFilterConfig->FifoThreshold |
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	609a      	str	r2, [r3, #8]
 8002d32:	e015      	b.n	8002d60 <MDF_AcqStart+0x68>
    else
    {
      assert_param(IS_MDF_TRIGGER_SOURCE(pFilterConfig->Trigger.Source));
    }
    assert_param(IS_MDF_TRIGGER_EDGE(pFilterConfig->Trigger.Edge));
    hmdf->Instance->DFLTCR |= (pFilterConfig->AcquisitionMode | pFilterConfig->FifoThreshold |
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6899      	ldr	r1, [r3, #8]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d42:	431a      	orrs	r2, r3
                               pFilterConfig->Trigger.Source | pFilterConfig->Trigger.Edge |
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    hmdf->Instance->DFLTCR |= (pFilterConfig->AcquisitionMode | pFilterConfig->FifoThreshold |
 8002d48:	431a      	orrs	r2, r3
                               pFilterConfig->Trigger.Source | pFilterConfig->Trigger.Edge |
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d4e:	431a      	orrs	r2, r3
                               (pFilterConfig->DiscardSamples << MDF_DFLTCR_NBDIS_Pos));
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d54:	051b      	lsls	r3, r3, #20
                               pFilterConfig->Trigger.Source | pFilterConfig->Trigger.Edge |
 8002d56:	431a      	orrs	r2, r3
    hmdf->Instance->DFLTCR |= (pFilterConfig->AcquisitionMode | pFilterConfig->FifoThreshold |
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	609a      	str	r2, [r3, #8]
  }

  /* Configure if needed snapshot format only for MDF instance */
  if (IS_MDF_INSTANCE(hmdf->Instance) && (pFilterConfig->AcquisitionMode == MDF_MODE_SYNC_SNAPSHOT))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a7c      	ldr	r2, [pc, #496]	; (8002f58 <MDF_AcqStart+0x260>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d018      	beq.n	8002d9c <MDF_AcqStart+0xa4>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a7b      	ldr	r2, [pc, #492]	; (8002f5c <MDF_AcqStart+0x264>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d013      	beq.n	8002d9c <MDF_AcqStart+0xa4>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a79      	ldr	r2, [pc, #484]	; (8002f60 <MDF_AcqStart+0x268>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d00e      	beq.n	8002d9c <MDF_AcqStart+0xa4>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a78      	ldr	r2, [pc, #480]	; (8002f64 <MDF_AcqStart+0x26c>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d009      	beq.n	8002d9c <MDF_AcqStart+0xa4>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a76      	ldr	r2, [pc, #472]	; (8002f68 <MDF_AcqStart+0x270>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d004      	beq.n	8002d9c <MDF_AcqStart+0xa4>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a75      	ldr	r2, [pc, #468]	; (8002f6c <MDF_AcqStart+0x274>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d10c      	bne.n	8002db6 <MDF_AcqStart+0xbe>
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002da0:	2b50      	cmp	r3, #80	; 0x50
 8002da2:	d108      	bne.n	8002db6 <MDF_AcqStart+0xbe>
  {
    assert_param(IS_MDF_SNAPSHOT_FORMAT(pFilterConfig->SnapshotFormat));
    hmdf->Instance->DFLTCR |= pFilterConfig->SnapshotFormat;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6899      	ldr	r1, [r3, #8]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	430a      	orrs	r2, r1
 8002db4:	609a      	str	r2, [r3, #8]
  {
    assert_param(IS_MDF_DATA_SOURCE(pFilterConfig->DataSource));
  }
  assert_param(IS_MDF_DECIMATION_RATIO(pFilterConfig->DecimationRatio));
  assert_param(IS_MDF_GAIN(pFilterConfig->Gain));
  if (pFilterConfig->Gain < 0)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	da08      	bge.n	8002dd0 <MDF_AcqStart+0xd8>
  {
    int32_t adjust_gain;

    /* adjust gain value to set on register for negative value (offset of -16) */
    adjust_gain = pFilterConfig->Gain - 16;
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	3b10      	subs	r3, #16
 8002dc4:	60bb      	str	r3, [r7, #8]
    register_gain_value = ((uint32_t) adjust_gain & 0x3FU);
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dcc:	60fb      	str	r3, [r7, #12]
 8002dce:	e002      	b.n	8002dd6 <MDF_AcqStart+0xde>
  }
  else
  {
    /* for positive value, no offset to apply */
    register_gain_value = (uint32_t) pFilterConfig->Gain;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	60fb      	str	r3, [r7, #12]
  }
  hmdf->Instance->DFLTCICR = (pFilterConfig->DataSource | pFilterConfig->CicMode |
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	431a      	orrs	r2, r3
                              ((pFilterConfig->DecimationRatio - 1U) << MDF_DFLTCICR_MCICD_Pos) |
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	3b01      	subs	r3, #1
 8002de6:	021b      	lsls	r3, r3, #8
  hmdf->Instance->DFLTCICR = (pFilterConfig->DataSource | pFilterConfig->CicMode |
 8002de8:	ea42 0103 	orr.w	r1, r2, r3
                              (register_gain_value << MDF_DFLTCICR_SCALE_Pos));
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	051a      	lsls	r2, r3, #20
  hmdf->Instance->DFLTCICR = (pFilterConfig->DataSource | pFilterConfig->CicMode |
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
                              ((pFilterConfig->DecimationRatio - 1U) << MDF_DFLTCICR_MCICD_Pos) |
 8002df4:	430a      	orrs	r2, r1
  hmdf->Instance->DFLTCICR = (pFilterConfig->DataSource | pFilterConfig->CicMode |
 8002df6:	60da      	str	r2, [r3, #12]

  /* Configure bitstream delay */
  assert_param(IS_MDF_DELAY(pFilterConfig->Delay));
  hmdf->Instance->DLYCR = pFilterConfig->Delay;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	6852      	ldr	r2, [r2, #4]
 8002e00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure offset compensation only for MDF instance */
  if (IS_MDF_INSTANCE(hmdf->Instance))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a54      	ldr	r2, [pc, #336]	; (8002f58 <MDF_AcqStart+0x260>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d018      	beq.n	8002e3e <MDF_AcqStart+0x146>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a52      	ldr	r2, [pc, #328]	; (8002f5c <MDF_AcqStart+0x264>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d013      	beq.n	8002e3e <MDF_AcqStart+0x146>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a51      	ldr	r2, [pc, #324]	; (8002f60 <MDF_AcqStart+0x268>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d00e      	beq.n	8002e3e <MDF_AcqStart+0x146>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a4f      	ldr	r2, [pc, #316]	; (8002f64 <MDF_AcqStart+0x26c>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d009      	beq.n	8002e3e <MDF_AcqStart+0x146>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a4e      	ldr	r2, [pc, #312]	; (8002f68 <MDF_AcqStart+0x270>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d004      	beq.n	8002e3e <MDF_AcqStart+0x146>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a4c      	ldr	r2, [pc, #304]	; (8002f6c <MDF_AcqStart+0x274>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d104      	bne.n	8002e48 <MDF_AcqStart+0x150>
  {
    assert_param(IS_MDF_OFFSET(pFilterConfig->Offset));
    hmdf->Instance->OECCR = (uint32_t) pFilterConfig->Offset;
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	691a      	ldr	r2, [r3, #16]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Configure reshape filter */
  assert_param(IS_FUNCTIONAL_STATE(pFilterConfig->ReshapeFilter.Activation));
  hmdf->Instance->DFLTRSFR = 0U;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	611a      	str	r2, [r3, #16]
  if (pFilterConfig->ReshapeFilter.Activation == ENABLE)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	7e1b      	ldrb	r3, [r3, #24]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d109      	bne.n	8002e6c <MDF_AcqStart+0x174>
  {
    /* Configure reshape filter decimation ratio */
    assert_param(IS_MDF_RSF_DECIMATION_RATIO(pFilterConfig->ReshapeFilter.DecimationRatio));
    hmdf->Instance->DFLTRSFR |= pFilterConfig->ReshapeFilter.DecimationRatio;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6919      	ldr	r1, [r3, #16]
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	69da      	ldr	r2, [r3, #28]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	611a      	str	r2, [r3, #16]
 8002e6a:	e007      	b.n	8002e7c <MDF_AcqStart+0x184>
  }
  else
  {
    /* Bypass reshape filter */
    hmdf->Instance->DFLTRSFR |= MDF_DFLTRSFR_RSFLTBYP;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	691a      	ldr	r2, [r3, #16]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f042 0201 	orr.w	r2, r2, #1
 8002e7a:	611a      	str	r2, [r3, #16]
  }

  /* Configure high-pass filter */
  assert_param(IS_FUNCTIONAL_STATE(pFilterConfig->HighPassFilter.Activation));
  if (pFilterConfig->HighPassFilter.Activation == ENABLE)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d109      	bne.n	8002e9a <MDF_AcqStart+0x1a2>
  {
    /* Configure high-pass filter cut-off frequency */
    assert_param(IS_MDF_HPF_CUTOFF_FREQ(pFilterConfig->HighPassFilter.CutOffFrequency));
    hmdf->Instance->DFLTRSFR |= pFilterConfig->HighPassFilter.CutOffFrequency;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6919      	ldr	r1, [r3, #16]
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	430a      	orrs	r2, r1
 8002e96:	611a      	str	r2, [r3, #16]
 8002e98:	e007      	b.n	8002eaa <MDF_AcqStart+0x1b2>
  }
  else
  {
    /* Bypass high-pass filter */
    hmdf->Instance->DFLTRSFR |= MDF_DFLTRSFR_HPFBYP;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	691a      	ldr	r2, [r3, #16]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ea8:	611a      	str	r2, [r3, #16]
  }

  /* Configure integrator only for MDF instance */
  if (IS_MDF_INSTANCE(hmdf->Instance))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a2a      	ldr	r2, [pc, #168]	; (8002f58 <MDF_AcqStart+0x260>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d018      	beq.n	8002ee6 <MDF_AcqStart+0x1ee>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a28      	ldr	r2, [pc, #160]	; (8002f5c <MDF_AcqStart+0x264>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d013      	beq.n	8002ee6 <MDF_AcqStart+0x1ee>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a27      	ldr	r2, [pc, #156]	; (8002f60 <MDF_AcqStart+0x268>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d00e      	beq.n	8002ee6 <MDF_AcqStart+0x1ee>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a25      	ldr	r2, [pc, #148]	; (8002f64 <MDF_AcqStart+0x26c>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d009      	beq.n	8002ee6 <MDF_AcqStart+0x1ee>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a24      	ldr	r2, [pc, #144]	; (8002f68 <MDF_AcqStart+0x270>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d004      	beq.n	8002ee6 <MDF_AcqStart+0x1ee>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a22      	ldr	r2, [pc, #136]	; (8002f6c <MDF_AcqStart+0x274>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d113      	bne.n	8002f0e <MDF_AcqStart+0x216>
  {
    assert_param(IS_FUNCTIONAL_STATE(pFilterConfig->Integrator.Activation));
    if (pFilterConfig->Integrator.Activation == ENABLE)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d10a      	bne.n	8002f06 <MDF_AcqStart+0x20e>
    {
      /* Configure integrator value and output division */
      assert_param(IS_MDF_INTEGRATOR_VALUE(pFilterConfig->Integrator.Value));
      assert_param(IS_MDF_INTEGRATOR_OUTPUT_DIV(pFilterConfig->Integrator.OutputDivision));
      hmdf->Instance->DFLTINTR = (((pFilterConfig->Integrator.Value - 1U) << MDF_DFLTINTR_INTVAL_Pos) |
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	0119      	lsls	r1, r3, #4
                                  pFilterConfig->Integrator.OutputDivision);
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
      hmdf->Instance->DFLTINTR = (((pFilterConfig->Integrator.Value - 1U) << MDF_DFLTINTR_INTVAL_Pos) |
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	615a      	str	r2, [r3, #20]
 8002f04:	e003      	b.n	8002f0e <MDF_AcqStart+0x216>
    }
    else
    {
      /* Bypass integrator */
      hmdf->Instance->DFLTINTR = 0U;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	615a      	str	r2, [r3, #20]
    }
  }

  if (IS_ADF_INSTANCE(hmdf->Instance))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a17      	ldr	r2, [pc, #92]	; (8002f70 <MDF_AcqStart+0x278>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d16f      	bne.n	8002ff8 <MDF_AcqStart+0x300>
  {
    assert_param(IS_FUNCTIONAL_STATE(pFilterConfig->SoundActivity.Activation));
    if (pFilterConfig->SoundActivity.Activation == ENABLE)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d162      	bne.n	8002fe8 <MDF_AcqStart+0x2f0>
      {
        assert_param(IS_FUNCTIONAL_STATE(pFilterConfig->SoundActivity.Hysteresis));
      }
      assert_param(IS_MDF_SAD_SOUND_TRIGGER(pFilterConfig->SoundActivity.SoundTriggerEvent));
      assert_param(IS_MDF_SAD_DATA_MEMORY_TRANSFER(pFilterConfig->SoundActivity.DataMemoryTransfer));
      if ((pFilterConfig->SoundActivity.Mode != MDF_SAD_AMBIENT_NOISE_DETECTOR) &&
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f26:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002f2a:	d023      	beq.n	8002f74 <MDF_AcqStart+0x27c>
          (pFilterConfig->SoundActivity.Hysteresis == ENABLE))
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
      if ((pFilterConfig->SoundActivity.Mode != MDF_SAD_AMBIENT_NOISE_DETECTOR) &&
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d11e      	bne.n	8002f74 <MDF_AcqStart+0x27c>
      {
        hmdf->Instance->SADCR = (pFilterConfig->SoundActivity.Mode | pFilterConfig->SoundActivity.FrameSize |
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f3e:	431a      	orrs	r2, r3
                                 MDF_SADCR_HYSTEN | pFilterConfig->SoundActivity.SoundTriggerEvent |
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f44:	431a      	orrs	r2, r3
                                 pFilterConfig->SoundActivity.DataMemoryTransfer);
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                                 MDF_SADCR_HYSTEN | pFilterConfig->SoundActivity.SoundTriggerEvent |
 8002f4a:	431a      	orrs	r2, r3
        hmdf->Instance->SADCR = (pFilterConfig->SoundActivity.Mode | pFilterConfig->SoundActivity.FrameSize |
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
                                 MDF_SADCR_HYSTEN | pFilterConfig->SoundActivity.SoundTriggerEvent |
 8002f50:	f042 0280 	orr.w	r2, r2, #128	; 0x80
        hmdf->Instance->SADCR = (pFilterConfig->SoundActivity.Mode | pFilterConfig->SoundActivity.FrameSize |
 8002f54:	639a      	str	r2, [r3, #56]	; 0x38
 8002f56:	e01c      	b.n	8002f92 <MDF_AcqStart+0x29a>
 8002f58:	40025080 	.word	0x40025080
 8002f5c:	40025100 	.word	0x40025100
 8002f60:	40025180 	.word	0x40025180
 8002f64:	40025200 	.word	0x40025200
 8002f68:	40025280 	.word	0x40025280
 8002f6c:	40025300 	.word	0x40025300
 8002f70:	46024080 	.word	0x46024080
      }
      else
      {
        hmdf->Instance->SADCR = (pFilterConfig->SoundActivity.Mode | pFilterConfig->SoundActivity.FrameSize |
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7c:	431a      	orrs	r2, r3
                                 pFilterConfig->SoundActivity.SoundTriggerEvent |
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        hmdf->Instance->SADCR = (pFilterConfig->SoundActivity.Mode | pFilterConfig->SoundActivity.FrameSize |
 8002f82:	ea42 0103 	orr.w	r1, r2, r3
                                 pFilterConfig->SoundActivity.DataMemoryTransfer);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
        hmdf->Instance->SADCR = (pFilterConfig->SoundActivity.Mode | pFilterConfig->SoundActivity.FrameSize |
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
                                 pFilterConfig->SoundActivity.SoundTriggerEvent |
 8002f8e:	430a      	orrs	r2, r1
        hmdf->Instance->SADCR = (pFilterConfig->SoundActivity.Mode | pFilterConfig->SoundActivity.FrameSize |
 8002f90:	639a      	str	r2, [r3, #56]	; 0x38
         ambient noise slope control and signal noise threshold only for ADF instance */
      assert_param(IS_MDF_SAD_MIN_NOISE_LEVEL(pFilterConfig->SoundActivity.MinNoiseLevel));
      assert_param(IS_MDF_SAD_HANGOVER_WINDOW(pFilterConfig->SoundActivity.HangoverWindow));
      assert_param(IS_MDF_SAD_LEARNING_FRAMES(pFilterConfig->SoundActivity.LearningFrames));
      assert_param(IS_MDF_SAD_SIGNAL_NOISE_THRESHOLD(pFilterConfig->SoundActivity.SignalNoiseThreshold));
      if (pFilterConfig->SoundActivity.Mode != MDF_SAD_SOUND_DETECTOR)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f9a:	d014      	beq.n	8002fc6 <MDF_AcqStart+0x2ce>
      {
        assert_param(IS_MDF_SAD_AMBIENT_NOISE_SLOPE(pFilterConfig->SoundActivity.AmbientNoiseSlope));
        hmdf->Instance->SADCFGR = ((pFilterConfig->SoundActivity.MinNoiseLevel << MDF_SADCFGR_ANMIN_Pos) |
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fa0:	041a      	lsls	r2, r3, #16
                                   pFilterConfig->SoundActivity.HangoverWindow |
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
        hmdf->Instance->SADCFGR = ((pFilterConfig->SoundActivity.MinNoiseLevel << MDF_SADCFGR_ANMIN_Pos) |
 8002fa6:	431a      	orrs	r2, r3
                                   pFilterConfig->SoundActivity.LearningFrames |
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
                                   pFilterConfig->SoundActivity.HangoverWindow |
 8002fac:	431a      	orrs	r2, r3
                                   (pFilterConfig->SoundActivity.AmbientNoiseSlope << MDF_SADCFGR_ANSLP_Pos) |
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb2:	011b      	lsls	r3, r3, #4
                                   pFilterConfig->SoundActivity.LearningFrames |
 8002fb4:	ea42 0103 	orr.w	r1, r2, r3
                                   pFilterConfig->SoundActivity.SignalNoiseThreshold);
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
        hmdf->Instance->SADCFGR = ((pFilterConfig->SoundActivity.MinNoiseLevel << MDF_SADCFGR_ANMIN_Pos) |
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
                                   (pFilterConfig->SoundActivity.AmbientNoiseSlope << MDF_SADCFGR_ANSLP_Pos) |
 8002fc0:	430a      	orrs	r2, r1
        hmdf->Instance->SADCFGR = ((pFilterConfig->SoundActivity.MinNoiseLevel << MDF_SADCFGR_ANMIN_Pos) |
 8002fc2:	63da      	str	r2, [r3, #60]	; 0x3c
 8002fc4:	e018      	b.n	8002ff8 <MDF_AcqStart+0x300>
      }
      else
      {
        hmdf->Instance->SADCFGR = ((pFilterConfig->SoundActivity.MinNoiseLevel << MDF_SADCFGR_ANMIN_Pos) |
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fca:	041a      	lsls	r2, r3, #16
                                   pFilterConfig->SoundActivity.HangoverWindow |
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
        hmdf->Instance->SADCFGR = ((pFilterConfig->SoundActivity.MinNoiseLevel << MDF_SADCFGR_ANMIN_Pos) |
 8002fd0:	431a      	orrs	r2, r3
                                   pFilterConfig->SoundActivity.LearningFrames |
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
                                   pFilterConfig->SoundActivity.HangoverWindow |
 8002fd6:	ea42 0103 	orr.w	r1, r2, r3
                                   pFilterConfig->SoundActivity.SignalNoiseThreshold);
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
        hmdf->Instance->SADCFGR = ((pFilterConfig->SoundActivity.MinNoiseLevel << MDF_SADCFGR_ANMIN_Pos) |
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
                                   pFilterConfig->SoundActivity.LearningFrames |
 8002fe2:	430a      	orrs	r2, r1
        hmdf->Instance->SADCFGR = ((pFilterConfig->SoundActivity.MinNoiseLevel << MDF_SADCFGR_ANMIN_Pos) |
 8002fe4:	63da      	str	r2, [r3, #60]	; 0x3c
 8002fe6:	e007      	b.n	8002ff8 <MDF_AcqStart+0x300>
      }
    }
    else
    {
      /* SAD is not used */
      hmdf->Instance->SADCR = 0U;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2200      	movs	r2, #0
 8002fee:	639a      	str	r2, [r3, #56]	; 0x38
      hmdf->Instance->SADCFGR = 0U;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /* Update instance state */
  hmdf->State = HAL_MDF_STATE_ACQUISITION;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable sound activity detector if needed only for ADF instance */
  if ((IS_ADF_INSTANCE(hmdf->Instance)) && (pFilterConfig->SoundActivity.Activation == ENABLE))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a0e      	ldr	r2, [pc, #56]	; (8003040 <MDF_AcqStart+0x348>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d10c      	bne.n	8003024 <MDF_AcqStart+0x32c>
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003010:	2b01      	cmp	r3, #1
 8003012:	d107      	bne.n	8003024 <MDF_AcqStart+0x32c>
  {
    hmdf->Instance->SADCR |= MDF_SADCR_SADEN;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f042 0201 	orr.w	r2, r2, #1
 8003022:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Enable filter */
  hmdf->Instance->DFLTCR |= MDF_DFLTCR_DFLTEN;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689a      	ldr	r2, [r3, #8]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f042 0201 	orr.w	r2, r2, #1
 8003032:	609a      	str	r2, [r3, #8]
}
 8003034:	bf00      	nop
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	46024080 	.word	0x46024080

08003044 <MDF_DmaXferCpltCallback>:
  * @brief  This function handles DMA transfer complete callback.
  * @param  hdma DMA handle.
  * @retval None.
  */
static void MDF_DmaXferCpltCallback(DMA_HandleTypeDef *hdma)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  MDF_HandleTypeDef *hmdf = (MDF_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003050:	60fb      	str	r3, [r7, #12]

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003056:	2b81      	cmp	r3, #129	; 0x81
 8003058:	d003      	beq.n	8003062 <MDF_DmaXferCpltCallback+0x1e>
  {
    hmdf->State = HAL_MDF_STATE_READY;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

#if (USE_HAL_MDF_REGISTER_CALLBACKS == 1)
  hmdf->AcqCpltCallback(hmdf);
#else /* USE_HAL_MDF_REGISTER_CALLBACKS */
  HAL_MDF_AcqCpltCallback(hmdf);
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f7ff fcb2 	bl	80029cc <HAL_MDF_AcqCpltCallback>
#endif /* USE_HAL_MDF_REGISTER_CALLBACKS */
}
 8003068:	bf00      	nop
 800306a:	3710      	adds	r7, #16
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <MDF_DmaXferHalfCpltCallback>:
  * @brief  This function handles DMA half transfer complete callback.
  * @param  hdma DMA handle.
  * @retval None.
  */
static void MDF_DmaXferHalfCpltCallback(DMA_HandleTypeDef *hdma)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  MDF_HandleTypeDef *hmdf = (MDF_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800307c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_MDF_REGISTER_CALLBACKS == 1)
  hmdf->AcqHalfCpltCallback(hmdf);
#else /* USE_HAL_MDF_REGISTER_CALLBACKS */
  HAL_MDF_AcqHalfCpltCallback(hmdf);
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f7ff fcae 	bl	80029e0 <HAL_MDF_AcqHalfCpltCallback>
#endif /* USE_HAL_MDF_REGISTER_CALLBACKS */
}
 8003084:	bf00      	nop
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <MDF_DmaErrorCallback>:
  * @brief  This function handles DMA error callback.
  * @param  hdma DMA handle.
  * @retval None.
  */
static void MDF_DmaErrorCallback(DMA_HandleTypeDef *hdma)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  MDF_HandleTypeDef *hmdf = (MDF_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003098:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hmdf->ErrorCode |= MDF_ERROR_DMA;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_MDF_REGISTER_CALLBACKS == 1)
  hmdf->ErrorCallback(hmdf);
#else /* USE_HAL_MDF_REGISTER_CALLBACKS */
  HAL_MDF_ErrorCallback(hmdf);
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f7ff fdd8 	bl	8002c5c <HAL_MDF_ErrorCallback>
#endif /* USE_HAL_MDF_REGISTER_CALLBACKS */
}
 80030ac:	bf00      	nop
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80030bc:	4b39      	ldr	r3, [pc, #228]	; (80031a4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80030be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030c4:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80030c6:	68ba      	ldr	r2, [r7, #8]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d10b      	bne.n	80030e6 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030d4:	d905      	bls.n	80030e2 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80030d6:	4b33      	ldr	r3, [pc, #204]	; (80031a4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	4a32      	ldr	r2, [pc, #200]	; (80031a4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80030dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030e0:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80030e2:	2300      	movs	r3, #0
 80030e4:	e057      	b.n	8003196 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ec:	d90a      	bls.n	8003104 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80030ee:	4b2d      	ldr	r3, [pc, #180]	; (80031a4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	4a2a      	ldr	r2, [pc, #168]	; (80031a4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80030fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003100:	60d3      	str	r3, [r2, #12]
 8003102:	e007      	b.n	8003114 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8003104:	4b27      	ldr	r3, [pc, #156]	; (80031a4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800310c:	4925      	ldr	r1, [pc, #148]	; (80031a4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4313      	orrs	r3, r2
 8003112:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003114:	4b24      	ldr	r3, [pc, #144]	; (80031a8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a24      	ldr	r2, [pc, #144]	; (80031ac <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800311a:	fba2 2303 	umull	r2, r3, r2, r3
 800311e:	099b      	lsrs	r3, r3, #6
 8003120:	2232      	movs	r2, #50	; 0x32
 8003122:	fb02 f303 	mul.w	r3, r2, r3
 8003126:	4a21      	ldr	r2, [pc, #132]	; (80031ac <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003128:	fba2 2303 	umull	r2, r3, r2, r3
 800312c:	099b      	lsrs	r3, r3, #6
 800312e:	3301      	adds	r3, #1
 8003130:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003132:	e002      	b.n	800313a <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	3b01      	subs	r3, #1
 8003138:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800313a:	4b1a      	ldr	r3, [pc, #104]	; (80031a4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d102      	bne.n	800314c <HAL_PWREx_ControlVoltageScaling+0x98>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1f3      	bne.n	8003134 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d01b      	beq.n	800318a <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003152:	4b15      	ldr	r3, [pc, #84]	; (80031a8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a15      	ldr	r2, [pc, #84]	; (80031ac <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003158:	fba2 2303 	umull	r2, r3, r2, r3
 800315c:	099b      	lsrs	r3, r3, #6
 800315e:	2232      	movs	r2, #50	; 0x32
 8003160:	fb02 f303 	mul.w	r3, r2, r3
 8003164:	4a11      	ldr	r2, [pc, #68]	; (80031ac <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003166:	fba2 2303 	umull	r2, r3, r2, r3
 800316a:	099b      	lsrs	r3, r3, #6
 800316c:	3301      	adds	r3, #1
 800316e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003170:	e002      	b.n	8003178 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	3b01      	subs	r3, #1
 8003176:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003178:	4b0a      	ldr	r3, [pc, #40]	; (80031a4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800317a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800317c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d102      	bne.n	800318a <HAL_PWREx_ControlVoltageScaling+0xd6>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f3      	bne.n	8003172 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d101      	bne.n	8003194 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e000      	b.n	8003196 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3714      	adds	r7, #20
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	46020800 	.word	0x46020800
 80031a8:	20000008 	.word	0x20000008
 80031ac:	10624dd3 	.word	0x10624dd3

080031b0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80031b4:	4b04      	ldr	r3, [pc, #16]	; (80031c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80031b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80031bc:	4618      	mov	r0, r3
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	46020800 	.word	0x46020800

080031cc <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80031d4:	4b22      	ldr	r3, [pc, #136]	; (8003260 <HAL_PWREx_ConfigSupply+0x94>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a22      	ldr	r2, [pc, #136]	; (8003264 <HAL_PWREx_ConfigSupply+0x98>)
 80031da:	fba2 2303 	umull	r2, r3, r2, r3
 80031de:	099b      	lsrs	r3, r3, #6
 80031e0:	2232      	movs	r2, #50	; 0x32
 80031e2:	fb02 f303 	mul.w	r3, r2, r3
 80031e6:	4a1f      	ldr	r2, [pc, #124]	; (8003264 <HAL_PWREx_ConfigSupply+0x98>)
 80031e8:	fba2 2303 	umull	r2, r3, r2, r3
 80031ec:	099b      	lsrs	r3, r3, #6
 80031ee:	3301      	adds	r3, #1
 80031f0:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d113      	bne.n	8003220 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80031f8:	4b1b      	ldr	r3, [pc, #108]	; (8003268 <HAL_PWREx_ConfigSupply+0x9c>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	4a1a      	ldr	r2, [pc, #104]	; (8003268 <HAL_PWREx_ConfigSupply+0x9c>)
 80031fe:	f023 0302 	bic.w	r3, r3, #2
 8003202:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003204:	e002      	b.n	800320c <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	3b01      	subs	r3, #1
 800320a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800320c:	4b16      	ldr	r3, [pc, #88]	; (8003268 <HAL_PWREx_ConfigSupply+0x9c>)
 800320e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b02      	cmp	r3, #2
 8003216:	d116      	bne.n	8003246 <HAL_PWREx_ConfigSupply+0x7a>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1f3      	bne.n	8003206 <HAL_PWREx_ConfigSupply+0x3a>
 800321e:	e012      	b.n	8003246 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003220:	4b11      	ldr	r3, [pc, #68]	; (8003268 <HAL_PWREx_ConfigSupply+0x9c>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	4a10      	ldr	r2, [pc, #64]	; (8003268 <HAL_PWREx_ConfigSupply+0x9c>)
 8003226:	f043 0302 	orr.w	r3, r3, #2
 800322a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800322c:	e002      	b.n	8003234 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	3b01      	subs	r3, #1
 8003232:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003234:	4b0c      	ldr	r3, [pc, #48]	; (8003268 <HAL_PWREx_ConfigSupply+0x9c>)
 8003236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d102      	bne.n	8003246 <HAL_PWREx_ConfigSupply+0x7a>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1f3      	bne.n	800322e <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d101      	bne.n	8003250 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e000      	b.n	8003252 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3714      	adds	r7, #20
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	20000008 	.word	0x20000008
 8003264:	10624dd3 	.word	0x10624dd3
 8003268:	46020800 	.word	0x46020800

0800326c <HAL_PWREx_EnterSTOP2Mode>:
  *                     @arg @ref PWR_STOPENTRY_WFE enter Stop mode with Wait
  *                               For Event request.
  * @retval None.
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	4603      	mov	r3, r0
 8003274:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 2 mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_1);
 8003276:	4b11      	ldr	r3, [pc, #68]	; (80032bc <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f023 0307 	bic.w	r3, r3, #7
 800327e:	4a0f      	ldr	r2, [pc, #60]	; (80032bc <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8003280:	f043 0302 	orr.w	r3, r3, #2
 8003284:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003286:	4b0e      	ldr	r3, [pc, #56]	; (80032c0 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	4a0d      	ldr	r2, [pc, #52]	; (80032c0 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 800328c:	f043 0304 	orr.w	r3, r3, #4
 8003290:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8003292:	79fb      	ldrb	r3, [r7, #7]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d101      	bne.n	800329c <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003298:	bf30      	wfi
 800329a:	e002      	b.n	80032a2 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800329c:	bf40      	sev
    __WFE();
 800329e:	bf20      	wfe
    __WFE();
 80032a0:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80032a2:	4b07      	ldr	r3, [pc, #28]	; (80032c0 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	4a06      	ldr	r2, [pc, #24]	; (80032c0 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 80032a8:	f023 0304 	bic.w	r3, r3, #4
 80032ac:	6113      	str	r3, [r2, #16]
}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	46020800 	.word	0x46020800
 80032c0:	e000ed00 	.word	0xe000ed00

080032c4 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 80032c8:	4b05      	ldr	r3, [pc, #20]	; (80032e0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	4a04      	ldr	r2, [pc, #16]	; (80032e0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80032ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80032d2:	6113      	str	r3, [r2, #16]
}
 80032d4:	bf00      	nop
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	46020800 	.word	0x46020800

080032e4 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 80032e8:	4b05      	ldr	r3, [pc, #20]	; (8003300 <HAL_PWREx_EnableVddA+0x1c>)
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	4a04      	ldr	r2, [pc, #16]	; (8003300 <HAL_PWREx_EnableVddA+0x1c>)
 80032ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80032f2:	6113      	str	r3, [r2, #16]
}
 80032f4:	bf00      	nop
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	46020800 	.word	0x46020800

08003304 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8003308:	4b05      	ldr	r3, [pc, #20]	; (8003320 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800330a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330c:	4a04      	ldr	r2, [pc, #16]	; (8003320 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800330e:	f043 0301 	orr.w	r3, r3, #1
 8003312:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8003314:	bf00      	nop
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	46020800 	.word	0x46020800

08003324 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b08e      	sub	sp, #56	; 0x38
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800332c:	2300      	movs	r3, #0
 800332e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d102      	bne.n	800333e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	f000 bec8 	b.w	80040ce <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800333e:	4b99      	ldr	r3, [pc, #612]	; (80035a4 <HAL_RCC_OscConfig+0x280>)
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	f003 030c 	and.w	r3, r3, #12
 8003346:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003348:	4b96      	ldr	r3, [pc, #600]	; (80035a4 <HAL_RCC_OscConfig+0x280>)
 800334a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334c:	f003 0303 	and.w	r3, r3, #3
 8003350:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0310 	and.w	r3, r3, #16
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 816c 	beq.w	8003638 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003362:	2b00      	cmp	r3, #0
 8003364:	d007      	beq.n	8003376 <HAL_RCC_OscConfig+0x52>
 8003366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003368:	2b0c      	cmp	r3, #12
 800336a:	f040 80de 	bne.w	800352a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800336e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003370:	2b01      	cmp	r3, #1
 8003372:	f040 80da 	bne.w	800352a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d102      	bne.n	8003384 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	f000 bea5 	b.w	80040ce <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003388:	4b86      	ldr	r3, [pc, #536]	; (80035a4 <HAL_RCC_OscConfig+0x280>)
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d004      	beq.n	800339e <HAL_RCC_OscConfig+0x7a>
 8003394:	4b83      	ldr	r3, [pc, #524]	; (80035a4 <HAL_RCC_OscConfig+0x280>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800339c:	e005      	b.n	80033aa <HAL_RCC_OscConfig+0x86>
 800339e:	4b81      	ldr	r3, [pc, #516]	; (80035a4 <HAL_RCC_OscConfig+0x280>)
 80033a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80033a4:	041b      	lsls	r3, r3, #16
 80033a6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d255      	bcs.n	800345a <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80033ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d10a      	bne.n	80033ca <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b8:	4618      	mov	r0, r3
 80033ba:	f001 f99d 	bl	80046f8 <RCC_SetFlashLatencyFromMSIRange>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d002      	beq.n	80033ca <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	f000 be82 	b.w	80040ce <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80033ca:	4b76      	ldr	r3, [pc, #472]	; (80035a4 <HAL_RCC_OscConfig+0x280>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	4a75      	ldr	r2, [pc, #468]	; (80035a4 <HAL_RCC_OscConfig+0x280>)
 80033d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033d4:	6093      	str	r3, [r2, #8]
 80033d6:	4b73      	ldr	r3, [pc, #460]	; (80035a4 <HAL_RCC_OscConfig+0x280>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e2:	4970      	ldr	r1, [pc, #448]	; (80035a4 <HAL_RCC_OscConfig+0x280>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ec:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80033f0:	d309      	bcc.n	8003406 <HAL_RCC_OscConfig+0xe2>
 80033f2:	4b6c      	ldr	r3, [pc, #432]	; (80035a4 <HAL_RCC_OscConfig+0x280>)
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	f023 021f 	bic.w	r2, r3, #31
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a1b      	ldr	r3, [r3, #32]
 80033fe:	4969      	ldr	r1, [pc, #420]	; (80035a4 <HAL_RCC_OscConfig+0x280>)
 8003400:	4313      	orrs	r3, r2
 8003402:	60cb      	str	r3, [r1, #12]
 8003404:	e07e      	b.n	8003504 <HAL_RCC_OscConfig+0x1e0>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	2b00      	cmp	r3, #0
 800340c:	da0a      	bge.n	8003424 <HAL_RCC_OscConfig+0x100>
 800340e:	4b65      	ldr	r3, [pc, #404]	; (80035a4 <HAL_RCC_OscConfig+0x280>)
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	015b      	lsls	r3, r3, #5
 800341c:	4961      	ldr	r1, [pc, #388]	; (80035a4 <HAL_RCC_OscConfig+0x280>)
 800341e:	4313      	orrs	r3, r2
 8003420:	60cb      	str	r3, [r1, #12]
 8003422:	e06f      	b.n	8003504 <HAL_RCC_OscConfig+0x1e0>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800342c:	d30a      	bcc.n	8003444 <HAL_RCC_OscConfig+0x120>
 800342e:	4b5d      	ldr	r3, [pc, #372]	; (80035a4 <HAL_RCC_OscConfig+0x280>)
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	029b      	lsls	r3, r3, #10
 800343c:	4959      	ldr	r1, [pc, #356]	; (80035a4 <HAL_RCC_OscConfig+0x280>)
 800343e:	4313      	orrs	r3, r2
 8003440:	60cb      	str	r3, [r1, #12]
 8003442:	e05f      	b.n	8003504 <HAL_RCC_OscConfig+0x1e0>
 8003444:	4b57      	ldr	r3, [pc, #348]	; (80035a4 <HAL_RCC_OscConfig+0x280>)
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a1b      	ldr	r3, [r3, #32]
 8003450:	03db      	lsls	r3, r3, #15
 8003452:	4954      	ldr	r1, [pc, #336]	; (80035a4 <HAL_RCC_OscConfig+0x280>)
 8003454:	4313      	orrs	r3, r2
 8003456:	60cb      	str	r3, [r1, #12]
 8003458:	e054      	b.n	8003504 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800345a:	4b52      	ldr	r3, [pc, #328]	; (80035a4 <HAL_RCC_OscConfig+0x280>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	4a51      	ldr	r2, [pc, #324]	; (80035a4 <HAL_RCC_OscConfig+0x280>)
 8003460:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003464:	6093      	str	r3, [r2, #8]
 8003466:	4b4f      	ldr	r3, [pc, #316]	; (80035a4 <HAL_RCC_OscConfig+0x280>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003472:	494c      	ldr	r1, [pc, #304]	; (80035a4 <HAL_RCC_OscConfig+0x280>)
 8003474:	4313      	orrs	r3, r2
 8003476:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003480:	d309      	bcc.n	8003496 <HAL_RCC_OscConfig+0x172>
 8003482:	4b48      	ldr	r3, [pc, #288]	; (80035a4 <HAL_RCC_OscConfig+0x280>)
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	f023 021f 	bic.w	r2, r3, #31
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	4945      	ldr	r1, [pc, #276]	; (80035a4 <HAL_RCC_OscConfig+0x280>)
 8003490:	4313      	orrs	r3, r2
 8003492:	60cb      	str	r3, [r1, #12]
 8003494:	e028      	b.n	80034e8 <HAL_RCC_OscConfig+0x1c4>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	2b00      	cmp	r3, #0
 800349c:	da0a      	bge.n	80034b4 <HAL_RCC_OscConfig+0x190>
 800349e:	4b41      	ldr	r3, [pc, #260]	; (80035a4 <HAL_RCC_OscConfig+0x280>)
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	015b      	lsls	r3, r3, #5
 80034ac:	493d      	ldr	r1, [pc, #244]	; (80035a4 <HAL_RCC_OscConfig+0x280>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	60cb      	str	r3, [r1, #12]
 80034b2:	e019      	b.n	80034e8 <HAL_RCC_OscConfig+0x1c4>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034bc:	d30a      	bcc.n	80034d4 <HAL_RCC_OscConfig+0x1b0>
 80034be:	4b39      	ldr	r3, [pc, #228]	; (80035a4 <HAL_RCC_OscConfig+0x280>)
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	029b      	lsls	r3, r3, #10
 80034cc:	4935      	ldr	r1, [pc, #212]	; (80035a4 <HAL_RCC_OscConfig+0x280>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	60cb      	str	r3, [r1, #12]
 80034d2:	e009      	b.n	80034e8 <HAL_RCC_OscConfig+0x1c4>
 80034d4:	4b33      	ldr	r3, [pc, #204]	; (80035a4 <HAL_RCC_OscConfig+0x280>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a1b      	ldr	r3, [r3, #32]
 80034e0:	03db      	lsls	r3, r3, #15
 80034e2:	4930      	ldr	r1, [pc, #192]	; (80035a4 <HAL_RCC_OscConfig+0x280>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80034e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10a      	bne.n	8003504 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f2:	4618      	mov	r0, r3
 80034f4:	f001 f900 	bl	80046f8 <RCC_SetFlashLatencyFromMSIRange>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d002      	beq.n	8003504 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	f000 bde5 	b.w	80040ce <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8003504:	f001 f8de 	bl	80046c4 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003508:	4b27      	ldr	r3, [pc, #156]	; (80035a8 <HAL_RCC_OscConfig+0x284>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4618      	mov	r0, r3
 800350e:	f7fd fad7 	bl	8000ac0 <HAL_InitTick>
 8003512:	4603      	mov	r3, r0
 8003514:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8003518:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800351c:	2b00      	cmp	r3, #0
 800351e:	f000 808a 	beq.w	8003636 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8003522:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003526:	f000 bdd2 	b.w	80040ce <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	69db      	ldr	r3, [r3, #28]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d066      	beq.n	8003600 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8003532:	4b1c      	ldr	r3, [pc, #112]	; (80035a4 <HAL_RCC_OscConfig+0x280>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a1b      	ldr	r2, [pc, #108]	; (80035a4 <HAL_RCC_OscConfig+0x280>)
 8003538:	f043 0301 	orr.w	r3, r3, #1
 800353c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800353e:	f7fd fb09 	bl	8000b54 <HAL_GetTick>
 8003542:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003544:	e009      	b.n	800355a <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003546:	f7fd fb05 	bl	8000b54 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d902      	bls.n	800355a <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	f000 bdba 	b.w	80040ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800355a:	4b12      	ldr	r3, [pc, #72]	; (80035a4 <HAL_RCC_OscConfig+0x280>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0304 	and.w	r3, r3, #4
 8003562:	2b00      	cmp	r3, #0
 8003564:	d0ef      	beq.n	8003546 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003566:	4b0f      	ldr	r3, [pc, #60]	; (80035a4 <HAL_RCC_OscConfig+0x280>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	4a0e      	ldr	r2, [pc, #56]	; (80035a4 <HAL_RCC_OscConfig+0x280>)
 800356c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003570:	6093      	str	r3, [r2, #8]
 8003572:	4b0c      	ldr	r3, [pc, #48]	; (80035a4 <HAL_RCC_OscConfig+0x280>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357e:	4909      	ldr	r1, [pc, #36]	; (80035a4 <HAL_RCC_OscConfig+0x280>)
 8003580:	4313      	orrs	r3, r2
 8003582:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003588:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800358c:	d30e      	bcc.n	80035ac <HAL_RCC_OscConfig+0x288>
 800358e:	4b05      	ldr	r3, [pc, #20]	; (80035a4 <HAL_RCC_OscConfig+0x280>)
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	f023 021f 	bic.w	r2, r3, #31
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	4902      	ldr	r1, [pc, #8]	; (80035a4 <HAL_RCC_OscConfig+0x280>)
 800359c:	4313      	orrs	r3, r2
 800359e:	60cb      	str	r3, [r1, #12]
 80035a0:	e04a      	b.n	8003638 <HAL_RCC_OscConfig+0x314>
 80035a2:	bf00      	nop
 80035a4:	46020c00 	.word	0x46020c00
 80035a8:	2000000c 	.word	0x2000000c
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	da0a      	bge.n	80035ca <HAL_RCC_OscConfig+0x2a6>
 80035b4:	4b98      	ldr	r3, [pc, #608]	; (8003818 <HAL_RCC_OscConfig+0x4f4>)
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a1b      	ldr	r3, [r3, #32]
 80035c0:	015b      	lsls	r3, r3, #5
 80035c2:	4995      	ldr	r1, [pc, #596]	; (8003818 <HAL_RCC_OscConfig+0x4f4>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	60cb      	str	r3, [r1, #12]
 80035c8:	e036      	b.n	8003638 <HAL_RCC_OscConfig+0x314>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035d2:	d30a      	bcc.n	80035ea <HAL_RCC_OscConfig+0x2c6>
 80035d4:	4b90      	ldr	r3, [pc, #576]	; (8003818 <HAL_RCC_OscConfig+0x4f4>)
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a1b      	ldr	r3, [r3, #32]
 80035e0:	029b      	lsls	r3, r3, #10
 80035e2:	498d      	ldr	r1, [pc, #564]	; (8003818 <HAL_RCC_OscConfig+0x4f4>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	60cb      	str	r3, [r1, #12]
 80035e8:	e026      	b.n	8003638 <HAL_RCC_OscConfig+0x314>
 80035ea:	4b8b      	ldr	r3, [pc, #556]	; (8003818 <HAL_RCC_OscConfig+0x4f4>)
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	03db      	lsls	r3, r3, #15
 80035f8:	4987      	ldr	r1, [pc, #540]	; (8003818 <HAL_RCC_OscConfig+0x4f4>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	60cb      	str	r3, [r1, #12]
 80035fe:	e01b      	b.n	8003638 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8003600:	4b85      	ldr	r3, [pc, #532]	; (8003818 <HAL_RCC_OscConfig+0x4f4>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a84      	ldr	r2, [pc, #528]	; (8003818 <HAL_RCC_OscConfig+0x4f4>)
 8003606:	f023 0301 	bic.w	r3, r3, #1
 800360a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800360c:	f7fd faa2 	bl	8000b54 <HAL_GetTick>
 8003610:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003612:	e009      	b.n	8003628 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003614:	f7fd fa9e 	bl	8000b54 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b02      	cmp	r3, #2
 8003620:	d902      	bls.n	8003628 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	f000 bd53 	b.w	80040ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003628:	4b7b      	ldr	r3, [pc, #492]	; (8003818 <HAL_RCC_OscConfig+0x4f4>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0304 	and.w	r3, r3, #4
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1ef      	bne.n	8003614 <HAL_RCC_OscConfig+0x2f0>
 8003634:	e000      	b.n	8003638 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003636:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 808b 	beq.w	800375c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003648:	2b08      	cmp	r3, #8
 800364a:	d005      	beq.n	8003658 <HAL_RCC_OscConfig+0x334>
 800364c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364e:	2b0c      	cmp	r3, #12
 8003650:	d109      	bne.n	8003666 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003654:	2b03      	cmp	r3, #3
 8003656:	d106      	bne.n	8003666 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d17d      	bne.n	800375c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	f000 bd34 	b.w	80040ce <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800366e:	d106      	bne.n	800367e <HAL_RCC_OscConfig+0x35a>
 8003670:	4b69      	ldr	r3, [pc, #420]	; (8003818 <HAL_RCC_OscConfig+0x4f4>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a68      	ldr	r2, [pc, #416]	; (8003818 <HAL_RCC_OscConfig+0x4f4>)
 8003676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800367a:	6013      	str	r3, [r2, #0]
 800367c:	e041      	b.n	8003702 <HAL_RCC_OscConfig+0x3de>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003686:	d112      	bne.n	80036ae <HAL_RCC_OscConfig+0x38a>
 8003688:	4b63      	ldr	r3, [pc, #396]	; (8003818 <HAL_RCC_OscConfig+0x4f4>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a62      	ldr	r2, [pc, #392]	; (8003818 <HAL_RCC_OscConfig+0x4f4>)
 800368e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003692:	6013      	str	r3, [r2, #0]
 8003694:	4b60      	ldr	r3, [pc, #384]	; (8003818 <HAL_RCC_OscConfig+0x4f4>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a5f      	ldr	r2, [pc, #380]	; (8003818 <HAL_RCC_OscConfig+0x4f4>)
 800369a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800369e:	6013      	str	r3, [r2, #0]
 80036a0:	4b5d      	ldr	r3, [pc, #372]	; (8003818 <HAL_RCC_OscConfig+0x4f4>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a5c      	ldr	r2, [pc, #368]	; (8003818 <HAL_RCC_OscConfig+0x4f4>)
 80036a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036aa:	6013      	str	r3, [r2, #0]
 80036ac:	e029      	b.n	8003702 <HAL_RCC_OscConfig+0x3de>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80036b6:	d112      	bne.n	80036de <HAL_RCC_OscConfig+0x3ba>
 80036b8:	4b57      	ldr	r3, [pc, #348]	; (8003818 <HAL_RCC_OscConfig+0x4f4>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a56      	ldr	r2, [pc, #344]	; (8003818 <HAL_RCC_OscConfig+0x4f4>)
 80036be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036c2:	6013      	str	r3, [r2, #0]
 80036c4:	4b54      	ldr	r3, [pc, #336]	; (8003818 <HAL_RCC_OscConfig+0x4f4>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a53      	ldr	r2, [pc, #332]	; (8003818 <HAL_RCC_OscConfig+0x4f4>)
 80036ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036ce:	6013      	str	r3, [r2, #0]
 80036d0:	4b51      	ldr	r3, [pc, #324]	; (8003818 <HAL_RCC_OscConfig+0x4f4>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a50      	ldr	r2, [pc, #320]	; (8003818 <HAL_RCC_OscConfig+0x4f4>)
 80036d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036da:	6013      	str	r3, [r2, #0]
 80036dc:	e011      	b.n	8003702 <HAL_RCC_OscConfig+0x3de>
 80036de:	4b4e      	ldr	r3, [pc, #312]	; (8003818 <HAL_RCC_OscConfig+0x4f4>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a4d      	ldr	r2, [pc, #308]	; (8003818 <HAL_RCC_OscConfig+0x4f4>)
 80036e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036e8:	6013      	str	r3, [r2, #0]
 80036ea:	4b4b      	ldr	r3, [pc, #300]	; (8003818 <HAL_RCC_OscConfig+0x4f4>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a4a      	ldr	r2, [pc, #296]	; (8003818 <HAL_RCC_OscConfig+0x4f4>)
 80036f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036f4:	6013      	str	r3, [r2, #0]
 80036f6:	4b48      	ldr	r3, [pc, #288]	; (8003818 <HAL_RCC_OscConfig+0x4f4>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a47      	ldr	r2, [pc, #284]	; (8003818 <HAL_RCC_OscConfig+0x4f4>)
 80036fc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003700:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d014      	beq.n	8003734 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800370a:	f7fd fa23 	bl	8000b54 <HAL_GetTick>
 800370e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003710:	e009      	b.n	8003726 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003712:	f7fd fa1f 	bl	8000b54 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b64      	cmp	r3, #100	; 0x64
 800371e:	d902      	bls.n	8003726 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	f000 bcd4 	b.w	80040ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003726:	4b3c      	ldr	r3, [pc, #240]	; (8003818 <HAL_RCC_OscConfig+0x4f4>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d0ef      	beq.n	8003712 <HAL_RCC_OscConfig+0x3ee>
 8003732:	e013      	b.n	800375c <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8003734:	f7fd fa0e 	bl	8000b54 <HAL_GetTick>
 8003738:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800373a:	e009      	b.n	8003750 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800373c:	f7fd fa0a 	bl	8000b54 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b64      	cmp	r3, #100	; 0x64
 8003748:	d902      	bls.n	8003750 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	f000 bcbf 	b.w	80040ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003750:	4b31      	ldr	r3, [pc, #196]	; (8003818 <HAL_RCC_OscConfig+0x4f4>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1ef      	bne.n	800373c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d05f      	beq.n	8003828 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376a:	2b04      	cmp	r3, #4
 800376c:	d005      	beq.n	800377a <HAL_RCC_OscConfig+0x456>
 800376e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003770:	2b0c      	cmp	r3, #12
 8003772:	d114      	bne.n	800379e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003776:	2b02      	cmp	r3, #2
 8003778:	d111      	bne.n	800379e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d102      	bne.n	8003788 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	f000 bca3 	b.w	80040ce <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003788:	4b23      	ldr	r3, [pc, #140]	; (8003818 <HAL_RCC_OscConfig+0x4f4>)
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	041b      	lsls	r3, r3, #16
 8003796:	4920      	ldr	r1, [pc, #128]	; (8003818 <HAL_RCC_OscConfig+0x4f4>)
 8003798:	4313      	orrs	r3, r2
 800379a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800379c:	e044      	b.n	8003828 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d024      	beq.n	80037f0 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80037a6:	4b1c      	ldr	r3, [pc, #112]	; (8003818 <HAL_RCC_OscConfig+0x4f4>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a1b      	ldr	r2, [pc, #108]	; (8003818 <HAL_RCC_OscConfig+0x4f4>)
 80037ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80037b2:	f7fd f9cf 	bl	8000b54 <HAL_GetTick>
 80037b6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037b8:	e009      	b.n	80037ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037ba:	f7fd f9cb 	bl	8000b54 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d902      	bls.n	80037ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	f000 bc80 	b.w	80040ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037ce:	4b12      	ldr	r3, [pc, #72]	; (8003818 <HAL_RCC_OscConfig+0x4f4>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d0ef      	beq.n	80037ba <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80037da:	4b0f      	ldr	r3, [pc, #60]	; (8003818 <HAL_RCC_OscConfig+0x4f4>)
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	041b      	lsls	r3, r3, #16
 80037e8:	490b      	ldr	r1, [pc, #44]	; (8003818 <HAL_RCC_OscConfig+0x4f4>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	610b      	str	r3, [r1, #16]
 80037ee:	e01b      	b.n	8003828 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80037f0:	4b09      	ldr	r3, [pc, #36]	; (8003818 <HAL_RCC_OscConfig+0x4f4>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a08      	ldr	r2, [pc, #32]	; (8003818 <HAL_RCC_OscConfig+0x4f4>)
 80037f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037fa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80037fc:	f7fd f9aa 	bl	8000b54 <HAL_GetTick>
 8003800:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003802:	e00b      	b.n	800381c <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003804:	f7fd f9a6 	bl	8000b54 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b02      	cmp	r3, #2
 8003810:	d904      	bls.n	800381c <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	f000 bc5b 	b.w	80040ce <HAL_RCC_OscConfig+0xdaa>
 8003818:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800381c:	4baf      	ldr	r3, [pc, #700]	; (8003adc <HAL_RCC_OscConfig+0x7b8>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1ed      	bne.n	8003804 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0308 	and.w	r3, r3, #8
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 80c8 	beq.w	80039c6 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8003836:	2300      	movs	r3, #0
 8003838:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800383c:	4ba7      	ldr	r3, [pc, #668]	; (8003adc <HAL_RCC_OscConfig+0x7b8>)
 800383e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003842:	f003 0304 	and.w	r3, r3, #4
 8003846:	2b00      	cmp	r3, #0
 8003848:	d111      	bne.n	800386e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800384a:	4ba4      	ldr	r3, [pc, #656]	; (8003adc <HAL_RCC_OscConfig+0x7b8>)
 800384c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003850:	4aa2      	ldr	r2, [pc, #648]	; (8003adc <HAL_RCC_OscConfig+0x7b8>)
 8003852:	f043 0304 	orr.w	r3, r3, #4
 8003856:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800385a:	4ba0      	ldr	r3, [pc, #640]	; (8003adc <HAL_RCC_OscConfig+0x7b8>)
 800385c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	617b      	str	r3, [r7, #20]
 8003866:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8003868:	2301      	movs	r3, #1
 800386a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800386e:	4b9c      	ldr	r3, [pc, #624]	; (8003ae0 <HAL_RCC_OscConfig+0x7bc>)
 8003870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b00      	cmp	r3, #0
 8003878:	d119      	bne.n	80038ae <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800387a:	4b99      	ldr	r3, [pc, #612]	; (8003ae0 <HAL_RCC_OscConfig+0x7bc>)
 800387c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387e:	4a98      	ldr	r2, [pc, #608]	; (8003ae0 <HAL_RCC_OscConfig+0x7bc>)
 8003880:	f043 0301 	orr.w	r3, r3, #1
 8003884:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003886:	f7fd f965 	bl	8000b54 <HAL_GetTick>
 800388a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800388c:	e009      	b.n	80038a2 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800388e:	f7fd f961 	bl	8000b54 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d902      	bls.n	80038a2 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	f000 bc16 	b.w	80040ce <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80038a2:	4b8f      	ldr	r3, [pc, #572]	; (8003ae0 <HAL_RCC_OscConfig+0x7bc>)
 80038a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d0ef      	beq.n	800388e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d05f      	beq.n	8003976 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80038b6:	4b89      	ldr	r3, [pc, #548]	; (8003adc <HAL_RCC_OscConfig+0x7b8>)
 80038b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038bc:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	699a      	ldr	r2, [r3, #24]
 80038c2:	6a3b      	ldr	r3, [r7, #32]
 80038c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d037      	beq.n	800393c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80038cc:	6a3b      	ldr	r3, [r7, #32]
 80038ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d006      	beq.n	80038e4 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80038d6:	6a3b      	ldr	r3, [r7, #32]
 80038d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d101      	bne.n	80038e4 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e3f4      	b.n	80040ce <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80038e4:	6a3b      	ldr	r3, [r7, #32]
 80038e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d01b      	beq.n	8003926 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80038ee:	4b7b      	ldr	r3, [pc, #492]	; (8003adc <HAL_RCC_OscConfig+0x7b8>)
 80038f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038f4:	4a79      	ldr	r2, [pc, #484]	; (8003adc <HAL_RCC_OscConfig+0x7b8>)
 80038f6:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80038fa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 80038fe:	f7fd f929 	bl	8000b54 <HAL_GetTick>
 8003902:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003904:	e008      	b.n	8003918 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003906:	f7fd f925 	bl	8000b54 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b05      	cmp	r3, #5
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e3da      	b.n	80040ce <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003918:	4b70      	ldr	r3, [pc, #448]	; (8003adc <HAL_RCC_OscConfig+0x7b8>)
 800391a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800391e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1ef      	bne.n	8003906 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8003926:	4b6d      	ldr	r3, [pc, #436]	; (8003adc <HAL_RCC_OscConfig+0x7b8>)
 8003928:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800392c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	4969      	ldr	r1, [pc, #420]	; (8003adc <HAL_RCC_OscConfig+0x7b8>)
 8003936:	4313      	orrs	r3, r2
 8003938:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800393c:	4b67      	ldr	r3, [pc, #412]	; (8003adc <HAL_RCC_OscConfig+0x7b8>)
 800393e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003942:	4a66      	ldr	r2, [pc, #408]	; (8003adc <HAL_RCC_OscConfig+0x7b8>)
 8003944:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003948:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800394c:	f7fd f902 	bl	8000b54 <HAL_GetTick>
 8003950:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003952:	e008      	b.n	8003966 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003954:	f7fd f8fe 	bl	8000b54 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b05      	cmp	r3, #5
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e3b3      	b.n	80040ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003966:	4b5d      	ldr	r3, [pc, #372]	; (8003adc <HAL_RCC_OscConfig+0x7b8>)
 8003968:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800396c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0ef      	beq.n	8003954 <HAL_RCC_OscConfig+0x630>
 8003974:	e01b      	b.n	80039ae <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8003976:	4b59      	ldr	r3, [pc, #356]	; (8003adc <HAL_RCC_OscConfig+0x7b8>)
 8003978:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800397c:	4a57      	ldr	r2, [pc, #348]	; (8003adc <HAL_RCC_OscConfig+0x7b8>)
 800397e:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8003982:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8003986:	f7fd f8e5 	bl	8000b54 <HAL_GetTick>
 800398a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800398c:	e008      	b.n	80039a0 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800398e:	f7fd f8e1 	bl	8000b54 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b05      	cmp	r3, #5
 800399a:	d901      	bls.n	80039a0 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e396      	b.n	80040ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80039a0:	4b4e      	ldr	r3, [pc, #312]	; (8003adc <HAL_RCC_OscConfig+0x7b8>)
 80039a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80039a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1ef      	bne.n	800398e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039ae:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d107      	bne.n	80039c6 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039b6:	4b49      	ldr	r3, [pc, #292]	; (8003adc <HAL_RCC_OscConfig+0x7b8>)
 80039b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039bc:	4a47      	ldr	r2, [pc, #284]	; (8003adc <HAL_RCC_OscConfig+0x7b8>)
 80039be:	f023 0304 	bic.w	r3, r3, #4
 80039c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0304 	and.w	r3, r3, #4
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f000 8111 	beq.w	8003bf6 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80039d4:	2300      	movs	r3, #0
 80039d6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039da:	4b40      	ldr	r3, [pc, #256]	; (8003adc <HAL_RCC_OscConfig+0x7b8>)
 80039dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039e0:	f003 0304 	and.w	r3, r3, #4
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d111      	bne.n	8003a0c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039e8:	4b3c      	ldr	r3, [pc, #240]	; (8003adc <HAL_RCC_OscConfig+0x7b8>)
 80039ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039ee:	4a3b      	ldr	r2, [pc, #236]	; (8003adc <HAL_RCC_OscConfig+0x7b8>)
 80039f0:	f043 0304 	orr.w	r3, r3, #4
 80039f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80039f8:	4b38      	ldr	r3, [pc, #224]	; (8003adc <HAL_RCC_OscConfig+0x7b8>)
 80039fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039fe:	f003 0304 	and.w	r3, r3, #4
 8003a02:	613b      	str	r3, [r7, #16]
 8003a04:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8003a06:	2301      	movs	r3, #1
 8003a08:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003a0c:	4b34      	ldr	r3, [pc, #208]	; (8003ae0 <HAL_RCC_OscConfig+0x7bc>)
 8003a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d118      	bne.n	8003a4a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003a18:	4b31      	ldr	r3, [pc, #196]	; (8003ae0 <HAL_RCC_OscConfig+0x7bc>)
 8003a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a1c:	4a30      	ldr	r2, [pc, #192]	; (8003ae0 <HAL_RCC_OscConfig+0x7bc>)
 8003a1e:	f043 0301 	orr.w	r3, r3, #1
 8003a22:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a24:	f7fd f896 	bl	8000b54 <HAL_GetTick>
 8003a28:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003a2a:	e008      	b.n	8003a3e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a2c:	f7fd f892 	bl	8000b54 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e347      	b.n	80040ce <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003a3e:	4b28      	ldr	r3, [pc, #160]	; (8003ae0 <HAL_RCC_OscConfig+0x7bc>)
 8003a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d0f0      	beq.n	8003a2c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d01f      	beq.n	8003a96 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f003 0304 	and.w	r3, r3, #4
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d010      	beq.n	8003a84 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003a62:	4b1e      	ldr	r3, [pc, #120]	; (8003adc <HAL_RCC_OscConfig+0x7b8>)
 8003a64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a68:	4a1c      	ldr	r2, [pc, #112]	; (8003adc <HAL_RCC_OscConfig+0x7b8>)
 8003a6a:	f043 0304 	orr.w	r3, r3, #4
 8003a6e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003a72:	4b1a      	ldr	r3, [pc, #104]	; (8003adc <HAL_RCC_OscConfig+0x7b8>)
 8003a74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a78:	4a18      	ldr	r2, [pc, #96]	; (8003adc <HAL_RCC_OscConfig+0x7b8>)
 8003a7a:	f043 0301 	orr.w	r3, r3, #1
 8003a7e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003a82:	e018      	b.n	8003ab6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003a84:	4b15      	ldr	r3, [pc, #84]	; (8003adc <HAL_RCC_OscConfig+0x7b8>)
 8003a86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a8a:	4a14      	ldr	r2, [pc, #80]	; (8003adc <HAL_RCC_OscConfig+0x7b8>)
 8003a8c:	f043 0301 	orr.w	r3, r3, #1
 8003a90:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003a94:	e00f      	b.n	8003ab6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003a96:	4b11      	ldr	r3, [pc, #68]	; (8003adc <HAL_RCC_OscConfig+0x7b8>)
 8003a98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a9c:	4a0f      	ldr	r2, [pc, #60]	; (8003adc <HAL_RCC_OscConfig+0x7b8>)
 8003a9e:	f023 0301 	bic.w	r3, r3, #1
 8003aa2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003aa6:	4b0d      	ldr	r3, [pc, #52]	; (8003adc <HAL_RCC_OscConfig+0x7b8>)
 8003aa8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003aac:	4a0b      	ldr	r2, [pc, #44]	; (8003adc <HAL_RCC_OscConfig+0x7b8>)
 8003aae:	f023 0304 	bic.w	r3, r3, #4
 8003ab2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d057      	beq.n	8003b6e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8003abe:	f7fd f849 	bl	8000b54 <HAL_GetTick>
 8003ac2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ac4:	e00e      	b.n	8003ae4 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ac6:	f7fd f845 	bl	8000b54 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d905      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e2f8      	b.n	80040ce <HAL_RCC_OscConfig+0xdaa>
 8003adc:	46020c00 	.word	0x46020c00
 8003ae0:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ae4:	4b9c      	ldr	r3, [pc, #624]	; (8003d58 <HAL_RCC_OscConfig+0xa34>)
 8003ae6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d0e9      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d01b      	beq.n	8003b36 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003afe:	4b96      	ldr	r3, [pc, #600]	; (8003d58 <HAL_RCC_OscConfig+0xa34>)
 8003b00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b04:	4a94      	ldr	r2, [pc, #592]	; (8003d58 <HAL_RCC_OscConfig+0xa34>)
 8003b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b0a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003b0e:	e00a      	b.n	8003b26 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b10:	f7fd f820 	bl	8000b54 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e2d3      	b.n	80040ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003b26:	4b8c      	ldr	r3, [pc, #560]	; (8003d58 <HAL_RCC_OscConfig+0xa34>)
 8003b28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d0ed      	beq.n	8003b10 <HAL_RCC_OscConfig+0x7ec>
 8003b34:	e053      	b.n	8003bde <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003b36:	4b88      	ldr	r3, [pc, #544]	; (8003d58 <HAL_RCC_OscConfig+0xa34>)
 8003b38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b3c:	4a86      	ldr	r2, [pc, #536]	; (8003d58 <HAL_RCC_OscConfig+0xa34>)
 8003b3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b42:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003b46:	e00a      	b.n	8003b5e <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b48:	f7fd f804 	bl	8000b54 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e2b7      	b.n	80040ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003b5e:	4b7e      	ldr	r3, [pc, #504]	; (8003d58 <HAL_RCC_OscConfig+0xa34>)
 8003b60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1ed      	bne.n	8003b48 <HAL_RCC_OscConfig+0x824>
 8003b6c:	e037      	b.n	8003bde <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8003b6e:	f7fc fff1 	bl	8000b54 <HAL_GetTick>
 8003b72:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b74:	e00a      	b.n	8003b8c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b76:	f7fc ffed 	bl	8000b54 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e2a0      	b.n	80040ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b8c:	4b72      	ldr	r3, [pc, #456]	; (8003d58 <HAL_RCC_OscConfig+0xa34>)
 8003b8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1ed      	bne.n	8003b76 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003b9a:	4b6f      	ldr	r3, [pc, #444]	; (8003d58 <HAL_RCC_OscConfig+0xa34>)
 8003b9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d01a      	beq.n	8003bde <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003ba8:	4b6b      	ldr	r3, [pc, #428]	; (8003d58 <HAL_RCC_OscConfig+0xa34>)
 8003baa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003bae:	4a6a      	ldr	r2, [pc, #424]	; (8003d58 <HAL_RCC_OscConfig+0xa34>)
 8003bb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bb4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003bb8:	e00a      	b.n	8003bd0 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bba:	f7fc ffcb 	bl	8000b54 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d901      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e27e      	b.n	80040ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003bd0:	4b61      	ldr	r3, [pc, #388]	; (8003d58 <HAL_RCC_OscConfig+0xa34>)
 8003bd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003bd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1ed      	bne.n	8003bba <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bde:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d107      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003be6:	4b5c      	ldr	r3, [pc, #368]	; (8003d58 <HAL_RCC_OscConfig+0xa34>)
 8003be8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bec:	4a5a      	ldr	r2, [pc, #360]	; (8003d58 <HAL_RCC_OscConfig+0xa34>)
 8003bee:	f023 0304 	bic.w	r3, r3, #4
 8003bf2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0320 	and.w	r3, r3, #32
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d036      	beq.n	8003c70 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d019      	beq.n	8003c3e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8003c0a:	4b53      	ldr	r3, [pc, #332]	; (8003d58 <HAL_RCC_OscConfig+0xa34>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a52      	ldr	r2, [pc, #328]	; (8003d58 <HAL_RCC_OscConfig+0xa34>)
 8003c10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c14:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003c16:	f7fc ff9d 	bl	8000b54 <HAL_GetTick>
 8003c1a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003c1c:	e008      	b.n	8003c30 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c1e:	f7fc ff99 	bl	8000b54 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e24e      	b.n	80040ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003c30:	4b49      	ldr	r3, [pc, #292]	; (8003d58 <HAL_RCC_OscConfig+0xa34>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d0f0      	beq.n	8003c1e <HAL_RCC_OscConfig+0x8fa>
 8003c3c:	e018      	b.n	8003c70 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8003c3e:	4b46      	ldr	r3, [pc, #280]	; (8003d58 <HAL_RCC_OscConfig+0xa34>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a45      	ldr	r2, [pc, #276]	; (8003d58 <HAL_RCC_OscConfig+0xa34>)
 8003c44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c48:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003c4a:	f7fc ff83 	bl	8000b54 <HAL_GetTick>
 8003c4e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003c50:	e008      	b.n	8003c64 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c52:	f7fc ff7f 	bl	8000b54 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d901      	bls.n	8003c64 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e234      	b.n	80040ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003c64:	4b3c      	ldr	r3, [pc, #240]	; (8003d58 <HAL_RCC_OscConfig+0xa34>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1f0      	bne.n	8003c52 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d036      	beq.n	8003cea <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d019      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8003c84:	4b34      	ldr	r3, [pc, #208]	; (8003d58 <HAL_RCC_OscConfig+0xa34>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a33      	ldr	r2, [pc, #204]	; (8003d58 <HAL_RCC_OscConfig+0xa34>)
 8003c8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c8e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003c90:	f7fc ff60 	bl	8000b54 <HAL_GetTick>
 8003c94:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003c98:	f7fc ff5c 	bl	8000b54 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e211      	b.n	80040ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003caa:	4b2b      	ldr	r3, [pc, #172]	; (8003d58 <HAL_RCC_OscConfig+0xa34>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d0f0      	beq.n	8003c98 <HAL_RCC_OscConfig+0x974>
 8003cb6:	e018      	b.n	8003cea <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8003cb8:	4b27      	ldr	r3, [pc, #156]	; (8003d58 <HAL_RCC_OscConfig+0xa34>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a26      	ldr	r2, [pc, #152]	; (8003d58 <HAL_RCC_OscConfig+0xa34>)
 8003cbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cc2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003cc4:	f7fc ff46 	bl	8000b54 <HAL_GetTick>
 8003cc8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003cca:	e008      	b.n	8003cde <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003ccc:	f7fc ff42 	bl	8000b54 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e1f7      	b.n	80040ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003cde:	4b1e      	ldr	r3, [pc, #120]	; (8003d58 <HAL_RCC_OscConfig+0xa34>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1f0      	bne.n	8003ccc <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d07f      	beq.n	8003df6 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d062      	beq.n	8003dc4 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8003cfe:	4b16      	ldr	r3, [pc, #88]	; (8003d58 <HAL_RCC_OscConfig+0xa34>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	4a15      	ldr	r2, [pc, #84]	; (8003d58 <HAL_RCC_OscConfig+0xa34>)
 8003d04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d08:	6093      	str	r3, [r2, #8]
 8003d0a:	4b13      	ldr	r3, [pc, #76]	; (8003d58 <HAL_RCC_OscConfig+0xa34>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d16:	4910      	ldr	r1, [pc, #64]	; (8003d58 <HAL_RCC_OscConfig+0xa34>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d20:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003d24:	d309      	bcc.n	8003d3a <HAL_RCC_OscConfig+0xa16>
 8003d26:	4b0c      	ldr	r3, [pc, #48]	; (8003d58 <HAL_RCC_OscConfig+0xa34>)
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	f023 021f 	bic.w	r2, r3, #31
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	4909      	ldr	r1, [pc, #36]	; (8003d58 <HAL_RCC_OscConfig+0xa34>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	60cb      	str	r3, [r1, #12]
 8003d38:	e02a      	b.n	8003d90 <HAL_RCC_OscConfig+0xa6c>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	da0c      	bge.n	8003d5c <HAL_RCC_OscConfig+0xa38>
 8003d42:	4b05      	ldr	r3, [pc, #20]	; (8003d58 <HAL_RCC_OscConfig+0xa34>)
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	015b      	lsls	r3, r3, #5
 8003d50:	4901      	ldr	r1, [pc, #4]	; (8003d58 <HAL_RCC_OscConfig+0xa34>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	60cb      	str	r3, [r1, #12]
 8003d56:	e01b      	b.n	8003d90 <HAL_RCC_OscConfig+0xa6c>
 8003d58:	46020c00 	.word	0x46020c00
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d64:	d30a      	bcc.n	8003d7c <HAL_RCC_OscConfig+0xa58>
 8003d66:	4ba1      	ldr	r3, [pc, #644]	; (8003fec <HAL_RCC_OscConfig+0xcc8>)
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	029b      	lsls	r3, r3, #10
 8003d74:	499d      	ldr	r1, [pc, #628]	; (8003fec <HAL_RCC_OscConfig+0xcc8>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	60cb      	str	r3, [r1, #12]
 8003d7a:	e009      	b.n	8003d90 <HAL_RCC_OscConfig+0xa6c>
 8003d7c:	4b9b      	ldr	r3, [pc, #620]	; (8003fec <HAL_RCC_OscConfig+0xcc8>)
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	03db      	lsls	r3, r3, #15
 8003d8a:	4998      	ldr	r1, [pc, #608]	; (8003fec <HAL_RCC_OscConfig+0xcc8>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8003d90:	4b96      	ldr	r3, [pc, #600]	; (8003fec <HAL_RCC_OscConfig+0xcc8>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a95      	ldr	r2, [pc, #596]	; (8003fec <HAL_RCC_OscConfig+0xcc8>)
 8003d96:	f043 0310 	orr.w	r3, r3, #16
 8003d9a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003d9c:	f7fc feda 	bl	8000b54 <HAL_GetTick>
 8003da0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003da2:	e008      	b.n	8003db6 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003da4:	f7fc fed6 	bl	8000b54 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e18b      	b.n	80040ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003db6:	4b8d      	ldr	r3, [pc, #564]	; (8003fec <HAL_RCC_OscConfig+0xcc8>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0320 	and.w	r3, r3, #32
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d0f0      	beq.n	8003da4 <HAL_RCC_OscConfig+0xa80>
 8003dc2:	e018      	b.n	8003df6 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8003dc4:	4b89      	ldr	r3, [pc, #548]	; (8003fec <HAL_RCC_OscConfig+0xcc8>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a88      	ldr	r2, [pc, #544]	; (8003fec <HAL_RCC_OscConfig+0xcc8>)
 8003dca:	f023 0310 	bic.w	r3, r3, #16
 8003dce:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003dd0:	f7fc fec0 	bl	8000b54 <HAL_GetTick>
 8003dd4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003dd8:	f7fc febc 	bl	8000b54 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e171      	b.n	80040ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003dea:	4b80      	ldr	r3, [pc, #512]	; (8003fec <HAL_RCC_OscConfig+0xcc8>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0320 	and.w	r3, r3, #32
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1f0      	bne.n	8003dd8 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	f000 8166 	beq.w	80040cc <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8003e00:	2300      	movs	r3, #0
 8003e02:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e06:	4b79      	ldr	r3, [pc, #484]	; (8003fec <HAL_RCC_OscConfig+0xcc8>)
 8003e08:	69db      	ldr	r3, [r3, #28]
 8003e0a:	f003 030c 	and.w	r3, r3, #12
 8003e0e:	2b0c      	cmp	r3, #12
 8003e10:	f000 80f2 	beq.w	8003ff8 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	f040 80c5 	bne.w	8003fa8 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003e1e:	4b73      	ldr	r3, [pc, #460]	; (8003fec <HAL_RCC_OscConfig+0xcc8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a72      	ldr	r2, [pc, #456]	; (8003fec <HAL_RCC_OscConfig+0xcc8>)
 8003e24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e28:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003e2a:	f7fc fe93 	bl	8000b54 <HAL_GetTick>
 8003e2e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003e30:	e008      	b.n	8003e44 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e32:	f7fc fe8f 	bl	8000b54 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d901      	bls.n	8003e44 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e144      	b.n	80040ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003e44:	4b69      	ldr	r3, [pc, #420]	; (8003fec <HAL_RCC_OscConfig+0xcc8>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1f0      	bne.n	8003e32 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e50:	4b66      	ldr	r3, [pc, #408]	; (8003fec <HAL_RCC_OscConfig+0xcc8>)
 8003e52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e56:	f003 0304 	and.w	r3, r3, #4
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d111      	bne.n	8003e82 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8003e5e:	4b63      	ldr	r3, [pc, #396]	; (8003fec <HAL_RCC_OscConfig+0xcc8>)
 8003e60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e64:	4a61      	ldr	r2, [pc, #388]	; (8003fec <HAL_RCC_OscConfig+0xcc8>)
 8003e66:	f043 0304 	orr.w	r3, r3, #4
 8003e6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003e6e:	4b5f      	ldr	r3, [pc, #380]	; (8003fec <HAL_RCC_OscConfig+0xcc8>)
 8003e70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e74:	f003 0304 	and.w	r3, r3, #4
 8003e78:	60fb      	str	r3, [r7, #12]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8003e82:	4b5b      	ldr	r3, [pc, #364]	; (8003ff0 <HAL_RCC_OscConfig+0xccc>)
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e8e:	d102      	bne.n	8003e96 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8003e90:	2301      	movs	r3, #1
 8003e92:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003e96:	4b56      	ldr	r3, [pc, #344]	; (8003ff0 <HAL_RCC_OscConfig+0xccc>)
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	4a55      	ldr	r2, [pc, #340]	; (8003ff0 <HAL_RCC_OscConfig+0xccc>)
 8003e9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ea0:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8003ea2:	4b52      	ldr	r3, [pc, #328]	; (8003fec <HAL_RCC_OscConfig+0xcc8>)
 8003ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003eaa:	f023 0303 	bic.w	r3, r3, #3
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003eb6:	3a01      	subs	r2, #1
 8003eb8:	0212      	lsls	r2, r2, #8
 8003eba:	4311      	orrs	r1, r2
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	494a      	ldr	r1, [pc, #296]	; (8003fec <HAL_RCC_OscConfig+0xcc8>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	628b      	str	r3, [r1, #40]	; 0x28
 8003ec8:	4b48      	ldr	r3, [pc, #288]	; (8003fec <HAL_RCC_OscConfig+0xcc8>)
 8003eca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ecc:	4b49      	ldr	r3, [pc, #292]	; (8003ff4 <HAL_RCC_OscConfig+0xcd0>)
 8003ece:	4013      	ands	r3, r2
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003ed4:	3a01      	subs	r2, #1
 8003ed6:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003ede:	3a01      	subs	r2, #1
 8003ee0:	0252      	lsls	r2, r2, #9
 8003ee2:	b292      	uxth	r2, r2
 8003ee4:	4311      	orrs	r1, r2
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003eea:	3a01      	subs	r2, #1
 8003eec:	0412      	lsls	r2, r2, #16
 8003eee:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8003ef2:	4311      	orrs	r1, r2
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003ef8:	3a01      	subs	r2, #1
 8003efa:	0612      	lsls	r2, r2, #24
 8003efc:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8003f00:	430a      	orrs	r2, r1
 8003f02:	493a      	ldr	r1, [pc, #232]	; (8003fec <HAL_RCC_OscConfig+0xcc8>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8003f08:	4b38      	ldr	r3, [pc, #224]	; (8003fec <HAL_RCC_OscConfig+0xcc8>)
 8003f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0c:	4a37      	ldr	r2, [pc, #220]	; (8003fec <HAL_RCC_OscConfig+0xcc8>)
 8003f0e:	f023 0310 	bic.w	r3, r3, #16
 8003f12:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f18:	4a34      	ldr	r2, [pc, #208]	; (8003fec <HAL_RCC_OscConfig+0xcc8>)
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8003f1e:	4b33      	ldr	r3, [pc, #204]	; (8003fec <HAL_RCC_OscConfig+0xcc8>)
 8003f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f22:	4a32      	ldr	r2, [pc, #200]	; (8003fec <HAL_RCC_OscConfig+0xcc8>)
 8003f24:	f043 0310 	orr.w	r3, r3, #16
 8003f28:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8003f2a:	4b30      	ldr	r3, [pc, #192]	; (8003fec <HAL_RCC_OscConfig+0xcc8>)
 8003f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2e:	f023 020c 	bic.w	r2, r3, #12
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f36:	492d      	ldr	r1, [pc, #180]	; (8003fec <HAL_RCC_OscConfig+0xcc8>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8003f3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d105      	bne.n	8003f50 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003f44:	4b2a      	ldr	r3, [pc, #168]	; (8003ff0 <HAL_RCC_OscConfig+0xccc>)
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	4a29      	ldr	r2, [pc, #164]	; (8003ff0 <HAL_RCC_OscConfig+0xccc>)
 8003f4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f4e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8003f50:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d107      	bne.n	8003f68 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8003f58:	4b24      	ldr	r3, [pc, #144]	; (8003fec <HAL_RCC_OscConfig+0xcc8>)
 8003f5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f5e:	4a23      	ldr	r2, [pc, #140]	; (8003fec <HAL_RCC_OscConfig+0xcc8>)
 8003f60:	f023 0304 	bic.w	r3, r3, #4
 8003f64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003f68:	4b20      	ldr	r3, [pc, #128]	; (8003fec <HAL_RCC_OscConfig+0xcc8>)
 8003f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6c:	4a1f      	ldr	r2, [pc, #124]	; (8003fec <HAL_RCC_OscConfig+0xcc8>)
 8003f6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f72:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8003f74:	4b1d      	ldr	r3, [pc, #116]	; (8003fec <HAL_RCC_OscConfig+0xcc8>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a1c      	ldr	r2, [pc, #112]	; (8003fec <HAL_RCC_OscConfig+0xcc8>)
 8003f7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f7e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003f80:	f7fc fde8 	bl	8000b54 <HAL_GetTick>
 8003f84:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f88:	f7fc fde4 	bl	8000b54 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e099      	b.n	80040ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003f9a:	4b14      	ldr	r3, [pc, #80]	; (8003fec <HAL_RCC_OscConfig+0xcc8>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d0f0      	beq.n	8003f88 <HAL_RCC_OscConfig+0xc64>
 8003fa6:	e091      	b.n	80040cc <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003fa8:	4b10      	ldr	r3, [pc, #64]	; (8003fec <HAL_RCC_OscConfig+0xcc8>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a0f      	ldr	r2, [pc, #60]	; (8003fec <HAL_RCC_OscConfig+0xcc8>)
 8003fae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fb2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003fb4:	f7fc fdce 	bl	8000b54 <HAL_GetTick>
 8003fb8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fbc:	f7fc fdca 	bl	8000b54 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e07f      	b.n	80040ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003fce:	4b07      	ldr	r3, [pc, #28]	; (8003fec <HAL_RCC_OscConfig+0xcc8>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1f0      	bne.n	8003fbc <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003fda:	4b04      	ldr	r3, [pc, #16]	; (8003fec <HAL_RCC_OscConfig+0xcc8>)
 8003fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fde:	4a03      	ldr	r2, [pc, #12]	; (8003fec <HAL_RCC_OscConfig+0xcc8>)
 8003fe0:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8003fe4:	f023 0303 	bic.w	r3, r3, #3
 8003fe8:	6293      	str	r3, [r2, #40]	; 0x28
 8003fea:	e06f      	b.n	80040cc <HAL_RCC_OscConfig+0xda8>
 8003fec:	46020c00 	.word	0x46020c00
 8003ff0:	46020800 	.word	0x46020800
 8003ff4:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003ff8:	4b37      	ldr	r3, [pc, #220]	; (80040d8 <HAL_RCC_OscConfig+0xdb4>)
 8003ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffc:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003ffe:	4b36      	ldr	r3, [pc, #216]	; (80040d8 <HAL_RCC_OscConfig+0xdb4>)
 8004000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004002:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004008:	2b01      	cmp	r3, #1
 800400a:	d039      	beq.n	8004080 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	f003 0203 	and.w	r2, r3, #3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004016:	429a      	cmp	r2, r3
 8004018:	d132      	bne.n	8004080 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	0a1b      	lsrs	r3, r3, #8
 800401e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004026:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004028:	429a      	cmp	r2, r3
 800402a:	d129      	bne.n	8004080 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004036:	429a      	cmp	r2, r3
 8004038:	d122      	bne.n	8004080 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004044:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004046:	429a      	cmp	r2, r3
 8004048:	d11a      	bne.n	8004080 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	0a5b      	lsrs	r3, r3, #9
 800404e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004056:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004058:	429a      	cmp	r2, r3
 800405a:	d111      	bne.n	8004080 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	0c1b      	lsrs	r3, r3, #16
 8004060:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004068:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800406a:	429a      	cmp	r2, r3
 800406c:	d108      	bne.n	8004080 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	0e1b      	lsrs	r3, r3, #24
 8004072:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800407a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800407c:	429a      	cmp	r2, r3
 800407e:	d001      	beq.n	8004084 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e024      	b.n	80040ce <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004084:	4b14      	ldr	r3, [pc, #80]	; (80040d8 <HAL_RCC_OscConfig+0xdb4>)
 8004086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004088:	08db      	lsrs	r3, r3, #3
 800408a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004092:	429a      	cmp	r2, r3
 8004094:	d01a      	beq.n	80040cc <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004096:	4b10      	ldr	r3, [pc, #64]	; (80040d8 <HAL_RCC_OscConfig+0xdb4>)
 8004098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409a:	4a0f      	ldr	r2, [pc, #60]	; (80040d8 <HAL_RCC_OscConfig+0xdb4>)
 800409c:	f023 0310 	bic.w	r3, r3, #16
 80040a0:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a2:	f7fc fd57 	bl	8000b54 <HAL_GetTick>
 80040a6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80040a8:	bf00      	nop
 80040aa:	f7fc fd53 	bl	8000b54 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d0f9      	beq.n	80040aa <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ba:	4a07      	ldr	r2, [pc, #28]	; (80040d8 <HAL_RCC_OscConfig+0xdb4>)
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80040c0:	4b05      	ldr	r3, [pc, #20]	; (80040d8 <HAL_RCC_OscConfig+0xdb4>)
 80040c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c4:	4a04      	ldr	r2, [pc, #16]	; (80040d8 <HAL_RCC_OscConfig+0xdb4>)
 80040c6:	f043 0310 	orr.w	r3, r3, #16
 80040ca:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3738      	adds	r7, #56	; 0x38
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	46020c00 	.word	0x46020c00

080040dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d101      	bne.n	80040f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e1d9      	b.n	80044a4 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040f0:	4b9b      	ldr	r3, [pc, #620]	; (8004360 <HAL_RCC_ClockConfig+0x284>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 030f 	and.w	r3, r3, #15
 80040f8:	683a      	ldr	r2, [r7, #0]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d910      	bls.n	8004120 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040fe:	4b98      	ldr	r3, [pc, #608]	; (8004360 <HAL_RCC_ClockConfig+0x284>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f023 020f 	bic.w	r2, r3, #15
 8004106:	4996      	ldr	r1, [pc, #600]	; (8004360 <HAL_RCC_ClockConfig+0x284>)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	4313      	orrs	r3, r2
 800410c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800410e:	4b94      	ldr	r3, [pc, #592]	; (8004360 <HAL_RCC_ClockConfig+0x284>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 030f 	and.w	r3, r3, #15
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	429a      	cmp	r2, r3
 800411a:	d001      	beq.n	8004120 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e1c1      	b.n	80044a4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0310 	and.w	r3, r3, #16
 8004128:	2b00      	cmp	r3, #0
 800412a:	d010      	beq.n	800414e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	695a      	ldr	r2, [r3, #20]
 8004130:	4b8c      	ldr	r3, [pc, #560]	; (8004364 <HAL_RCC_ClockConfig+0x288>)
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004138:	429a      	cmp	r2, r3
 800413a:	d908      	bls.n	800414e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800413c:	4b89      	ldr	r3, [pc, #548]	; (8004364 <HAL_RCC_ClockConfig+0x288>)
 800413e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004140:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	4986      	ldr	r1, [pc, #536]	; (8004364 <HAL_RCC_ClockConfig+0x288>)
 800414a:	4313      	orrs	r3, r2
 800414c:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0308 	and.w	r3, r3, #8
 8004156:	2b00      	cmp	r3, #0
 8004158:	d012      	beq.n	8004180 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	691a      	ldr	r2, [r3, #16]
 800415e:	4b81      	ldr	r3, [pc, #516]	; (8004364 <HAL_RCC_ClockConfig+0x288>)
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	091b      	lsrs	r3, r3, #4
 8004164:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004168:	429a      	cmp	r2, r3
 800416a:	d909      	bls.n	8004180 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800416c:	4b7d      	ldr	r3, [pc, #500]	; (8004364 <HAL_RCC_ClockConfig+0x288>)
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	011b      	lsls	r3, r3, #4
 800417a:	497a      	ldr	r1, [pc, #488]	; (8004364 <HAL_RCC_ClockConfig+0x288>)
 800417c:	4313      	orrs	r3, r2
 800417e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0304 	and.w	r3, r3, #4
 8004188:	2b00      	cmp	r3, #0
 800418a:	d010      	beq.n	80041ae <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	68da      	ldr	r2, [r3, #12]
 8004190:	4b74      	ldr	r3, [pc, #464]	; (8004364 <HAL_RCC_ClockConfig+0x288>)
 8004192:	6a1b      	ldr	r3, [r3, #32]
 8004194:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004198:	429a      	cmp	r2, r3
 800419a:	d908      	bls.n	80041ae <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800419c:	4b71      	ldr	r3, [pc, #452]	; (8004364 <HAL_RCC_ClockConfig+0x288>)
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	496e      	ldr	r1, [pc, #440]	; (8004364 <HAL_RCC_ClockConfig+0x288>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d010      	beq.n	80041dc <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	689a      	ldr	r2, [r3, #8]
 80041be:	4b69      	ldr	r3, [pc, #420]	; (8004364 <HAL_RCC_ClockConfig+0x288>)
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	f003 030f 	and.w	r3, r3, #15
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d908      	bls.n	80041dc <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80041ca:	4b66      	ldr	r3, [pc, #408]	; (8004364 <HAL_RCC_ClockConfig+0x288>)
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	f023 020f 	bic.w	r2, r3, #15
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	4963      	ldr	r1, [pc, #396]	; (8004364 <HAL_RCC_ClockConfig+0x288>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0301 	and.w	r3, r3, #1
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f000 80d2 	beq.w	800438e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80041ea:	2300      	movs	r3, #0
 80041ec:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	2b03      	cmp	r3, #3
 80041f4:	d143      	bne.n	800427e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041f6:	4b5b      	ldr	r3, [pc, #364]	; (8004364 <HAL_RCC_ClockConfig+0x288>)
 80041f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041fc:	f003 0304 	and.w	r3, r3, #4
 8004200:	2b00      	cmp	r3, #0
 8004202:	d110      	bne.n	8004226 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004204:	4b57      	ldr	r3, [pc, #348]	; (8004364 <HAL_RCC_ClockConfig+0x288>)
 8004206:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800420a:	4a56      	ldr	r2, [pc, #344]	; (8004364 <HAL_RCC_ClockConfig+0x288>)
 800420c:	f043 0304 	orr.w	r3, r3, #4
 8004210:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004214:	4b53      	ldr	r3, [pc, #332]	; (8004364 <HAL_RCC_ClockConfig+0x288>)
 8004216:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800421a:	f003 0304 	and.w	r3, r3, #4
 800421e:	60bb      	str	r3, [r7, #8]
 8004220:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8004222:	2301      	movs	r3, #1
 8004224:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8004226:	f7fc fc95 	bl	8000b54 <HAL_GetTick>
 800422a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800422c:	4b4e      	ldr	r3, [pc, #312]	; (8004368 <HAL_RCC_ClockConfig+0x28c>)
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00f      	beq.n	8004258 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004238:	e008      	b.n	800424c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800423a:	f7fc fc8b 	bl	8000b54 <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	2b02      	cmp	r3, #2
 8004246:	d901      	bls.n	800424c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e12b      	b.n	80044a4 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800424c:	4b46      	ldr	r3, [pc, #280]	; (8004368 <HAL_RCC_ClockConfig+0x28c>)
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d0f0      	beq.n	800423a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004258:	7dfb      	ldrb	r3, [r7, #23]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d107      	bne.n	800426e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800425e:	4b41      	ldr	r3, [pc, #260]	; (8004364 <HAL_RCC_ClockConfig+0x288>)
 8004260:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004264:	4a3f      	ldr	r2, [pc, #252]	; (8004364 <HAL_RCC_ClockConfig+0x288>)
 8004266:	f023 0304 	bic.w	r3, r3, #4
 800426a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800426e:	4b3d      	ldr	r3, [pc, #244]	; (8004364 <HAL_RCC_ClockConfig+0x288>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d121      	bne.n	80042be <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e112      	b.n	80044a4 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	2b02      	cmp	r3, #2
 8004284:	d107      	bne.n	8004296 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004286:	4b37      	ldr	r3, [pc, #220]	; (8004364 <HAL_RCC_ClockConfig+0x288>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d115      	bne.n	80042be <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e106      	b.n	80044a4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d107      	bne.n	80042ae <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800429e:	4b31      	ldr	r3, [pc, #196]	; (8004364 <HAL_RCC_ClockConfig+0x288>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0304 	and.w	r3, r3, #4
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d109      	bne.n	80042be <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e0fa      	b.n	80044a4 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042ae:	4b2d      	ldr	r3, [pc, #180]	; (8004364 <HAL_RCC_ClockConfig+0x288>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e0f2      	b.n	80044a4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80042be:	4b29      	ldr	r3, [pc, #164]	; (8004364 <HAL_RCC_ClockConfig+0x288>)
 80042c0:	69db      	ldr	r3, [r3, #28]
 80042c2:	f023 0203 	bic.w	r2, r3, #3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	4926      	ldr	r1, [pc, #152]	; (8004364 <HAL_RCC_ClockConfig+0x288>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80042d0:	f7fc fc40 	bl	8000b54 <HAL_GetTick>
 80042d4:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	2b03      	cmp	r3, #3
 80042dc:	d112      	bne.n	8004304 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042de:	e00a      	b.n	80042f6 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042e0:	f7fc fc38 	bl	8000b54 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e0d6      	b.n	80044a4 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042f6:	4b1b      	ldr	r3, [pc, #108]	; (8004364 <HAL_RCC_ClockConfig+0x288>)
 80042f8:	69db      	ldr	r3, [r3, #28]
 80042fa:	f003 030c 	and.w	r3, r3, #12
 80042fe:	2b0c      	cmp	r3, #12
 8004300:	d1ee      	bne.n	80042e0 <HAL_RCC_ClockConfig+0x204>
 8004302:	e044      	b.n	800438e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	2b02      	cmp	r3, #2
 800430a:	d112      	bne.n	8004332 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800430c:	e00a      	b.n	8004324 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800430e:	f7fc fc21 	bl	8000b54 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	f241 3288 	movw	r2, #5000	; 0x1388
 800431c:	4293      	cmp	r3, r2
 800431e:	d901      	bls.n	8004324 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e0bf      	b.n	80044a4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004324:	4b0f      	ldr	r3, [pc, #60]	; (8004364 <HAL_RCC_ClockConfig+0x288>)
 8004326:	69db      	ldr	r3, [r3, #28]
 8004328:	f003 030c 	and.w	r3, r3, #12
 800432c:	2b08      	cmp	r3, #8
 800432e:	d1ee      	bne.n	800430e <HAL_RCC_ClockConfig+0x232>
 8004330:	e02d      	b.n	800438e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d123      	bne.n	8004382 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800433a:	e00a      	b.n	8004352 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800433c:	f7fc fc0a 	bl	8000b54 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	f241 3288 	movw	r2, #5000	; 0x1388
 800434a:	4293      	cmp	r3, r2
 800434c:	d901      	bls.n	8004352 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e0a8      	b.n	80044a4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004352:	4b04      	ldr	r3, [pc, #16]	; (8004364 <HAL_RCC_ClockConfig+0x288>)
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	f003 030c 	and.w	r3, r3, #12
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1ee      	bne.n	800433c <HAL_RCC_ClockConfig+0x260>
 800435e:	e016      	b.n	800438e <HAL_RCC_ClockConfig+0x2b2>
 8004360:	40022000 	.word	0x40022000
 8004364:	46020c00 	.word	0x46020c00
 8004368:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800436c:	f7fc fbf2 	bl	8000b54 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	f241 3288 	movw	r2, #5000	; 0x1388
 800437a:	4293      	cmp	r3, r2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e090      	b.n	80044a4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004382:	4b4a      	ldr	r3, [pc, #296]	; (80044ac <HAL_RCC_ClockConfig+0x3d0>)
 8004384:	69db      	ldr	r3, [r3, #28]
 8004386:	f003 030c 	and.w	r3, r3, #12
 800438a:	2b04      	cmp	r3, #4
 800438c:	d1ee      	bne.n	800436c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d010      	beq.n	80043bc <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	689a      	ldr	r2, [r3, #8]
 800439e:	4b43      	ldr	r3, [pc, #268]	; (80044ac <HAL_RCC_ClockConfig+0x3d0>)
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	f003 030f 	and.w	r3, r3, #15
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d208      	bcs.n	80043bc <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80043aa:	4b40      	ldr	r3, [pc, #256]	; (80044ac <HAL_RCC_ClockConfig+0x3d0>)
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	f023 020f 	bic.w	r2, r3, #15
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	493d      	ldr	r1, [pc, #244]	; (80044ac <HAL_RCC_ClockConfig+0x3d0>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043bc:	4b3c      	ldr	r3, [pc, #240]	; (80044b0 <HAL_RCC_ClockConfig+0x3d4>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 030f 	and.w	r3, r3, #15
 80043c4:	683a      	ldr	r2, [r7, #0]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d210      	bcs.n	80043ec <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ca:	4b39      	ldr	r3, [pc, #228]	; (80044b0 <HAL_RCC_ClockConfig+0x3d4>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f023 020f 	bic.w	r2, r3, #15
 80043d2:	4937      	ldr	r1, [pc, #220]	; (80044b0 <HAL_RCC_ClockConfig+0x3d4>)
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043da:	4b35      	ldr	r3, [pc, #212]	; (80044b0 <HAL_RCC_ClockConfig+0x3d4>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 030f 	and.w	r3, r3, #15
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d001      	beq.n	80043ec <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e05b      	b.n	80044a4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0304 	and.w	r3, r3, #4
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d010      	beq.n	800441a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	68da      	ldr	r2, [r3, #12]
 80043fc:	4b2b      	ldr	r3, [pc, #172]	; (80044ac <HAL_RCC_ClockConfig+0x3d0>)
 80043fe:	6a1b      	ldr	r3, [r3, #32]
 8004400:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004404:	429a      	cmp	r2, r3
 8004406:	d208      	bcs.n	800441a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004408:	4b28      	ldr	r3, [pc, #160]	; (80044ac <HAL_RCC_ClockConfig+0x3d0>)
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	4925      	ldr	r1, [pc, #148]	; (80044ac <HAL_RCC_ClockConfig+0x3d0>)
 8004416:	4313      	orrs	r3, r2
 8004418:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0308 	and.w	r3, r3, #8
 8004422:	2b00      	cmp	r3, #0
 8004424:	d012      	beq.n	800444c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	691a      	ldr	r2, [r3, #16]
 800442a:	4b20      	ldr	r3, [pc, #128]	; (80044ac <HAL_RCC_ClockConfig+0x3d0>)
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	091b      	lsrs	r3, r3, #4
 8004430:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004434:	429a      	cmp	r2, r3
 8004436:	d209      	bcs.n	800444c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004438:	4b1c      	ldr	r3, [pc, #112]	; (80044ac <HAL_RCC_ClockConfig+0x3d0>)
 800443a:	6a1b      	ldr	r3, [r3, #32]
 800443c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	011b      	lsls	r3, r3, #4
 8004446:	4919      	ldr	r1, [pc, #100]	; (80044ac <HAL_RCC_ClockConfig+0x3d0>)
 8004448:	4313      	orrs	r3, r2
 800444a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0310 	and.w	r3, r3, #16
 8004454:	2b00      	cmp	r3, #0
 8004456:	d010      	beq.n	800447a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	695a      	ldr	r2, [r3, #20]
 800445c:	4b13      	ldr	r3, [pc, #76]	; (80044ac <HAL_RCC_ClockConfig+0x3d0>)
 800445e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004460:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004464:	429a      	cmp	r2, r3
 8004466:	d208      	bcs.n	800447a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8004468:	4b10      	ldr	r3, [pc, #64]	; (80044ac <HAL_RCC_ClockConfig+0x3d0>)
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	490d      	ldr	r1, [pc, #52]	; (80044ac <HAL_RCC_ClockConfig+0x3d0>)
 8004476:	4313      	orrs	r3, r2
 8004478:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800447a:	f000 f821 	bl	80044c0 <HAL_RCC_GetSysClockFreq>
 800447e:	4602      	mov	r2, r0
 8004480:	4b0a      	ldr	r3, [pc, #40]	; (80044ac <HAL_RCC_ClockConfig+0x3d0>)
 8004482:	6a1b      	ldr	r3, [r3, #32]
 8004484:	f003 030f 	and.w	r3, r3, #15
 8004488:	490a      	ldr	r1, [pc, #40]	; (80044b4 <HAL_RCC_ClockConfig+0x3d8>)
 800448a:	5ccb      	ldrb	r3, [r1, r3]
 800448c:	fa22 f303 	lsr.w	r3, r2, r3
 8004490:	4a09      	ldr	r2, [pc, #36]	; (80044b8 <HAL_RCC_ClockConfig+0x3dc>)
 8004492:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004494:	4b09      	ldr	r3, [pc, #36]	; (80044bc <HAL_RCC_ClockConfig+0x3e0>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4618      	mov	r0, r3
 800449a:	f7fc fb11 	bl	8000ac0 <HAL_InitTick>
 800449e:	4603      	mov	r3, r0
 80044a0:	73fb      	strb	r3, [r7, #15]

  return status;
 80044a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3718      	adds	r7, #24
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	46020c00 	.word	0x46020c00
 80044b0:	40022000 	.word	0x40022000
 80044b4:	0800565c 	.word	0x0800565c
 80044b8:	20000008 	.word	0x20000008
 80044bc:	2000000c 	.word	0x2000000c

080044c0 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b08b      	sub	sp, #44	; 0x2c
 80044c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80044c6:	2300      	movs	r3, #0
 80044c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80044ca:	2300      	movs	r3, #0
 80044cc:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044ce:	4b78      	ldr	r3, [pc, #480]	; (80046b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	f003 030c 	and.w	r3, r3, #12
 80044d6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044d8:	4b75      	ldr	r3, [pc, #468]	; (80046b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80044da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044dc:	f003 0303 	and.w	r3, r3, #3
 80044e0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d005      	beq.n	80044f4 <HAL_RCC_GetSysClockFreq+0x34>
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	2b0c      	cmp	r3, #12
 80044ec:	d121      	bne.n	8004532 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d11e      	bne.n	8004532 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80044f4:	4b6e      	ldr	r3, [pc, #440]	; (80046b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d107      	bne.n	8004510 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8004500:	4b6b      	ldr	r3, [pc, #428]	; (80046b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004502:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004506:	0b1b      	lsrs	r3, r3, #12
 8004508:	f003 030f 	and.w	r3, r3, #15
 800450c:	627b      	str	r3, [r7, #36]	; 0x24
 800450e:	e005      	b.n	800451c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8004510:	4b67      	ldr	r3, [pc, #412]	; (80046b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	0f1b      	lsrs	r3, r3, #28
 8004516:	f003 030f 	and.w	r3, r3, #15
 800451a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800451c:	4a65      	ldr	r2, [pc, #404]	; (80046b4 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800451e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004524:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d110      	bne.n	800454e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004530:	e00d      	b.n	800454e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004532:	4b5f      	ldr	r3, [pc, #380]	; (80046b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	f003 030c 	and.w	r3, r3, #12
 800453a:	2b04      	cmp	r3, #4
 800453c:	d102      	bne.n	8004544 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800453e:	4b5e      	ldr	r3, [pc, #376]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004540:	623b      	str	r3, [r7, #32]
 8004542:	e004      	b.n	800454e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	2b08      	cmp	r3, #8
 8004548:	d101      	bne.n	800454e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800454a:	4b5b      	ldr	r3, [pc, #364]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800454c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	2b0c      	cmp	r3, #12
 8004552:	f040 80a5 	bne.w	80046a0 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004556:	4b56      	ldr	r3, [pc, #344]	; (80046b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455a:	f003 0303 	and.w	r3, r3, #3
 800455e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004560:	4b53      	ldr	r3, [pc, #332]	; (80046b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004564:	0a1b      	lsrs	r3, r3, #8
 8004566:	f003 030f 	and.w	r3, r3, #15
 800456a:	3301      	adds	r3, #1
 800456c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800456e:	4b50      	ldr	r3, [pc, #320]	; (80046b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004572:	091b      	lsrs	r3, r3, #4
 8004574:	f003 0301 	and.w	r3, r3, #1
 8004578:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800457a:	4b4d      	ldr	r3, [pc, #308]	; (80046b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800457c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457e:	08db      	lsrs	r3, r3, #3
 8004580:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004584:	68ba      	ldr	r2, [r7, #8]
 8004586:	fb02 f303 	mul.w	r3, r2, r3
 800458a:	ee07 3a90 	vmov	s15, r3
 800458e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004592:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	2b02      	cmp	r3, #2
 800459a:	d003      	beq.n	80045a4 <HAL_RCC_GetSysClockFreq+0xe4>
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	2b03      	cmp	r3, #3
 80045a0:	d022      	beq.n	80045e8 <HAL_RCC_GetSysClockFreq+0x128>
 80045a2:	e043      	b.n	800462c <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	ee07 3a90 	vmov	s15, r3
 80045aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ae:	eddf 6a43 	vldr	s13, [pc, #268]	; 80046bc <HAL_RCC_GetSysClockFreq+0x1fc>
 80045b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045b6:	4b3e      	ldr	r3, [pc, #248]	; (80046b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80045b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045be:	ee07 3a90 	vmov	s15, r3
 80045c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80045c6:	ed97 6a01 	vldr	s12, [r7, #4]
 80045ca:	eddf 5a3d 	vldr	s11, [pc, #244]	; 80046c0 <HAL_RCC_GetSysClockFreq+0x200>
 80045ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80045d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80045d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045da:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80045de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045e6:	e046      	b.n	8004676 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	ee07 3a90 	vmov	s15, r3
 80045ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045f2:	eddf 6a32 	vldr	s13, [pc, #200]	; 80046bc <HAL_RCC_GetSysClockFreq+0x1fc>
 80045f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045fa:	4b2d      	ldr	r3, [pc, #180]	; (80046b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80045fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004602:	ee07 3a90 	vmov	s15, r3
 8004606:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800460a:	ed97 6a01 	vldr	s12, [r7, #4]
 800460e:	eddf 5a2c 	vldr	s11, [pc, #176]	; 80046c0 <HAL_RCC_GetSysClockFreq+0x200>
 8004612:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004616:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800461a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800461e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004626:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800462a:	e024      	b.n	8004676 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800462c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462e:	ee07 3a90 	vmov	s15, r3
 8004632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	ee07 3a90 	vmov	s15, r3
 800463c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004640:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004644:	4b1a      	ldr	r3, [pc, #104]	; (80046b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800464c:	ee07 3a90 	vmov	s15, r3
 8004650:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004654:	ed97 6a01 	vldr	s12, [r7, #4]
 8004658:	eddf 5a19 	vldr	s11, [pc, #100]	; 80046c0 <HAL_RCC_GetSysClockFreq+0x200>
 800465c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004660:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004664:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004668:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800466c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004670:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004674:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8004676:	4b0e      	ldr	r3, [pc, #56]	; (80046b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800467a:	0e1b      	lsrs	r3, r3, #24
 800467c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004680:	3301      	adds	r3, #1
 8004682:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	ee07 3a90 	vmov	s15, r3
 800468a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800468e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004692:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004696:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800469a:	ee17 3a90 	vmov	r3, s15
 800469e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80046a0:	6a3b      	ldr	r3, [r7, #32]
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	372c      	adds	r7, #44	; 0x2c
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	46020c00 	.word	0x46020c00
 80046b4:	0800566c 	.word	0x0800566c
 80046b8:	00f42400 	.word	0x00f42400
 80046bc:	4b742400 	.word	0x4b742400
 80046c0:	46000000 	.word	0x46000000

080046c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80046c8:	f7ff fefa 	bl	80044c0 <HAL_RCC_GetSysClockFreq>
 80046cc:	4602      	mov	r2, r0
 80046ce:	4b07      	ldr	r3, [pc, #28]	; (80046ec <HAL_RCC_GetHCLKFreq+0x28>)
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	f003 030f 	and.w	r3, r3, #15
 80046d6:	4906      	ldr	r1, [pc, #24]	; (80046f0 <HAL_RCC_GetHCLKFreq+0x2c>)
 80046d8:	5ccb      	ldrb	r3, [r1, r3]
 80046da:	fa22 f303 	lsr.w	r3, r2, r3
 80046de:	4a05      	ldr	r2, [pc, #20]	; (80046f4 <HAL_RCC_GetHCLKFreq+0x30>)
 80046e0:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80046e2:	4b04      	ldr	r3, [pc, #16]	; (80046f4 <HAL_RCC_GetHCLKFreq+0x30>)
 80046e4:	681b      	ldr	r3, [r3, #0]
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	46020c00 	.word	0x46020c00
 80046f0:	0800565c 	.word	0x0800565c
 80046f4:	20000008 	.word	0x20000008

080046f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b086      	sub	sp, #24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004700:	4b3e      	ldr	r3, [pc, #248]	; (80047fc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004702:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004706:	f003 0304 	and.w	r3, r3, #4
 800470a:	2b00      	cmp	r3, #0
 800470c:	d003      	beq.n	8004716 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800470e:	f7fe fd4f 	bl	80031b0 <HAL_PWREx_GetVoltageRange>
 8004712:	6178      	str	r0, [r7, #20]
 8004714:	e019      	b.n	800474a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004716:	4b39      	ldr	r3, [pc, #228]	; (80047fc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004718:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800471c:	4a37      	ldr	r2, [pc, #220]	; (80047fc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800471e:	f043 0304 	orr.w	r3, r3, #4
 8004722:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004726:	4b35      	ldr	r3, [pc, #212]	; (80047fc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004728:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800472c:	f003 0304 	and.w	r3, r3, #4
 8004730:	60fb      	str	r3, [r7, #12]
 8004732:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004734:	f7fe fd3c 	bl	80031b0 <HAL_PWREx_GetVoltageRange>
 8004738:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800473a:	4b30      	ldr	r3, [pc, #192]	; (80047fc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800473c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004740:	4a2e      	ldr	r2, [pc, #184]	; (80047fc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004742:	f023 0304 	bic.w	r3, r3, #4
 8004746:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004750:	d003      	beq.n	800475a <RCC_SetFlashLatencyFromMSIRange+0x62>
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004758:	d109      	bne.n	800476e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004760:	d202      	bcs.n	8004768 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8004762:	2301      	movs	r3, #1
 8004764:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004766:	e033      	b.n	80047d0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8004768:	2300      	movs	r3, #0
 800476a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800476c:	e030      	b.n	80047d0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004774:	d208      	bcs.n	8004788 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800477c:	d102      	bne.n	8004784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800477e:	2303      	movs	r3, #3
 8004780:	613b      	str	r3, [r7, #16]
 8004782:	e025      	b.n	80047d0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e035      	b.n	80047f4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800478e:	d90f      	bls.n	80047b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d109      	bne.n	80047aa <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800479c:	d902      	bls.n	80047a4 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800479e:	2300      	movs	r3, #0
 80047a0:	613b      	str	r3, [r7, #16]
 80047a2:	e015      	b.n	80047d0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80047a4:	2301      	movs	r3, #1
 80047a6:	613b      	str	r3, [r7, #16]
 80047a8:	e012      	b.n	80047d0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80047aa:	2300      	movs	r3, #0
 80047ac:	613b      	str	r3, [r7, #16]
 80047ae:	e00f      	b.n	80047d0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047b6:	d109      	bne.n	80047cc <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047be:	d102      	bne.n	80047c6 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80047c0:	2301      	movs	r3, #1
 80047c2:	613b      	str	r3, [r7, #16]
 80047c4:	e004      	b.n	80047d0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80047c6:	2302      	movs	r3, #2
 80047c8:	613b      	str	r3, [r7, #16]
 80047ca:	e001      	b.n	80047d0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80047cc:	2301      	movs	r3, #1
 80047ce:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80047d0:	4b0b      	ldr	r3, [pc, #44]	; (8004800 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f023 020f 	bic.w	r2, r3, #15
 80047d8:	4909      	ldr	r1, [pc, #36]	; (8004800 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	4313      	orrs	r3, r2
 80047de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80047e0:	4b07      	ldr	r3, [pc, #28]	; (8004800 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 030f 	and.w	r3, r3, #15
 80047e8:	693a      	ldr	r2, [r7, #16]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d001      	beq.n	80047f2 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e000      	b.n	80047f4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3718      	adds	r7, #24
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	46020c00 	.word	0x46020c00
 8004800:	40022000 	.word	0x40022000

08004804 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004804:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004808:	b0ba      	sub	sp, #232	; 0xe8
 800480a:	af00      	add	r7, sp, #0
 800480c:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004810:	2300      	movs	r3, #0
 8004812:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004816:	2300      	movs	r3, #0
 8004818:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800481c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004824:	f002 0401 	and.w	r4, r2, #1
 8004828:	2500      	movs	r5, #0
 800482a:	ea54 0305 	orrs.w	r3, r4, r5
 800482e:	d00b      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004830:	4bcb      	ldr	r3, [pc, #812]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004836:	f023 0103 	bic.w	r1, r3, #3
 800483a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800483e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004840:	4ac7      	ldr	r2, [pc, #796]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004842:	430b      	orrs	r3, r1
 8004844:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004848:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800484c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004850:	f002 0802 	and.w	r8, r2, #2
 8004854:	f04f 0900 	mov.w	r9, #0
 8004858:	ea58 0309 	orrs.w	r3, r8, r9
 800485c:	d00b      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800485e:	4bc0      	ldr	r3, [pc, #768]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004864:	f023 010c 	bic.w	r1, r3, #12
 8004868:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800486c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800486e:	4abc      	ldr	r2, [pc, #752]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004870:	430b      	orrs	r3, r1
 8004872:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004876:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800487a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487e:	f002 0a04 	and.w	sl, r2, #4
 8004882:	f04f 0b00 	mov.w	fp, #0
 8004886:	ea5a 030b 	orrs.w	r3, sl, fp
 800488a:	d00b      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800488c:	4bb4      	ldr	r3, [pc, #720]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800488e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004892:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004896:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800489a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800489c:	4ab0      	ldr	r2, [pc, #704]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800489e:	430b      	orrs	r3, r1
 80048a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ac:	f002 0308 	and.w	r3, r2, #8
 80048b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048b4:	2300      	movs	r3, #0
 80048b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80048ba:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80048be:	460b      	mov	r3, r1
 80048c0:	4313      	orrs	r3, r2
 80048c2:	d00b      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80048c4:	4ba6      	ldr	r3, [pc, #664]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80048ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048d4:	4aa2      	ldr	r2, [pc, #648]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048d6:	430b      	orrs	r3, r1
 80048d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e4:	f002 0310 	and.w	r3, r2, #16
 80048e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80048ec:	2300      	movs	r3, #0
 80048ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80048f2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80048f6:	460b      	mov	r3, r1
 80048f8:	4313      	orrs	r3, r2
 80048fa:	d00b      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80048fc:	4b98      	ldr	r3, [pc, #608]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004902:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004906:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800490a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800490c:	4a94      	ldr	r2, [pc, #592]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800490e:	430b      	orrs	r3, r1
 8004910:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004914:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491c:	f002 0320 	and.w	r3, r2, #32
 8004920:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004924:	2300      	movs	r3, #0
 8004926:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800492a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800492e:	460b      	mov	r3, r1
 8004930:	4313      	orrs	r3, r2
 8004932:	d00b      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004934:	4b8a      	ldr	r3, [pc, #552]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004936:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800493a:	f023 0107 	bic.w	r1, r3, #7
 800493e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004942:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004944:	4a86      	ldr	r2, [pc, #536]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004946:	430b      	orrs	r3, r1
 8004948:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800494c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004954:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004958:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800495c:	2300      	movs	r3, #0
 800495e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004962:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004966:	460b      	mov	r3, r1
 8004968:	4313      	orrs	r3, r2
 800496a:	d00b      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800496c:	4b7c      	ldr	r3, [pc, #496]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800496e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004972:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8004976:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800497a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800497c:	4a78      	ldr	r2, [pc, #480]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800497e:	430b      	orrs	r3, r1
 8004980:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004984:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800498c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004990:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004994:	2300      	movs	r3, #0
 8004996:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800499a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800499e:	460b      	mov	r3, r1
 80049a0:	4313      	orrs	r3, r2
 80049a2:	d00b      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80049a4:	4b6e      	ldr	r3, [pc, #440]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80049aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049b4:	4a6a      	ldr	r2, [pc, #424]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049b6:	430b      	orrs	r3, r1
 80049b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c4:	f402 7380 	and.w	r3, r2, #256	; 0x100
 80049c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80049cc:	2300      	movs	r3, #0
 80049ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80049d2:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80049d6:	460b      	mov	r3, r1
 80049d8:	4313      	orrs	r3, r2
 80049da:	d00b      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80049dc:	4b60      	ldr	r3, [pc, #384]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80049e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80049e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ec:	4a5c      	ldr	r2, [pc, #368]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049ee:	430b      	orrs	r3, r1
 80049f0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004a00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a04:	2300      	movs	r3, #0
 8004a06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a0a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004a0e:	460b      	mov	r3, r1
 8004a10:	4313      	orrs	r3, r2
 8004a12:	d00b      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004a14:	4b52      	ldr	r3, [pc, #328]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a1a:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8004a1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a24:	4a4e      	ldr	r2, [pc, #312]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a26:	430b      	orrs	r3, r1
 8004a28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a34:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8004a38:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004a42:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004a46:	460b      	mov	r3, r1
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	d00b      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004a4c:	4b44      	ldr	r3, [pc, #272]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a52:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8004a56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a5c:	4a40      	ldr	r2, [pc, #256]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a5e:	430b      	orrs	r3, r1
 8004a60:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004a64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6c:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004a70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a74:	2300      	movs	r3, #0
 8004a76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004a7a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004a7e:	460b      	mov	r3, r1
 8004a80:	4313      	orrs	r3, r2
 8004a82:	d00b      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004a84:	4b36      	ldr	r3, [pc, #216]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a8a:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8004a8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a94:	4a32      	ldr	r2, [pc, #200]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a96:	430b      	orrs	r3, r1
 8004a98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8004a9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa4:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004aa8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004aac:	2300      	movs	r3, #0
 8004aae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ab2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	d00c      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8004abc:	4b28      	ldr	r3, [pc, #160]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004abe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ac2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004ac6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004aca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ace:	4a24      	ldr	r2, [pc, #144]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ad0:	430b      	orrs	r3, r1
 8004ad2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004ad6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ade:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004ae2:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004ae8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004aec:	460b      	mov	r3, r1
 8004aee:	4313      	orrs	r3, r2
 8004af0:	d04f      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004af2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004afa:	2b80      	cmp	r3, #128	; 0x80
 8004afc:	d02d      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x356>
 8004afe:	2b80      	cmp	r3, #128	; 0x80
 8004b00:	d827      	bhi.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004b02:	2b60      	cmp	r3, #96	; 0x60
 8004b04:	d02e      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004b06:	2b60      	cmp	r3, #96	; 0x60
 8004b08:	d823      	bhi.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004b0a:	2b40      	cmp	r3, #64	; 0x40
 8004b0c:	d006      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x318>
 8004b0e:	2b40      	cmp	r3, #64	; 0x40
 8004b10:	d81f      	bhi.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d009      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x326>
 8004b16:	2b20      	cmp	r3, #32
 8004b18:	d011      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8004b1a:	e01a      	b.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004b1c:	4b10      	ldr	r3, [pc, #64]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b20:	4a0f      	ldr	r2, [pc, #60]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b26:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004b28:	e01d      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b2e:	3308      	adds	r3, #8
 8004b30:	4618      	mov	r0, r3
 8004b32:	f000 fc27 	bl	8005384 <RCCEx_PLL2_Config>
 8004b36:	4603      	mov	r3, r0
 8004b38:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004b3c:	e013      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b42:	332c      	adds	r3, #44	; 0x2c
 8004b44:	4618      	mov	r0, r3
 8004b46:	f000 fcb5 	bl	80054b4 <RCCEx_PLL3_Config>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004b50:	e009      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004b58:	e005      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8004b5a:	bf00      	nop
 8004b5c:	e003      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004b5e:	bf00      	nop
 8004b60:	46020c00 	.word	0x46020c00
        break;
 8004b64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b66:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10d      	bne.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8004b6e:	4bb6      	ldr	r3, [pc, #728]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004b70:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004b74:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8004b78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b80:	4ab1      	ldr	r2, [pc, #708]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004b82:	430b      	orrs	r3, r1
 8004b84:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004b88:	e003      	b.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b8a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004b8e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004b92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b9a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004b9e:	673b      	str	r3, [r7, #112]	; 0x70
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	677b      	str	r3, [r7, #116]	; 0x74
 8004ba4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004ba8:	460b      	mov	r3, r1
 8004baa:	4313      	orrs	r3, r2
 8004bac:	d053      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8004bae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004bb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bba:	d033      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004bbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bc0:	d82c      	bhi.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004bc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bc6:	d02f      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8004bc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bcc:	d826      	bhi.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004bce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bd2:	d008      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8004bd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bd8:	d820      	bhi.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00a      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8004bde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004be2:	d011      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004be4:	e01a      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004be6:	4b98      	ldr	r3, [pc, #608]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bea:	4a97      	ldr	r2, [pc, #604]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bf0:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004bf2:	e01a      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004bf4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004bf8:	3308      	adds	r3, #8
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f000 fbc2 	bl	8005384 <RCCEx_PLL2_Config>
 8004c00:	4603      	mov	r3, r0
 8004c02:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004c06:	e010      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c0c:	332c      	adds	r3, #44	; 0x2c
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f000 fc50 	bl	80054b4 <RCCEx_PLL3_Config>
 8004c14:	4603      	mov	r3, r0
 8004c16:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004c1a:	e006      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004c22:	e002      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8004c24:	bf00      	nop
 8004c26:	e000      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8004c28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c2a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10d      	bne.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8004c32:	4b85      	ldr	r3, [pc, #532]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004c34:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004c38:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004c3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c44:	4a80      	ldr	r2, [pc, #512]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004c46:	430b      	orrs	r3, r1
 8004c48:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004c4c:	e003      	b.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c4e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004c52:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004c56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5e:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004c62:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c64:	2300      	movs	r3, #0
 8004c66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c68:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	d046      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8004c72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c76:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004c7a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004c7e:	d028      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004c80:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004c84:	d821      	bhi.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8004c86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c8a:	d022      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004c8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c90:	d81b      	bhi.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8004c92:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c96:	d01c      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004c98:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c9c:	d815      	bhi.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8004c9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ca2:	d008      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8004ca4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ca8:	d80f      	bhi.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d011      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004cae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cb2:	d00e      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004cb4:	e009      	b.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004cb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004cba:	3308      	adds	r3, #8
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f000 fb61 	bl	8005384 <RCCEx_PLL2_Config>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004cc8:	e004      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004cd0:	e000      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8004cd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cd4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d10d      	bne.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004cdc:	4b5a      	ldr	r3, [pc, #360]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004cde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ce2:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004ce6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004cea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004cee:	4a56      	ldr	r2, [pc, #344]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004cf0:	430b      	orrs	r3, r1
 8004cf2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004cf6:	e003      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cf8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004cfc:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8004d00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d08:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004d0c:	663b      	str	r3, [r7, #96]	; 0x60
 8004d0e:	2300      	movs	r3, #0
 8004d10:	667b      	str	r3, [r7, #100]	; 0x64
 8004d12:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004d16:	460b      	mov	r3, r1
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	d03f      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8004d1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d24:	2b04      	cmp	r3, #4
 8004d26:	d81e      	bhi.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x562>
 8004d28:	a201      	add	r2, pc, #4	; (adr r2, 8004d30 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8004d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d2e:	bf00      	nop
 8004d30:	08004d6f 	.word	0x08004d6f
 8004d34:	08004d45 	.word	0x08004d45
 8004d38:	08004d53 	.word	0x08004d53
 8004d3c:	08004d6f 	.word	0x08004d6f
 8004d40:	08004d6f 	.word	0x08004d6f
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004d44:	4b40      	ldr	r3, [pc, #256]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d48:	4a3f      	ldr	r2, [pc, #252]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004d4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d4e:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8004d50:	e00e      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d56:	332c      	adds	r3, #44	; 0x2c
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f000 fbab 	bl	80054b4 <RCCEx_PLL3_Config>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004d64:	e004      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004d6c:	e000      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8004d6e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004d70:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d10d      	bne.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8004d78:	4b33      	ldr	r3, [pc, #204]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004d7a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004d7e:	f023 0107 	bic.w	r1, r3, #7
 8004d82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d8a:	4a2f      	ldr	r2, [pc, #188]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004d8c:	430b      	orrs	r3, r1
 8004d8e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004d92:	e003      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d94:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004d98:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8004d9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da4:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004da8:	65bb      	str	r3, [r7, #88]	; 0x58
 8004daa:	2300      	movs	r3, #0
 8004dac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dae:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004db2:	460b      	mov	r3, r1
 8004db4:	4313      	orrs	r3, r2
 8004db6:	d04d      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8004db8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004dbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dc0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004dc4:	d028      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8004dc6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004dca:	d821      	bhi.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8004dcc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004dd0:	d024      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x618>
 8004dd2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004dd6:	d81b      	bhi.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8004dd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ddc:	d00e      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8004dde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004de2:	d815      	bhi.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d01b      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8004de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dec:	d110      	bne.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004dee:	4b16      	ldr	r3, [pc, #88]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df2:	4a15      	ldr	r2, [pc, #84]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004df8:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8004dfa:	e012      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004dfc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e00:	332c      	adds	r3, #44	; 0x2c
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 fb56 	bl	80054b4 <RCCEx_PLL3_Config>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004e0e:	e008      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004e16:	e004      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8004e18:	bf00      	nop
 8004e1a:	e002      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8004e1c:	bf00      	nop
 8004e1e:	e000      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8004e20:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004e22:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d110      	bne.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8004e2a:	4b07      	ldr	r3, [pc, #28]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004e2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e30:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004e34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e3c:	4a02      	ldr	r2, [pc, #8]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004e3e:	430b      	orrs	r3, r1
 8004e40:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004e44:	e006      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8004e46:	bf00      	nop
 8004e48:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e4c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004e50:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5c:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004e60:	653b      	str	r3, [r7, #80]	; 0x50
 8004e62:	2300      	movs	r3, #0
 8004e64:	657b      	str	r3, [r7, #84]	; 0x54
 8004e66:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	f000 80b5 	beq.w	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e72:	2300      	movs	r3, #0
 8004e74:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e78:	4b9d      	ldr	r3, [pc, #628]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e7e:	f003 0304 	and.w	r3, r3, #4
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d113      	bne.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e86:	4b9a      	ldr	r3, [pc, #616]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004e88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e8c:	4a98      	ldr	r2, [pc, #608]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004e8e:	f043 0304 	orr.w	r3, r3, #4
 8004e92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004e96:	4b96      	ldr	r3, [pc, #600]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004e98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e9c:	f003 0304 	and.w	r3, r3, #4
 8004ea0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004ea4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004eae:	4b91      	ldr	r3, [pc, #580]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8004eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb2:	4a90      	ldr	r2, [pc, #576]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8004eb4:	f043 0301 	orr.w	r3, r3, #1
 8004eb8:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004eba:	f7fb fe4b 	bl	8000b54 <HAL_GetTick>
 8004ebe:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004ec2:	e00b      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ec4:	f7fb fe46 	bl	8000b54 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d903      	bls.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004eda:	e005      	b.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004edc:	4b85      	ldr	r3, [pc, #532]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8004ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee0:	f003 0301 	and.w	r3, r3, #1
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d0ed      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8004ee8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d165      	bne.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ef0:	4b7f      	ldr	r3, [pc, #508]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004ef2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004efa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d023      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8004f06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f0a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d01b      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f16:	4b76      	ldr	r3, [pc, #472]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004f18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f20:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f24:	4b72      	ldr	r3, [pc, #456]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004f26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f2a:	4a71      	ldr	r2, [pc, #452]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f30:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f34:	4b6e      	ldr	r3, [pc, #440]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004f36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f3a:	4a6d      	ldr	r2, [pc, #436]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004f3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f40:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f44:	4a6a      	ldr	r2, [pc, #424]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f4a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d019      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f5a:	f7fb fdfb 	bl	8000b54 <HAL_GetTick>
 8004f5e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f62:	e00d      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f64:	f7fb fdf6 	bl	8000b54 <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f6e:	1ad2      	subs	r2, r2, r3
 8004f70:	f241 3388 	movw	r3, #5000	; 0x1388
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d903      	bls.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 8004f7e:	e006      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f80:	4b5b      	ldr	r3, [pc, #364]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004f82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d0ea      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8004f8e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d10d      	bne.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8004f96:	4b56      	ldr	r3, [pc, #344]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004f98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f9c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004fa0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004fa4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004fa8:	4a51      	ldr	r2, [pc, #324]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004faa:	430b      	orrs	r3, r1
 8004fac:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004fb0:	e008      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004fb2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004fb6:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 8004fba:	e003      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fbc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004fc0:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004fc4:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d107      	bne.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fcc:	4b48      	ldr	r3, [pc, #288]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fd2:	4a47      	ldr	r2, [pc, #284]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004fd4:	f023 0304 	bic.w	r3, r3, #4
 8004fd8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8004fdc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004fe8:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fea:	2300      	movs	r3, #0
 8004fec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fee:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	d042      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8004ff8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ffc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005000:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005004:	d022      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x848>
 8005006:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800500a:	d81b      	bhi.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x840>
 800500c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005010:	d011      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x832>
 8005012:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005016:	d815      	bhi.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8005018:	2b00      	cmp	r3, #0
 800501a:	d019      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 800501c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005020:	d110      	bne.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005022:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005026:	3308      	adds	r3, #8
 8005028:	4618      	mov	r0, r3
 800502a:	f000 f9ab 	bl	8005384 <RCCEx_PLL2_Config>
 800502e:	4603      	mov	r3, r0
 8005030:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005034:	e00d      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005036:	4b2e      	ldr	r3, [pc, #184]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503a:	4a2d      	ldr	r2, [pc, #180]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800503c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005040:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8005042:	e006      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800504a:	e002      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800504c:	bf00      	nop
 800504e:	e000      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8005050:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005052:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d10d      	bne.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800505a:	4b25      	ldr	r3, [pc, #148]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800505c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005060:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8005064:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005068:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800506c:	4a20      	ldr	r2, [pc, #128]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800506e:	430b      	orrs	r3, r1
 8005070:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005074:	e003      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005076:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800507a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800507e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005086:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800508a:	643b      	str	r3, [r7, #64]	; 0x40
 800508c:	2300      	movs	r3, #0
 800508e:	647b      	str	r3, [r7, #68]	; 0x44
 8005090:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005094:	460b      	mov	r3, r1
 8005096:	4313      	orrs	r3, r2
 8005098:	d032      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800509a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800509e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050a6:	d00b      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80050a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050ac:	d804      	bhi.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d008      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80050b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050b6:	d007      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80050be:	e004      	b.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80050c0:	bf00      	nop
 80050c2:	e002      	b.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80050c4:	bf00      	nop
 80050c6:	e000      	b.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80050c8:	bf00      	nop
    }
    if (ret == HAL_OK)
 80050ca:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d112      	bne.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80050d2:	4b07      	ldr	r3, [pc, #28]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80050d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80050d8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050e4:	4a02      	ldr	r2, [pc, #8]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80050e6:	430b      	orrs	r3, r1
 80050e8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80050ec:	e008      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 80050ee:	bf00      	nop
 80050f0:	46020c00 	.word	0x46020c00
 80050f4:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050f8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80050fc:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8005100:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005108:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800510c:	63bb      	str	r3, [r7, #56]	; 0x38
 800510e:	2300      	movs	r3, #0
 8005110:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005112:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005116:	460b      	mov	r3, r1
 8005118:	4313      	orrs	r3, r2
 800511a:	d00c      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800511c:	4b98      	ldr	r3, [pc, #608]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800511e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005122:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8005126:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800512a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800512e:	4a94      	ldr	r2, [pc, #592]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005130:	430b      	orrs	r3, r1
 8005132:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8005136:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800513a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005142:	633b      	str	r3, [r7, #48]	; 0x30
 8005144:	2300      	movs	r3, #0
 8005146:	637b      	str	r3, [r7, #52]	; 0x34
 8005148:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800514c:	460b      	mov	r3, r1
 800514e:	4313      	orrs	r3, r2
 8005150:	d019      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8005152:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005156:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800515a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800515e:	d105      	bne.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005160:	4b87      	ldr	r3, [pc, #540]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005164:	4a86      	ldr	r2, [pc, #536]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005166:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800516a:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800516c:	4b84      	ldr	r3, [pc, #528]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800516e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005172:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8005176:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800517a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800517e:	4a80      	ldr	r2, [pc, #512]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005180:	430b      	orrs	r3, r1
 8005182:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005186:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800518a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800518e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005192:	62bb      	str	r3, [r7, #40]	; 0x28
 8005194:	2300      	movs	r3, #0
 8005196:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005198:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800519c:	460b      	mov	r3, r1
 800519e:	4313      	orrs	r3, r2
 80051a0:	d00c      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80051a2:	4b77      	ldr	r3, [pc, #476]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80051a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80051b4:	4972      	ldr	r1, [pc, #456]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80051bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80051c8:	623b      	str	r3, [r7, #32]
 80051ca:	2300      	movs	r3, #0
 80051cc:	627b      	str	r3, [r7, #36]	; 0x24
 80051ce:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80051d2:	460b      	mov	r3, r1
 80051d4:	4313      	orrs	r3, r2
 80051d6:	d00c      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80051d8:	4b69      	ldr	r3, [pc, #420]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80051da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051e6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80051ea:	4965      	ldr	r1, [pc, #404]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80051f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fa:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80051fe:	61bb      	str	r3, [r7, #24]
 8005200:	2300      	movs	r3, #0
 8005202:	61fb      	str	r3, [r7, #28]
 8005204:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005208:	460b      	mov	r3, r1
 800520a:	4313      	orrs	r3, r2
 800520c:	d00c      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800520e:	4b5c      	ldr	r3, [pc, #368]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005210:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005214:	f023 0218 	bic.w	r2, r3, #24
 8005218:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800521c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005220:	4957      	ldr	r1, [pc, #348]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005222:	4313      	orrs	r3, r2
 8005224:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005228:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800522c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005230:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8005234:	613b      	str	r3, [r7, #16]
 8005236:	2300      	movs	r3, #0
 8005238:	617b      	str	r3, [r7, #20]
 800523a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800523e:	460b      	mov	r3, r1
 8005240:	4313      	orrs	r3, r2
 8005242:	d032      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8005244:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005248:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800524c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005250:	d105      	bne.n	800525e <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005252:	4b4b      	ldr	r3, [pc, #300]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005256:	4a4a      	ldr	r2, [pc, #296]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005258:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800525c:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800525e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005262:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005266:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800526a:	d108      	bne.n	800527e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800526c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005270:	3308      	adds	r3, #8
 8005272:	4618      	mov	r0, r3
 8005274:	f000 f886 	bl	8005384 <RCCEx_PLL2_Config>
 8005278:	4603      	mov	r3, r0
 800527a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 800527e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10d      	bne.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005286:	4b3e      	ldr	r3, [pc, #248]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005288:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800528c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005290:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005294:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005298:	4939      	ldr	r1, [pc, #228]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800529a:	4313      	orrs	r3, r2
 800529c:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80052a0:	e003      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80052a6:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80052aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b2:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 80052b6:	60bb      	str	r3, [r7, #8]
 80052b8:	2300      	movs	r3, #0
 80052ba:	60fb      	str	r3, [r7, #12]
 80052bc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80052c0:	460b      	mov	r3, r1
 80052c2:	4313      	orrs	r3, r2
 80052c4:	d03a      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80052c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052d2:	d00e      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 80052d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052d8:	d815      	bhi.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d017      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80052de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80052e2:	d110      	bne.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052e4:	4b26      	ldr	r3, [pc, #152]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80052e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e8:	4a25      	ldr	r2, [pc, #148]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80052ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052ee:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80052f0:	e00e      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80052f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052f6:	3308      	adds	r3, #8
 80052f8:	4618      	mov	r0, r3
 80052fa:	f000 f843 	bl	8005384 <RCCEx_PLL2_Config>
 80052fe:	4603      	mov	r3, r0
 8005300:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005304:	e004      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800530c:	e000      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 800530e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005310:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005314:	2b00      	cmp	r3, #0
 8005316:	d10d      	bne.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8005318:	4b19      	ldr	r3, [pc, #100]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800531a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800531e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005322:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005326:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800532a:	4915      	ldr	r1, [pc, #84]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800532c:	4313      	orrs	r3, r2
 800532e:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8005332:	e003      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005334:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005338:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800533c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005344:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8005348:	603b      	str	r3, [r7, #0]
 800534a:	2300      	movs	r3, #0
 800534c:	607b      	str	r3, [r7, #4]
 800534e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005352:	460b      	mov	r3, r1
 8005354:	4313      	orrs	r3, r2
 8005356:	d00c      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8005358:	4b09      	ldr	r3, [pc, #36]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800535a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800535e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005362:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005366:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800536a:	4905      	ldr	r1, [pc, #20]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800536c:	4313      	orrs	r3, r2
 800536e:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8005372:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 8005376:	4618      	mov	r0, r3
 8005378:	37e8      	adds	r7, #232	; 0xe8
 800537a:	46bd      	mov	sp, r7
 800537c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005380:	46020c00 	.word	0x46020c00

08005384 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800538c:	4b47      	ldr	r3, [pc, #284]	; (80054ac <RCCEx_PLL2_Config+0x128>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a46      	ldr	r2, [pc, #280]	; (80054ac <RCCEx_PLL2_Config+0x128>)
 8005392:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005396:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005398:	f7fb fbdc 	bl	8000b54 <HAL_GetTick>
 800539c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800539e:	e008      	b.n	80053b2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80053a0:	f7fb fbd8 	bl	8000b54 <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d901      	bls.n	80053b2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e077      	b.n	80054a2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80053b2:	4b3e      	ldr	r3, [pc, #248]	; (80054ac <RCCEx_PLL2_Config+0x128>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1f0      	bne.n	80053a0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80053be:	4b3b      	ldr	r3, [pc, #236]	; (80054ac <RCCEx_PLL2_Config+0x128>)
 80053c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80053c6:	f023 0303 	bic.w	r3, r3, #3
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	6811      	ldr	r1, [r2, #0]
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	6852      	ldr	r2, [r2, #4]
 80053d2:	3a01      	subs	r2, #1
 80053d4:	0212      	lsls	r2, r2, #8
 80053d6:	430a      	orrs	r2, r1
 80053d8:	4934      	ldr	r1, [pc, #208]	; (80054ac <RCCEx_PLL2_Config+0x128>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	62cb      	str	r3, [r1, #44]	; 0x2c
 80053de:	4b33      	ldr	r3, [pc, #204]	; (80054ac <RCCEx_PLL2_Config+0x128>)
 80053e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053e2:	4b33      	ldr	r3, [pc, #204]	; (80054b0 <RCCEx_PLL2_Config+0x12c>)
 80053e4:	4013      	ands	r3, r2
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	6892      	ldr	r2, [r2, #8]
 80053ea:	3a01      	subs	r2, #1
 80053ec:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	68d2      	ldr	r2, [r2, #12]
 80053f4:	3a01      	subs	r2, #1
 80053f6:	0252      	lsls	r2, r2, #9
 80053f8:	b292      	uxth	r2, r2
 80053fa:	4311      	orrs	r1, r2
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	6912      	ldr	r2, [r2, #16]
 8005400:	3a01      	subs	r2, #1
 8005402:	0412      	lsls	r2, r2, #16
 8005404:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8005408:	4311      	orrs	r1, r2
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	6952      	ldr	r2, [r2, #20]
 800540e:	3a01      	subs	r2, #1
 8005410:	0612      	lsls	r2, r2, #24
 8005412:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005416:	430a      	orrs	r2, r1
 8005418:	4924      	ldr	r1, [pc, #144]	; (80054ac <RCCEx_PLL2_Config+0x128>)
 800541a:	4313      	orrs	r3, r2
 800541c:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800541e:	4b23      	ldr	r3, [pc, #140]	; (80054ac <RCCEx_PLL2_Config+0x128>)
 8005420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005422:	f023 020c 	bic.w	r2, r3, #12
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	4920      	ldr	r1, [pc, #128]	; (80054ac <RCCEx_PLL2_Config+0x128>)
 800542c:	4313      	orrs	r3, r2
 800542e:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005430:	4b1e      	ldr	r3, [pc, #120]	; (80054ac <RCCEx_PLL2_Config+0x128>)
 8005432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a1b      	ldr	r3, [r3, #32]
 8005438:	491c      	ldr	r1, [pc, #112]	; (80054ac <RCCEx_PLL2_Config+0x128>)
 800543a:	4313      	orrs	r3, r2
 800543c:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800543e:	4b1b      	ldr	r3, [pc, #108]	; (80054ac <RCCEx_PLL2_Config+0x128>)
 8005440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005442:	4a1a      	ldr	r2, [pc, #104]	; (80054ac <RCCEx_PLL2_Config+0x128>)
 8005444:	f023 0310 	bic.w	r3, r3, #16
 8005448:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800544a:	4b18      	ldr	r3, [pc, #96]	; (80054ac <RCCEx_PLL2_Config+0x128>)
 800544c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005452:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	69d2      	ldr	r2, [r2, #28]
 800545a:	00d2      	lsls	r2, r2, #3
 800545c:	4913      	ldr	r1, [pc, #76]	; (80054ac <RCCEx_PLL2_Config+0x128>)
 800545e:	4313      	orrs	r3, r2
 8005460:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8005462:	4b12      	ldr	r3, [pc, #72]	; (80054ac <RCCEx_PLL2_Config+0x128>)
 8005464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005466:	4a11      	ldr	r2, [pc, #68]	; (80054ac <RCCEx_PLL2_Config+0x128>)
 8005468:	f043 0310 	orr.w	r3, r3, #16
 800546c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800546e:	4b0f      	ldr	r3, [pc, #60]	; (80054ac <RCCEx_PLL2_Config+0x128>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a0e      	ldr	r2, [pc, #56]	; (80054ac <RCCEx_PLL2_Config+0x128>)
 8005474:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005478:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800547a:	f7fb fb6b 	bl	8000b54 <HAL_GetTick>
 800547e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005480:	e008      	b.n	8005494 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005482:	f7fb fb67 	bl	8000b54 <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	2b02      	cmp	r3, #2
 800548e:	d901      	bls.n	8005494 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e006      	b.n	80054a2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005494:	4b05      	ldr	r3, [pc, #20]	; (80054ac <RCCEx_PLL2_Config+0x128>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d0f0      	beq.n	8005482 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 80054a0:	2300      	movs	r3, #0

}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	46020c00 	.word	0x46020c00
 80054b0:	80800000 	.word	0x80800000

080054b4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 80054bc:	4b47      	ldr	r3, [pc, #284]	; (80055dc <RCCEx_PLL3_Config+0x128>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a46      	ldr	r2, [pc, #280]	; (80055dc <RCCEx_PLL3_Config+0x128>)
 80054c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054c6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80054c8:	f7fb fb44 	bl	8000b54 <HAL_GetTick>
 80054cc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80054ce:	e008      	b.n	80054e2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80054d0:	f7fb fb40 	bl	8000b54 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d901      	bls.n	80054e2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e077      	b.n	80055d2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80054e2:	4b3e      	ldr	r3, [pc, #248]	; (80055dc <RCCEx_PLL3_Config+0x128>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1f0      	bne.n	80054d0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80054ee:	4b3b      	ldr	r3, [pc, #236]	; (80055dc <RCCEx_PLL3_Config+0x128>)
 80054f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80054f6:	f023 0303 	bic.w	r3, r3, #3
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	6811      	ldr	r1, [r2, #0]
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	6852      	ldr	r2, [r2, #4]
 8005502:	3a01      	subs	r2, #1
 8005504:	0212      	lsls	r2, r2, #8
 8005506:	430a      	orrs	r2, r1
 8005508:	4934      	ldr	r1, [pc, #208]	; (80055dc <RCCEx_PLL3_Config+0x128>)
 800550a:	4313      	orrs	r3, r2
 800550c:	630b      	str	r3, [r1, #48]	; 0x30
 800550e:	4b33      	ldr	r3, [pc, #204]	; (80055dc <RCCEx_PLL3_Config+0x128>)
 8005510:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005512:	4b33      	ldr	r3, [pc, #204]	; (80055e0 <RCCEx_PLL3_Config+0x12c>)
 8005514:	4013      	ands	r3, r2
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	6892      	ldr	r2, [r2, #8]
 800551a:	3a01      	subs	r2, #1
 800551c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	68d2      	ldr	r2, [r2, #12]
 8005524:	3a01      	subs	r2, #1
 8005526:	0252      	lsls	r2, r2, #9
 8005528:	b292      	uxth	r2, r2
 800552a:	4311      	orrs	r1, r2
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	6912      	ldr	r2, [r2, #16]
 8005530:	3a01      	subs	r2, #1
 8005532:	0412      	lsls	r2, r2, #16
 8005534:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8005538:	4311      	orrs	r1, r2
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	6952      	ldr	r2, [r2, #20]
 800553e:	3a01      	subs	r2, #1
 8005540:	0612      	lsls	r2, r2, #24
 8005542:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005546:	430a      	orrs	r2, r1
 8005548:	4924      	ldr	r1, [pc, #144]	; (80055dc <RCCEx_PLL3_Config+0x128>)
 800554a:	4313      	orrs	r3, r2
 800554c:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800554e:	4b23      	ldr	r3, [pc, #140]	; (80055dc <RCCEx_PLL3_Config+0x128>)
 8005550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005552:	f023 020c 	bic.w	r2, r3, #12
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	4920      	ldr	r1, [pc, #128]	; (80055dc <RCCEx_PLL3_Config+0x128>)
 800555c:	4313      	orrs	r3, r2
 800555e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8005560:	4b1e      	ldr	r3, [pc, #120]	; (80055dc <RCCEx_PLL3_Config+0x128>)
 8005562:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a1b      	ldr	r3, [r3, #32]
 8005568:	491c      	ldr	r1, [pc, #112]	; (80055dc <RCCEx_PLL3_Config+0x128>)
 800556a:	4313      	orrs	r3, r2
 800556c:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800556e:	4b1b      	ldr	r3, [pc, #108]	; (80055dc <RCCEx_PLL3_Config+0x128>)
 8005570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005572:	4a1a      	ldr	r2, [pc, #104]	; (80055dc <RCCEx_PLL3_Config+0x128>)
 8005574:	f023 0310 	bic.w	r3, r3, #16
 8005578:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800557a:	4b18      	ldr	r3, [pc, #96]	; (80055dc <RCCEx_PLL3_Config+0x128>)
 800557c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800557e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005582:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	69d2      	ldr	r2, [r2, #28]
 800558a:	00d2      	lsls	r2, r2, #3
 800558c:	4913      	ldr	r1, [pc, #76]	; (80055dc <RCCEx_PLL3_Config+0x128>)
 800558e:	4313      	orrs	r3, r2
 8005590:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8005592:	4b12      	ldr	r3, [pc, #72]	; (80055dc <RCCEx_PLL3_Config+0x128>)
 8005594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005596:	4a11      	ldr	r2, [pc, #68]	; (80055dc <RCCEx_PLL3_Config+0x128>)
 8005598:	f043 0310 	orr.w	r3, r3, #16
 800559c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800559e:	4b0f      	ldr	r3, [pc, #60]	; (80055dc <RCCEx_PLL3_Config+0x128>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a0e      	ldr	r2, [pc, #56]	; (80055dc <RCCEx_PLL3_Config+0x128>)
 80055a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055a8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80055aa:	f7fb fad3 	bl	8000b54 <HAL_GetTick>
 80055ae:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80055b0:	e008      	b.n	80055c4 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80055b2:	f7fb facf 	bl	8000b54 <HAL_GetTick>
 80055b6:	4602      	mov	r2, r0
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d901      	bls.n	80055c4 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e006      	b.n	80055d2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80055c4:	4b05      	ldr	r3, [pc, #20]	; (80055dc <RCCEx_PLL3_Config+0x128>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d0f0      	beq.n	80055b2 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3710      	adds	r7, #16
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	46020c00 	.word	0x46020c00
 80055e0:	80800000 	.word	0x80800000

080055e4 <memset>:
 80055e4:	4402      	add	r2, r0
 80055e6:	4603      	mov	r3, r0
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d100      	bne.n	80055ee <memset+0xa>
 80055ec:	4770      	bx	lr
 80055ee:	f803 1b01 	strb.w	r1, [r3], #1
 80055f2:	e7f9      	b.n	80055e8 <memset+0x4>

080055f4 <__libc_init_array>:
 80055f4:	b570      	push	{r4, r5, r6, lr}
 80055f6:	4d0d      	ldr	r5, [pc, #52]	; (800562c <__libc_init_array+0x38>)
 80055f8:	2600      	movs	r6, #0
 80055fa:	4c0d      	ldr	r4, [pc, #52]	; (8005630 <__libc_init_array+0x3c>)
 80055fc:	1b64      	subs	r4, r4, r5
 80055fe:	10a4      	asrs	r4, r4, #2
 8005600:	42a6      	cmp	r6, r4
 8005602:	d109      	bne.n	8005618 <__libc_init_array+0x24>
 8005604:	4d0b      	ldr	r5, [pc, #44]	; (8005634 <__libc_init_array+0x40>)
 8005606:	2600      	movs	r6, #0
 8005608:	4c0b      	ldr	r4, [pc, #44]	; (8005638 <__libc_init_array+0x44>)
 800560a:	f000 f817 	bl	800563c <_init>
 800560e:	1b64      	subs	r4, r4, r5
 8005610:	10a4      	asrs	r4, r4, #2
 8005612:	42a6      	cmp	r6, r4
 8005614:	d105      	bne.n	8005622 <__libc_init_array+0x2e>
 8005616:	bd70      	pop	{r4, r5, r6, pc}
 8005618:	f855 3b04 	ldr.w	r3, [r5], #4
 800561c:	3601      	adds	r6, #1
 800561e:	4798      	blx	r3
 8005620:	e7ee      	b.n	8005600 <__libc_init_array+0xc>
 8005622:	f855 3b04 	ldr.w	r3, [r5], #4
 8005626:	3601      	adds	r6, #1
 8005628:	4798      	blx	r3
 800562a:	e7f2      	b.n	8005612 <__libc_init_array+0x1e>
 800562c:	0800572c 	.word	0x0800572c
 8005630:	0800572c 	.word	0x0800572c
 8005634:	0800572c 	.word	0x0800572c
 8005638:	08005730 	.word	0x08005730

0800563c <_init>:
 800563c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800563e:	bf00      	nop
 8005640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005642:	bc08      	pop	{r3}
 8005644:	469e      	mov	lr, r3
 8005646:	4770      	bx	lr

08005648 <_fini>:
 8005648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800564a:	bf00      	nop
 800564c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800564e:	bc08      	pop	{r3}
 8005650:	469e      	mov	lr, r3
 8005652:	4770      	bx	lr
