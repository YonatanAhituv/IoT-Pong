
CRYP_SAES_WrapKey.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e9c  08000238  08000238  00010238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  080050d4  080050d4  000150d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080051dc  080051dc  000151dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080051e0  080051e0  000151e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000b1  20000000  080051e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000013c  200000b4  08005295  000200b4  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200001f0  08005295  000201f0  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY
 10 .debug_line   00010927  00000000  00000000  0002012a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line_str 000000ae  00000000  00000000  00030a51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_info   0000d12a  00000000  00000000  00030aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000212b  00000000  00000000  0003dc29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  0003fd58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00136d4a  00000000  00000000  00040920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008e5  00000000  00000000  0017766a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000322f4  00000000  00000000  00177f4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00002f20  00000000  00000000  001aa244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200000b4 	.word	0x200000b4
 8000254:	00000000 	.word	0x00000000
 8000258:	080050bc 	.word	0x080050bc

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200000b8 	.word	0x200000b8
 8000274:	080050bc 	.word	0x080050bc

08000278 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000278:	f8df d034 	ldr.w	sp, [pc, #52]	; 80002b0 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800027c:	f000 fab2 	bl	80007e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000280:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000282:	e003      	b.n	800028c <LoopCopyDataInit>

08000284 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000284:	4b0b      	ldr	r3, [pc, #44]	; (80002b4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000286:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000288:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800028a:	3104      	adds	r1, #4

0800028c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800028c:	480a      	ldr	r0, [pc, #40]	; (80002b8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800028e:	4b0b      	ldr	r3, [pc, #44]	; (80002bc <LoopForever+0xe>)
	adds	r2, r0, r1
 8000290:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000292:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000294:	d3f6      	bcc.n	8000284 <CopyDataInit>
	ldr	r2, =_sbss
 8000296:	4a0a      	ldr	r2, [pc, #40]	; (80002c0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000298:	e002      	b.n	80002a0 <LoopFillZerobss>

0800029a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800029a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800029c:	f842 3b04 	str.w	r3, [r2], #4

080002a0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <LoopForever+0x16>)
	cmp	r2, r3
 80002a2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80002a4:	d3f9      	bcc.n	800029a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80002a6:	f004 fee5 	bl	8005074 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80002aa:	f000 f80f 	bl	80002cc <main>

080002ae <LoopForever>:

LoopForever:
    b LoopForever
 80002ae:	e7fe      	b.n	80002ae <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80002b0:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 80002b4:	080051e4 	.word	0x080051e4
	ldr	r0, =_sdata
 80002b8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80002bc:	200000b1 	.word	0x200000b1
	ldr	r2, =_sbss
 80002c0:	200000b4 	.word	0x200000b4
	ldr	r3, = _ebss
 80002c4:	200001f0 	.word	0x200001f0

080002c8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80002c8:	e7fe      	b.n	80002c8 <ADC1_IRQHandler>
	...

080002cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002d2:	f000 fabf 	bl	8000854 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002d6:	f000 f86d 	bl	80003b4 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80002da:	f000 f8cd 	bl	8000478 <SystemPower_Config>

  /* USER CODE BEGIN SysInit */
  /* Configure LED6, LED7 */
  BSP_LED_Init(LED6);
 80002de:	2000      	movs	r0, #0
 80002e0:	f000 f9f2 	bl	80006c8 <BSP_LED_Init>
  BSP_LED_Init(LED7);
 80002e4:	2001      	movs	r0, #1
 80002e6:	f000 f9ef 	bl	80006c8 <BSP_LED_Init>

  /* Turn LED6, LED7 off */
  BSP_LED_Off(LED6);
 80002ea:	2000      	movs	r0, #0
 80002ec:	f000 fa5c 	bl	80007a8 <BSP_LED_Off>
  BSP_LED_Off(LED7);
 80002f0:	2001      	movs	r0, #1
 80002f2:	f000 fa59 	bl	80007a8 <BSP_LED_Off>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_ICACHE_Init();
 80002f6:	f000 f8cd 	bl	8000494 <MX_ICACHE_Init>
  MX_RNG_Init();
 80002fa:	f000 f8df 	bl	80004bc <MX_RNG_Init>
  MX_SAES_AES_Init();
 80002fe:	f000 f8f3 	bl	80004e8 <MX_SAES_AES_Init>
  /* USER CODE BEGIN 2 */
  /* User key AESKey256 encryption*/
  if (HAL_CRYPEx_WrapKey(&hcryp, AESKey256,  Encryptedkey, TIMEOUT_VALUE) != HAL_OK)
 8000302:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000306:	4a24      	ldr	r2, [pc, #144]	; (8000398 <main+0xcc>)
 8000308:	4924      	ldr	r1, [pc, #144]	; (800039c <main+0xd0>)
 800030a:	4825      	ldr	r0, [pc, #148]	; (80003a0 <main+0xd4>)
 800030c:	f001 ff19 	bl	8002142 <HAL_CRYPEx_WrapKey>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <main+0x4e>
  {
    /* Processing Error */
    Error_Handler();
 8000316:	f000 f913 	bl	8000540 <Error_Handler>
  }
  /* we could not compare results, key is not known and unique for each device */

  /* User key AESKey256 decryption*/
  if (HAL_CRYPEx_UnwrapKey(&hcryp, Encryptedkey, TIMEOUT_VALUE) != HAL_OK)
 800031a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800031e:	491e      	ldr	r1, [pc, #120]	; (8000398 <main+0xcc>)
 8000320:	481f      	ldr	r0, [pc, #124]	; (80003a0 <main+0xd4>)
 8000322:	f001 ff66 	bl	80021f2 <HAL_CRYPEx_UnwrapKey>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <main+0x64>
  {
    /* Processing Error */
    Error_Handler();
 800032c:	f000 f908 	bl	8000540 <Error_Handler>
  }
  /* Now key AESKey256 is loaded in SAES_KEYRx registers, immediately usable by
  application for any SAES operation */

  /* Secure AES ECB Encryption */
  if (HAL_CRYP_Encrypt(&hcryp, Plaintext, 16, EncryptedText, TIMEOUT_VALUE) != HAL_OK)
 8000330:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000334:	9300      	str	r3, [sp, #0]
 8000336:	4b1b      	ldr	r3, [pc, #108]	; (80003a4 <main+0xd8>)
 8000338:	2210      	movs	r2, #16
 800033a:	491b      	ldr	r1, [pc, #108]	; (80003a8 <main+0xdc>)
 800033c:	4818      	ldr	r0, [pc, #96]	; (80003a0 <main+0xd4>)
 800033e:	f000 fcd1 	bl	8000ce4 <HAL_CRYP_Encrypt>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <main+0x80>
  {
    /* Processing Error */
    Error_Handler();
 8000348:	f000 f8fa 	bl	8000540 <Error_Handler>
  }
  /*Compare with expected result, because we know the original encrypted key*/
  if(memcmp(EncryptedText, CiphertextAESECB256, 64) != 0)
 800034c:	2240      	movs	r2, #64	; 0x40
 800034e:	4917      	ldr	r1, [pc, #92]	; (80003ac <main+0xe0>)
 8000350:	4814      	ldr	r0, [pc, #80]	; (80003a4 <main+0xd8>)
 8000352:	f004 fe76 	bl	8005042 <memcmp>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <main+0x94>
  {
    /* Processing Error */
    Error_Handler();
 800035c:	f000 f8f0 	bl	8000540 <Error_Handler>
  }

  /*Secure AES ECB Decryption */
  if (HAL_CRYP_Decrypt(&hcryp, EncryptedText, 16, DecryptedText, TIMEOUT_VALUE) != HAL_OK)
 8000360:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000364:	9300      	str	r3, [sp, #0]
 8000366:	4b12      	ldr	r3, [pc, #72]	; (80003b0 <main+0xe4>)
 8000368:	2210      	movs	r2, #16
 800036a:	490e      	ldr	r1, [pc, #56]	; (80003a4 <main+0xd8>)
 800036c:	480c      	ldr	r0, [pc, #48]	; (80003a0 <main+0xd4>)
 800036e:	f000 fd67 	bl	8000e40 <HAL_CRYP_Decrypt>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <main+0xb0>
  {
    /* Processing Error */
    Error_Handler();
 8000378:	f000 f8e2 	bl	8000540 <Error_Handler>
  }
  /*Compare decryption result with Plaintext*/
  if(memcmp(DecryptedText, Plaintext, 64) != 0)
 800037c:	2240      	movs	r2, #64	; 0x40
 800037e:	490a      	ldr	r1, [pc, #40]	; (80003a8 <main+0xdc>)
 8000380:	480b      	ldr	r0, [pc, #44]	; (80003b0 <main+0xe4>)
 8000382:	f004 fe5e 	bl	8005042 <memcmp>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <main+0xc4>
  {
    /* Processing Error */
    Error_Handler();
 800038c:	f000 f8d8 	bl	8000540 <Error_Handler>
  }

  /* Turn LED7 on */
  BSP_LED_On(LED7);
 8000390:	2001      	movs	r0, #1
 8000392:	f000 f9eb 	bl	800076c <BSP_LED_On>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000396:	e7fe      	b.n	8000396 <main+0xca>
 8000398:	200001cc 	.word	0x200001cc
 800039c:	20000000 	.word	0x20000000
 80003a0:	200000e4 	.word	0x200000e4
 80003a4:	2000014c 	.word	0x2000014c
 80003a8:	20000020 	.word	0x20000020
 80003ac:	20000060 	.word	0x20000060
 80003b0:	2000018c 	.word	0x2000018c

080003b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b09e      	sub	sp, #120	; 0x78
 80003b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ba:	f107 0318 	add.w	r3, r7, #24
 80003be:	2260      	movs	r2, #96	; 0x60
 80003c0:	2100      	movs	r1, #0
 80003c2:	4618      	mov	r0, r3
 80003c4:	f004 fe4d 	bl	8005062 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003c8:	463b      	mov	r3, r7
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	609a      	str	r2, [r3, #8]
 80003d2:	60da      	str	r2, [r3, #12]
 80003d4:	611a      	str	r2, [r3, #16]
 80003d6:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80003d8:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80003dc:	f002 fb4c 	bl	8002a78 <HAL_PWREx_ControlVoltageScaling>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <SystemClock_Config+0x36>
  {
    Error_Handler();
 80003e6:	f000 f8ab 	bl	8000540 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI
 80003ea:	23b0      	movs	r3, #176	; 0xb0
 80003ec:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_SHSI;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80003ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80003f4:	2301      	movs	r3, #1
 80003f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80003f8:	2310      	movs	r3, #16
 80003fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 80003fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000400:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.SHSIState = RCC_SHSI_ON;
 8000402:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000406:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000408:	2302      	movs	r3, #2
 800040a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800040c:	2301      	movs	r3, #1
 800040e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000410:	2300      	movs	r3, #0
 8000412:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000414:	2301      	movs	r3, #1
 8000416:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000418:	2350      	movs	r3, #80	; 0x50
 800041a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 800041c:	2302      	movs	r3, #2
 800041e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000420:	2302      	movs	r3, #2
 8000422:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000424:	2302      	movs	r3, #2
 8000426:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 8000428:	2300      	movs	r3, #0
 800042a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800042c:	2300      	movs	r3, #0
 800042e:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000430:	f107 0318 	add.w	r3, r7, #24
 8000434:	4618      	mov	r0, r3
 8000436:	f002 fc0b 	bl	8002c50 <HAL_RCC_OscConfig>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000440:	f000 f87e 	bl	8000540 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000444:	231f      	movs	r3, #31
 8000446:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000448:	2303      	movs	r3, #3
 800044a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800044c:	2300      	movs	r3, #0
 800044e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000450:	2300      	movs	r3, #0
 8000452:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000454:	2300      	movs	r3, #0
 8000456:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000458:	2300      	movs	r3, #0
 800045a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800045c:	463b      	mov	r3, r7
 800045e:	2104      	movs	r1, #4
 8000460:	4618      	mov	r0, r3
 8000462:	f003 fad1 	bl	8003a08 <HAL_RCC_ClockConfig>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800046c:	f000 f868 	bl	8000540 <Error_Handler>
  }
}
 8000470:	bf00      	nop
 8000472:	3778      	adds	r7, #120	; 0x78
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}

08000478 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 800047c:	f002 fbd8 	bl	8002c30 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000480:	2002      	movs	r0, #2
 8000482:	f002 fb85 	bl	8002b90 <HAL_PWREx_ConfigSupply>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <SystemPower_Config+0x18>
  {
    Error_Handler();
 800048c:	f000 f858 	bl	8000540 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000490:	bf00      	nop
 8000492:	bd80      	pop	{r7, pc}

08000494 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000498:	2000      	movs	r0, #0
 800049a:	f002 fabd 	bl	8002a18 <HAL_ICACHE_ConfigAssociativityMode>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80004a4:	f000 f84c 	bl	8000540 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80004a8:	f002 fad6 	bl	8002a58 <HAL_ICACHE_Enable>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80004b2:	f000 f845 	bl	8000540 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80004b6:	bf00      	nop
 80004b8:	bd80      	pop	{r7, pc}
	...

080004bc <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80004c0:	4b07      	ldr	r3, [pc, #28]	; (80004e0 <MX_RNG_Init+0x24>)
 80004c2:	4a08      	ldr	r2, [pc, #32]	; (80004e4 <MX_RNG_Init+0x28>)
 80004c4:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80004c6:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <MX_RNG_Init+0x24>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80004cc:	4804      	ldr	r0, [pc, #16]	; (80004e0 <MX_RNG_Init+0x24>)
 80004ce:	f004 fd1f 	bl	8004f10 <HAL_RNG_Init>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d001      	beq.n	80004dc <MX_RNG_Init+0x20>
  {
    Error_Handler();
 80004d8:	f000 f832 	bl	8000540 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80004dc:	bf00      	nop
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	200000d0 	.word	0x200000d0
 80004e4:	420c0800 	.word	0x420c0800

080004e8 <MX_SAES_AES_Init>:
  * @brief SAES Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAES_AES_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END SAES_Init 0 */

  /* USER CODE BEGIN SAES_Init 1 */

  /* USER CODE END SAES_Init 1 */
  hcryp.Instance = SAES;
 80004ec:	4b12      	ldr	r3, [pc, #72]	; (8000538 <MX_SAES_AES_Init+0x50>)
 80004ee:	4a13      	ldr	r2, [pc, #76]	; (800053c <MX_SAES_AES_Init+0x54>)
 80004f0:	601a      	str	r2, [r3, #0]
  hcryp.Init.DataType = CRYP_NO_SWAP;
 80004f2:	4b11      	ldr	r3, [pc, #68]	; (8000538 <MX_SAES_AES_Init+0x50>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	605a      	str	r2, [r3, #4]
  hcryp.Init.KeySize = CRYP_KEYSIZE_256B;
 80004f8:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <MX_SAES_AES_Init+0x50>)
 80004fa:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80004fe:	609a      	str	r2, [r3, #8]
  hcryp.Init.Algorithm = CRYP_AES_ECB;
 8000500:	4b0d      	ldr	r3, [pc, #52]	; (8000538 <MX_SAES_AES_Init+0x50>)
 8000502:	2200      	movs	r2, #0
 8000504:	615a      	str	r2, [r3, #20]
  hcryp.Init.KeyIVConfigSkip = CRYP_KEYIVCONFIG_ALWAYS;
 8000506:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <MX_SAES_AES_Init+0x50>)
 8000508:	2200      	movs	r2, #0
 800050a:	62da      	str	r2, [r3, #44]	; 0x2c
  hcryp.Init.KeyMode = CRYP_KEYMODE_WRAPPED;
 800050c:	4b0a      	ldr	r3, [pc, #40]	; (8000538 <MX_SAES_AES_Init+0x50>)
 800050e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000512:	631a      	str	r2, [r3, #48]	; 0x30
  hcryp.Init.KeySelect = CRYP_KEYSEL_HW;
 8000514:	4b08      	ldr	r3, [pc, #32]	; (8000538 <MX_SAES_AES_Init+0x50>)
 8000516:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800051a:	635a      	str	r2, [r3, #52]	; 0x34
  hcryp.Init.KeyProtection = CRYP_KEYPROT_DISABLE;
 800051c:	4b06      	ldr	r3, [pc, #24]	; (8000538 <MX_SAES_AES_Init+0x50>)
 800051e:	2200      	movs	r2, #0
 8000520:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_CRYP_Init(&hcryp) != HAL_OK)
 8000522:	4805      	ldr	r0, [pc, #20]	; (8000538 <MX_SAES_AES_Init+0x50>)
 8000524:	f000 fb22 	bl	8000b6c <HAL_CRYP_Init>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <MX_SAES_AES_Init+0x4a>
  {
    Error_Handler();
 800052e:	f000 f807 	bl	8000540 <Error_Handler>
  }
  /* USER CODE BEGIN SAES_Init 2 */

  /* USER CODE END SAES_Init 2 */

}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	200000e4 	.word	0x200000e4
 800053c:	420c0c00 	.word	0x420c0c00

08000540 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  /* Turn LED6 on */
  BSP_LED_On(LED6);
 8000544:	2000      	movs	r0, #0
 8000546:	f000 f911 	bl	800076c <BSP_LED_On>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800054a:	b672      	cpsid	i
}
 800054c:	bf00      	nop
  __disable_irq();
  while (1)
 800054e:	e7fe      	b.n	800054e <Error_Handler+0xe>

08000550 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000556:	4b0a      	ldr	r3, [pc, #40]	; (8000580 <HAL_MspInit+0x30>)
 8000558:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800055c:	4a08      	ldr	r2, [pc, #32]	; (8000580 <HAL_MspInit+0x30>)
 800055e:	f043 0304 	orr.w	r3, r3, #4
 8000562:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000566:	4b06      	ldr	r3, [pc, #24]	; (8000580 <HAL_MspInit+0x30>)
 8000568:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800056c:	f003 0304 	and.w	r3, r3, #4
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000574:	bf00      	nop
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	46020c00 	.word	0x46020c00

08000584 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b0b6      	sub	sp, #216	; 0xd8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800058c:	f107 0310 	add.w	r3, r7, #16
 8000590:	22c8      	movs	r2, #200	; 0xc8
 8000592:	2100      	movs	r1, #0
 8000594:	4618      	mov	r0, r3
 8000596:	f004 fd64 	bl	8005062 <memset>
  if(hrng->Instance==RNG)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4a14      	ldr	r2, [pc, #80]	; (80005f0 <HAL_RNG_MspInit+0x6c>)
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d121      	bne.n	80005e8 <HAL_RNG_MspInit+0x64>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80005a4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80005a8:	f04f 0300 	mov.w	r3, #0
 80005ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80005b0:	2300      	movs	r3, #0
 80005b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005b6:	f107 0310 	add.w	r3, r7, #16
 80005ba:	4618      	mov	r0, r3
 80005bc:	f003 fdb8 	bl	8004130 <HAL_RCCEx_PeriphCLKConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 80005c6:	f7ff ffbb 	bl	8000540 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80005ca:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <HAL_RNG_MspInit+0x70>)
 80005cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005d0:	4a08      	ldr	r2, [pc, #32]	; (80005f4 <HAL_RNG_MspInit+0x70>)
 80005d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80005da:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <HAL_RNG_MspInit+0x70>)
 80005dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80005e8:	bf00      	nop
 80005ea:	37d8      	adds	r7, #216	; 0xd8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	420c0800 	.word	0x420c0800
 80005f4:	46020c00 	.word	0x46020c00

080005f8 <HAL_CRYP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcryp: CRYP handle pointer
* @retval None
*/
void HAL_CRYP_MspInit(CRYP_HandleTypeDef* hcryp)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b0b6      	sub	sp, #216	; 0xd8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000600:	f107 0310 	add.w	r3, r7, #16
 8000604:	22c8      	movs	r2, #200	; 0xc8
 8000606:	2100      	movs	r1, #0
 8000608:	4618      	mov	r0, r3
 800060a:	f004 fd2a 	bl	8005062 <memset>
  if(hcryp->Instance==SAES)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4a16      	ldr	r2, [pc, #88]	; (800066c <HAL_CRYP_MspInit+0x74>)
 8000614:	4293      	cmp	r3, r2
 8000616:	d124      	bne.n	8000662 <HAL_CRYP_MspInit+0x6a>

  /* USER CODE END SAES_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAES;
 8000618:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800061c:	f04f 0300 	mov.w	r3, #0
 8000620:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.SaesClockSelection = RCC_SAESCLKSOURCE_SHSI;
 8000624:	2300      	movs	r3, #0
 8000626:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800062a:	f107 0310 	add.w	r3, r7, #16
 800062e:	4618      	mov	r0, r3
 8000630:	f003 fd7e 	bl	8004130 <HAL_RCCEx_PeriphCLKConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <HAL_CRYP_MspInit+0x46>
    {
      Error_Handler();
 800063a:	f7ff ff81 	bl	8000540 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SAES_CLK_ENABLE();
 800063e:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <HAL_CRYP_MspInit+0x78>)
 8000640:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000644:	4a0a      	ldr	r2, [pc, #40]	; (8000670 <HAL_CRYP_MspInit+0x78>)
 8000646:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800064a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800064e:	4b08      	ldr	r3, [pc, #32]	; (8000670 <HAL_CRYP_MspInit+0x78>)
 8000650:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000654:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN SAES_MspInit 1 */
   HAL_Delay(10);
 800065c:	200a      	movs	r0, #10
 800065e:	f000 f97d 	bl	800095c <HAL_Delay>
  /* USER CODE END SAES_MspInit 1 */
  }

}
 8000662:	bf00      	nop
 8000664:	37d8      	adds	r7, #216	; 0xd8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	420c0c00 	.word	0x420c0c00
 8000670:	46020c00 	.word	0x46020c00

08000674 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000678:	e7fe      	b.n	8000678 <NMI_Handler+0x4>

0800067a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800067a:	b480      	push	{r7}
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800067e:	e7fe      	b.n	800067e <HardFault_Handler+0x4>

08000680 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000684:	e7fe      	b.n	8000684 <MemManage_Handler+0x4>

08000686 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800068a:	e7fe      	b.n	800068a <BusFault_Handler+0x4>

0800068c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000690:	e7fe      	b.n	8000690 <UsageFault_Handler+0x4>

08000692 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000692:	b480      	push	{r7}
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000696:	bf00      	nop
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr

080006a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006a4:	bf00      	nop
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr

080006ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ae:	b480      	push	{r7}
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006b2:	bf00      	nop
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006c0:	f000 f92c 	bl	800091c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <BSP_LED_Init>:
  *            @arg  LED6
  *            @arg  LED7
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08a      	sub	sp, #40	; 0x28
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80006d2:	2300      	movs	r3, #0
 80006d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  LED6_GPIO_CLK_ENABLE();
 80006d6:	4b22      	ldr	r3, [pc, #136]	; (8000760 <BSP_LED_Init+0x98>)
 80006d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80006dc:	4a20      	ldr	r2, [pc, #128]	; (8000760 <BSP_LED_Init+0x98>)
 80006de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80006e6:	4b1e      	ldr	r3, [pc, #120]	; (8000760 <BSP_LED_Init+0x98>)
 80006e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80006ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006f0:	60fb      	str	r3, [r7, #12]
 80006f2:	68fb      	ldr	r3, [r7, #12]
  LED7_GPIO_CLK_ENABLE();
 80006f4:	4b1a      	ldr	r3, [pc, #104]	; (8000760 <BSP_LED_Init+0x98>)
 80006f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80006fa:	4a19      	ldr	r2, [pc, #100]	; (8000760 <BSP_LED_Init+0x98>)
 80006fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000700:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000704:	4b16      	ldr	r3, [pc, #88]	; (8000760 <BSP_LED_Init+0x98>)
 8000706:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800070a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000712:	2301      	movs	r3, #1
 8000714:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800071a:	2302      	movs	r3, #2
 800071c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Pin = LED_PIN [Led];
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	4a10      	ldr	r2, [pc, #64]	; (8000764 <BSP_LED_Init+0x9c>)
 8000722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000726:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	4a0f      	ldr	r2, [pc, #60]	; (8000768 <BSP_LED_Init+0xa0>)
 800072c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000730:	f107 0210 	add.w	r2, r7, #16
 8000734:	4611      	mov	r1, r2
 8000736:	4618      	mov	r0, r3
 8000738:	f001 ff7e 	bl	8002638 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN[Led], GPIO_PIN_SET);
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	4a0a      	ldr	r2, [pc, #40]	; (8000768 <BSP_LED_Init+0xa0>)
 8000740:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	4a07      	ldr	r2, [pc, #28]	; (8000764 <BSP_LED_Init+0x9c>)
 8000748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800074c:	b29b      	uxth	r3, r3
 800074e:	2201      	movs	r2, #1
 8000750:	4619      	mov	r1, r3
 8000752:	f002 f949 	bl	80029e8 <HAL_GPIO_WritePin>

  return ret;
 8000756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000758:	4618      	mov	r0, r3
 800075a:	3728      	adds	r7, #40	; 0x28
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	46020c00 	.word	0x46020c00
 8000764:	08005104 	.word	0x08005104
 8000768:	200000a0 	.word	0x200000a0

0800076c <BSP_LED_On>:
  *            @arg  LED6
  *            @arg  LED7
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	4a09      	ldr	r2, [pc, #36]	; (80007a0 <BSP_LED_On+0x34>)
 800077a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	4a08      	ldr	r2, [pc, #32]	; (80007a4 <BSP_LED_On+0x38>)
 8000782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000786:	b29b      	uxth	r3, r3
 8000788:	2200      	movs	r2, #0
 800078a:	4619      	mov	r1, r3
 800078c:	f002 f92c 	bl	80029e8 <HAL_GPIO_WritePin>
  ret = BSP_ERROR_NONE;
 8000790:	2300      	movs	r3, #0
 8000792:	60fb      	str	r3, [r7, #12]

  return ret;
 8000794:	68fb      	ldr	r3, [r7, #12]
}
 8000796:	4618      	mov	r0, r3
 8000798:	3710      	adds	r7, #16
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	200000a0 	.word	0x200000a0
 80007a4:	08005104 	.word	0x08005104

080007a8 <BSP_LED_Off>:
  *            @arg  LED6
  *            @arg  LED7
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	4a09      	ldr	r2, [pc, #36]	; (80007dc <BSP_LED_Off+0x34>)
 80007b6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	4a08      	ldr	r2, [pc, #32]	; (80007e0 <BSP_LED_Off+0x38>)
 80007be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007c2:	b29b      	uxth	r3, r3
 80007c4:	2201      	movs	r2, #1
 80007c6:	4619      	mov	r1, r3
 80007c8:	f002 f90e 	bl	80029e8 <HAL_GPIO_WritePin>
  ret = BSP_ERROR_NONE;
 80007cc:	2300      	movs	r3, #0
 80007ce:	60fb      	str	r3, [r7, #12]

  return ret;
 80007d0:	68fb      	ldr	r3, [r7, #12]
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3710      	adds	r7, #16
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	200000a0 	.word	0x200000a0
 80007e0:	08005104 	.word	0x08005104

080007e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80007e8:	4b18      	ldr	r3, [pc, #96]	; (800084c <SystemInit+0x68>)
 80007ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007ee:	4a17      	ldr	r2, [pc, #92]	; (800084c <SystemInit+0x68>)
 80007f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80007f8:	4b15      	ldr	r3, [pc, #84]	; (8000850 <SystemInit+0x6c>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80007fe:	4b14      	ldr	r3, [pc, #80]	; (8000850 <SystemInit+0x6c>)
 8000800:	2200      	movs	r2, #0
 8000802:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <SystemInit+0x6c>)
 8000806:	2200      	movs	r2, #0
 8000808:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <SystemInit+0x6c>)
 800080c:	2200      	movs	r2, #0
 800080e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000810:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <SystemInit+0x6c>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a0e      	ldr	r2, [pc, #56]	; (8000850 <SystemInit+0x6c>)
 8000816:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800081a:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800081e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000820:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <SystemInit+0x6c>)
 8000822:	2200      	movs	r2, #0
 8000824:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000826:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <SystemInit+0x6c>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a09      	ldr	r2, [pc, #36]	; (8000850 <SystemInit+0x6c>)
 800082c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000830:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000832:	4b07      	ldr	r3, [pc, #28]	; (8000850 <SystemInit+0x6c>)
 8000834:	2200      	movs	r2, #0
 8000836:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000838:	4b04      	ldr	r3, [pc, #16]	; (800084c <SystemInit+0x68>)
 800083a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800083e:	609a      	str	r2, [r3, #8]
  #endif
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	e000ed00 	.word	0xe000ed00
 8000850:	46020c00 	.word	0x46020c00

08000854 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000858:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <HAL_Init+0x4c>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a10      	ldr	r2, [pc, #64]	; (80008a0 <HAL_Init+0x4c>)
 800085e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000862:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000864:	2003      	movs	r0, #3
 8000866:	f000 f94f 	bl	8000b08 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800086a:	f003 fabf 	bl	8003dec <HAL_RCC_GetSysClockFreq>
 800086e:	4602      	mov	r2, r0
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <HAL_Init+0x50>)
 8000872:	6a1b      	ldr	r3, [r3, #32]
 8000874:	f003 030f 	and.w	r3, r3, #15
 8000878:	490b      	ldr	r1, [pc, #44]	; (80008a8 <HAL_Init+0x54>)
 800087a:	5ccb      	ldrb	r3, [r1, r3]
 800087c:	fa22 f303 	lsr.w	r3, r2, r3
 8000880:	4a0a      	ldr	r2, [pc, #40]	; (80008ac <HAL_Init+0x58>)
 8000882:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000884:	2000      	movs	r0, #0
 8000886:	f000 f813 	bl	80008b0 <HAL_InitTick>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8000890:	2301      	movs	r3, #1
 8000892:	e002      	b.n	800089a <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000894:	f7ff fe5c 	bl	8000550 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000898:	2300      	movs	r3, #0
}
 800089a:	4618      	mov	r0, r3
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40022000 	.word	0x40022000
 80008a4:	46020c00 	.word	0x46020c00
 80008a8:	0800510c 	.word	0x0800510c
 80008ac:	200000a8 	.word	0x200000a8

080008b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80008b8:	4b15      	ldr	r3, [pc, #84]	; (8000910 <HAL_InitTick+0x60>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d101      	bne.n	80008c4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80008c0:	2301      	movs	r3, #1
 80008c2:	e021      	b.n	8000908 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80008c4:	4b13      	ldr	r3, [pc, #76]	; (8000914 <HAL_InitTick+0x64>)
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	4b11      	ldr	r3, [pc, #68]	; (8000910 <HAL_InitTick+0x60>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	4619      	mov	r1, r3
 80008ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 f939 	bl	8000b52 <HAL_SYSTICK_Config>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
 80008e8:	e00e      	b.n	8000908 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2b0f      	cmp	r3, #15
 80008ee:	d80a      	bhi.n	8000906 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008f0:	2200      	movs	r2, #0
 80008f2:	6879      	ldr	r1, [r7, #4]
 80008f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008f8:	f000 f911 	bl	8000b1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008fc:	4a06      	ldr	r2, [pc, #24]	; (8000918 <HAL_InitTick+0x68>)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000902:	2300      	movs	r3, #0
 8000904:	e000      	b.n	8000908 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000906:	2301      	movs	r3, #1
}
 8000908:	4618      	mov	r0, r3
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	200000b0 	.word	0x200000b0
 8000914:	200000a8 	.word	0x200000a8
 8000918:	200000ac 	.word	0x200000ac

0800091c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <HAL_IncTick+0x20>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	461a      	mov	r2, r3
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <HAL_IncTick+0x24>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4413      	add	r3, r2
 800092c:	4a04      	ldr	r2, [pc, #16]	; (8000940 <HAL_IncTick+0x24>)
 800092e:	6013      	str	r3, [r2, #0]
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	200000b0 	.word	0x200000b0
 8000940:	200001ec 	.word	0x200001ec

08000944 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  return uwTick;
 8000948:	4b03      	ldr	r3, [pc, #12]	; (8000958 <HAL_GetTick+0x14>)
 800094a:	681b      	ldr	r3, [r3, #0]
}
 800094c:	4618      	mov	r0, r3
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	200001ec 	.word	0x200001ec

0800095c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000964:	f7ff ffee 	bl	8000944 <HAL_GetTick>
 8000968:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000974:	d005      	beq.n	8000982 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000976:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <HAL_Delay+0x44>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	461a      	mov	r2, r3
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	4413      	add	r3, r2
 8000980:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000982:	bf00      	nop
 8000984:	f7ff ffde 	bl	8000944 <HAL_GetTick>
 8000988:	4602      	mov	r2, r0
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	1ad3      	subs	r3, r2, r3
 800098e:	68fa      	ldr	r2, [r7, #12]
 8000990:	429a      	cmp	r2, r3
 8000992:	d8f7      	bhi.n	8000984 <HAL_Delay+0x28>
  {
  }
}
 8000994:	bf00      	nop
 8000996:	bf00      	nop
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	200000b0 	.word	0x200000b0

080009a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	f003 0307 	and.w	r3, r3, #7
 80009b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009b4:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <__NVIC_SetPriorityGrouping+0x44>)
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ba:	68ba      	ldr	r2, [r7, #8]
 80009bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009c0:	4013      	ands	r3, r2
 80009c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009d6:	4a04      	ldr	r2, [pc, #16]	; (80009e8 <__NVIC_SetPriorityGrouping+0x44>)
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	60d3      	str	r3, [r2, #12]
}
 80009dc:	bf00      	nop
 80009de:	3714      	adds	r7, #20
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009f0:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <__NVIC_GetPriorityGrouping+0x18>)
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	0a1b      	lsrs	r3, r3, #8
 80009f6:	f003 0307 	and.w	r3, r3, #7
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	e000ed00 	.word	0xe000ed00

08000a08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	6039      	str	r1, [r7, #0]
 8000a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	db0a      	blt.n	8000a32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	b2da      	uxtb	r2, r3
 8000a20:	490c      	ldr	r1, [pc, #48]	; (8000a54 <__NVIC_SetPriority+0x4c>)
 8000a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a26:	0112      	lsls	r2, r2, #4
 8000a28:	b2d2      	uxtb	r2, r2
 8000a2a:	440b      	add	r3, r1
 8000a2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a30:	e00a      	b.n	8000a48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	b2da      	uxtb	r2, r3
 8000a36:	4908      	ldr	r1, [pc, #32]	; (8000a58 <__NVIC_SetPriority+0x50>)
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	f003 030f 	and.w	r3, r3, #15
 8000a3e:	3b04      	subs	r3, #4
 8000a40:	0112      	lsls	r2, r2, #4
 8000a42:	b2d2      	uxtb	r2, r2
 8000a44:	440b      	add	r3, r1
 8000a46:	761a      	strb	r2, [r3, #24]
}
 8000a48:	bf00      	nop
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	e000e100 	.word	0xe000e100
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b089      	sub	sp, #36	; 0x24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	f003 0307 	and.w	r3, r3, #7
 8000a6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a70:	69fb      	ldr	r3, [r7, #28]
 8000a72:	f1c3 0307 	rsb	r3, r3, #7
 8000a76:	2b04      	cmp	r3, #4
 8000a78:	bf28      	it	cs
 8000a7a:	2304      	movcs	r3, #4
 8000a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a7e:	69fb      	ldr	r3, [r7, #28]
 8000a80:	3304      	adds	r3, #4
 8000a82:	2b06      	cmp	r3, #6
 8000a84:	d902      	bls.n	8000a8c <NVIC_EncodePriority+0x30>
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	3b03      	subs	r3, #3
 8000a8a:	e000      	b.n	8000a8e <NVIC_EncodePriority+0x32>
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a94:	69bb      	ldr	r3, [r7, #24]
 8000a96:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9a:	43da      	mvns	r2, r3
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	401a      	ands	r2, r3
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aa4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8000aae:	43d9      	mvns	r1, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab4:	4313      	orrs	r3, r2
         );
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3724      	adds	r7, #36	; 0x24
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
	...

08000ac4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ad4:	d301      	bcc.n	8000ada <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e00f      	b.n	8000afa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ada:	4a0a      	ldr	r2, [pc, #40]	; (8000b04 <SysTick_Config+0x40>)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ae2:	210f      	movs	r1, #15
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ae8:	f7ff ff8e 	bl	8000a08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aec:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <SysTick_Config+0x40>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000af2:	4b04      	ldr	r3, [pc, #16]	; (8000b04 <SysTick_Config+0x40>)
 8000af4:	2207      	movs	r2, #7
 8000af6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000af8:	2300      	movs	r3, #0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	e000e010 	.word	0xe000e010

08000b08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f7ff ff47 	bl	80009a4 <__NVIC_SetPriorityGrouping>
}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b086      	sub	sp, #24
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	4603      	mov	r3, r0
 8000b26:	60b9      	str	r1, [r7, #8]
 8000b28:	607a      	str	r2, [r7, #4]
 8000b2a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b2c:	f7ff ff5e 	bl	80009ec <__NVIC_GetPriorityGrouping>
 8000b30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b32:	687a      	ldr	r2, [r7, #4]
 8000b34:	68b9      	ldr	r1, [r7, #8]
 8000b36:	6978      	ldr	r0, [r7, #20]
 8000b38:	f7ff ff90 	bl	8000a5c <NVIC_EncodePriority>
 8000b3c:	4602      	mov	r2, r0
 8000b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b42:	4611      	mov	r1, r2
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff ff5f 	bl	8000a08 <__NVIC_SetPriority>
}
 8000b4a:	bf00      	nop
 8000b4c:	3718      	adds	r7, #24
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b082      	sub	sp, #8
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f7ff ffb2 	bl	8000ac4 <SysTick_Config>
 8000b60:	4603      	mov	r3, r0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
	...

08000b6c <HAL_CRYP_Init>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Init(CRYP_HandleTypeDef *hcryp)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
#if defined(SAES)
  uint32_t tickstart;
#endif /* SAES */

  /* Check the CRYP handle allocation */
  if (hcryp == NULL)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d101      	bne.n	8000b7e <HAL_CRYP_Init+0x12>
  {
    return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e0a7      	b.n	8000cce <HAL_CRYP_Init+0x162>

    /* Init the low level hardware */
    hcryp->MspInitCallback(hcryp);
  }
#else
  if (hcryp->State == HAL_CRYP_STATE_RESET)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d106      	bne.n	8000b98 <HAL_CRYP_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcryp->Lock = HAL_UNLOCKED;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Init the low level hardware */
    HAL_CRYP_MspInit(hcryp);
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f7ff fd30 	bl	80005f8 <HAL_CRYP_MspInit>
  }
#endif /* (USE_HAL_CRYP_REGISTER_CALLBACKS) */

  if (hcryp->Instance == AES)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a4e      	ldr	r2, [pc, #312]	; (8000cd8 <HAL_CRYP_Init+0x16c>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d116      	bne.n	8000bd0 <HAL_CRYP_Init+0x64>
  {
    /* Set the key size, data type and Algorithm */
    cr_value = (uint32_t)(hcryp->Init.DataType | hcryp->Init.KeySize | hcryp->Init.Algorithm | hcryp->Init.KeyMode);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	685a      	ldr	r2, [r3, #4]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	689b      	ldr	r3, [r3, #8]
 8000baa:	431a      	orrs	r2, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	695b      	ldr	r3, [r3, #20]
 8000bb0:	431a      	orrs	r2, r3
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	60bb      	str	r3, [r7, #8]
    /* Set the key size, data type, algorithm and mode */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_KMOD | AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD, cr_value);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	4b46      	ldr	r3, [pc, #280]	; (8000cdc <HAL_CRYP_Init+0x170>)
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	6812      	ldr	r2, [r2, #0]
 8000bc8:	68b9      	ldr	r1, [r7, #8]
 8000bca:	430b      	orrs	r3, r1
 8000bcc:	6013      	str	r3, [r2, #0]
 8000bce:	e070      	b.n	8000cb2 <HAL_CRYP_Init+0x146>
  }
  else
  {
    /* SAES is initializing, fetching random number from the RNG */
    tickstart = HAL_GetTick();
 8000bd0:	f7ff feb8 	bl	8000944 <HAL_GetTick>
 8000bd4:	60f8      	str	r0, [r7, #12]
    while (HAL_IS_BIT_SET(hcryp->Instance->SR, CRYP_FLAG_BUSY))
 8000bd6:	e01e      	b.n	8000c16 <HAL_CRYP_Init+0xaa>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CRYP_GENERAL_TIMEOUT)
 8000bd8:	f7ff feb4 	bl	8000944 <HAL_GetTick>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	2b52      	cmp	r3, #82	; 0x52
 8000be4:	d917      	bls.n	8000c16 <HAL_CRYP_Init+0xaa>
      {
        __HAL_CRYP_DISABLE(hcryp);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f022 0201 	bic.w	r2, r2, #1
 8000bf4:	601a      	str	r2, [r3, #0]
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bfa:	f043 0210 	orr.w	r2, r3, #16
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	65da      	str	r2, [r3, #92]	; 0x5c
        hcryp->State = HAL_CRYP_STATE_READY;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2201      	movs	r2, #1
 8000c06:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
        __HAL_UNLOCK(hcryp);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e05b      	b.n	8000cce <HAL_CRYP_Init+0x162>
    while (HAL_IS_BIT_SET(hcryp->Instance->SR, CRYP_FLAG_BUSY))
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f003 0308 	and.w	r3, r3, #8
 8000c20:	2b08      	cmp	r3, #8
 8000c22:	d0d9      	beq.n	8000bd8 <HAL_CRYP_Init+0x6c>
      }
    }
    /* SAES is initializing, no random number fetching error flagged */
    tickstart = HAL_GetTick();
 8000c24:	f7ff fe8e 	bl	8000944 <HAL_GetTick>
 8000c28:	60f8      	str	r0, [r7, #12]
    while (HAL_IS_BIT_SET(hcryp->Instance->ISR, CRYP_FLAG_RNGEIF))
 8000c2a:	e01e      	b.n	8000c6a <HAL_CRYP_Init+0xfe>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CRYP_GENERAL_TIMEOUT)
 8000c2c:	f7ff fe8a 	bl	8000944 <HAL_GetTick>
 8000c30:	4602      	mov	r2, r0
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	2b52      	cmp	r3, #82	; 0x52
 8000c38:	d917      	bls.n	8000c6a <HAL_CRYP_Init+0xfe>
      {
        __HAL_CRYP_DISABLE(hcryp);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f022 0201 	bic.w	r2, r2, #1
 8000c48:	601a      	str	r2, [r3, #0]
        hcryp->ErrorCode |= HAL_CRYP_ERROR_RNG;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c4e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	65da      	str	r2, [r3, #92]	; 0x5c
        hcryp->State = HAL_CRYP_STATE_READY;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2201      	movs	r2, #1
 8000c5a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
        __HAL_UNLOCK(hcryp);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2200      	movs	r2, #0
 8000c62:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	e031      	b.n	8000cce <HAL_CRYP_Init+0x162>
    while (HAL_IS_BIT_SET(hcryp->Instance->ISR, CRYP_FLAG_RNGEIF))
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 8000c72:	f003 0308 	and.w	r3, r3, #8
 8000c76:	2b08      	cmp	r3, #8
 8000c78:	d0d8      	beq.n	8000c2c <HAL_CRYP_Init+0xc0>
      }
    }
    cr_value = (uint32_t)(hcryp->Init.KeyMode | hcryp->Init.DataType | hcryp->Init.KeySize | \
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	431a      	orrs	r2, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	689b      	ldr	r3, [r3, #8]
 8000c88:	431a      	orrs	r2, r3
                          hcryp->Init.Algorithm | hcryp->Init.KeySelect | hcryp->Init.KeyProtection);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	695b      	ldr	r3, [r3, #20]
    cr_value = (uint32_t)(hcryp->Init.KeyMode | hcryp->Init.DataType | hcryp->Init.KeySize | \
 8000c8e:	431a      	orrs	r2, r3
                          hcryp->Init.Algorithm | hcryp->Init.KeySelect | hcryp->Init.KeyProtection);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c94:	431a      	orrs	r2, r3
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    cr_value = (uint32_t)(hcryp->Init.KeyMode | hcryp->Init.DataType | hcryp->Init.KeySize | \
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	60bb      	str	r3, [r7, #8]
    /* Set the key size, data type, algorithm, Key selection and key protection */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_KMOD | AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD | AES_CR_KEYSEL |
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <HAL_CRYP_Init+0x174>)
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	6812      	ldr	r2, [r2, #0]
 8000cac:	68b9      	ldr	r1, [r7, #8]
 8000cae:	430b      	orrs	r3, r1
 8000cb0:	6013      	str	r3, [r2, #0]
               AES_CR_KEYPROT, cr_value);
  }
  /* Reset Error Code field */
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Reset peripheral Key and IV configuration flag */
  hcryp->KeyIVConfig = 0U;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2200      	movs	r2, #0
 8000cbc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Set the default CRYP phase */
  hcryp->Phase = CRYP_PHASE_READY;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2201      	movs	r2, #1
 8000cca:	64da      	str	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	420c0000 	.word	0x420c0000
 8000cdc:	fcfaff99 	.word	0xfcfaff99
 8000ce0:	8cf2ff99 	.word	0x8cf2ff99

08000ce4 <HAL_CRYP_Encrypt>:
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Encrypt(CRYP_HandleTypeDef *hcryp, uint32_t *pInput, uint16_t Size, uint32_t *pOutput,
                                   uint32_t Timeout)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	603b      	str	r3, [r7, #0]
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	80fb      	strh	r3, [r7, #6]

  /* Check input buffer size */
  assert_param(IS_CRYP_BUFFERSIZE(algo_assert, hcryp->Init.DataWidthUnit, Size));
#endif /* USE_FULL_ASSERT */

  if (hcryp->State == HAL_CRYP_STATE_READY)
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	f040 808e 	bne.w	8000e1e <HAL_CRYP_Encrypt+0x13a>
  {
    /* Change state Busy */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	2202      	movs	r2, #2
 8000d06:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
    __HAL_LOCK(hcryp);
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d101      	bne.n	8000d18 <HAL_CRYP_Encrypt+0x34>
 8000d14:	2302      	movs	r3, #2
 8000d16:	e08b      	b.n	8000e30 <HAL_CRYP_Encrypt+0x14c>
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Reset CrypInCount, CrypOutCount and Initialize pCrypInBuffPtr and pCrypOutBuffPtr parameters */
    hcryp->CrypInCount = 0U;
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	2200      	movs	r2, #0
 8000d24:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hcryp->CrypOutCount = 0U;
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    hcryp->pCrypInBuffPtr = pInput;
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	68ba      	ldr	r2, [r7, #8]
 8000d34:	63da      	str	r2, [r3, #60]	; 0x3c
    hcryp->pCrypOutBuffPtr = pOutput;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	683a      	ldr	r2, [r7, #0]
 8000d3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Calculate Size parameter in Byte */
    if (hcryp->Init.DataWidthUnit == CRYP_DATAWIDTHUNIT_WORD)
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d106      	bne.n	8000d52 <HAL_CRYP_Encrypt+0x6e>
    {
      hcryp->Size = Size * 4U;
 8000d44:	88fb      	ldrh	r3, [r7, #6]
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	b29a      	uxth	r2, r3
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 8000d50:	e003      	b.n	8000d5a <HAL_CRYP_Encrypt+0x76>
    }
    else
    {
      hcryp->Size = Size;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	88fa      	ldrh	r2, [r7, #6]
 8000d56:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    if (hcryp->Instance == AES)
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a36      	ldr	r2, [pc, #216]	; (8000e38 <HAL_CRYP_Encrypt+0x154>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d108      	bne.n	8000d76 <HAL_CRYP_Encrypt+0x92>
    {
      /* Set the operating mode */
      MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_ENCRYPT);
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f022 0218 	bic.w	r2, r2, #24
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	e009      	b.n	8000d8a <HAL_CRYP_Encrypt+0xa6>
    }
    else
    {
      /* Set the operating mode and normal key selection */
      MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE | AES_CR_KMOD, CRYP_OPERATINGMODE_ENCRYPT | CRYP_KEYMODE_NORMAL);
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	68fa      	ldr	r2, [r7, #12]
 8000d7e:	6812      	ldr	r2, [r2, #0]
 8000d80:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000d84:	f023 0318 	bic.w	r3, r3, #24
 8000d88:	6013      	str	r3, [r2, #0]
    }
    /* Algo get algorithm selected */
    algo = hcryp->Instance->CR & AES_CR_CHMOD;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	4b2a      	ldr	r3, [pc, #168]	; (8000e3c <HAL_CRYP_Encrypt+0x158>)
 8000d92:	4013      	ands	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]

    switch (algo)
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d9c:	d023      	beq.n	8000de6 <HAL_CRYP_Encrypt+0x102>
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000da4:	d826      	bhi.n	8000df4 <HAL_CRYP_Encrypt+0x110>
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	2b60      	cmp	r3, #96	; 0x60
 8000daa:	d015      	beq.n	8000dd8 <HAL_CRYP_Encrypt+0xf4>
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	2b60      	cmp	r3, #96	; 0x60
 8000db0:	d820      	bhi.n	8000df4 <HAL_CRYP_Encrypt+0x110>
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	2b40      	cmp	r3, #64	; 0x40
 8000db6:	d008      	beq.n	8000dca <HAL_CRYP_Encrypt+0xe6>
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	2b40      	cmp	r3, #64	; 0x40
 8000dbc:	d81a      	bhi.n	8000df4 <HAL_CRYP_Encrypt+0x110>
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d002      	beq.n	8000dca <HAL_CRYP_Encrypt+0xe6>
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	2b20      	cmp	r3, #32
 8000dc8:	d114      	bne.n	8000df4 <HAL_CRYP_Encrypt+0x110>
    {
      case CRYP_AES_ECB:
      case CRYP_AES_CBC:
      case CRYP_AES_CTR:
        /* AES encryption */
        status = CRYP_AES_Encrypt(hcryp, Timeout);
 8000dca:	6a39      	ldr	r1, [r7, #32]
 8000dcc:	68f8      	ldr	r0, [r7, #12]
 8000dce:	f000 f8df 	bl	8000f90 <CRYP_AES_Encrypt>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	75fb      	strb	r3, [r7, #23]
        break;
 8000dd6:	e016      	b.n	8000e06 <HAL_CRYP_Encrypt+0x122>

      case CRYP_AES_GCM_GMAC:
        /* AES GCM encryption */
        status = CRYP_AESGCM_Process(hcryp, Timeout);
 8000dd8:	6a39      	ldr	r1, [r7, #32]
 8000dda:	68f8      	ldr	r0, [r7, #12]
 8000ddc:	f000 fc7f 	bl	80016de <CRYP_AESGCM_Process>
 8000de0:	4603      	mov	r3, r0
 8000de2:	75fb      	strb	r3, [r7, #23]
        break;
 8000de4:	e00f      	b.n	8000e06 <HAL_CRYP_Encrypt+0x122>

      case CRYP_AES_CCM:
        /* AES CCM encryption */
        status = CRYP_AESCCM_Process(hcryp, Timeout);
 8000de6:	6a39      	ldr	r1, [r7, #32]
 8000de8:	68f8      	ldr	r0, [r7, #12]
 8000dea:	f000 fe0d 	bl	8001a08 <CRYP_AESCCM_Process>
 8000dee:	4603      	mov	r3, r0
 8000df0:	75fb      	strb	r3, [r7, #23]
        break;
 8000df2:	e008      	b.n	8000e06 <HAL_CRYP_Encrypt+0x122>

      default:
        hcryp->ErrorCode |= HAL_CRYP_ERROR_NOT_SUPPORTED;
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000df8:	f043 0220 	orr.w	r2, r3, #32
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	65da      	str	r2, [r3, #92]	; 0x5c
        status = HAL_ERROR;
 8000e00:	2301      	movs	r3, #1
 8000e02:	75fb      	strb	r3, [r7, #23]
        break;
 8000e04:	bf00      	nop
    }

    if (status == HAL_OK)
 8000e06:	7dfb      	ldrb	r3, [r7, #23]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d110      	bne.n	8000e2e <HAL_CRYP_Encrypt+0x14a>
    {
      /* Change the CRYP peripheral state */
      hcryp->State = HAL_CRYP_STATE_READY;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	2201      	movs	r2, #1
 8000e10:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
      __HAL_UNLOCK(hcryp);
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	2200      	movs	r2, #0
 8000e18:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8000e1c:	e007      	b.n	8000e2e <HAL_CRYP_Encrypt+0x14a>
    }
  }
  else
  {
    /* Busy error code field */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e22:	f043 0208 	orr.w	r2, r3, #8
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	65da      	str	r2, [r3, #92]	; 0x5c
    status = HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000e2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3718      	adds	r7, #24
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	420c0000 	.word	0x420c0000
 8000e3c:	00010060 	.word	0x00010060

08000e40 <HAL_CRYP_Decrypt>:
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Decrypt(CRYP_HandleTypeDef *hcryp, uint32_t *pInput, uint16_t Size, uint32_t *pOutput,
                                   uint32_t Timeout)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	603b      	str	r3, [r7, #0]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	80fb      	strh	r3, [r7, #6]

  /* Check input buffer size */
  assert_param(IS_CRYP_BUFFERSIZE(algo_assert, hcryp->Init.DataWidthUnit, Size));
#endif /* USE_FULL_ASSERT */

  if (hcryp->State == HAL_CRYP_STATE_READY)
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d17f      	bne.n	8000f5c <HAL_CRYP_Decrypt+0x11c>
  {
    /* Change state Busy */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	2202      	movs	r2, #2
 8000e60:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
    __HAL_LOCK(hcryp);
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d101      	bne.n	8000e72 <HAL_CRYP_Decrypt+0x32>
 8000e6e:	2302      	movs	r3, #2
 8000e70:	e07d      	b.n	8000f6e <HAL_CRYP_Decrypt+0x12e>
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	2201      	movs	r2, #1
 8000e76:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /*  Reset CrypInCount, CrypOutCount and Initialize pCrypInBuffPtr and pCrypOutBuffPtr  parameters*/
    hcryp->CrypInCount = 0U;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hcryp->CrypOutCount = 0U;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	2200      	movs	r2, #0
 8000e86:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    hcryp->pCrypInBuffPtr = pInput;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	68ba      	ldr	r2, [r7, #8]
 8000e8e:	63da      	str	r2, [r3, #60]	; 0x3c
    hcryp->pCrypOutBuffPtr = pOutput;
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	683a      	ldr	r2, [r7, #0]
 8000e94:	641a      	str	r2, [r3, #64]	; 0x40

    /*  Calculate Size parameter in Byte*/
    if (hcryp->Init.DataWidthUnit == CRYP_DATAWIDTHUNIT_WORD)
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d106      	bne.n	8000eac <HAL_CRYP_Decrypt+0x6c>
    {
      hcryp->Size = Size * 4U;
 8000e9e:	88fb      	ldrh	r3, [r7, #6]
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	b29a      	uxth	r2, r3
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 8000eaa:	e003      	b.n	8000eb4 <HAL_CRYP_Decrypt+0x74>
    }
    else
    {
      hcryp->Size = Size;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	88fa      	ldrh	r2, [r7, #6]
 8000eb0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    /* Set Decryption operating mode*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f023 0218 	bic.w	r2, r3, #24
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f042 0210 	orr.w	r2, r2, #16
 8000ec6:	601a      	str	r2, [r3, #0]

    /* algo get algorithm selected */
    algo = hcryp->Instance->CR & AES_CR_CHMOD;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	4b2a      	ldr	r3, [pc, #168]	; (8000f78 <HAL_CRYP_Decrypt+0x138>)
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]

    switch (algo)
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eda:	d023      	beq.n	8000f24 <HAL_CRYP_Decrypt+0xe4>
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ee2:	d826      	bhi.n	8000f32 <HAL_CRYP_Decrypt+0xf2>
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	2b60      	cmp	r3, #96	; 0x60
 8000ee8:	d015      	beq.n	8000f16 <HAL_CRYP_Decrypt+0xd6>
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	2b60      	cmp	r3, #96	; 0x60
 8000eee:	d820      	bhi.n	8000f32 <HAL_CRYP_Decrypt+0xf2>
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	2b40      	cmp	r3, #64	; 0x40
 8000ef4:	d008      	beq.n	8000f08 <HAL_CRYP_Decrypt+0xc8>
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	2b40      	cmp	r3, #64	; 0x40
 8000efa:	d81a      	bhi.n	8000f32 <HAL_CRYP_Decrypt+0xf2>
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d002      	beq.n	8000f08 <HAL_CRYP_Decrypt+0xc8>
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	2b20      	cmp	r3, #32
 8000f06:	d114      	bne.n	8000f32 <HAL_CRYP_Decrypt+0xf2>
    {
      case CRYP_AES_ECB:
      case CRYP_AES_CBC:
      case CRYP_AES_CTR:
        /* AES decryption */
        status = CRYP_AES_Decrypt(hcryp, Timeout);
 8000f08:	6a39      	ldr	r1, [r7, #32]
 8000f0a:	68f8      	ldr	r0, [r7, #12]
 8000f0c:	f000 f930 	bl	8001170 <CRYP_AES_Decrypt>
 8000f10:	4603      	mov	r3, r0
 8000f12:	75fb      	strb	r3, [r7, #23]
        break;
 8000f14:	e016      	b.n	8000f44 <HAL_CRYP_Decrypt+0x104>

      case CRYP_AES_GCM_GMAC:
        /* AES GCM decryption */
        status = CRYP_AESGCM_Process(hcryp, Timeout);
 8000f16:	6a39      	ldr	r1, [r7, #32]
 8000f18:	68f8      	ldr	r0, [r7, #12]
 8000f1a:	f000 fbe0 	bl	80016de <CRYP_AESGCM_Process>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	75fb      	strb	r3, [r7, #23]
        break;
 8000f22:	e00f      	b.n	8000f44 <HAL_CRYP_Decrypt+0x104>

      case CRYP_AES_CCM:
        /* AES CCM decryption */
        status = CRYP_AESCCM_Process(hcryp, Timeout);
 8000f24:	6a39      	ldr	r1, [r7, #32]
 8000f26:	68f8      	ldr	r0, [r7, #12]
 8000f28:	f000 fd6e 	bl	8001a08 <CRYP_AESCCM_Process>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	75fb      	strb	r3, [r7, #23]
        break;
 8000f30:	e008      	b.n	8000f44 <HAL_CRYP_Decrypt+0x104>

      default:
        hcryp->ErrorCode |= HAL_CRYP_ERROR_NOT_SUPPORTED;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f36:	f043 0220 	orr.w	r2, r3, #32
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	65da      	str	r2, [r3, #92]	; 0x5c
        status = HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	75fb      	strb	r3, [r7, #23]
        break;
 8000f42:	bf00      	nop
    }

    if (status == HAL_OK)
 8000f44:	7dfb      	ldrb	r3, [r7, #23]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d110      	bne.n	8000f6c <HAL_CRYP_Decrypt+0x12c>
    {
      /* Change the CRYP peripheral state */
      hcryp->State = HAL_CRYP_STATE_READY;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
      __HAL_UNLOCK(hcryp);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	2200      	movs	r2, #0
 8000f56:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8000f5a:	e007      	b.n	8000f6c <HAL_CRYP_Decrypt+0x12c>
    }
  }
  else
  {
    /* Busy error code field */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f60:	f043 0208 	orr.w	r2, r3, #8
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	65da      	str	r2, [r3, #92]	; 0x5c
    status = HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8000f6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3718      	adds	r7, #24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	00010060 	.word	0x00010060

08000f7c <HAL_CRYP_ErrorCallback>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module.
  * @retval None
  */
__weak void HAL_CRYP_ErrorCallback(CRYP_HandleTypeDef *hcryp)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  UNUSED(hcryp);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_CRYP_ErrorCallback can be implemented in the user file
   */
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <CRYP_AES_Encrypt>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure
  * @param  Timeout specify Timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AES_Encrypt(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
  uint16_t incount;  /* Temporary CrypInCount Value */
  uint16_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t dokeyivconfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	613b      	str	r3, [r7, #16]
  uint32_t tickstart;

  if ((hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE) || (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d003      	beq.n	8000fae <CRYP_AES_Encrypt+0x1e>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000faa:	2b04      	cmp	r3, #4
 8000fac:	d109      	bne.n	8000fc2 <CRYP_AES_Encrypt+0x32>
  {
    if (hcryp->KeyIVConfig == 1U)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d102      	bne.n	8000fbc <CRYP_AES_Encrypt+0x2c>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      dokeyivconfig = 0U;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
 8000fba:	e002      	b.n	8000fc2 <CRYP_AES_Encrypt+0x32>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  if (dokeyivconfig == 1U)
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d17a      	bne.n	80010be <CRYP_AES_Encrypt+0x12e>
  {
    if ((hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE) || \
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d003      	beq.n	8000fd8 <CRYP_AES_Encrypt+0x48>
        (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ALWAYS))
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    if ((hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE) || \
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d160      	bne.n	800109a <CRYP_AES_Encrypt+0x10a>
    {
      if (hcryp->Instance == AES)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a63      	ldr	r2, [pc, #396]	; (800116c <CRYP_AES_Encrypt+0x1dc>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d114      	bne.n	800100c <CRYP_AES_Encrypt+0x7c>
      {
        /* Set the Key */
        if (hcryp->Init.KeyMode != CRYP_KEYMODE_SHARED)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000fea:	d006      	beq.n	8000ffa <CRYP_AES_Encrypt+0x6a>
        {
          CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f000 faec 	bl	80015d0 <CRYP_SetKey>
 8000ff8:	e048      	b.n	800108c <CRYP_AES_Encrypt+0xfc>
        }
        else /* After sharing the key, AES should set KMOD[1:0] to 00.*/
        {
          hcryp->Instance->CR &=  ~CRYP_KEYMODE_SHARED;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	e03f      	b.n	800108c <CRYP_AES_Encrypt+0xfc>
        }
      }
      else
      {
        /* We should re-write Key, in the case where we change key after first operation */
        if ((hcryp->Init.KeySelect == CRYP_KEYSEL_NORMAL) && (hcryp->Init.KeyMode == CRYP_KEYMODE_NORMAL))
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001010:	2b00      	cmp	r3, #0
 8001012:	d109      	bne.n	8001028 <CRYP_AES_Encrypt+0x98>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001018:	2b00      	cmp	r3, #0
 800101a:	d105      	bne.n	8001028 <CRYP_AES_Encrypt+0x98>
        {
          /* Set the Key */
          CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	4619      	mov	r1, r3
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f000 fad4 	bl	80015d0 <CRYP_SetKey>
        }
        /* Get tick */
        tickstart = HAL_GetTick();
 8001028:	f7ff fc8c 	bl	8000944 <HAL_GetTick>
 800102c:	60f8      	str	r0, [r7, #12]

        while (HAL_IS_BIT_CLR(hcryp->Instance->SR, CRYP_FLAG_KEYVALID))
 800102e:	e026      	b.n	800107e <CRYP_AES_Encrypt+0xee>
        {
          /* Check for the Timeout */
          if (Timeout != HAL_MAX_DELAY)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001036:	d022      	beq.n	800107e <CRYP_AES_Encrypt+0xee>
          {
            if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001038:	f7ff fc84 	bl	8000944 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	683a      	ldr	r2, [r7, #0]
 8001044:	429a      	cmp	r2, r3
 8001046:	d302      	bcc.n	800104e <CRYP_AES_Encrypt+0xbe>
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d117      	bne.n	800107e <CRYP_AES_Encrypt+0xee>
            {
              /* Disable the CRYP peripheral clock */
              __HAL_CRYP_DISABLE(hcryp);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f022 0201 	bic.w	r2, r2, #1
 800105c:	601a      	str	r2, [r3, #0]

              /* Change state */
              hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001062:	f043 0210 	orr.w	r2, r3, #16
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	65da      	str	r2, [r3, #92]	; 0x5c
              hcryp->State = HAL_CRYP_STATE_READY;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2201      	movs	r2, #1
 800106e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
              __HAL_UNLOCK(hcryp);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2200      	movs	r2, #0
 8001076:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
              return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e071      	b.n	8001162 <CRYP_AES_Encrypt+0x1d2>
        while (HAL_IS_BIT_CLR(hcryp->Instance->SR, CRYP_FLAG_KEYVALID))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001088:	2b00      	cmp	r3, #0
 800108a:	d0d1      	beq.n	8001030 <CRYP_AES_Encrypt+0xa0>
            }
          }
        }
      }
      if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	695b      	ldr	r3, [r3, #20]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d002      	beq.n	800109a <CRYP_AES_Encrypt+0x10a>
      {
        /* Set the Initialization Vector */
        CRYP_SetIV(hcryp);
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f000 fafc 	bl	8001692 <CRYP_SetIV>
      }
    }
    /* key & IV configuration for CBC and CTR in interleave mode */
    if (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800109e:	2b04      	cmp	r3, #4
 80010a0:	d117      	bne.n	80010d2 <CRYP_AES_Encrypt+0x142>
    {
      /* Set the Key */
      CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	4619      	mov	r1, r3
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f000 fa91 	bl	80015d0 <CRYP_SetKey>
      if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d00d      	beq.n	80010d2 <CRYP_AES_Encrypt+0x142>
      {
        /* Set the Initialization Vector*/
        CRYP_SetIV(hcryp);
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f000 faeb 	bl	8001692 <CRYP_SetIV>
 80010bc:	e009      	b.n	80010d2 <CRYP_AES_Encrypt+0x142>
    }
  } /* If (dokeyivconfig == 1U) */
  else
  {
    /* interleave mode Key configuration  */
    if (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c2:	2b04      	cmp	r3, #4
 80010c4:	d105      	bne.n	80010d2 <CRYP_AES_Encrypt+0x142>
    {
      /* Set the Key */
      CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	4619      	mov	r1, r3
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f000 fa7f 	bl	80015d0 <CRYP_SetKey>
    }
  }
  /* Peripheral Key configuration to not do, IV to configure for CBC */
  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYNOCONFIG)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d106      	bne.n	80010e8 <CRYP_AES_Encrypt+0x158>
  {
    if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d002      	beq.n	80010e8 <CRYP_AES_Encrypt+0x158>
    {
      /* Set the Initialization Vector*/
      CRYP_SetIV(hcryp);
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f000 fad5 	bl	8001692 <CRYP_SetIV>
    }
  }

  /* Set the phase */
  hcryp->Phase = CRYP_PHASE_PROCESS;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2202      	movs	r2, #2
 80010ec:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable CRYP */
  __HAL_CRYP_ENABLE(hcryp);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f042 0201 	orr.w	r2, r2, #1
 80010fc:	601a      	str	r2, [r3, #0]

  incount = hcryp->CrypInCount;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001104:	82fb      	strh	r3, [r7, #22]
  outcount = hcryp->CrypOutCount;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800110c:	82bb      	strh	r3, [r7, #20]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 800110e:	e00b      	b.n	8001128 <CRYP_AES_Encrypt+0x198>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 8001110:	6839      	ldr	r1, [r7, #0]
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f000 f9ac 	bl	8001470 <CRYP_AES_ProcessData>
    incount = hcryp->CrypInCount;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800111e:	82fb      	strh	r3, [r7, #22]
    outcount = hcryp->CrypOutCount;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8001126:	82bb      	strh	r3, [r7, #20]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800112e:	089b      	lsrs	r3, r3, #2
 8001130:	b29b      	uxth	r3, r3
 8001132:	8afa      	ldrh	r2, [r7, #22]
 8001134:	429a      	cmp	r2, r3
 8001136:	d207      	bcs.n	8001148 <CRYP_AES_Encrypt+0x1b8>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800113e:	089b      	lsrs	r3, r3, #2
 8001140:	b29b      	uxth	r3, r3
 8001142:	8aba      	ldrh	r2, [r7, #20]
 8001144:	429a      	cmp	r2, r3
 8001146:	d3e3      	bcc.n	8001110 <CRYP_AES_Encrypt+0x180>
  }

  /* Disable CRYP */
  __HAL_CRYP_DISABLE(hcryp);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f022 0201 	bic.w	r2, r2, #1
 8001156:	601a      	str	r2, [r3, #0]

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2201      	movs	r2, #1
 800115c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  return HAL_OK;
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3718      	adds	r7, #24
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	420c0000 	.word	0x420c0000

08001170 <CRYP_AES_Decrypt>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AES_Decrypt(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
  uint16_t incount;  /* Temporary CrypInCount Value */
  uint16_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t dokeyivconfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 800117a:	2301      	movs	r3, #1
 800117c:	60bb      	str	r3, [r7, #8]

  if ((hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE) || (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE))
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001182:	2b01      	cmp	r3, #1
 8001184:	d003      	beq.n	800118e <CRYP_AES_Decrypt+0x1e>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800118a:	2b04      	cmp	r3, #4
 800118c:	d109      	bne.n	80011a2 <CRYP_AES_Decrypt+0x32>
  {
    if (hcryp->KeyIVConfig == 1U)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001192:	2b01      	cmp	r3, #1
 8001194:	d102      	bne.n	800119c <CRYP_AES_Decrypt+0x2c>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      dokeyivconfig = 0U;
 8001196:	2300      	movs	r3, #0
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	e002      	b.n	80011a2 <CRYP_AES_Decrypt+0x32>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2201      	movs	r2, #1
 80011a0:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  if (dokeyivconfig == 1U)
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	f040 80ce 	bne.w	8001346 <CRYP_AES_Decrypt+0x1d6>
  {
    if (hcryp->Instance == AES)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a8b      	ldr	r2, [pc, #556]	; (80013dc <CRYP_AES_Decrypt+0x26c>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d17b      	bne.n	80012ac <CRYP_AES_Decrypt+0x13c>
    {
      /*  Key preparation for ECB/CBC */
      if (hcryp->Init.Algorithm != CRYP_AES_CTR)   /*ECB or CBC*/
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	695b      	ldr	r3, [r3, #20]
 80011b8:	2b40      	cmp	r3, #64	; 0x40
 80011ba:	d05e      	beq.n	800127a <CRYP_AES_Decrypt+0x10a>
      {
        /* key preparation for decryption, operating mode 2*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_KMOD, CRYP_KEYMODE_NORMAL);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80011ca:	601a      	str	r2, [r3, #0]
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f023 0218 	bic.w	r2, r3, #24
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f042 0208 	orr.w	r2, r2, #8
 80011de:	601a      	str	r2, [r3, #0]

        /* Set the Key */
        if ((hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE) || \
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d003      	beq.n	80011f0 <CRYP_AES_Decrypt+0x80>
            (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ALWAYS))
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if ((hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE) || \
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d114      	bne.n	800121a <CRYP_AES_Decrypt+0xaa>
        {
          if (hcryp->Init.KeyMode != CRYP_KEYMODE_SHARED)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80011f8:	d006      	beq.n	8001208 <CRYP_AES_Decrypt+0x98>
          {
            CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	4619      	mov	r1, r3
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f000 f9e5 	bl	80015d0 <CRYP_SetKey>
          if (hcryp->Init.KeyMode != CRYP_KEYMODE_SHARED)
 8001206:	e012      	b.n	800122e <CRYP_AES_Decrypt+0xbe>
          }
          else /*after sharing the key, AES should set KMOD[1:0] to 00.*/
          {
            hcryp->Instance->CR &=  ~CRYP_KEYMODE_SHARED;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8001216:	601a      	str	r2, [r3, #0]
          if (hcryp->Init.KeyMode != CRYP_KEYMODE_SHARED)
 8001218:	e009      	b.n	800122e <CRYP_AES_Decrypt+0xbe>
          }
        }

        /* interleave mode Key configuration  */
        else if (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800121e:	2b04      	cmp	r3, #4
 8001220:	d105      	bne.n	800122e <CRYP_AES_Decrypt+0xbe>
        {
          /* Set the Key */
          CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	4619      	mov	r1, r3
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f000 f9d1 	bl	80015d0 <CRYP_SetKey>
        {
          /* Nothing to do */
        }

        /* Enable CRYP */
        __HAL_CRYP_ENABLE(hcryp);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f042 0201 	orr.w	r2, r2, #1
 800123c:	601a      	str	r2, [r3, #0]

        /* Wait for CCF flag to be raised */
        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 800123e:	6839      	ldr	r1, [r7, #0]
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f000 ff41 	bl	80020c8 <CRYP_WaitOnCCFlag>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <CRYP_AES_Decrypt+0xe0>
        {
          return HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	e10a      	b.n	8001466 <CRYP_AES_Decrypt+0x2f6>
        }
        /* Clear CCF Flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f8d3 2308 	ldr.w	r2, [r3, #776]	; 0x308
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f042 0201 	orr.w	r2, r2, #1
 8001260:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Return to decryption operating mode(Mode 3)*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f023 0218 	bic.w	r2, r3, #24
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f042 0210 	orr.w	r2, r2, #16
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	e05d      	b.n	8001336 <CRYP_AES_Decrypt+0x1c6>
      }
      else  /*Algorithm CTR */
      {
        /* Set the Key */
        if (hcryp->Init.KeyIVConfigSkip != CRYP_KEYNOCONFIG)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800127e:	2b02      	cmp	r3, #2
 8001280:	d059      	beq.n	8001336 <CRYP_AES_Decrypt+0x1c6>
        {
          if (hcryp->Init.KeyMode != CRYP_KEYMODE_SHARED)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800128a:	d006      	beq.n	800129a <CRYP_AES_Decrypt+0x12a>
          {
            CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	4619      	mov	r1, r3
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f000 f99c 	bl	80015d0 <CRYP_SetKey>
 8001298:	e04d      	b.n	8001336 <CRYP_AES_Decrypt+0x1c6>
          }
          else /*after sharing the key, AES should set KMOD[1:0] to 00.*/
          {
            hcryp->Instance->CR &=  ~CRYP_KEYMODE_SHARED;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	e044      	b.n	8001336 <CRYP_AES_Decrypt+0x1c6>
        }
      }
    }
    else /*SAES*/
    {
      if (hcryp->Init.Algorithm != CRYP_AES_CTR)   /*ECB or CBC*/
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	695b      	ldr	r3, [r3, #20]
 80012b0:	2b40      	cmp	r3, #64	; 0x40
 80012b2:	d040      	beq.n	8001336 <CRYP_AES_Decrypt+0x1c6>
      {
        /* key preparation for decryption, operating mode 2*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f023 0218 	bic.w	r2, r3, #24
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f042 0208 	orr.w	r2, r2, #8
 80012c6:	601a      	str	r2, [r3, #0]

        /* we should re-write Key, in the case where we change key after first operation*/
        if ((hcryp->Init.KeySelect == CRYP_KEYSEL_NORMAL) && (hcryp->Init.KeyMode == CRYP_KEYMODE_NORMAL))
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d10d      	bne.n	80012ec <CRYP_AES_Decrypt+0x17c>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d109      	bne.n	80012ec <CRYP_AES_Decrypt+0x17c>
        {
          if (hcryp->Init.KeyIVConfigSkip != CRYP_KEYNOCONFIG)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d005      	beq.n	80012ec <CRYP_AES_Decrypt+0x17c>
          {
            CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	4619      	mov	r1, r3
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f000 f972 	bl	80015d0 <CRYP_SetKey>
          }
        }

        /* Enable SAES */
        __HAL_CRYP_ENABLE(hcryp);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f042 0201 	orr.w	r2, r2, #1
 80012fa:	601a      	str	r2, [r3, #0]

        /* Wait for CCF flag to be raised */
        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 80012fc:	6839      	ldr	r1, [r7, #0]
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f000 fee2 	bl	80020c8 <CRYP_WaitOnCCFlag>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <CRYP_AES_Decrypt+0x19e>
        {
          return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e0ab      	b.n	8001466 <CRYP_AES_Decrypt+0x2f6>
        }
        /* Clear CCF Flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f8d3 2308 	ldr.w	r2, [r3, #776]	; 0x308
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f042 0201 	orr.w	r2, r2, #1
 800131e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /*  End of Key preparation for ECB/CBC */
        /* Return to decryption operating mode(Mode 3)*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f023 0218 	bic.w	r2, r3, #24
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f042 0210 	orr.w	r2, r2, #16
 8001334:	601a      	str	r2, [r3, #0]
      }
    }
    /* Set IV */
    if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d056      	beq.n	80013ec <CRYP_AES_Decrypt+0x27c>
    {
      /* Set the Initialization Vector*/
      CRYP_SetIV(hcryp);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f000 f9a7 	bl	8001692 <CRYP_SetIV>
 8001344:	e052      	b.n	80013ec <CRYP_AES_Decrypt+0x27c>
  } /* if (dokeyivconfig == 1U) */

  else /* if (dokeyivconfig == 0U) */
  {
    /* interleave mode Key configuration  */
    if (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800134a:	2b04      	cmp	r3, #4
 800134c:	d14e      	bne.n	80013ec <CRYP_AES_Decrypt+0x27c>
    {
      if (hcryp->Instance == AES)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a22      	ldr	r2, [pc, #136]	; (80013dc <CRYP_AES_Decrypt+0x26c>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d149      	bne.n	80013ec <CRYP_AES_Decrypt+0x27c>
      {
        /*  Key preparation for ECB/CBC */
        if (hcryp->Init.Algorithm != CRYP_AES_CTR)   /*ECB or CBC*/
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	695b      	ldr	r3, [r3, #20]
 800135c:	2b40      	cmp	r3, #64	; 0x40
 800135e:	d03f      	beq.n	80013e0 <CRYP_AES_Decrypt+0x270>
        {
          /* key preparation for decryption, operating mode 2*/
          MODIFY_REG(hcryp->Instance->CR, AES_CR_KMOD, CRYP_KEYMODE_NORMAL);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800136e:	601a      	str	r2, [r3, #0]
          MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f023 0218 	bic.w	r2, r3, #24
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f042 0208 	orr.w	r2, r2, #8
 8001382:	601a      	str	r2, [r3, #0]

          /* Set the Key */
          CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	4619      	mov	r1, r3
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f000 f920 	bl	80015d0 <CRYP_SetKey>

          /* Enable CRYP */
          __HAL_CRYP_ENABLE(hcryp);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f042 0201 	orr.w	r2, r2, #1
 800139e:	601a      	str	r2, [r3, #0]

          /* Wait for CCF flag to be raised */
          if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 80013a0:	6839      	ldr	r1, [r7, #0]
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f000 fe90 	bl	80020c8 <CRYP_WaitOnCCFlag>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <CRYP_AES_Decrypt+0x242>
          {
            return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e059      	b.n	8001466 <CRYP_AES_Decrypt+0x2f6>
          }
          /* Clear CCF Flag */
          __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f8d3 2308 	ldr.w	r2, [r3, #776]	; 0x308
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f042 0201 	orr.w	r2, r2, #1
 80013c2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

          /* Return to decryption operating mode(Mode 3)*/
          MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f023 0218 	bic.w	r2, r3, #24
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f042 0210 	orr.w	r2, r2, #16
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	e007      	b.n	80013ec <CRYP_AES_Decrypt+0x27c>
 80013dc:	420c0000 	.word	0x420c0000
        }
        else  /*Algorithm CTR */
        {
          /* Set the Key */
          CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	4619      	mov	r1, r3
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f000 f8f2 	bl	80015d0 <CRYP_SetKey>
      }
    }

  }
  /* Set the phase */
  hcryp->Phase = CRYP_PHASE_PROCESS;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2202      	movs	r2, #2
 80013f0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable CRYP */
  __HAL_CRYP_ENABLE(hcryp);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f042 0201 	orr.w	r2, r2, #1
 8001400:	601a      	str	r2, [r3, #0]

  incount = hcryp->CrypInCount;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001408:	81fb      	strh	r3, [r7, #14]
  outcount = hcryp->CrypOutCount;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8001410:	81bb      	strh	r3, [r7, #12]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 8001412:	e00b      	b.n	800142c <CRYP_AES_Decrypt+0x2bc>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 8001414:	6839      	ldr	r1, [r7, #0]
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f000 f82a 	bl	8001470 <CRYP_AES_ProcessData>
    incount = hcryp->CrypInCount;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001422:	81fb      	strh	r3, [r7, #14]
    outcount = hcryp->CrypOutCount;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800142a:	81bb      	strh	r3, [r7, #12]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8001432:	089b      	lsrs	r3, r3, #2
 8001434:	b29b      	uxth	r3, r3
 8001436:	89fa      	ldrh	r2, [r7, #14]
 8001438:	429a      	cmp	r2, r3
 800143a:	d207      	bcs.n	800144c <CRYP_AES_Decrypt+0x2dc>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8001442:	089b      	lsrs	r3, r3, #2
 8001444:	b29b      	uxth	r3, r3
 8001446:	89ba      	ldrh	r2, [r7, #12]
 8001448:	429a      	cmp	r2, r3
 800144a:	d3e3      	bcc.n	8001414 <CRYP_AES_Decrypt+0x2a4>
  }
  /* Disable CRYP */
  __HAL_CRYP_DISABLE(hcryp);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f022 0201 	bic.w	r2, r2, #1
 800145a:	601a      	str	r2, [r3, #0]

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2201      	movs	r2, #1
 8001460:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  return HAL_OK;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop

08001470 <CRYP_AES_ProcessData>:
  *         the configuration information for CRYP module
  * @param  Timeout Specify Timeout value
  * @retval None
  */
static void CRYP_AES_ProcessData(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b088      	sub	sp, #32
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]

  uint32_t temp[4];  /* Temporary CrypOutBuff */
  uint32_t i;

  /* Write the input block in the IN FIFO */
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001484:	b29b      	uxth	r3, r3
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	441a      	add	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	6812      	ldr	r2, [r2, #0]
 8001490:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001498:	b29b      	uxth	r3, r3
 800149a:	3301      	adds	r3, #1
 800149c:	b29a      	uxth	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	441a      	add	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	6812      	ldr	r2, [r2, #0]
 80014ba:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	3301      	adds	r3, #1
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80014d8:	b29b      	uxth	r3, r3
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	441a      	add	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	6812      	ldr	r2, [r2, #0]
 80014e4:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	3301      	adds	r3, #1
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001502:	b29b      	uxth	r3, r3
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	441a      	add	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6812      	ldr	r2, [r2, #0]
 800150e:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001516:	b29b      	uxth	r3, r3
 8001518:	3301      	adds	r3, #1
 800151a:	b29a      	uxth	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Wait for CCF flag to be raised */
  if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8001522:	6839      	ldr	r1, [r7, #0]
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f000 fdcf 	bl	80020c8 <CRYP_WaitOnCCFlag>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d002      	beq.n	8001536 <CRYP_AES_ProcessData+0xc6>
    /*Call registered error callback*/
#if (USE_HAL_CRYP_REGISTER_CALLBACKS == 1U)
    hcryp->ErrorCallback(hcryp);
#else
    /*Call legacy weak error callback*/
    HAL_CRYP_ErrorCallback(hcryp);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f7ff fd23 	bl	8000f7c <HAL_CRYP_ErrorCallback>
#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */
  }

  /* Clear CCF Flag */
  __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f8d3 2308 	ldr.w	r2, [r3, #776]	; 0x308
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f042 0201 	orr.w	r2, r2, #1
 8001546:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

  /* Read the output block from the output FIFO and put them in temporary buffer then
     get CrypOutBuff from temporary buffer*/
  for (i = 0U; i < 4U; i++)
 800154a:	2300      	movs	r3, #0
 800154c:	61fb      	str	r3, [r7, #28]
 800154e:	e00b      	b.n	8001568 <CRYP_AES_ProcessData+0xf8>
  {
    temp[i] = hcryp->Instance->DOUTR;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	68da      	ldr	r2, [r3, #12]
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	3320      	adds	r3, #32
 800155c:	443b      	add	r3, r7
 800155e:	f843 2c14 	str.w	r2, [r3, #-20]
  for (i = 0U; i < 4U; i++)
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	3301      	adds	r3, #1
 8001566:	61fb      	str	r3, [r7, #28]
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	2b03      	cmp	r3, #3
 800156c:	d9f0      	bls.n	8001550 <CRYP_AES_ProcessData+0xe0>
  }
  i = 0U;
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
  while ((hcryp->CrypOutCount < ((hcryp->Size + 3U) / 4U)) && (i < 4U))
 8001572:	e01a      	b.n	80015aa <CRYP_AES_ProcessData+0x13a>
  {
    *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp[i];
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800157e:	b29b      	uxth	r3, r3
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	441a      	add	r2, r3
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	3320      	adds	r3, #32
 800158a:	443b      	add	r3, r7
 800158c:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8001590:	6013      	str	r3, [r2, #0]
    hcryp->CrypOutCount++;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8001598:	b29b      	uxth	r3, r3
 800159a:	3301      	adds	r3, #1
 800159c:	b29a      	uxth	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    i++;
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	3301      	adds	r3, #1
 80015a8:	61fb      	str	r3, [r7, #28]
  while ((hcryp->CrypOutCount < ((hcryp->Size + 3U) / 4U)) && (i < 4U))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	461a      	mov	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80015ba:	3303      	adds	r3, #3
 80015bc:	089b      	lsrs	r3, r3, #2
 80015be:	429a      	cmp	r2, r3
 80015c0:	d202      	bcs.n	80015c8 <CRYP_AES_ProcessData+0x158>
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	2b03      	cmp	r3, #3
 80015c6:	d9d5      	bls.n	8001574 <CRYP_AES_ProcessData+0x104>
  }
}
 80015c8:	bf00      	nop
 80015ca:	3720      	adds	r7, #32
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <CRYP_SetKey>:
  * @param  KeySize Size of Key
  * @note   If pKey is NULL, the Key registers are not written.
  * @retval None
  */
static void CRYP_SetKey(CRYP_HandleTypeDef *hcryp, uint32_t KeySize)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  if (hcryp->Init.pKey != NULL)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d051      	beq.n	8001686 <CRYP_SetKey+0xb6>
  {
    switch (KeySize)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d034      	beq.n	8001652 <CRYP_SetKey+0x82>
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80015ee:	d149      	bne.n	8001684 <CRYP_SetKey+0xb4>
    {
      case CRYP_KEYSIZE_256B:
        hcryp->Instance->KEYR7 = *(uint32_t *)(hcryp->Init.pKey);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	68da      	ldr	r2, [r3, #12]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	6812      	ldr	r2, [r2, #0]
 80015fa:	63da      	str	r2, [r3, #60]	; 0x3c
        hcryp->Instance->KEYR6 = *(uint32_t *)(hcryp->Init.pKey + 1U);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	68da      	ldr	r2, [r3, #12]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	6852      	ldr	r2, [r2, #4]
 8001606:	639a      	str	r2, [r3, #56]	; 0x38
        hcryp->Instance->KEYR5 = *(uint32_t *)(hcryp->Init.pKey + 2U);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68da      	ldr	r2, [r3, #12]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6892      	ldr	r2, [r2, #8]
 8001612:	635a      	str	r2, [r3, #52]	; 0x34
        hcryp->Instance->KEYR4 = *(uint32_t *)(hcryp->Init.pKey + 3U);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68da      	ldr	r2, [r3, #12]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	68d2      	ldr	r2, [r2, #12]
 800161e:	631a      	str	r2, [r3, #48]	; 0x30
        hcryp->Instance->KEYR3 = *(uint32_t *)(hcryp->Init.pKey + 4U);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	68da      	ldr	r2, [r3, #12]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6912      	ldr	r2, [r2, #16]
 800162a:	61da      	str	r2, [r3, #28]
        hcryp->Instance->KEYR2 = *(uint32_t *)(hcryp->Init.pKey + 5U);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	68da      	ldr	r2, [r3, #12]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6952      	ldr	r2, [r2, #20]
 8001636:	619a      	str	r2, [r3, #24]
        hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 6U);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	68da      	ldr	r2, [r3, #12]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6992      	ldr	r2, [r2, #24]
 8001642:	615a      	str	r2, [r3, #20]
        hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 7U);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68da      	ldr	r2, [r3, #12]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	69d2      	ldr	r2, [r2, #28]
 800164e:	611a      	str	r2, [r3, #16]
        break;
 8001650:	e019      	b.n	8001686 <CRYP_SetKey+0xb6>
      case CRYP_KEYSIZE_128B:
        hcryp->Instance->KEYR3 = *(uint32_t *)(hcryp->Init.pKey);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	68da      	ldr	r2, [r3, #12]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6812      	ldr	r2, [r2, #0]
 800165c:	61da      	str	r2, [r3, #28]
        hcryp->Instance->KEYR2 = *(uint32_t *)(hcryp->Init.pKey + 1U);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	6852      	ldr	r2, [r2, #4]
 8001668:	619a      	str	r2, [r3, #24]
        hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 2U);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68da      	ldr	r2, [r3, #12]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6892      	ldr	r2, [r2, #8]
 8001674:	615a      	str	r2, [r3, #20]
        hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 3U);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	68da      	ldr	r2, [r3, #12]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	68d2      	ldr	r2, [r2, #12]
 8001680:	611a      	str	r2, [r3, #16]
        break;
 8001682:	e000      	b.n	8001686 <CRYP_SetKey+0xb6>
      default:
        break;
 8001684:	bf00      	nop
    }
  }
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <CRYP_SetIV>:
  *         the configuration information for CRYP module
  * @note   If IV is NULL, the IV registers are not written.
  * @retval None
  */
static void CRYP_SetIV(CRYP_HandleTypeDef *hcryp)
{
 8001692:	b480      	push	{r7}
 8001694:	b083      	sub	sp, #12
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
  if (hcryp->Init.pInitVect != NULL)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	691b      	ldr	r3, [r3, #16]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d017      	beq.n	80016d2 <CRYP_SetIV+0x40>
  {
    /* Set the Initialization Vector*/
    hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	691a      	ldr	r2, [r3, #16]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6812      	ldr	r2, [r2, #0]
 80016ac:	62da      	str	r2, [r3, #44]	; 0x2c
    hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1U);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	691a      	ldr	r2, [r3, #16]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6852      	ldr	r2, [r2, #4]
 80016b8:	629a      	str	r2, [r3, #40]	; 0x28
    hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2U);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	691a      	ldr	r2, [r3, #16]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6892      	ldr	r2, [r2, #8]
 80016c4:	625a      	str	r2, [r3, #36]	; 0x24
    hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3U);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	691a      	ldr	r2, [r3, #16]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	68d2      	ldr	r2, [r2, #12]
 80016d0:	621a      	str	r2, [r3, #32]
  }
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <CRYP_AESGCM_Process>:
  *         the configuration information for CRYP module
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AESGCM_Process(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b08e      	sub	sp, #56	; 0x38
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
 80016e6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t wordsize = ((uint32_t)hcryp->Size / 4U);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80016ee:	089b      	lsrs	r3, r3, #2
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t temp[4];  /* Temporary CrypOutBuff */
  uint32_t index;
  uint32_t lastwordsize;
  uint32_t incount;  /* Temporary CrypInCount Value */
  uint32_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t dokeyivconfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 80016f4:	2301      	movs	r3, #1
 80016f6:	623b      	str	r3, [r7, #32]

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d118      	bne.n	8001732 <CRYP_AESGCM_Process+0x54>
  {
    if (hcryp->KeyIVConfig == 1U)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001704:	2b01      	cmp	r3, #1
 8001706:	d10a      	bne.n	800171e <CRYP_AESGCM_Process+0x40>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      dokeyivconfig = 0U;
 8001708:	2300      	movs	r3, #0
 800170a:	623b      	str	r3, [r7, #32]
      hcryp->SizesSum += hcryp->Size; /* Compute message total payload length */
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	f8b2 204a 	ldrh.w	r2, [r2, #74]	; 0x4a
 8001716:	441a      	add	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	665a      	str	r2, [r3, #100]	; 0x64
 800171c:	e00f      	b.n	800173e <CRYP_AESGCM_Process+0x60>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2201      	movs	r2, #1
 8001722:	661a      	str	r2, [r3, #96]	; 0x60
      hcryp->SizesSum = hcryp->Size; /* Merely store payload length */
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800172a:	461a      	mov	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	665a      	str	r2, [r3, #100]	; 0x64
 8001730:	e005      	b.n	800173e <CRYP_AESGCM_Process+0x60>
    }
  }
  else
  {
    hcryp->SizesSum = hcryp->Size;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8001738:	461a      	mov	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  if (dokeyivconfig == 1U)
 800173e:	6a3b      	ldr	r3, [r7, #32]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d15b      	bne.n	80017fc <CRYP_AESGCM_Process+0x11e>
  {

    /*  Reset CrypHeaderCount */
    hcryp->CrypHeaderCount = 0U;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /****************************** Init phase **********************************/

    CRYP_SET_PHASE(hcryp, CRYP_PHASE_INIT);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800175a:	601a      	str	r2, [r3, #0]
    /* Set the Key */
    if (hcryp->Init.KeyMode != CRYP_KEYMODE_SHARED)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001760:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001764:	d006      	beq.n	8001774 <CRYP_AESGCM_Process+0x96>
    {
      CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	4619      	mov	r1, r3
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f7ff ff2f 	bl	80015d0 <CRYP_SetKey>
 8001772:	e007      	b.n	8001784 <CRYP_AESGCM_Process+0xa6>
    }
    else /*after sharing the key, AES should set KMOD[1:0] to 00.*/
    {
      hcryp->Instance->CR &=  ~CRYP_KEYMODE_SHARED;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8001782:	601a      	str	r2, [r3, #0]
    }
    /* Set the initialization vector and the counter : Initial Counter Block (ICB)*/
    CRYP_SetIV(hcryp);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7ff ff84 	bl	8001692 <CRYP_SetIV>

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f042 0201 	orr.w	r2, r2, #1
 8001798:	601a      	str	r2, [r3, #0]

    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 800179a:	6839      	ldr	r1, [r7, #0]
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f000 fc93 	bl	80020c8 <CRYP_WaitOnCCFlag>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <CRYP_AESGCM_Process+0xce>
    {
      return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e129      	b.n	8001a00 <CRYP_AESGCM_Process+0x322>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f8d3 2308 	ldr.w	r2, [r3, #776]	; 0x308
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f042 0201 	orr.w	r2, r2, #1
 80017bc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

    /************************ Header phase *************************************/

    if (CRYP_GCMCCM_SetHeaderPhase(hcryp,  Timeout) != HAL_OK)
 80017c0:	6839      	ldr	r1, [r7, #0]
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 faca 	bl	8001d5c <CRYP_GCMCCM_SetHeaderPhase>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <CRYP_AESGCM_Process+0xf4>
    {
      return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e116      	b.n	8001a00 <CRYP_AESGCM_Process+0x322>
    }

    /*************************Payload phase ************************************/

    /* Set the phase */
    hcryp->Phase = CRYP_PHASE_PROCESS;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2202      	movs	r2, #2
 80017d6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Select payload phase once the header phase is performed */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_PAYLOAD);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80017ea:	601a      	str	r2, [r3, #0]

    /* Set to 0 the number of non-valid bytes using NPBLB register*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, 0U);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80017fa:	601a      	str	r2, [r3, #0]

  } /* if (dokeyivconfig == 1U) */

  if ((hcryp->Size % 16U) != 0U)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8001802:	f003 030f 	and.w	r3, r3, #15
 8001806:	b29b      	uxth	r3, r3
 8001808:	2b00      	cmp	r3, #0
 800180a:	d003      	beq.n	8001814 <CRYP_AESGCM_Process+0x136>
  {
    /* recalculate  wordsize */
    wordsize = ((wordsize / 4U) * 4U);
 800180c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800180e:	f023 0303 	bic.w	r3, r3, #3
 8001812:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001814:	f7ff f896 	bl	8000944 <HAL_GetTick>
 8001818:	61f8      	str	r0, [r7, #28]

  /* Write input data and get output Data */
  incount = hcryp->CrypInCount;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001820:	b29b      	uxth	r3, r3
 8001822:	62bb      	str	r3, [r7, #40]	; 0x28
  outcount = hcryp->CrypOutCount;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800182a:	b29b      	uxth	r3, r3
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 800182e:	e034      	b.n	800189a <CRYP_AESGCM_Process+0x1bc>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 8001830:	6839      	ldr	r1, [r7, #0]
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff fe1c 	bl	8001470 <CRYP_AES_ProcessData>

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800183e:	d022      	beq.n	8001886 <CRYP_AESGCM_Process+0x1a8>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001840:	f7ff f880 	bl	8000944 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	683a      	ldr	r2, [r7, #0]
 800184c:	429a      	cmp	r2, r3
 800184e:	d302      	bcc.n	8001856 <CRYP_AESGCM_Process+0x178>
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d117      	bne.n	8001886 <CRYP_AESGCM_Process+0x1a8>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f022 0201 	bic.w	r2, r2, #1
 8001864:	601a      	str	r2, [r3, #0]

        /* Change state & error code */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800186a:	f043 0210 	orr.w	r2, r3, #16
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	65da      	str	r2, [r3, #92]	; 0x5c
        hcryp->State = HAL_CRYP_STATE_READY;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2201      	movs	r2, #1
 8001876:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
        __HAL_UNLOCK(hcryp);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e0bc      	b.n	8001a00 <CRYP_AESGCM_Process+0x322>
      }
    }
    incount = hcryp->CrypInCount;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800188c:	b29b      	uxth	r3, r3
 800188e:	62bb      	str	r3, [r7, #40]	; 0x28
    outcount = hcryp->CrypOutCount;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8001896:	b29b      	uxth	r3, r3
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 800189a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800189c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800189e:	429a      	cmp	r2, r3
 80018a0:	d203      	bcs.n	80018aa <CRYP_AESGCM_Process+0x1cc>
 80018a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d3c2      	bcc.n	8001830 <CRYP_AESGCM_Process+0x152>
  }

  if ((hcryp->Size % 16U) != 0U)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80018b0:	f003 030f 	and.w	r3, r3, #15
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f000 80a1 	beq.w	80019fe <CRYP_AESGCM_Process+0x320>
  {
    /* Compute the number of padding bytes in last block of payload */
    npblb = ((((uint32_t)hcryp->Size / 16U) + 1U) * 16U) - ((uint32_t)hcryp->Size);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80018c2:	091b      	lsrs	r3, r3, #4
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	3301      	adds	r3, #1
 80018c8:	011b      	lsls	r3, r3, #4
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	f8b2 204a 	ldrh.w	r2, [r2, #74]	; 0x4a
 80018d0:	1a9b      	subs	r3, r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]

    /*  Set Npblb in case of AES GCM payload encryption to get right tag*/
    if ((hcryp->Instance->CR & AES_CR_MODE) == CRYP_OPERATINGMODE_ENCRYPT)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0318 	and.w	r3, r3, #24
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d10a      	bne.n	80018f8 <CRYP_AESGCM_Process+0x21a>
    {
      /* Set to 0 the number of non-valid bytes using NPBLB register*/
      MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, npblb << 20U);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	051a      	lsls	r2, r3, #20
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	430a      	orrs	r2, r1
 80018f6:	601a      	str	r2, [r3, #0]
    }
    /* Number of valid words (lastwordsize) in last block */
    if ((npblb % 4U) == 0U)
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d105      	bne.n	800190e <CRYP_AESGCM_Process+0x230>
    {
      lastwordsize = (16U - npblb) / 4U;
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	f1c3 0310 	rsb	r3, r3, #16
 8001908:	089b      	lsrs	r3, r3, #2
 800190a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800190c:	e005      	b.n	800191a <CRYP_AESGCM_Process+0x23c>
    }
    else
    {
      lastwordsize = ((16U - npblb) / 4U) + 1U;
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	f1c3 0310 	rsb	r3, r3, #16
 8001914:	089b      	lsrs	r3, r3, #2
 8001916:	3301      	adds	r3, #1
 8001918:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /*  last block optionally pad the data with zeros*/
    for (index = 0U; index < lastwordsize; index ++)
 800191a:	2300      	movs	r3, #0
 800191c:	633b      	str	r3, [r7, #48]	; 0x30
 800191e:	e017      	b.n	8001950 <CRYP_AESGCM_Process+0x272>
    {
      /* Write the last Input block in the IN FIFO */
      hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800192a:	b29b      	uxth	r3, r3
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	441a      	add	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6812      	ldr	r2, [r2, #0]
 8001936:	609a      	str	r2, [r3, #8]
      hcryp->CrypInCount++;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800193e:	b29b      	uxth	r3, r3
 8001940:	3301      	adds	r3, #1
 8001942:	b29a      	uxth	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    for (index = 0U; index < lastwordsize; index ++)
 800194a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800194c:	3301      	adds	r3, #1
 800194e:	633b      	str	r3, [r7, #48]	; 0x30
 8001950:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001954:	429a      	cmp	r2, r3
 8001956:	d3e3      	bcc.n	8001920 <CRYP_AESGCM_Process+0x242>
    }
    while (index < 4U)
 8001958:	e006      	b.n	8001968 <CRYP_AESGCM_Process+0x28a>
    {
      /* pad the data with zeros to have a complete block */
      hcryp->Instance->DINR  = 0U;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2200      	movs	r2, #0
 8001960:	609a      	str	r2, [r3, #8]
      index++;
 8001962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001964:	3301      	adds	r3, #1
 8001966:	633b      	str	r3, [r7, #48]	; 0x30
    while (index < 4U)
 8001968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800196a:	2b03      	cmp	r3, #3
 800196c:	d9f5      	bls.n	800195a <CRYP_AESGCM_Process+0x27c>
    }
    /* Wait for CCF flag to be raised */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 800196e:	6839      	ldr	r1, [r7, #0]
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f000 fba9 	bl	80020c8 <CRYP_WaitOnCCFlag>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d002      	beq.n	8001982 <CRYP_AESGCM_Process+0x2a4>
#if (USE_HAL_CRYP_REGISTER_CALLBACKS == 1U)
      /*Call registered error callback*/
      hcryp->ErrorCallback(hcryp);
#else
      /*Call legacy weak error callback*/
      HAL_CRYP_ErrorCallback(hcryp);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff fafd 	bl	8000f7c <HAL_CRYP_ErrorCallback>
#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */
    }

    /* Clear CCF Flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f8d3 2308 	ldr.w	r2, [r3, #776]	; 0x308
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f042 0201 	orr.w	r2, r2, #1
 8001992:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

    /*Read the output block from the output FIFO */
    for (index = 0U; index < 4U; index++)
 8001996:	2300      	movs	r3, #0
 8001998:	633b      	str	r3, [r7, #48]	; 0x30
 800199a:	e00b      	b.n	80019b4 <CRYP_AESGCM_Process+0x2d6>
    {
      /* Read the output block from the output FIFO and put them in temporary buffer then
         get CrypOutBuff from temporary buffer */
      temp[index] = hcryp->Instance->DOUTR;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	68da      	ldr	r2, [r3, #12]
 80019a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	3338      	adds	r3, #56	; 0x38
 80019a8:	443b      	add	r3, r7
 80019aa:	f843 2c30 	str.w	r2, [r3, #-48]
    for (index = 0U; index < 4U; index++)
 80019ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019b0:	3301      	adds	r3, #1
 80019b2:	633b      	str	r3, [r7, #48]	; 0x30
 80019b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019b6:	2b03      	cmp	r3, #3
 80019b8:	d9f0      	bls.n	800199c <CRYP_AESGCM_Process+0x2be>
    }
    for (index = 0U; index < lastwordsize; index++)
 80019ba:	2300      	movs	r3, #0
 80019bc:	633b      	str	r3, [r7, #48]	; 0x30
 80019be:	e01a      	b.n	80019f6 <CRYP_AESGCM_Process+0x318>
    {
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + (hcryp->CrypOutCount)) = temp[index];
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	441a      	add	r2, r3
 80019d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	3338      	adds	r3, #56	; 0x38
 80019d6:	443b      	add	r3, r7
 80019d8:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80019dc:	6013      	str	r3, [r2, #0]
      hcryp->CrypOutCount++;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	3301      	adds	r3, #1
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    for (index = 0U; index < lastwordsize; index++)
 80019f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019f2:	3301      	adds	r3, #1
 80019f4:	633b      	str	r3, [r7, #48]	; 0x30
 80019f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d3e0      	bcc.n	80019c0 <CRYP_AESGCM_Process+0x2e2>
    }
  }

  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3738      	adds	r7, #56	; 0x38
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <CRYP_AESCCM_Process>:
  *         the configuration information for CRYP module
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AESCCM_Process(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08e      	sub	sp, #56	; 0x38
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t wordsize = ((uint32_t)hcryp->Size / 4U);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8001a18:	089b      	lsrs	r3, r3, #2
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t npblb;
  uint32_t lastwordsize;
  uint32_t temp[4];  /* Temporary CrypOutBuff */
  uint32_t incount;  /* Temporary CrypInCount Value */
  uint32_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t dokeyivconfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 8001a1e:	2301      	movs	r3, #1
 8001a20:	623b      	str	r3, [r7, #32]

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d118      	bne.n	8001a5c <CRYP_AESCCM_Process+0x54>
  {
    if (hcryp->KeyIVConfig == 1U)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d10a      	bne.n	8001a48 <CRYP_AESCCM_Process+0x40>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      dokeyivconfig = 0U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	623b      	str	r3, [r7, #32]
      hcryp->SizesSum += hcryp->Size; /* Compute message total payload length */
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	f8b2 204a 	ldrh.w	r2, [r2, #74]	; 0x4a
 8001a40:	441a      	add	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	665a      	str	r2, [r3, #100]	; 0x64
 8001a46:	e00f      	b.n	8001a68 <CRYP_AESCCM_Process+0x60>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	661a      	str	r2, [r3, #96]	; 0x60
      hcryp->SizesSum = hcryp->Size; /* Merely store payload length */
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8001a54:	461a      	mov	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	665a      	str	r2, [r3, #100]	; 0x64
 8001a5a:	e005      	b.n	8001a68 <CRYP_AESCCM_Process+0x60>
    }
  }
  else
  {
    hcryp->SizesSum = hcryp->Size;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8001a62:	461a      	mov	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	665a      	str	r2, [r3, #100]	; 0x64
  }

  if (dokeyivconfig == 1U)
 8001a68:	6a3b      	ldr	r3, [r7, #32]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d170      	bne.n	8001b50 <CRYP_AESCCM_Process+0x148>
  {
    /*  Reset CrypHeaderCount */
    hcryp->CrypHeaderCount = 0U;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /********************** Init phase ******************************************/

    CRYP_SET_PHASE(hcryp, CRYP_PHASE_INIT);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8001a84:	601a      	str	r2, [r3, #0]
    /* Set the Key */
    if (hcryp->Init.KeyMode != CRYP_KEYMODE_SHARED)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a8e:	d006      	beq.n	8001a9e <CRYP_AESCCM_Process+0x96>
    {
      CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	4619      	mov	r1, r3
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff fd9a 	bl	80015d0 <CRYP_SetKey>
 8001a9c:	e007      	b.n	8001aae <CRYP_AESCCM_Process+0xa6>
    }
    else /*after sharing the key, AES should set KMOD[1:0] to 00.*/
    {
      hcryp->Instance->CR &=  ~CRYP_KEYMODE_SHARED;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8001aac:	601a      	str	r2, [r3, #0]
    }
    /* Set the initialization vector (IV) with B0 */
    hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.B0);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a1a      	ldr	r2, [r3, #32]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6812      	ldr	r2, [r2, #0]
 8001ab8:	62da      	str	r2, [r3, #44]	; 0x2c
    hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.B0 + 1U);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a1a      	ldr	r2, [r3, #32]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6852      	ldr	r2, [r2, #4]
 8001ac4:	629a      	str	r2, [r3, #40]	; 0x28
    hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.B0 + 2U);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a1a      	ldr	r2, [r3, #32]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6892      	ldr	r2, [r2, #8]
 8001ad0:	625a      	str	r2, [r3, #36]	; 0x24
    hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.B0 + 3U);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a1a      	ldr	r2, [r3, #32]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	68d2      	ldr	r2, [r2, #12]
 8001adc:	621a      	str	r2, [r3, #32]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f042 0201 	orr.w	r2, r2, #1
 8001aec:	601a      	str	r2, [r3, #0]

    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8001aee:	6839      	ldr	r1, [r7, #0]
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f000 fae9 	bl	80020c8 <CRYP_WaitOnCCFlag>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <CRYP_AESCCM_Process+0xf8>
    {
      return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e128      	b.n	8001d52 <CRYP_AESCCM_Process+0x34a>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f8d3 2308 	ldr.w	r2, [r3, #776]	; 0x308
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f042 0201 	orr.w	r2, r2, #1
 8001b10:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

    /************************ Header phase *************************************/
    /* Header block(B1) : associated data length expressed in bytes concatenated
    with Associated Data (A)*/
    if (CRYP_GCMCCM_SetHeaderPhase(hcryp,  Timeout) != HAL_OK)
 8001b14:	6839      	ldr	r1, [r7, #0]
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 f920 	bl	8001d5c <CRYP_GCMCCM_SetHeaderPhase>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <CRYP_AESCCM_Process+0x11e>
    {
      return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e115      	b.n	8001d52 <CRYP_AESCCM_Process+0x34a>
    }

    /*************************Payload phase ************************************/

    /* Set the phase */
    hcryp->Phase = CRYP_PHASE_PROCESS;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2202      	movs	r2, #2
 8001b2a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Select payload phase once the header phase is performed */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, CRYP_PHASE_PAYLOAD);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b3e:	601a      	str	r2, [r3, #0]

    /* Set to 0 the number of non-valid bytes using NPBLB register*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, 0U);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001b4e:	601a      	str	r2, [r3, #0]

  } /* if (dokeyivconfig == 1U) */

  if ((hcryp->Size % 16U) != 0U)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8001b56:	f003 030f 	and.w	r3, r3, #15
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <CRYP_AESCCM_Process+0x160>
  {
    /* recalculate  wordsize */
    wordsize = ((wordsize / 4U) * 4U);
 8001b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b62:	f023 0303 	bic.w	r3, r3, #3
 8001b66:	637b      	str	r3, [r7, #52]	; 0x34
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8001b68:	f7fe feec 	bl	8000944 <HAL_GetTick>
 8001b6c:	61f8      	str	r0, [r7, #28]

  /* Write input data and get output data */
  incount = hcryp->CrypInCount;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	62bb      	str	r3, [r7, #40]	; 0x28
  outcount = hcryp->CrypOutCount;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 8001b82:	e034      	b.n	8001bee <CRYP_AESCCM_Process+0x1e6>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 8001b84:	6839      	ldr	r1, [r7, #0]
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7ff fc72 	bl	8001470 <CRYP_AES_ProcessData>

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b92:	d022      	beq.n	8001bda <CRYP_AESCCM_Process+0x1d2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001b94:	f7fe fed6 	bl	8000944 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d302      	bcc.n	8001baa <CRYP_AESCCM_Process+0x1a2>
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d117      	bne.n	8001bda <CRYP_AESCCM_Process+0x1d2>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 0201 	bic.w	r2, r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]

        /* Change state */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bbe:	f043 0210 	orr.w	r2, r3, #16
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	65da      	str	r2, [r3, #92]	; 0x5c
        hcryp->State = HAL_CRYP_STATE_READY;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
        __HAL_UNLOCK(hcryp);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e0bb      	b.n	8001d52 <CRYP_AESCCM_Process+0x34a>
      }
    }
    incount = hcryp->CrypInCount;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	62bb      	str	r3, [r7, #40]	; 0x28
    outcount = hcryp->CrypOutCount;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 8001bee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d203      	bcs.n	8001bfe <CRYP_AESCCM_Process+0x1f6>
 8001bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d3c2      	bcc.n	8001b84 <CRYP_AESCCM_Process+0x17c>
  }

  if ((hcryp->Size % 16U) != 0U)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8001c04:	f003 030f 	and.w	r3, r3, #15
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f000 80a0 	beq.w	8001d50 <CRYP_AESCCM_Process+0x348>
  {
    /* Compute the number of padding bytes in last block of payload */
    npblb = ((((uint32_t)hcryp->Size / 16U) + 1U) * 16U) - ((uint32_t)hcryp->Size);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8001c16:	091b      	lsrs	r3, r3, #4
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	011b      	lsls	r3, r3, #4
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	f8b2 204a 	ldrh.w	r2, [r2, #74]	; 0x4a
 8001c24:	1a9b      	subs	r3, r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]

    if ((hcryp->Instance->CR & AES_CR_MODE) == CRYP_OPERATINGMODE_DECRYPT)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0318 	and.w	r3, r3, #24
 8001c32:	2b10      	cmp	r3, #16
 8001c34:	d10a      	bne.n	8001c4c <CRYP_AESCCM_Process+0x244>
    {
      /* Set Npblb in case of AES CCM payload decryption to get right tag  */
      MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, npblb << 20);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	051a      	lsls	r2, r3, #20
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	601a      	str	r2, [r3, #0]

    }
    /* Number of valid words (lastwordsize) in last block */
    if ((npblb % 4U) == 0U)
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	f003 0303 	and.w	r3, r3, #3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d105      	bne.n	8001c62 <CRYP_AESCCM_Process+0x25a>
    {
      lastwordsize = (16U - npblb) / 4U;
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	f1c3 0310 	rsb	r3, r3, #16
 8001c5c:	089b      	lsrs	r3, r3, #2
 8001c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c60:	e005      	b.n	8001c6e <CRYP_AESCCM_Process+0x266>
    }
    else
    {
      lastwordsize = ((16U - npblb) / 4U) + 1U;
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	f1c3 0310 	rsb	r3, r3, #16
 8001c68:	089b      	lsrs	r3, r3, #2
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Write the last input block in the IN FIFO */
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter ++)
 8001c6e:	2300      	movs	r3, #0
 8001c70:	633b      	str	r3, [r7, #48]	; 0x30
 8001c72:	e017      	b.n	8001ca4 <CRYP_AESCCM_Process+0x29c>
    {
      hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	441a      	add	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6812      	ldr	r2, [r2, #0]
 8001c8a:	609a      	str	r2, [r3, #8]
      hcryp->CrypInCount++;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	3301      	adds	r3, #1
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter ++)
 8001c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	633b      	str	r3, [r7, #48]	; 0x30
 8001ca4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d3e3      	bcc.n	8001c74 <CRYP_AESCCM_Process+0x26c>
    }

    /* Pad the data with zeros to have a complete block */
    while (loopcounter < 4U)
 8001cac:	e006      	b.n	8001cbc <CRYP_AESCCM_Process+0x2b4>
    {
      hcryp->Instance->DINR  = 0U;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	609a      	str	r2, [r3, #8]
      loopcounter++;
 8001cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cb8:	3301      	adds	r3, #1
 8001cba:	633b      	str	r3, [r7, #48]	; 0x30
    while (loopcounter < 4U)
 8001cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cbe:	2b03      	cmp	r3, #3
 8001cc0:	d9f5      	bls.n	8001cae <CRYP_AESCCM_Process+0x2a6>
    }
    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8001cc2:	6839      	ldr	r1, [r7, #0]
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 f9ff 	bl	80020c8 <CRYP_WaitOnCCFlag>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <CRYP_AESCCM_Process+0x2cc>
    {
      return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e03e      	b.n	8001d52 <CRYP_AESCCM_Process+0x34a>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f8d3 2308 	ldr.w	r2, [r3, #776]	; 0x308
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f042 0201 	orr.w	r2, r2, #1
 8001ce4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

    for (loopcounter = 0U; loopcounter < 4U; loopcounter++)
 8001ce8:	2300      	movs	r3, #0
 8001cea:	633b      	str	r3, [r7, #48]	; 0x30
 8001cec:	e00b      	b.n	8001d06 <CRYP_AESCCM_Process+0x2fe>
    {
      /* Read the output block from the output FIFO and put them in temporary buffer then
         get CrypOutBuff from temporary buffer */
      temp[loopcounter] = hcryp->Instance->DOUTR;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	68da      	ldr	r2, [r3, #12]
 8001cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	3338      	adds	r3, #56	; 0x38
 8001cfa:	443b      	add	r3, r7
 8001cfc:	f843 2c30 	str.w	r2, [r3, #-48]
    for (loopcounter = 0U; loopcounter < 4U; loopcounter++)
 8001d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d02:	3301      	adds	r3, #1
 8001d04:	633b      	str	r3, [r7, #48]	; 0x30
 8001d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d08:	2b03      	cmp	r3, #3
 8001d0a:	d9f0      	bls.n	8001cee <CRYP_AESCCM_Process+0x2e6>
    }
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter++)
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	633b      	str	r3, [r7, #48]	; 0x30
 8001d10:	e01a      	b.n	8001d48 <CRYP_AESCCM_Process+0x340>
    {
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp[loopcounter];
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	441a      	add	r2, r3
 8001d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	3338      	adds	r3, #56	; 0x38
 8001d28:	443b      	add	r3, r7
 8001d2a:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001d2e:	6013      	str	r3, [r2, #0]
      hcryp->CrypOutCount++;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	3301      	adds	r3, #1
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter++)
 8001d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d44:	3301      	adds	r3, #1
 8001d46:	633b      	str	r3, [r7, #48]	; 0x30
 8001d48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d3e0      	bcc.n	8001d12 <CRYP_AESCCM_Process+0x30a>
    }
  }

  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3738      	adds	r7, #56	; 0x38
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
	...

08001d5c <CRYP_GCMCCM_SetHeaderPhase>:
  *         the configuration information for CRYP module(Header & HeaderSize)
  * @param  Timeout Timeout value
  * @retval state
  */
static HAL_StatusTypeDef CRYP_GCMCCM_SetHeaderPhase(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8001d5c:	b5b0      	push	{r4, r5, r7, lr}
 8001d5e:	b092      	sub	sp, #72	; 0x48
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  uint32_t loopcounter;
  uint32_t size_in_bytes;
  uint32_t tmp;
  const uint32_t mask[12] = {0x0U, 0xFF000000U, 0xFFFF0000U, 0xFFFFFF00U,  /* 32-bit data type */
 8001d66:	4b8e      	ldr	r3, [pc, #568]	; (8001fa0 <CRYP_GCMCCM_SetHeaderPhase+0x244>)
 8001d68:	f107 040c 	add.w	r4, r7, #12
 8001d6c:	461d      	mov	r5, r3
 8001d6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d76:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001d7a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                             0x0U, 0x0000FF00U, 0x0000FFFFU, 0xFF00FFFFU,  /* 16-bit data type */
                             0x0U, 0x000000FFU, 0x0000FFFFU, 0x00FFFFFFU
                            }; /*  8-bit data type */

  /***************************** Header phase for GCM/GMAC or CCM *********************************/
  if (hcryp->Init.HeaderWidthUnit == CRYP_HEADERWIDTHUNIT_WORD)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d104      	bne.n	8001d90 <CRYP_GCMCCM_SetHeaderPhase+0x34>
  {
    size_in_bytes = hcryp->Init.HeaderSize * 4U;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	643b      	str	r3, [r7, #64]	; 0x40
 8001d8e:	e002      	b.n	8001d96 <CRYP_GCMCCM_SetHeaderPhase+0x3a>
  }
  else
  {
    size_in_bytes = hcryp->Init.HeaderSize;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	69db      	ldr	r3, [r3, #28]
 8001d94:	643b      	str	r3, [r7, #64]	; 0x40
  }

  if ((size_in_bytes != 0U))
 8001d96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 8172 	beq.w	8002082 <CRYP_GCMCCM_SetHeaderPhase+0x326>
  {
    /* Select header phase */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_HEADER);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001db0:	601a      	str	r2, [r3, #0]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f042 0201 	orr.w	r2, r2, #1
 8001dc0:	601a      	str	r2, [r3, #0]

    /* If size_in_bytes is a multiple of blocks (a multiple of four 32-bits words ) */
    if ((size_in_bytes % 16U) == 0U)
 8001dc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dc4:	f003 030f 	and.w	r3, r3, #15
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d172      	bne.n	8001eb2 <CRYP_GCMCCM_SetHeaderPhase+0x156>
    {
      /*  No padding */
      for (loopcounter = 0U; (loopcounter < (size_in_bytes / 4U)); loopcounter += 4U)
 8001dcc:	2300      	movs	r3, #0
 8001dce:	647b      	str	r3, [r7, #68]	; 0x44
 8001dd0:	e069      	b.n	8001ea6 <CRYP_GCMCCM_SetHeaderPhase+0x14a>
      {
        /* Write the input block in the data input register */
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	699a      	ldr	r2, [r3, #24]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	441a      	add	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6812      	ldr	r2, [r2, #0]
 8001de8:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	3301      	adds	r3, #1
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	699a      	ldr	r2, [r3, #24]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	441a      	add	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6812      	ldr	r2, [r2, #0]
 8001e12:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        hcryp->Instance->DINR  = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	699a      	ldr	r2, [r3, #24]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	441a      	add	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6812      	ldr	r2, [r2, #0]
 8001e3c:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	3301      	adds	r3, #1
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	699a      	ldr	r2, [r3, #24]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	441a      	add	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6812      	ldr	r2, [r2, #0]
 8001e66:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	3301      	adds	r3, #1
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8001e7a:	6839      	ldr	r1, [r7, #0]
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f000 f923 	bl	80020c8 <CRYP_WaitOnCCFlag>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <CRYP_GCMCCM_SetHeaderPhase+0x130>
        {
          return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e118      	b.n	80020be <CRYP_GCMCCM_SetHeaderPhase+0x362>
        }
        /* Clear CCF flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f8d3 2308 	ldr.w	r2, [r3, #776]	; 0x308
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f042 0201 	orr.w	r2, r2, #1
 8001e9c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
      for (loopcounter = 0U; (loopcounter < (size_in_bytes / 4U)); loopcounter += 4U)
 8001ea0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ea2:	3304      	adds	r3, #4
 8001ea4:	647b      	str	r3, [r7, #68]	; 0x44
 8001ea6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ea8:	089b      	lsrs	r3, r3, #2
 8001eaa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d390      	bcc.n	8001dd2 <CRYP_GCMCCM_SetHeaderPhase+0x76>
 8001eb0:	e104      	b.n	80020bc <CRYP_GCMCCM_SetHeaderPhase+0x360>
      }
    }
    else
    {
      /* Write header block in the IN FIFO without last block */
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 16U) * 4U)); loopcounter += 4U)
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	647b      	str	r3, [r7, #68]	; 0x44
 8001eb6:	e069      	b.n	8001f8c <CRYP_GCMCCM_SetHeaderPhase+0x230>
      {
        /* Write the input block in the data input register */
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	699a      	ldr	r2, [r3, #24]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	441a      	add	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6812      	ldr	r2, [r2, #0]
 8001ece:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	3301      	adds	r3, #1
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	699a      	ldr	r2, [r3, #24]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	441a      	add	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6812      	ldr	r2, [r2, #0]
 8001ef8:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	3301      	adds	r3, #1
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        hcryp->Instance->DINR  = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	699a      	ldr	r2, [r3, #24]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	441a      	add	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6812      	ldr	r2, [r2, #0]
 8001f22:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	699a      	ldr	r2, [r3, #24]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	441a      	add	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6812      	ldr	r2, [r2, #0]
 8001f4c:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	3301      	adds	r3, #1
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8001f60:	6839      	ldr	r1, [r7, #0]
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f8b0 	bl	80020c8 <CRYP_WaitOnCCFlag>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <CRYP_GCMCCM_SetHeaderPhase+0x216>
        {
          return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e0a5      	b.n	80020be <CRYP_GCMCCM_SetHeaderPhase+0x362>
        }
        /* Clear CCF flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f8d3 2308 	ldr.w	r2, [r3, #776]	; 0x308
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 0201 	orr.w	r2, r2, #1
 8001f82:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 16U) * 4U)); loopcounter += 4U)
 8001f86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f88:	3304      	adds	r3, #4
 8001f8a:	647b      	str	r3, [r7, #68]	; 0x44
 8001f8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f8e:	091b      	lsrs	r3, r3, #4
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d38f      	bcc.n	8001eb8 <CRYP_GCMCCM_SetHeaderPhase+0x15c>
      }
      /* Write last complete words */
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 4U) % 4U)); loopcounter++)
 8001f98:	2300      	movs	r3, #0
 8001f9a:	647b      	str	r3, [r7, #68]	; 0x44
 8001f9c:	e01a      	b.n	8001fd4 <CRYP_GCMCCM_SetHeaderPhase+0x278>
 8001f9e:	bf00      	nop
 8001fa0:	080050d4 	.word	0x080050d4
      {
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	699a      	ldr	r2, [r3, #24]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	441a      	add	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6812      	ldr	r2, [r2, #0]
 8001fba:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 4U) % 4U)); loopcounter++)
 8001fce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	647b      	str	r3, [r7, #68]	; 0x44
 8001fd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fd6:	089b      	lsrs	r3, r3, #2
 8001fd8:	f003 0303 	and.w	r3, r3, #3
 8001fdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d3e0      	bcc.n	8001fa4 <CRYP_GCMCCM_SetHeaderPhase+0x248>
      }
      /* If the header size is a multiple of words */
      if ((size_in_bytes % 4U) == 0U)
 8001fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fe4:	f003 0303 	and.w	r3, r3, #3
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10b      	bne.n	8002004 <CRYP_GCMCCM_SetHeaderPhase+0x2a8>
      {
        /* Pad the data with zeros to have a complete block */
        while (loopcounter < 4U)
 8001fec:	e006      	b.n	8001ffc <CRYP_GCMCCM_SetHeaderPhase+0x2a0>
        {
          hcryp->Instance->DINR = 0x0U;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	609a      	str	r2, [r3, #8]
          loopcounter++;
 8001ff6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	647b      	str	r3, [r7, #68]	; 0x44
        while (loopcounter < 4U)
 8001ffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ffe:	2b03      	cmp	r3, #3
 8002000:	d9f5      	bls.n	8001fee <CRYP_GCMCCM_SetHeaderPhase+0x292>
 8002002:	e02a      	b.n	800205a <CRYP_GCMCCM_SetHeaderPhase+0x2fe>
        }
      }
      else
      {
        /* Enter last bytes, padded with zeros */
        tmp =  *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	699a      	ldr	r2, [r3, #24]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800200e:	b29b      	uxth	r3, r3
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4413      	add	r3, r2
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	63fb      	str	r3, [r7, #60]	; 0x3c
        tmp &= mask[(hcryp->Init.DataType * 2U) + (size_in_bytes % 4U)];
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	005a      	lsls	r2, r3, #1
 800201e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002020:	f003 0303 	and.w	r3, r3, #3
 8002024:	4413      	add	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	3348      	adds	r3, #72	; 0x48
 800202a:	443b      	add	r3, r7
 800202c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002030:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002032:	4013      	ands	r3, r2
 8002034:	63fb      	str	r3, [r7, #60]	; 0x3c
        hcryp->Instance->DINR = tmp;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800203c:	609a      	str	r2, [r3, #8]
        loopcounter++;
 800203e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002040:	3301      	adds	r3, #1
 8002042:	647b      	str	r3, [r7, #68]	; 0x44
        /* Pad the data with zeros to have a complete block */
        while (loopcounter < 4U)
 8002044:	e006      	b.n	8002054 <CRYP_GCMCCM_SetHeaderPhase+0x2f8>
        {
          hcryp->Instance->DINR = 0x0U;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2200      	movs	r2, #0
 800204c:	609a      	str	r2, [r3, #8]
          loopcounter++;
 800204e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002050:	3301      	adds	r3, #1
 8002052:	647b      	str	r3, [r7, #68]	; 0x44
        while (loopcounter < 4U)
 8002054:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002056:	2b03      	cmp	r3, #3
 8002058:	d9f5      	bls.n	8002046 <CRYP_GCMCCM_SetHeaderPhase+0x2ea>
        }
      }

      if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 800205a:	6839      	ldr	r1, [r7, #0]
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 f833 	bl	80020c8 <CRYP_WaitOnCCFlag>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <CRYP_GCMCCM_SetHeaderPhase+0x310>
      {
        return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e028      	b.n	80020be <CRYP_GCMCCM_SetHeaderPhase+0x362>
      }
      /* Clear CCF flag */
      __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f8d3 2308 	ldr.w	r2, [r3, #776]	; 0x308
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f042 0201 	orr.w	r2, r2, #1
 800207c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
 8002080:	e01c      	b.n	80020bc <CRYP_GCMCCM_SetHeaderPhase+0x360>
    }
  }
  else
  {
    /*Workaround 1: only AES, before re-enabling the peripheral, datatype can be configured.*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE, hcryp->Init.DataType);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f023 0106 	bic.w	r1, r3, #6
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	430a      	orrs	r2, r1
 8002096:	601a      	str	r2, [r3, #0]

    /* Select header phase */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_HEADER);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020aa:	601a      	str	r2, [r3, #0]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f042 0201 	orr.w	r2, r2, #1
 80020ba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3748      	adds	r7, #72	; 0x48
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bdb0      	pop	{r4, r5, r7, pc}
 80020c6:	bf00      	nop

080020c8 <CRYP_WaitOnCCFlag>:
  * @param  Timeout Timeout duration.
  * @note   This function can only be used in thread mode.
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_WaitOnCCFlag(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 80020d2:	f7fe fc37 	bl	8000944 <HAL_GetTick>
 80020d6:	60f8      	str	r0, [r7, #12]

  while (HAL_IS_BIT_CLR(hcryp->Instance->ISR, AES_ISR_CCF))
 80020d8:	e026      	b.n	8002128 <CRYP_WaitOnCCFlag+0x60>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020e0:	d022      	beq.n	8002128 <CRYP_WaitOnCCFlag+0x60>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80020e2:	f7fe fc2f 	bl	8000944 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d302      	bcc.n	80020f8 <CRYP_WaitOnCCFlag+0x30>
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d117      	bne.n	8002128 <CRYP_WaitOnCCFlag+0x60>
      {
        __HAL_CRYP_DISABLE(hcryp);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 0201 	bic.w	r2, r2, #1
 8002106:	601a      	str	r2, [r3, #0]
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210c:	f043 0210 	orr.w	r2, r3, #16
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	65da      	str	r2, [r3, #92]	; 0x5c
        hcryp->State = HAL_CRYP_STATE_READY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
        __HAL_UNLOCK(hcryp);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e008      	b.n	800213a <CRYP_WaitOnCCFlag+0x72>
  while (HAL_IS_BIT_CLR(hcryp->Instance->ISR, AES_ISR_CCF))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0d0      	beq.n	80020da <CRYP_WaitOnCCFlag+0x12>
      }
    }
  }
  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <HAL_CRYPEx_WrapKey>:
  * @param  pOutput Pointer to the Key buffer encrypted in case of ECB or CBC
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYPEx_WrapKey(CRYP_HandleTypeDef *hcryp, uint32_t *pInput, uint32_t *pOutput, uint32_t Timeout)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b086      	sub	sp, #24
 8002146:	af00      	add	r7, sp, #0
 8002148:	60f8      	str	r0, [r7, #12]
 800214a:	60b9      	str	r1, [r7, #8]
 800214c:	607a      	str	r2, [r7, #4]
 800214e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;

  if (hcryp->State == HAL_CRYP_STATE_READY)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002156:	b2db      	uxtb	r3, r3
 8002158:	2b01      	cmp	r3, #1
 800215a:	d13d      	bne.n	80021d8 <HAL_CRYPEx_WrapKey+0x96>
  {
    /* Change state Busy */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2202      	movs	r2, #2
 8002160:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
    __HAL_LOCK(hcryp);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800216a:	2b01      	cmp	r3, #1
 800216c:	d101      	bne.n	8002172 <HAL_CRYPEx_WrapKey+0x30>
 800216e:	2302      	movs	r3, #2
 8002170:	e03b      	b.n	80021ea <HAL_CRYPEx_WrapKey+0xa8>
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2201      	movs	r2, #1
 8002176:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Reset CrypInCount, CrypOutCount and Initialize pCrypInBuffPtr and pCrypOutBuffPtr parameters*/
    hcryp->CrypInCount = 0U;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2200      	movs	r2, #0
 800217e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hcryp->CrypOutCount = 0U;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    hcryp->pCrypInBuffPtr = pInput;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	68ba      	ldr	r2, [r7, #8]
 800218e:	63da      	str	r2, [r3, #60]	; 0x3c
    hcryp->pCrypOutBuffPtr = pOutput;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	641a      	str	r2, [r3, #64]	; 0x40

    /* Disable the CRYP peripheral clock */
    __HAL_CRYP_DISABLE(hcryp);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f022 0201 	bic.w	r2, r2, #1
 80021a4:	601a      	str	r2, [r3, #0]

    /* Set the operating mode*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_KMOD, CRYP_KEYMODE_WRAPPED);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80021b8:	601a      	str	r2, [r3, #0]

    /* Encryption operating mode(Mode 0)*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_ENCRYPT);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 0218 	bic.w	r2, r2, #24
 80021c8:	601a      	str	r2, [r3, #0]

    status = CRYPEx_KeyEncrypt(hcryp, Timeout);
 80021ca:	6839      	ldr	r1, [r7, #0]
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f000 f963 	bl	8002498 <CRYPEx_KeyEncrypt>
 80021d2:	4603      	mov	r3, r0
 80021d4:	75fb      	strb	r3, [r7, #23]
 80021d6:	e007      	b.n	80021e8 <HAL_CRYPEx_WrapKey+0xa6>
  }
  else
  {
    /* Busy error code field */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021dc:	f043 0208 	orr.w	r2, r3, #8
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	65da      	str	r2, [r3, #92]	; 0x5c
    status = HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 80021e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_CRYPEx_UnwrapKey>:
  * @param  pInput Pointer to the Key buffer to decrypt.
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYPEx_UnwrapKey(CRYP_HandleTypeDef *hcryp, uint32_t *pInput, uint32_t Timeout)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b086      	sub	sp, #24
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	60f8      	str	r0, [r7, #12]
 80021fa:	60b9      	str	r1, [r7, #8]
 80021fc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;

  if (hcryp->State == HAL_CRYP_STATE_READY)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b01      	cmp	r3, #1
 8002208:	d132      	bne.n	8002270 <HAL_CRYPEx_UnwrapKey+0x7e>
  {
    /* Change state Busy */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2202      	movs	r2, #2
 800220e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

    __HAL_LOCK(hcryp);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002218:	2b01      	cmp	r3, #1
 800221a:	d101      	bne.n	8002220 <HAL_CRYPEx_UnwrapKey+0x2e>
 800221c:	2302      	movs	r3, #2
 800221e:	e030      	b.n	8002282 <HAL_CRYPEx_UnwrapKey+0x90>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Reset CrypInCount, CrypOutCount and Initialize pCrypInBuffPtr and pCrypOutBuffPtr parameters */
    hcryp->CrypInCount = 0U;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hcryp->CrypOutCount = 0U;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    hcryp->pCrypInBuffPtr = pInput;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	68ba      	ldr	r2, [r7, #8]
 800223c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the CRYP peripheral clock */
    __HAL_CRYP_DISABLE(hcryp);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 0201 	bic.w	r2, r2, #1
 800224c:	601a      	str	r2, [r3, #0]

    /* Set the operating mode*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_KMOD, CRYP_KEYMODE_WRAPPED);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002260:	601a      	str	r2, [r3, #0]

    status = CRYPEx_KeyDecrypt(hcryp, Timeout);
 8002262:	6879      	ldr	r1, [r7, #4]
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	f000 f810 	bl	800228a <CRYPEx_KeyDecrypt>
 800226a:	4603      	mov	r3, r0
 800226c:	75fb      	strb	r3, [r7, #23]
 800226e:	e007      	b.n	8002280 <HAL_CRYPEx_UnwrapKey+0x8e>
  }
  else
  {
    /* Busy error code field */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002274:	f043 0208 	orr.w	r2, r3, #8
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	65da      	str	r2, [r3, #92]	; 0x5c
    status = HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8002280:	7dfb      	ldrb	r3, [r7, #23]
}
 8002282:	4618      	mov	r0, r3
 8002284:	3718      	adds	r7, #24
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <CRYPEx_KeyDecrypt>:
  * @param  Timeout specify Timeout value
  * @note   It is strongly recommended to select hardware secret keys
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYPEx_KeyDecrypt(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b086      	sub	sp, #24
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
 8002292:	6039      	str	r1, [r7, #0]
  uint32_t incount; /* Temporary CrypInCount Value */
  uint32_t i;
  uint32_t tickstart;

  /* key preparation for decryption, operating mode 2*/
  MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f023 0218 	bic.w	r2, r3, #24
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f042 0208 	orr.w	r2, r2, #8
 80022a6:	601a      	str	r2, [r3, #0]

  /* Enable CRYP */
  __HAL_CRYP_ENABLE(hcryp);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f042 0201 	orr.w	r2, r2, #1
 80022b6:	601a      	str	r2, [r3, #0]

  /* Wait for CCF flag to be raised */
  tickstart = HAL_GetTick();
 80022b8:	f7fe fb44 	bl	8000944 <HAL_GetTick>
 80022bc:	60f8      	str	r0, [r7, #12]
  while (HAL_IS_BIT_CLR(hcryp->Instance->ISR, AES_ISR_CCF))
 80022be:	e026      	b.n	800230e <CRYPEx_KeyDecrypt+0x84>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022c6:	d022      	beq.n	800230e <CRYPEx_KeyDecrypt+0x84>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022c8:	f7fe fb3c 	bl	8000944 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d302      	bcc.n	80022de <CRYPEx_KeyDecrypt+0x54>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d117      	bne.n	800230e <CRYPEx_KeyDecrypt+0x84>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 0201 	bic.w	r2, r2, #1
 80022ec:	601a      	str	r2, [r3, #0]

        /* Change state */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f2:	f043 0210 	orr.w	r2, r3, #16
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	65da      	str	r2, [r3, #92]	; 0x5c
        hcryp->State = HAL_CRYP_STATE_READY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
        __HAL_UNLOCK(hcryp);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e0c0      	b.n	8002490 <CRYPEx_KeyDecrypt+0x206>
  while (HAL_IS_BIT_CLR(hcryp->Instance->ISR, AES_ISR_CCF))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b00      	cmp	r3, #0
 800231c:	d0d0      	beq.n	80022c0 <CRYPEx_KeyDecrypt+0x36>
      }
    }
  }
  /* Clear CCF Flag */
  __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f8d3 2308 	ldr.w	r2, [r3, #776]	; 0x308
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f042 0201 	orr.w	r2, r2, #1
 800232e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

  /*  End of Key preparation for ECB/CBC */
  /* Return to decryption operating mode(Mode 3)*/
  MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f023 0218 	bic.w	r2, r3, #24
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f042 0210 	orr.w	r2, r2, #16
 8002344:	601a      	str	r2, [r3, #0]

  if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d017      	beq.n	800237e <CRYPEx_KeyDecrypt+0xf4>
  {
    /* Set the Initialization Vector */
    hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	691a      	ldr	r2, [r3, #16]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6812      	ldr	r2, [r2, #0]
 8002358:	62da      	str	r2, [r3, #44]	; 0x2c
    hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1U);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691a      	ldr	r2, [r3, #16]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6852      	ldr	r2, [r2, #4]
 8002364:	629a      	str	r2, [r3, #40]	; 0x28
    hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2U);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	691a      	ldr	r2, [r3, #16]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6892      	ldr	r2, [r2, #8]
 8002370:	625a      	str	r2, [r3, #36]	; 0x24
    hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3U);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	691a      	ldr	r2, [r3, #16]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68d2      	ldr	r2, [r2, #12]
 800237c:	621a      	str	r2, [r3, #32]
  }
  /* Enable CRYP */
  __HAL_CRYP_ENABLE(hcryp);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f042 0201 	orr.w	r2, r2, #1
 800238c:	601a      	str	r2, [r3, #0]

  /* Set the phase */
  hcryp->Phase = CRYPEx_PHASE_PROCESS;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2202      	movs	r2, #2
 8002392:	64da      	str	r2, [r3, #76]	; 0x4c

  if (hcryp->Init.KeySize == CRYP_KEYSIZE_128B)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d102      	bne.n	80023a2 <CRYPEx_KeyDecrypt+0x118>
  {
    incount = 4U;
 800239c:	2304      	movs	r3, #4
 800239e:	617b      	str	r3, [r7, #20]
 80023a0:	e05d      	b.n	800245e <CRYPEx_KeyDecrypt+0x1d4>
  }
  else
  {
    incount = 8U;
 80023a2:	2308      	movs	r3, #8
 80023a4:	617b      	str	r3, [r7, #20]
  }
  while (hcryp->CrypInCount < incount)
 80023a6:	e05a      	b.n	800245e <CRYPEx_KeyDecrypt+0x1d4>
  {
    /* Write four times to input the key to encrypt */
    for (i = 0U; i < 4U; i++)
 80023a8:	2300      	movs	r3, #0
 80023aa:	613b      	str	r3, [r7, #16]
 80023ac:	e017      	b.n	80023de <CRYPEx_KeyDecrypt+0x154>
    {
      hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	441a      	add	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6812      	ldr	r2, [r2, #0]
 80023c4:	609a      	str	r2, [r3, #8]
      hcryp->CrypInCount++;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	3301      	adds	r3, #1
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    for (i = 0U; i < 4U; i++)
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	3301      	adds	r3, #1
 80023dc:	613b      	str	r3, [r7, #16]
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	2b03      	cmp	r3, #3
 80023e2:	d9e4      	bls.n	80023ae <CRYPEx_KeyDecrypt+0x124>
    }
    /* Wait for CCF flag to be raised */
    tickstart = HAL_GetTick();
 80023e4:	f7fe faae 	bl	8000944 <HAL_GetTick>
 80023e8:	60f8      	str	r0, [r7, #12]
    while (HAL_IS_BIT_CLR(hcryp->Instance->ISR, AES_ISR_CCF))
 80023ea:	e026      	b.n	800243a <CRYPEx_KeyDecrypt+0x1b0>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023f2:	d022      	beq.n	800243a <CRYPEx_KeyDecrypt+0x1b0>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80023f4:	f7fe faa6 	bl	8000944 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	429a      	cmp	r2, r3
 8002402:	d302      	bcc.n	800240a <CRYPEx_KeyDecrypt+0x180>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d117      	bne.n	800243a <CRYPEx_KeyDecrypt+0x1b0>
        {
          /* Disable the CRYP peripheral clock */
          __HAL_CRYP_DISABLE(hcryp);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f022 0201 	bic.w	r2, r2, #1
 8002418:	601a      	str	r2, [r3, #0]

          /* Change state */
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800241e:	f043 0210 	orr.w	r2, r3, #16
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	65da      	str	r2, [r3, #92]	; 0x5c
          hcryp->State = HAL_CRYP_STATE_READY;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
          __HAL_UNLOCK(hcryp);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
          return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e02a      	b.n	8002490 <CRYPEx_KeyDecrypt+0x206>
    while (HAL_IS_BIT_CLR(hcryp->Instance->ISR, AES_ISR_CCF))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	d0d0      	beq.n	80023ec <CRYPEx_KeyDecrypt+0x162>
        }
      }
    }

    /* Clear CCF Flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f8d3 2308 	ldr.w	r2, [r3, #776]	; 0x308
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f042 0201 	orr.w	r2, r2, #1
 800245a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
  while (hcryp->CrypInCount < incount)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002464:	b29b      	uxth	r3, r3
 8002466:	461a      	mov	r2, r3
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	4293      	cmp	r3, r2
 800246c:	d89c      	bhi.n	80023a8 <CRYPEx_KeyDecrypt+0x11e>
  }

  /* Disable the CRYP peripheral clock */
  __HAL_CRYP_DISABLE(hcryp);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0201 	bic.w	r2, r2, #1
 800247c:	601a      	str	r2, [r3, #0]

  /* Change the CRYP peripheral state */
  hcryp->State = HAL_CRYP_STATE_READY;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
  __HAL_UNLOCK(hcryp);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <CRYPEx_KeyEncrypt>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure
  * @param  Timeout specify Timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYPEx_KeyEncrypt(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  uint32_t incount; /* Temporary CrypInCount Value */
  uint32_t i;
  uint32_t tickstart;
  uint32_t temp; /* Temporary CrypOutBuff */

  if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d017      	beq.n	80024da <CRYPEx_KeyEncrypt+0x42>
  {
    /* Set the Initialization Vector */
    hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	691a      	ldr	r2, [r3, #16]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6812      	ldr	r2, [r2, #0]
 80024b4:	62da      	str	r2, [r3, #44]	; 0x2c
    hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1U);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	691a      	ldr	r2, [r3, #16]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	6852      	ldr	r2, [r2, #4]
 80024c0:	629a      	str	r2, [r3, #40]	; 0x28
    hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2U);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	691a      	ldr	r2, [r3, #16]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6892      	ldr	r2, [r2, #8]
 80024cc:	625a      	str	r2, [r3, #36]	; 0x24
    hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3U);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	691a      	ldr	r2, [r3, #16]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68d2      	ldr	r2, [r2, #12]
 80024d8:	621a      	str	r2, [r3, #32]
  }

  /* Enable CRYP */
  __HAL_CRYP_ENABLE(hcryp);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f042 0201 	orr.w	r2, r2, #1
 80024e8:	601a      	str	r2, [r3, #0]

  /* Set the phase */
  hcryp->Phase = CRYPEx_PHASE_PROCESS;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2202      	movs	r2, #2
 80024ee:	64da      	str	r2, [r3, #76]	; 0x4c

  if (hcryp->Init.KeySize == CRYP_KEYSIZE_128B)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d102      	bne.n	80024fe <CRYPEx_KeyEncrypt+0x66>
  {
    incount = 4U;
 80024f8:	2304      	movs	r3, #4
 80024fa:	617b      	str	r3, [r7, #20]
 80024fc:	e07d      	b.n	80025fa <CRYPEx_KeyEncrypt+0x162>
  }
  else
  {
    incount = 8U;
 80024fe:	2308      	movs	r3, #8
 8002500:	617b      	str	r3, [r7, #20]
  }
  while (hcryp->CrypInCount < incount)
 8002502:	e07a      	b.n	80025fa <CRYPEx_KeyEncrypt+0x162>
  {
    for (i = 0U; i < 4U; i++)
 8002504:	2300      	movs	r3, #0
 8002506:	613b      	str	r3, [r7, #16]
 8002508:	e017      	b.n	800253a <CRYPEx_KeyEncrypt+0xa2>
    {
      hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002514:	b29b      	uxth	r3, r3
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	441a      	add	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6812      	ldr	r2, [r2, #0]
 8002520:	609a      	str	r2, [r3, #8]
      hcryp->CrypInCount++;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002528:	b29b      	uxth	r3, r3
 800252a:	3301      	adds	r3, #1
 800252c:	b29a      	uxth	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    for (i = 0U; i < 4U; i++)
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	3301      	adds	r3, #1
 8002538:	613b      	str	r3, [r7, #16]
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	2b03      	cmp	r3, #3
 800253e:	d9e4      	bls.n	800250a <CRYPEx_KeyEncrypt+0x72>
    }
    /* Wait for CCF flag to be raised */
    tickstart = HAL_GetTick();
 8002540:	f7fe fa00 	bl	8000944 <HAL_GetTick>
 8002544:	60f8      	str	r0, [r7, #12]
    while (HAL_IS_BIT_CLR(hcryp->Instance->ISR, AES_ISR_CCF))
 8002546:	e026      	b.n	8002596 <CRYPEx_KeyEncrypt+0xfe>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800254e:	d022      	beq.n	8002596 <CRYPEx_KeyEncrypt+0xfe>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002550:	f7fe f9f8 	bl	8000944 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	429a      	cmp	r2, r3
 800255e:	d302      	bcc.n	8002566 <CRYPEx_KeyEncrypt+0xce>
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d117      	bne.n	8002596 <CRYPEx_KeyEncrypt+0xfe>
        {
          /* Disable the CRYP peripheral clock */
          __HAL_CRYP_DISABLE(hcryp);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0201 	bic.w	r2, r2, #1
 8002574:	601a      	str	r2, [r3, #0]

          /* Change state */
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800257a:	f043 0210 	orr.w	r2, r3, #16
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	65da      	str	r2, [r3, #92]	; 0x5c
          hcryp->State = HAL_CRYP_STATE_READY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
          __HAL_UNLOCK(hcryp);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
          return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e04b      	b.n	800262e <CRYPEx_KeyEncrypt+0x196>
    while (HAL_IS_BIT_CLR(hcryp->Instance->ISR, AES_ISR_CCF))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d0d0      	beq.n	8002548 <CRYPEx_KeyEncrypt+0xb0>
        }
      }
    }

    /* Clear CCF Flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f8d3 2308 	ldr.w	r2, [r3, #776]	; 0x308
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f042 0201 	orr.w	r2, r2, #1
 80025b6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

    /* Read the output block from the output FIFO and put them in temporary buffer then
       get CrypOutBuff from temporary buffer */
    for (i = 0U; i < 4U; i++)
 80025ba:	2300      	movs	r3, #0
 80025bc:	613b      	str	r3, [r7, #16]
 80025be:	e019      	b.n	80025f4 <CRYPEx_KeyEncrypt+0x15c>
    {
      temp  = hcryp->Instance->DOUTR;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	60bb      	str	r3, [r7, #8]
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	68ba      	ldr	r2, [r7, #8]
 80025da:	601a      	str	r2, [r3, #0]
      hcryp->CrypOutCount++;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	3301      	adds	r3, #1
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    for (i = 0U; i < 4U; i++)
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	3301      	adds	r3, #1
 80025f2:	613b      	str	r3, [r7, #16]
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	2b03      	cmp	r3, #3
 80025f8:	d9e2      	bls.n	80025c0 <CRYPEx_KeyEncrypt+0x128>
  while (hcryp->CrypInCount < incount)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002600:	b29b      	uxth	r3, r3
 8002602:	461a      	mov	r2, r3
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	4293      	cmp	r3, r2
 8002608:	f63f af7c 	bhi.w	8002504 <CRYPEx_KeyEncrypt+0x6c>
    }
  }

  /* Disable the CRYP peripheral clock */
  __HAL_CRYP_DISABLE(hcryp);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f022 0201 	bic.w	r2, r2, #1
 800261a:	601a      	str	r2, [r3, #0]

  /* Change the CRYP peripheral state */
  hcryp->State = HAL_CRYP_STATE_READY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
  __HAL_UNLOCK(hcryp);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3718      	adds	r7, #24
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
	...

08002638 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002638:	b480      	push	{r7}
 800263a:	b089      	sub	sp, #36	; 0x24
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8002642:	2300      	movs	r3, #0
 8002644:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800264a:	e1ba      	b.n	80029c2 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	2101      	movs	r1, #1
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	fa01 f303 	lsl.w	r3, r1, r3
 8002658:	4013      	ands	r3, r2
 800265a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2b00      	cmp	r3, #0
 8002664:	f000 81aa 	beq.w	80029bc <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a55      	ldr	r2, [pc, #340]	; (80027c0 <HAL_GPIO_Init+0x188>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d15d      	bne.n	800272c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8002676:	2201      	movs	r2, #1
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43db      	mvns	r3, r3
 8002680:	69fa      	ldr	r2, [r7, #28]
 8002682:	4013      	ands	r3, r2
 8002684:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f003 0201 	and.w	r2, r3, #1
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	69fa      	ldr	r2, [r7, #28]
 8002696:	4313      	orrs	r3, r2
 8002698:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	69fa      	ldr	r2, [r7, #28]
 800269e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80026a0:	4a48      	ldr	r2, [pc, #288]	; (80027c4 <HAL_GPIO_Init+0x18c>)
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80026a8:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80026aa:	4a46      	ldr	r2, [pc, #280]	; (80027c4 <HAL_GPIO_Init+0x18c>)
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	4413      	add	r3, r2
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	08da      	lsrs	r2, r3, #3
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	3208      	adds	r2, #8
 80026be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026c2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	220f      	movs	r2, #15
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	43db      	mvns	r3, r3
 80026d4:	69fa      	ldr	r2, [r7, #28]
 80026d6:	4013      	ands	r3, r2
 80026d8:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	220b      	movs	r2, #11
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	69fa      	ldr	r2, [r7, #28]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	08da      	lsrs	r2, r3, #3
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	3208      	adds	r2, #8
 80026f6:	69f9      	ldr	r1, [r7, #28]
 80026f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	2203      	movs	r2, #3
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	43db      	mvns	r3, r3
 800270e:	69fa      	ldr	r2, [r7, #28]
 8002710:	4013      	ands	r3, r2
 8002712:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	2202      	movs	r2, #2
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	69fa      	ldr	r2, [r7, #28]
 8002720:	4313      	orrs	r3, r2
 8002722:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	69fa      	ldr	r2, [r7, #28]
 8002728:	601a      	str	r2, [r3, #0]
 800272a:	e067      	b.n	80027fc <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	2b02      	cmp	r3, #2
 8002732:	d003      	beq.n	800273c <HAL_GPIO_Init+0x104>
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	2b12      	cmp	r3, #18
 800273a:	d145      	bne.n	80027c8 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	08da      	lsrs	r2, r3, #3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	3208      	adds	r2, #8
 8002744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002748:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	220f      	movs	r2, #15
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	43db      	mvns	r3, r3
 800275a:	69fa      	ldr	r2, [r7, #28]
 800275c:	4013      	ands	r3, r2
 800275e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	f003 020f 	and.w	r2, r3, #15
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	69fa      	ldr	r2, [r7, #28]
 8002776:	4313      	orrs	r3, r2
 8002778:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	08da      	lsrs	r2, r3, #3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	3208      	adds	r2, #8
 8002782:	69f9      	ldr	r1, [r7, #28]
 8002784:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	2203      	movs	r2, #3
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43db      	mvns	r3, r3
 800279a:	69fa      	ldr	r2, [r7, #28]
 800279c:	4013      	ands	r3, r2
 800279e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f003 0203 	and.w	r2, r3, #3
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	69fa      	ldr	r2, [r7, #28]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	69fa      	ldr	r2, [r7, #28]
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	e01e      	b.n	80027fc <HAL_GPIO_Init+0x1c4>
 80027be:	bf00      	nop
 80027c0:	46020000 	.word	0x46020000
 80027c4:	0800515c 	.word	0x0800515c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	2203      	movs	r2, #3
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	43db      	mvns	r3, r3
 80027da:	69fa      	ldr	r2, [r7, #28]
 80027dc:	4013      	ands	r3, r2
 80027de:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f003 0203 	and.w	r2, r3, #3
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	69fa      	ldr	r2, [r7, #28]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	69fa      	ldr	r2, [r7, #28]
 80027fa:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d00b      	beq.n	800281c <HAL_GPIO_Init+0x1e4>
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	2b02      	cmp	r3, #2
 800280a:	d007      	beq.n	800281c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002810:	2b11      	cmp	r3, #17
 8002812:	d003      	beq.n	800281c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	2b12      	cmp	r3, #18
 800281a:	d130      	bne.n	800287e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	2203      	movs	r2, #3
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	43db      	mvns	r3, r3
 800282e:	69fa      	ldr	r2, [r7, #28]
 8002830:	4013      	ands	r3, r2
 8002832:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	68da      	ldr	r2, [r3, #12]
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	69fa      	ldr	r2, [r7, #28]
 8002842:	4313      	orrs	r3, r2
 8002844:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	69fa      	ldr	r2, [r7, #28]
 800284a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8002852:	2201      	movs	r2, #1
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	43db      	mvns	r3, r3
 800285c:	69fa      	ldr	r2, [r7, #28]
 800285e:	4013      	ands	r3, r2
 8002860:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	091b      	lsrs	r3, r3, #4
 8002868:	f003 0201 	and.w	r2, r3, #1
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	69fa      	ldr	r2, [r7, #28]
 8002874:	4313      	orrs	r3, r2
 8002876:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	69fa      	ldr	r2, [r7, #28]
 800287c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b03      	cmp	r3, #3
 8002884:	d017      	beq.n	80028b6 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	2203      	movs	r2, #3
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	43db      	mvns	r3, r3
 8002898:	69fa      	ldr	r2, [r7, #28]
 800289a:	4013      	ands	r3, r2
 800289c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	689a      	ldr	r2, [r3, #8]
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	69fa      	ldr	r2, [r7, #28]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	69fa      	ldr	r2, [r7, #28]
 80028b4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d07c      	beq.n	80029bc <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80028c2:	4a47      	ldr	r2, [pc, #284]	; (80029e0 <HAL_GPIO_Init+0x3a8>)
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	089b      	lsrs	r3, r3, #2
 80028c8:	3318      	adds	r3, #24
 80028ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ce:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	220f      	movs	r2, #15
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	43db      	mvns	r3, r3
 80028e0:	69fa      	ldr	r2, [r7, #28]
 80028e2:	4013      	ands	r3, r2
 80028e4:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	0a9a      	lsrs	r2, r3, #10
 80028ea:	4b3e      	ldr	r3, [pc, #248]	; (80029e4 <HAL_GPIO_Init+0x3ac>)
 80028ec:	4013      	ands	r3, r2
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	f002 0203 	and.w	r2, r2, #3
 80028f4:	00d2      	lsls	r2, r2, #3
 80028f6:	4093      	lsls	r3, r2
 80028f8:	69fa      	ldr	r2, [r7, #28]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80028fe:	4938      	ldr	r1, [pc, #224]	; (80029e0 <HAL_GPIO_Init+0x3a8>)
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	089b      	lsrs	r3, r3, #2
 8002904:	3318      	adds	r3, #24
 8002906:	69fa      	ldr	r2, [r7, #28]
 8002908:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800290c:	4b34      	ldr	r3, [pc, #208]	; (80029e0 <HAL_GPIO_Init+0x3a8>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	43db      	mvns	r3, r3
 8002916:	69fa      	ldr	r2, [r7, #28]
 8002918:	4013      	ands	r3, r2
 800291a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8002928:	69fa      	ldr	r2, [r7, #28]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	4313      	orrs	r3, r2
 800292e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8002930:	4a2b      	ldr	r2, [pc, #172]	; (80029e0 <HAL_GPIO_Init+0x3a8>)
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002936:	4b2a      	ldr	r3, [pc, #168]	; (80029e0 <HAL_GPIO_Init+0x3a8>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	43db      	mvns	r3, r3
 8002940:	69fa      	ldr	r2, [r7, #28]
 8002942:	4013      	ands	r3, r2
 8002944:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8002952:	69fa      	ldr	r2, [r7, #28]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	4313      	orrs	r3, r2
 8002958:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800295a:	4a21      	ldr	r2, [pc, #132]	; (80029e0 <HAL_GPIO_Init+0x3a8>)
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002960:	4b1f      	ldr	r3, [pc, #124]	; (80029e0 <HAL_GPIO_Init+0x3a8>)
 8002962:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002966:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	43db      	mvns	r3, r3
 800296c:	69fa      	ldr	r2, [r7, #28]
 800296e:	4013      	ands	r3, r2
 8002970:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800297e:	69fa      	ldr	r2, [r7, #28]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	4313      	orrs	r3, r2
 8002984:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8002986:	4a16      	ldr	r2, [pc, #88]	; (80029e0 <HAL_GPIO_Init+0x3a8>)
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800298e:	4b14      	ldr	r3, [pc, #80]	; (80029e0 <HAL_GPIO_Init+0x3a8>)
 8002990:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002994:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	43db      	mvns	r3, r3
 800299a:	69fa      	ldr	r2, [r7, #28]
 800299c:	4013      	ands	r3, r2
 800299e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d003      	beq.n	80029b4 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80029ac:	69fa      	ldr	r2, [r7, #28]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80029b4:	4a0a      	ldr	r2, [pc, #40]	; (80029e0 <HAL_GPIO_Init+0x3a8>)
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	3301      	adds	r3, #1
 80029c0:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	fa22 f303 	lsr.w	r3, r2, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f47f ae3d 	bne.w	800264c <HAL_GPIO_Init+0x14>
  }
}
 80029d2:	bf00      	nop
 80029d4:	bf00      	nop
 80029d6:	3724      	adds	r7, #36	; 0x24
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	46022000 	.word	0x46022000
 80029e4:	002f7f7f 	.word	0x002f7f7f

080029e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	460b      	mov	r3, r1
 80029f2:	807b      	strh	r3, [r7, #2]
 80029f4:	4613      	mov	r3, r2
 80029f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029f8:	787b      	ldrb	r3, [r7, #1]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029fe:	887a      	ldrh	r2, [r7, #2]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8002a04:	e002      	b.n	8002a0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8002a06:	887a      	ldrh	r2, [r7, #2]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a20:	2300      	movs	r3, #0
 8002a22:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002a24:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d002      	beq.n	8002a36 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	73fb      	strb	r3, [r7, #15]
 8002a34:	e007      	b.n	8002a46 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8002a36:	4b07      	ldr	r3, [pc, #28]	; (8002a54 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f023 0204 	bic.w	r2, r3, #4
 8002a3e:	4905      	ldr	r1, [pc, #20]	; (8002a54 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	600b      	str	r3, [r1, #0]
  }

  return status;
 8002a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3714      	adds	r7, #20
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	40030400 	.word	0x40030400

08002a58 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002a5c:	4b05      	ldr	r3, [pc, #20]	; (8002a74 <HAL_ICACHE_Enable+0x1c>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a04      	ldr	r2, [pc, #16]	; (8002a74 <HAL_ICACHE_Enable+0x1c>)
 8002a62:	f043 0301 	orr.w	r3, r3, #1
 8002a66:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	40030400 	.word	0x40030400

08002a78 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8002a80:	4b39      	ldr	r3, [pc, #228]	; (8002b68 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a88:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002a8a:	68ba      	ldr	r2, [r7, #8]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d10b      	bne.n	8002aaa <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a98:	d905      	bls.n	8002aa6 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002a9a:	4b33      	ldr	r3, [pc, #204]	; (8002b68 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	4a32      	ldr	r2, [pc, #200]	; (8002b68 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002aa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002aa4:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	e057      	b.n	8002b5a <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ab0:	d90a      	bls.n	8002ac8 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8002ab2:	4b2d      	ldr	r3, [pc, #180]	; (8002b68 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	4a2a      	ldr	r2, [pc, #168]	; (8002b68 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ac4:	60d3      	str	r3, [r2, #12]
 8002ac6:	e007      	b.n	8002ad8 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8002ac8:	4b27      	ldr	r3, [pc, #156]	; (8002b68 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002ad0:	4925      	ldr	r1, [pc, #148]	; (8002b68 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002ad8:	4b24      	ldr	r3, [pc, #144]	; (8002b6c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a24      	ldr	r2, [pc, #144]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002ade:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae2:	099b      	lsrs	r3, r3, #6
 8002ae4:	2232      	movs	r2, #50	; 0x32
 8002ae6:	fb02 f303 	mul.w	r3, r2, r3
 8002aea:	4a21      	ldr	r2, [pc, #132]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002aec:	fba2 2303 	umull	r2, r3, r2, r3
 8002af0:	099b      	lsrs	r3, r3, #6
 8002af2:	3301      	adds	r3, #1
 8002af4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002af6:	e002      	b.n	8002afe <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	3b01      	subs	r3, #1
 8002afc:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002afe:	4b1a      	ldr	r3, [pc, #104]	; (8002b68 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d102      	bne.n	8002b10 <HAL_PWREx_ControlVoltageScaling+0x98>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1f3      	bne.n	8002af8 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d01b      	beq.n	8002b4e <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002b16:	4b15      	ldr	r3, [pc, #84]	; (8002b6c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a15      	ldr	r2, [pc, #84]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b20:	099b      	lsrs	r3, r3, #6
 8002b22:	2232      	movs	r2, #50	; 0x32
 8002b24:	fb02 f303 	mul.w	r3, r2, r3
 8002b28:	4a11      	ldr	r2, [pc, #68]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2e:	099b      	lsrs	r3, r3, #6
 8002b30:	3301      	adds	r3, #1
 8002b32:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002b34:	e002      	b.n	8002b3c <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002b3c:	4b0a      	ldr	r3, [pc, #40]	; (8002b68 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d102      	bne.n	8002b4e <HAL_PWREx_ControlVoltageScaling+0xd6>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1f3      	bne.n	8002b36 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d101      	bne.n	8002b58 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e000      	b.n	8002b5a <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3714      	adds	r7, #20
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	46020800 	.word	0x46020800
 8002b6c:	200000a8 	.word	0x200000a8
 8002b70:	10624dd3 	.word	0x10624dd3

08002b74 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8002b78:	4b04      	ldr	r3, [pc, #16]	; (8002b8c <HAL_PWREx_GetVoltageRange+0x18>)
 8002b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	46020800 	.word	0x46020800

08002b90 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002b98:	4b22      	ldr	r3, [pc, #136]	; (8002c24 <HAL_PWREx_ConfigSupply+0x94>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a22      	ldr	r2, [pc, #136]	; (8002c28 <HAL_PWREx_ConfigSupply+0x98>)
 8002b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba2:	099b      	lsrs	r3, r3, #6
 8002ba4:	2232      	movs	r2, #50	; 0x32
 8002ba6:	fb02 f303 	mul.w	r3, r2, r3
 8002baa:	4a1f      	ldr	r2, [pc, #124]	; (8002c28 <HAL_PWREx_ConfigSupply+0x98>)
 8002bac:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb0:	099b      	lsrs	r3, r3, #6
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d113      	bne.n	8002be4 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8002bbc:	4b1b      	ldr	r3, [pc, #108]	; (8002c2c <HAL_PWREx_ConfigSupply+0x9c>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	4a1a      	ldr	r2, [pc, #104]	; (8002c2c <HAL_PWREx_ConfigSupply+0x9c>)
 8002bc2:	f023 0302 	bic.w	r3, r3, #2
 8002bc6:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002bc8:	e002      	b.n	8002bd0 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002bd0:	4b16      	ldr	r3, [pc, #88]	; (8002c2c <HAL_PWREx_ConfigSupply+0x9c>)
 8002bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d116      	bne.n	8002c0a <HAL_PWREx_ConfigSupply+0x7a>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1f3      	bne.n	8002bca <HAL_PWREx_ConfigSupply+0x3a>
 8002be2:	e012      	b.n	8002c0a <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8002be4:	4b11      	ldr	r3, [pc, #68]	; (8002c2c <HAL_PWREx_ConfigSupply+0x9c>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	4a10      	ldr	r2, [pc, #64]	; (8002c2c <HAL_PWREx_ConfigSupply+0x9c>)
 8002bea:	f043 0302 	orr.w	r3, r3, #2
 8002bee:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002bf0:	e002      	b.n	8002bf8 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002bf8:	4b0c      	ldr	r3, [pc, #48]	; (8002c2c <HAL_PWREx_ConfigSupply+0x9c>)
 8002bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d102      	bne.n	8002c0a <HAL_PWREx_ConfigSupply+0x7a>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1f3      	bne.n	8002bf2 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d101      	bne.n	8002c14 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e000      	b.n	8002c16 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3714      	adds	r7, #20
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	200000a8 	.word	0x200000a8
 8002c28:	10624dd3 	.word	0x10624dd3
 8002c2c:	46020800 	.word	0x46020800

08002c30 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8002c34:	4b05      	ldr	r3, [pc, #20]	; (8002c4c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c38:	4a04      	ldr	r2, [pc, #16]	; (8002c4c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002c3a:	f043 0301 	orr.w	r3, r3, #1
 8002c3e:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8002c40:	bf00      	nop
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	46020800 	.word	0x46020800

08002c50 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b08e      	sub	sp, #56	; 0x38
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d102      	bne.n	8002c6a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	f000 bec8 	b.w	80039fa <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c6a:	4b99      	ldr	r3, [pc, #612]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002c6c:	69db      	ldr	r3, [r3, #28]
 8002c6e:	f003 030c 	and.w	r3, r3, #12
 8002c72:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c74:	4b96      	ldr	r3, [pc, #600]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c78:	f003 0303 	and.w	r3, r3, #3
 8002c7c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0310 	and.w	r3, r3, #16
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f000 816c 	beq.w	8002f64 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d007      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x52>
 8002c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c94:	2b0c      	cmp	r3, #12
 8002c96:	f040 80de 	bne.w	8002e56 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	f040 80da 	bne.w	8002e56 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d102      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	f000 bea5 	b.w	80039fa <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cb4:	4b86      	ldr	r3, [pc, #536]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d004      	beq.n	8002cca <HAL_RCC_OscConfig+0x7a>
 8002cc0:	4b83      	ldr	r3, [pc, #524]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002cc8:	e005      	b.n	8002cd6 <HAL_RCC_OscConfig+0x86>
 8002cca:	4b81      	ldr	r3, [pc, #516]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002ccc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002cd0:	041b      	lsls	r3, r3, #16
 8002cd2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d255      	bcs.n	8002d86 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d10a      	bne.n	8002cf6 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f001 f99d 	bl	8004024 <RCC_SetFlashLatencyFromMSIRange>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d002      	beq.n	8002cf6 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	f000 be82 	b.w	80039fa <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002cf6:	4b76      	ldr	r3, [pc, #472]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	4a75      	ldr	r2, [pc, #468]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002cfc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d00:	6093      	str	r3, [r2, #8]
 8002d02:	4b73      	ldr	r3, [pc, #460]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0e:	4970      	ldr	r1, [pc, #448]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d18:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002d1c:	d309      	bcc.n	8002d32 <HAL_RCC_OscConfig+0xe2>
 8002d1e:	4b6c      	ldr	r3, [pc, #432]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	f023 021f 	bic.w	r2, r3, #31
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	4969      	ldr	r1, [pc, #420]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	60cb      	str	r3, [r1, #12]
 8002d30:	e07e      	b.n	8002e30 <HAL_RCC_OscConfig+0x1e0>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	da0a      	bge.n	8002d50 <HAL_RCC_OscConfig+0x100>
 8002d3a:	4b65      	ldr	r3, [pc, #404]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	015b      	lsls	r3, r3, #5
 8002d48:	4961      	ldr	r1, [pc, #388]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	60cb      	str	r3, [r1, #12]
 8002d4e:	e06f      	b.n	8002e30 <HAL_RCC_OscConfig+0x1e0>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d58:	d30a      	bcc.n	8002d70 <HAL_RCC_OscConfig+0x120>
 8002d5a:	4b5d      	ldr	r3, [pc, #372]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	029b      	lsls	r3, r3, #10
 8002d68:	4959      	ldr	r1, [pc, #356]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	60cb      	str	r3, [r1, #12]
 8002d6e:	e05f      	b.n	8002e30 <HAL_RCC_OscConfig+0x1e0>
 8002d70:	4b57      	ldr	r3, [pc, #348]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	03db      	lsls	r3, r3, #15
 8002d7e:	4954      	ldr	r1, [pc, #336]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	60cb      	str	r3, [r1, #12]
 8002d84:	e054      	b.n	8002e30 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002d86:	4b52      	ldr	r3, [pc, #328]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	4a51      	ldr	r2, [pc, #324]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002d8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d90:	6093      	str	r3, [r2, #8]
 8002d92:	4b4f      	ldr	r3, [pc, #316]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9e:	494c      	ldr	r1, [pc, #304]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002dac:	d309      	bcc.n	8002dc2 <HAL_RCC_OscConfig+0x172>
 8002dae:	4b48      	ldr	r3, [pc, #288]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	f023 021f 	bic.w	r2, r3, #31
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	4945      	ldr	r1, [pc, #276]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	60cb      	str	r3, [r1, #12]
 8002dc0:	e028      	b.n	8002e14 <HAL_RCC_OscConfig+0x1c4>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	da0a      	bge.n	8002de0 <HAL_RCC_OscConfig+0x190>
 8002dca:	4b41      	ldr	r3, [pc, #260]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	015b      	lsls	r3, r3, #5
 8002dd8:	493d      	ldr	r1, [pc, #244]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	60cb      	str	r3, [r1, #12]
 8002dde:	e019      	b.n	8002e14 <HAL_RCC_OscConfig+0x1c4>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002de8:	d30a      	bcc.n	8002e00 <HAL_RCC_OscConfig+0x1b0>
 8002dea:	4b39      	ldr	r3, [pc, #228]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	029b      	lsls	r3, r3, #10
 8002df8:	4935      	ldr	r1, [pc, #212]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	60cb      	str	r3, [r1, #12]
 8002dfe:	e009      	b.n	8002e14 <HAL_RCC_OscConfig+0x1c4>
 8002e00:	4b33      	ldr	r3, [pc, #204]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	03db      	lsls	r3, r3, #15
 8002e0e:	4930      	ldr	r1, [pc, #192]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10a      	bne.n	8002e30 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f001 f900 	bl	8004024 <RCC_SetFlashLatencyFromMSIRange>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d002      	beq.n	8002e30 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	f000 bde5 	b.w	80039fa <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8002e30:	f001 f8de 	bl	8003ff0 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e34:	4b27      	ldr	r3, [pc, #156]	; (8002ed4 <HAL_RCC_OscConfig+0x284>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7fd fd39 	bl	80008b0 <HAL_InitTick>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8002e44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f000 808a 	beq.w	8002f62 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8002e4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e52:	f000 bdd2 	b.w	80039fa <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d066      	beq.n	8002f2c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8002e5e:	4b1c      	ldr	r3, [pc, #112]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a1b      	ldr	r2, [pc, #108]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002e64:	f043 0301 	orr.w	r3, r3, #1
 8002e68:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002e6a:	f7fd fd6b 	bl	8000944 <HAL_GetTick>
 8002e6e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002e70:	e009      	b.n	8002e86 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e72:	f7fd fd67 	bl	8000944 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d902      	bls.n	8002e86 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	f000 bdba 	b.w	80039fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002e86:	4b12      	ldr	r3, [pc, #72]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0304 	and.w	r3, r3, #4
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d0ef      	beq.n	8002e72 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002e92:	4b0f      	ldr	r3, [pc, #60]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	4a0e      	ldr	r2, [pc, #56]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002e98:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e9c:	6093      	str	r3, [r2, #8]
 8002e9e:	4b0c      	ldr	r3, [pc, #48]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eaa:	4909      	ldr	r1, [pc, #36]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002eb8:	d30e      	bcc.n	8002ed8 <HAL_RCC_OscConfig+0x288>
 8002eba:	4b05      	ldr	r3, [pc, #20]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	f023 021f 	bic.w	r2, r3, #31
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	4902      	ldr	r1, [pc, #8]	; (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	60cb      	str	r3, [r1, #12]
 8002ecc:	e04a      	b.n	8002f64 <HAL_RCC_OscConfig+0x314>
 8002ece:	bf00      	nop
 8002ed0:	46020c00 	.word	0x46020c00
 8002ed4:	200000ac 	.word	0x200000ac
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	da0a      	bge.n	8002ef6 <HAL_RCC_OscConfig+0x2a6>
 8002ee0:	4b98      	ldr	r3, [pc, #608]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	015b      	lsls	r3, r3, #5
 8002eee:	4995      	ldr	r1, [pc, #596]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	60cb      	str	r3, [r1, #12]
 8002ef4:	e036      	b.n	8002f64 <HAL_RCC_OscConfig+0x314>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002efe:	d30a      	bcc.n	8002f16 <HAL_RCC_OscConfig+0x2c6>
 8002f00:	4b90      	ldr	r3, [pc, #576]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	029b      	lsls	r3, r3, #10
 8002f0e:	498d      	ldr	r1, [pc, #564]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	60cb      	str	r3, [r1, #12]
 8002f14:	e026      	b.n	8002f64 <HAL_RCC_OscConfig+0x314>
 8002f16:	4b8b      	ldr	r3, [pc, #556]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	03db      	lsls	r3, r3, #15
 8002f24:	4987      	ldr	r1, [pc, #540]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	60cb      	str	r3, [r1, #12]
 8002f2a:	e01b      	b.n	8002f64 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8002f2c:	4b85      	ldr	r3, [pc, #532]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a84      	ldr	r2, [pc, #528]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002f32:	f023 0301 	bic.w	r3, r3, #1
 8002f36:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002f38:	f7fd fd04 	bl	8000944 <HAL_GetTick>
 8002f3c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002f3e:	e009      	b.n	8002f54 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f40:	f7fd fd00 	bl	8000944 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d902      	bls.n	8002f54 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	f000 bd53 	b.w	80039fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002f54:	4b7b      	ldr	r3, [pc, #492]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0304 	and.w	r3, r3, #4
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1ef      	bne.n	8002f40 <HAL_RCC_OscConfig+0x2f0>
 8002f60:	e000      	b.n	8002f64 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002f62:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f000 808b 	beq.w	8003088 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	d005      	beq.n	8002f84 <HAL_RCC_OscConfig+0x334>
 8002f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f7a:	2b0c      	cmp	r3, #12
 8002f7c:	d109      	bne.n	8002f92 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f80:	2b03      	cmp	r3, #3
 8002f82:	d106      	bne.n	8002f92 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d17d      	bne.n	8003088 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	f000 bd34 	b.w	80039fa <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f9a:	d106      	bne.n	8002faa <HAL_RCC_OscConfig+0x35a>
 8002f9c:	4b69      	ldr	r3, [pc, #420]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a68      	ldr	r2, [pc, #416]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002fa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa6:	6013      	str	r3, [r2, #0]
 8002fa8:	e041      	b.n	800302e <HAL_RCC_OscConfig+0x3de>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fb2:	d112      	bne.n	8002fda <HAL_RCC_OscConfig+0x38a>
 8002fb4:	4b63      	ldr	r3, [pc, #396]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a62      	ldr	r2, [pc, #392]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002fba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fbe:	6013      	str	r3, [r2, #0]
 8002fc0:	4b60      	ldr	r3, [pc, #384]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a5f      	ldr	r2, [pc, #380]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002fc6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002fca:	6013      	str	r3, [r2, #0]
 8002fcc:	4b5d      	ldr	r3, [pc, #372]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a5c      	ldr	r2, [pc, #368]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002fd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd6:	6013      	str	r3, [r2, #0]
 8002fd8:	e029      	b.n	800302e <HAL_RCC_OscConfig+0x3de>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002fe2:	d112      	bne.n	800300a <HAL_RCC_OscConfig+0x3ba>
 8002fe4:	4b57      	ldr	r3, [pc, #348]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a56      	ldr	r2, [pc, #344]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002fea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fee:	6013      	str	r3, [r2, #0]
 8002ff0:	4b54      	ldr	r3, [pc, #336]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a53      	ldr	r2, [pc, #332]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002ff6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ffa:	6013      	str	r3, [r2, #0]
 8002ffc:	4b51      	ldr	r3, [pc, #324]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a50      	ldr	r2, [pc, #320]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8003002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003006:	6013      	str	r3, [r2, #0]
 8003008:	e011      	b.n	800302e <HAL_RCC_OscConfig+0x3de>
 800300a:	4b4e      	ldr	r3, [pc, #312]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a4d      	ldr	r2, [pc, #308]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8003010:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003014:	6013      	str	r3, [r2, #0]
 8003016:	4b4b      	ldr	r3, [pc, #300]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a4a      	ldr	r2, [pc, #296]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 800301c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003020:	6013      	str	r3, [r2, #0]
 8003022:	4b48      	ldr	r3, [pc, #288]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a47      	ldr	r2, [pc, #284]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8003028:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800302c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d014      	beq.n	8003060 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8003036:	f7fd fc85 	bl	8000944 <HAL_GetTick>
 800303a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800303c:	e009      	b.n	8003052 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800303e:	f7fd fc81 	bl	8000944 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b64      	cmp	r3, #100	; 0x64
 800304a:	d902      	bls.n	8003052 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	f000 bcd4 	b.w	80039fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003052:	4b3c      	ldr	r3, [pc, #240]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0ef      	beq.n	800303e <HAL_RCC_OscConfig+0x3ee>
 800305e:	e013      	b.n	8003088 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8003060:	f7fd fc70 	bl	8000944 <HAL_GetTick>
 8003064:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003066:	e009      	b.n	800307c <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003068:	f7fd fc6c 	bl	8000944 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b64      	cmp	r3, #100	; 0x64
 8003074:	d902      	bls.n	800307c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	f000 bcbf 	b.w	80039fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800307c:	4b31      	ldr	r3, [pc, #196]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1ef      	bne.n	8003068 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d05f      	beq.n	8003154 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003096:	2b04      	cmp	r3, #4
 8003098:	d005      	beq.n	80030a6 <HAL_RCC_OscConfig+0x456>
 800309a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309c:	2b0c      	cmp	r3, #12
 800309e:	d114      	bne.n	80030ca <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80030a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d111      	bne.n	80030ca <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d102      	bne.n	80030b4 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	f000 bca3 	b.w	80039fa <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80030b4:	4b23      	ldr	r3, [pc, #140]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	041b      	lsls	r3, r3, #16
 80030c2:	4920      	ldr	r1, [pc, #128]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80030c8:	e044      	b.n	8003154 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d024      	beq.n	800311c <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80030d2:	4b1c      	ldr	r3, [pc, #112]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a1b      	ldr	r2, [pc, #108]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 80030d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030dc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80030de:	f7fd fc31 	bl	8000944 <HAL_GetTick>
 80030e2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030e4:	e009      	b.n	80030fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030e6:	f7fd fc2d 	bl	8000944 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d902      	bls.n	80030fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	f000 bc80 	b.w	80039fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030fa:	4b12      	ldr	r3, [pc, #72]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003102:	2b00      	cmp	r3, #0
 8003104:	d0ef      	beq.n	80030e6 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003106:	4b0f      	ldr	r3, [pc, #60]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	041b      	lsls	r3, r3, #16
 8003114:	490b      	ldr	r1, [pc, #44]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8003116:	4313      	orrs	r3, r2
 8003118:	610b      	str	r3, [r1, #16]
 800311a:	e01b      	b.n	8003154 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800311c:	4b09      	ldr	r3, [pc, #36]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a08      	ldr	r2, [pc, #32]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8003122:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003126:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003128:	f7fd fc0c 	bl	8000944 <HAL_GetTick>
 800312c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800312e:	e00b      	b.n	8003148 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003130:	f7fd fc08 	bl	8000944 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d904      	bls.n	8003148 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	f000 bc5b 	b.w	80039fa <HAL_RCC_OscConfig+0xdaa>
 8003144:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003148:	4baf      	ldr	r3, [pc, #700]	; (8003408 <HAL_RCC_OscConfig+0x7b8>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1ed      	bne.n	8003130 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0308 	and.w	r3, r3, #8
 800315c:	2b00      	cmp	r3, #0
 800315e:	f000 80c8 	beq.w	80032f2 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8003162:	2300      	movs	r3, #0
 8003164:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003168:	4ba7      	ldr	r3, [pc, #668]	; (8003408 <HAL_RCC_OscConfig+0x7b8>)
 800316a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800316e:	f003 0304 	and.w	r3, r3, #4
 8003172:	2b00      	cmp	r3, #0
 8003174:	d111      	bne.n	800319a <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003176:	4ba4      	ldr	r3, [pc, #656]	; (8003408 <HAL_RCC_OscConfig+0x7b8>)
 8003178:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800317c:	4aa2      	ldr	r2, [pc, #648]	; (8003408 <HAL_RCC_OscConfig+0x7b8>)
 800317e:	f043 0304 	orr.w	r3, r3, #4
 8003182:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003186:	4ba0      	ldr	r3, [pc, #640]	; (8003408 <HAL_RCC_OscConfig+0x7b8>)
 8003188:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	617b      	str	r3, [r7, #20]
 8003192:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8003194:	2301      	movs	r3, #1
 8003196:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800319a:	4b9c      	ldr	r3, [pc, #624]	; (800340c <HAL_RCC_OscConfig+0x7bc>)
 800319c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d119      	bne.n	80031da <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80031a6:	4b99      	ldr	r3, [pc, #612]	; (800340c <HAL_RCC_OscConfig+0x7bc>)
 80031a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031aa:	4a98      	ldr	r2, [pc, #608]	; (800340c <HAL_RCC_OscConfig+0x7bc>)
 80031ac:	f043 0301 	orr.w	r3, r3, #1
 80031b0:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031b2:	f7fd fbc7 	bl	8000944 <HAL_GetTick>
 80031b6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80031b8:	e009      	b.n	80031ce <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ba:	f7fd fbc3 	bl	8000944 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d902      	bls.n	80031ce <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	f000 bc16 	b.w	80039fa <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80031ce:	4b8f      	ldr	r3, [pc, #572]	; (800340c <HAL_RCC_OscConfig+0x7bc>)
 80031d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0ef      	beq.n	80031ba <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d05f      	beq.n	80032a2 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80031e2:	4b89      	ldr	r3, [pc, #548]	; (8003408 <HAL_RCC_OscConfig+0x7b8>)
 80031e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031e8:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	699a      	ldr	r2, [r3, #24]
 80031ee:	6a3b      	ldr	r3, [r7, #32]
 80031f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d037      	beq.n	8003268 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80031f8:	6a3b      	ldr	r3, [r7, #32]
 80031fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d006      	beq.n	8003210 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8003202:	6a3b      	ldr	r3, [r7, #32]
 8003204:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003208:	2b00      	cmp	r3, #0
 800320a:	d101      	bne.n	8003210 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e3f4      	b.n	80039fa <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8003210:	6a3b      	ldr	r3, [r7, #32]
 8003212:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d01b      	beq.n	8003252 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800321a:	4b7b      	ldr	r3, [pc, #492]	; (8003408 <HAL_RCC_OscConfig+0x7b8>)
 800321c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003220:	4a79      	ldr	r2, [pc, #484]	; (8003408 <HAL_RCC_OscConfig+0x7b8>)
 8003222:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8003226:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 800322a:	f7fd fb8b 	bl	8000944 <HAL_GetTick>
 800322e:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003230:	e008      	b.n	8003244 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003232:	f7fd fb87 	bl	8000944 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b05      	cmp	r3, #5
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e3da      	b.n	80039fa <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003244:	4b70      	ldr	r3, [pc, #448]	; (8003408 <HAL_RCC_OscConfig+0x7b8>)
 8003246:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800324a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1ef      	bne.n	8003232 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8003252:	4b6d      	ldr	r3, [pc, #436]	; (8003408 <HAL_RCC_OscConfig+0x7b8>)
 8003254:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003258:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	4969      	ldr	r1, [pc, #420]	; (8003408 <HAL_RCC_OscConfig+0x7b8>)
 8003262:	4313      	orrs	r3, r2
 8003264:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8003268:	4b67      	ldr	r3, [pc, #412]	; (8003408 <HAL_RCC_OscConfig+0x7b8>)
 800326a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800326e:	4a66      	ldr	r2, [pc, #408]	; (8003408 <HAL_RCC_OscConfig+0x7b8>)
 8003270:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003274:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8003278:	f7fd fb64 	bl	8000944 <HAL_GetTick>
 800327c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003280:	f7fd fb60 	bl	8000944 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b05      	cmp	r3, #5
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e3b3      	b.n	80039fa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003292:	4b5d      	ldr	r3, [pc, #372]	; (8003408 <HAL_RCC_OscConfig+0x7b8>)
 8003294:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003298:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d0ef      	beq.n	8003280 <HAL_RCC_OscConfig+0x630>
 80032a0:	e01b      	b.n	80032da <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80032a2:	4b59      	ldr	r3, [pc, #356]	; (8003408 <HAL_RCC_OscConfig+0x7b8>)
 80032a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80032a8:	4a57      	ldr	r2, [pc, #348]	; (8003408 <HAL_RCC_OscConfig+0x7b8>)
 80032aa:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80032ae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80032b2:	f7fd fb47 	bl	8000944 <HAL_GetTick>
 80032b6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80032b8:	e008      	b.n	80032cc <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032ba:	f7fd fb43 	bl	8000944 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b05      	cmp	r3, #5
 80032c6:	d901      	bls.n	80032cc <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e396      	b.n	80039fa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80032cc:	4b4e      	ldr	r3, [pc, #312]	; (8003408 <HAL_RCC_OscConfig+0x7b8>)
 80032ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80032d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1ef      	bne.n	80032ba <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032da:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d107      	bne.n	80032f2 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032e2:	4b49      	ldr	r3, [pc, #292]	; (8003408 <HAL_RCC_OscConfig+0x7b8>)
 80032e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032e8:	4a47      	ldr	r2, [pc, #284]	; (8003408 <HAL_RCC_OscConfig+0x7b8>)
 80032ea:	f023 0304 	bic.w	r3, r3, #4
 80032ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0304 	and.w	r3, r3, #4
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f000 8111 	beq.w	8003522 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8003300:	2300      	movs	r3, #0
 8003302:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003306:	4b40      	ldr	r3, [pc, #256]	; (8003408 <HAL_RCC_OscConfig+0x7b8>)
 8003308:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800330c:	f003 0304 	and.w	r3, r3, #4
 8003310:	2b00      	cmp	r3, #0
 8003312:	d111      	bne.n	8003338 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003314:	4b3c      	ldr	r3, [pc, #240]	; (8003408 <HAL_RCC_OscConfig+0x7b8>)
 8003316:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800331a:	4a3b      	ldr	r2, [pc, #236]	; (8003408 <HAL_RCC_OscConfig+0x7b8>)
 800331c:	f043 0304 	orr.w	r3, r3, #4
 8003320:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003324:	4b38      	ldr	r3, [pc, #224]	; (8003408 <HAL_RCC_OscConfig+0x7b8>)
 8003326:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800332a:	f003 0304 	and.w	r3, r3, #4
 800332e:	613b      	str	r3, [r7, #16]
 8003330:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8003332:	2301      	movs	r3, #1
 8003334:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003338:	4b34      	ldr	r3, [pc, #208]	; (800340c <HAL_RCC_OscConfig+0x7bc>)
 800333a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	2b00      	cmp	r3, #0
 8003342:	d118      	bne.n	8003376 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003344:	4b31      	ldr	r3, [pc, #196]	; (800340c <HAL_RCC_OscConfig+0x7bc>)
 8003346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003348:	4a30      	ldr	r2, [pc, #192]	; (800340c <HAL_RCC_OscConfig+0x7bc>)
 800334a:	f043 0301 	orr.w	r3, r3, #1
 800334e:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003350:	f7fd faf8 	bl	8000944 <HAL_GetTick>
 8003354:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003356:	e008      	b.n	800336a <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003358:	f7fd faf4 	bl	8000944 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e347      	b.n	80039fa <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800336a:	4b28      	ldr	r3, [pc, #160]	; (800340c <HAL_RCC_OscConfig+0x7bc>)
 800336c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b00      	cmp	r3, #0
 8003374:	d0f0      	beq.n	8003358 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b00      	cmp	r3, #0
 8003380:	d01f      	beq.n	80033c2 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f003 0304 	and.w	r3, r3, #4
 800338a:	2b00      	cmp	r3, #0
 800338c:	d010      	beq.n	80033b0 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800338e:	4b1e      	ldr	r3, [pc, #120]	; (8003408 <HAL_RCC_OscConfig+0x7b8>)
 8003390:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003394:	4a1c      	ldr	r2, [pc, #112]	; (8003408 <HAL_RCC_OscConfig+0x7b8>)
 8003396:	f043 0304 	orr.w	r3, r3, #4
 800339a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800339e:	4b1a      	ldr	r3, [pc, #104]	; (8003408 <HAL_RCC_OscConfig+0x7b8>)
 80033a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80033a4:	4a18      	ldr	r2, [pc, #96]	; (8003408 <HAL_RCC_OscConfig+0x7b8>)
 80033a6:	f043 0301 	orr.w	r3, r3, #1
 80033aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80033ae:	e018      	b.n	80033e2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80033b0:	4b15      	ldr	r3, [pc, #84]	; (8003408 <HAL_RCC_OscConfig+0x7b8>)
 80033b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80033b6:	4a14      	ldr	r2, [pc, #80]	; (8003408 <HAL_RCC_OscConfig+0x7b8>)
 80033b8:	f043 0301 	orr.w	r3, r3, #1
 80033bc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80033c0:	e00f      	b.n	80033e2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80033c2:	4b11      	ldr	r3, [pc, #68]	; (8003408 <HAL_RCC_OscConfig+0x7b8>)
 80033c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80033c8:	4a0f      	ldr	r2, [pc, #60]	; (8003408 <HAL_RCC_OscConfig+0x7b8>)
 80033ca:	f023 0301 	bic.w	r3, r3, #1
 80033ce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80033d2:	4b0d      	ldr	r3, [pc, #52]	; (8003408 <HAL_RCC_OscConfig+0x7b8>)
 80033d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80033d8:	4a0b      	ldr	r2, [pc, #44]	; (8003408 <HAL_RCC_OscConfig+0x7b8>)
 80033da:	f023 0304 	bic.w	r3, r3, #4
 80033de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d057      	beq.n	800349a <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80033ea:	f7fd faab 	bl	8000944 <HAL_GetTick>
 80033ee:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033f0:	e00e      	b.n	8003410 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033f2:	f7fd faa7 	bl	8000944 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003400:	4293      	cmp	r3, r2
 8003402:	d905      	bls.n	8003410 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e2f8      	b.n	80039fa <HAL_RCC_OscConfig+0xdaa>
 8003408:	46020c00 	.word	0x46020c00
 800340c:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003410:	4b9c      	ldr	r3, [pc, #624]	; (8003684 <HAL_RCC_OscConfig+0xa34>)
 8003412:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d0e9      	beq.n	80033f2 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003426:	2b00      	cmp	r3, #0
 8003428:	d01b      	beq.n	8003462 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800342a:	4b96      	ldr	r3, [pc, #600]	; (8003684 <HAL_RCC_OscConfig+0xa34>)
 800342c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003430:	4a94      	ldr	r2, [pc, #592]	; (8003684 <HAL_RCC_OscConfig+0xa34>)
 8003432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003436:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800343a:	e00a      	b.n	8003452 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800343c:	f7fd fa82 	bl	8000944 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	f241 3288 	movw	r2, #5000	; 0x1388
 800344a:	4293      	cmp	r3, r2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e2d3      	b.n	80039fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003452:	4b8c      	ldr	r3, [pc, #560]	; (8003684 <HAL_RCC_OscConfig+0xa34>)
 8003454:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003458:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0ed      	beq.n	800343c <HAL_RCC_OscConfig+0x7ec>
 8003460:	e053      	b.n	800350a <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003462:	4b88      	ldr	r3, [pc, #544]	; (8003684 <HAL_RCC_OscConfig+0xa34>)
 8003464:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003468:	4a86      	ldr	r2, [pc, #536]	; (8003684 <HAL_RCC_OscConfig+0xa34>)
 800346a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800346e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003472:	e00a      	b.n	800348a <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003474:	f7fd fa66 	bl	8000944 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003482:	4293      	cmp	r3, r2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e2b7      	b.n	80039fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800348a:	4b7e      	ldr	r3, [pc, #504]	; (8003684 <HAL_RCC_OscConfig+0xa34>)
 800348c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003490:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1ed      	bne.n	8003474 <HAL_RCC_OscConfig+0x824>
 8003498:	e037      	b.n	800350a <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800349a:	f7fd fa53 	bl	8000944 <HAL_GetTick>
 800349e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034a0:	e00a      	b.n	80034b8 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034a2:	f7fd fa4f 	bl	8000944 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d901      	bls.n	80034b8 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e2a0      	b.n	80039fa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034b8:	4b72      	ldr	r3, [pc, #456]	; (8003684 <HAL_RCC_OscConfig+0xa34>)
 80034ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1ed      	bne.n	80034a2 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80034c6:	4b6f      	ldr	r3, [pc, #444]	; (8003684 <HAL_RCC_OscConfig+0xa34>)
 80034c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d01a      	beq.n	800350a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80034d4:	4b6b      	ldr	r3, [pc, #428]	; (8003684 <HAL_RCC_OscConfig+0xa34>)
 80034d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034da:	4a6a      	ldr	r2, [pc, #424]	; (8003684 <HAL_RCC_OscConfig+0xa34>)
 80034dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034e0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80034e4:	e00a      	b.n	80034fc <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034e6:	f7fd fa2d 	bl	8000944 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e27e      	b.n	80039fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80034fc:	4b61      	ldr	r3, [pc, #388]	; (8003684 <HAL_RCC_OscConfig+0xa34>)
 80034fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003502:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1ed      	bne.n	80034e6 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800350a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800350e:	2b01      	cmp	r3, #1
 8003510:	d107      	bne.n	8003522 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003512:	4b5c      	ldr	r3, [pc, #368]	; (8003684 <HAL_RCC_OscConfig+0xa34>)
 8003514:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003518:	4a5a      	ldr	r2, [pc, #360]	; (8003684 <HAL_RCC_OscConfig+0xa34>)
 800351a:	f023 0304 	bic.w	r3, r3, #4
 800351e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0320 	and.w	r3, r3, #32
 800352a:	2b00      	cmp	r3, #0
 800352c:	d036      	beq.n	800359c <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003532:	2b00      	cmp	r3, #0
 8003534:	d019      	beq.n	800356a <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8003536:	4b53      	ldr	r3, [pc, #332]	; (8003684 <HAL_RCC_OscConfig+0xa34>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a52      	ldr	r2, [pc, #328]	; (8003684 <HAL_RCC_OscConfig+0xa34>)
 800353c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003540:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003542:	f7fd f9ff 	bl	8000944 <HAL_GetTick>
 8003546:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003548:	e008      	b.n	800355c <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800354a:	f7fd f9fb 	bl	8000944 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d901      	bls.n	800355c <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e24e      	b.n	80039fa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800355c:	4b49      	ldr	r3, [pc, #292]	; (8003684 <HAL_RCC_OscConfig+0xa34>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d0f0      	beq.n	800354a <HAL_RCC_OscConfig+0x8fa>
 8003568:	e018      	b.n	800359c <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800356a:	4b46      	ldr	r3, [pc, #280]	; (8003684 <HAL_RCC_OscConfig+0xa34>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a45      	ldr	r2, [pc, #276]	; (8003684 <HAL_RCC_OscConfig+0xa34>)
 8003570:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003574:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003576:	f7fd f9e5 	bl	8000944 <HAL_GetTick>
 800357a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800357c:	e008      	b.n	8003590 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800357e:	f7fd f9e1 	bl	8000944 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d901      	bls.n	8003590 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e234      	b.n	80039fa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003590:	4b3c      	ldr	r3, [pc, #240]	; (8003684 <HAL_RCC_OscConfig+0xa34>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1f0      	bne.n	800357e <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d036      	beq.n	8003616 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d019      	beq.n	80035e4 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80035b0:	4b34      	ldr	r3, [pc, #208]	; (8003684 <HAL_RCC_OscConfig+0xa34>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a33      	ldr	r2, [pc, #204]	; (8003684 <HAL_RCC_OscConfig+0xa34>)
 80035b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035ba:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80035bc:	f7fd f9c2 	bl	8000944 <HAL_GetTick>
 80035c0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80035c4:	f7fd f9be 	bl	8000944 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e211      	b.n	80039fa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80035d6:	4b2b      	ldr	r3, [pc, #172]	; (8003684 <HAL_RCC_OscConfig+0xa34>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0f0      	beq.n	80035c4 <HAL_RCC_OscConfig+0x974>
 80035e2:	e018      	b.n	8003616 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80035e4:	4b27      	ldr	r3, [pc, #156]	; (8003684 <HAL_RCC_OscConfig+0xa34>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a26      	ldr	r2, [pc, #152]	; (8003684 <HAL_RCC_OscConfig+0xa34>)
 80035ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035ee:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80035f0:	f7fd f9a8 	bl	8000944 <HAL_GetTick>
 80035f4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80035f8:	f7fd f9a4 	bl	8000944 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e1f7      	b.n	80039fa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800360a:	4b1e      	ldr	r3, [pc, #120]	; (8003684 <HAL_RCC_OscConfig+0xa34>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1f0      	bne.n	80035f8 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361e:	2b00      	cmp	r3, #0
 8003620:	d07f      	beq.n	8003722 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003626:	2b00      	cmp	r3, #0
 8003628:	d062      	beq.n	80036f0 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800362a:	4b16      	ldr	r3, [pc, #88]	; (8003684 <HAL_RCC_OscConfig+0xa34>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	4a15      	ldr	r2, [pc, #84]	; (8003684 <HAL_RCC_OscConfig+0xa34>)
 8003630:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003634:	6093      	str	r3, [r2, #8]
 8003636:	4b13      	ldr	r3, [pc, #76]	; (8003684 <HAL_RCC_OscConfig+0xa34>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003642:	4910      	ldr	r1, [pc, #64]	; (8003684 <HAL_RCC_OscConfig+0xa34>)
 8003644:	4313      	orrs	r3, r2
 8003646:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003650:	d309      	bcc.n	8003666 <HAL_RCC_OscConfig+0xa16>
 8003652:	4b0c      	ldr	r3, [pc, #48]	; (8003684 <HAL_RCC_OscConfig+0xa34>)
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	f023 021f 	bic.w	r2, r3, #31
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	4909      	ldr	r1, [pc, #36]	; (8003684 <HAL_RCC_OscConfig+0xa34>)
 8003660:	4313      	orrs	r3, r2
 8003662:	60cb      	str	r3, [r1, #12]
 8003664:	e02a      	b.n	80036bc <HAL_RCC_OscConfig+0xa6c>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366a:	2b00      	cmp	r3, #0
 800366c:	da0c      	bge.n	8003688 <HAL_RCC_OscConfig+0xa38>
 800366e:	4b05      	ldr	r3, [pc, #20]	; (8003684 <HAL_RCC_OscConfig+0xa34>)
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	015b      	lsls	r3, r3, #5
 800367c:	4901      	ldr	r1, [pc, #4]	; (8003684 <HAL_RCC_OscConfig+0xa34>)
 800367e:	4313      	orrs	r3, r2
 8003680:	60cb      	str	r3, [r1, #12]
 8003682:	e01b      	b.n	80036bc <HAL_RCC_OscConfig+0xa6c>
 8003684:	46020c00 	.word	0x46020c00
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003690:	d30a      	bcc.n	80036a8 <HAL_RCC_OscConfig+0xa58>
 8003692:	4ba1      	ldr	r3, [pc, #644]	; (8003918 <HAL_RCC_OscConfig+0xcc8>)
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	029b      	lsls	r3, r3, #10
 80036a0:	499d      	ldr	r1, [pc, #628]	; (8003918 <HAL_RCC_OscConfig+0xcc8>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	60cb      	str	r3, [r1, #12]
 80036a6:	e009      	b.n	80036bc <HAL_RCC_OscConfig+0xa6c>
 80036a8:	4b9b      	ldr	r3, [pc, #620]	; (8003918 <HAL_RCC_OscConfig+0xcc8>)
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	03db      	lsls	r3, r3, #15
 80036b6:	4998      	ldr	r1, [pc, #608]	; (8003918 <HAL_RCC_OscConfig+0xcc8>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80036bc:	4b96      	ldr	r3, [pc, #600]	; (8003918 <HAL_RCC_OscConfig+0xcc8>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a95      	ldr	r2, [pc, #596]	; (8003918 <HAL_RCC_OscConfig+0xcc8>)
 80036c2:	f043 0310 	orr.w	r3, r3, #16
 80036c6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80036c8:	f7fd f93c 	bl	8000944 <HAL_GetTick>
 80036cc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80036d0:	f7fd f938 	bl	8000944 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e18b      	b.n	80039fa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80036e2:	4b8d      	ldr	r3, [pc, #564]	; (8003918 <HAL_RCC_OscConfig+0xcc8>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0320 	and.w	r3, r3, #32
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d0f0      	beq.n	80036d0 <HAL_RCC_OscConfig+0xa80>
 80036ee:	e018      	b.n	8003722 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80036f0:	4b89      	ldr	r3, [pc, #548]	; (8003918 <HAL_RCC_OscConfig+0xcc8>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a88      	ldr	r2, [pc, #544]	; (8003918 <HAL_RCC_OscConfig+0xcc8>)
 80036f6:	f023 0310 	bic.w	r3, r3, #16
 80036fa:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80036fc:	f7fd f922 	bl	8000944 <HAL_GetTick>
 8003700:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003704:	f7fd f91e 	bl	8000944 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e171      	b.n	80039fa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003716:	4b80      	ldr	r3, [pc, #512]	; (8003918 <HAL_RCC_OscConfig+0xcc8>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0320 	and.w	r3, r3, #32
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1f0      	bne.n	8003704 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 8166 	beq.w	80039f8 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800372c:	2300      	movs	r3, #0
 800372e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003732:	4b79      	ldr	r3, [pc, #484]	; (8003918 <HAL_RCC_OscConfig+0xcc8>)
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	f003 030c 	and.w	r3, r3, #12
 800373a:	2b0c      	cmp	r3, #12
 800373c:	f000 80f2 	beq.w	8003924 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003744:	2b02      	cmp	r3, #2
 8003746:	f040 80c5 	bne.w	80038d4 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800374a:	4b73      	ldr	r3, [pc, #460]	; (8003918 <HAL_RCC_OscConfig+0xcc8>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a72      	ldr	r2, [pc, #456]	; (8003918 <HAL_RCC_OscConfig+0xcc8>)
 8003750:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003754:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003756:	f7fd f8f5 	bl	8000944 <HAL_GetTick>
 800375a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800375c:	e008      	b.n	8003770 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800375e:	f7fd f8f1 	bl	8000944 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e144      	b.n	80039fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003770:	4b69      	ldr	r3, [pc, #420]	; (8003918 <HAL_RCC_OscConfig+0xcc8>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1f0      	bne.n	800375e <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800377c:	4b66      	ldr	r3, [pc, #408]	; (8003918 <HAL_RCC_OscConfig+0xcc8>)
 800377e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003782:	f003 0304 	and.w	r3, r3, #4
 8003786:	2b00      	cmp	r3, #0
 8003788:	d111      	bne.n	80037ae <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800378a:	4b63      	ldr	r3, [pc, #396]	; (8003918 <HAL_RCC_OscConfig+0xcc8>)
 800378c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003790:	4a61      	ldr	r2, [pc, #388]	; (8003918 <HAL_RCC_OscConfig+0xcc8>)
 8003792:	f043 0304 	orr.w	r3, r3, #4
 8003796:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800379a:	4b5f      	ldr	r3, [pc, #380]	; (8003918 <HAL_RCC_OscConfig+0xcc8>)
 800379c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037a0:	f003 0304 	and.w	r3, r3, #4
 80037a4:	60fb      	str	r3, [r7, #12]
 80037a6:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80037a8:	2301      	movs	r3, #1
 80037aa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80037ae:	4b5b      	ldr	r3, [pc, #364]	; (800391c <HAL_RCC_OscConfig+0xccc>)
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037ba:	d102      	bne.n	80037c2 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80037bc:	2301      	movs	r3, #1
 80037be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80037c2:	4b56      	ldr	r3, [pc, #344]	; (800391c <HAL_RCC_OscConfig+0xccc>)
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	4a55      	ldr	r2, [pc, #340]	; (800391c <HAL_RCC_OscConfig+0xccc>)
 80037c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037cc:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80037ce:	4b52      	ldr	r3, [pc, #328]	; (8003918 <HAL_RCC_OscConfig+0xcc8>)
 80037d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037d6:	f023 0303 	bic.w	r3, r3, #3
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80037e2:	3a01      	subs	r2, #1
 80037e4:	0212      	lsls	r2, r2, #8
 80037e6:	4311      	orrs	r1, r2
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80037ec:	430a      	orrs	r2, r1
 80037ee:	494a      	ldr	r1, [pc, #296]	; (8003918 <HAL_RCC_OscConfig+0xcc8>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	628b      	str	r3, [r1, #40]	; 0x28
 80037f4:	4b48      	ldr	r3, [pc, #288]	; (8003918 <HAL_RCC_OscConfig+0xcc8>)
 80037f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037f8:	4b49      	ldr	r3, [pc, #292]	; (8003920 <HAL_RCC_OscConfig+0xcd0>)
 80037fa:	4013      	ands	r3, r2
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003800:	3a01      	subs	r2, #1
 8003802:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800380a:	3a01      	subs	r2, #1
 800380c:	0252      	lsls	r2, r2, #9
 800380e:	b292      	uxth	r2, r2
 8003810:	4311      	orrs	r1, r2
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003816:	3a01      	subs	r2, #1
 8003818:	0412      	lsls	r2, r2, #16
 800381a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800381e:	4311      	orrs	r1, r2
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003824:	3a01      	subs	r2, #1
 8003826:	0612      	lsls	r2, r2, #24
 8003828:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800382c:	430a      	orrs	r2, r1
 800382e:	493a      	ldr	r1, [pc, #232]	; (8003918 <HAL_RCC_OscConfig+0xcc8>)
 8003830:	4313      	orrs	r3, r2
 8003832:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8003834:	4b38      	ldr	r3, [pc, #224]	; (8003918 <HAL_RCC_OscConfig+0xcc8>)
 8003836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003838:	4a37      	ldr	r2, [pc, #220]	; (8003918 <HAL_RCC_OscConfig+0xcc8>)
 800383a:	f023 0310 	bic.w	r3, r3, #16
 800383e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003844:	4a34      	ldr	r2, [pc, #208]	; (8003918 <HAL_RCC_OscConfig+0xcc8>)
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800384a:	4b33      	ldr	r3, [pc, #204]	; (8003918 <HAL_RCC_OscConfig+0xcc8>)
 800384c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384e:	4a32      	ldr	r2, [pc, #200]	; (8003918 <HAL_RCC_OscConfig+0xcc8>)
 8003850:	f043 0310 	orr.w	r3, r3, #16
 8003854:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8003856:	4b30      	ldr	r3, [pc, #192]	; (8003918 <HAL_RCC_OscConfig+0xcc8>)
 8003858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385a:	f023 020c 	bic.w	r2, r3, #12
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003862:	492d      	ldr	r1, [pc, #180]	; (8003918 <HAL_RCC_OscConfig+0xcc8>)
 8003864:	4313      	orrs	r3, r2
 8003866:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8003868:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800386c:	2b01      	cmp	r3, #1
 800386e:	d105      	bne.n	800387c <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003870:	4b2a      	ldr	r3, [pc, #168]	; (800391c <HAL_RCC_OscConfig+0xccc>)
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	4a29      	ldr	r2, [pc, #164]	; (800391c <HAL_RCC_OscConfig+0xccc>)
 8003876:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800387a:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800387c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003880:	2b01      	cmp	r3, #1
 8003882:	d107      	bne.n	8003894 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8003884:	4b24      	ldr	r3, [pc, #144]	; (8003918 <HAL_RCC_OscConfig+0xcc8>)
 8003886:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800388a:	4a23      	ldr	r2, [pc, #140]	; (8003918 <HAL_RCC_OscConfig+0xcc8>)
 800388c:	f023 0304 	bic.w	r3, r3, #4
 8003890:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003894:	4b20      	ldr	r3, [pc, #128]	; (8003918 <HAL_RCC_OscConfig+0xcc8>)
 8003896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003898:	4a1f      	ldr	r2, [pc, #124]	; (8003918 <HAL_RCC_OscConfig+0xcc8>)
 800389a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800389e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80038a0:	4b1d      	ldr	r3, [pc, #116]	; (8003918 <HAL_RCC_OscConfig+0xcc8>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a1c      	ldr	r2, [pc, #112]	; (8003918 <HAL_RCC_OscConfig+0xcc8>)
 80038a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038aa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80038ac:	f7fd f84a 	bl	8000944 <HAL_GetTick>
 80038b0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80038b2:	e008      	b.n	80038c6 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038b4:	f7fd f846 	bl	8000944 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e099      	b.n	80039fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80038c6:	4b14      	ldr	r3, [pc, #80]	; (8003918 <HAL_RCC_OscConfig+0xcc8>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d0f0      	beq.n	80038b4 <HAL_RCC_OscConfig+0xc64>
 80038d2:	e091      	b.n	80039f8 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80038d4:	4b10      	ldr	r3, [pc, #64]	; (8003918 <HAL_RCC_OscConfig+0xcc8>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a0f      	ldr	r2, [pc, #60]	; (8003918 <HAL_RCC_OscConfig+0xcc8>)
 80038da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038de:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80038e0:	f7fd f830 	bl	8000944 <HAL_GetTick>
 80038e4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80038e6:	e008      	b.n	80038fa <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038e8:	f7fd f82c 	bl	8000944 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e07f      	b.n	80039fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80038fa:	4b07      	ldr	r3, [pc, #28]	; (8003918 <HAL_RCC_OscConfig+0xcc8>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1f0      	bne.n	80038e8 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003906:	4b04      	ldr	r3, [pc, #16]	; (8003918 <HAL_RCC_OscConfig+0xcc8>)
 8003908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390a:	4a03      	ldr	r2, [pc, #12]	; (8003918 <HAL_RCC_OscConfig+0xcc8>)
 800390c:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8003910:	f023 0303 	bic.w	r3, r3, #3
 8003914:	6293      	str	r3, [r2, #40]	; 0x28
 8003916:	e06f      	b.n	80039f8 <HAL_RCC_OscConfig+0xda8>
 8003918:	46020c00 	.word	0x46020c00
 800391c:	46020800 	.word	0x46020800
 8003920:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003924:	4b37      	ldr	r3, [pc, #220]	; (8003a04 <HAL_RCC_OscConfig+0xdb4>)
 8003926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003928:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800392a:	4b36      	ldr	r3, [pc, #216]	; (8003a04 <HAL_RCC_OscConfig+0xdb4>)
 800392c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800392e:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003934:	2b01      	cmp	r3, #1
 8003936:	d039      	beq.n	80039ac <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	f003 0203 	and.w	r2, r3, #3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003942:	429a      	cmp	r2, r3
 8003944:	d132      	bne.n	80039ac <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	0a1b      	lsrs	r3, r3, #8
 800394a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003952:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003954:	429a      	cmp	r2, r3
 8003956:	d129      	bne.n	80039ac <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8003962:	429a      	cmp	r2, r3
 8003964:	d122      	bne.n	80039ac <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003970:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003972:	429a      	cmp	r2, r3
 8003974:	d11a      	bne.n	80039ac <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	0a5b      	lsrs	r3, r3, #9
 800397a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003982:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003984:	429a      	cmp	r2, r3
 8003986:	d111      	bne.n	80039ac <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	0c1b      	lsrs	r3, r3, #16
 800398c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003994:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003996:	429a      	cmp	r2, r3
 8003998:	d108      	bne.n	80039ac <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	0e1b      	lsrs	r3, r3, #24
 800399e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d001      	beq.n	80039b0 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e024      	b.n	80039fa <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80039b0:	4b14      	ldr	r3, [pc, #80]	; (8003a04 <HAL_RCC_OscConfig+0xdb4>)
 80039b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b4:	08db      	lsrs	r3, r3, #3
 80039b6:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80039be:	429a      	cmp	r2, r3
 80039c0:	d01a      	beq.n	80039f8 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80039c2:	4b10      	ldr	r3, [pc, #64]	; (8003a04 <HAL_RCC_OscConfig+0xdb4>)
 80039c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c6:	4a0f      	ldr	r2, [pc, #60]	; (8003a04 <HAL_RCC_OscConfig+0xdb4>)
 80039c8:	f023 0310 	bic.w	r3, r3, #16
 80039cc:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ce:	f7fc ffb9 	bl	8000944 <HAL_GetTick>
 80039d2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80039d4:	bf00      	nop
 80039d6:	f7fc ffb5 	bl	8000944 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039de:	4293      	cmp	r3, r2
 80039e0:	d0f9      	beq.n	80039d6 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e6:	4a07      	ldr	r2, [pc, #28]	; (8003a04 <HAL_RCC_OscConfig+0xdb4>)
 80039e8:	00db      	lsls	r3, r3, #3
 80039ea:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80039ec:	4b05      	ldr	r3, [pc, #20]	; (8003a04 <HAL_RCC_OscConfig+0xdb4>)
 80039ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f0:	4a04      	ldr	r2, [pc, #16]	; (8003a04 <HAL_RCC_OscConfig+0xdb4>)
 80039f2:	f043 0310 	orr.w	r3, r3, #16
 80039f6:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3738      	adds	r7, #56	; 0x38
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	46020c00 	.word	0x46020c00

08003a08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e1d9      	b.n	8003dd0 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a1c:	4b9b      	ldr	r3, [pc, #620]	; (8003c8c <HAL_RCC_ClockConfig+0x284>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 030f 	and.w	r3, r3, #15
 8003a24:	683a      	ldr	r2, [r7, #0]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d910      	bls.n	8003a4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a2a:	4b98      	ldr	r3, [pc, #608]	; (8003c8c <HAL_RCC_ClockConfig+0x284>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f023 020f 	bic.w	r2, r3, #15
 8003a32:	4996      	ldr	r1, [pc, #600]	; (8003c8c <HAL_RCC_ClockConfig+0x284>)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a3a:	4b94      	ldr	r3, [pc, #592]	; (8003c8c <HAL_RCC_ClockConfig+0x284>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 030f 	and.w	r3, r3, #15
 8003a42:	683a      	ldr	r2, [r7, #0]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d001      	beq.n	8003a4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e1c1      	b.n	8003dd0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0310 	and.w	r3, r3, #16
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d010      	beq.n	8003a7a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	695a      	ldr	r2, [r3, #20]
 8003a5c:	4b8c      	ldr	r3, [pc, #560]	; (8003c90 <HAL_RCC_ClockConfig+0x288>)
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a60:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d908      	bls.n	8003a7a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8003a68:	4b89      	ldr	r3, [pc, #548]	; (8003c90 <HAL_RCC_ClockConfig+0x288>)
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	4986      	ldr	r1, [pc, #536]	; (8003c90 <HAL_RCC_ClockConfig+0x288>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0308 	and.w	r3, r3, #8
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d012      	beq.n	8003aac <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	691a      	ldr	r2, [r3, #16]
 8003a8a:	4b81      	ldr	r3, [pc, #516]	; (8003c90 <HAL_RCC_ClockConfig+0x288>)
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	091b      	lsrs	r3, r3, #4
 8003a90:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d909      	bls.n	8003aac <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003a98:	4b7d      	ldr	r3, [pc, #500]	; (8003c90 <HAL_RCC_ClockConfig+0x288>)
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	011b      	lsls	r3, r3, #4
 8003aa6:	497a      	ldr	r1, [pc, #488]	; (8003c90 <HAL_RCC_ClockConfig+0x288>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0304 	and.w	r3, r3, #4
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d010      	beq.n	8003ada <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68da      	ldr	r2, [r3, #12]
 8003abc:	4b74      	ldr	r3, [pc, #464]	; (8003c90 <HAL_RCC_ClockConfig+0x288>)
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d908      	bls.n	8003ada <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003ac8:	4b71      	ldr	r3, [pc, #452]	; (8003c90 <HAL_RCC_ClockConfig+0x288>)
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	496e      	ldr	r1, [pc, #440]	; (8003c90 <HAL_RCC_ClockConfig+0x288>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d010      	beq.n	8003b08 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689a      	ldr	r2, [r3, #8]
 8003aea:	4b69      	ldr	r3, [pc, #420]	; (8003c90 <HAL_RCC_ClockConfig+0x288>)
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	f003 030f 	and.w	r3, r3, #15
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d908      	bls.n	8003b08 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8003af6:	4b66      	ldr	r3, [pc, #408]	; (8003c90 <HAL_RCC_ClockConfig+0x288>)
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	f023 020f 	bic.w	r2, r3, #15
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	4963      	ldr	r1, [pc, #396]	; (8003c90 <HAL_RCC_ClockConfig+0x288>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f000 80d2 	beq.w	8003cba <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8003b16:	2300      	movs	r3, #0
 8003b18:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	2b03      	cmp	r3, #3
 8003b20:	d143      	bne.n	8003baa <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b22:	4b5b      	ldr	r3, [pc, #364]	; (8003c90 <HAL_RCC_ClockConfig+0x288>)
 8003b24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d110      	bne.n	8003b52 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003b30:	4b57      	ldr	r3, [pc, #348]	; (8003c90 <HAL_RCC_ClockConfig+0x288>)
 8003b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b36:	4a56      	ldr	r2, [pc, #344]	; (8003c90 <HAL_RCC_ClockConfig+0x288>)
 8003b38:	f043 0304 	orr.w	r3, r3, #4
 8003b3c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003b40:	4b53      	ldr	r3, [pc, #332]	; (8003c90 <HAL_RCC_ClockConfig+0x288>)
 8003b42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b46:	f003 0304 	and.w	r3, r3, #4
 8003b4a:	60bb      	str	r3, [r7, #8]
 8003b4c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8003b52:	f7fc fef7 	bl	8000944 <HAL_GetTick>
 8003b56:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8003b58:	4b4e      	ldr	r3, [pc, #312]	; (8003c94 <HAL_RCC_ClockConfig+0x28c>)
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00f      	beq.n	8003b84 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003b64:	e008      	b.n	8003b78 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8003b66:	f7fc feed 	bl	8000944 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d901      	bls.n	8003b78 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e12b      	b.n	8003dd0 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003b78:	4b46      	ldr	r3, [pc, #280]	; (8003c94 <HAL_RCC_ClockConfig+0x28c>)
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d0f0      	beq.n	8003b66 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003b84:	7dfb      	ldrb	r3, [r7, #23]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d107      	bne.n	8003b9a <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003b8a:	4b41      	ldr	r3, [pc, #260]	; (8003c90 <HAL_RCC_ClockConfig+0x288>)
 8003b8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b90:	4a3f      	ldr	r2, [pc, #252]	; (8003c90 <HAL_RCC_ClockConfig+0x288>)
 8003b92:	f023 0304 	bic.w	r3, r3, #4
 8003b96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003b9a:	4b3d      	ldr	r3, [pc, #244]	; (8003c90 <HAL_RCC_ClockConfig+0x288>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d121      	bne.n	8003bea <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e112      	b.n	8003dd0 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d107      	bne.n	8003bc2 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bb2:	4b37      	ldr	r3, [pc, #220]	; (8003c90 <HAL_RCC_ClockConfig+0x288>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d115      	bne.n	8003bea <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e106      	b.n	8003dd0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d107      	bne.n	8003bda <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003bca:	4b31      	ldr	r3, [pc, #196]	; (8003c90 <HAL_RCC_ClockConfig+0x288>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0304 	and.w	r3, r3, #4
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d109      	bne.n	8003bea <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e0fa      	b.n	8003dd0 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bda:	4b2d      	ldr	r3, [pc, #180]	; (8003c90 <HAL_RCC_ClockConfig+0x288>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e0f2      	b.n	8003dd0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8003bea:	4b29      	ldr	r3, [pc, #164]	; (8003c90 <HAL_RCC_ClockConfig+0x288>)
 8003bec:	69db      	ldr	r3, [r3, #28]
 8003bee:	f023 0203 	bic.w	r2, r3, #3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	4926      	ldr	r1, [pc, #152]	; (8003c90 <HAL_RCC_ClockConfig+0x288>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8003bfc:	f7fc fea2 	bl	8000944 <HAL_GetTick>
 8003c00:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	2b03      	cmp	r3, #3
 8003c08:	d112      	bne.n	8003c30 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c0a:	e00a      	b.n	8003c22 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c0c:	f7fc fe9a 	bl	8000944 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e0d6      	b.n	8003dd0 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c22:	4b1b      	ldr	r3, [pc, #108]	; (8003c90 <HAL_RCC_ClockConfig+0x288>)
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	f003 030c 	and.w	r3, r3, #12
 8003c2a:	2b0c      	cmp	r3, #12
 8003c2c:	d1ee      	bne.n	8003c0c <HAL_RCC_ClockConfig+0x204>
 8003c2e:	e044      	b.n	8003cba <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d112      	bne.n	8003c5e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c38:	e00a      	b.n	8003c50 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c3a:	f7fc fe83 	bl	8000944 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d901      	bls.n	8003c50 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e0bf      	b.n	8003dd0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c50:	4b0f      	ldr	r3, [pc, #60]	; (8003c90 <HAL_RCC_ClockConfig+0x288>)
 8003c52:	69db      	ldr	r3, [r3, #28]
 8003c54:	f003 030c 	and.w	r3, r3, #12
 8003c58:	2b08      	cmp	r3, #8
 8003c5a:	d1ee      	bne.n	8003c3a <HAL_RCC_ClockConfig+0x232>
 8003c5c:	e02d      	b.n	8003cba <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d123      	bne.n	8003cae <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003c66:	e00a      	b.n	8003c7e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c68:	f7fc fe6c 	bl	8000944 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e0a8      	b.n	8003dd0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003c7e:	4b04      	ldr	r3, [pc, #16]	; (8003c90 <HAL_RCC_ClockConfig+0x288>)
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	f003 030c 	and.w	r3, r3, #12
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1ee      	bne.n	8003c68 <HAL_RCC_ClockConfig+0x260>
 8003c8a:	e016      	b.n	8003cba <HAL_RCC_ClockConfig+0x2b2>
 8003c8c:	40022000 	.word	0x40022000
 8003c90:	46020c00 	.word	0x46020c00
 8003c94:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c98:	f7fc fe54 	bl	8000944 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e090      	b.n	8003dd0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cae:	4b4a      	ldr	r3, [pc, #296]	; (8003dd8 <HAL_RCC_ClockConfig+0x3d0>)
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	f003 030c 	and.w	r3, r3, #12
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	d1ee      	bne.n	8003c98 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d010      	beq.n	8003ce8 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	689a      	ldr	r2, [r3, #8]
 8003cca:	4b43      	ldr	r3, [pc, #268]	; (8003dd8 <HAL_RCC_ClockConfig+0x3d0>)
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	f003 030f 	and.w	r3, r3, #15
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d208      	bcs.n	8003ce8 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8003cd6:	4b40      	ldr	r3, [pc, #256]	; (8003dd8 <HAL_RCC_ClockConfig+0x3d0>)
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	f023 020f 	bic.w	r2, r3, #15
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	493d      	ldr	r1, [pc, #244]	; (8003dd8 <HAL_RCC_ClockConfig+0x3d0>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ce8:	4b3c      	ldr	r3, [pc, #240]	; (8003ddc <HAL_RCC_ClockConfig+0x3d4>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 030f 	and.w	r3, r3, #15
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d210      	bcs.n	8003d18 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cf6:	4b39      	ldr	r3, [pc, #228]	; (8003ddc <HAL_RCC_ClockConfig+0x3d4>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f023 020f 	bic.w	r2, r3, #15
 8003cfe:	4937      	ldr	r1, [pc, #220]	; (8003ddc <HAL_RCC_ClockConfig+0x3d4>)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d06:	4b35      	ldr	r3, [pc, #212]	; (8003ddc <HAL_RCC_ClockConfig+0x3d4>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 030f 	and.w	r3, r3, #15
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d001      	beq.n	8003d18 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e05b      	b.n	8003dd0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0304 	and.w	r3, r3, #4
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d010      	beq.n	8003d46 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	68da      	ldr	r2, [r3, #12]
 8003d28:	4b2b      	ldr	r3, [pc, #172]	; (8003dd8 <HAL_RCC_ClockConfig+0x3d0>)
 8003d2a:	6a1b      	ldr	r3, [r3, #32]
 8003d2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d208      	bcs.n	8003d46 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003d34:	4b28      	ldr	r3, [pc, #160]	; (8003dd8 <HAL_RCC_ClockConfig+0x3d0>)
 8003d36:	6a1b      	ldr	r3, [r3, #32]
 8003d38:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	4925      	ldr	r1, [pc, #148]	; (8003dd8 <HAL_RCC_ClockConfig+0x3d0>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0308 	and.w	r3, r3, #8
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d012      	beq.n	8003d78 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	691a      	ldr	r2, [r3, #16]
 8003d56:	4b20      	ldr	r3, [pc, #128]	; (8003dd8 <HAL_RCC_ClockConfig+0x3d0>)
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	091b      	lsrs	r3, r3, #4
 8003d5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d209      	bcs.n	8003d78 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003d64:	4b1c      	ldr	r3, [pc, #112]	; (8003dd8 <HAL_RCC_ClockConfig+0x3d0>)
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	011b      	lsls	r3, r3, #4
 8003d72:	4919      	ldr	r1, [pc, #100]	; (8003dd8 <HAL_RCC_ClockConfig+0x3d0>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0310 	and.w	r3, r3, #16
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d010      	beq.n	8003da6 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	695a      	ldr	r2, [r3, #20]
 8003d88:	4b13      	ldr	r3, [pc, #76]	; (8003dd8 <HAL_RCC_ClockConfig+0x3d0>)
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d208      	bcs.n	8003da6 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8003d94:	4b10      	ldr	r3, [pc, #64]	; (8003dd8 <HAL_RCC_ClockConfig+0x3d0>)
 8003d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d98:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	490d      	ldr	r1, [pc, #52]	; (8003dd8 <HAL_RCC_ClockConfig+0x3d0>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003da6:	f000 f821 	bl	8003dec <HAL_RCC_GetSysClockFreq>
 8003daa:	4602      	mov	r2, r0
 8003dac:	4b0a      	ldr	r3, [pc, #40]	; (8003dd8 <HAL_RCC_ClockConfig+0x3d0>)
 8003dae:	6a1b      	ldr	r3, [r3, #32]
 8003db0:	f003 030f 	and.w	r3, r3, #15
 8003db4:	490a      	ldr	r1, [pc, #40]	; (8003de0 <HAL_RCC_ClockConfig+0x3d8>)
 8003db6:	5ccb      	ldrb	r3, [r1, r3]
 8003db8:	fa22 f303 	lsr.w	r3, r2, r3
 8003dbc:	4a09      	ldr	r2, [pc, #36]	; (8003de4 <HAL_RCC_ClockConfig+0x3dc>)
 8003dbe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003dc0:	4b09      	ldr	r3, [pc, #36]	; (8003de8 <HAL_RCC_ClockConfig+0x3e0>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7fc fd73 	bl	80008b0 <HAL_InitTick>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	73fb      	strb	r3, [r7, #15]

  return status;
 8003dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3718      	adds	r7, #24
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	46020c00 	.word	0x46020c00
 8003ddc:	40022000 	.word	0x40022000
 8003de0:	0800510c 	.word	0x0800510c
 8003de4:	200000a8 	.word	0x200000a8
 8003de8:	200000ac 	.word	0x200000ac

08003dec <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b08b      	sub	sp, #44	; 0x2c
 8003df0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003df2:	2300      	movs	r3, #0
 8003df4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8003df6:	2300      	movs	r3, #0
 8003df8:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dfa:	4b78      	ldr	r3, [pc, #480]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003dfc:	69db      	ldr	r3, [r3, #28]
 8003dfe:	f003 030c 	and.w	r3, r3, #12
 8003e02:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e04:	4b75      	ldr	r3, [pc, #468]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e08:	f003 0303 	and.w	r3, r3, #3
 8003e0c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d005      	beq.n	8003e20 <HAL_RCC_GetSysClockFreq+0x34>
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	2b0c      	cmp	r3, #12
 8003e18:	d121      	bne.n	8003e5e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d11e      	bne.n	8003e5e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8003e20:	4b6e      	ldr	r3, [pc, #440]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d107      	bne.n	8003e3c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8003e2c:	4b6b      	ldr	r3, [pc, #428]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003e2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e32:	0b1b      	lsrs	r3, r3, #12
 8003e34:	f003 030f 	and.w	r3, r3, #15
 8003e38:	627b      	str	r3, [r7, #36]	; 0x24
 8003e3a:	e005      	b.n	8003e48 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8003e3c:	4b67      	ldr	r3, [pc, #412]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	0f1b      	lsrs	r3, r3, #28
 8003e42:	f003 030f 	and.w	r3, r3, #15
 8003e46:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e48:	4a65      	ldr	r2, [pc, #404]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e50:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d110      	bne.n	8003e7a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003e5c:	e00d      	b.n	8003e7a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e5e:	4b5f      	ldr	r3, [pc, #380]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003e60:	69db      	ldr	r3, [r3, #28]
 8003e62:	f003 030c 	and.w	r3, r3, #12
 8003e66:	2b04      	cmp	r3, #4
 8003e68:	d102      	bne.n	8003e70 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e6a:	4b5e      	ldr	r3, [pc, #376]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003e6c:	623b      	str	r3, [r7, #32]
 8003e6e:	e004      	b.n	8003e7a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	2b08      	cmp	r3, #8
 8003e74:	d101      	bne.n	8003e7a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e76:	4b5b      	ldr	r3, [pc, #364]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003e78:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	2b0c      	cmp	r3, #12
 8003e7e:	f040 80a5 	bne.w	8003fcc <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003e82:	4b56      	ldr	r3, [pc, #344]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e86:	f003 0303 	and.w	r3, r3, #3
 8003e8a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003e8c:	4b53      	ldr	r3, [pc, #332]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e90:	0a1b      	lsrs	r3, r3, #8
 8003e92:	f003 030f 	and.w	r3, r3, #15
 8003e96:	3301      	adds	r3, #1
 8003e98:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003e9a:	4b50      	ldr	r3, [pc, #320]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9e:	091b      	lsrs	r3, r3, #4
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003ea6:	4b4d      	ldr	r3, [pc, #308]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eaa:	08db      	lsrs	r3, r3, #3
 8003eac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003eb0:	68ba      	ldr	r2, [r7, #8]
 8003eb2:	fb02 f303 	mul.w	r3, r2, r3
 8003eb6:	ee07 3a90 	vmov	s15, r3
 8003eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ebe:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d003      	beq.n	8003ed0 <HAL_RCC_GetSysClockFreq+0xe4>
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	2b03      	cmp	r3, #3
 8003ecc:	d022      	beq.n	8003f14 <HAL_RCC_GetSysClockFreq+0x128>
 8003ece:	e043      	b.n	8003f58 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	ee07 3a90 	vmov	s15, r3
 8003ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eda:	eddf 6a43 	vldr	s13, [pc, #268]	; 8003fe8 <HAL_RCC_GetSysClockFreq+0x1fc>
 8003ede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ee2:	4b3e      	ldr	r3, [pc, #248]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eea:	ee07 3a90 	vmov	s15, r3
 8003eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003ef2:	ed97 6a01 	vldr	s12, [r7, #4]
 8003ef6:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8003fec <HAL_RCC_GetSysClockFreq+0x200>
 8003efa:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003efe:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003f02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f06:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f12:	e046      	b.n	8003fa2 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	ee07 3a90 	vmov	s15, r3
 8003f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f1e:	eddf 6a32 	vldr	s13, [pc, #200]	; 8003fe8 <HAL_RCC_GetSysClockFreq+0x1fc>
 8003f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f26:	4b2d      	ldr	r3, [pc, #180]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f2e:	ee07 3a90 	vmov	s15, r3
 8003f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003f36:	ed97 6a01 	vldr	s12, [r7, #4]
 8003f3a:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8003fec <HAL_RCC_GetSysClockFreq+0x200>
 8003f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003f46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f56:	e024      	b.n	8003fa2 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5a:	ee07 3a90 	vmov	s15, r3
 8003f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	ee07 3a90 	vmov	s15, r3
 8003f68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f70:	4b1a      	ldr	r3, [pc, #104]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f78:	ee07 3a90 	vmov	s15, r3
 8003f7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003f80:	ed97 6a01 	vldr	s12, [r7, #4]
 8003f84:	eddf 5a19 	vldr	s11, [pc, #100]	; 8003fec <HAL_RCC_GetSysClockFreq+0x200>
 8003f88:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003f90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f94:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f9c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fa0:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8003fa2:	4b0e      	ldr	r3, [pc, #56]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa6:	0e1b      	lsrs	r3, r3, #24
 8003fa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fac:	3301      	adds	r3, #1
 8003fae:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	ee07 3a90 	vmov	s15, r3
 8003fb6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003fba:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fc6:	ee17 3a90 	vmov	r3, s15
 8003fca:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8003fcc:	6a3b      	ldr	r3, [r7, #32]
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	372c      	adds	r7, #44	; 0x2c
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	46020c00 	.word	0x46020c00
 8003fe0:	0800511c 	.word	0x0800511c
 8003fe4:	00f42400 	.word	0x00f42400
 8003fe8:	4b742400 	.word	0x4b742400
 8003fec:	46000000 	.word	0x46000000

08003ff0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003ff4:	f7ff fefa 	bl	8003dec <HAL_RCC_GetSysClockFreq>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	4b07      	ldr	r3, [pc, #28]	; (8004018 <HAL_RCC_GetHCLKFreq+0x28>)
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	f003 030f 	and.w	r3, r3, #15
 8004002:	4906      	ldr	r1, [pc, #24]	; (800401c <HAL_RCC_GetHCLKFreq+0x2c>)
 8004004:	5ccb      	ldrb	r3, [r1, r3]
 8004006:	fa22 f303 	lsr.w	r3, r2, r3
 800400a:	4a05      	ldr	r2, [pc, #20]	; (8004020 <HAL_RCC_GetHCLKFreq+0x30>)
 800400c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800400e:	4b04      	ldr	r3, [pc, #16]	; (8004020 <HAL_RCC_GetHCLKFreq+0x30>)
 8004010:	681b      	ldr	r3, [r3, #0]
}
 8004012:	4618      	mov	r0, r3
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	46020c00 	.word	0x46020c00
 800401c:	0800510c 	.word	0x0800510c
 8004020:	200000a8 	.word	0x200000a8

08004024 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b086      	sub	sp, #24
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800402c:	4b3e      	ldr	r3, [pc, #248]	; (8004128 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800402e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004032:	f003 0304 	and.w	r3, r3, #4
 8004036:	2b00      	cmp	r3, #0
 8004038:	d003      	beq.n	8004042 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800403a:	f7fe fd9b 	bl	8002b74 <HAL_PWREx_GetVoltageRange>
 800403e:	6178      	str	r0, [r7, #20]
 8004040:	e019      	b.n	8004076 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004042:	4b39      	ldr	r3, [pc, #228]	; (8004128 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004044:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004048:	4a37      	ldr	r2, [pc, #220]	; (8004128 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800404a:	f043 0304 	orr.w	r3, r3, #4
 800404e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004052:	4b35      	ldr	r3, [pc, #212]	; (8004128 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004054:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	60fb      	str	r3, [r7, #12]
 800405e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004060:	f7fe fd88 	bl	8002b74 <HAL_PWREx_GetVoltageRange>
 8004064:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004066:	4b30      	ldr	r3, [pc, #192]	; (8004128 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004068:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800406c:	4a2e      	ldr	r2, [pc, #184]	; (8004128 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800406e:	f023 0304 	bic.w	r3, r3, #4
 8004072:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800407c:	d003      	beq.n	8004086 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004084:	d109      	bne.n	800409a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800408c:	d202      	bcs.n	8004094 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800408e:	2301      	movs	r3, #1
 8004090:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004092:	e033      	b.n	80040fc <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8004094:	2300      	movs	r3, #0
 8004096:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004098:	e030      	b.n	80040fc <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040a0:	d208      	bcs.n	80040b4 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040a8:	d102      	bne.n	80040b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80040aa:	2303      	movs	r3, #3
 80040ac:	613b      	str	r3, [r7, #16]
 80040ae:	e025      	b.n	80040fc <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e035      	b.n	8004120 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040ba:	d90f      	bls.n	80040dc <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d109      	bne.n	80040d6 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80040c8:	d902      	bls.n	80040d0 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80040ca:	2300      	movs	r3, #0
 80040cc:	613b      	str	r3, [r7, #16]
 80040ce:	e015      	b.n	80040fc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80040d0:	2301      	movs	r3, #1
 80040d2:	613b      	str	r3, [r7, #16]
 80040d4:	e012      	b.n	80040fc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80040d6:	2300      	movs	r3, #0
 80040d8:	613b      	str	r3, [r7, #16]
 80040da:	e00f      	b.n	80040fc <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040e2:	d109      	bne.n	80040f8 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ea:	d102      	bne.n	80040f2 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80040ec:	2301      	movs	r3, #1
 80040ee:	613b      	str	r3, [r7, #16]
 80040f0:	e004      	b.n	80040fc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80040f2:	2302      	movs	r3, #2
 80040f4:	613b      	str	r3, [r7, #16]
 80040f6:	e001      	b.n	80040fc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80040f8:	2301      	movs	r3, #1
 80040fa:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80040fc:	4b0b      	ldr	r3, [pc, #44]	; (800412c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f023 020f 	bic.w	r2, r3, #15
 8004104:	4909      	ldr	r1, [pc, #36]	; (800412c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	4313      	orrs	r3, r2
 800410a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800410c:	4b07      	ldr	r3, [pc, #28]	; (800412c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 030f 	and.w	r3, r3, #15
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	429a      	cmp	r2, r3
 8004118:	d001      	beq.n	800411e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e000      	b.n	8004120 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3718      	adds	r7, #24
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	46020c00 	.word	0x46020c00
 800412c:	40022000 	.word	0x40022000

08004130 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004130:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004134:	b0ba      	sub	sp, #232	; 0xe8
 8004136:	af00      	add	r7, sp, #0
 8004138:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800413c:	2300      	movs	r3, #0
 800413e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004142:	2300      	movs	r3, #0
 8004144:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004148:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800414c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004150:	f002 0401 	and.w	r4, r2, #1
 8004154:	2500      	movs	r5, #0
 8004156:	ea54 0305 	orrs.w	r3, r4, r5
 800415a:	d00b      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800415c:	4bcb      	ldr	r3, [pc, #812]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800415e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004162:	f023 0103 	bic.w	r1, r3, #3
 8004166:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800416a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800416c:	4ac7      	ldr	r2, [pc, #796]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800416e:	430b      	orrs	r3, r1
 8004170:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004174:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417c:	f002 0802 	and.w	r8, r2, #2
 8004180:	f04f 0900 	mov.w	r9, #0
 8004184:	ea58 0309 	orrs.w	r3, r8, r9
 8004188:	d00b      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800418a:	4bc0      	ldr	r3, [pc, #768]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800418c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004190:	f023 010c 	bic.w	r1, r3, #12
 8004194:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419a:	4abc      	ldr	r2, [pc, #752]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800419c:	430b      	orrs	r3, r1
 800419e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80041a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041aa:	f002 0a04 	and.w	sl, r2, #4
 80041ae:	f04f 0b00 	mov.w	fp, #0
 80041b2:	ea5a 030b 	orrs.w	r3, sl, fp
 80041b6:	d00b      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80041b8:	4bb4      	ldr	r3, [pc, #720]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041be:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80041c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80041c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c8:	4ab0      	ldr	r2, [pc, #704]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041ca:	430b      	orrs	r3, r1
 80041cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80041d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d8:	f002 0308 	and.w	r3, r2, #8
 80041dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041e0:	2300      	movs	r3, #0
 80041e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80041e6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80041ea:	460b      	mov	r3, r1
 80041ec:	4313      	orrs	r3, r2
 80041ee:	d00b      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80041f0:	4ba6      	ldr	r3, [pc, #664]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80041fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80041fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004200:	4aa2      	ldr	r2, [pc, #648]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004202:	430b      	orrs	r3, r1
 8004204:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004208:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800420c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004210:	f002 0310 	and.w	r3, r2, #16
 8004214:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004218:	2300      	movs	r3, #0
 800421a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800421e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004222:	460b      	mov	r3, r1
 8004224:	4313      	orrs	r3, r2
 8004226:	d00b      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004228:	4b98      	ldr	r3, [pc, #608]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800422a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800422e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004232:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004238:	4a94      	ldr	r2, [pc, #592]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800423a:	430b      	orrs	r3, r1
 800423c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004240:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004248:	f002 0320 	and.w	r3, r2, #32
 800424c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004250:	2300      	movs	r3, #0
 8004252:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004256:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800425a:	460b      	mov	r3, r1
 800425c:	4313      	orrs	r3, r2
 800425e:	d00b      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004260:	4b8a      	ldr	r3, [pc, #552]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004262:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004266:	f023 0107 	bic.w	r1, r3, #7
 800426a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800426e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004270:	4a86      	ldr	r2, [pc, #536]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004272:	430b      	orrs	r3, r1
 8004274:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004278:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800427c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004280:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004284:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004288:	2300      	movs	r3, #0
 800428a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800428e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004292:	460b      	mov	r3, r1
 8004294:	4313      	orrs	r3, r2
 8004296:	d00b      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004298:	4b7c      	ldr	r3, [pc, #496]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800429a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800429e:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 80042a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80042a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042a8:	4a78      	ldr	r2, [pc, #480]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042aa:	430b      	orrs	r3, r1
 80042ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80042b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80042bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80042c0:	2300      	movs	r3, #0
 80042c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80042c6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80042ca:	460b      	mov	r3, r1
 80042cc:	4313      	orrs	r3, r2
 80042ce:	d00b      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80042d0:	4b6e      	ldr	r3, [pc, #440]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80042de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042e0:	4a6a      	ldr	r2, [pc, #424]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042e2:	430b      	orrs	r3, r1
 80042e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80042ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f0:	f402 7380 	and.w	r3, r2, #256	; 0x100
 80042f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80042f8:	2300      	movs	r3, #0
 80042fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80042fe:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004302:	460b      	mov	r3, r1
 8004304:	4313      	orrs	r3, r2
 8004306:	d00b      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004308:	4b60      	ldr	r3, [pc, #384]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800430a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800430e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004312:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004318:	4a5c      	ldr	r2, [pc, #368]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800431a:	430b      	orrs	r3, r1
 800431c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004320:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004328:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800432c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004330:	2300      	movs	r3, #0
 8004332:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004336:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800433a:	460b      	mov	r3, r1
 800433c:	4313      	orrs	r3, r2
 800433e:	d00b      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004340:	4b52      	ldr	r3, [pc, #328]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004346:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 800434a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800434e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004350:	4a4e      	ldr	r2, [pc, #312]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004352:	430b      	orrs	r3, r1
 8004354:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004358:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800435c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004360:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8004364:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004368:	2300      	movs	r3, #0
 800436a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800436e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004372:	460b      	mov	r3, r1
 8004374:	4313      	orrs	r3, r2
 8004376:	d00b      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004378:	4b44      	ldr	r3, [pc, #272]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800437a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800437e:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8004382:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004386:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004388:	4a40      	ldr	r2, [pc, #256]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800438a:	430b      	orrs	r3, r1
 800438c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004390:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004398:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800439c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80043a0:	2300      	movs	r3, #0
 80043a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80043a6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80043aa:	460b      	mov	r3, r1
 80043ac:	4313      	orrs	r3, r2
 80043ae:	d00b      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80043b0:	4b36      	ldr	r3, [pc, #216]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043b6:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 80043ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043c0:	4a32      	ldr	r2, [pc, #200]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043c2:	430b      	orrs	r3, r1
 80043c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80043c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d0:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80043d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80043d8:	2300      	movs	r3, #0
 80043da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80043de:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80043e2:	460b      	mov	r3, r1
 80043e4:	4313      	orrs	r3, r2
 80043e6:	d00c      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80043e8:	4b28      	ldr	r3, [pc, #160]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80043ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80043f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043fa:	4a24      	ldr	r2, [pc, #144]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043fc:	430b      	orrs	r3, r1
 80043fe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004402:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800440a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800440e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004410:	2300      	movs	r3, #0
 8004412:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004414:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004418:	460b      	mov	r3, r1
 800441a:	4313      	orrs	r3, r2
 800441c:	d04f      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800441e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004426:	2b80      	cmp	r3, #128	; 0x80
 8004428:	d02d      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800442a:	2b80      	cmp	r3, #128	; 0x80
 800442c:	d827      	bhi.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800442e:	2b60      	cmp	r3, #96	; 0x60
 8004430:	d02e      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004432:	2b60      	cmp	r3, #96	; 0x60
 8004434:	d823      	bhi.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004436:	2b40      	cmp	r3, #64	; 0x40
 8004438:	d006      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800443a:	2b40      	cmp	r3, #64	; 0x40
 800443c:	d81f      	bhi.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800443e:	2b00      	cmp	r3, #0
 8004440:	d009      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8004442:	2b20      	cmp	r3, #32
 8004444:	d011      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8004446:	e01a      	b.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004448:	4b10      	ldr	r3, [pc, #64]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800444a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444c:	4a0f      	ldr	r2, [pc, #60]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800444e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004452:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004454:	e01d      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004456:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800445a:	3308      	adds	r3, #8
 800445c:	4618      	mov	r0, r3
 800445e:	f000 fc27 	bl	8004cb0 <RCCEx_PLL2_Config>
 8004462:	4603      	mov	r3, r0
 8004464:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004468:	e013      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800446a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800446e:	332c      	adds	r3, #44	; 0x2c
 8004470:	4618      	mov	r0, r3
 8004472:	f000 fcb5 	bl	8004de0 <RCCEx_PLL3_Config>
 8004476:	4603      	mov	r3, r0
 8004478:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800447c:	e009      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004484:	e005      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8004486:	bf00      	nop
 8004488:	e003      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800448a:	bf00      	nop
 800448c:	46020c00 	.word	0x46020c00
        break;
 8004490:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004492:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10d      	bne.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800449a:	4bb6      	ldr	r3, [pc, #728]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800449c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80044a0:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 80044a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ac:	4ab1      	ldr	r2, [pc, #708]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80044ae:	430b      	orrs	r3, r1
 80044b0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80044b4:	e003      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80044ba:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80044be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80044ca:	673b      	str	r3, [r7, #112]	; 0x70
 80044cc:	2300      	movs	r3, #0
 80044ce:	677b      	str	r3, [r7, #116]	; 0x74
 80044d0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80044d4:	460b      	mov	r3, r1
 80044d6:	4313      	orrs	r3, r2
 80044d8:	d053      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80044da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044e6:	d033      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80044e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044ec:	d82c      	bhi.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80044ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044f2:	d02f      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x424>
 80044f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044f8:	d826      	bhi.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80044fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044fe:	d008      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8004500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004504:	d820      	bhi.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00a      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 800450a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800450e:	d011      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004510:	e01a      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004512:	4b98      	ldr	r3, [pc, #608]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004516:	4a97      	ldr	r2, [pc, #604]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800451c:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800451e:	e01a      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004520:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004524:	3308      	adds	r3, #8
 8004526:	4618      	mov	r0, r3
 8004528:	f000 fbc2 	bl	8004cb0 <RCCEx_PLL2_Config>
 800452c:	4603      	mov	r3, r0
 800452e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004532:	e010      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004534:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004538:	332c      	adds	r3, #44	; 0x2c
 800453a:	4618      	mov	r0, r3
 800453c:	f000 fc50 	bl	8004de0 <RCCEx_PLL3_Config>
 8004540:	4603      	mov	r3, r0
 8004542:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004546:	e006      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800454e:	e002      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8004550:	bf00      	nop
 8004552:	e000      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8004554:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004556:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10d      	bne.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800455e:	4b85      	ldr	r3, [pc, #532]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004560:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004564:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004568:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800456c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004570:	4a80      	ldr	r2, [pc, #512]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004572:	430b      	orrs	r3, r1
 8004574:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004578:	e003      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800457a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800457e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004582:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800458a:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800458e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004590:	2300      	movs	r3, #0
 8004592:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004594:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004598:	460b      	mov	r3, r1
 800459a:	4313      	orrs	r3, r2
 800459c:	d046      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800459e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80045a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80045a6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80045aa:	d028      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80045ac:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80045b0:	d821      	bhi.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80045b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045b6:	d022      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80045b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045bc:	d81b      	bhi.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80045be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80045c2:	d01c      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80045c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80045c8:	d815      	bhi.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80045ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045ce:	d008      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80045d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045d4:	d80f      	bhi.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d011      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80045da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045de:	d00e      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80045e0:	e009      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80045e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80045e6:	3308      	adds	r3, #8
 80045e8:	4618      	mov	r0, r3
 80045ea:	f000 fb61 	bl	8004cb0 <RCCEx_PLL2_Config>
 80045ee:	4603      	mov	r3, r0
 80045f0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80045f4:	e004      	b.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80045fc:	e000      	b.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 80045fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004600:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10d      	bne.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004608:	4b5a      	ldr	r3, [pc, #360]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800460a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800460e:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004612:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004616:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800461a:	4a56      	ldr	r2, [pc, #344]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800461c:	430b      	orrs	r3, r1
 800461e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004622:	e003      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004624:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004628:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800462c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004634:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004638:	663b      	str	r3, [r7, #96]	; 0x60
 800463a:	2300      	movs	r3, #0
 800463c:	667b      	str	r3, [r7, #100]	; 0x64
 800463e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004642:	460b      	mov	r3, r1
 8004644:	4313      	orrs	r3, r2
 8004646:	d03f      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8004648:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800464c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004650:	2b04      	cmp	r3, #4
 8004652:	d81e      	bhi.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x562>
 8004654:	a201      	add	r2, pc, #4	; (adr r2, 800465c <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8004656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800465a:	bf00      	nop
 800465c:	0800469b 	.word	0x0800469b
 8004660:	08004671 	.word	0x08004671
 8004664:	0800467f 	.word	0x0800467f
 8004668:	0800469b 	.word	0x0800469b
 800466c:	0800469b 	.word	0x0800469b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004670:	4b40      	ldr	r3, [pc, #256]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004674:	4a3f      	ldr	r2, [pc, #252]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800467a:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800467c:	e00e      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800467e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004682:	332c      	adds	r3, #44	; 0x2c
 8004684:	4618      	mov	r0, r3
 8004686:	f000 fbab 	bl	8004de0 <RCCEx_PLL3_Config>
 800468a:	4603      	mov	r3, r0
 800468c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004690:	e004      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004698:	e000      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 800469a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800469c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d10d      	bne.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80046a4:	4b33      	ldr	r3, [pc, #204]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80046a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80046aa:	f023 0107 	bic.w	r1, r3, #7
 80046ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b6:	4a2f      	ldr	r2, [pc, #188]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80046b8:	430b      	orrs	r3, r1
 80046ba:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80046be:	e003      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80046c4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80046c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d0:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80046d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80046d6:	2300      	movs	r3, #0
 80046d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046da:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80046de:	460b      	mov	r3, r1
 80046e0:	4313      	orrs	r3, r2
 80046e2:	d04d      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80046e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80046f0:	d028      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x614>
 80046f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80046f6:	d821      	bhi.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80046f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80046fc:	d024      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x618>
 80046fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004702:	d81b      	bhi.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8004704:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004708:	d00e      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 800470a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800470e:	d815      	bhi.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8004710:	2b00      	cmp	r3, #0
 8004712:	d01b      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8004714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004718:	d110      	bne.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800471a:	4b16      	ldr	r3, [pc, #88]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800471c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471e:	4a15      	ldr	r2, [pc, #84]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004724:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8004726:	e012      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004728:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800472c:	332c      	adds	r3, #44	; 0x2c
 800472e:	4618      	mov	r0, r3
 8004730:	f000 fb56 	bl	8004de0 <RCCEx_PLL3_Config>
 8004734:	4603      	mov	r3, r0
 8004736:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800473a:	e008      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004742:	e004      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8004744:	bf00      	nop
 8004746:	e002      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8004748:	bf00      	nop
 800474a:	e000      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800474c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800474e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d110      	bne.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8004756:	4b07      	ldr	r3, [pc, #28]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004758:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800475c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004760:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004764:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004768:	4a02      	ldr	r2, [pc, #8]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800476a:	430b      	orrs	r3, r1
 800476c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004770:	e006      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8004772:	bf00      	nop
 8004774:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004778:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800477c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004780:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004788:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800478c:	653b      	str	r3, [r7, #80]	; 0x50
 800478e:	2300      	movs	r3, #0
 8004790:	657b      	str	r3, [r7, #84]	; 0x54
 8004792:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004796:	460b      	mov	r3, r1
 8004798:	4313      	orrs	r3, r2
 800479a:	f000 80b5 	beq.w	8004908 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800479e:	2300      	movs	r3, #0
 80047a0:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047a4:	4b9d      	ldr	r3, [pc, #628]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80047a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047aa:	f003 0304 	and.w	r3, r3, #4
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d113      	bne.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047b2:	4b9a      	ldr	r3, [pc, #616]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80047b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047b8:	4a98      	ldr	r2, [pc, #608]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80047ba:	f043 0304 	orr.w	r3, r3, #4
 80047be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80047c2:	4b96      	ldr	r3, [pc, #600]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80047c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047c8:	f003 0304 	and.w	r3, r3, #4
 80047cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80047d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 80047d4:	2301      	movs	r3, #1
 80047d6:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80047da:	4b91      	ldr	r3, [pc, #580]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80047dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047de:	4a90      	ldr	r2, [pc, #576]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80047e0:	f043 0301 	orr.w	r3, r3, #1
 80047e4:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047e6:	f7fc f8ad 	bl	8000944 <HAL_GetTick>
 80047ea:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80047ee:	e00b      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047f0:	f7fc f8a8 	bl	8000944 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d903      	bls.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004806:	e005      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004808:	4b85      	ldr	r3, [pc, #532]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800480a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480c:	f003 0301 	and.w	r3, r3, #1
 8004810:	2b00      	cmp	r3, #0
 8004812:	d0ed      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8004814:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004818:	2b00      	cmp	r3, #0
 800481a:	d165      	bne.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800481c:	4b7f      	ldr	r3, [pc, #508]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800481e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004826:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800482a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800482e:	2b00      	cmp	r3, #0
 8004830:	d023      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8004832:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004836:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800483a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800483e:	4293      	cmp	r3, r2
 8004840:	d01b      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004842:	4b76      	ldr	r3, [pc, #472]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004844:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004848:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800484c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004850:	4b72      	ldr	r3, [pc, #456]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004852:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004856:	4a71      	ldr	r2, [pc, #452]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800485c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004860:	4b6e      	ldr	r3, [pc, #440]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004862:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004866:	4a6d      	ldr	r2, [pc, #436]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004868:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800486c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004870:	4a6a      	ldr	r2, [pc, #424]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004876:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800487a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	d019      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004886:	f7fc f85d 	bl	8000944 <HAL_GetTick>
 800488a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800488e:	e00d      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004890:	f7fc f858 	bl	8000944 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800489a:	1ad2      	subs	r2, r2, r3
 800489c:	f241 3388 	movw	r3, #5000	; 0x1388
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d903      	bls.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 80048aa:	e006      	b.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048ac:	4b5b      	ldr	r3, [pc, #364]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80048ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d0ea      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 80048ba:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10d      	bne.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80048c2:	4b56      	ldr	r3, [pc, #344]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80048c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80048c8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80048cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80048d4:	4a51      	ldr	r2, [pc, #324]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80048d6:	430b      	orrs	r3, r1
 80048d8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80048dc:	e008      	b.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048de:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80048e2:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 80048e6:	e003      	b.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048e8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80048ec:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80048f0:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d107      	bne.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048f8:	4b48      	ldr	r3, [pc, #288]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80048fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048fe:	4a47      	ldr	r2, [pc, #284]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004900:	f023 0304 	bic.w	r3, r3, #4
 8004904:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8004908:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800490c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004910:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004914:	64bb      	str	r3, [r7, #72]	; 0x48
 8004916:	2300      	movs	r3, #0
 8004918:	64fb      	str	r3, [r7, #76]	; 0x4c
 800491a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800491e:	460b      	mov	r3, r1
 8004920:	4313      	orrs	r3, r2
 8004922:	d042      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8004924:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004928:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800492c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004930:	d022      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8004932:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004936:	d81b      	bhi.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8004938:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800493c:	d011      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x832>
 800493e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004942:	d815      	bhi.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8004944:	2b00      	cmp	r3, #0
 8004946:	d019      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8004948:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800494c:	d110      	bne.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800494e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004952:	3308      	adds	r3, #8
 8004954:	4618      	mov	r0, r3
 8004956:	f000 f9ab 	bl	8004cb0 <RCCEx_PLL2_Config>
 800495a:	4603      	mov	r3, r0
 800495c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004960:	e00d      	b.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004962:	4b2e      	ldr	r3, [pc, #184]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004966:	4a2d      	ldr	r2, [pc, #180]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800496c:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800496e:	e006      	b.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004976:	e002      	b.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8004978:	bf00      	nop
 800497a:	e000      	b.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800497c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800497e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d10d      	bne.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8004986:	4b25      	ldr	r3, [pc, #148]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800498c:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004990:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004994:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004998:	4a20      	ldr	r2, [pc, #128]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800499a:	430b      	orrs	r3, r1
 800499c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80049a0:	e003      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80049a6:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80049aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b2:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80049b6:	643b      	str	r3, [r7, #64]	; 0x40
 80049b8:	2300      	movs	r3, #0
 80049ba:	647b      	str	r3, [r7, #68]	; 0x44
 80049bc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80049c0:	460b      	mov	r3, r1
 80049c2:	4313      	orrs	r3, r2
 80049c4:	d032      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80049c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049d2:	d00b      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80049d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049d8:	d804      	bhi.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d008      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80049de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049e2:	d007      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80049ea:	e004      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80049ec:	bf00      	nop
 80049ee:	e002      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80049f0:	bf00      	nop
 80049f2:	e000      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80049f4:	bf00      	nop
    }
    if (ret == HAL_OK)
 80049f6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d112      	bne.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80049fe:	4b07      	ldr	r3, [pc, #28]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004a00:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004a04:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a10:	4a02      	ldr	r2, [pc, #8]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004a12:	430b      	orrs	r3, r1
 8004a14:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004a18:	e008      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8004a1a:	bf00      	nop
 8004a1c:	46020c00 	.word	0x46020c00
 8004a20:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a24:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004a28:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8004a2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a34:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004a38:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a3e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004a42:	460b      	mov	r3, r1
 8004a44:	4313      	orrs	r3, r2
 8004a46:	d00c      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8004a48:	4b98      	ldr	r3, [pc, #608]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004a4a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004a4e:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8004a52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a5a:	4a94      	ldr	r2, [pc, #592]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004a5c:	430b      	orrs	r3, r1
 8004a5e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8004a62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004a6e:	633b      	str	r3, [r7, #48]	; 0x30
 8004a70:	2300      	movs	r3, #0
 8004a72:	637b      	str	r3, [r7, #52]	; 0x34
 8004a74:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004a78:	460b      	mov	r3, r1
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	d019      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8004a7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004a86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a8a:	d105      	bne.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004a8c:	4b87      	ldr	r3, [pc, #540]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a90:	4a86      	ldr	r2, [pc, #536]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004a92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a96:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8004a98:	4b84      	ldr	r3, [pc, #528]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004a9a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004a9e:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004aa2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004aa6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004aaa:	4a80      	ldr	r2, [pc, #512]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004aac:	430b      	orrs	r3, r1
 8004aae:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8004ab2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aba:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004abe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ac4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004ac8:	460b      	mov	r3, r1
 8004aca:	4313      	orrs	r3, r2
 8004acc:	d00c      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004ace:	4b77      	ldr	r3, [pc, #476]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ad4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ad8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004adc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004ae0:	4972      	ldr	r1, [pc, #456]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004ae8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004af4:	623b      	str	r3, [r7, #32]
 8004af6:	2300      	movs	r3, #0
 8004af8:	627b      	str	r3, [r7, #36]	; 0x24
 8004afa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004afe:	460b      	mov	r3, r1
 8004b00:	4313      	orrs	r3, r2
 8004b02:	d00c      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004b04:	4b69      	ldr	r3, [pc, #420]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004b06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b0a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b12:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004b16:	4965      	ldr	r1, [pc, #404]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004b1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b26:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004b2a:	61bb      	str	r3, [r7, #24]
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	61fb      	str	r3, [r7, #28]
 8004b30:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004b34:	460b      	mov	r3, r1
 8004b36:	4313      	orrs	r3, r2
 8004b38:	d00c      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004b3a:	4b5c      	ldr	r3, [pc, #368]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004b3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004b40:	f023 0218 	bic.w	r2, r3, #24
 8004b44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b48:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004b4c:	4957      	ldr	r1, [pc, #348]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004b54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5c:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8004b60:	613b      	str	r3, [r7, #16]
 8004b62:	2300      	movs	r3, #0
 8004b64:	617b      	str	r3, [r7, #20]
 8004b66:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	d032      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8004b70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004b78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b7c:	d105      	bne.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b7e:	4b4b      	ldr	r3, [pc, #300]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b82:	4a4a      	ldr	r2, [pc, #296]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b88:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8004b8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004b92:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b96:	d108      	bne.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b9c:	3308      	adds	r3, #8
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f000 f886 	bl	8004cb0 <RCCEx_PLL2_Config>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 8004baa:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10d      	bne.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004bb2:	4b3e      	ldr	r3, [pc, #248]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004bb4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004bb8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bbc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004bc0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004bc4:	4939      	ldr	r1, [pc, #228]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8004bcc:	e003      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bce:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004bd2:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8004bd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bde:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8004be2:	60bb      	str	r3, [r7, #8]
 8004be4:	2300      	movs	r3, #0
 8004be6:	60fb      	str	r3, [r7, #12]
 8004be8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004bec:	460b      	mov	r3, r1
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	d03a      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8004bf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004bf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bfa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bfe:	d00e      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8004c00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c04:	d815      	bhi.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d017      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8004c0a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c0e:	d110      	bne.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c10:	4b26      	ldr	r3, [pc, #152]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c14:	4a25      	ldr	r2, [pc, #148]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004c16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c1a:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004c1c:	e00e      	b.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c22:	3308      	adds	r3, #8
 8004c24:	4618      	mov	r0, r3
 8004c26:	f000 f843 	bl	8004cb0 <RCCEx_PLL2_Config>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004c30:	e004      	b.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004c38:	e000      	b.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8004c3a:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004c3c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d10d      	bne.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8004c44:	4b19      	ldr	r3, [pc, #100]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c4a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004c4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c56:	4915      	ldr	r1, [pc, #84]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8004c5e:	e003      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c60:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004c64:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8004c68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c70:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004c74:	603b      	str	r3, [r7, #0]
 8004c76:	2300      	movs	r3, #0
 8004c78:	607b      	str	r3, [r7, #4]
 8004c7a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004c7e:	460b      	mov	r3, r1
 8004c80:	4313      	orrs	r3, r2
 8004c82:	d00c      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8004c84:	4b09      	ldr	r3, [pc, #36]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004c86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c8a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004c8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c92:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004c96:	4905      	ldr	r1, [pc, #20]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8004c9e:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	37e8      	adds	r7, #232	; 0xe8
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cac:	46020c00 	.word	0x46020c00

08004cb0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8004cb8:	4b47      	ldr	r3, [pc, #284]	; (8004dd8 <RCCEx_PLL2_Config+0x128>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a46      	ldr	r2, [pc, #280]	; (8004dd8 <RCCEx_PLL2_Config+0x128>)
 8004cbe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004cc2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004cc4:	f7fb fe3e 	bl	8000944 <HAL_GetTick>
 8004cc8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004cca:	e008      	b.n	8004cde <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004ccc:	f7fb fe3a 	bl	8000944 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d901      	bls.n	8004cde <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e077      	b.n	8004dce <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004cde:	4b3e      	ldr	r3, [pc, #248]	; (8004dd8 <RCCEx_PLL2_Config+0x128>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d1f0      	bne.n	8004ccc <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8004cea:	4b3b      	ldr	r3, [pc, #236]	; (8004dd8 <RCCEx_PLL2_Config+0x128>)
 8004cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004cf2:	f023 0303 	bic.w	r3, r3, #3
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	6811      	ldr	r1, [r2, #0]
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	6852      	ldr	r2, [r2, #4]
 8004cfe:	3a01      	subs	r2, #1
 8004d00:	0212      	lsls	r2, r2, #8
 8004d02:	430a      	orrs	r2, r1
 8004d04:	4934      	ldr	r1, [pc, #208]	; (8004dd8 <RCCEx_PLL2_Config+0x128>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004d0a:	4b33      	ldr	r3, [pc, #204]	; (8004dd8 <RCCEx_PLL2_Config+0x128>)
 8004d0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d0e:	4b33      	ldr	r3, [pc, #204]	; (8004ddc <RCCEx_PLL2_Config+0x12c>)
 8004d10:	4013      	ands	r3, r2
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	6892      	ldr	r2, [r2, #8]
 8004d16:	3a01      	subs	r2, #1
 8004d18:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	68d2      	ldr	r2, [r2, #12]
 8004d20:	3a01      	subs	r2, #1
 8004d22:	0252      	lsls	r2, r2, #9
 8004d24:	b292      	uxth	r2, r2
 8004d26:	4311      	orrs	r1, r2
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	6912      	ldr	r2, [r2, #16]
 8004d2c:	3a01      	subs	r2, #1
 8004d2e:	0412      	lsls	r2, r2, #16
 8004d30:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8004d34:	4311      	orrs	r1, r2
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	6952      	ldr	r2, [r2, #20]
 8004d3a:	3a01      	subs	r2, #1
 8004d3c:	0612      	lsls	r2, r2, #24
 8004d3e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004d42:	430a      	orrs	r2, r1
 8004d44:	4924      	ldr	r1, [pc, #144]	; (8004dd8 <RCCEx_PLL2_Config+0x128>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8004d4a:	4b23      	ldr	r3, [pc, #140]	; (8004dd8 <RCCEx_PLL2_Config+0x128>)
 8004d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4e:	f023 020c 	bic.w	r2, r3, #12
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	4920      	ldr	r1, [pc, #128]	; (8004dd8 <RCCEx_PLL2_Config+0x128>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8004d5c:	4b1e      	ldr	r3, [pc, #120]	; (8004dd8 <RCCEx_PLL2_Config+0x128>)
 8004d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a1b      	ldr	r3, [r3, #32]
 8004d64:	491c      	ldr	r1, [pc, #112]	; (8004dd8 <RCCEx_PLL2_Config+0x128>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8004d6a:	4b1b      	ldr	r3, [pc, #108]	; (8004dd8 <RCCEx_PLL2_Config+0x128>)
 8004d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6e:	4a1a      	ldr	r2, [pc, #104]	; (8004dd8 <RCCEx_PLL2_Config+0x128>)
 8004d70:	f023 0310 	bic.w	r3, r3, #16
 8004d74:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004d76:	4b18      	ldr	r3, [pc, #96]	; (8004dd8 <RCCEx_PLL2_Config+0x128>)
 8004d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d7e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	69d2      	ldr	r2, [r2, #28]
 8004d86:	00d2      	lsls	r2, r2, #3
 8004d88:	4913      	ldr	r1, [pc, #76]	; (8004dd8 <RCCEx_PLL2_Config+0x128>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8004d8e:	4b12      	ldr	r3, [pc, #72]	; (8004dd8 <RCCEx_PLL2_Config+0x128>)
 8004d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d92:	4a11      	ldr	r2, [pc, #68]	; (8004dd8 <RCCEx_PLL2_Config+0x128>)
 8004d94:	f043 0310 	orr.w	r3, r3, #16
 8004d98:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8004d9a:	4b0f      	ldr	r3, [pc, #60]	; (8004dd8 <RCCEx_PLL2_Config+0x128>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a0e      	ldr	r2, [pc, #56]	; (8004dd8 <RCCEx_PLL2_Config+0x128>)
 8004da0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004da4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004da6:	f7fb fdcd 	bl	8000944 <HAL_GetTick>
 8004daa:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004dac:	e008      	b.n	8004dc0 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004dae:	f7fb fdc9 	bl	8000944 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d901      	bls.n	8004dc0 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e006      	b.n	8004dce <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004dc0:	4b05      	ldr	r3, [pc, #20]	; (8004dd8 <RCCEx_PLL2_Config+0x128>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d0f0      	beq.n	8004dae <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0

}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	46020c00 	.word	0x46020c00
 8004ddc:	80800000 	.word	0x80800000

08004de0 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8004de8:	4b47      	ldr	r3, [pc, #284]	; (8004f08 <RCCEx_PLL3_Config+0x128>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a46      	ldr	r2, [pc, #280]	; (8004f08 <RCCEx_PLL3_Config+0x128>)
 8004dee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004df2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004df4:	f7fb fda6 	bl	8000944 <HAL_GetTick>
 8004df8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004dfa:	e008      	b.n	8004e0e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004dfc:	f7fb fda2 	bl	8000944 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d901      	bls.n	8004e0e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e077      	b.n	8004efe <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e0e:	4b3e      	ldr	r3, [pc, #248]	; (8004f08 <RCCEx_PLL3_Config+0x128>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1f0      	bne.n	8004dfc <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8004e1a:	4b3b      	ldr	r3, [pc, #236]	; (8004f08 <RCCEx_PLL3_Config+0x128>)
 8004e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004e22:	f023 0303 	bic.w	r3, r3, #3
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	6811      	ldr	r1, [r2, #0]
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	6852      	ldr	r2, [r2, #4]
 8004e2e:	3a01      	subs	r2, #1
 8004e30:	0212      	lsls	r2, r2, #8
 8004e32:	430a      	orrs	r2, r1
 8004e34:	4934      	ldr	r1, [pc, #208]	; (8004f08 <RCCEx_PLL3_Config+0x128>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	630b      	str	r3, [r1, #48]	; 0x30
 8004e3a:	4b33      	ldr	r3, [pc, #204]	; (8004f08 <RCCEx_PLL3_Config+0x128>)
 8004e3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e3e:	4b33      	ldr	r3, [pc, #204]	; (8004f0c <RCCEx_PLL3_Config+0x12c>)
 8004e40:	4013      	ands	r3, r2
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	6892      	ldr	r2, [r2, #8]
 8004e46:	3a01      	subs	r2, #1
 8004e48:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	68d2      	ldr	r2, [r2, #12]
 8004e50:	3a01      	subs	r2, #1
 8004e52:	0252      	lsls	r2, r2, #9
 8004e54:	b292      	uxth	r2, r2
 8004e56:	4311      	orrs	r1, r2
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	6912      	ldr	r2, [r2, #16]
 8004e5c:	3a01      	subs	r2, #1
 8004e5e:	0412      	lsls	r2, r2, #16
 8004e60:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8004e64:	4311      	orrs	r1, r2
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	6952      	ldr	r2, [r2, #20]
 8004e6a:	3a01      	subs	r2, #1
 8004e6c:	0612      	lsls	r2, r2, #24
 8004e6e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004e72:	430a      	orrs	r2, r1
 8004e74:	4924      	ldr	r1, [pc, #144]	; (8004f08 <RCCEx_PLL3_Config+0x128>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8004e7a:	4b23      	ldr	r3, [pc, #140]	; (8004f08 <RCCEx_PLL3_Config+0x128>)
 8004e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7e:	f023 020c 	bic.w	r2, r3, #12
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	4920      	ldr	r1, [pc, #128]	; (8004f08 <RCCEx_PLL3_Config+0x128>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8004e8c:	4b1e      	ldr	r3, [pc, #120]	; (8004f08 <RCCEx_PLL3_Config+0x128>)
 8004e8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a1b      	ldr	r3, [r3, #32]
 8004e94:	491c      	ldr	r1, [pc, #112]	; (8004f08 <RCCEx_PLL3_Config+0x128>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8004e9a:	4b1b      	ldr	r3, [pc, #108]	; (8004f08 <RCCEx_PLL3_Config+0x128>)
 8004e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9e:	4a1a      	ldr	r2, [pc, #104]	; (8004f08 <RCCEx_PLL3_Config+0x128>)
 8004ea0:	f023 0310 	bic.w	r3, r3, #16
 8004ea4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004ea6:	4b18      	ldr	r3, [pc, #96]	; (8004f08 <RCCEx_PLL3_Config+0x128>)
 8004ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004eae:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	69d2      	ldr	r2, [r2, #28]
 8004eb6:	00d2      	lsls	r2, r2, #3
 8004eb8:	4913      	ldr	r1, [pc, #76]	; (8004f08 <RCCEx_PLL3_Config+0x128>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8004ebe:	4b12      	ldr	r3, [pc, #72]	; (8004f08 <RCCEx_PLL3_Config+0x128>)
 8004ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec2:	4a11      	ldr	r2, [pc, #68]	; (8004f08 <RCCEx_PLL3_Config+0x128>)
 8004ec4:	f043 0310 	orr.w	r3, r3, #16
 8004ec8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8004eca:	4b0f      	ldr	r3, [pc, #60]	; (8004f08 <RCCEx_PLL3_Config+0x128>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a0e      	ldr	r2, [pc, #56]	; (8004f08 <RCCEx_PLL3_Config+0x128>)
 8004ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ed4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004ed6:	f7fb fd35 	bl	8000944 <HAL_GetTick>
 8004eda:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004edc:	e008      	b.n	8004ef0 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004ede:	f7fb fd31 	bl	8000944 <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d901      	bls.n	8004ef0 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e006      	b.n	8004efe <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ef0:	4b05      	ldr	r3, [pc, #20]	; (8004f08 <RCCEx_PLL3_Config+0x128>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d0f0      	beq.n	8004ede <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	46020c00 	.word	0x46020c00
 8004f0c:	80800000 	.word	0x80800000

08004f10 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d101      	bne.n	8004f22 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e08b      	b.n	800503a <HAL_RNG_Init+0x12a>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	7a5b      	ldrb	r3, [r3, #9]
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d105      	bne.n	8004f38 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f7fb fb26 	bl	8000584 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	725a      	strb	r2, [r3, #9]

  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f022 0204 	bic.w	r2, r2, #4
 8004f4c:	601a      	str	r2, [r3, #0]

  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f58:	f023 0320 	bic.w	r3, r3, #32
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	6852      	ldr	r2, [r2, #4]
 8004f60:	431a      	orrs	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004f6a:	601a      	str	r2, [r3, #0]

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8004f7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f7c:	f7fb fce2 	bl	8000944 <HAL_GetTick>
 8004f80:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8004f82:	e016      	b.n	8004fb2 <HAL_RNG_Init+0xa2>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004f84:	f7fb fcde 	bl	8000944 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b04      	cmp	r3, #4
 8004f90:	d90f      	bls.n	8004fb2 <HAL_RNG_Init+0xa2>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fa0:	d107      	bne.n	8004fb2 <HAL_RNG_Init+0xa2>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2202      	movs	r2, #2
 8004fac:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e043      	b.n	800503a <HAL_RNG_Init+0x12a>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fc0:	d0e0      	beq.n	8004f84 <HAL_RNG_Init+0x74>
      }
    }
  }

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f042 0204 	orr.w	r2, r2, #4
 8004fd0:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fdc:	2b40      	cmp	r3, #64	; 0x40
 8004fde:	d104      	bne.n	8004fea <HAL_RNG_Init+0xda>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2204      	movs	r2, #4
 8004fe4:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e027      	b.n	800503a <HAL_RNG_Init+0x12a>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8004fea:	f7fb fcab 	bl	8000944 <HAL_GetTick>
 8004fee:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004ff0:	e015      	b.n	800501e <HAL_RNG_Init+0x10e>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004ff2:	f7fb fca7 	bl	8000944 <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	2b04      	cmp	r3, #4
 8004ffe:	d90e      	bls.n	800501e <HAL_RNG_Init+0x10e>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f003 0304 	and.w	r3, r3, #4
 800500a:	2b04      	cmp	r3, #4
 800500c:	d107      	bne.n	800501e <HAL_RNG_Init+0x10e>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2204      	movs	r2, #4
 8005012:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2202      	movs	r2, #2
 8005018:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e00d      	b.n	800503a <HAL_RNG_Init+0x12a>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f003 0304 	and.w	r3, r3, #4
 8005028:	2b04      	cmp	r3, #4
 800502a:	d0e2      	beq.n	8004ff2 <HAL_RNG_Init+0xe2>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3710      	adds	r7, #16
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <memcmp>:
 8005042:	3901      	subs	r1, #1
 8005044:	4402      	add	r2, r0
 8005046:	b510      	push	{r4, lr}
 8005048:	4290      	cmp	r0, r2
 800504a:	d101      	bne.n	8005050 <memcmp+0xe>
 800504c:	2000      	movs	r0, #0
 800504e:	e005      	b.n	800505c <memcmp+0x1a>
 8005050:	7803      	ldrb	r3, [r0, #0]
 8005052:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005056:	42a3      	cmp	r3, r4
 8005058:	d001      	beq.n	800505e <memcmp+0x1c>
 800505a:	1b18      	subs	r0, r3, r4
 800505c:	bd10      	pop	{r4, pc}
 800505e:	3001      	adds	r0, #1
 8005060:	e7f2      	b.n	8005048 <memcmp+0x6>

08005062 <memset>:
 8005062:	4402      	add	r2, r0
 8005064:	4603      	mov	r3, r0
 8005066:	4293      	cmp	r3, r2
 8005068:	d100      	bne.n	800506c <memset+0xa>
 800506a:	4770      	bx	lr
 800506c:	f803 1b01 	strb.w	r1, [r3], #1
 8005070:	e7f9      	b.n	8005066 <memset+0x4>
	...

08005074 <__libc_init_array>:
 8005074:	b570      	push	{r4, r5, r6, lr}
 8005076:	4d0d      	ldr	r5, [pc, #52]	; (80050ac <__libc_init_array+0x38>)
 8005078:	2600      	movs	r6, #0
 800507a:	4c0d      	ldr	r4, [pc, #52]	; (80050b0 <__libc_init_array+0x3c>)
 800507c:	1b64      	subs	r4, r4, r5
 800507e:	10a4      	asrs	r4, r4, #2
 8005080:	42a6      	cmp	r6, r4
 8005082:	d109      	bne.n	8005098 <__libc_init_array+0x24>
 8005084:	4d0b      	ldr	r5, [pc, #44]	; (80050b4 <__libc_init_array+0x40>)
 8005086:	2600      	movs	r6, #0
 8005088:	4c0b      	ldr	r4, [pc, #44]	; (80050b8 <__libc_init_array+0x44>)
 800508a:	f000 f817 	bl	80050bc <_init>
 800508e:	1b64      	subs	r4, r4, r5
 8005090:	10a4      	asrs	r4, r4, #2
 8005092:	42a6      	cmp	r6, r4
 8005094:	d105      	bne.n	80050a2 <__libc_init_array+0x2e>
 8005096:	bd70      	pop	{r4, r5, r6, pc}
 8005098:	f855 3b04 	ldr.w	r3, [r5], #4
 800509c:	3601      	adds	r6, #1
 800509e:	4798      	blx	r3
 80050a0:	e7ee      	b.n	8005080 <__libc_init_array+0xc>
 80050a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80050a6:	3601      	adds	r6, #1
 80050a8:	4798      	blx	r3
 80050aa:	e7f2      	b.n	8005092 <__libc_init_array+0x1e>
 80050ac:	080051dc 	.word	0x080051dc
 80050b0:	080051dc 	.word	0x080051dc
 80050b4:	080051dc 	.word	0x080051dc
 80050b8:	080051e0 	.word	0x080051e0

080050bc <_init>:
 80050bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050be:	bf00      	nop
 80050c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050c2:	bc08      	pop	{r3}
 80050c4:	469e      	mov	lr, r3
 80050c6:	4770      	bx	lr

080050c8 <_fini>:
 80050c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ca:	bf00      	nop
 80050cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ce:	bc08      	pop	{r3}
 80050d0:	469e      	mov	lr, r3
 80050d2:	4770      	bx	lr
