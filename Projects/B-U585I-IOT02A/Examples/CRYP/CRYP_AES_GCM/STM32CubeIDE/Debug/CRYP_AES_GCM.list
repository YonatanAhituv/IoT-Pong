
CRYP_AES_GCM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b44  08000238  08000238  00010238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08003d7c  08003d7c  00013d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003e94  08003e94  00013e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003e98  08003e98  00013e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000061  20000000  08003e9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000b8  20000064  08003efd  00020064  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000011c  08003efd  0002011c  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  00020061  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  00020097  2**0
                  CONTENTS, READONLY
 10 .debug_line   0000d699  00000000  00000000  000200da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line_str 000000a9  00000000  00000000  0002d773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_info   0000afad  00000000  00000000  0002d81c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ce7  00000000  00000000  000387c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d0  00000000  00000000  0003a4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0013339e  00000000  00000000  0003ae80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000760  00000000  00000000  0016e21e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00031a0a  00000000  00000000  0016e97e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000026c4  00000000  00000000  001a0388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000064 	.word	0x20000064
 8000254:	00000000 	.word	0x00000000
 8000258:	08003d64 	.word	0x08003d64

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000068 	.word	0x20000068
 8000274:	08003d64 	.word	0x08003d64

08000278 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000278:	f8df d034 	ldr.w	sp, [pc, #52]	; 80002b0 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800027c:	f000 fa3c 	bl	80006f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000280:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000282:	e003      	b.n	800028c <LoopCopyDataInit>

08000284 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000284:	4b0b      	ldr	r3, [pc, #44]	; (80002b4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000286:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000288:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800028a:	3104      	adds	r1, #4

0800028c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800028c:	480a      	ldr	r0, [pc, #40]	; (80002b8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800028e:	4b0b      	ldr	r3, [pc, #44]	; (80002bc <LoopForever+0xe>)
	adds	r2, r0, r1
 8000290:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000292:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000294:	d3f6      	bcc.n	8000284 <CopyDataInit>
	ldr	r2, =_sbss
 8000296:	4a0a      	ldr	r2, [pc, #40]	; (80002c0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000298:	e002      	b.n	80002a0 <LoopFillZerobss>

0800029a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800029a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800029c:	f842 3b04 	str.w	r3, [r2], #4

080002a0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <LoopForever+0x16>)
	cmp	r2, r3
 80002a2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80002a4:	d3f9      	bcc.n	800029a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80002a6:	f003 fd39 	bl	8003d1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80002aa:	f000 f80f 	bl	80002cc <main>

080002ae <LoopForever>:

LoopForever:
    b LoopForever
 80002ae:	e7fe      	b.n	80002ae <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80002b0:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 80002b4:	08003e9c 	.word	0x08003e9c
	ldr	r0, =_sdata
 80002b8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80002bc:	20000061 	.word	0x20000061
	ldr	r2, =_sbss
 80002c0:	20000064 	.word	0x20000064
	ldr	r3, = _ebss
 80002c4:	2000011c 	.word	0x2000011c

080002c8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80002c8:	e7fe      	b.n	80002c8 <ADC1_IRQHandler>
	...

080002cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002d2:	f000 fa49 	bl	8000768 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002d6:	f000 f879 	bl	80003cc <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80002da:	f000 f8d3 	bl	8000484 <SystemPower_Config>

  /* USER CODE BEGIN SysInit */
  /* Configure LED6 and LED7 */
  BSP_LED_Init(LED6);
 80002de:	2000      	movs	r0, #0
 80002e0:	f000 f99a 	bl	8000618 <BSP_LED_Init>
  BSP_LED_Init(LED7);
 80002e4:	2001      	movs	r0, #1
 80002e6:	f000 f997 	bl	8000618 <BSP_LED_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_ICACHE_Init();
 80002ea:	f000 f913 	bl	8000514 <MX_ICACHE_Init>
  MX_AES_Init();
 80002ee:	f000 f8d7 	bl	80004a0 <MX_AES_Init>
  /* USER CODE BEGIN 2 */
  /*##-2- Encryption Phase #################################################*/
  if (HAL_CRYP_Encrypt(&hcryp, Plaintext, PLAINTEXT_SIZE, EncryptedText, TIMEOUT_VALUE) != HAL_OK)
 80002f2:	23ff      	movs	r3, #255	; 0xff
 80002f4:	9300      	str	r3, [sp, #0]
 80002f6:	4b2e      	ldr	r3, [pc, #184]	; (80003b0 <main+0xe4>)
 80002f8:	2204      	movs	r2, #4
 80002fa:	492e      	ldr	r1, [pc, #184]	; (80003b4 <main+0xe8>)
 80002fc:	482e      	ldr	r0, [pc, #184]	; (80003b8 <main+0xec>)
 80002fe:	f000 fc57 	bl	8000bb0 <HAL_CRYP_Encrypt>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <main+0x40>
  {
    /* Processing Error */
    Error_Handler();
 8000308:	f000 f917 	bl	800053a <Error_Handler>
  }
  /*Compare results with expected buffer*/
  if(memcmp(EncryptedText, Ciphertext, 16) != 0)
 800030c:	2210      	movs	r2, #16
 800030e:	492b      	ldr	r1, [pc, #172]	; (80003bc <main+0xf0>)
 8000310:	4827      	ldr	r0, [pc, #156]	; (80003b0 <main+0xe4>)
 8000312:	f003 fceb 	bl	8003cec <memcmp>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <main+0x54>
  {
    /* Processing Error */
    Error_Handler();
 800031c:	f000 f90d 	bl	800053a <Error_Handler>
  }
  /* Compute the authentication TAG */
  if (HAL_CRYPEx_AESGCM_GenerateAuthTAG(&hcryp,TAG, TIMEOUT_VALUE) != HAL_OK)
 8000320:	22ff      	movs	r2, #255	; 0xff
 8000322:	4927      	ldr	r1, [pc, #156]	; (80003c0 <main+0xf4>)
 8000324:	4824      	ldr	r0, [pc, #144]	; (80003b8 <main+0xec>)
 8000326:	f001 fe72 	bl	800200e <HAL_CRYPEx_AESGCM_GenerateAuthTAG>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <main+0x68>
  {
    /* Processing Error */
    Error_Handler();
 8000330:	f000 f903 	bl	800053a <Error_Handler>
  }
  /*Compare results with expected buffer*/
  if(memcmp(TAG, ExpectedTAG, 16) != 0)
 8000334:	2210      	movs	r2, #16
 8000336:	4923      	ldr	r1, [pc, #140]	; (80003c4 <main+0xf8>)
 8000338:	4821      	ldr	r0, [pc, #132]	; (80003c0 <main+0xf4>)
 800033a:	f003 fcd7 	bl	8003cec <memcmp>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <main+0x7c>
  {
    /* Processing Error */
    Error_Handler();
 8000344:	f000 f8f9 	bl	800053a <Error_Handler>
  }
  /*##-3- Decryption Phase #################################################*/
  if (HAL_CRYP_Decrypt(&hcryp,Ciphertext , PLAINTEXT_SIZE, DecryptedText, TIMEOUT_VALUE) != HAL_OK)
 8000348:	23ff      	movs	r3, #255	; 0xff
 800034a:	9300      	str	r3, [sp, #0]
 800034c:	4b1e      	ldr	r3, [pc, #120]	; (80003c8 <main+0xfc>)
 800034e:	2204      	movs	r2, #4
 8000350:	491a      	ldr	r1, [pc, #104]	; (80003bc <main+0xf0>)
 8000352:	4819      	ldr	r0, [pc, #100]	; (80003b8 <main+0xec>)
 8000354:	f000 fcda 	bl	8000d0c <HAL_CRYP_Decrypt>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <main+0x96>
  {
    /* Processing Error */
    Error_Handler();
 800035e:	f000 f8ec 	bl	800053a <Error_Handler>
  }
  /*Compare results with expected buffer*/
  if(memcmp(DecryptedText, Plaintext, 16) != 0)
 8000362:	2210      	movs	r2, #16
 8000364:	4913      	ldr	r1, [pc, #76]	; (80003b4 <main+0xe8>)
 8000366:	4818      	ldr	r0, [pc, #96]	; (80003c8 <main+0xfc>)
 8000368:	f003 fcc0 	bl	8003cec <memcmp>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d002      	beq.n	8000378 <main+0xac>
  {
    /* Processing Error */
    Error_Handler();
 8000372:	f000 f8e2 	bl	800053a <Error_Handler>
 8000376:	e002      	b.n	800037e <main+0xb2>
  }
  else
  {
    /* Right Encryption : Turn LED7 on */
    BSP_LED_On(LED7);
 8000378:	2001      	movs	r0, #1
 800037a:	f000 f99f 	bl	80006bc <BSP_LED_On>
  }
  /* Compute the authentication TAG */
  if (HAL_CRYPEx_AESGCM_GenerateAuthTAG(&hcryp,TAG, TIMEOUT_VALUE) != HAL_OK)
 800037e:	22ff      	movs	r2, #255	; 0xff
 8000380:	490f      	ldr	r1, [pc, #60]	; (80003c0 <main+0xf4>)
 8000382:	480d      	ldr	r0, [pc, #52]	; (80003b8 <main+0xec>)
 8000384:	f001 fe43 	bl	800200e <HAL_CRYPEx_AESGCM_GenerateAuthTAG>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <main+0xc6>
  {
    /* Processing Error */
    Error_Handler();
 800038e:	f000 f8d4 	bl	800053a <Error_Handler>
  }
  /*Compare results with expected buffer*/
  if(memcmp(TAG, ExpectedTAG, 16) != 0)
 8000392:	2210      	movs	r2, #16
 8000394:	490b      	ldr	r1, [pc, #44]	; (80003c4 <main+0xf8>)
 8000396:	480a      	ldr	r0, [pc, #40]	; (80003c0 <main+0xf4>)
 8000398:	f003 fca8 	bl	8003cec <memcmp>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <main+0xda>
  {
    /* Processing Error */
    Error_Handler();
 80003a2:	f000 f8ca 	bl	800053a <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* Encrypted/Decrypted text and computed Tag are correct : Turn LED7 on */
    BSP_LED_On(LED7);
 80003a6:	2001      	movs	r0, #1
 80003a8:	f000 f988 	bl	80006bc <BSP_LED_On>
 80003ac:	e7fb      	b.n	80003a6 <main+0xda>
 80003ae:	bf00      	nop
 80003b0:	200000e8 	.word	0x200000e8
 80003b4:	20000020 	.word	0x20000020
 80003b8:	20000080 	.word	0x20000080
 80003bc:	20000030 	.word	0x20000030
 80003c0:	20000108 	.word	0x20000108
 80003c4:	20000040 	.word	0x20000040
 80003c8:	200000f8 	.word	0x200000f8

080003cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b09e      	sub	sp, #120	; 0x78
 80003d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003d2:	f107 0318 	add.w	r3, r7, #24
 80003d6:	2260      	movs	r2, #96	; 0x60
 80003d8:	2100      	movs	r1, #0
 80003da:	4618      	mov	r0, r3
 80003dc:	f003 fc96 	bl	8003d0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e0:	463b      	mov	r3, r7
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	605a      	str	r2, [r3, #4]
 80003e8:	609a      	str	r2, [r3, #8]
 80003ea:	60da      	str	r2, [r3, #12]
 80003ec:	611a      	str	r2, [r3, #16]
 80003ee:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80003f0:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80003f4:	f002 f91e 	bl	8002634 <HAL_PWREx_ControlVoltageScaling>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <SystemClock_Config+0x36>
  {
    Error_Handler();
 80003fe:	f000 f89c 	bl	800053a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000402:	2310      	movs	r3, #16
 8000404:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000406:	2301      	movs	r3, #1
 8000408:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800040a:	2310      	movs	r3, #16
 800040c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 800040e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000412:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000414:	2302      	movs	r3, #2
 8000416:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000418:	2301      	movs	r3, #1
 800041a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 800041c:	2300      	movs	r3, #0
 800041e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000420:	2301      	movs	r3, #1
 8000422:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000424:	2350      	movs	r3, #80	; 0x50
 8000426:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000428:	2302      	movs	r3, #2
 800042a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800042c:	2302      	movs	r3, #2
 800042e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000430:	2302      	movs	r3, #2
 8000432:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 8000434:	2300      	movs	r3, #0
 8000436:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000438:	2300      	movs	r3, #0
 800043a:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800043c:	f107 0318 	add.w	r3, r7, #24
 8000440:	4618      	mov	r0, r3
 8000442:	f002 f9e3 	bl	800280c <HAL_RCC_OscConfig>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800044c:	f000 f875 	bl	800053a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000450:	231f      	movs	r3, #31
 8000452:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000454:	2303      	movs	r3, #3
 8000456:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000458:	2300      	movs	r3, #0
 800045a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800045c:	2300      	movs	r3, #0
 800045e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000460:	2300      	movs	r3, #0
 8000462:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000464:	2300      	movs	r3, #0
 8000466:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000468:	463b      	mov	r3, r7
 800046a:	2104      	movs	r1, #4
 800046c:	4618      	mov	r0, r3
 800046e:	f003 f8a9 	bl	80035c4 <HAL_RCC_ClockConfig>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d001      	beq.n	800047c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000478:	f000 f85f 	bl	800053a <Error_Handler>
  }
}
 800047c:	bf00      	nop
 800047e:	3778      	adds	r7, #120	; 0x78
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}

08000484 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000488:	f002 f9b0 	bl	80027ec <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 800048c:	2002      	movs	r0, #2
 800048e:	f002 f95d 	bl	800274c <HAL_PWREx_ConfigSupply>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d001      	beq.n	800049c <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000498:	f000 f84f 	bl	800053a <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 800049c:	bf00      	nop
 800049e:	bd80      	pop	{r7, pc}

080004a0 <MX_AES_Init>:
  * @brief AES Initialization Function
  * @param None
  * @retval None
  */
static void MX_AES_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE END AES_Init 0 */

  /* USER CODE BEGIN AES_Init 1 */

  /* USER CODE END AES_Init 1 */
  hcryp.Instance = AES;
 80004a4:	4b16      	ldr	r3, [pc, #88]	; (8000500 <MX_AES_Init+0x60>)
 80004a6:	4a17      	ldr	r2, [pc, #92]	; (8000504 <MX_AES_Init+0x64>)
 80004a8:	601a      	str	r2, [r3, #0]
  hcryp.Init.DataType = CRYP_NO_SWAP;
 80004aa:	4b15      	ldr	r3, [pc, #84]	; (8000500 <MX_AES_Init+0x60>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	605a      	str	r2, [r3, #4]
  hcryp.Init.KeySize = CRYP_KEYSIZE_128B;
 80004b0:	4b13      	ldr	r3, [pc, #76]	; (8000500 <MX_AES_Init+0x60>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	609a      	str	r2, [r3, #8]
  hcryp.Init.pKey = (uint32_t *)pKeyAES;
 80004b6:	4b12      	ldr	r3, [pc, #72]	; (8000500 <MX_AES_Init+0x60>)
 80004b8:	4a13      	ldr	r2, [pc, #76]	; (8000508 <MX_AES_Init+0x68>)
 80004ba:	60da      	str	r2, [r3, #12]
  hcryp.Init.pInitVect = (uint32_t *)pInitVectAES;
 80004bc:	4b10      	ldr	r3, [pc, #64]	; (8000500 <MX_AES_Init+0x60>)
 80004be:	4a13      	ldr	r2, [pc, #76]	; (800050c <MX_AES_Init+0x6c>)
 80004c0:	611a      	str	r2, [r3, #16]
  hcryp.Init.Algorithm = CRYP_AES_GCM_GMAC;
 80004c2:	4b0f      	ldr	r3, [pc, #60]	; (8000500 <MX_AES_Init+0x60>)
 80004c4:	2260      	movs	r2, #96	; 0x60
 80004c6:	615a      	str	r2, [r3, #20]
  hcryp.Init.Header = (uint32_t *)HeaderAES;
 80004c8:	4b0d      	ldr	r3, [pc, #52]	; (8000500 <MX_AES_Init+0x60>)
 80004ca:	4a11      	ldr	r2, [pc, #68]	; (8000510 <MX_AES_Init+0x70>)
 80004cc:	619a      	str	r2, [r3, #24]
  hcryp.Init.HeaderSize = 4;
 80004ce:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <MX_AES_Init+0x60>)
 80004d0:	2204      	movs	r2, #4
 80004d2:	61da      	str	r2, [r3, #28]
  hcryp.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_WORD;
 80004d4:	4b0a      	ldr	r3, [pc, #40]	; (8000500 <MX_AES_Init+0x60>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	625a      	str	r2, [r3, #36]	; 0x24
  hcryp.Init.HeaderWidthUnit = CRYP_HEADERWIDTHUNIT_WORD;
 80004da:	4b09      	ldr	r3, [pc, #36]	; (8000500 <MX_AES_Init+0x60>)
 80004dc:	2200      	movs	r2, #0
 80004de:	629a      	str	r2, [r3, #40]	; 0x28
  hcryp.Init.KeyIVConfigSkip = CRYP_KEYIVCONFIG_ALWAYS;
 80004e0:	4b07      	ldr	r3, [pc, #28]	; (8000500 <MX_AES_Init+0x60>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hcryp.Init.KeyMode = CRYP_KEYMODE_NORMAL;
 80004e6:	4b06      	ldr	r3, [pc, #24]	; (8000500 <MX_AES_Init+0x60>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_CRYP_Init(&hcryp) != HAL_OK)
 80004ec:	4804      	ldr	r0, [pc, #16]	; (8000500 <MX_AES_Init+0x60>)
 80004ee:	f000 faa3 	bl	8000a38 <HAL_CRYP_Init>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <MX_AES_Init+0x5c>
  {
    Error_Handler();
 80004f8:	f000 f81f 	bl	800053a <Error_Handler>
  }
  /* USER CODE BEGIN AES_Init 2 */

  /* USER CODE END AES_Init 2 */

}
 80004fc:	bf00      	nop
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	20000080 	.word	0x20000080
 8000504:	420c0000 	.word	0x420c0000
 8000508:	20000000 	.word	0x20000000
 800050c:	20000010 	.word	0x20000010
 8000510:	08003dac 	.word	0x08003dac

08000514 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000518:	2000      	movs	r0, #0
 800051a:	f002 f85b 	bl	80025d4 <HAL_ICACHE_ConfigAssociativityMode>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000524:	f000 f809 	bl	800053a <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000528:	f002 f874 	bl	8002614 <HAL_ICACHE_Enable>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000532:	f000 f802 	bl	800053a <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}

0800053a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800053a:	b580      	push	{r7, lr}
 800053c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800053e:	b672      	cpsid	i
}
 8000540:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  /* Turn LED6 on */
  BSP_LED_On(LED6);
 8000542:	2000      	movs	r0, #0
 8000544:	f000 f8ba 	bl	80006bc <BSP_LED_On>
  while (1)
 8000548:	e7fe      	b.n	8000548 <Error_Handler+0xe>
	...

0800054c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000552:	4b0a      	ldr	r3, [pc, #40]	; (800057c <HAL_MspInit+0x30>)
 8000554:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000558:	4a08      	ldr	r2, [pc, #32]	; (800057c <HAL_MspInit+0x30>)
 800055a:	f043 0304 	orr.w	r3, r3, #4
 800055e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000562:	4b06      	ldr	r3, [pc, #24]	; (800057c <HAL_MspInit+0x30>)
 8000564:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000568:	f003 0304 	and.w	r3, r3, #4
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000570:	bf00      	nop
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	46020c00 	.word	0x46020c00

08000580 <HAL_CRYP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcryp: CRYP handle pointer
* @retval None
*/
void HAL_CRYP_MspInit(CRYP_HandleTypeDef* hcryp)
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  if(hcryp->Instance==AES)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a0b      	ldr	r2, [pc, #44]	; (80005bc <HAL_CRYP_MspInit+0x3c>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d10e      	bne.n	80005b0 <HAL_CRYP_MspInit+0x30>
  {
  /* USER CODE BEGIN AES_MspInit 0 */

  /* USER CODE END AES_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_AES_CLK_ENABLE();
 8000592:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <HAL_CRYP_MspInit+0x40>)
 8000594:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000598:	4a09      	ldr	r2, [pc, #36]	; (80005c0 <HAL_CRYP_MspInit+0x40>)
 800059a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800059e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80005a2:	4b07      	ldr	r3, [pc, #28]	; (80005c0 <HAL_CRYP_MspInit+0x40>)
 80005a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN AES_MspInit 1 */

  /* USER CODE END AES_MspInit 1 */
  }

}
 80005b0:	bf00      	nop
 80005b2:	3714      	adds	r7, #20
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	420c0000 	.word	0x420c0000
 80005c0:	46020c00 	.word	0x46020c00

080005c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005c8:	e7fe      	b.n	80005c8 <NMI_Handler+0x4>

080005ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ca:	b480      	push	{r7}
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ce:	e7fe      	b.n	80005ce <HardFault_Handler+0x4>

080005d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005d4:	e7fe      	b.n	80005d4 <MemManage_Handler+0x4>

080005d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005d6:	b480      	push	{r7}
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005da:	e7fe      	b.n	80005da <BusFault_Handler+0x4>

080005dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005e0:	e7fe      	b.n	80005e0 <UsageFault_Handler+0x4>

080005e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005e2:	b480      	push	{r7}
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005e6:	bf00      	nop
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr

080005f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005fe:	b480      	push	{r7}
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000602:	bf00      	nop
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr

0800060c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000610:	f000 f90e 	bl	8000830 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}

08000618 <BSP_LED_Init>:
  *            @arg  LED6
  *            @arg  LED7
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b08a      	sub	sp, #40	; 0x28
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000622:	2300      	movs	r3, #0
 8000624:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  LED6_GPIO_CLK_ENABLE();
 8000626:	4b22      	ldr	r3, [pc, #136]	; (80006b0 <BSP_LED_Init+0x98>)
 8000628:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800062c:	4a20      	ldr	r2, [pc, #128]	; (80006b0 <BSP_LED_Init+0x98>)
 800062e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000632:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000636:	4b1e      	ldr	r3, [pc, #120]	; (80006b0 <BSP_LED_Init+0x98>)
 8000638:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800063c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000640:	60fb      	str	r3, [r7, #12]
 8000642:	68fb      	ldr	r3, [r7, #12]
  LED7_GPIO_CLK_ENABLE();
 8000644:	4b1a      	ldr	r3, [pc, #104]	; (80006b0 <BSP_LED_Init+0x98>)
 8000646:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800064a:	4a19      	ldr	r2, [pc, #100]	; (80006b0 <BSP_LED_Init+0x98>)
 800064c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000650:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000654:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <BSP_LED_Init+0x98>)
 8000656:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800065a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000662:	2301      	movs	r3, #1
 8000664:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800066a:	2302      	movs	r3, #2
 800066c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Pin = LED_PIN [Led];
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	4a10      	ldr	r2, [pc, #64]	; (80006b4 <BSP_LED_Init+0x9c>)
 8000672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000676:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	4a0f      	ldr	r2, [pc, #60]	; (80006b8 <BSP_LED_Init+0xa0>)
 800067c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000680:	f107 0210 	add.w	r2, r7, #16
 8000684:	4611      	mov	r1, r2
 8000686:	4618      	mov	r0, r3
 8000688:	f001 fdb4 	bl	80021f4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN[Led], GPIO_PIN_SET);
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	4a0a      	ldr	r2, [pc, #40]	; (80006b8 <BSP_LED_Init+0xa0>)
 8000690:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	4a07      	ldr	r2, [pc, #28]	; (80006b4 <BSP_LED_Init+0x9c>)
 8000698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800069c:	b29b      	uxth	r3, r3
 800069e:	2201      	movs	r2, #1
 80006a0:	4619      	mov	r1, r3
 80006a2:	f001 ff7f 	bl	80025a4 <HAL_GPIO_WritePin>

  return ret;
 80006a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3728      	adds	r7, #40	; 0x28
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	46020c00 	.word	0x46020c00
 80006b4:	08003dbc 	.word	0x08003dbc
 80006b8:	20000050 	.word	0x20000050

080006bc <BSP_LED_On>:
  *            @arg  LED6
  *            @arg  LED7
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	4a09      	ldr	r2, [pc, #36]	; (80006f0 <BSP_LED_On+0x34>)
 80006ca:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	4a08      	ldr	r2, [pc, #32]	; (80006f4 <BSP_LED_On+0x38>)
 80006d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	2200      	movs	r2, #0
 80006da:	4619      	mov	r1, r3
 80006dc:	f001 ff62 	bl	80025a4 <HAL_GPIO_WritePin>
  ret = BSP_ERROR_NONE;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60fb      	str	r3, [r7, #12]

  return ret;
 80006e4:	68fb      	ldr	r3, [r7, #12]
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3710      	adds	r7, #16
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000050 	.word	0x20000050
 80006f4:	08003dbc 	.word	0x08003dbc

080006f8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80006fc:	4b18      	ldr	r3, [pc, #96]	; (8000760 <SystemInit+0x68>)
 80006fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000702:	4a17      	ldr	r2, [pc, #92]	; (8000760 <SystemInit+0x68>)
 8000704:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000708:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 800070c:	4b15      	ldr	r3, [pc, #84]	; (8000764 <SystemInit+0x6c>)
 800070e:	2201      	movs	r2, #1
 8000710:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000712:	4b14      	ldr	r3, [pc, #80]	; (8000764 <SystemInit+0x6c>)
 8000714:	2200      	movs	r2, #0
 8000716:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <SystemInit+0x6c>)
 800071a:	2200      	movs	r2, #0
 800071c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <SystemInit+0x6c>)
 8000720:	2200      	movs	r2, #0
 8000722:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000724:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <SystemInit+0x6c>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a0e      	ldr	r2, [pc, #56]	; (8000764 <SystemInit+0x6c>)
 800072a:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800072e:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000732:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000734:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <SystemInit+0x6c>)
 8000736:	2200      	movs	r2, #0
 8000738:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800073a:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <SystemInit+0x6c>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a09      	ldr	r2, [pc, #36]	; (8000764 <SystemInit+0x6c>)
 8000740:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000744:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000746:	4b07      	ldr	r3, [pc, #28]	; (8000764 <SystemInit+0x6c>)
 8000748:	2200      	movs	r2, #0
 800074a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800074c:	4b04      	ldr	r3, [pc, #16]	; (8000760 <SystemInit+0x68>)
 800074e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000752:	609a      	str	r2, [r3, #8]
  #endif
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	e000ed00 	.word	0xe000ed00
 8000764:	46020c00 	.word	0x46020c00

08000768 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <HAL_Init+0x4c>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a10      	ldr	r2, [pc, #64]	; (80007b4 <HAL_Init+0x4c>)
 8000772:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000776:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000778:	2003      	movs	r0, #3
 800077a:	f000 f92b 	bl	80009d4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800077e:	f003 f913 	bl	80039a8 <HAL_RCC_GetSysClockFreq>
 8000782:	4602      	mov	r2, r0
 8000784:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <HAL_Init+0x50>)
 8000786:	6a1b      	ldr	r3, [r3, #32]
 8000788:	f003 030f 	and.w	r3, r3, #15
 800078c:	490b      	ldr	r1, [pc, #44]	; (80007bc <HAL_Init+0x54>)
 800078e:	5ccb      	ldrb	r3, [r1, r3]
 8000790:	fa22 f303 	lsr.w	r3, r2, r3
 8000794:	4a0a      	ldr	r2, [pc, #40]	; (80007c0 <HAL_Init+0x58>)
 8000796:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000798:	2000      	movs	r0, #0
 800079a:	f000 f813 	bl	80007c4 <HAL_InitTick>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 80007a4:	2301      	movs	r3, #1
 80007a6:	e002      	b.n	80007ae <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80007a8:	f7ff fed0 	bl	800054c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007ac:	2300      	movs	r3, #0
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40022000 	.word	0x40022000
 80007b8:	46020c00 	.word	0x46020c00
 80007bc:	08003dc4 	.word	0x08003dc4
 80007c0:	20000058 	.word	0x20000058

080007c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <HAL_InitTick+0x60>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d101      	bne.n	80007d8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80007d4:	2301      	movs	r3, #1
 80007d6:	e021      	b.n	800081c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80007d8:	4b13      	ldr	r3, [pc, #76]	; (8000828 <HAL_InitTick+0x64>)
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	4b11      	ldr	r3, [pc, #68]	; (8000824 <HAL_InitTick+0x60>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	4619      	mov	r1, r3
 80007e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 f915 	bl	8000a1e <HAL_SYSTICK_Config>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80007fa:	2301      	movs	r3, #1
 80007fc:	e00e      	b.n	800081c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	2b0f      	cmp	r3, #15
 8000802:	d80a      	bhi.n	800081a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000804:	2200      	movs	r2, #0
 8000806:	6879      	ldr	r1, [r7, #4]
 8000808:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800080c:	f000 f8ed 	bl	80009ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000810:	4a06      	ldr	r2, [pc, #24]	; (800082c <HAL_InitTick+0x68>)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000816:	2300      	movs	r3, #0
 8000818:	e000      	b.n	800081c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800081a:	2301      	movs	r3, #1
}
 800081c:	4618      	mov	r0, r3
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000060 	.word	0x20000060
 8000828:	20000058 	.word	0x20000058
 800082c:	2000005c 	.word	0x2000005c

08000830 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <HAL_IncTick+0x20>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	461a      	mov	r2, r3
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <HAL_IncTick+0x24>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4413      	add	r3, r2
 8000840:	4a04      	ldr	r2, [pc, #16]	; (8000854 <HAL_IncTick+0x24>)
 8000842:	6013      	str	r3, [r2, #0]
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	20000060 	.word	0x20000060
 8000854:	20000118 	.word	0x20000118

08000858 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  return uwTick;
 800085c:	4b03      	ldr	r3, [pc, #12]	; (800086c <HAL_GetTick+0x14>)
 800085e:	681b      	ldr	r3, [r3, #0]
}
 8000860:	4618      	mov	r0, r3
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	20000118 	.word	0x20000118

08000870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	f003 0307 	and.w	r3, r3, #7
 800087e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <__NVIC_SetPriorityGrouping+0x44>)
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000886:	68ba      	ldr	r2, [r7, #8]
 8000888:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800088c:	4013      	ands	r3, r2
 800088e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000898:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800089c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008a2:	4a04      	ldr	r2, [pc, #16]	; (80008b4 <__NVIC_SetPriorityGrouping+0x44>)
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	60d3      	str	r3, [r2, #12]
}
 80008a8:	bf00      	nop
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	e000ed00 	.word	0xe000ed00

080008b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008bc:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <__NVIC_GetPriorityGrouping+0x18>)
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	0a1b      	lsrs	r3, r3, #8
 80008c2:	f003 0307 	and.w	r3, r3, #7
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr
 80008d0:	e000ed00 	.word	0xe000ed00

080008d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	6039      	str	r1, [r7, #0]
 80008de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	db0a      	blt.n	80008fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	490c      	ldr	r1, [pc, #48]	; (8000920 <__NVIC_SetPriority+0x4c>)
 80008ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f2:	0112      	lsls	r2, r2, #4
 80008f4:	b2d2      	uxtb	r2, r2
 80008f6:	440b      	add	r3, r1
 80008f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008fc:	e00a      	b.n	8000914 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	b2da      	uxtb	r2, r3
 8000902:	4908      	ldr	r1, [pc, #32]	; (8000924 <__NVIC_SetPriority+0x50>)
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	f003 030f 	and.w	r3, r3, #15
 800090a:	3b04      	subs	r3, #4
 800090c:	0112      	lsls	r2, r2, #4
 800090e:	b2d2      	uxtb	r2, r2
 8000910:	440b      	add	r3, r1
 8000912:	761a      	strb	r2, [r3, #24]
}
 8000914:	bf00      	nop
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	e000e100 	.word	0xe000e100
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000928:	b480      	push	{r7}
 800092a:	b089      	sub	sp, #36	; 0x24
 800092c:	af00      	add	r7, sp, #0
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	f003 0307 	and.w	r3, r3, #7
 800093a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800093c:	69fb      	ldr	r3, [r7, #28]
 800093e:	f1c3 0307 	rsb	r3, r3, #7
 8000942:	2b04      	cmp	r3, #4
 8000944:	bf28      	it	cs
 8000946:	2304      	movcs	r3, #4
 8000948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	3304      	adds	r3, #4
 800094e:	2b06      	cmp	r3, #6
 8000950:	d902      	bls.n	8000958 <NVIC_EncodePriority+0x30>
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	3b03      	subs	r3, #3
 8000956:	e000      	b.n	800095a <NVIC_EncodePriority+0x32>
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800095c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000960:	69bb      	ldr	r3, [r7, #24]
 8000962:	fa02 f303 	lsl.w	r3, r2, r3
 8000966:	43da      	mvns	r2, r3
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	401a      	ands	r2, r3
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000970:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	fa01 f303 	lsl.w	r3, r1, r3
 800097a:	43d9      	mvns	r1, r3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000980:	4313      	orrs	r3, r2
         );
}
 8000982:	4618      	mov	r0, r3
 8000984:	3724      	adds	r7, #36	; 0x24
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
	...

08000990 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	3b01      	subs	r3, #1
 800099c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009a0:	d301      	bcc.n	80009a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009a2:	2301      	movs	r3, #1
 80009a4:	e00f      	b.n	80009c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009a6:	4a0a      	ldr	r2, [pc, #40]	; (80009d0 <SysTick_Config+0x40>)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3b01      	subs	r3, #1
 80009ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ae:	210f      	movs	r1, #15
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009b4:	f7ff ff8e 	bl	80008d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009b8:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <SysTick_Config+0x40>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009be:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <SysTick_Config+0x40>)
 80009c0:	2207      	movs	r2, #7
 80009c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009c4:	2300      	movs	r3, #0
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	e000e010 	.word	0xe000e010

080009d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f7ff ff47 	bl	8000870 <__NVIC_SetPriorityGrouping>
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b086      	sub	sp, #24
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	4603      	mov	r3, r0
 80009f2:	60b9      	str	r1, [r7, #8]
 80009f4:	607a      	str	r2, [r7, #4]
 80009f6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009f8:	f7ff ff5e 	bl	80008b8 <__NVIC_GetPriorityGrouping>
 80009fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	68b9      	ldr	r1, [r7, #8]
 8000a02:	6978      	ldr	r0, [r7, #20]
 8000a04:	f7ff ff90 	bl	8000928 <NVIC_EncodePriority>
 8000a08:	4602      	mov	r2, r0
 8000a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a0e:	4611      	mov	r1, r2
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff ff5f 	bl	80008d4 <__NVIC_SetPriority>
}
 8000a16:	bf00      	nop
 8000a18:	3718      	adds	r7, #24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b082      	sub	sp, #8
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f7ff ffb2 	bl	8000990 <SysTick_Config>
 8000a2c:	4603      	mov	r3, r0
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
	...

08000a38 <HAL_CRYP_Init>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Init(CRYP_HandleTypeDef *hcryp)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
#if defined(SAES)
  uint32_t tickstart;
#endif /* SAES */

  /* Check the CRYP handle allocation */
  if (hcryp == NULL)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d101      	bne.n	8000a4a <HAL_CRYP_Init+0x12>
  {
    return HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
 8000a48:	e0a7      	b.n	8000b9a <HAL_CRYP_Init+0x162>

    /* Init the low level hardware */
    hcryp->MspInitCallback(hcryp);
  }
#else
  if (hcryp->State == HAL_CRYP_STATE_RESET)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d106      	bne.n	8000a64 <HAL_CRYP_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcryp->Lock = HAL_UNLOCKED;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Init the low level hardware */
    HAL_CRYP_MspInit(hcryp);
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f7ff fd8e 	bl	8000580 <HAL_CRYP_MspInit>
  }
#endif /* (USE_HAL_CRYP_REGISTER_CALLBACKS) */

  if (hcryp->Instance == AES)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a4e      	ldr	r2, [pc, #312]	; (8000ba4 <HAL_CRYP_Init+0x16c>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d116      	bne.n	8000a9c <HAL_CRYP_Init+0x64>
  {
    /* Set the key size, data type and Algorithm */
    cr_value = (uint32_t)(hcryp->Init.DataType | hcryp->Init.KeySize | hcryp->Init.Algorithm | hcryp->Init.KeyMode);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	685a      	ldr	r2, [r3, #4]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	689b      	ldr	r3, [r3, #8]
 8000a76:	431a      	orrs	r2, r3
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	695b      	ldr	r3, [r3, #20]
 8000a7c:	431a      	orrs	r2, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4313      	orrs	r3, r2
 8000a84:	60bb      	str	r3, [r7, #8]
    /* Set the key size, data type, algorithm and mode */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_KMOD | AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD, cr_value);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	4b46      	ldr	r3, [pc, #280]	; (8000ba8 <HAL_CRYP_Init+0x170>)
 8000a8e:	4013      	ands	r3, r2
 8000a90:	687a      	ldr	r2, [r7, #4]
 8000a92:	6812      	ldr	r2, [r2, #0]
 8000a94:	68b9      	ldr	r1, [r7, #8]
 8000a96:	430b      	orrs	r3, r1
 8000a98:	6013      	str	r3, [r2, #0]
 8000a9a:	e070      	b.n	8000b7e <HAL_CRYP_Init+0x146>
  }
  else
  {
    /* SAES is initializing, fetching random number from the RNG */
    tickstart = HAL_GetTick();
 8000a9c:	f7ff fedc 	bl	8000858 <HAL_GetTick>
 8000aa0:	60f8      	str	r0, [r7, #12]
    while (HAL_IS_BIT_SET(hcryp->Instance->SR, CRYP_FLAG_BUSY))
 8000aa2:	e01e      	b.n	8000ae2 <HAL_CRYP_Init+0xaa>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CRYP_GENERAL_TIMEOUT)
 8000aa4:	f7ff fed8 	bl	8000858 <HAL_GetTick>
 8000aa8:	4602      	mov	r2, r0
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	2b52      	cmp	r3, #82	; 0x52
 8000ab0:	d917      	bls.n	8000ae2 <HAL_CRYP_Init+0xaa>
      {
        __HAL_CRYP_DISABLE(hcryp);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f022 0201 	bic.w	r2, r2, #1
 8000ac0:	601a      	str	r2, [r3, #0]
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ac6:	f043 0210 	orr.w	r2, r3, #16
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	65da      	str	r2, [r3, #92]	; 0x5c
        hcryp->State = HAL_CRYP_STATE_READY;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
        __HAL_UNLOCK(hcryp);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e05b      	b.n	8000b9a <HAL_CRYP_Init+0x162>
    while (HAL_IS_BIT_SET(hcryp->Instance->SR, CRYP_FLAG_BUSY))
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	f003 0308 	and.w	r3, r3, #8
 8000aec:	2b08      	cmp	r3, #8
 8000aee:	d0d9      	beq.n	8000aa4 <HAL_CRYP_Init+0x6c>
      }
    }
    /* SAES is initializing, no random number fetching error flagged */
    tickstart = HAL_GetTick();
 8000af0:	f7ff feb2 	bl	8000858 <HAL_GetTick>
 8000af4:	60f8      	str	r0, [r7, #12]
    while (HAL_IS_BIT_SET(hcryp->Instance->ISR, CRYP_FLAG_RNGEIF))
 8000af6:	e01e      	b.n	8000b36 <HAL_CRYP_Init+0xfe>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CRYP_GENERAL_TIMEOUT)
 8000af8:	f7ff feae 	bl	8000858 <HAL_GetTick>
 8000afc:	4602      	mov	r2, r0
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	2b52      	cmp	r3, #82	; 0x52
 8000b04:	d917      	bls.n	8000b36 <HAL_CRYP_Init+0xfe>
      {
        __HAL_CRYP_DISABLE(hcryp);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f022 0201 	bic.w	r2, r2, #1
 8000b14:	601a      	str	r2, [r3, #0]
        hcryp->ErrorCode |= HAL_CRYP_ERROR_RNG;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b1a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	65da      	str	r2, [r3, #92]	; 0x5c
        hcryp->State = HAL_CRYP_STATE_READY;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2201      	movs	r2, #1
 8000b26:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
        __HAL_UNLOCK(hcryp);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
 8000b34:	e031      	b.n	8000b9a <HAL_CRYP_Init+0x162>
    while (HAL_IS_BIT_SET(hcryp->Instance->ISR, CRYP_FLAG_RNGEIF))
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 8000b3e:	f003 0308 	and.w	r3, r3, #8
 8000b42:	2b08      	cmp	r3, #8
 8000b44:	d0d8      	beq.n	8000af8 <HAL_CRYP_Init+0xc0>
      }
    }
    cr_value = (uint32_t)(hcryp->Init.KeyMode | hcryp->Init.DataType | hcryp->Init.KeySize | \
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	431a      	orrs	r2, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	431a      	orrs	r2, r3
                          hcryp->Init.Algorithm | hcryp->Init.KeySelect | hcryp->Init.KeyProtection);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	695b      	ldr	r3, [r3, #20]
    cr_value = (uint32_t)(hcryp->Init.KeyMode | hcryp->Init.DataType | hcryp->Init.KeySize | \
 8000b5a:	431a      	orrs	r2, r3
                          hcryp->Init.Algorithm | hcryp->Init.KeySelect | hcryp->Init.KeyProtection);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b60:	431a      	orrs	r2, r3
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    cr_value = (uint32_t)(hcryp->Init.KeyMode | hcryp->Init.DataType | hcryp->Init.KeySize | \
 8000b66:	4313      	orrs	r3, r2
 8000b68:	60bb      	str	r3, [r7, #8]
    /* Set the key size, data type, algorithm, Key selection and key protection */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_KMOD | AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD | AES_CR_KEYSEL |
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <HAL_CRYP_Init+0x174>)
 8000b72:	4013      	ands	r3, r2
 8000b74:	687a      	ldr	r2, [r7, #4]
 8000b76:	6812      	ldr	r2, [r2, #0]
 8000b78:	68b9      	ldr	r1, [r7, #8]
 8000b7a:	430b      	orrs	r3, r1
 8000b7c:	6013      	str	r3, [r2, #0]
               AES_CR_KEYPROT, cr_value);
  }
  /* Reset Error Code field */
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2200      	movs	r2, #0
 8000b82:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Reset peripheral Key and IV configuration flag */
  hcryp->KeyIVConfig = 0U;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2200      	movs	r2, #0
 8000b88:	661a      	str	r2, [r3, #96]	; 0x60

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Set the default CRYP phase */
  hcryp->Phase = CRYP_PHASE_READY;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2201      	movs	r2, #1
 8000b96:	64da      	str	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	420c0000 	.word	0x420c0000
 8000ba8:	fcfaff99 	.word	0xfcfaff99
 8000bac:	8cf2ff99 	.word	0x8cf2ff99

08000bb0 <HAL_CRYP_Encrypt>:
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Encrypt(CRYP_HandleTypeDef *hcryp, uint32_t *pInput, uint16_t Size, uint32_t *pOutput,
                                   uint32_t Timeout)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	80fb      	strh	r3, [r7, #6]

  /* Check input buffer size */
  assert_param(IS_CRYP_BUFFERSIZE(algo_assert, hcryp->Init.DataWidthUnit, Size));
#endif /* USE_FULL_ASSERT */

  if (hcryp->State == HAL_CRYP_STATE_READY)
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	f040 808e 	bne.w	8000cea <HAL_CRYP_Encrypt+0x13a>
  {
    /* Change state Busy */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	2202      	movs	r2, #2
 8000bd2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
    __HAL_LOCK(hcryp);
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d101      	bne.n	8000be4 <HAL_CRYP_Encrypt+0x34>
 8000be0:	2302      	movs	r3, #2
 8000be2:	e08b      	b.n	8000cfc <HAL_CRYP_Encrypt+0x14c>
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	2201      	movs	r2, #1
 8000be8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Reset CrypInCount, CrypOutCount and Initialize pCrypInBuffPtr and pCrypOutBuffPtr parameters */
    hcryp->CrypInCount = 0U;
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hcryp->CrypOutCount = 0U;
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    hcryp->pCrypInBuffPtr = pInput;
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	68ba      	ldr	r2, [r7, #8]
 8000c00:	63da      	str	r2, [r3, #60]	; 0x3c
    hcryp->pCrypOutBuffPtr = pOutput;
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	683a      	ldr	r2, [r7, #0]
 8000c06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Calculate Size parameter in Byte */
    if (hcryp->Init.DataWidthUnit == CRYP_DATAWIDTHUNIT_WORD)
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d106      	bne.n	8000c1e <HAL_CRYP_Encrypt+0x6e>
    {
      hcryp->Size = Size * 4U;
 8000c10:	88fb      	ldrh	r3, [r7, #6]
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	b29a      	uxth	r2, r3
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 8000c1c:	e003      	b.n	8000c26 <HAL_CRYP_Encrypt+0x76>
    }
    else
    {
      hcryp->Size = Size;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	88fa      	ldrh	r2, [r7, #6]
 8000c22:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    if (hcryp->Instance == AES)
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a36      	ldr	r2, [pc, #216]	; (8000d04 <HAL_CRYP_Encrypt+0x154>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d108      	bne.n	8000c42 <HAL_CRYP_Encrypt+0x92>
    {
      /* Set the operating mode */
      MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_ENCRYPT);
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f022 0218 	bic.w	r2, r2, #24
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	e009      	b.n	8000c56 <HAL_CRYP_Encrypt+0xa6>
    }
    else
    {
      /* Set the operating mode and normal key selection */
      MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE | AES_CR_KMOD, CRYP_OPERATINGMODE_ENCRYPT | CRYP_KEYMODE_NORMAL);
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	68fa      	ldr	r2, [r7, #12]
 8000c4a:	6812      	ldr	r2, [r2, #0]
 8000c4c:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000c50:	f023 0318 	bic.w	r3, r3, #24
 8000c54:	6013      	str	r3, [r2, #0]
    }
    /* Algo get algorithm selected */
    algo = hcryp->Instance->CR & AES_CR_CHMOD;
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	4b2a      	ldr	r3, [pc, #168]	; (8000d08 <HAL_CRYP_Encrypt+0x158>)
 8000c5e:	4013      	ands	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]

    switch (algo)
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c68:	d023      	beq.n	8000cb2 <HAL_CRYP_Encrypt+0x102>
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c70:	d826      	bhi.n	8000cc0 <HAL_CRYP_Encrypt+0x110>
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	2b60      	cmp	r3, #96	; 0x60
 8000c76:	d015      	beq.n	8000ca4 <HAL_CRYP_Encrypt+0xf4>
 8000c78:	693b      	ldr	r3, [r7, #16]
 8000c7a:	2b60      	cmp	r3, #96	; 0x60
 8000c7c:	d820      	bhi.n	8000cc0 <HAL_CRYP_Encrypt+0x110>
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	2b40      	cmp	r3, #64	; 0x40
 8000c82:	d008      	beq.n	8000c96 <HAL_CRYP_Encrypt+0xe6>
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	2b40      	cmp	r3, #64	; 0x40
 8000c88:	d81a      	bhi.n	8000cc0 <HAL_CRYP_Encrypt+0x110>
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d002      	beq.n	8000c96 <HAL_CRYP_Encrypt+0xe6>
 8000c90:	693b      	ldr	r3, [r7, #16]
 8000c92:	2b20      	cmp	r3, #32
 8000c94:	d114      	bne.n	8000cc0 <HAL_CRYP_Encrypt+0x110>
    {
      case CRYP_AES_ECB:
      case CRYP_AES_CBC:
      case CRYP_AES_CTR:
        /* AES encryption */
        status = CRYP_AES_Encrypt(hcryp, Timeout);
 8000c96:	6a39      	ldr	r1, [r7, #32]
 8000c98:	68f8      	ldr	r0, [r7, #12]
 8000c9a:	f000 f8df 	bl	8000e5c <CRYP_AES_Encrypt>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	75fb      	strb	r3, [r7, #23]
        break;
 8000ca2:	e016      	b.n	8000cd2 <HAL_CRYP_Encrypt+0x122>

      case CRYP_AES_GCM_GMAC:
        /* AES GCM encryption */
        status = CRYP_AESGCM_Process(hcryp, Timeout);
 8000ca4:	6a39      	ldr	r1, [r7, #32]
 8000ca6:	68f8      	ldr	r0, [r7, #12]
 8000ca8:	f000 fc7f 	bl	80015aa <CRYP_AESGCM_Process>
 8000cac:	4603      	mov	r3, r0
 8000cae:	75fb      	strb	r3, [r7, #23]
        break;
 8000cb0:	e00f      	b.n	8000cd2 <HAL_CRYP_Encrypt+0x122>

      case CRYP_AES_CCM:
        /* AES CCM encryption */
        status = CRYP_AESCCM_Process(hcryp, Timeout);
 8000cb2:	6a39      	ldr	r1, [r7, #32]
 8000cb4:	68f8      	ldr	r0, [r7, #12]
 8000cb6:	f000 fe0d 	bl	80018d4 <CRYP_AESCCM_Process>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	75fb      	strb	r3, [r7, #23]
        break;
 8000cbe:	e008      	b.n	8000cd2 <HAL_CRYP_Encrypt+0x122>

      default:
        hcryp->ErrorCode |= HAL_CRYP_ERROR_NOT_SUPPORTED;
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cc4:	f043 0220 	orr.w	r2, r3, #32
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	65da      	str	r2, [r3, #92]	; 0x5c
        status = HAL_ERROR;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	75fb      	strb	r3, [r7, #23]
        break;
 8000cd0:	bf00      	nop
    }

    if (status == HAL_OK)
 8000cd2:	7dfb      	ldrb	r3, [r7, #23]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d110      	bne.n	8000cfa <HAL_CRYP_Encrypt+0x14a>
    {
      /* Change the CRYP peripheral state */
      hcryp->State = HAL_CRYP_STATE_READY;
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	2201      	movs	r2, #1
 8000cdc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
      __HAL_UNLOCK(hcryp);
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8000ce8:	e007      	b.n	8000cfa <HAL_CRYP_Encrypt+0x14a>
    }
  }
  else
  {
    /* Busy error code field */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cee:	f043 0208 	orr.w	r2, r3, #8
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	65da      	str	r2, [r3, #92]	; 0x5c
    status = HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3718      	adds	r7, #24
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	420c0000 	.word	0x420c0000
 8000d08:	00010060 	.word	0x00010060

08000d0c <HAL_CRYP_Decrypt>:
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Decrypt(CRYP_HandleTypeDef *hcryp, uint32_t *pInput, uint16_t Size, uint32_t *pOutput,
                                   uint32_t Timeout)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	603b      	str	r3, [r7, #0]
 8000d18:	4613      	mov	r3, r2
 8000d1a:	80fb      	strh	r3, [r7, #6]

  /* Check input buffer size */
  assert_param(IS_CRYP_BUFFERSIZE(algo_assert, hcryp->Init.DataWidthUnit, Size));
#endif /* USE_FULL_ASSERT */

  if (hcryp->State == HAL_CRYP_STATE_READY)
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d17f      	bne.n	8000e28 <HAL_CRYP_Decrypt+0x11c>
  {
    /* Change state Busy */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	2202      	movs	r2, #2
 8000d2c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
    __HAL_LOCK(hcryp);
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d101      	bne.n	8000d3e <HAL_CRYP_Decrypt+0x32>
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	e07d      	b.n	8000e3a <HAL_CRYP_Decrypt+0x12e>
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	2201      	movs	r2, #1
 8000d42:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /*  Reset CrypInCount, CrypOutCount and Initialize pCrypInBuffPtr and pCrypOutBuffPtr  parameters*/
    hcryp->CrypInCount = 0U;
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hcryp->CrypOutCount = 0U;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	2200      	movs	r2, #0
 8000d52:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    hcryp->pCrypInBuffPtr = pInput;
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	68ba      	ldr	r2, [r7, #8]
 8000d5a:	63da      	str	r2, [r3, #60]	; 0x3c
    hcryp->pCrypOutBuffPtr = pOutput;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	683a      	ldr	r2, [r7, #0]
 8000d60:	641a      	str	r2, [r3, #64]	; 0x40

    /*  Calculate Size parameter in Byte*/
    if (hcryp->Init.DataWidthUnit == CRYP_DATAWIDTHUNIT_WORD)
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d106      	bne.n	8000d78 <HAL_CRYP_Decrypt+0x6c>
    {
      hcryp->Size = Size * 4U;
 8000d6a:	88fb      	ldrh	r3, [r7, #6]
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	b29a      	uxth	r2, r3
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 8000d76:	e003      	b.n	8000d80 <HAL_CRYP_Decrypt+0x74>
    }
    else
    {
      hcryp->Size = Size;
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	88fa      	ldrh	r2, [r7, #6]
 8000d7c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    /* Set Decryption operating mode*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f023 0218 	bic.w	r2, r3, #24
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f042 0210 	orr.w	r2, r2, #16
 8000d92:	601a      	str	r2, [r3, #0]

    /* algo get algorithm selected */
    algo = hcryp->Instance->CR & AES_CR_CHMOD;
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	4b2a      	ldr	r3, [pc, #168]	; (8000e44 <HAL_CRYP_Decrypt+0x138>)
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]

    switch (algo)
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000da6:	d023      	beq.n	8000df0 <HAL_CRYP_Decrypt+0xe4>
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dae:	d826      	bhi.n	8000dfe <HAL_CRYP_Decrypt+0xf2>
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	2b60      	cmp	r3, #96	; 0x60
 8000db4:	d015      	beq.n	8000de2 <HAL_CRYP_Decrypt+0xd6>
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	2b60      	cmp	r3, #96	; 0x60
 8000dba:	d820      	bhi.n	8000dfe <HAL_CRYP_Decrypt+0xf2>
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	2b40      	cmp	r3, #64	; 0x40
 8000dc0:	d008      	beq.n	8000dd4 <HAL_CRYP_Decrypt+0xc8>
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	2b40      	cmp	r3, #64	; 0x40
 8000dc6:	d81a      	bhi.n	8000dfe <HAL_CRYP_Decrypt+0xf2>
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d002      	beq.n	8000dd4 <HAL_CRYP_Decrypt+0xc8>
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	2b20      	cmp	r3, #32
 8000dd2:	d114      	bne.n	8000dfe <HAL_CRYP_Decrypt+0xf2>
    {
      case CRYP_AES_ECB:
      case CRYP_AES_CBC:
      case CRYP_AES_CTR:
        /* AES decryption */
        status = CRYP_AES_Decrypt(hcryp, Timeout);
 8000dd4:	6a39      	ldr	r1, [r7, #32]
 8000dd6:	68f8      	ldr	r0, [r7, #12]
 8000dd8:	f000 f930 	bl	800103c <CRYP_AES_Decrypt>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	75fb      	strb	r3, [r7, #23]
        break;
 8000de0:	e016      	b.n	8000e10 <HAL_CRYP_Decrypt+0x104>

      case CRYP_AES_GCM_GMAC:
        /* AES GCM decryption */
        status = CRYP_AESGCM_Process(hcryp, Timeout);
 8000de2:	6a39      	ldr	r1, [r7, #32]
 8000de4:	68f8      	ldr	r0, [r7, #12]
 8000de6:	f000 fbe0 	bl	80015aa <CRYP_AESGCM_Process>
 8000dea:	4603      	mov	r3, r0
 8000dec:	75fb      	strb	r3, [r7, #23]
        break;
 8000dee:	e00f      	b.n	8000e10 <HAL_CRYP_Decrypt+0x104>

      case CRYP_AES_CCM:
        /* AES CCM decryption */
        status = CRYP_AESCCM_Process(hcryp, Timeout);
 8000df0:	6a39      	ldr	r1, [r7, #32]
 8000df2:	68f8      	ldr	r0, [r7, #12]
 8000df4:	f000 fd6e 	bl	80018d4 <CRYP_AESCCM_Process>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	75fb      	strb	r3, [r7, #23]
        break;
 8000dfc:	e008      	b.n	8000e10 <HAL_CRYP_Decrypt+0x104>

      default:
        hcryp->ErrorCode |= HAL_CRYP_ERROR_NOT_SUPPORTED;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e02:	f043 0220 	orr.w	r2, r3, #32
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	65da      	str	r2, [r3, #92]	; 0x5c
        status = HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	75fb      	strb	r3, [r7, #23]
        break;
 8000e0e:	bf00      	nop
    }

    if (status == HAL_OK)
 8000e10:	7dfb      	ldrb	r3, [r7, #23]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d110      	bne.n	8000e38 <HAL_CRYP_Decrypt+0x12c>
    {
      /* Change the CRYP peripheral state */
      hcryp->State = HAL_CRYP_STATE_READY;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	2201      	movs	r2, #1
 8000e1a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
      __HAL_UNLOCK(hcryp);
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	2200      	movs	r2, #0
 8000e22:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8000e26:	e007      	b.n	8000e38 <HAL_CRYP_Decrypt+0x12c>
    }
  }
  else
  {
    /* Busy error code field */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e2c:	f043 0208 	orr.w	r2, r3, #8
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	65da      	str	r2, [r3, #92]	; 0x5c
    status = HAL_ERROR;
 8000e34:	2301      	movs	r3, #1
 8000e36:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8000e38:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3718      	adds	r7, #24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	00010060 	.word	0x00010060

08000e48 <HAL_CRYP_ErrorCallback>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module.
  * @retval None
  */
__weak void HAL_CRYP_ErrorCallback(CRYP_HandleTypeDef *hcryp)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  UNUSED(hcryp);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_CRYP_ErrorCallback can be implemented in the user file
   */
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <CRYP_AES_Encrypt>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure
  * @param  Timeout specify Timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AES_Encrypt(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	6039      	str	r1, [r7, #0]
  uint16_t incount;  /* Temporary CrypInCount Value */
  uint16_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t dokeyivconfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 8000e66:	2301      	movs	r3, #1
 8000e68:	613b      	str	r3, [r7, #16]
  uint32_t tickstart;

  if ((hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE) || (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE))
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d003      	beq.n	8000e7a <CRYP_AES_Encrypt+0x1e>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e76:	2b04      	cmp	r3, #4
 8000e78:	d109      	bne.n	8000e8e <CRYP_AES_Encrypt+0x32>
  {
    if (hcryp->KeyIVConfig == 1U)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d102      	bne.n	8000e88 <CRYP_AES_Encrypt+0x2c>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      dokeyivconfig = 0U;
 8000e82:	2300      	movs	r3, #0
 8000e84:	613b      	str	r3, [r7, #16]
 8000e86:	e002      	b.n	8000e8e <CRYP_AES_Encrypt+0x32>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  if (dokeyivconfig == 1U)
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d17a      	bne.n	8000f8a <CRYP_AES_Encrypt+0x12e>
  {
    if ((hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE) || \
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d003      	beq.n	8000ea4 <CRYP_AES_Encrypt+0x48>
        (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ALWAYS))
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    if ((hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE) || \
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d160      	bne.n	8000f66 <CRYP_AES_Encrypt+0x10a>
    {
      if (hcryp->Instance == AES)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a63      	ldr	r2, [pc, #396]	; (8001038 <CRYP_AES_Encrypt+0x1dc>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d114      	bne.n	8000ed8 <CRYP_AES_Encrypt+0x7c>
      {
        /* Set the Key */
        if (hcryp->Init.KeyMode != CRYP_KEYMODE_SHARED)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000eb6:	d006      	beq.n	8000ec6 <CRYP_AES_Encrypt+0x6a>
        {
          CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f000 faec 	bl	800149c <CRYP_SetKey>
 8000ec4:	e048      	b.n	8000f58 <CRYP_AES_Encrypt+0xfc>
        }
        else /* After sharing the key, AES should set KMOD[1:0] to 00.*/
        {
          hcryp->Instance->CR &=  ~CRYP_KEYMODE_SHARED;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	e03f      	b.n	8000f58 <CRYP_AES_Encrypt+0xfc>
        }
      }
      else
      {
        /* We should re-write Key, in the case where we change key after first operation */
        if ((hcryp->Init.KeySelect == CRYP_KEYSEL_NORMAL) && (hcryp->Init.KeyMode == CRYP_KEYMODE_NORMAL))
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d109      	bne.n	8000ef4 <CRYP_AES_Encrypt+0x98>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d105      	bne.n	8000ef4 <CRYP_AES_Encrypt+0x98>
        {
          /* Set the Key */
          CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	4619      	mov	r1, r3
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f000 fad4 	bl	800149c <CRYP_SetKey>
        }
        /* Get tick */
        tickstart = HAL_GetTick();
 8000ef4:	f7ff fcb0 	bl	8000858 <HAL_GetTick>
 8000ef8:	60f8      	str	r0, [r7, #12]

        while (HAL_IS_BIT_CLR(hcryp->Instance->SR, CRYP_FLAG_KEYVALID))
 8000efa:	e026      	b.n	8000f4a <CRYP_AES_Encrypt+0xee>
        {
          /* Check for the Timeout */
          if (Timeout != HAL_MAX_DELAY)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f02:	d022      	beq.n	8000f4a <CRYP_AES_Encrypt+0xee>
          {
            if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8000f04:	f7ff fca8 	bl	8000858 <HAL_GetTick>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	683a      	ldr	r2, [r7, #0]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d302      	bcc.n	8000f1a <CRYP_AES_Encrypt+0xbe>
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d117      	bne.n	8000f4a <CRYP_AES_Encrypt+0xee>
            {
              /* Disable the CRYP peripheral clock */
              __HAL_CRYP_DISABLE(hcryp);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f022 0201 	bic.w	r2, r2, #1
 8000f28:	601a      	str	r2, [r3, #0]

              /* Change state */
              hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f2e:	f043 0210 	orr.w	r2, r3, #16
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	65da      	str	r2, [r3, #92]	; 0x5c
              hcryp->State = HAL_CRYP_STATE_READY;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2201      	movs	r2, #1
 8000f3a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
              __HAL_UNLOCK(hcryp);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2200      	movs	r2, #0
 8000f42:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
              return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e071      	b.n	800102e <CRYP_AES_Encrypt+0x1d2>
        while (HAL_IS_BIT_CLR(hcryp->Instance->SR, CRYP_FLAG_KEYVALID))
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d0d1      	beq.n	8000efc <CRYP_AES_Encrypt+0xa0>
            }
          }
        }
      }
      if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	695b      	ldr	r3, [r3, #20]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d002      	beq.n	8000f66 <CRYP_AES_Encrypt+0x10a>
      {
        /* Set the Initialization Vector */
        CRYP_SetIV(hcryp);
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f000 fafc 	bl	800155e <CRYP_SetIV>
      }
    }
    /* key & IV configuration for CBC and CTR in interleave mode */
    if (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f6a:	2b04      	cmp	r3, #4
 8000f6c:	d117      	bne.n	8000f9e <CRYP_AES_Encrypt+0x142>
    {
      /* Set the Key */
      CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	4619      	mov	r1, r3
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f000 fa91 	bl	800149c <CRYP_SetKey>
      if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	695b      	ldr	r3, [r3, #20]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d00d      	beq.n	8000f9e <CRYP_AES_Encrypt+0x142>
      {
        /* Set the Initialization Vector*/
        CRYP_SetIV(hcryp);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f000 faeb 	bl	800155e <CRYP_SetIV>
 8000f88:	e009      	b.n	8000f9e <CRYP_AES_Encrypt+0x142>
    }
  } /* If (dokeyivconfig == 1U) */
  else
  {
    /* interleave mode Key configuration  */
    if (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	d105      	bne.n	8000f9e <CRYP_AES_Encrypt+0x142>
    {
      /* Set the Key */
      CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	4619      	mov	r1, r3
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f000 fa7f 	bl	800149c <CRYP_SetKey>
    }
  }
  /* Peripheral Key configuration to not do, IV to configure for CBC */
  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYNOCONFIG)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d106      	bne.n	8000fb4 <CRYP_AES_Encrypt+0x158>
  {
    if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d002      	beq.n	8000fb4 <CRYP_AES_Encrypt+0x158>
    {
      /* Set the Initialization Vector*/
      CRYP_SetIV(hcryp);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f000 fad5 	bl	800155e <CRYP_SetIV>
    }
  }

  /* Set the phase */
  hcryp->Phase = CRYP_PHASE_PROCESS;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2202      	movs	r2, #2
 8000fb8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable CRYP */
  __HAL_CRYP_ENABLE(hcryp);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f042 0201 	orr.w	r2, r2, #1
 8000fc8:	601a      	str	r2, [r3, #0]

  incount = hcryp->CrypInCount;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8000fd0:	82fb      	strh	r3, [r7, #22]
  outcount = hcryp->CrypOutCount;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8000fd8:	82bb      	strh	r3, [r7, #20]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 8000fda:	e00b      	b.n	8000ff4 <CRYP_AES_Encrypt+0x198>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 8000fdc:	6839      	ldr	r1, [r7, #0]
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f000 f9ac 	bl	800133c <CRYP_AES_ProcessData>
    incount = hcryp->CrypInCount;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8000fea:	82fb      	strh	r3, [r7, #22]
    outcount = hcryp->CrypOutCount;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8000ff2:	82bb      	strh	r3, [r7, #20]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8000ffa:	089b      	lsrs	r3, r3, #2
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	8afa      	ldrh	r2, [r7, #22]
 8001000:	429a      	cmp	r2, r3
 8001002:	d207      	bcs.n	8001014 <CRYP_AES_Encrypt+0x1b8>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800100a:	089b      	lsrs	r3, r3, #2
 800100c:	b29b      	uxth	r3, r3
 800100e:	8aba      	ldrh	r2, [r7, #20]
 8001010:	429a      	cmp	r2, r3
 8001012:	d3e3      	bcc.n	8000fdc <CRYP_AES_Encrypt+0x180>
  }

  /* Disable CRYP */
  __HAL_CRYP_DISABLE(hcryp);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f022 0201 	bic.w	r2, r2, #1
 8001022:	601a      	str	r2, [r3, #0]

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2201      	movs	r2, #1
 8001028:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  return HAL_OK;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	420c0000 	.word	0x420c0000

0800103c <CRYP_AES_Decrypt>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AES_Decrypt(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  uint16_t incount;  /* Temporary CrypInCount Value */
  uint16_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t dokeyivconfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 8001046:	2301      	movs	r3, #1
 8001048:	60bb      	str	r3, [r7, #8]

  if ((hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE) || (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800104e:	2b01      	cmp	r3, #1
 8001050:	d003      	beq.n	800105a <CRYP_AES_Decrypt+0x1e>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001056:	2b04      	cmp	r3, #4
 8001058:	d109      	bne.n	800106e <CRYP_AES_Decrypt+0x32>
  {
    if (hcryp->KeyIVConfig == 1U)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800105e:	2b01      	cmp	r3, #1
 8001060:	d102      	bne.n	8001068 <CRYP_AES_Decrypt+0x2c>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      dokeyivconfig = 0U;
 8001062:	2300      	movs	r3, #0
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	e002      	b.n	800106e <CRYP_AES_Decrypt+0x32>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2201      	movs	r2, #1
 800106c:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  if (dokeyivconfig == 1U)
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	2b01      	cmp	r3, #1
 8001072:	f040 80ce 	bne.w	8001212 <CRYP_AES_Decrypt+0x1d6>
  {
    if (hcryp->Instance == AES)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a8b      	ldr	r2, [pc, #556]	; (80012a8 <CRYP_AES_Decrypt+0x26c>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d17b      	bne.n	8001178 <CRYP_AES_Decrypt+0x13c>
    {
      /*  Key preparation for ECB/CBC */
      if (hcryp->Init.Algorithm != CRYP_AES_CTR)   /*ECB or CBC*/
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	695b      	ldr	r3, [r3, #20]
 8001084:	2b40      	cmp	r3, #64	; 0x40
 8001086:	d05e      	beq.n	8001146 <CRYP_AES_Decrypt+0x10a>
      {
        /* key preparation for decryption, operating mode 2*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_KMOD, CRYP_KEYMODE_NORMAL);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001096:	601a      	str	r2, [r3, #0]
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f023 0218 	bic.w	r2, r3, #24
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f042 0208 	orr.w	r2, r2, #8
 80010aa:	601a      	str	r2, [r3, #0]

        /* Set the Key */
        if ((hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE) || \
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d003      	beq.n	80010bc <CRYP_AES_Decrypt+0x80>
            (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ALWAYS))
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if ((hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE) || \
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d114      	bne.n	80010e6 <CRYP_AES_Decrypt+0xaa>
        {
          if (hcryp->Init.KeyMode != CRYP_KEYMODE_SHARED)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80010c4:	d006      	beq.n	80010d4 <CRYP_AES_Decrypt+0x98>
          {
            CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	4619      	mov	r1, r3
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f000 f9e5 	bl	800149c <CRYP_SetKey>
          if (hcryp->Init.KeyMode != CRYP_KEYMODE_SHARED)
 80010d2:	e012      	b.n	80010fa <CRYP_AES_Decrypt+0xbe>
          }
          else /*after sharing the key, AES should set KMOD[1:0] to 00.*/
          {
            hcryp->Instance->CR &=  ~CRYP_KEYMODE_SHARED;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80010e2:	601a      	str	r2, [r3, #0]
          if (hcryp->Init.KeyMode != CRYP_KEYMODE_SHARED)
 80010e4:	e009      	b.n	80010fa <CRYP_AES_Decrypt+0xbe>
          }
        }

        /* interleave mode Key configuration  */
        else if (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ea:	2b04      	cmp	r3, #4
 80010ec:	d105      	bne.n	80010fa <CRYP_AES_Decrypt+0xbe>
        {
          /* Set the Key */
          CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	4619      	mov	r1, r3
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f000 f9d1 	bl	800149c <CRYP_SetKey>
        {
          /* Nothing to do */
        }

        /* Enable CRYP */
        __HAL_CRYP_ENABLE(hcryp);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f042 0201 	orr.w	r2, r2, #1
 8001108:	601a      	str	r2, [r3, #0]

        /* Wait for CCF flag to be raised */
        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 800110a:	6839      	ldr	r1, [r7, #0]
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f000 ff41 	bl	8001f94 <CRYP_WaitOnCCFlag>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <CRYP_AES_Decrypt+0xe0>
        {
          return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e10a      	b.n	8001332 <CRYP_AES_Decrypt+0x2f6>
        }
        /* Clear CCF Flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f8d3 2308 	ldr.w	r2, [r3, #776]	; 0x308
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f042 0201 	orr.w	r2, r2, #1
 800112c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Return to decryption operating mode(Mode 3)*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f023 0218 	bic.w	r2, r3, #24
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f042 0210 	orr.w	r2, r2, #16
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	e05d      	b.n	8001202 <CRYP_AES_Decrypt+0x1c6>
      }
      else  /*Algorithm CTR */
      {
        /* Set the Key */
        if (hcryp->Init.KeyIVConfigSkip != CRYP_KEYNOCONFIG)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800114a:	2b02      	cmp	r3, #2
 800114c:	d059      	beq.n	8001202 <CRYP_AES_Decrypt+0x1c6>
        {
          if (hcryp->Init.KeyMode != CRYP_KEYMODE_SHARED)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001156:	d006      	beq.n	8001166 <CRYP_AES_Decrypt+0x12a>
          {
            CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	4619      	mov	r1, r3
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f000 f99c 	bl	800149c <CRYP_SetKey>
 8001164:	e04d      	b.n	8001202 <CRYP_AES_Decrypt+0x1c6>
          }
          else /*after sharing the key, AES should set KMOD[1:0] to 00.*/
          {
            hcryp->Instance->CR &=  ~CRYP_KEYMODE_SHARED;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	e044      	b.n	8001202 <CRYP_AES_Decrypt+0x1c6>
        }
      }
    }
    else /*SAES*/
    {
      if (hcryp->Init.Algorithm != CRYP_AES_CTR)   /*ECB or CBC*/
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	695b      	ldr	r3, [r3, #20]
 800117c:	2b40      	cmp	r3, #64	; 0x40
 800117e:	d040      	beq.n	8001202 <CRYP_AES_Decrypt+0x1c6>
      {
        /* key preparation for decryption, operating mode 2*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f023 0218 	bic.w	r2, r3, #24
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f042 0208 	orr.w	r2, r2, #8
 8001192:	601a      	str	r2, [r3, #0]

        /* we should re-write Key, in the case where we change key after first operation*/
        if ((hcryp->Init.KeySelect == CRYP_KEYSEL_NORMAL) && (hcryp->Init.KeyMode == CRYP_KEYMODE_NORMAL))
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001198:	2b00      	cmp	r3, #0
 800119a:	d10d      	bne.n	80011b8 <CRYP_AES_Decrypt+0x17c>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d109      	bne.n	80011b8 <CRYP_AES_Decrypt+0x17c>
        {
          if (hcryp->Init.KeyIVConfigSkip != CRYP_KEYNOCONFIG)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d005      	beq.n	80011b8 <CRYP_AES_Decrypt+0x17c>
          {
            CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	4619      	mov	r1, r3
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f000 f972 	bl	800149c <CRYP_SetKey>
          }
        }

        /* Enable SAES */
        __HAL_CRYP_ENABLE(hcryp);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f042 0201 	orr.w	r2, r2, #1
 80011c6:	601a      	str	r2, [r3, #0]

        /* Wait for CCF flag to be raised */
        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 80011c8:	6839      	ldr	r1, [r7, #0]
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f000 fee2 	bl	8001f94 <CRYP_WaitOnCCFlag>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <CRYP_AES_Decrypt+0x19e>
        {
          return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e0ab      	b.n	8001332 <CRYP_AES_Decrypt+0x2f6>
        }
        /* Clear CCF Flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f8d3 2308 	ldr.w	r2, [r3, #776]	; 0x308
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f042 0201 	orr.w	r2, r2, #1
 80011ea:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /*  End of Key preparation for ECB/CBC */
        /* Return to decryption operating mode(Mode 3)*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f023 0218 	bic.w	r2, r3, #24
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f042 0210 	orr.w	r2, r2, #16
 8001200:	601a      	str	r2, [r3, #0]
      }
    }
    /* Set IV */
    if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d056      	beq.n	80012b8 <CRYP_AES_Decrypt+0x27c>
    {
      /* Set the Initialization Vector*/
      CRYP_SetIV(hcryp);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f000 f9a7 	bl	800155e <CRYP_SetIV>
 8001210:	e052      	b.n	80012b8 <CRYP_AES_Decrypt+0x27c>
  } /* if (dokeyivconfig == 1U) */

  else /* if (dokeyivconfig == 0U) */
  {
    /* interleave mode Key configuration  */
    if (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001216:	2b04      	cmp	r3, #4
 8001218:	d14e      	bne.n	80012b8 <CRYP_AES_Decrypt+0x27c>
    {
      if (hcryp->Instance == AES)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a22      	ldr	r2, [pc, #136]	; (80012a8 <CRYP_AES_Decrypt+0x26c>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d149      	bne.n	80012b8 <CRYP_AES_Decrypt+0x27c>
      {
        /*  Key preparation for ECB/CBC */
        if (hcryp->Init.Algorithm != CRYP_AES_CTR)   /*ECB or CBC*/
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	695b      	ldr	r3, [r3, #20]
 8001228:	2b40      	cmp	r3, #64	; 0x40
 800122a:	d03f      	beq.n	80012ac <CRYP_AES_Decrypt+0x270>
        {
          /* key preparation for decryption, operating mode 2*/
          MODIFY_REG(hcryp->Instance->CR, AES_CR_KMOD, CRYP_KEYMODE_NORMAL);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800123a:	601a      	str	r2, [r3, #0]
          MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f023 0218 	bic.w	r2, r3, #24
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f042 0208 	orr.w	r2, r2, #8
 800124e:	601a      	str	r2, [r3, #0]

          /* Set the Key */
          CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	4619      	mov	r1, r3
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f000 f920 	bl	800149c <CRYP_SetKey>

          /* Enable CRYP */
          __HAL_CRYP_ENABLE(hcryp);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f042 0201 	orr.w	r2, r2, #1
 800126a:	601a      	str	r2, [r3, #0]

          /* Wait for CCF flag to be raised */
          if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 800126c:	6839      	ldr	r1, [r7, #0]
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f000 fe90 	bl	8001f94 <CRYP_WaitOnCCFlag>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <CRYP_AES_Decrypt+0x242>
          {
            return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e059      	b.n	8001332 <CRYP_AES_Decrypt+0x2f6>
          }
          /* Clear CCF Flag */
          __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f8d3 2308 	ldr.w	r2, [r3, #776]	; 0x308
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f042 0201 	orr.w	r2, r2, #1
 800128e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

          /* Return to decryption operating mode(Mode 3)*/
          MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f023 0218 	bic.w	r2, r3, #24
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f042 0210 	orr.w	r2, r2, #16
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	e007      	b.n	80012b8 <CRYP_AES_Decrypt+0x27c>
 80012a8:	420c0000 	.word	0x420c0000
        }
        else  /*Algorithm CTR */
        {
          /* Set the Key */
          CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	4619      	mov	r1, r3
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f000 f8f2 	bl	800149c <CRYP_SetKey>
      }
    }

  }
  /* Set the phase */
  hcryp->Phase = CRYP_PHASE_PROCESS;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2202      	movs	r2, #2
 80012bc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable CRYP */
  __HAL_CRYP_ENABLE(hcryp);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f042 0201 	orr.w	r2, r2, #1
 80012cc:	601a      	str	r2, [r3, #0]

  incount = hcryp->CrypInCount;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80012d4:	81fb      	strh	r3, [r7, #14]
  outcount = hcryp->CrypOutCount;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80012dc:	81bb      	strh	r3, [r7, #12]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 80012de:	e00b      	b.n	80012f8 <CRYP_AES_Decrypt+0x2bc>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 80012e0:	6839      	ldr	r1, [r7, #0]
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f000 f82a 	bl	800133c <CRYP_AES_ProcessData>
    incount = hcryp->CrypInCount;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80012ee:	81fb      	strh	r3, [r7, #14]
    outcount = hcryp->CrypOutCount;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80012f6:	81bb      	strh	r3, [r7, #12]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80012fe:	089b      	lsrs	r3, r3, #2
 8001300:	b29b      	uxth	r3, r3
 8001302:	89fa      	ldrh	r2, [r7, #14]
 8001304:	429a      	cmp	r2, r3
 8001306:	d207      	bcs.n	8001318 <CRYP_AES_Decrypt+0x2dc>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800130e:	089b      	lsrs	r3, r3, #2
 8001310:	b29b      	uxth	r3, r3
 8001312:	89ba      	ldrh	r2, [r7, #12]
 8001314:	429a      	cmp	r2, r3
 8001316:	d3e3      	bcc.n	80012e0 <CRYP_AES_Decrypt+0x2a4>
  }
  /* Disable CRYP */
  __HAL_CRYP_DISABLE(hcryp);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f022 0201 	bic.w	r2, r2, #1
 8001326:	601a      	str	r2, [r3, #0]

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2201      	movs	r2, #1
 800132c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  return HAL_OK;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop

0800133c <CRYP_AES_ProcessData>:
  *         the configuration information for CRYP module
  * @param  Timeout Specify Timeout value
  * @retval None
  */
static void CRYP_AES_ProcessData(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b088      	sub	sp, #32
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]

  uint32_t temp[4];  /* Temporary CrypOutBuff */
  uint32_t i;

  /* Write the input block in the IN FIFO */
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001350:	b29b      	uxth	r3, r3
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	441a      	add	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	6812      	ldr	r2, [r2, #0]
 800135c:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001364:	b29b      	uxth	r3, r3
 8001366:	3301      	adds	r3, #1
 8001368:	b29a      	uxth	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800137a:	b29b      	uxth	r3, r3
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	441a      	add	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6812      	ldr	r2, [r2, #0]
 8001386:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800138e:	b29b      	uxth	r3, r3
 8001390:	3301      	adds	r3, #1
 8001392:	b29a      	uxth	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	441a      	add	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	6812      	ldr	r2, [r2, #0]
 80013b0:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	3301      	adds	r3, #1
 80013bc:	b29a      	uxth	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	441a      	add	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	6812      	ldr	r2, [r2, #0]
 80013da:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	3301      	adds	r3, #1
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Wait for CCF flag to be raised */
  if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 80013ee:	6839      	ldr	r1, [r7, #0]
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f000 fdcf 	bl	8001f94 <CRYP_WaitOnCCFlag>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d002      	beq.n	8001402 <CRYP_AES_ProcessData+0xc6>
    /*Call registered error callback*/
#if (USE_HAL_CRYP_REGISTER_CALLBACKS == 1U)
    hcryp->ErrorCallback(hcryp);
#else
    /*Call legacy weak error callback*/
    HAL_CRYP_ErrorCallback(hcryp);
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f7ff fd23 	bl	8000e48 <HAL_CRYP_ErrorCallback>
#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */
  }

  /* Clear CCF Flag */
  __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f8d3 2308 	ldr.w	r2, [r3, #776]	; 0x308
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f042 0201 	orr.w	r2, r2, #1
 8001412:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

  /* Read the output block from the output FIFO and put them in temporary buffer then
     get CrypOutBuff from temporary buffer*/
  for (i = 0U; i < 4U; i++)
 8001416:	2300      	movs	r3, #0
 8001418:	61fb      	str	r3, [r7, #28]
 800141a:	e00b      	b.n	8001434 <CRYP_AES_ProcessData+0xf8>
  {
    temp[i] = hcryp->Instance->DOUTR;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	68da      	ldr	r2, [r3, #12]
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	3320      	adds	r3, #32
 8001428:	443b      	add	r3, r7
 800142a:	f843 2c14 	str.w	r2, [r3, #-20]
  for (i = 0U; i < 4U; i++)
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	3301      	adds	r3, #1
 8001432:	61fb      	str	r3, [r7, #28]
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	2b03      	cmp	r3, #3
 8001438:	d9f0      	bls.n	800141c <CRYP_AES_ProcessData+0xe0>
  }
  i = 0U;
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]
  while ((hcryp->CrypOutCount < ((hcryp->Size + 3U) / 4U)) && (i < 4U))
 800143e:	e01a      	b.n	8001476 <CRYP_AES_ProcessData+0x13a>
  {
    *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp[i];
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800144a:	b29b      	uxth	r3, r3
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	441a      	add	r2, r3
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	3320      	adds	r3, #32
 8001456:	443b      	add	r3, r7
 8001458:	f853 3c14 	ldr.w	r3, [r3, #-20]
 800145c:	6013      	str	r3, [r2, #0]
    hcryp->CrypOutCount++;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8001464:	b29b      	uxth	r3, r3
 8001466:	3301      	adds	r3, #1
 8001468:	b29a      	uxth	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    i++;
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	3301      	adds	r3, #1
 8001474:	61fb      	str	r3, [r7, #28]
  while ((hcryp->CrypOutCount < ((hcryp->Size + 3U) / 4U)) && (i < 4U))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800147c:	b29b      	uxth	r3, r3
 800147e:	461a      	mov	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8001486:	3303      	adds	r3, #3
 8001488:	089b      	lsrs	r3, r3, #2
 800148a:	429a      	cmp	r2, r3
 800148c:	d202      	bcs.n	8001494 <CRYP_AES_ProcessData+0x158>
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	2b03      	cmp	r3, #3
 8001492:	d9d5      	bls.n	8001440 <CRYP_AES_ProcessData+0x104>
  }
}
 8001494:	bf00      	nop
 8001496:	3720      	adds	r7, #32
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <CRYP_SetKey>:
  * @param  KeySize Size of Key
  * @note   If pKey is NULL, the Key registers are not written.
  * @retval None
  */
static void CRYP_SetKey(CRYP_HandleTypeDef *hcryp, uint32_t KeySize)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  if (hcryp->Init.pKey != NULL)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d051      	beq.n	8001552 <CRYP_SetKey+0xb6>
  {
    switch (KeySize)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d034      	beq.n	800151e <CRYP_SetKey+0x82>
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80014ba:	d149      	bne.n	8001550 <CRYP_SetKey+0xb4>
    {
      case CRYP_KEYSIZE_256B:
        hcryp->Instance->KEYR7 = *(uint32_t *)(hcryp->Init.pKey);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	68da      	ldr	r2, [r3, #12]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6812      	ldr	r2, [r2, #0]
 80014c6:	63da      	str	r2, [r3, #60]	; 0x3c
        hcryp->Instance->KEYR6 = *(uint32_t *)(hcryp->Init.pKey + 1U);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	68da      	ldr	r2, [r3, #12]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6852      	ldr	r2, [r2, #4]
 80014d2:	639a      	str	r2, [r3, #56]	; 0x38
        hcryp->Instance->KEYR5 = *(uint32_t *)(hcryp->Init.pKey + 2U);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	68da      	ldr	r2, [r3, #12]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6892      	ldr	r2, [r2, #8]
 80014de:	635a      	str	r2, [r3, #52]	; 0x34
        hcryp->Instance->KEYR4 = *(uint32_t *)(hcryp->Init.pKey + 3U);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	68da      	ldr	r2, [r3, #12]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	68d2      	ldr	r2, [r2, #12]
 80014ea:	631a      	str	r2, [r3, #48]	; 0x30
        hcryp->Instance->KEYR3 = *(uint32_t *)(hcryp->Init.pKey + 4U);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	68da      	ldr	r2, [r3, #12]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6912      	ldr	r2, [r2, #16]
 80014f6:	61da      	str	r2, [r3, #28]
        hcryp->Instance->KEYR2 = *(uint32_t *)(hcryp->Init.pKey + 5U);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	68da      	ldr	r2, [r3, #12]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	6952      	ldr	r2, [r2, #20]
 8001502:	619a      	str	r2, [r3, #24]
        hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 6U);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	68da      	ldr	r2, [r3, #12]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6992      	ldr	r2, [r2, #24]
 800150e:	615a      	str	r2, [r3, #20]
        hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 7U);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	68da      	ldr	r2, [r3, #12]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	69d2      	ldr	r2, [r2, #28]
 800151a:	611a      	str	r2, [r3, #16]
        break;
 800151c:	e019      	b.n	8001552 <CRYP_SetKey+0xb6>
      case CRYP_KEYSIZE_128B:
        hcryp->Instance->KEYR3 = *(uint32_t *)(hcryp->Init.pKey);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	68da      	ldr	r2, [r3, #12]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	6812      	ldr	r2, [r2, #0]
 8001528:	61da      	str	r2, [r3, #28]
        hcryp->Instance->KEYR2 = *(uint32_t *)(hcryp->Init.pKey + 1U);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	68da      	ldr	r2, [r3, #12]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	6852      	ldr	r2, [r2, #4]
 8001534:	619a      	str	r2, [r3, #24]
        hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 2U);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	68da      	ldr	r2, [r3, #12]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	6892      	ldr	r2, [r2, #8]
 8001540:	615a      	str	r2, [r3, #20]
        hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 3U);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	68da      	ldr	r2, [r3, #12]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	68d2      	ldr	r2, [r2, #12]
 800154c:	611a      	str	r2, [r3, #16]
        break;
 800154e:	e000      	b.n	8001552 <CRYP_SetKey+0xb6>
      default:
        break;
 8001550:	bf00      	nop
    }
  }
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <CRYP_SetIV>:
  *         the configuration information for CRYP module
  * @note   If IV is NULL, the IV registers are not written.
  * @retval None
  */
static void CRYP_SetIV(CRYP_HandleTypeDef *hcryp)
{
 800155e:	b480      	push	{r7}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
  if (hcryp->Init.pInitVect != NULL)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	691b      	ldr	r3, [r3, #16]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d017      	beq.n	800159e <CRYP_SetIV+0x40>
  {
    /* Set the Initialization Vector*/
    hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	691a      	ldr	r2, [r3, #16]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6812      	ldr	r2, [r2, #0]
 8001578:	62da      	str	r2, [r3, #44]	; 0x2c
    hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1U);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	691a      	ldr	r2, [r3, #16]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6852      	ldr	r2, [r2, #4]
 8001584:	629a      	str	r2, [r3, #40]	; 0x28
    hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2U);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	691a      	ldr	r2, [r3, #16]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	6892      	ldr	r2, [r2, #8]
 8001590:	625a      	str	r2, [r3, #36]	; 0x24
    hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3U);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	691a      	ldr	r2, [r3, #16]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	68d2      	ldr	r2, [r2, #12]
 800159c:	621a      	str	r2, [r3, #32]
  }
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <CRYP_AESGCM_Process>:
  *         the configuration information for CRYP module
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AESGCM_Process(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b08e      	sub	sp, #56	; 0x38
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
 80015b2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t wordsize = ((uint32_t)hcryp->Size / 4U);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80015ba:	089b      	lsrs	r3, r3, #2
 80015bc:	b29b      	uxth	r3, r3
 80015be:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t temp[4];  /* Temporary CrypOutBuff */
  uint32_t index;
  uint32_t lastwordsize;
  uint32_t incount;  /* Temporary CrypInCount Value */
  uint32_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t dokeyivconfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 80015c0:	2301      	movs	r3, #1
 80015c2:	623b      	str	r3, [r7, #32]

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d118      	bne.n	80015fe <CRYP_AESGCM_Process+0x54>
  {
    if (hcryp->KeyIVConfig == 1U)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d10a      	bne.n	80015ea <CRYP_AESGCM_Process+0x40>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      dokeyivconfig = 0U;
 80015d4:	2300      	movs	r3, #0
 80015d6:	623b      	str	r3, [r7, #32]
      hcryp->SizesSum += hcryp->Size; /* Compute message total payload length */
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	f8b2 204a 	ldrh.w	r2, [r2, #74]	; 0x4a
 80015e2:	441a      	add	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	665a      	str	r2, [r3, #100]	; 0x64
 80015e8:	e00f      	b.n	800160a <CRYP_AESGCM_Process+0x60>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2201      	movs	r2, #1
 80015ee:	661a      	str	r2, [r3, #96]	; 0x60
      hcryp->SizesSum = hcryp->Size; /* Merely store payload length */
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80015f6:	461a      	mov	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	665a      	str	r2, [r3, #100]	; 0x64
 80015fc:	e005      	b.n	800160a <CRYP_AESGCM_Process+0x60>
    }
  }
  else
  {
    hcryp->SizesSum = hcryp->Size;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8001604:	461a      	mov	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	665a      	str	r2, [r3, #100]	; 0x64
  }

  if (dokeyivconfig == 1U)
 800160a:	6a3b      	ldr	r3, [r7, #32]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d15b      	bne.n	80016c8 <CRYP_AESGCM_Process+0x11e>
  {

    /*  Reset CrypHeaderCount */
    hcryp->CrypHeaderCount = 0U;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /****************************** Init phase **********************************/

    CRYP_SET_PHASE(hcryp, CRYP_PHASE_INIT);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8001626:	601a      	str	r2, [r3, #0]
    /* Set the Key */
    if (hcryp->Init.KeyMode != CRYP_KEYMODE_SHARED)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001630:	d006      	beq.n	8001640 <CRYP_AESGCM_Process+0x96>
    {
      CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	4619      	mov	r1, r3
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff ff2f 	bl	800149c <CRYP_SetKey>
 800163e:	e007      	b.n	8001650 <CRYP_AESGCM_Process+0xa6>
    }
    else /*after sharing the key, AES should set KMOD[1:0] to 00.*/
    {
      hcryp->Instance->CR &=  ~CRYP_KEYMODE_SHARED;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800164e:	601a      	str	r2, [r3, #0]
    }
    /* Set the initialization vector and the counter : Initial Counter Block (ICB)*/
    CRYP_SetIV(hcryp);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff ff84 	bl	800155e <CRYP_SetIV>

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f042 0201 	orr.w	r2, r2, #1
 8001664:	601a      	str	r2, [r3, #0]

    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8001666:	6839      	ldr	r1, [r7, #0]
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 fc93 	bl	8001f94 <CRYP_WaitOnCCFlag>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <CRYP_AESGCM_Process+0xce>
    {
      return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e129      	b.n	80018cc <CRYP_AESGCM_Process+0x322>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f8d3 2308 	ldr.w	r2, [r3, #776]	; 0x308
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f042 0201 	orr.w	r2, r2, #1
 8001688:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

    /************************ Header phase *************************************/

    if (CRYP_GCMCCM_SetHeaderPhase(hcryp,  Timeout) != HAL_OK)
 800168c:	6839      	ldr	r1, [r7, #0]
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f000 faca 	bl	8001c28 <CRYP_GCMCCM_SetHeaderPhase>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <CRYP_AESGCM_Process+0xf4>
    {
      return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e116      	b.n	80018cc <CRYP_AESGCM_Process+0x322>
    }

    /*************************Payload phase ************************************/

    /* Set the phase */
    hcryp->Phase = CRYP_PHASE_PROCESS;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2202      	movs	r2, #2
 80016a2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Select payload phase once the header phase is performed */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_PAYLOAD);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80016b6:	601a      	str	r2, [r3, #0]

    /* Set to 0 the number of non-valid bytes using NPBLB register*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, 0U);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80016c6:	601a      	str	r2, [r3, #0]

  } /* if (dokeyivconfig == 1U) */

  if ((hcryp->Size % 16U) != 0U)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80016ce:	f003 030f 	and.w	r3, r3, #15
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d003      	beq.n	80016e0 <CRYP_AESGCM_Process+0x136>
  {
    /* recalculate  wordsize */
    wordsize = ((wordsize / 4U) * 4U);
 80016d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016da:	f023 0303 	bic.w	r3, r3, #3
 80016de:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80016e0:	f7ff f8ba 	bl	8000858 <HAL_GetTick>
 80016e4:	61f8      	str	r0, [r7, #28]

  /* Write input data and get output Data */
  incount = hcryp->CrypInCount;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	62bb      	str	r3, [r7, #40]	; 0x28
  outcount = hcryp->CrypOutCount;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 80016fa:	e034      	b.n	8001766 <CRYP_AESGCM_Process+0x1bc>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 80016fc:	6839      	ldr	r1, [r7, #0]
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7ff fe1c 	bl	800133c <CRYP_AES_ProcessData>

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800170a:	d022      	beq.n	8001752 <CRYP_AESGCM_Process+0x1a8>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800170c:	f7ff f8a4 	bl	8000858 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	683a      	ldr	r2, [r7, #0]
 8001718:	429a      	cmp	r2, r3
 800171a:	d302      	bcc.n	8001722 <CRYP_AESGCM_Process+0x178>
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d117      	bne.n	8001752 <CRYP_AESGCM_Process+0x1a8>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f022 0201 	bic.w	r2, r2, #1
 8001730:	601a      	str	r2, [r3, #0]

        /* Change state & error code */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001736:	f043 0210 	orr.w	r2, r3, #16
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	65da      	str	r2, [r3, #92]	; 0x5c
        hcryp->State = HAL_CRYP_STATE_READY;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2201      	movs	r2, #1
 8001742:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
        __HAL_UNLOCK(hcryp);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e0bc      	b.n	80018cc <CRYP_AESGCM_Process+0x322>
      }
    }
    incount = hcryp->CrypInCount;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001758:	b29b      	uxth	r3, r3
 800175a:	62bb      	str	r3, [r7, #40]	; 0x28
    outcount = hcryp->CrypOutCount;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8001762:	b29b      	uxth	r3, r3
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 8001766:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800176a:	429a      	cmp	r2, r3
 800176c:	d203      	bcs.n	8001776 <CRYP_AESGCM_Process+0x1cc>
 800176e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001772:	429a      	cmp	r2, r3
 8001774:	d3c2      	bcc.n	80016fc <CRYP_AESGCM_Process+0x152>
  }

  if ((hcryp->Size % 16U) != 0U)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800177c:	f003 030f 	and.w	r3, r3, #15
 8001780:	b29b      	uxth	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	f000 80a1 	beq.w	80018ca <CRYP_AESGCM_Process+0x320>
  {
    /* Compute the number of padding bytes in last block of payload */
    npblb = ((((uint32_t)hcryp->Size / 16U) + 1U) * 16U) - ((uint32_t)hcryp->Size);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800178e:	091b      	lsrs	r3, r3, #4
 8001790:	b29b      	uxth	r3, r3
 8001792:	3301      	adds	r3, #1
 8001794:	011b      	lsls	r3, r3, #4
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	f8b2 204a 	ldrh.w	r2, [r2, #74]	; 0x4a
 800179c:	1a9b      	subs	r3, r3, r2
 800179e:	61bb      	str	r3, [r7, #24]

    /*  Set Npblb in case of AES GCM payload encryption to get right tag*/
    if ((hcryp->Instance->CR & AES_CR_MODE) == CRYP_OPERATINGMODE_ENCRYPT)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0318 	and.w	r3, r3, #24
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d10a      	bne.n	80017c4 <CRYP_AESGCM_Process+0x21a>
    {
      /* Set to 0 the number of non-valid bytes using NPBLB register*/
      MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, npblb << 20U);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	051a      	lsls	r2, r3, #20
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	430a      	orrs	r2, r1
 80017c2:	601a      	str	r2, [r3, #0]
    }
    /* Number of valid words (lastwordsize) in last block */
    if ((npblb % 4U) == 0U)
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	f003 0303 	and.w	r3, r3, #3
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d105      	bne.n	80017da <CRYP_AESGCM_Process+0x230>
    {
      lastwordsize = (16U - npblb) / 4U;
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	f1c3 0310 	rsb	r3, r3, #16
 80017d4:	089b      	lsrs	r3, r3, #2
 80017d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017d8:	e005      	b.n	80017e6 <CRYP_AESGCM_Process+0x23c>
    }
    else
    {
      lastwordsize = ((16U - npblb) / 4U) + 1U;
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	f1c3 0310 	rsb	r3, r3, #16
 80017e0:	089b      	lsrs	r3, r3, #2
 80017e2:	3301      	adds	r3, #1
 80017e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /*  last block optionally pad the data with zeros*/
    for (index = 0U; index < lastwordsize; index ++)
 80017e6:	2300      	movs	r3, #0
 80017e8:	633b      	str	r3, [r7, #48]	; 0x30
 80017ea:	e017      	b.n	800181c <CRYP_AESGCM_Process+0x272>
    {
      /* Write the last Input block in the IN FIFO */
      hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	441a      	add	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6812      	ldr	r2, [r2, #0]
 8001802:	609a      	str	r2, [r3, #8]
      hcryp->CrypInCount++;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800180a:	b29b      	uxth	r3, r3
 800180c:	3301      	adds	r3, #1
 800180e:	b29a      	uxth	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    for (index = 0U; index < lastwordsize; index ++)
 8001816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001818:	3301      	adds	r3, #1
 800181a:	633b      	str	r3, [r7, #48]	; 0x30
 800181c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800181e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001820:	429a      	cmp	r2, r3
 8001822:	d3e3      	bcc.n	80017ec <CRYP_AESGCM_Process+0x242>
    }
    while (index < 4U)
 8001824:	e006      	b.n	8001834 <CRYP_AESGCM_Process+0x28a>
    {
      /* pad the data with zeros to have a complete block */
      hcryp->Instance->DINR  = 0U;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2200      	movs	r2, #0
 800182c:	609a      	str	r2, [r3, #8]
      index++;
 800182e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001830:	3301      	adds	r3, #1
 8001832:	633b      	str	r3, [r7, #48]	; 0x30
    while (index < 4U)
 8001834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001836:	2b03      	cmp	r3, #3
 8001838:	d9f5      	bls.n	8001826 <CRYP_AESGCM_Process+0x27c>
    }
    /* Wait for CCF flag to be raised */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 800183a:	6839      	ldr	r1, [r7, #0]
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f000 fba9 	bl	8001f94 <CRYP_WaitOnCCFlag>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d002      	beq.n	800184e <CRYP_AESGCM_Process+0x2a4>
#if (USE_HAL_CRYP_REGISTER_CALLBACKS == 1U)
      /*Call registered error callback*/
      hcryp->ErrorCallback(hcryp);
#else
      /*Call legacy weak error callback*/
      HAL_CRYP_ErrorCallback(hcryp);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff fafd 	bl	8000e48 <HAL_CRYP_ErrorCallback>
#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */
    }

    /* Clear CCF Flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f8d3 2308 	ldr.w	r2, [r3, #776]	; 0x308
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f042 0201 	orr.w	r2, r2, #1
 800185e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

    /*Read the output block from the output FIFO */
    for (index = 0U; index < 4U; index++)
 8001862:	2300      	movs	r3, #0
 8001864:	633b      	str	r3, [r7, #48]	; 0x30
 8001866:	e00b      	b.n	8001880 <CRYP_AESGCM_Process+0x2d6>
    {
      /* Read the output block from the output FIFO and put them in temporary buffer then
         get CrypOutBuff from temporary buffer */
      temp[index] = hcryp->Instance->DOUTR;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	68da      	ldr	r2, [r3, #12]
 800186e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	3338      	adds	r3, #56	; 0x38
 8001874:	443b      	add	r3, r7
 8001876:	f843 2c30 	str.w	r2, [r3, #-48]
    for (index = 0U; index < 4U; index++)
 800187a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800187c:	3301      	adds	r3, #1
 800187e:	633b      	str	r3, [r7, #48]	; 0x30
 8001880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001882:	2b03      	cmp	r3, #3
 8001884:	d9f0      	bls.n	8001868 <CRYP_AESGCM_Process+0x2be>
    }
    for (index = 0U; index < lastwordsize; index++)
 8001886:	2300      	movs	r3, #0
 8001888:	633b      	str	r3, [r7, #48]	; 0x30
 800188a:	e01a      	b.n	80018c2 <CRYP_AESGCM_Process+0x318>
    {
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + (hcryp->CrypOutCount)) = temp[index];
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8001896:	b29b      	uxth	r3, r3
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	441a      	add	r2, r3
 800189c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	3338      	adds	r3, #56	; 0x38
 80018a2:	443b      	add	r3, r7
 80018a4:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80018a8:	6013      	str	r3, [r2, #0]
      hcryp->CrypOutCount++;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	3301      	adds	r3, #1
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    for (index = 0U; index < lastwordsize; index++)
 80018bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018be:	3301      	adds	r3, #1
 80018c0:	633b      	str	r3, [r7, #48]	; 0x30
 80018c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d3e0      	bcc.n	800188c <CRYP_AESGCM_Process+0x2e2>
    }
  }

  return HAL_OK;
 80018ca:	2300      	movs	r3, #0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3738      	adds	r7, #56	; 0x38
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <CRYP_AESCCM_Process>:
  *         the configuration information for CRYP module
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AESCCM_Process(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08e      	sub	sp, #56	; 0x38
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t wordsize = ((uint32_t)hcryp->Size / 4U);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80018e4:	089b      	lsrs	r3, r3, #2
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t npblb;
  uint32_t lastwordsize;
  uint32_t temp[4];  /* Temporary CrypOutBuff */
  uint32_t incount;  /* Temporary CrypInCount Value */
  uint32_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t dokeyivconfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 80018ea:	2301      	movs	r3, #1
 80018ec:	623b      	str	r3, [r7, #32]

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d118      	bne.n	8001928 <CRYP_AESCCM_Process+0x54>
  {
    if (hcryp->KeyIVConfig == 1U)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d10a      	bne.n	8001914 <CRYP_AESCCM_Process+0x40>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      dokeyivconfig = 0U;
 80018fe:	2300      	movs	r3, #0
 8001900:	623b      	str	r3, [r7, #32]
      hcryp->SizesSum += hcryp->Size; /* Compute message total payload length */
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	f8b2 204a 	ldrh.w	r2, [r2, #74]	; 0x4a
 800190c:	441a      	add	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	665a      	str	r2, [r3, #100]	; 0x64
 8001912:	e00f      	b.n	8001934 <CRYP_AESCCM_Process+0x60>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	661a      	str	r2, [r3, #96]	; 0x60
      hcryp->SizesSum = hcryp->Size; /* Merely store payload length */
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8001920:	461a      	mov	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	665a      	str	r2, [r3, #100]	; 0x64
 8001926:	e005      	b.n	8001934 <CRYP_AESCCM_Process+0x60>
    }
  }
  else
  {
    hcryp->SizesSum = hcryp->Size;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800192e:	461a      	mov	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	665a      	str	r2, [r3, #100]	; 0x64
  }

  if (dokeyivconfig == 1U)
 8001934:	6a3b      	ldr	r3, [r7, #32]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d170      	bne.n	8001a1c <CRYP_AESCCM_Process+0x148>
  {
    /*  Reset CrypHeaderCount */
    hcryp->CrypHeaderCount = 0U;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /********************** Init phase ******************************************/

    CRYP_SET_PHASE(hcryp, CRYP_PHASE_INIT);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8001950:	601a      	str	r2, [r3, #0]
    /* Set the Key */
    if (hcryp->Init.KeyMode != CRYP_KEYMODE_SHARED)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800195a:	d006      	beq.n	800196a <CRYP_AESCCM_Process+0x96>
    {
      CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	4619      	mov	r1, r3
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff fd9a 	bl	800149c <CRYP_SetKey>
 8001968:	e007      	b.n	800197a <CRYP_AESCCM_Process+0xa6>
    }
    else /*after sharing the key, AES should set KMOD[1:0] to 00.*/
    {
      hcryp->Instance->CR &=  ~CRYP_KEYMODE_SHARED;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8001978:	601a      	str	r2, [r3, #0]
    }
    /* Set the initialization vector (IV) with B0 */
    hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.B0);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a1a      	ldr	r2, [r3, #32]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6812      	ldr	r2, [r2, #0]
 8001984:	62da      	str	r2, [r3, #44]	; 0x2c
    hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.B0 + 1U);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a1a      	ldr	r2, [r3, #32]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6852      	ldr	r2, [r2, #4]
 8001990:	629a      	str	r2, [r3, #40]	; 0x28
    hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.B0 + 2U);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a1a      	ldr	r2, [r3, #32]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	6892      	ldr	r2, [r2, #8]
 800199c:	625a      	str	r2, [r3, #36]	; 0x24
    hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.B0 + 3U);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a1a      	ldr	r2, [r3, #32]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	68d2      	ldr	r2, [r2, #12]
 80019a8:	621a      	str	r2, [r3, #32]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f042 0201 	orr.w	r2, r2, #1
 80019b8:	601a      	str	r2, [r3, #0]

    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 80019ba:	6839      	ldr	r1, [r7, #0]
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f000 fae9 	bl	8001f94 <CRYP_WaitOnCCFlag>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <CRYP_AESCCM_Process+0xf8>
    {
      return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e128      	b.n	8001c1e <CRYP_AESCCM_Process+0x34a>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f8d3 2308 	ldr.w	r2, [r3, #776]	; 0x308
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f042 0201 	orr.w	r2, r2, #1
 80019dc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

    /************************ Header phase *************************************/
    /* Header block(B1) : associated data length expressed in bytes concatenated
    with Associated Data (A)*/
    if (CRYP_GCMCCM_SetHeaderPhase(hcryp,  Timeout) != HAL_OK)
 80019e0:	6839      	ldr	r1, [r7, #0]
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 f920 	bl	8001c28 <CRYP_GCMCCM_SetHeaderPhase>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <CRYP_AESCCM_Process+0x11e>
    {
      return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e115      	b.n	8001c1e <CRYP_AESCCM_Process+0x34a>
    }

    /*************************Payload phase ************************************/

    /* Set the phase */
    hcryp->Phase = CRYP_PHASE_PROCESS;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2202      	movs	r2, #2
 80019f6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Select payload phase once the header phase is performed */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, CRYP_PHASE_PAYLOAD);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a0a:	601a      	str	r2, [r3, #0]

    /* Set to 0 the number of non-valid bytes using NPBLB register*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, 0U);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a1a:	601a      	str	r2, [r3, #0]

  } /* if (dokeyivconfig == 1U) */

  if ((hcryp->Size % 16U) != 0U)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8001a22:	f003 030f 	and.w	r3, r3, #15
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d003      	beq.n	8001a34 <CRYP_AESCCM_Process+0x160>
  {
    /* recalculate  wordsize */
    wordsize = ((wordsize / 4U) * 4U);
 8001a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a2e:	f023 0303 	bic.w	r3, r3, #3
 8001a32:	637b      	str	r3, [r7, #52]	; 0x34
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8001a34:	f7fe ff10 	bl	8000858 <HAL_GetTick>
 8001a38:	61f8      	str	r0, [r7, #28]

  /* Write input data and get output data */
  incount = hcryp->CrypInCount;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	62bb      	str	r3, [r7, #40]	; 0x28
  outcount = hcryp->CrypOutCount;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 8001a4e:	e034      	b.n	8001aba <CRYP_AESCCM_Process+0x1e6>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 8001a50:	6839      	ldr	r1, [r7, #0]
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7ff fc72 	bl	800133c <CRYP_AES_ProcessData>

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a5e:	d022      	beq.n	8001aa6 <CRYP_AESCCM_Process+0x1d2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a60:	f7fe fefa 	bl	8000858 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d302      	bcc.n	8001a76 <CRYP_AESCCM_Process+0x1a2>
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d117      	bne.n	8001aa6 <CRYP_AESCCM_Process+0x1d2>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f022 0201 	bic.w	r2, r2, #1
 8001a84:	601a      	str	r2, [r3, #0]

        /* Change state */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a8a:	f043 0210 	orr.w	r2, r3, #16
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	65da      	str	r2, [r3, #92]	; 0x5c
        hcryp->State = HAL_CRYP_STATE_READY;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2201      	movs	r2, #1
 8001a96:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
        __HAL_UNLOCK(hcryp);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e0bb      	b.n	8001c1e <CRYP_AESCCM_Process+0x34a>
      }
    }
    incount = hcryp->CrypInCount;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	62bb      	str	r3, [r7, #40]	; 0x28
    outcount = hcryp->CrypOutCount;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 8001aba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d203      	bcs.n	8001aca <CRYP_AESCCM_Process+0x1f6>
 8001ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d3c2      	bcc.n	8001a50 <CRYP_AESCCM_Process+0x17c>
  }

  if ((hcryp->Size % 16U) != 0U)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8001ad0:	f003 030f 	and.w	r3, r3, #15
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f000 80a0 	beq.w	8001c1c <CRYP_AESCCM_Process+0x348>
  {
    /* Compute the number of padding bytes in last block of payload */
    npblb = ((((uint32_t)hcryp->Size / 16U) + 1U) * 16U) - ((uint32_t)hcryp->Size);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8001ae2:	091b      	lsrs	r3, r3, #4
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	011b      	lsls	r3, r3, #4
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	f8b2 204a 	ldrh.w	r2, [r2, #74]	; 0x4a
 8001af0:	1a9b      	subs	r3, r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]

    if ((hcryp->Instance->CR & AES_CR_MODE) == CRYP_OPERATINGMODE_DECRYPT)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0318 	and.w	r3, r3, #24
 8001afe:	2b10      	cmp	r3, #16
 8001b00:	d10a      	bne.n	8001b18 <CRYP_AESCCM_Process+0x244>
    {
      /* Set Npblb in case of AES CCM payload decryption to get right tag  */
      MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, npblb << 20);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	051a      	lsls	r2, r3, #20
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	430a      	orrs	r2, r1
 8001b16:	601a      	str	r2, [r3, #0]

    }
    /* Number of valid words (lastwordsize) in last block */
    if ((npblb % 4U) == 0U)
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	f003 0303 	and.w	r3, r3, #3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d105      	bne.n	8001b2e <CRYP_AESCCM_Process+0x25a>
    {
      lastwordsize = (16U - npblb) / 4U;
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	f1c3 0310 	rsb	r3, r3, #16
 8001b28:	089b      	lsrs	r3, r3, #2
 8001b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b2c:	e005      	b.n	8001b3a <CRYP_AESCCM_Process+0x266>
    }
    else
    {
      lastwordsize = ((16U - npblb) / 4U) + 1U;
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	f1c3 0310 	rsb	r3, r3, #16
 8001b34:	089b      	lsrs	r3, r3, #2
 8001b36:	3301      	adds	r3, #1
 8001b38:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Write the last input block in the IN FIFO */
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter ++)
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	633b      	str	r3, [r7, #48]	; 0x30
 8001b3e:	e017      	b.n	8001b70 <CRYP_AESCCM_Process+0x29c>
    {
      hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	441a      	add	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6812      	ldr	r2, [r2, #0]
 8001b56:	609a      	str	r2, [r3, #8]
      hcryp->CrypInCount++;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	3301      	adds	r3, #1
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter ++)
 8001b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	633b      	str	r3, [r7, #48]	; 0x30
 8001b70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d3e3      	bcc.n	8001b40 <CRYP_AESCCM_Process+0x26c>
    }

    /* Pad the data with zeros to have a complete block */
    while (loopcounter < 4U)
 8001b78:	e006      	b.n	8001b88 <CRYP_AESCCM_Process+0x2b4>
    {
      hcryp->Instance->DINR  = 0U;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	609a      	str	r2, [r3, #8]
      loopcounter++;
 8001b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b84:	3301      	adds	r3, #1
 8001b86:	633b      	str	r3, [r7, #48]	; 0x30
    while (loopcounter < 4U)
 8001b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b8a:	2b03      	cmp	r3, #3
 8001b8c:	d9f5      	bls.n	8001b7a <CRYP_AESCCM_Process+0x2a6>
    }
    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8001b8e:	6839      	ldr	r1, [r7, #0]
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f000 f9ff 	bl	8001f94 <CRYP_WaitOnCCFlag>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <CRYP_AESCCM_Process+0x2cc>
    {
      return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e03e      	b.n	8001c1e <CRYP_AESCCM_Process+0x34a>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f8d3 2308 	ldr.w	r2, [r3, #776]	; 0x308
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f042 0201 	orr.w	r2, r2, #1
 8001bb0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

    for (loopcounter = 0U; loopcounter < 4U; loopcounter++)
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	633b      	str	r3, [r7, #48]	; 0x30
 8001bb8:	e00b      	b.n	8001bd2 <CRYP_AESCCM_Process+0x2fe>
    {
      /* Read the output block from the output FIFO and put them in temporary buffer then
         get CrypOutBuff from temporary buffer */
      temp[loopcounter] = hcryp->Instance->DOUTR;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68da      	ldr	r2, [r3, #12]
 8001bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	3338      	adds	r3, #56	; 0x38
 8001bc6:	443b      	add	r3, r7
 8001bc8:	f843 2c30 	str.w	r2, [r3, #-48]
    for (loopcounter = 0U; loopcounter < 4U; loopcounter++)
 8001bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bce:	3301      	adds	r3, #1
 8001bd0:	633b      	str	r3, [r7, #48]	; 0x30
 8001bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bd4:	2b03      	cmp	r3, #3
 8001bd6:	d9f0      	bls.n	8001bba <CRYP_AESCCM_Process+0x2e6>
    }
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter++)
 8001bd8:	2300      	movs	r3, #0
 8001bda:	633b      	str	r3, [r7, #48]	; 0x30
 8001bdc:	e01a      	b.n	8001c14 <CRYP_AESCCM_Process+0x340>
    {
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp[loopcounter];
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	441a      	add	r2, r3
 8001bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	3338      	adds	r3, #56	; 0x38
 8001bf4:	443b      	add	r3, r7
 8001bf6:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001bfa:	6013      	str	r3, [r2, #0]
      hcryp->CrypOutCount++;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	3301      	adds	r3, #1
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter++)
 8001c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c10:	3301      	adds	r3, #1
 8001c12:	633b      	str	r3, [r7, #48]	; 0x30
 8001c14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d3e0      	bcc.n	8001bde <CRYP_AESCCM_Process+0x30a>
    }
  }

  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3738      	adds	r7, #56	; 0x38
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
	...

08001c28 <CRYP_GCMCCM_SetHeaderPhase>:
  *         the configuration information for CRYP module(Header & HeaderSize)
  * @param  Timeout Timeout value
  * @retval state
  */
static HAL_StatusTypeDef CRYP_GCMCCM_SetHeaderPhase(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8001c28:	b5b0      	push	{r4, r5, r7, lr}
 8001c2a:	b092      	sub	sp, #72	; 0x48
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  uint32_t loopcounter;
  uint32_t size_in_bytes;
  uint32_t tmp;
  const uint32_t mask[12] = {0x0U, 0xFF000000U, 0xFFFF0000U, 0xFFFFFF00U,  /* 32-bit data type */
 8001c32:	4b8e      	ldr	r3, [pc, #568]	; (8001e6c <CRYP_GCMCCM_SetHeaderPhase+0x244>)
 8001c34:	f107 040c 	add.w	r4, r7, #12
 8001c38:	461d      	mov	r5, r3
 8001c3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c42:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001c46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                             0x0U, 0x0000FF00U, 0x0000FFFFU, 0xFF00FFFFU,  /* 16-bit data type */
                             0x0U, 0x000000FFU, 0x0000FFFFU, 0x00FFFFFFU
                            }; /*  8-bit data type */

  /***************************** Header phase for GCM/GMAC or CCM *********************************/
  if (hcryp->Init.HeaderWidthUnit == CRYP_HEADERWIDTHUNIT_WORD)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d104      	bne.n	8001c5c <CRYP_GCMCCM_SetHeaderPhase+0x34>
  {
    size_in_bytes = hcryp->Init.HeaderSize * 4U;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	643b      	str	r3, [r7, #64]	; 0x40
 8001c5a:	e002      	b.n	8001c62 <CRYP_GCMCCM_SetHeaderPhase+0x3a>
  }
  else
  {
    size_in_bytes = hcryp->Init.HeaderSize;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	69db      	ldr	r3, [r3, #28]
 8001c60:	643b      	str	r3, [r7, #64]	; 0x40
  }

  if ((size_in_bytes != 0U))
 8001c62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f000 8172 	beq.w	8001f4e <CRYP_GCMCCM_SetHeaderPhase+0x326>
  {
    /* Select header phase */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_HEADER);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c7c:	601a      	str	r2, [r3, #0]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f042 0201 	orr.w	r2, r2, #1
 8001c8c:	601a      	str	r2, [r3, #0]

    /* If size_in_bytes is a multiple of blocks (a multiple of four 32-bits words ) */
    if ((size_in_bytes % 16U) == 0U)
 8001c8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c90:	f003 030f 	and.w	r3, r3, #15
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d172      	bne.n	8001d7e <CRYP_GCMCCM_SetHeaderPhase+0x156>
    {
      /*  No padding */
      for (loopcounter = 0U; (loopcounter < (size_in_bytes / 4U)); loopcounter += 4U)
 8001c98:	2300      	movs	r3, #0
 8001c9a:	647b      	str	r3, [r7, #68]	; 0x44
 8001c9c:	e069      	b.n	8001d72 <CRYP_GCMCCM_SetHeaderPhase+0x14a>
      {
        /* Write the input block in the data input register */
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	699a      	ldr	r2, [r3, #24]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	441a      	add	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	6812      	ldr	r2, [r2, #0]
 8001cb4:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	699a      	ldr	r2, [r3, #24]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	441a      	add	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6812      	ldr	r2, [r2, #0]
 8001cde:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	3301      	adds	r3, #1
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        hcryp->Instance->DINR  = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	699a      	ldr	r2, [r3, #24]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	441a      	add	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6812      	ldr	r2, [r2, #0]
 8001d08:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	3301      	adds	r3, #1
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	699a      	ldr	r2, [r3, #24]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	441a      	add	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6812      	ldr	r2, [r2, #0]
 8001d32:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8001d46:	6839      	ldr	r1, [r7, #0]
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 f923 	bl	8001f94 <CRYP_WaitOnCCFlag>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <CRYP_GCMCCM_SetHeaderPhase+0x130>
        {
          return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e118      	b.n	8001f8a <CRYP_GCMCCM_SetHeaderPhase+0x362>
        }
        /* Clear CCF flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f8d3 2308 	ldr.w	r2, [r3, #776]	; 0x308
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f042 0201 	orr.w	r2, r2, #1
 8001d68:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
      for (loopcounter = 0U; (loopcounter < (size_in_bytes / 4U)); loopcounter += 4U)
 8001d6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d6e:	3304      	adds	r3, #4
 8001d70:	647b      	str	r3, [r7, #68]	; 0x44
 8001d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d74:	089b      	lsrs	r3, r3, #2
 8001d76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d390      	bcc.n	8001c9e <CRYP_GCMCCM_SetHeaderPhase+0x76>
 8001d7c:	e104      	b.n	8001f88 <CRYP_GCMCCM_SetHeaderPhase+0x360>
      }
    }
    else
    {
      /* Write header block in the IN FIFO without last block */
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 16U) * 4U)); loopcounter += 4U)
 8001d7e:	2300      	movs	r3, #0
 8001d80:	647b      	str	r3, [r7, #68]	; 0x44
 8001d82:	e069      	b.n	8001e58 <CRYP_GCMCCM_SetHeaderPhase+0x230>
      {
        /* Write the input block in the data input register */
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	699a      	ldr	r2, [r3, #24]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	441a      	add	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6812      	ldr	r2, [r2, #0]
 8001d9a:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	3301      	adds	r3, #1
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	699a      	ldr	r2, [r3, #24]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	441a      	add	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	6812      	ldr	r2, [r2, #0]
 8001dc4:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	3301      	adds	r3, #1
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        hcryp->Instance->DINR  = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	699a      	ldr	r2, [r3, #24]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	441a      	add	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6812      	ldr	r2, [r2, #0]
 8001dee:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	3301      	adds	r3, #1
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	699a      	ldr	r2, [r3, #24]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	441a      	add	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6812      	ldr	r2, [r2, #0]
 8001e18:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	3301      	adds	r3, #1
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8001e2c:	6839      	ldr	r1, [r7, #0]
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 f8b0 	bl	8001f94 <CRYP_WaitOnCCFlag>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <CRYP_GCMCCM_SetHeaderPhase+0x216>
        {
          return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e0a5      	b.n	8001f8a <CRYP_GCMCCM_SetHeaderPhase+0x362>
        }
        /* Clear CCF flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f8d3 2308 	ldr.w	r2, [r3, #776]	; 0x308
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f042 0201 	orr.w	r2, r2, #1
 8001e4e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 16U) * 4U)); loopcounter += 4U)
 8001e52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e54:	3304      	adds	r3, #4
 8001e56:	647b      	str	r3, [r7, #68]	; 0x44
 8001e58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e5a:	091b      	lsrs	r3, r3, #4
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d38f      	bcc.n	8001d84 <CRYP_GCMCCM_SetHeaderPhase+0x15c>
      }
      /* Write last complete words */
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 4U) % 4U)); loopcounter++)
 8001e64:	2300      	movs	r3, #0
 8001e66:	647b      	str	r3, [r7, #68]	; 0x44
 8001e68:	e01a      	b.n	8001ea0 <CRYP_GCMCCM_SetHeaderPhase+0x278>
 8001e6a:	bf00      	nop
 8001e6c:	08003d7c 	.word	0x08003d7c
      {
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	699a      	ldr	r2, [r3, #24]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	441a      	add	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6812      	ldr	r2, [r2, #0]
 8001e86:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	3301      	adds	r3, #1
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 4U) % 4U)); loopcounter++)
 8001e9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	647b      	str	r3, [r7, #68]	; 0x44
 8001ea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ea2:	089b      	lsrs	r3, r3, #2
 8001ea4:	f003 0303 	and.w	r3, r3, #3
 8001ea8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d3e0      	bcc.n	8001e70 <CRYP_GCMCCM_SetHeaderPhase+0x248>
      }
      /* If the header size is a multiple of words */
      if ((size_in_bytes % 4U) == 0U)
 8001eae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eb0:	f003 0303 	and.w	r3, r3, #3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d10b      	bne.n	8001ed0 <CRYP_GCMCCM_SetHeaderPhase+0x2a8>
      {
        /* Pad the data with zeros to have a complete block */
        while (loopcounter < 4U)
 8001eb8:	e006      	b.n	8001ec8 <CRYP_GCMCCM_SetHeaderPhase+0x2a0>
        {
          hcryp->Instance->DINR = 0x0U;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	609a      	str	r2, [r3, #8]
          loopcounter++;
 8001ec2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	647b      	str	r3, [r7, #68]	; 0x44
        while (loopcounter < 4U)
 8001ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001eca:	2b03      	cmp	r3, #3
 8001ecc:	d9f5      	bls.n	8001eba <CRYP_GCMCCM_SetHeaderPhase+0x292>
 8001ece:	e02a      	b.n	8001f26 <CRYP_GCMCCM_SetHeaderPhase+0x2fe>
        }
      }
      else
      {
        /* Enter last bytes, padded with zeros */
        tmp =  *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	699a      	ldr	r2, [r3, #24]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4413      	add	r3, r2
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
        tmp &= mask[(hcryp->Init.DataType * 2U) + (size_in_bytes % 4U)];
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	005a      	lsls	r2, r3, #1
 8001eea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eec:	f003 0303 	and.w	r3, r3, #3
 8001ef0:	4413      	add	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	3348      	adds	r3, #72	; 0x48
 8001ef6:	443b      	add	r3, r7
 8001ef8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001efc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001efe:	4013      	ands	r3, r2
 8001f00:	63fb      	str	r3, [r7, #60]	; 0x3c
        hcryp->Instance->DINR = tmp;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f08:	609a      	str	r2, [r3, #8]
        loopcounter++;
 8001f0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	647b      	str	r3, [r7, #68]	; 0x44
        /* Pad the data with zeros to have a complete block */
        while (loopcounter < 4U)
 8001f10:	e006      	b.n	8001f20 <CRYP_GCMCCM_SetHeaderPhase+0x2f8>
        {
          hcryp->Instance->DINR = 0x0U;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2200      	movs	r2, #0
 8001f18:	609a      	str	r2, [r3, #8]
          loopcounter++;
 8001f1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	647b      	str	r3, [r7, #68]	; 0x44
        while (loopcounter < 4U)
 8001f20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f22:	2b03      	cmp	r3, #3
 8001f24:	d9f5      	bls.n	8001f12 <CRYP_GCMCCM_SetHeaderPhase+0x2ea>
        }
      }

      if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8001f26:	6839      	ldr	r1, [r7, #0]
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 f833 	bl	8001f94 <CRYP_WaitOnCCFlag>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <CRYP_GCMCCM_SetHeaderPhase+0x310>
      {
        return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e028      	b.n	8001f8a <CRYP_GCMCCM_SetHeaderPhase+0x362>
      }
      /* Clear CCF flag */
      __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f8d3 2308 	ldr.w	r2, [r3, #776]	; 0x308
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f042 0201 	orr.w	r2, r2, #1
 8001f48:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
 8001f4c:	e01c      	b.n	8001f88 <CRYP_GCMCCM_SetHeaderPhase+0x360>
    }
  }
  else
  {
    /*Workaround 1: only AES, before re-enabling the peripheral, datatype can be configured.*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE, hcryp->Init.DataType);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f023 0106 	bic.w	r1, r3, #6
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	430a      	orrs	r2, r1
 8001f62:	601a      	str	r2, [r3, #0]

    /* Select header phase */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_HEADER);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f76:	601a      	str	r2, [r3, #0]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f042 0201 	orr.w	r2, r2, #1
 8001f86:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3748      	adds	r7, #72	; 0x48
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bdb0      	pop	{r4, r5, r7, pc}
 8001f92:	bf00      	nop

08001f94 <CRYP_WaitOnCCFlag>:
  * @param  Timeout Timeout duration.
  * @note   This function can only be used in thread mode.
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_WaitOnCCFlag(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8001f9e:	f7fe fc5b 	bl	8000858 <HAL_GetTick>
 8001fa2:	60f8      	str	r0, [r7, #12]

  while (HAL_IS_BIT_CLR(hcryp->Instance->ISR, AES_ISR_CCF))
 8001fa4:	e026      	b.n	8001ff4 <CRYP_WaitOnCCFlag+0x60>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fac:	d022      	beq.n	8001ff4 <CRYP_WaitOnCCFlag+0x60>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001fae:	f7fe fc53 	bl	8000858 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	683a      	ldr	r2, [r7, #0]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d302      	bcc.n	8001fc4 <CRYP_WaitOnCCFlag+0x30>
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d117      	bne.n	8001ff4 <CRYP_WaitOnCCFlag+0x60>
      {
        __HAL_CRYP_DISABLE(hcryp);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 0201 	bic.w	r2, r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd8:	f043 0210 	orr.w	r2, r3, #16
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	65da      	str	r2, [r3, #92]	; 0x5c
        hcryp->State = HAL_CRYP_STATE_READY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
        __HAL_UNLOCK(hcryp);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e008      	b.n	8002006 <CRYP_WaitOnCCFlag+0x72>
  while (HAL_IS_BIT_CLR(hcryp->Instance->ISR, AES_ISR_CCF))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	2b00      	cmp	r3, #0
 8002002:	d0d0      	beq.n	8001fa6 <CRYP_WaitOnCCFlag+0x12>
      }
    }
  }
  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_CRYPEx_AESGCM_GenerateAuthTAG>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYPEx_AESGCM_GenerateAuthTAG(CRYP_HandleTypeDef *hcryp, const uint32_t *pAuthTag,
                                                    uint32_t Timeout)
{
 800200e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002012:	b08c      	sub	sp, #48	; 0x30
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
  /* Assume first Init.HeaderSize is in words */
  uint64_t headerlength = (uint64_t)hcryp->Init.HeaderSize * 32U; /* Header length in bits */
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	69db      	ldr	r3, [r3, #28]
 8002020:	2200      	movs	r2, #0
 8002022:	4698      	mov	r8, r3
 8002024:	4691      	mov	r9, r2
 8002026:	f04f 0200 	mov.w	r2, #0
 800202a:	f04f 0300 	mov.w	r3, #0
 800202e:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8002032:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8002036:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800203a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  uint64_t inputlength = (uint64_t)hcryp->SizesSum * 8U; /* Input length in bits */
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002042:	2200      	movs	r2, #0
 8002044:	461c      	mov	r4, r3
 8002046:	4615      	mov	r5, r2
 8002048:	f04f 0200 	mov.w	r2, #0
 800204c:	f04f 0300 	mov.w	r3, #0
 8002050:	00eb      	lsls	r3, r5, #3
 8002052:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002056:	00e2      	lsls	r2, r4, #3
 8002058:	e9c7 2306 	strd	r2, r3, [r7, #24]
  uint32_t tagaddr = (uint32_t)pAuthTag;
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t i;
  uint32_t tickstart;

  /* Correct headerlength if Init.HeaderSize is actually in bytes */
  if (hcryp->Init.HeaderWidthUnit == CRYP_HEADERWIDTHUNIT_BYTE)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002064:	2b01      	cmp	r3, #1
 8002066:	d10b      	bne.n	8002080 <HAL_CRYPEx_AESGCM_GenerateAuthTAG+0x72>
  {
    headerlength /= 4U;
 8002068:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800206c:	f04f 0200 	mov.w	r2, #0
 8002070:	f04f 0300 	mov.w	r3, #0
 8002074:	0882      	lsrs	r2, r0, #2
 8002076:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 800207a:	088b      	lsrs	r3, r1, #2
 800207c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  if (hcryp->State == HAL_CRYP_STATE_READY)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b01      	cmp	r3, #1
 800208a:	f040 80a6 	bne.w	80021da <HAL_CRYPEx_AESGCM_GenerateAuthTAG+0x1cc>
  {
    __HAL_LOCK(hcryp);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002094:	2b01      	cmp	r3, #1
 8002096:	d101      	bne.n	800209c <HAL_CRYPEx_AESGCM_GenerateAuthTAG+0x8e>
 8002098:	2302      	movs	r3, #2
 800209a:	e0a5      	b.n	80021e8 <HAL_CRYPEx_AESGCM_GenerateAuthTAG+0x1da>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Change the CRYP peripheral state */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2202      	movs	r2, #2
 80020a8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

    /* Check if initialization phase has already been performed */
    if (hcryp->Phase == CRYPEx_PHASE_PROCESS)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d17a      	bne.n	80021aa <HAL_CRYPEx_AESGCM_GenerateAuthTAG+0x19c>
    {
      /* Change the CRYP phase */
      hcryp->Phase = CRYPEx_PHASE_FINAL;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2203      	movs	r2, #3
 80020b8:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Select final phase */
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, CRYP_PHASE_FINAL);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80020c8:	601a      	str	r2, [r3, #0]

      /* Write into the AES_DINR register the number of bits in header (64 bits)
      followed by the number of bits in the payload */
      hcryp->Instance->DINR = 0U;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2200      	movs	r2, #0
 80020d0:	609a      	str	r2, [r3, #8]
      hcryp->Instance->DINR = (uint32_t)(headerlength);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020d8:	609a      	str	r2, [r3, #8]
      hcryp->Instance->DINR = 0U;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2200      	movs	r2, #0
 80020e0:	609a      	str	r2, [r3, #8]
      hcryp->Instance->DINR = (uint32_t)(inputlength);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	609a      	str	r2, [r3, #8]

      /* Wait for CCF flag to be raised */
      tickstart = HAL_GetTick();
 80020ea:	f7fe fbb5 	bl	8000858 <HAL_GetTick>
 80020ee:	6178      	str	r0, [r7, #20]
      while (HAL_IS_BIT_CLR(hcryp->Instance->ISR, AES_ISR_CCF))
 80020f0:	e026      	b.n	8002140 <HAL_CRYPEx_AESGCM_GenerateAuthTAG+0x132>
      {
        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020f8:	d022      	beq.n	8002140 <HAL_CRYPEx_AESGCM_GenerateAuthTAG+0x132>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80020fa:	f7fe fbad 	bl	8000858 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	429a      	cmp	r2, r3
 8002108:	d302      	bcc.n	8002110 <HAL_CRYPEx_AESGCM_GenerateAuthTAG+0x102>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d117      	bne.n	8002140 <HAL_CRYPEx_AESGCM_GenerateAuthTAG+0x132>
          {
            /* Disable the CRYP peripheral clock */
            __HAL_CRYP_DISABLE(hcryp);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f022 0201 	bic.w	r2, r2, #1
 800211e:	601a      	str	r2, [r3, #0]

            /* Change state */
            hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002124:	f043 0210 	orr.w	r2, r3, #16
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	65da      	str	r2, [r3, #92]	; 0x5c
            hcryp->State = HAL_CRYP_STATE_READY;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
            __HAL_UNLOCK(hcryp);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
            return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e053      	b.n	80021e8 <HAL_CRYPEx_AESGCM_GenerateAuthTAG+0x1da>
      while (HAL_IS_BIT_CLR(hcryp->Instance->ISR, AES_ISR_CCF))
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	2b00      	cmp	r3, #0
 800214e:	d0d0      	beq.n	80020f2 <HAL_CRYPEx_AESGCM_GenerateAuthTAG+0xe4>
          }
        }
      }

      /* Read the authentication TAG in the output FIFO */
      for (i = 0U; i < 4U; i++)
 8002150:	2300      	movs	r3, #0
 8002152:	623b      	str	r3, [r7, #32]
 8002154:	e00a      	b.n	800216c <HAL_CRYPEx_AESGCM_GenerateAuthTAG+0x15e>
      {
        *(uint32_t *)(tagaddr) = hcryp->Instance->DOUTR;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	68d2      	ldr	r2, [r2, #12]
 800215e:	601a      	str	r2, [r3, #0]
        tagaddr += 4U;
 8002160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002162:	3304      	adds	r3, #4
 8002164:	627b      	str	r3, [r7, #36]	; 0x24
      for (i = 0U; i < 4U; i++)
 8002166:	6a3b      	ldr	r3, [r7, #32]
 8002168:	3301      	adds	r3, #1
 800216a:	623b      	str	r3, [r7, #32]
 800216c:	6a3b      	ldr	r3, [r7, #32]
 800216e:	2b03      	cmp	r3, #3
 8002170:	d9f1      	bls.n	8002156 <HAL_CRYPEx_AESGCM_GenerateAuthTAG+0x148>
      }

      /* Clear CCF flag */
      __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f8d3 2308 	ldr.w	r2, [r3, #776]	; 0x308
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f042 0201 	orr.w	r2, r2, #1
 8002182:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

      /* Disable the peripheral */
      __HAL_CRYP_DISABLE(hcryp);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 0201 	bic.w	r2, r2, #1
 8002194:	601a      	str	r2, [r3, #0]

      /* Change the CRYP peripheral state */
      hcryp->State = HAL_CRYP_STATE_READY;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
      __HAL_UNLOCK(hcryp);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    /* Busy error code field */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
    return HAL_ERROR;
  }
  /* Return function status */
  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
 80021a8:	e01e      	b.n	80021e8 <HAL_CRYPEx_AESGCM_GenerateAuthTAG+0x1da>
      __HAL_CRYP_DISABLE(hcryp);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 0201 	bic.w	r2, r2, #1
 80021b8:	601a      	str	r2, [r3, #0]
      hcryp->ErrorCode |= HAL_CRYP_ERROR_AUTH_TAG_SEQUENCE;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	65da      	str	r2, [r3, #92]	; 0x5c
      hcryp->State = HAL_CRYP_STATE_READY;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2201      	movs	r2, #1
 80021ca:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
      __HAL_UNLOCK(hcryp);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e006      	b.n	80021e8 <HAL_CRYPEx_AESGCM_GenerateAuthTAG+0x1da>
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021de:	f043 0208 	orr.w	r2, r3, #8
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3730      	adds	r7, #48	; 0x30
 80021ec:	46bd      	mov	sp, r7
 80021ee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080021f4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b089      	sub	sp, #36	; 0x24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002206:	e1ba      	b.n	800257e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	2101      	movs	r1, #1
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	fa01 f303 	lsl.w	r3, r1, r3
 8002214:	4013      	ands	r3, r2
 8002216:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 81aa 	beq.w	8002578 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a55      	ldr	r2, [pc, #340]	; (800237c <HAL_GPIO_Init+0x188>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d15d      	bne.n	80022e8 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8002232:	2201      	movs	r2, #1
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43db      	mvns	r3, r3
 800223c:	69fa      	ldr	r2, [r7, #28]
 800223e:	4013      	ands	r3, r2
 8002240:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f003 0201 	and.w	r2, r3, #1
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	69fa      	ldr	r2, [r7, #28]
 8002252:	4313      	orrs	r3, r2
 8002254:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69fa      	ldr	r2, [r7, #28]
 800225a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 800225c:	4a48      	ldr	r2, [pc, #288]	; (8002380 <HAL_GPIO_Init+0x18c>)
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002264:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8002266:	4a46      	ldr	r2, [pc, #280]	; (8002380 <HAL_GPIO_Init+0x18c>)
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	4413      	add	r3, r2
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	08da      	lsrs	r2, r3, #3
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	3208      	adds	r2, #8
 800227a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800227e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	220f      	movs	r2, #15
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43db      	mvns	r3, r3
 8002290:	69fa      	ldr	r2, [r7, #28]
 8002292:	4013      	ands	r3, r2
 8002294:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	220b      	movs	r2, #11
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	69fa      	ldr	r2, [r7, #28]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	08da      	lsrs	r2, r3, #3
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	3208      	adds	r2, #8
 80022b2:	69f9      	ldr	r1, [r7, #28]
 80022b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	2203      	movs	r2, #3
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	43db      	mvns	r3, r3
 80022ca:	69fa      	ldr	r2, [r7, #28]
 80022cc:	4013      	ands	r3, r2
 80022ce:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	2202      	movs	r2, #2
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	69fa      	ldr	r2, [r7, #28]
 80022dc:	4313      	orrs	r3, r2
 80022de:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	69fa      	ldr	r2, [r7, #28]
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	e067      	b.n	80023b8 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d003      	beq.n	80022f8 <HAL_GPIO_Init+0x104>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	2b12      	cmp	r3, #18
 80022f6:	d145      	bne.n	8002384 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	08da      	lsrs	r2, r3, #3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3208      	adds	r2, #8
 8002300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002304:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	220f      	movs	r2, #15
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	43db      	mvns	r3, r3
 8002316:	69fa      	ldr	r2, [r7, #28]
 8002318:	4013      	ands	r3, r2
 800231a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	f003 020f 	and.w	r2, r3, #15
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	69fa      	ldr	r2, [r7, #28]
 8002332:	4313      	orrs	r3, r2
 8002334:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	08da      	lsrs	r2, r3, #3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	3208      	adds	r2, #8
 800233e:	69f9      	ldr	r1, [r7, #28]
 8002340:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	2203      	movs	r2, #3
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	43db      	mvns	r3, r3
 8002356:	69fa      	ldr	r2, [r7, #28]
 8002358:	4013      	ands	r3, r2
 800235a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 0203 	and.w	r2, r3, #3
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	69fa      	ldr	r2, [r7, #28]
 800236e:	4313      	orrs	r3, r2
 8002370:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	69fa      	ldr	r2, [r7, #28]
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	e01e      	b.n	80023b8 <HAL_GPIO_Init+0x1c4>
 800237a:	bf00      	nop
 800237c:	46020000 	.word	0x46020000
 8002380:	08003e14 	.word	0x08003e14
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	2203      	movs	r2, #3
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	43db      	mvns	r3, r3
 8002396:	69fa      	ldr	r2, [r7, #28]
 8002398:	4013      	ands	r3, r2
 800239a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f003 0203 	and.w	r2, r3, #3
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	69fa      	ldr	r2, [r7, #28]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	69fa      	ldr	r2, [r7, #28]
 80023b6:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d00b      	beq.n	80023d8 <HAL_GPIO_Init+0x1e4>
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d007      	beq.n	80023d8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023cc:	2b11      	cmp	r3, #17
 80023ce:	d003      	beq.n	80023d8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	2b12      	cmp	r3, #18
 80023d6:	d130      	bne.n	800243a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	2203      	movs	r2, #3
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	43db      	mvns	r3, r3
 80023ea:	69fa      	ldr	r2, [r7, #28]
 80023ec:	4013      	ands	r3, r2
 80023ee:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	68da      	ldr	r2, [r3, #12]
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	69fa      	ldr	r2, [r7, #28]
 80023fe:	4313      	orrs	r3, r2
 8002400:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	69fa      	ldr	r2, [r7, #28]
 8002406:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800240e:	2201      	movs	r2, #1
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	43db      	mvns	r3, r3
 8002418:	69fa      	ldr	r2, [r7, #28]
 800241a:	4013      	ands	r3, r2
 800241c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	091b      	lsrs	r3, r3, #4
 8002424:	f003 0201 	and.w	r2, r3, #1
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	69fa      	ldr	r2, [r7, #28]
 8002430:	4313      	orrs	r3, r2
 8002432:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	69fa      	ldr	r2, [r7, #28]
 8002438:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b03      	cmp	r3, #3
 8002440:	d017      	beq.n	8002472 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	2203      	movs	r2, #3
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43db      	mvns	r3, r3
 8002454:	69fa      	ldr	r2, [r7, #28]
 8002456:	4013      	ands	r3, r2
 8002458:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	689a      	ldr	r2, [r3, #8]
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	69fa      	ldr	r2, [r7, #28]
 8002468:	4313      	orrs	r3, r2
 800246a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	69fa      	ldr	r2, [r7, #28]
 8002470:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d07c      	beq.n	8002578 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800247e:	4a47      	ldr	r2, [pc, #284]	; (800259c <HAL_GPIO_Init+0x3a8>)
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	089b      	lsrs	r3, r3, #2
 8002484:	3318      	adds	r3, #24
 8002486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800248a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	f003 0303 	and.w	r3, r3, #3
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	220f      	movs	r2, #15
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	43db      	mvns	r3, r3
 800249c:	69fa      	ldr	r2, [r7, #28]
 800249e:	4013      	ands	r3, r2
 80024a0:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	0a9a      	lsrs	r2, r3, #10
 80024a6:	4b3e      	ldr	r3, [pc, #248]	; (80025a0 <HAL_GPIO_Init+0x3ac>)
 80024a8:	4013      	ands	r3, r2
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	f002 0203 	and.w	r2, r2, #3
 80024b0:	00d2      	lsls	r2, r2, #3
 80024b2:	4093      	lsls	r3, r2
 80024b4:	69fa      	ldr	r2, [r7, #28]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80024ba:	4938      	ldr	r1, [pc, #224]	; (800259c <HAL_GPIO_Init+0x3a8>)
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	089b      	lsrs	r3, r3, #2
 80024c0:	3318      	adds	r3, #24
 80024c2:	69fa      	ldr	r2, [r7, #28]
 80024c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80024c8:	4b34      	ldr	r3, [pc, #208]	; (800259c <HAL_GPIO_Init+0x3a8>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	43db      	mvns	r3, r3
 80024d2:	69fa      	ldr	r2, [r7, #28]
 80024d4:	4013      	ands	r3, r2
 80024d6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d003      	beq.n	80024ec <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80024e4:	69fa      	ldr	r2, [r7, #28]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80024ec:	4a2b      	ldr	r2, [pc, #172]	; (800259c <HAL_GPIO_Init+0x3a8>)
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80024f2:	4b2a      	ldr	r3, [pc, #168]	; (800259c <HAL_GPIO_Init+0x3a8>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	43db      	mvns	r3, r3
 80024fc:	69fa      	ldr	r2, [r7, #28]
 80024fe:	4013      	ands	r3, r2
 8002500:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800250e:	69fa      	ldr	r2, [r7, #28]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	4313      	orrs	r3, r2
 8002514:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8002516:	4a21      	ldr	r2, [pc, #132]	; (800259c <HAL_GPIO_Init+0x3a8>)
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800251c:	4b1f      	ldr	r3, [pc, #124]	; (800259c <HAL_GPIO_Init+0x3a8>)
 800251e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002522:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	43db      	mvns	r3, r3
 8002528:	69fa      	ldr	r2, [r7, #28]
 800252a:	4013      	ands	r3, r2
 800252c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d003      	beq.n	8002542 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800253a:	69fa      	ldr	r2, [r7, #28]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	4313      	orrs	r3, r2
 8002540:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8002542:	4a16      	ldr	r2, [pc, #88]	; (800259c <HAL_GPIO_Init+0x3a8>)
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800254a:	4b14      	ldr	r3, [pc, #80]	; (800259c <HAL_GPIO_Init+0x3a8>)
 800254c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002550:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	43db      	mvns	r3, r3
 8002556:	69fa      	ldr	r2, [r7, #28]
 8002558:	4013      	ands	r3, r2
 800255a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8002568:	69fa      	ldr	r2, [r7, #28]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	4313      	orrs	r3, r2
 800256e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8002570:	4a0a      	ldr	r2, [pc, #40]	; (800259c <HAL_GPIO_Init+0x3a8>)
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	3301      	adds	r3, #1
 800257c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	fa22 f303 	lsr.w	r3, r2, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	f47f ae3d 	bne.w	8002208 <HAL_GPIO_Init+0x14>
  }
}
 800258e:	bf00      	nop
 8002590:	bf00      	nop
 8002592:	3724      	adds	r7, #36	; 0x24
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	46022000 	.word	0x46022000
 80025a0:	002f7f7f 	.word	0x002f7f7f

080025a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	807b      	strh	r3, [r7, #2]
 80025b0:	4613      	mov	r3, r2
 80025b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025b4:	787b      	ldrb	r3, [r7, #1]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025ba:	887a      	ldrh	r2, [r7, #2]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80025c0:	e002      	b.n	80025c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80025c2:	887a      	ldrh	r2, [r7, #2]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025dc:	2300      	movs	r3, #0
 80025de:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80025e0:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d002      	beq.n	80025f2 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	73fb      	strb	r3, [r7, #15]
 80025f0:	e007      	b.n	8002602 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80025f2:	4b07      	ldr	r3, [pc, #28]	; (8002610 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f023 0204 	bic.w	r2, r3, #4
 80025fa:	4905      	ldr	r1, [pc, #20]	; (8002610 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4313      	orrs	r3, r2
 8002600:	600b      	str	r3, [r1, #0]
  }

  return status;
 8002602:	7bfb      	ldrb	r3, [r7, #15]
}
 8002604:	4618      	mov	r0, r3
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	40030400 	.word	0x40030400

08002614 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002618:	4b05      	ldr	r3, [pc, #20]	; (8002630 <HAL_ICACHE_Enable+0x1c>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a04      	ldr	r2, [pc, #16]	; (8002630 <HAL_ICACHE_Enable+0x1c>)
 800261e:	f043 0301 	orr.w	r3, r3, #1
 8002622:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	40030400 	.word	0x40030400

08002634 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800263c:	4b39      	ldr	r3, [pc, #228]	; (8002724 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800263e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002640:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002644:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002646:	68ba      	ldr	r2, [r7, #8]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	429a      	cmp	r2, r3
 800264c:	d10b      	bne.n	8002666 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002654:	d905      	bls.n	8002662 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002656:	4b33      	ldr	r3, [pc, #204]	; (8002724 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	4a32      	ldr	r2, [pc, #200]	; (8002724 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800265c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002660:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8002662:	2300      	movs	r3, #0
 8002664:	e057      	b.n	8002716 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800266c:	d90a      	bls.n	8002684 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800266e:	4b2d      	ldr	r3, [pc, #180]	; (8002724 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4313      	orrs	r3, r2
 800267a:	4a2a      	ldr	r2, [pc, #168]	; (8002724 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800267c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002680:	60d3      	str	r3, [r2, #12]
 8002682:	e007      	b.n	8002694 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8002684:	4b27      	ldr	r3, [pc, #156]	; (8002724 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800268c:	4925      	ldr	r1, [pc, #148]	; (8002724 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4313      	orrs	r3, r2
 8002692:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002694:	4b24      	ldr	r3, [pc, #144]	; (8002728 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a24      	ldr	r2, [pc, #144]	; (800272c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800269a:	fba2 2303 	umull	r2, r3, r2, r3
 800269e:	099b      	lsrs	r3, r3, #6
 80026a0:	2232      	movs	r2, #50	; 0x32
 80026a2:	fb02 f303 	mul.w	r3, r2, r3
 80026a6:	4a21      	ldr	r2, [pc, #132]	; (800272c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80026a8:	fba2 2303 	umull	r2, r3, r2, r3
 80026ac:	099b      	lsrs	r3, r3, #6
 80026ae:	3301      	adds	r3, #1
 80026b0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80026b2:	e002      	b.n	80026ba <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	3b01      	subs	r3, #1
 80026b8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80026ba:	4b1a      	ldr	r3, [pc, #104]	; (8002724 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d102      	bne.n	80026cc <HAL_PWREx_ControlVoltageScaling+0x98>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1f3      	bne.n	80026b4 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d01b      	beq.n	800270a <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80026d2:	4b15      	ldr	r3, [pc, #84]	; (8002728 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a15      	ldr	r2, [pc, #84]	; (800272c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80026d8:	fba2 2303 	umull	r2, r3, r2, r3
 80026dc:	099b      	lsrs	r3, r3, #6
 80026de:	2232      	movs	r2, #50	; 0x32
 80026e0:	fb02 f303 	mul.w	r3, r2, r3
 80026e4:	4a11      	ldr	r2, [pc, #68]	; (800272c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80026e6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ea:	099b      	lsrs	r3, r3, #6
 80026ec:	3301      	adds	r3, #1
 80026ee:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80026f0:	e002      	b.n	80026f8 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	3b01      	subs	r3, #1
 80026f6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80026f8:	4b0a      	ldr	r3, [pc, #40]	; (8002724 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80026fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d102      	bne.n	800270a <HAL_PWREx_ControlVoltageScaling+0xd6>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1f3      	bne.n	80026f2 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d101      	bne.n	8002714 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e000      	b.n	8002716 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3714      	adds	r7, #20
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	46020800 	.word	0x46020800
 8002728:	20000058 	.word	0x20000058
 800272c:	10624dd3 	.word	0x10624dd3

08002730 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8002734:	4b04      	ldr	r3, [pc, #16]	; (8002748 <HAL_PWREx_GetVoltageRange+0x18>)
 8002736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002738:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800273c:	4618      	mov	r0, r3
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	46020800 	.word	0x46020800

0800274c <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002754:	4b22      	ldr	r3, [pc, #136]	; (80027e0 <HAL_PWREx_ConfigSupply+0x94>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a22      	ldr	r2, [pc, #136]	; (80027e4 <HAL_PWREx_ConfigSupply+0x98>)
 800275a:	fba2 2303 	umull	r2, r3, r2, r3
 800275e:	099b      	lsrs	r3, r3, #6
 8002760:	2232      	movs	r2, #50	; 0x32
 8002762:	fb02 f303 	mul.w	r3, r2, r3
 8002766:	4a1f      	ldr	r2, [pc, #124]	; (80027e4 <HAL_PWREx_ConfigSupply+0x98>)
 8002768:	fba2 2303 	umull	r2, r3, r2, r3
 800276c:	099b      	lsrs	r3, r3, #6
 800276e:	3301      	adds	r3, #1
 8002770:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d113      	bne.n	80027a0 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8002778:	4b1b      	ldr	r3, [pc, #108]	; (80027e8 <HAL_PWREx_ConfigSupply+0x9c>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	4a1a      	ldr	r2, [pc, #104]	; (80027e8 <HAL_PWREx_ConfigSupply+0x9c>)
 800277e:	f023 0302 	bic.w	r3, r3, #2
 8002782:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002784:	e002      	b.n	800278c <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	3b01      	subs	r3, #1
 800278a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800278c:	4b16      	ldr	r3, [pc, #88]	; (80027e8 <HAL_PWREx_ConfigSupply+0x9c>)
 800278e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b02      	cmp	r3, #2
 8002796:	d116      	bne.n	80027c6 <HAL_PWREx_ConfigSupply+0x7a>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f3      	bne.n	8002786 <HAL_PWREx_ConfigSupply+0x3a>
 800279e:	e012      	b.n	80027c6 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80027a0:	4b11      	ldr	r3, [pc, #68]	; (80027e8 <HAL_PWREx_ConfigSupply+0x9c>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	4a10      	ldr	r2, [pc, #64]	; (80027e8 <HAL_PWREx_ConfigSupply+0x9c>)
 80027a6:	f043 0302 	orr.w	r3, r3, #2
 80027aa:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80027ac:	e002      	b.n	80027b4 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	3b01      	subs	r3, #1
 80027b2:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80027b4:	4b0c      	ldr	r3, [pc, #48]	; (80027e8 <HAL_PWREx_ConfigSupply+0x9c>)
 80027b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d102      	bne.n	80027c6 <HAL_PWREx_ConfigSupply+0x7a>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1f3      	bne.n	80027ae <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e000      	b.n	80027d2 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	20000058 	.word	0x20000058
 80027e4:	10624dd3 	.word	0x10624dd3
 80027e8:	46020800 	.word	0x46020800

080027ec <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 80027f0:	4b05      	ldr	r3, [pc, #20]	; (8002808 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80027f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f4:	4a04      	ldr	r2, [pc, #16]	; (8002808 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80027f6:	f043 0301 	orr.w	r3, r3, #1
 80027fa:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80027fc:	bf00      	nop
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	46020800 	.word	0x46020800

0800280c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b08e      	sub	sp, #56	; 0x38
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8002814:	2300      	movs	r3, #0
 8002816:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d102      	bne.n	8002826 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	f000 bec8 	b.w	80035b6 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002826:	4b99      	ldr	r3, [pc, #612]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	f003 030c 	and.w	r3, r3, #12
 800282e:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002830:	4b96      	ldr	r3, [pc, #600]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 8002832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002834:	f003 0303 	and.w	r3, r3, #3
 8002838:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0310 	and.w	r3, r3, #16
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 816c 	beq.w	8002b20 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284a:	2b00      	cmp	r3, #0
 800284c:	d007      	beq.n	800285e <HAL_RCC_OscConfig+0x52>
 800284e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002850:	2b0c      	cmp	r3, #12
 8002852:	f040 80de 	bne.w	8002a12 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002858:	2b01      	cmp	r3, #1
 800285a:	f040 80da 	bne.w	8002a12 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	69db      	ldr	r3, [r3, #28]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d102      	bne.n	800286c <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	f000 bea5 	b.w	80035b6 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002870:	4b86      	ldr	r3, [pc, #536]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d004      	beq.n	8002886 <HAL_RCC_OscConfig+0x7a>
 800287c:	4b83      	ldr	r3, [pc, #524]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002884:	e005      	b.n	8002892 <HAL_RCC_OscConfig+0x86>
 8002886:	4b81      	ldr	r3, [pc, #516]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 8002888:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800288c:	041b      	lsls	r3, r3, #16
 800288e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002892:	4293      	cmp	r3, r2
 8002894:	d255      	bcs.n	8002942 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10a      	bne.n	80028b2 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	4618      	mov	r0, r3
 80028a2:	f001 f99d 	bl	8003be0 <RCC_SetFlashLatencyFromMSIRange>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d002      	beq.n	80028b2 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	f000 be82 	b.w	80035b6 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80028b2:	4b76      	ldr	r3, [pc, #472]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	4a75      	ldr	r2, [pc, #468]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 80028b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028bc:	6093      	str	r3, [r2, #8]
 80028be:	4b73      	ldr	r3, [pc, #460]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ca:	4970      	ldr	r1, [pc, #448]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80028d8:	d309      	bcc.n	80028ee <HAL_RCC_OscConfig+0xe2>
 80028da:	4b6c      	ldr	r3, [pc, #432]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	f023 021f 	bic.w	r2, r3, #31
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	4969      	ldr	r1, [pc, #420]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	60cb      	str	r3, [r1, #12]
 80028ec:	e07e      	b.n	80029ec <HAL_RCC_OscConfig+0x1e0>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	da0a      	bge.n	800290c <HAL_RCC_OscConfig+0x100>
 80028f6:	4b65      	ldr	r3, [pc, #404]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	015b      	lsls	r3, r3, #5
 8002904:	4961      	ldr	r1, [pc, #388]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 8002906:	4313      	orrs	r3, r2
 8002908:	60cb      	str	r3, [r1, #12]
 800290a:	e06f      	b.n	80029ec <HAL_RCC_OscConfig+0x1e0>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002914:	d30a      	bcc.n	800292c <HAL_RCC_OscConfig+0x120>
 8002916:	4b5d      	ldr	r3, [pc, #372]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	029b      	lsls	r3, r3, #10
 8002924:	4959      	ldr	r1, [pc, #356]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 8002926:	4313      	orrs	r3, r2
 8002928:	60cb      	str	r3, [r1, #12]
 800292a:	e05f      	b.n	80029ec <HAL_RCC_OscConfig+0x1e0>
 800292c:	4b57      	ldr	r3, [pc, #348]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	03db      	lsls	r3, r3, #15
 800293a:	4954      	ldr	r1, [pc, #336]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 800293c:	4313      	orrs	r3, r2
 800293e:	60cb      	str	r3, [r1, #12]
 8002940:	e054      	b.n	80029ec <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002942:	4b52      	ldr	r3, [pc, #328]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	4a51      	ldr	r2, [pc, #324]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 8002948:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800294c:	6093      	str	r3, [r2, #8]
 800294e:	4b4f      	ldr	r3, [pc, #316]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295a:	494c      	ldr	r1, [pc, #304]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 800295c:	4313      	orrs	r3, r2
 800295e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002964:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002968:	d309      	bcc.n	800297e <HAL_RCC_OscConfig+0x172>
 800296a:	4b48      	ldr	r3, [pc, #288]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	f023 021f 	bic.w	r2, r3, #31
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	4945      	ldr	r1, [pc, #276]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 8002978:	4313      	orrs	r3, r2
 800297a:	60cb      	str	r3, [r1, #12]
 800297c:	e028      	b.n	80029d0 <HAL_RCC_OscConfig+0x1c4>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002982:	2b00      	cmp	r3, #0
 8002984:	da0a      	bge.n	800299c <HAL_RCC_OscConfig+0x190>
 8002986:	4b41      	ldr	r3, [pc, #260]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	015b      	lsls	r3, r3, #5
 8002994:	493d      	ldr	r1, [pc, #244]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 8002996:	4313      	orrs	r3, r2
 8002998:	60cb      	str	r3, [r1, #12]
 800299a:	e019      	b.n	80029d0 <HAL_RCC_OscConfig+0x1c4>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029a4:	d30a      	bcc.n	80029bc <HAL_RCC_OscConfig+0x1b0>
 80029a6:	4b39      	ldr	r3, [pc, #228]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	029b      	lsls	r3, r3, #10
 80029b4:	4935      	ldr	r1, [pc, #212]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	60cb      	str	r3, [r1, #12]
 80029ba:	e009      	b.n	80029d0 <HAL_RCC_OscConfig+0x1c4>
 80029bc:	4b33      	ldr	r3, [pc, #204]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	03db      	lsls	r3, r3, #15
 80029ca:	4930      	ldr	r1, [pc, #192]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80029d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10a      	bne.n	80029ec <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029da:	4618      	mov	r0, r3
 80029dc:	f001 f900 	bl	8003be0 <RCC_SetFlashLatencyFromMSIRange>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d002      	beq.n	80029ec <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	f000 bde5 	b.w	80035b6 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80029ec:	f001 f8de 	bl	8003bac <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80029f0:	4b27      	ldr	r3, [pc, #156]	; (8002a90 <HAL_RCC_OscConfig+0x284>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7fd fee5 	bl	80007c4 <HAL_InitTick>
 80029fa:	4603      	mov	r3, r0
 80029fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8002a00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 808a 	beq.w	8002b1e <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8002a0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a0e:	f000 bdd2 	b.w	80035b6 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d066      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8002a1a:	4b1c      	ldr	r3, [pc, #112]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a1b      	ldr	r2, [pc, #108]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 8002a20:	f043 0301 	orr.w	r3, r3, #1
 8002a24:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002a26:	f7fd ff17 	bl	8000858 <HAL_GetTick>
 8002a2a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002a2c:	e009      	b.n	8002a42 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a2e:	f7fd ff13 	bl	8000858 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d902      	bls.n	8002a42 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	f000 bdba 	b.w	80035b6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002a42:	4b12      	ldr	r3, [pc, #72]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0304 	and.w	r3, r3, #4
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d0ef      	beq.n	8002a2e <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002a4e:	4b0f      	ldr	r3, [pc, #60]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	4a0e      	ldr	r2, [pc, #56]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 8002a54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a58:	6093      	str	r3, [r2, #8]
 8002a5a:	4b0c      	ldr	r3, [pc, #48]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a66:	4909      	ldr	r1, [pc, #36]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a70:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002a74:	d30e      	bcc.n	8002a94 <HAL_RCC_OscConfig+0x288>
 8002a76:	4b05      	ldr	r3, [pc, #20]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	f023 021f 	bic.w	r2, r3, #31
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	4902      	ldr	r1, [pc, #8]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	60cb      	str	r3, [r1, #12]
 8002a88:	e04a      	b.n	8002b20 <HAL_RCC_OscConfig+0x314>
 8002a8a:	bf00      	nop
 8002a8c:	46020c00 	.word	0x46020c00
 8002a90:	2000005c 	.word	0x2000005c
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	da0a      	bge.n	8002ab2 <HAL_RCC_OscConfig+0x2a6>
 8002a9c:	4b98      	ldr	r3, [pc, #608]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	015b      	lsls	r3, r3, #5
 8002aaa:	4995      	ldr	r1, [pc, #596]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	60cb      	str	r3, [r1, #12]
 8002ab0:	e036      	b.n	8002b20 <HAL_RCC_OscConfig+0x314>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aba:	d30a      	bcc.n	8002ad2 <HAL_RCC_OscConfig+0x2c6>
 8002abc:	4b90      	ldr	r3, [pc, #576]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	029b      	lsls	r3, r3, #10
 8002aca:	498d      	ldr	r1, [pc, #564]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	60cb      	str	r3, [r1, #12]
 8002ad0:	e026      	b.n	8002b20 <HAL_RCC_OscConfig+0x314>
 8002ad2:	4b8b      	ldr	r3, [pc, #556]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	03db      	lsls	r3, r3, #15
 8002ae0:	4987      	ldr	r1, [pc, #540]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	60cb      	str	r3, [r1, #12]
 8002ae6:	e01b      	b.n	8002b20 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8002ae8:	4b85      	ldr	r3, [pc, #532]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a84      	ldr	r2, [pc, #528]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002aee:	f023 0301 	bic.w	r3, r3, #1
 8002af2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002af4:	f7fd feb0 	bl	8000858 <HAL_GetTick>
 8002af8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002afa:	e009      	b.n	8002b10 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002afc:	f7fd feac 	bl	8000858 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d902      	bls.n	8002b10 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	f000 bd53 	b.w	80035b6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002b10:	4b7b      	ldr	r3, [pc, #492]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1ef      	bne.n	8002afc <HAL_RCC_OscConfig+0x2f0>
 8002b1c:	e000      	b.n	8002b20 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002b1e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f000 808b 	beq.w	8002c44 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b30:	2b08      	cmp	r3, #8
 8002b32:	d005      	beq.n	8002b40 <HAL_RCC_OscConfig+0x334>
 8002b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b36:	2b0c      	cmp	r3, #12
 8002b38:	d109      	bne.n	8002b4e <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b3c:	2b03      	cmp	r3, #3
 8002b3e:	d106      	bne.n	8002b4e <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d17d      	bne.n	8002c44 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	f000 bd34 	b.w	80035b6 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b56:	d106      	bne.n	8002b66 <HAL_RCC_OscConfig+0x35a>
 8002b58:	4b69      	ldr	r3, [pc, #420]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a68      	ldr	r2, [pc, #416]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002b5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b62:	6013      	str	r3, [r2, #0]
 8002b64:	e041      	b.n	8002bea <HAL_RCC_OscConfig+0x3de>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b6e:	d112      	bne.n	8002b96 <HAL_RCC_OscConfig+0x38a>
 8002b70:	4b63      	ldr	r3, [pc, #396]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a62      	ldr	r2, [pc, #392]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002b76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b7a:	6013      	str	r3, [r2, #0]
 8002b7c:	4b60      	ldr	r3, [pc, #384]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a5f      	ldr	r2, [pc, #380]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002b82:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002b86:	6013      	str	r3, [r2, #0]
 8002b88:	4b5d      	ldr	r3, [pc, #372]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a5c      	ldr	r2, [pc, #368]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002b8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b92:	6013      	str	r3, [r2, #0]
 8002b94:	e029      	b.n	8002bea <HAL_RCC_OscConfig+0x3de>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002b9e:	d112      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x3ba>
 8002ba0:	4b57      	ldr	r3, [pc, #348]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a56      	ldr	r2, [pc, #344]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002ba6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002baa:	6013      	str	r3, [r2, #0]
 8002bac:	4b54      	ldr	r3, [pc, #336]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a53      	ldr	r2, [pc, #332]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002bb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bb6:	6013      	str	r3, [r2, #0]
 8002bb8:	4b51      	ldr	r3, [pc, #324]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a50      	ldr	r2, [pc, #320]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002bbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc2:	6013      	str	r3, [r2, #0]
 8002bc4:	e011      	b.n	8002bea <HAL_RCC_OscConfig+0x3de>
 8002bc6:	4b4e      	ldr	r3, [pc, #312]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a4d      	ldr	r2, [pc, #308]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002bcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bd0:	6013      	str	r3, [r2, #0]
 8002bd2:	4b4b      	ldr	r3, [pc, #300]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a4a      	ldr	r2, [pc, #296]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002bd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bdc:	6013      	str	r3, [r2, #0]
 8002bde:	4b48      	ldr	r3, [pc, #288]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a47      	ldr	r2, [pc, #284]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002be4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002be8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d014      	beq.n	8002c1c <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8002bf2:	f7fd fe31 	bl	8000858 <HAL_GetTick>
 8002bf6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bf8:	e009      	b.n	8002c0e <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bfa:	f7fd fe2d 	bl	8000858 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b64      	cmp	r3, #100	; 0x64
 8002c06:	d902      	bls.n	8002c0e <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	f000 bcd4 	b.w	80035b6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c0e:	4b3c      	ldr	r3, [pc, #240]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0ef      	beq.n	8002bfa <HAL_RCC_OscConfig+0x3ee>
 8002c1a:	e013      	b.n	8002c44 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8002c1c:	f7fd fe1c 	bl	8000858 <HAL_GetTick>
 8002c20:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c22:	e009      	b.n	8002c38 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c24:	f7fd fe18 	bl	8000858 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b64      	cmp	r3, #100	; 0x64
 8002c30:	d902      	bls.n	8002c38 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	f000 bcbf 	b.w	80035b6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c38:	4b31      	ldr	r3, [pc, #196]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1ef      	bne.n	8002c24 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d05f      	beq.n	8002d10 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	d005      	beq.n	8002c62 <HAL_RCC_OscConfig+0x456>
 8002c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c58:	2b0c      	cmp	r3, #12
 8002c5a:	d114      	bne.n	8002c86 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d111      	bne.n	8002c86 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d102      	bne.n	8002c70 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	f000 bca3 	b.w	80035b6 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002c70:	4b23      	ldr	r3, [pc, #140]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	041b      	lsls	r3, r3, #16
 8002c7e:	4920      	ldr	r1, [pc, #128]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002c84:	e044      	b.n	8002d10 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d024      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8002c8e:	4b1c      	ldr	r3, [pc, #112]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a1b      	ldr	r2, [pc, #108]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c98:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002c9a:	f7fd fddd 	bl	8000858 <HAL_GetTick>
 8002c9e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ca0:	e009      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ca2:	f7fd fdd9 	bl	8000858 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d902      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	f000 bc80 	b.w	80035b6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cb6:	4b12      	ldr	r3, [pc, #72]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d0ef      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002cc2:	4b0f      	ldr	r3, [pc, #60]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	041b      	lsls	r3, r3, #16
 8002cd0:	490b      	ldr	r1, [pc, #44]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	610b      	str	r3, [r1, #16]
 8002cd6:	e01b      	b.n	8002d10 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8002cd8:	4b09      	ldr	r3, [pc, #36]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a08      	ldr	r2, [pc, #32]	; (8002d00 <HAL_RCC_OscConfig+0x4f4>)
 8002cde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ce2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002ce4:	f7fd fdb8 	bl	8000858 <HAL_GetTick>
 8002ce8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cea:	e00b      	b.n	8002d04 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cec:	f7fd fdb4 	bl	8000858 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d904      	bls.n	8002d04 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	f000 bc5b 	b.w	80035b6 <HAL_RCC_OscConfig+0xdaa>
 8002d00:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d04:	4baf      	ldr	r3, [pc, #700]	; (8002fc4 <HAL_RCC_OscConfig+0x7b8>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1ed      	bne.n	8002cec <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0308 	and.w	r3, r3, #8
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f000 80c8 	beq.w	8002eae <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d24:	4ba7      	ldr	r3, [pc, #668]	; (8002fc4 <HAL_RCC_OscConfig+0x7b8>)
 8002d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d2a:	f003 0304 	and.w	r3, r3, #4
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d111      	bne.n	8002d56 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d32:	4ba4      	ldr	r3, [pc, #656]	; (8002fc4 <HAL_RCC_OscConfig+0x7b8>)
 8002d34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d38:	4aa2      	ldr	r2, [pc, #648]	; (8002fc4 <HAL_RCC_OscConfig+0x7b8>)
 8002d3a:	f043 0304 	orr.w	r3, r3, #4
 8002d3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002d42:	4ba0      	ldr	r3, [pc, #640]	; (8002fc4 <HAL_RCC_OscConfig+0x7b8>)
 8002d44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	617b      	str	r3, [r7, #20]
 8002d4e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8002d50:	2301      	movs	r3, #1
 8002d52:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002d56:	4b9c      	ldr	r3, [pc, #624]	; (8002fc8 <HAL_RCC_OscConfig+0x7bc>)
 8002d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d119      	bne.n	8002d96 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002d62:	4b99      	ldr	r3, [pc, #612]	; (8002fc8 <HAL_RCC_OscConfig+0x7bc>)
 8002d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d66:	4a98      	ldr	r2, [pc, #608]	; (8002fc8 <HAL_RCC_OscConfig+0x7bc>)
 8002d68:	f043 0301 	orr.w	r3, r3, #1
 8002d6c:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d6e:	f7fd fd73 	bl	8000858 <HAL_GetTick>
 8002d72:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002d74:	e009      	b.n	8002d8a <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d76:	f7fd fd6f 	bl	8000858 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d902      	bls.n	8002d8a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	f000 bc16 	b.w	80035b6 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002d8a:	4b8f      	ldr	r3, [pc, #572]	; (8002fc8 <HAL_RCC_OscConfig+0x7bc>)
 8002d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0ef      	beq.n	8002d76 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d05f      	beq.n	8002e5e <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8002d9e:	4b89      	ldr	r3, [pc, #548]	; (8002fc4 <HAL_RCC_OscConfig+0x7b8>)
 8002da0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002da4:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	699a      	ldr	r2, [r3, #24]
 8002daa:	6a3b      	ldr	r3, [r7, #32]
 8002dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d037      	beq.n	8002e24 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002db4:	6a3b      	ldr	r3, [r7, #32]
 8002db6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d006      	beq.n	8002dcc <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8002dbe:	6a3b      	ldr	r3, [r7, #32]
 8002dc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e3f4      	b.n	80035b6 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8002dcc:	6a3b      	ldr	r3, [r7, #32]
 8002dce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d01b      	beq.n	8002e0e <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8002dd6:	4b7b      	ldr	r3, [pc, #492]	; (8002fc4 <HAL_RCC_OscConfig+0x7b8>)
 8002dd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ddc:	4a79      	ldr	r2, [pc, #484]	; (8002fc4 <HAL_RCC_OscConfig+0x7b8>)
 8002dde:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8002de2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8002de6:	f7fd fd37 	bl	8000858 <HAL_GetTick>
 8002dea:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002dec:	e008      	b.n	8002e00 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dee:	f7fd fd33 	bl	8000858 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b05      	cmp	r3, #5
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e3da      	b.n	80035b6 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002e00:	4b70      	ldr	r3, [pc, #448]	; (8002fc4 <HAL_RCC_OscConfig+0x7b8>)
 8002e02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1ef      	bne.n	8002dee <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8002e0e:	4b6d      	ldr	r3, [pc, #436]	; (8002fc4 <HAL_RCC_OscConfig+0x7b8>)
 8002e10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e14:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	4969      	ldr	r1, [pc, #420]	; (8002fc4 <HAL_RCC_OscConfig+0x7b8>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8002e24:	4b67      	ldr	r3, [pc, #412]	; (8002fc4 <HAL_RCC_OscConfig+0x7b8>)
 8002e26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e2a:	4a66      	ldr	r2, [pc, #408]	; (8002fc4 <HAL_RCC_OscConfig+0x7b8>)
 8002e2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e30:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8002e34:	f7fd fd10 	bl	8000858 <HAL_GetTick>
 8002e38:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e3c:	f7fd fd0c 	bl	8000858 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b05      	cmp	r3, #5
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e3b3      	b.n	80035b6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002e4e:	4b5d      	ldr	r3, [pc, #372]	; (8002fc4 <HAL_RCC_OscConfig+0x7b8>)
 8002e50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0ef      	beq.n	8002e3c <HAL_RCC_OscConfig+0x630>
 8002e5c:	e01b      	b.n	8002e96 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8002e5e:	4b59      	ldr	r3, [pc, #356]	; (8002fc4 <HAL_RCC_OscConfig+0x7b8>)
 8002e60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e64:	4a57      	ldr	r2, [pc, #348]	; (8002fc4 <HAL_RCC_OscConfig+0x7b8>)
 8002e66:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8002e6a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8002e6e:	f7fd fcf3 	bl	8000858 <HAL_GetTick>
 8002e72:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002e74:	e008      	b.n	8002e88 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e76:	f7fd fcef 	bl	8000858 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b05      	cmp	r3, #5
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e396      	b.n	80035b6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002e88:	4b4e      	ldr	r3, [pc, #312]	; (8002fc4 <HAL_RCC_OscConfig+0x7b8>)
 8002e8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1ef      	bne.n	8002e76 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e96:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d107      	bne.n	8002eae <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e9e:	4b49      	ldr	r3, [pc, #292]	; (8002fc4 <HAL_RCC_OscConfig+0x7b8>)
 8002ea0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ea4:	4a47      	ldr	r2, [pc, #284]	; (8002fc4 <HAL_RCC_OscConfig+0x7b8>)
 8002ea6:	f023 0304 	bic.w	r3, r3, #4
 8002eaa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0304 	and.w	r3, r3, #4
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f000 8111 	beq.w	80030de <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ec2:	4b40      	ldr	r3, [pc, #256]	; (8002fc4 <HAL_RCC_OscConfig+0x7b8>)
 8002ec4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ec8:	f003 0304 	and.w	r3, r3, #4
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d111      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ed0:	4b3c      	ldr	r3, [pc, #240]	; (8002fc4 <HAL_RCC_OscConfig+0x7b8>)
 8002ed2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ed6:	4a3b      	ldr	r2, [pc, #236]	; (8002fc4 <HAL_RCC_OscConfig+0x7b8>)
 8002ed8:	f043 0304 	orr.w	r3, r3, #4
 8002edc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002ee0:	4b38      	ldr	r3, [pc, #224]	; (8002fc4 <HAL_RCC_OscConfig+0x7b8>)
 8002ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ee6:	f003 0304 	and.w	r3, r3, #4
 8002eea:	613b      	str	r3, [r7, #16]
 8002eec:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002ef4:	4b34      	ldr	r3, [pc, #208]	; (8002fc8 <HAL_RCC_OscConfig+0x7bc>)
 8002ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d118      	bne.n	8002f32 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002f00:	4b31      	ldr	r3, [pc, #196]	; (8002fc8 <HAL_RCC_OscConfig+0x7bc>)
 8002f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f04:	4a30      	ldr	r2, [pc, #192]	; (8002fc8 <HAL_RCC_OscConfig+0x7bc>)
 8002f06:	f043 0301 	orr.w	r3, r3, #1
 8002f0a:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f0c:	f7fd fca4 	bl	8000858 <HAL_GetTick>
 8002f10:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f14:	f7fd fca0 	bl	8000858 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e347      	b.n	80035b6 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002f26:	4b28      	ldr	r3, [pc, #160]	; (8002fc8 <HAL_RCC_OscConfig+0x7bc>)
 8002f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0f0      	beq.n	8002f14 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d01f      	beq.n	8002f7e <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 0304 	and.w	r3, r3, #4
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d010      	beq.n	8002f6c <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002f4a:	4b1e      	ldr	r3, [pc, #120]	; (8002fc4 <HAL_RCC_OscConfig+0x7b8>)
 8002f4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f50:	4a1c      	ldr	r2, [pc, #112]	; (8002fc4 <HAL_RCC_OscConfig+0x7b8>)
 8002f52:	f043 0304 	orr.w	r3, r3, #4
 8002f56:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f5a:	4b1a      	ldr	r3, [pc, #104]	; (8002fc4 <HAL_RCC_OscConfig+0x7b8>)
 8002f5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f60:	4a18      	ldr	r2, [pc, #96]	; (8002fc4 <HAL_RCC_OscConfig+0x7b8>)
 8002f62:	f043 0301 	orr.w	r3, r3, #1
 8002f66:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002f6a:	e018      	b.n	8002f9e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f6c:	4b15      	ldr	r3, [pc, #84]	; (8002fc4 <HAL_RCC_OscConfig+0x7b8>)
 8002f6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f72:	4a14      	ldr	r2, [pc, #80]	; (8002fc4 <HAL_RCC_OscConfig+0x7b8>)
 8002f74:	f043 0301 	orr.w	r3, r3, #1
 8002f78:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002f7c:	e00f      	b.n	8002f9e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f7e:	4b11      	ldr	r3, [pc, #68]	; (8002fc4 <HAL_RCC_OscConfig+0x7b8>)
 8002f80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f84:	4a0f      	ldr	r2, [pc, #60]	; (8002fc4 <HAL_RCC_OscConfig+0x7b8>)
 8002f86:	f023 0301 	bic.w	r3, r3, #1
 8002f8a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002f8e:	4b0d      	ldr	r3, [pc, #52]	; (8002fc4 <HAL_RCC_OscConfig+0x7b8>)
 8002f90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f94:	4a0b      	ldr	r2, [pc, #44]	; (8002fc4 <HAL_RCC_OscConfig+0x7b8>)
 8002f96:	f023 0304 	bic.w	r3, r3, #4
 8002f9a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d057      	beq.n	8003056 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8002fa6:	f7fd fc57 	bl	8000858 <HAL_GetTick>
 8002faa:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fac:	e00e      	b.n	8002fcc <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fae:	f7fd fc53 	bl	8000858 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d905      	bls.n	8002fcc <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e2f8      	b.n	80035b6 <HAL_RCC_OscConfig+0xdaa>
 8002fc4:	46020c00 	.word	0x46020c00
 8002fc8:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fcc:	4b9c      	ldr	r3, [pc, #624]	; (8003240 <HAL_RCC_OscConfig+0xa34>)
 8002fce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d0e9      	beq.n	8002fae <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d01b      	beq.n	800301e <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002fe6:	4b96      	ldr	r3, [pc, #600]	; (8003240 <HAL_RCC_OscConfig+0xa34>)
 8002fe8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002fec:	4a94      	ldr	r2, [pc, #592]	; (8003240 <HAL_RCC_OscConfig+0xa34>)
 8002fee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ff2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002ff6:	e00a      	b.n	800300e <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ff8:	f7fd fc2e 	bl	8000858 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	f241 3288 	movw	r2, #5000	; 0x1388
 8003006:	4293      	cmp	r3, r2
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e2d3      	b.n	80035b6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800300e:	4b8c      	ldr	r3, [pc, #560]	; (8003240 <HAL_RCC_OscConfig+0xa34>)
 8003010:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003014:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0ed      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x7ec>
 800301c:	e053      	b.n	80030c6 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800301e:	4b88      	ldr	r3, [pc, #544]	; (8003240 <HAL_RCC_OscConfig+0xa34>)
 8003020:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003024:	4a86      	ldr	r2, [pc, #536]	; (8003240 <HAL_RCC_OscConfig+0xa34>)
 8003026:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800302a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800302e:	e00a      	b.n	8003046 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003030:	f7fd fc12 	bl	8000858 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	f241 3288 	movw	r2, #5000	; 0x1388
 800303e:	4293      	cmp	r3, r2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e2b7      	b.n	80035b6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003046:	4b7e      	ldr	r3, [pc, #504]	; (8003240 <HAL_RCC_OscConfig+0xa34>)
 8003048:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800304c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1ed      	bne.n	8003030 <HAL_RCC_OscConfig+0x824>
 8003054:	e037      	b.n	80030c6 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8003056:	f7fd fbff 	bl	8000858 <HAL_GetTick>
 800305a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800305c:	e00a      	b.n	8003074 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800305e:	f7fd fbfb 	bl	8000858 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	f241 3288 	movw	r2, #5000	; 0x1388
 800306c:	4293      	cmp	r3, r2
 800306e:	d901      	bls.n	8003074 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e2a0      	b.n	80035b6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003074:	4b72      	ldr	r3, [pc, #456]	; (8003240 <HAL_RCC_OscConfig+0xa34>)
 8003076:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1ed      	bne.n	800305e <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003082:	4b6f      	ldr	r3, [pc, #444]	; (8003240 <HAL_RCC_OscConfig+0xa34>)
 8003084:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800308c:	2b00      	cmp	r3, #0
 800308e:	d01a      	beq.n	80030c6 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003090:	4b6b      	ldr	r3, [pc, #428]	; (8003240 <HAL_RCC_OscConfig+0xa34>)
 8003092:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003096:	4a6a      	ldr	r2, [pc, #424]	; (8003240 <HAL_RCC_OscConfig+0xa34>)
 8003098:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800309c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80030a0:	e00a      	b.n	80030b8 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030a2:	f7fd fbd9 	bl	8000858 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d901      	bls.n	80030b8 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e27e      	b.n	80035b6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80030b8:	4b61      	ldr	r3, [pc, #388]	; (8003240 <HAL_RCC_OscConfig+0xa34>)
 80030ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80030be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1ed      	bne.n	80030a2 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030c6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d107      	bne.n	80030de <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ce:	4b5c      	ldr	r3, [pc, #368]	; (8003240 <HAL_RCC_OscConfig+0xa34>)
 80030d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030d4:	4a5a      	ldr	r2, [pc, #360]	; (8003240 <HAL_RCC_OscConfig+0xa34>)
 80030d6:	f023 0304 	bic.w	r3, r3, #4
 80030da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0320 	and.w	r3, r3, #32
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d036      	beq.n	8003158 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d019      	beq.n	8003126 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80030f2:	4b53      	ldr	r3, [pc, #332]	; (8003240 <HAL_RCC_OscConfig+0xa34>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a52      	ldr	r2, [pc, #328]	; (8003240 <HAL_RCC_OscConfig+0xa34>)
 80030f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80030fc:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80030fe:	f7fd fbab 	bl	8000858 <HAL_GetTick>
 8003102:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003104:	e008      	b.n	8003118 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003106:	f7fd fba7 	bl	8000858 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e24e      	b.n	80035b6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003118:	4b49      	ldr	r3, [pc, #292]	; (8003240 <HAL_RCC_OscConfig+0xa34>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d0f0      	beq.n	8003106 <HAL_RCC_OscConfig+0x8fa>
 8003124:	e018      	b.n	8003158 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8003126:	4b46      	ldr	r3, [pc, #280]	; (8003240 <HAL_RCC_OscConfig+0xa34>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a45      	ldr	r2, [pc, #276]	; (8003240 <HAL_RCC_OscConfig+0xa34>)
 800312c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003130:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003132:	f7fd fb91 	bl	8000858 <HAL_GetTick>
 8003136:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003138:	e008      	b.n	800314c <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800313a:	f7fd fb8d 	bl	8000858 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d901      	bls.n	800314c <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e234      	b.n	80035b6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800314c:	4b3c      	ldr	r3, [pc, #240]	; (8003240 <HAL_RCC_OscConfig+0xa34>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d1f0      	bne.n	800313a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003160:	2b00      	cmp	r3, #0
 8003162:	d036      	beq.n	80031d2 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003168:	2b00      	cmp	r3, #0
 800316a:	d019      	beq.n	80031a0 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800316c:	4b34      	ldr	r3, [pc, #208]	; (8003240 <HAL_RCC_OscConfig+0xa34>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a33      	ldr	r2, [pc, #204]	; (8003240 <HAL_RCC_OscConfig+0xa34>)
 8003172:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003176:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003178:	f7fd fb6e 	bl	8000858 <HAL_GetTick>
 800317c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003180:	f7fd fb6a 	bl	8000858 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e211      	b.n	80035b6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003192:	4b2b      	ldr	r3, [pc, #172]	; (8003240 <HAL_RCC_OscConfig+0xa34>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d0f0      	beq.n	8003180 <HAL_RCC_OscConfig+0x974>
 800319e:	e018      	b.n	80031d2 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80031a0:	4b27      	ldr	r3, [pc, #156]	; (8003240 <HAL_RCC_OscConfig+0xa34>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a26      	ldr	r2, [pc, #152]	; (8003240 <HAL_RCC_OscConfig+0xa34>)
 80031a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031aa:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80031ac:	f7fd fb54 	bl	8000858 <HAL_GetTick>
 80031b0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80031b4:	f7fd fb50 	bl	8000858 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e1f7      	b.n	80035b6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80031c6:	4b1e      	ldr	r3, [pc, #120]	; (8003240 <HAL_RCC_OscConfig+0xa34>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f0      	bne.n	80031b4 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d07f      	beq.n	80032de <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d062      	beq.n	80032ac <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80031e6:	4b16      	ldr	r3, [pc, #88]	; (8003240 <HAL_RCC_OscConfig+0xa34>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	4a15      	ldr	r2, [pc, #84]	; (8003240 <HAL_RCC_OscConfig+0xa34>)
 80031ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031f0:	6093      	str	r3, [r2, #8]
 80031f2:	4b13      	ldr	r3, [pc, #76]	; (8003240 <HAL_RCC_OscConfig+0xa34>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fe:	4910      	ldr	r1, [pc, #64]	; (8003240 <HAL_RCC_OscConfig+0xa34>)
 8003200:	4313      	orrs	r3, r2
 8003202:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003208:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800320c:	d309      	bcc.n	8003222 <HAL_RCC_OscConfig+0xa16>
 800320e:	4b0c      	ldr	r3, [pc, #48]	; (8003240 <HAL_RCC_OscConfig+0xa34>)
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	f023 021f 	bic.w	r2, r3, #31
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	4909      	ldr	r1, [pc, #36]	; (8003240 <HAL_RCC_OscConfig+0xa34>)
 800321c:	4313      	orrs	r3, r2
 800321e:	60cb      	str	r3, [r1, #12]
 8003220:	e02a      	b.n	8003278 <HAL_RCC_OscConfig+0xa6c>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	2b00      	cmp	r3, #0
 8003228:	da0c      	bge.n	8003244 <HAL_RCC_OscConfig+0xa38>
 800322a:	4b05      	ldr	r3, [pc, #20]	; (8003240 <HAL_RCC_OscConfig+0xa34>)
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	015b      	lsls	r3, r3, #5
 8003238:	4901      	ldr	r1, [pc, #4]	; (8003240 <HAL_RCC_OscConfig+0xa34>)
 800323a:	4313      	orrs	r3, r2
 800323c:	60cb      	str	r3, [r1, #12]
 800323e:	e01b      	b.n	8003278 <HAL_RCC_OscConfig+0xa6c>
 8003240:	46020c00 	.word	0x46020c00
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800324c:	d30a      	bcc.n	8003264 <HAL_RCC_OscConfig+0xa58>
 800324e:	4ba1      	ldr	r3, [pc, #644]	; (80034d4 <HAL_RCC_OscConfig+0xcc8>)
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	029b      	lsls	r3, r3, #10
 800325c:	499d      	ldr	r1, [pc, #628]	; (80034d4 <HAL_RCC_OscConfig+0xcc8>)
 800325e:	4313      	orrs	r3, r2
 8003260:	60cb      	str	r3, [r1, #12]
 8003262:	e009      	b.n	8003278 <HAL_RCC_OscConfig+0xa6c>
 8003264:	4b9b      	ldr	r3, [pc, #620]	; (80034d4 <HAL_RCC_OscConfig+0xcc8>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	03db      	lsls	r3, r3, #15
 8003272:	4998      	ldr	r1, [pc, #608]	; (80034d4 <HAL_RCC_OscConfig+0xcc8>)
 8003274:	4313      	orrs	r3, r2
 8003276:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8003278:	4b96      	ldr	r3, [pc, #600]	; (80034d4 <HAL_RCC_OscConfig+0xcc8>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a95      	ldr	r2, [pc, #596]	; (80034d4 <HAL_RCC_OscConfig+0xcc8>)
 800327e:	f043 0310 	orr.w	r3, r3, #16
 8003282:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003284:	f7fd fae8 	bl	8000858 <HAL_GetTick>
 8003288:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800328c:	f7fd fae4 	bl	8000858 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e18b      	b.n	80035b6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800329e:	4b8d      	ldr	r3, [pc, #564]	; (80034d4 <HAL_RCC_OscConfig+0xcc8>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0320 	and.w	r3, r3, #32
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d0f0      	beq.n	800328c <HAL_RCC_OscConfig+0xa80>
 80032aa:	e018      	b.n	80032de <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80032ac:	4b89      	ldr	r3, [pc, #548]	; (80034d4 <HAL_RCC_OscConfig+0xcc8>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a88      	ldr	r2, [pc, #544]	; (80034d4 <HAL_RCC_OscConfig+0xcc8>)
 80032b2:	f023 0310 	bic.w	r3, r3, #16
 80032b6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80032b8:	f7fd face 	bl	8000858 <HAL_GetTick>
 80032bc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80032c0:	f7fd faca 	bl	8000858 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e171      	b.n	80035b6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80032d2:	4b80      	ldr	r3, [pc, #512]	; (80034d4 <HAL_RCC_OscConfig+0xcc8>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0320 	and.w	r3, r3, #32
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1f0      	bne.n	80032c0 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 8166 	beq.w	80035b4 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80032e8:	2300      	movs	r3, #0
 80032ea:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032ee:	4b79      	ldr	r3, [pc, #484]	; (80034d4 <HAL_RCC_OscConfig+0xcc8>)
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	f003 030c 	and.w	r3, r3, #12
 80032f6:	2b0c      	cmp	r3, #12
 80032f8:	f000 80f2 	beq.w	80034e0 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003300:	2b02      	cmp	r3, #2
 8003302:	f040 80c5 	bne.w	8003490 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003306:	4b73      	ldr	r3, [pc, #460]	; (80034d4 <HAL_RCC_OscConfig+0xcc8>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a72      	ldr	r2, [pc, #456]	; (80034d4 <HAL_RCC_OscConfig+0xcc8>)
 800330c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003310:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003312:	f7fd faa1 	bl	8000858 <HAL_GetTick>
 8003316:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003318:	e008      	b.n	800332c <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800331a:	f7fd fa9d 	bl	8000858 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d901      	bls.n	800332c <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e144      	b.n	80035b6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800332c:	4b69      	ldr	r3, [pc, #420]	; (80034d4 <HAL_RCC_OscConfig+0xcc8>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1f0      	bne.n	800331a <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003338:	4b66      	ldr	r3, [pc, #408]	; (80034d4 <HAL_RCC_OscConfig+0xcc8>)
 800333a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800333e:	f003 0304 	and.w	r3, r3, #4
 8003342:	2b00      	cmp	r3, #0
 8003344:	d111      	bne.n	800336a <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8003346:	4b63      	ldr	r3, [pc, #396]	; (80034d4 <HAL_RCC_OscConfig+0xcc8>)
 8003348:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800334c:	4a61      	ldr	r2, [pc, #388]	; (80034d4 <HAL_RCC_OscConfig+0xcc8>)
 800334e:	f043 0304 	orr.w	r3, r3, #4
 8003352:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003356:	4b5f      	ldr	r3, [pc, #380]	; (80034d4 <HAL_RCC_OscConfig+0xcc8>)
 8003358:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800335c:	f003 0304 	and.w	r3, r3, #4
 8003360:	60fb      	str	r3, [r7, #12]
 8003362:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8003364:	2301      	movs	r3, #1
 8003366:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800336a:	4b5b      	ldr	r3, [pc, #364]	; (80034d8 <HAL_RCC_OscConfig+0xccc>)
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003372:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003376:	d102      	bne.n	800337e <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8003378:	2301      	movs	r3, #1
 800337a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800337e:	4b56      	ldr	r3, [pc, #344]	; (80034d8 <HAL_RCC_OscConfig+0xccc>)
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	4a55      	ldr	r2, [pc, #340]	; (80034d8 <HAL_RCC_OscConfig+0xccc>)
 8003384:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003388:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800338a:	4b52      	ldr	r3, [pc, #328]	; (80034d4 <HAL_RCC_OscConfig+0xcc8>)
 800338c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003392:	f023 0303 	bic.w	r3, r3, #3
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800339e:	3a01      	subs	r2, #1
 80033a0:	0212      	lsls	r2, r2, #8
 80033a2:	4311      	orrs	r1, r2
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80033a8:	430a      	orrs	r2, r1
 80033aa:	494a      	ldr	r1, [pc, #296]	; (80034d4 <HAL_RCC_OscConfig+0xcc8>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	628b      	str	r3, [r1, #40]	; 0x28
 80033b0:	4b48      	ldr	r3, [pc, #288]	; (80034d4 <HAL_RCC_OscConfig+0xcc8>)
 80033b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033b4:	4b49      	ldr	r3, [pc, #292]	; (80034dc <HAL_RCC_OscConfig+0xcd0>)
 80033b6:	4013      	ands	r3, r2
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80033bc:	3a01      	subs	r2, #1
 80033be:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80033c6:	3a01      	subs	r2, #1
 80033c8:	0252      	lsls	r2, r2, #9
 80033ca:	b292      	uxth	r2, r2
 80033cc:	4311      	orrs	r1, r2
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80033d2:	3a01      	subs	r2, #1
 80033d4:	0412      	lsls	r2, r2, #16
 80033d6:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80033da:	4311      	orrs	r1, r2
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80033e0:	3a01      	subs	r2, #1
 80033e2:	0612      	lsls	r2, r2, #24
 80033e4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80033e8:	430a      	orrs	r2, r1
 80033ea:	493a      	ldr	r1, [pc, #232]	; (80034d4 <HAL_RCC_OscConfig+0xcc8>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80033f0:	4b38      	ldr	r3, [pc, #224]	; (80034d4 <HAL_RCC_OscConfig+0xcc8>)
 80033f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f4:	4a37      	ldr	r2, [pc, #220]	; (80034d4 <HAL_RCC_OscConfig+0xcc8>)
 80033f6:	f023 0310 	bic.w	r3, r3, #16
 80033fa:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003400:	4a34      	ldr	r2, [pc, #208]	; (80034d4 <HAL_RCC_OscConfig+0xcc8>)
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8003406:	4b33      	ldr	r3, [pc, #204]	; (80034d4 <HAL_RCC_OscConfig+0xcc8>)
 8003408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340a:	4a32      	ldr	r2, [pc, #200]	; (80034d4 <HAL_RCC_OscConfig+0xcc8>)
 800340c:	f043 0310 	orr.w	r3, r3, #16
 8003410:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8003412:	4b30      	ldr	r3, [pc, #192]	; (80034d4 <HAL_RCC_OscConfig+0xcc8>)
 8003414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003416:	f023 020c 	bic.w	r2, r3, #12
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800341e:	492d      	ldr	r1, [pc, #180]	; (80034d4 <HAL_RCC_OscConfig+0xcc8>)
 8003420:	4313      	orrs	r3, r2
 8003422:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8003424:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003428:	2b01      	cmp	r3, #1
 800342a:	d105      	bne.n	8003438 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800342c:	4b2a      	ldr	r3, [pc, #168]	; (80034d8 <HAL_RCC_OscConfig+0xccc>)
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	4a29      	ldr	r2, [pc, #164]	; (80034d8 <HAL_RCC_OscConfig+0xccc>)
 8003432:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003436:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8003438:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800343c:	2b01      	cmp	r3, #1
 800343e:	d107      	bne.n	8003450 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8003440:	4b24      	ldr	r3, [pc, #144]	; (80034d4 <HAL_RCC_OscConfig+0xcc8>)
 8003442:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003446:	4a23      	ldr	r2, [pc, #140]	; (80034d4 <HAL_RCC_OscConfig+0xcc8>)
 8003448:	f023 0304 	bic.w	r3, r3, #4
 800344c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003450:	4b20      	ldr	r3, [pc, #128]	; (80034d4 <HAL_RCC_OscConfig+0xcc8>)
 8003452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003454:	4a1f      	ldr	r2, [pc, #124]	; (80034d4 <HAL_RCC_OscConfig+0xcc8>)
 8003456:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800345a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800345c:	4b1d      	ldr	r3, [pc, #116]	; (80034d4 <HAL_RCC_OscConfig+0xcc8>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a1c      	ldr	r2, [pc, #112]	; (80034d4 <HAL_RCC_OscConfig+0xcc8>)
 8003462:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003466:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003468:	f7fd f9f6 	bl	8000858 <HAL_GetTick>
 800346c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003470:	f7fd f9f2 	bl	8000858 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e099      	b.n	80035b6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003482:	4b14      	ldr	r3, [pc, #80]	; (80034d4 <HAL_RCC_OscConfig+0xcc8>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d0f0      	beq.n	8003470 <HAL_RCC_OscConfig+0xc64>
 800348e:	e091      	b.n	80035b4 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003490:	4b10      	ldr	r3, [pc, #64]	; (80034d4 <HAL_RCC_OscConfig+0xcc8>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a0f      	ldr	r2, [pc, #60]	; (80034d4 <HAL_RCC_OscConfig+0xcc8>)
 8003496:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800349a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800349c:	f7fd f9dc 	bl	8000858 <HAL_GetTick>
 80034a0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034a4:	f7fd f9d8 	bl	8000858 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e07f      	b.n	80035b6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80034b6:	4b07      	ldr	r3, [pc, #28]	; (80034d4 <HAL_RCC_OscConfig+0xcc8>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1f0      	bne.n	80034a4 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80034c2:	4b04      	ldr	r3, [pc, #16]	; (80034d4 <HAL_RCC_OscConfig+0xcc8>)
 80034c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c6:	4a03      	ldr	r2, [pc, #12]	; (80034d4 <HAL_RCC_OscConfig+0xcc8>)
 80034c8:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80034cc:	f023 0303 	bic.w	r3, r3, #3
 80034d0:	6293      	str	r3, [r2, #40]	; 0x28
 80034d2:	e06f      	b.n	80035b4 <HAL_RCC_OscConfig+0xda8>
 80034d4:	46020c00 	.word	0x46020c00
 80034d8:	46020800 	.word	0x46020800
 80034dc:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80034e0:	4b37      	ldr	r3, [pc, #220]	; (80035c0 <HAL_RCC_OscConfig+0xdb4>)
 80034e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e4:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80034e6:	4b36      	ldr	r3, [pc, #216]	; (80035c0 <HAL_RCC_OscConfig+0xdb4>)
 80034e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ea:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d039      	beq.n	8003568 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	f003 0203 	and.w	r2, r3, #3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034fe:	429a      	cmp	r2, r3
 8003500:	d132      	bne.n	8003568 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	0a1b      	lsrs	r3, r3, #8
 8003506:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003510:	429a      	cmp	r2, r3
 8003512:	d129      	bne.n	8003568 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800351e:	429a      	cmp	r2, r3
 8003520:	d122      	bne.n	8003568 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800352c:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800352e:	429a      	cmp	r2, r3
 8003530:	d11a      	bne.n	8003568 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	0a5b      	lsrs	r3, r3, #9
 8003536:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800353e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003540:	429a      	cmp	r2, r3
 8003542:	d111      	bne.n	8003568 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	0c1b      	lsrs	r3, r3, #16
 8003548:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003550:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003552:	429a      	cmp	r2, r3
 8003554:	d108      	bne.n	8003568 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	0e1b      	lsrs	r3, r3, #24
 800355a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003562:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003564:	429a      	cmp	r2, r3
 8003566:	d001      	beq.n	800356c <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e024      	b.n	80035b6 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800356c:	4b14      	ldr	r3, [pc, #80]	; (80035c0 <HAL_RCC_OscConfig+0xdb4>)
 800356e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003570:	08db      	lsrs	r3, r3, #3
 8003572:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800357a:	429a      	cmp	r2, r3
 800357c:	d01a      	beq.n	80035b4 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800357e:	4b10      	ldr	r3, [pc, #64]	; (80035c0 <HAL_RCC_OscConfig+0xdb4>)
 8003580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003582:	4a0f      	ldr	r2, [pc, #60]	; (80035c0 <HAL_RCC_OscConfig+0xdb4>)
 8003584:	f023 0310 	bic.w	r3, r3, #16
 8003588:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358a:	f7fd f965 	bl	8000858 <HAL_GetTick>
 800358e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8003590:	bf00      	nop
 8003592:	f7fd f961 	bl	8000858 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800359a:	4293      	cmp	r3, r2
 800359c:	d0f9      	beq.n	8003592 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a2:	4a07      	ldr	r2, [pc, #28]	; (80035c0 <HAL_RCC_OscConfig+0xdb4>)
 80035a4:	00db      	lsls	r3, r3, #3
 80035a6:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80035a8:	4b05      	ldr	r3, [pc, #20]	; (80035c0 <HAL_RCC_OscConfig+0xdb4>)
 80035aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ac:	4a04      	ldr	r2, [pc, #16]	; (80035c0 <HAL_RCC_OscConfig+0xdb4>)
 80035ae:	f043 0310 	orr.w	r3, r3, #16
 80035b2:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3738      	adds	r7, #56	; 0x38
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	46020c00 	.word	0x46020c00

080035c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d101      	bne.n	80035d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e1d9      	b.n	800398c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035d8:	4b9b      	ldr	r3, [pc, #620]	; (8003848 <HAL_RCC_ClockConfig+0x284>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 030f 	and.w	r3, r3, #15
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d910      	bls.n	8003608 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035e6:	4b98      	ldr	r3, [pc, #608]	; (8003848 <HAL_RCC_ClockConfig+0x284>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f023 020f 	bic.w	r2, r3, #15
 80035ee:	4996      	ldr	r1, [pc, #600]	; (8003848 <HAL_RCC_ClockConfig+0x284>)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f6:	4b94      	ldr	r3, [pc, #592]	; (8003848 <HAL_RCC_ClockConfig+0x284>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 030f 	and.w	r3, r3, #15
 80035fe:	683a      	ldr	r2, [r7, #0]
 8003600:	429a      	cmp	r2, r3
 8003602:	d001      	beq.n	8003608 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e1c1      	b.n	800398c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0310 	and.w	r3, r3, #16
 8003610:	2b00      	cmp	r3, #0
 8003612:	d010      	beq.n	8003636 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	695a      	ldr	r2, [r3, #20]
 8003618:	4b8c      	ldr	r3, [pc, #560]	; (800384c <HAL_RCC_ClockConfig+0x288>)
 800361a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003620:	429a      	cmp	r2, r3
 8003622:	d908      	bls.n	8003636 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8003624:	4b89      	ldr	r3, [pc, #548]	; (800384c <HAL_RCC_ClockConfig+0x288>)
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	4986      	ldr	r1, [pc, #536]	; (800384c <HAL_RCC_ClockConfig+0x288>)
 8003632:	4313      	orrs	r3, r2
 8003634:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0308 	and.w	r3, r3, #8
 800363e:	2b00      	cmp	r3, #0
 8003640:	d012      	beq.n	8003668 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	691a      	ldr	r2, [r3, #16]
 8003646:	4b81      	ldr	r3, [pc, #516]	; (800384c <HAL_RCC_ClockConfig+0x288>)
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	091b      	lsrs	r3, r3, #4
 800364c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003650:	429a      	cmp	r2, r3
 8003652:	d909      	bls.n	8003668 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003654:	4b7d      	ldr	r3, [pc, #500]	; (800384c <HAL_RCC_ClockConfig+0x288>)
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	011b      	lsls	r3, r3, #4
 8003662:	497a      	ldr	r1, [pc, #488]	; (800384c <HAL_RCC_ClockConfig+0x288>)
 8003664:	4313      	orrs	r3, r2
 8003666:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	2b00      	cmp	r3, #0
 8003672:	d010      	beq.n	8003696 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68da      	ldr	r2, [r3, #12]
 8003678:	4b74      	ldr	r3, [pc, #464]	; (800384c <HAL_RCC_ClockConfig+0x288>)
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003680:	429a      	cmp	r2, r3
 8003682:	d908      	bls.n	8003696 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003684:	4b71      	ldr	r3, [pc, #452]	; (800384c <HAL_RCC_ClockConfig+0x288>)
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	496e      	ldr	r1, [pc, #440]	; (800384c <HAL_RCC_ClockConfig+0x288>)
 8003692:	4313      	orrs	r3, r2
 8003694:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d010      	beq.n	80036c4 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	689a      	ldr	r2, [r3, #8]
 80036a6:	4b69      	ldr	r3, [pc, #420]	; (800384c <HAL_RCC_ClockConfig+0x288>)
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	f003 030f 	and.w	r3, r3, #15
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d908      	bls.n	80036c4 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80036b2:	4b66      	ldr	r3, [pc, #408]	; (800384c <HAL_RCC_ClockConfig+0x288>)
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	f023 020f 	bic.w	r2, r3, #15
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	4963      	ldr	r1, [pc, #396]	; (800384c <HAL_RCC_ClockConfig+0x288>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f000 80d2 	beq.w	8003876 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80036d2:	2300      	movs	r3, #0
 80036d4:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2b03      	cmp	r3, #3
 80036dc:	d143      	bne.n	8003766 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036de:	4b5b      	ldr	r3, [pc, #364]	; (800384c <HAL_RCC_ClockConfig+0x288>)
 80036e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036e4:	f003 0304 	and.w	r3, r3, #4
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d110      	bne.n	800370e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80036ec:	4b57      	ldr	r3, [pc, #348]	; (800384c <HAL_RCC_ClockConfig+0x288>)
 80036ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036f2:	4a56      	ldr	r2, [pc, #344]	; (800384c <HAL_RCC_ClockConfig+0x288>)
 80036f4:	f043 0304 	orr.w	r3, r3, #4
 80036f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80036fc:	4b53      	ldr	r3, [pc, #332]	; (800384c <HAL_RCC_ClockConfig+0x288>)
 80036fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003702:	f003 0304 	and.w	r3, r3, #4
 8003706:	60bb      	str	r3, [r7, #8]
 8003708:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800370a:	2301      	movs	r3, #1
 800370c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800370e:	f7fd f8a3 	bl	8000858 <HAL_GetTick>
 8003712:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8003714:	4b4e      	ldr	r3, [pc, #312]	; (8003850 <HAL_RCC_ClockConfig+0x28c>)
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00f      	beq.n	8003740 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003720:	e008      	b.n	8003734 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8003722:	f7fd f899 	bl	8000858 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d901      	bls.n	8003734 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e12b      	b.n	800398c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003734:	4b46      	ldr	r3, [pc, #280]	; (8003850 <HAL_RCC_ClockConfig+0x28c>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0f0      	beq.n	8003722 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003740:	7dfb      	ldrb	r3, [r7, #23]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d107      	bne.n	8003756 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003746:	4b41      	ldr	r3, [pc, #260]	; (800384c <HAL_RCC_ClockConfig+0x288>)
 8003748:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800374c:	4a3f      	ldr	r2, [pc, #252]	; (800384c <HAL_RCC_ClockConfig+0x288>)
 800374e:	f023 0304 	bic.w	r3, r3, #4
 8003752:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003756:	4b3d      	ldr	r3, [pc, #244]	; (800384c <HAL_RCC_ClockConfig+0x288>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d121      	bne.n	80037a6 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e112      	b.n	800398c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b02      	cmp	r3, #2
 800376c:	d107      	bne.n	800377e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800376e:	4b37      	ldr	r3, [pc, #220]	; (800384c <HAL_RCC_ClockConfig+0x288>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d115      	bne.n	80037a6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e106      	b.n	800398c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d107      	bne.n	8003796 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003786:	4b31      	ldr	r3, [pc, #196]	; (800384c <HAL_RCC_ClockConfig+0x288>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0304 	and.w	r3, r3, #4
 800378e:	2b00      	cmp	r3, #0
 8003790:	d109      	bne.n	80037a6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e0fa      	b.n	800398c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003796:	4b2d      	ldr	r3, [pc, #180]	; (800384c <HAL_RCC_ClockConfig+0x288>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e0f2      	b.n	800398c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80037a6:	4b29      	ldr	r3, [pc, #164]	; (800384c <HAL_RCC_ClockConfig+0x288>)
 80037a8:	69db      	ldr	r3, [r3, #28]
 80037aa:	f023 0203 	bic.w	r2, r3, #3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	4926      	ldr	r1, [pc, #152]	; (800384c <HAL_RCC_ClockConfig+0x288>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80037b8:	f7fd f84e 	bl	8000858 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	2b03      	cmp	r3, #3
 80037c4:	d112      	bne.n	80037ec <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037c6:	e00a      	b.n	80037de <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037c8:	f7fd f846 	bl	8000858 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e0d6      	b.n	800398c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037de:	4b1b      	ldr	r3, [pc, #108]	; (800384c <HAL_RCC_ClockConfig+0x288>)
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	f003 030c 	and.w	r3, r3, #12
 80037e6:	2b0c      	cmp	r3, #12
 80037e8:	d1ee      	bne.n	80037c8 <HAL_RCC_ClockConfig+0x204>
 80037ea:	e044      	b.n	8003876 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d112      	bne.n	800381a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80037f4:	e00a      	b.n	800380c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037f6:	f7fd f82f 	bl	8000858 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	f241 3288 	movw	r2, #5000	; 0x1388
 8003804:	4293      	cmp	r3, r2
 8003806:	d901      	bls.n	800380c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e0bf      	b.n	800398c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800380c:	4b0f      	ldr	r3, [pc, #60]	; (800384c <HAL_RCC_ClockConfig+0x288>)
 800380e:	69db      	ldr	r3, [r3, #28]
 8003810:	f003 030c 	and.w	r3, r3, #12
 8003814:	2b08      	cmp	r3, #8
 8003816:	d1ee      	bne.n	80037f6 <HAL_RCC_ClockConfig+0x232>
 8003818:	e02d      	b.n	8003876 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d123      	bne.n	800386a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003822:	e00a      	b.n	800383a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003824:	f7fd f818 	bl	8000858 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003832:	4293      	cmp	r3, r2
 8003834:	d901      	bls.n	800383a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e0a8      	b.n	800398c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800383a:	4b04      	ldr	r3, [pc, #16]	; (800384c <HAL_RCC_ClockConfig+0x288>)
 800383c:	69db      	ldr	r3, [r3, #28]
 800383e:	f003 030c 	and.w	r3, r3, #12
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1ee      	bne.n	8003824 <HAL_RCC_ClockConfig+0x260>
 8003846:	e016      	b.n	8003876 <HAL_RCC_ClockConfig+0x2b2>
 8003848:	40022000 	.word	0x40022000
 800384c:	46020c00 	.word	0x46020c00
 8003850:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003854:	f7fd f800 	bl	8000858 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003862:	4293      	cmp	r3, r2
 8003864:	d901      	bls.n	800386a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e090      	b.n	800398c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800386a:	4b4a      	ldr	r3, [pc, #296]	; (8003994 <HAL_RCC_ClockConfig+0x3d0>)
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	f003 030c 	and.w	r3, r3, #12
 8003872:	2b04      	cmp	r3, #4
 8003874:	d1ee      	bne.n	8003854 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d010      	beq.n	80038a4 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689a      	ldr	r2, [r3, #8]
 8003886:	4b43      	ldr	r3, [pc, #268]	; (8003994 <HAL_RCC_ClockConfig+0x3d0>)
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	f003 030f 	and.w	r3, r3, #15
 800388e:	429a      	cmp	r2, r3
 8003890:	d208      	bcs.n	80038a4 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8003892:	4b40      	ldr	r3, [pc, #256]	; (8003994 <HAL_RCC_ClockConfig+0x3d0>)
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	f023 020f 	bic.w	r2, r3, #15
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	493d      	ldr	r1, [pc, #244]	; (8003994 <HAL_RCC_ClockConfig+0x3d0>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038a4:	4b3c      	ldr	r3, [pc, #240]	; (8003998 <HAL_RCC_ClockConfig+0x3d4>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 030f 	and.w	r3, r3, #15
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d210      	bcs.n	80038d4 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038b2:	4b39      	ldr	r3, [pc, #228]	; (8003998 <HAL_RCC_ClockConfig+0x3d4>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f023 020f 	bic.w	r2, r3, #15
 80038ba:	4937      	ldr	r1, [pc, #220]	; (8003998 <HAL_RCC_ClockConfig+0x3d4>)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	4313      	orrs	r3, r2
 80038c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038c2:	4b35      	ldr	r3, [pc, #212]	; (8003998 <HAL_RCC_ClockConfig+0x3d4>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 030f 	and.w	r3, r3, #15
 80038ca:	683a      	ldr	r2, [r7, #0]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d001      	beq.n	80038d4 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e05b      	b.n	800398c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0304 	and.w	r3, r3, #4
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d010      	beq.n	8003902 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68da      	ldr	r2, [r3, #12]
 80038e4:	4b2b      	ldr	r3, [pc, #172]	; (8003994 <HAL_RCC_ClockConfig+0x3d0>)
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d208      	bcs.n	8003902 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80038f0:	4b28      	ldr	r3, [pc, #160]	; (8003994 <HAL_RCC_ClockConfig+0x3d0>)
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	4925      	ldr	r1, [pc, #148]	; (8003994 <HAL_RCC_ClockConfig+0x3d0>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0308 	and.w	r3, r3, #8
 800390a:	2b00      	cmp	r3, #0
 800390c:	d012      	beq.n	8003934 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	691a      	ldr	r2, [r3, #16]
 8003912:	4b20      	ldr	r3, [pc, #128]	; (8003994 <HAL_RCC_ClockConfig+0x3d0>)
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	091b      	lsrs	r3, r3, #4
 8003918:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800391c:	429a      	cmp	r2, r3
 800391e:	d209      	bcs.n	8003934 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003920:	4b1c      	ldr	r3, [pc, #112]	; (8003994 <HAL_RCC_ClockConfig+0x3d0>)
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	011b      	lsls	r3, r3, #4
 800392e:	4919      	ldr	r1, [pc, #100]	; (8003994 <HAL_RCC_ClockConfig+0x3d0>)
 8003930:	4313      	orrs	r3, r2
 8003932:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0310 	and.w	r3, r3, #16
 800393c:	2b00      	cmp	r3, #0
 800393e:	d010      	beq.n	8003962 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	695a      	ldr	r2, [r3, #20]
 8003944:	4b13      	ldr	r3, [pc, #76]	; (8003994 <HAL_RCC_ClockConfig+0x3d0>)
 8003946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003948:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800394c:	429a      	cmp	r2, r3
 800394e:	d208      	bcs.n	8003962 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8003950:	4b10      	ldr	r3, [pc, #64]	; (8003994 <HAL_RCC_ClockConfig+0x3d0>)
 8003952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003954:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	490d      	ldr	r1, [pc, #52]	; (8003994 <HAL_RCC_ClockConfig+0x3d0>)
 800395e:	4313      	orrs	r3, r2
 8003960:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003962:	f000 f821 	bl	80039a8 <HAL_RCC_GetSysClockFreq>
 8003966:	4602      	mov	r2, r0
 8003968:	4b0a      	ldr	r3, [pc, #40]	; (8003994 <HAL_RCC_ClockConfig+0x3d0>)
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	f003 030f 	and.w	r3, r3, #15
 8003970:	490a      	ldr	r1, [pc, #40]	; (800399c <HAL_RCC_ClockConfig+0x3d8>)
 8003972:	5ccb      	ldrb	r3, [r1, r3]
 8003974:	fa22 f303 	lsr.w	r3, r2, r3
 8003978:	4a09      	ldr	r2, [pc, #36]	; (80039a0 <HAL_RCC_ClockConfig+0x3dc>)
 800397a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800397c:	4b09      	ldr	r3, [pc, #36]	; (80039a4 <HAL_RCC_ClockConfig+0x3e0>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4618      	mov	r0, r3
 8003982:	f7fc ff1f 	bl	80007c4 <HAL_InitTick>
 8003986:	4603      	mov	r3, r0
 8003988:	73fb      	strb	r3, [r7, #15]

  return status;
 800398a:	7bfb      	ldrb	r3, [r7, #15]
}
 800398c:	4618      	mov	r0, r3
 800398e:	3718      	adds	r7, #24
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	46020c00 	.word	0x46020c00
 8003998:	40022000 	.word	0x40022000
 800399c:	08003dc4 	.word	0x08003dc4
 80039a0:	20000058 	.word	0x20000058
 80039a4:	2000005c 	.word	0x2000005c

080039a8 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b08b      	sub	sp, #44	; 0x2c
 80039ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80039b2:	2300      	movs	r3, #0
 80039b4:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039b6:	4b78      	ldr	r3, [pc, #480]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80039b8:	69db      	ldr	r3, [r3, #28]
 80039ba:	f003 030c 	and.w	r3, r3, #12
 80039be:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039c0:	4b75      	ldr	r3, [pc, #468]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80039c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c4:	f003 0303 	and.w	r3, r3, #3
 80039c8:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d005      	beq.n	80039dc <HAL_RCC_GetSysClockFreq+0x34>
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	2b0c      	cmp	r3, #12
 80039d4:	d121      	bne.n	8003a1a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d11e      	bne.n	8003a1a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80039dc:	4b6e      	ldr	r3, [pc, #440]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d107      	bne.n	80039f8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80039e8:	4b6b      	ldr	r3, [pc, #428]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80039ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80039ee:	0b1b      	lsrs	r3, r3, #12
 80039f0:	f003 030f 	and.w	r3, r3, #15
 80039f4:	627b      	str	r3, [r7, #36]	; 0x24
 80039f6:	e005      	b.n	8003a04 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80039f8:	4b67      	ldr	r3, [pc, #412]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	0f1b      	lsrs	r3, r3, #28
 80039fe:	f003 030f 	and.w	r3, r3, #15
 8003a02:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a04:	4a65      	ldr	r2, [pc, #404]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a0c:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d110      	bne.n	8003a36 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a16:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003a18:	e00d      	b.n	8003a36 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a1a:	4b5f      	ldr	r3, [pc, #380]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003a1c:	69db      	ldr	r3, [r3, #28]
 8003a1e:	f003 030c 	and.w	r3, r3, #12
 8003a22:	2b04      	cmp	r3, #4
 8003a24:	d102      	bne.n	8003a2c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a26:	4b5e      	ldr	r3, [pc, #376]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003a28:	623b      	str	r3, [r7, #32]
 8003a2a:	e004      	b.n	8003a36 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	2b08      	cmp	r3, #8
 8003a30:	d101      	bne.n	8003a36 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a32:	4b5b      	ldr	r3, [pc, #364]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003a34:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	2b0c      	cmp	r3, #12
 8003a3a:	f040 80a5 	bne.w	8003b88 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003a3e:	4b56      	ldr	r3, [pc, #344]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a42:	f003 0303 	and.w	r3, r3, #3
 8003a46:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003a48:	4b53      	ldr	r3, [pc, #332]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4c:	0a1b      	lsrs	r3, r3, #8
 8003a4e:	f003 030f 	and.w	r3, r3, #15
 8003a52:	3301      	adds	r3, #1
 8003a54:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003a56:	4b50      	ldr	r3, [pc, #320]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5a:	091b      	lsrs	r3, r3, #4
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003a62:	4b4d      	ldr	r3, [pc, #308]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a66:	08db      	lsrs	r3, r3, #3
 8003a68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	fb02 f303 	mul.w	r3, r2, r3
 8003a72:	ee07 3a90 	vmov	s15, r3
 8003a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a7a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d003      	beq.n	8003a8c <HAL_RCC_GetSysClockFreq+0xe4>
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	2b03      	cmp	r3, #3
 8003a88:	d022      	beq.n	8003ad0 <HAL_RCC_GetSysClockFreq+0x128>
 8003a8a:	e043      	b.n	8003b14 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	ee07 3a90 	vmov	s15, r3
 8003a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a96:	eddf 6a43 	vldr	s13, [pc, #268]	; 8003ba4 <HAL_RCC_GetSysClockFreq+0x1fc>
 8003a9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a9e:	4b3e      	ldr	r3, [pc, #248]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aa6:	ee07 3a90 	vmov	s15, r3
 8003aaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003aae:	ed97 6a01 	vldr	s12, [r7, #4]
 8003ab2:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8003ba8 <HAL_RCC_GetSysClockFreq+0x200>
 8003ab6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003aba:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003abe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ace:	e046      	b.n	8003b5e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	ee07 3a90 	vmov	s15, r3
 8003ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ada:	eddf 6a32 	vldr	s13, [pc, #200]	; 8003ba4 <HAL_RCC_GetSysClockFreq+0x1fc>
 8003ade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ae2:	4b2d      	ldr	r3, [pc, #180]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aea:	ee07 3a90 	vmov	s15, r3
 8003aee:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003af2:	ed97 6a01 	vldr	s12, [r7, #4]
 8003af6:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8003ba8 <HAL_RCC_GetSysClockFreq+0x200>
 8003afa:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003afe:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003b02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b06:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b12:	e024      	b.n	8003b5e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b16:	ee07 3a90 	vmov	s15, r3
 8003b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	ee07 3a90 	vmov	s15, r3
 8003b24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b2c:	4b1a      	ldr	r3, [pc, #104]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b34:	ee07 3a90 	vmov	s15, r3
 8003b38:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003b3c:	ed97 6a01 	vldr	s12, [r7, #4]
 8003b40:	eddf 5a19 	vldr	s11, [pc, #100]	; 8003ba8 <HAL_RCC_GetSysClockFreq+0x200>
 8003b44:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003b48:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003b4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b50:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003b54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b58:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b5c:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8003b5e:	4b0e      	ldr	r3, [pc, #56]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b62:	0e1b      	lsrs	r3, r3, #24
 8003b64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b68:	3301      	adds	r3, #1
 8003b6a:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	ee07 3a90 	vmov	s15, r3
 8003b72:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b76:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b82:	ee17 3a90 	vmov	r3, s15
 8003b86:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8003b88:	6a3b      	ldr	r3, [r7, #32]
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	372c      	adds	r7, #44	; 0x2c
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	46020c00 	.word	0x46020c00
 8003b9c:	08003dd4 	.word	0x08003dd4
 8003ba0:	00f42400 	.word	0x00f42400
 8003ba4:	4b742400 	.word	0x4b742400
 8003ba8:	46000000 	.word	0x46000000

08003bac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003bb0:	f7ff fefa 	bl	80039a8 <HAL_RCC_GetSysClockFreq>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	4b07      	ldr	r3, [pc, #28]	; (8003bd4 <HAL_RCC_GetHCLKFreq+0x28>)
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	f003 030f 	and.w	r3, r3, #15
 8003bbe:	4906      	ldr	r1, [pc, #24]	; (8003bd8 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003bc0:	5ccb      	ldrb	r3, [r1, r3]
 8003bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8003bc6:	4a05      	ldr	r2, [pc, #20]	; (8003bdc <HAL_RCC_GetHCLKFreq+0x30>)
 8003bc8:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8003bca:	4b04      	ldr	r3, [pc, #16]	; (8003bdc <HAL_RCC_GetHCLKFreq+0x30>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	46020c00 	.word	0x46020c00
 8003bd8:	08003dc4 	.word	0x08003dc4
 8003bdc:	20000058 	.word	0x20000058

08003be0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003be8:	4b3e      	ldr	r3, [pc, #248]	; (8003ce4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003bea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bee:	f003 0304 	and.w	r3, r3, #4
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003bf6:	f7fe fd9b 	bl	8002730 <HAL_PWREx_GetVoltageRange>
 8003bfa:	6178      	str	r0, [r7, #20]
 8003bfc:	e019      	b.n	8003c32 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bfe:	4b39      	ldr	r3, [pc, #228]	; (8003ce4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003c00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c04:	4a37      	ldr	r2, [pc, #220]	; (8003ce4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003c06:	f043 0304 	orr.w	r3, r3, #4
 8003c0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003c0e:	4b35      	ldr	r3, [pc, #212]	; (8003ce4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	60fb      	str	r3, [r7, #12]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c1c:	f7fe fd88 	bl	8002730 <HAL_PWREx_GetVoltageRange>
 8003c20:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c22:	4b30      	ldr	r3, [pc, #192]	; (8003ce4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003c24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c28:	4a2e      	ldr	r2, [pc, #184]	; (8003ce4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003c2a:	f023 0304 	bic.w	r3, r3, #4
 8003c2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c38:	d003      	beq.n	8003c42 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c40:	d109      	bne.n	8003c56 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c48:	d202      	bcs.n	8003c50 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003c4e:	e033      	b.n	8003cb8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8003c50:	2300      	movs	r3, #0
 8003c52:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003c54:	e030      	b.n	8003cb8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c5c:	d208      	bcs.n	8003c70 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c64:	d102      	bne.n	8003c6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8003c66:	2303      	movs	r3, #3
 8003c68:	613b      	str	r3, [r7, #16]
 8003c6a:	e025      	b.n	8003cb8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e035      	b.n	8003cdc <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c76:	d90f      	bls.n	8003c98 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d109      	bne.n	8003c92 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c84:	d902      	bls.n	8003c8c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8003c86:	2300      	movs	r3, #0
 8003c88:	613b      	str	r3, [r7, #16]
 8003c8a:	e015      	b.n	8003cb8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	613b      	str	r3, [r7, #16]
 8003c90:	e012      	b.n	8003cb8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8003c92:	2300      	movs	r3, #0
 8003c94:	613b      	str	r3, [r7, #16]
 8003c96:	e00f      	b.n	8003cb8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c9e:	d109      	bne.n	8003cb4 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ca6:	d102      	bne.n	8003cae <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8003ca8:	2301      	movs	r3, #1
 8003caa:	613b      	str	r3, [r7, #16]
 8003cac:	e004      	b.n	8003cb8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8003cae:	2302      	movs	r3, #2
 8003cb0:	613b      	str	r3, [r7, #16]
 8003cb2:	e001      	b.n	8003cb8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003cb8:	4b0b      	ldr	r3, [pc, #44]	; (8003ce8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f023 020f 	bic.w	r2, r3, #15
 8003cc0:	4909      	ldr	r1, [pc, #36]	; (8003ce8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003cc8:	4b07      	ldr	r3, [pc, #28]	; (8003ce8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 030f 	and.w	r3, r3, #15
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d001      	beq.n	8003cda <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e000      	b.n	8003cdc <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3718      	adds	r7, #24
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	46020c00 	.word	0x46020c00
 8003ce8:	40022000 	.word	0x40022000

08003cec <memcmp>:
 8003cec:	3901      	subs	r1, #1
 8003cee:	4402      	add	r2, r0
 8003cf0:	b510      	push	{r4, lr}
 8003cf2:	4290      	cmp	r0, r2
 8003cf4:	d101      	bne.n	8003cfa <memcmp+0xe>
 8003cf6:	2000      	movs	r0, #0
 8003cf8:	e005      	b.n	8003d06 <memcmp+0x1a>
 8003cfa:	7803      	ldrb	r3, [r0, #0]
 8003cfc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003d00:	42a3      	cmp	r3, r4
 8003d02:	d001      	beq.n	8003d08 <memcmp+0x1c>
 8003d04:	1b18      	subs	r0, r3, r4
 8003d06:	bd10      	pop	{r4, pc}
 8003d08:	3001      	adds	r0, #1
 8003d0a:	e7f2      	b.n	8003cf2 <memcmp+0x6>

08003d0c <memset>:
 8003d0c:	4402      	add	r2, r0
 8003d0e:	4603      	mov	r3, r0
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d100      	bne.n	8003d16 <memset+0xa>
 8003d14:	4770      	bx	lr
 8003d16:	f803 1b01 	strb.w	r1, [r3], #1
 8003d1a:	e7f9      	b.n	8003d10 <memset+0x4>

08003d1c <__libc_init_array>:
 8003d1c:	b570      	push	{r4, r5, r6, lr}
 8003d1e:	4d0d      	ldr	r5, [pc, #52]	; (8003d54 <__libc_init_array+0x38>)
 8003d20:	2600      	movs	r6, #0
 8003d22:	4c0d      	ldr	r4, [pc, #52]	; (8003d58 <__libc_init_array+0x3c>)
 8003d24:	1b64      	subs	r4, r4, r5
 8003d26:	10a4      	asrs	r4, r4, #2
 8003d28:	42a6      	cmp	r6, r4
 8003d2a:	d109      	bne.n	8003d40 <__libc_init_array+0x24>
 8003d2c:	4d0b      	ldr	r5, [pc, #44]	; (8003d5c <__libc_init_array+0x40>)
 8003d2e:	2600      	movs	r6, #0
 8003d30:	4c0b      	ldr	r4, [pc, #44]	; (8003d60 <__libc_init_array+0x44>)
 8003d32:	f000 f817 	bl	8003d64 <_init>
 8003d36:	1b64      	subs	r4, r4, r5
 8003d38:	10a4      	asrs	r4, r4, #2
 8003d3a:	42a6      	cmp	r6, r4
 8003d3c:	d105      	bne.n	8003d4a <__libc_init_array+0x2e>
 8003d3e:	bd70      	pop	{r4, r5, r6, pc}
 8003d40:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d44:	3601      	adds	r6, #1
 8003d46:	4798      	blx	r3
 8003d48:	e7ee      	b.n	8003d28 <__libc_init_array+0xc>
 8003d4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d4e:	3601      	adds	r6, #1
 8003d50:	4798      	blx	r3
 8003d52:	e7f2      	b.n	8003d3a <__libc_init_array+0x1e>
 8003d54:	08003e94 	.word	0x08003e94
 8003d58:	08003e94 	.word	0x08003e94
 8003d5c:	08003e94 	.word	0x08003e94
 8003d60:	08003e98 	.word	0x08003e98

08003d64 <_init>:
 8003d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d66:	bf00      	nop
 8003d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d6a:	bc08      	pop	{r3}
 8003d6c:	469e      	mov	lr, r3
 8003d6e:	4770      	bx	lr

08003d70 <_fini>:
 8003d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d72:	bf00      	nop
 8003d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d76:	bc08      	pop	{r3}
 8003d78:	469e      	mov	lr, r3
 8003d7a:	4770      	bx	lr
